
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeStudFeeItem.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using UMIS_VER2.BusinessLyer;
using UMIS_VER2.BusinessLyer.Validation;
//using Entities = UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace UMIS_VER2
{		
	
	///<summary>
	/// An object representation of the 'FEE_STUD_FEE_ITEM' table.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the FeeStudFeeItem.cs file instead.
	/// All custom implementations should be done in the <see cref="FeeStudFeeItem"/> class.
	/// </remarks>
	[DataObject]
	[CLSCompliant(true)]
	public partial class FeeStudFeeItemServiceBase : ServiceBase<FeeStudFeeItem, FeeStudFeeItemKey>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeStudFeeItem"/> instance .
		///</summary>
		public FeeStudFeeItemServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeStudFeeItem"/> instance.
		///</summary>
		///<param name="_feeStudFeeItemId">بنود المصروفات على  طالب</param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_feeCodeTypeId"></param>
		///<param name="_feeFacultyItemId"></param>
		///<param name="_feeItemValue">القيمة الفعلية للبند</param>
		///<param name="_remainAmount">remain on student only</param>
		///<param name="_gsCodeCurrencyId">قيمة التخفيض</param>
		///<param name="_discAmount">قيمة الكفالة</param>
		///<param name="_spoAmount">KU NEW</param>
		///<param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		///<param name="_edCodeSemActvityId"></param>
		///<param name="_transId"></param>
		///<param name="_itemDesc"></param>
		///<param name="_notes"></param>
		///<param name="_dueDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_loadDate"></param>
		///<param name="_seFormId"></param>
		public static FeeStudFeeItem CreateFeeStudFeeItem(System.Decimal _feeStudFeeItemId, System.Decimal? _asFacultyInfoId, System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, System.Decimal _feeCodeTypeId, System.Decimal? _feeFacultyItemId, System.Decimal _feeItemValue, System.Decimal _remainAmount, System.Decimal _gsCodeCurrencyId, System.Decimal? _discAmount, System.Decimal? _spoAmount, System.Decimal _feeCodeItemId, System.Decimal? _edCodeSemActvityId, System.Decimal? _transId, System.String _itemDesc, System.String _notes, System.DateTime? _dueDate, System.Decimal? _seUserId, System.DateTime? _lastDate, System.DateTime? _loadDate, System.Decimal? _seFormId)
		{
			FeeStudFeeItem newEntityFeeStudFeeItem = new FeeStudFeeItem();
			newEntityFeeStudFeeItem.FeeStudFeeItemId  = _feeStudFeeItemId;
			newEntityFeeStudFeeItem.AsFacultyInfoId  = _asFacultyInfoId;
			newEntityFeeStudFeeItem.EdAcadYearId  = _edAcadYearId;
			newEntityFeeStudFeeItem.EdCodeSemesterId  = _edCodeSemesterId;
			newEntityFeeStudFeeItem.EdStudId  = _edStudId;
			newEntityFeeStudFeeItem.FeeCodeTypeId  = _feeCodeTypeId;
			newEntityFeeStudFeeItem.FeeFacultyItemId  = _feeFacultyItemId;
			newEntityFeeStudFeeItem.FeeItemValue  = _feeItemValue;
			newEntityFeeStudFeeItem.RemainAmount  = _remainAmount;
			newEntityFeeStudFeeItem.GsCodeCurrencyId  = _gsCodeCurrencyId;
			newEntityFeeStudFeeItem.DiscAmount  = _discAmount;
			newEntityFeeStudFeeItem.SpoAmount  = _spoAmount;
			newEntityFeeStudFeeItem.FeeCodeItemId  = _feeCodeItemId;
			newEntityFeeStudFeeItem.EdCodeSemActvityId  = _edCodeSemActvityId;
			newEntityFeeStudFeeItem.TransId  = _transId;
			newEntityFeeStudFeeItem.ItemDesc  = _itemDesc;
			newEntityFeeStudFeeItem.Notes  = _notes;
			newEntityFeeStudFeeItem.DueDate  = _dueDate;
			newEntityFeeStudFeeItem.SeUserId  = _seUserId;
			newEntityFeeStudFeeItem.LastDate  = _lastDate;
			newEntityFeeStudFeeItem.LoadDate  = _loadDate;
			newEntityFeeStudFeeItem.SeFormId  = _seFormId;
			return newEntityFeeStudFeeItem;
		}
		#endregion Constructors

		#region Fields
		private static SecurityContext<FeeStudFeeItem> securityContext = new SecurityContext<FeeStudFeeItem>();
		private static readonly string layerExceptionPolicy = "ServiceLayerExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		#endregion 
		
		#region SecurityContext
		///<summary>
		/// Contains all necessary information to validate and authorize the 
		/// call of the method with the Principal and Roles of the current user.
		///</summary>
		public static SecurityContext<FeeStudFeeItem> SecurityContext
		{
			get
			{
				return securityContext;	
			}	
		}
		#endregion 
		
		#region Data Access Methods
		
		#region GetByForeignKey Methods
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_AUTO_003c key.
		///		FK_AUTO_003c Description: 
		/// </summary>
		/// <param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		/// <returns>Returns a generic collection of FeeStudFeeItem objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByFeeCodeItemId(System.Decimal _feeCodeItemId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeCodeItemId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetByFeeCodeItemId(transactionManager, _feeCodeItemId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_AUTO_003c key.
		///		FK_AUTO_003c Description: 
		/// </summary>
		/// <param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{FeeStudFeeItem}" /> of <c>FeeStudFeeItem</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByFeeCodeItemId(System.Decimal _feeCodeItemId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeCodeItemId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetByFeeCodeItemId(transactionManager, _feeCodeItemId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_FEE_STUD_FEE_ITEM_ED_CODE_SEM_ACTVITY key.
		///		FK_FEE_STUD_FEE_ITEM_ED_CODE_SEM_ACTVITY Description: 
		/// </summary>
		/// <param name="_edCodeSemActvityId"></param>
		/// <returns>Returns a generic collection of FeeStudFeeItem objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdCodeSemActvityId(System.Decimal? _edCodeSemActvityId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdCodeSemActvityId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetByEdCodeSemActvityId(transactionManager, _edCodeSemActvityId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_FEE_STUD_FEE_ITEM_ED_CODE_SEM_ACTVITY key.
		///		FK_FEE_STUD_FEE_ITEM_ED_CODE_SEM_ACTVITY Description: 
		/// </summary>
		/// <param name="_edCodeSemActvityId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{FeeStudFeeItem}" /> of <c>FeeStudFeeItem</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdCodeSemActvityId(System.Decimal? _edCodeSemActvityId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdCodeSemActvityId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetByEdCodeSemActvityId(transactionManager, _edCodeSemActvityId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_FEE_STUD_FEE_ITEM_SE_FORM key.
		///		FK_FEE_STUD_FEE_ITEM_SE_FORM Description: 
		/// </summary>
		/// <param name="_seFormId"></param>
		/// <returns>Returns a generic collection of FeeStudFeeItem objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetBySeFormId(System.Decimal? _seFormId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySeFormId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetBySeFormId(transactionManager, _seFormId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_FEE_STUD_FEE_ITEM_SE_FORM key.
		///		FK_FEE_STUD_FEE_ITEM_SE_FORM Description: 
		/// </summary>
		/// <param name="_seFormId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{FeeStudFeeItem}" /> of <c>FeeStudFeeItem</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetBySeFormId(System.Decimal? _seFormId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySeFormId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetBySeFormId(transactionManager, _seFormId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_FEE_STUD_FEE_ITEM_SE_USER key.
		///		FK_FEE_STUD_FEE_ITEM_SE_USER Description: 
		/// </summary>
		/// <param name="_seUserId"></param>
		/// <returns>Returns a generic collection of FeeStudFeeItem objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetBySeUserId(System.Decimal? _seUserId)
		{

			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySeUserId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetBySeUserId(transactionManager, _seUserId));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		/// <summary>
		/// 	public virtual method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the FK_FEE_STUD_FEE_ITEM_SE_USER key.
		///		FK_FEE_STUD_FEE_ITEM_SE_USER Description: 
		/// </summary>
		/// <param name="_seUserId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">Out parameter, number of total rows in given query.</param>
		/// <returns>Returns a collection <see cref="TList{FeeStudFeeItem}" /> of <c>FeeStudFeeItem</c> objects.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetBySeUserId(System.Decimal? _seUserId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetBySeUserId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {					
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = new TList<FeeStudFeeItem>(dataProvider.FeeStudFeeItemProvider.GetBySeUserId(transactionManager, _seUserId, start, pageLength, out totalCount));
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion GetByForeignKey Methods
		
		#region GetByIndexes
		/// <summary>
		/// 	Gets a row from the DataSource based on its primary key.
		/// </summary>
		/// <param name="key">The unique identifier of the row to retrieve.</param>
		/// <returns>Returns an instance of the Entity class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public override FeeStudFeeItem Get(FeeStudFeeItemKey key)
		{
			return GetByFeeStudFeeItemId(key.FeeStudFeeItemId);
		}

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_AS_FACULTY_INFO_ID_1 index.
		/// </summary>
		/// <param name="_asFacultyInfoId"></param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByAsFacultyInfoId(System.Decimal? _asFacultyInfoId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAsFacultyInfoId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByAsFacultyInfoId(transactionManager, _asFacultyInfoId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_AS_FACULTY_INFO_ID_1 index.
		/// </summary>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByAsFacultyInfoId(System.Decimal? _asFacultyInfoId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByAsFacultyInfoId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByAsFacultyInfoId(transactionManager, _asFacultyInfoId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_ED_ACAD_YEAR_ID_1 index.
		/// </summary>
		/// <param name="_edAcadYearId"></param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdAcadYearId(System.Decimal _edAcadYearId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdAcadYearId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdAcadYearId(transactionManager, _edAcadYearId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_ED_ACAD_YEAR_ID_1 index.
		/// </summary>
		/// <param name="_edAcadYearId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdAcadYearId(System.Decimal _edAcadYearId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdAcadYearId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdAcadYearId(transactionManager, _edAcadYearId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_ED_CODE_SEMESTER_ID_1 index.
		/// </summary>
		/// <param name="_edCodeSemesterId"></param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdCodeSemesterId(System.Decimal? _edCodeSemesterId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdCodeSemesterId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdCodeSemesterId(transactionManager, _edCodeSemesterId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_ED_CODE_SEMESTER_ID_1 index.
		/// </summary>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdCodeSemesterId(System.Decimal? _edCodeSemesterId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdCodeSemesterId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdCodeSemesterId(transactionManager, _edCodeSemesterId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_ED_STUD_ID_1 index.
		/// </summary>
		/// <param name="_edStudId"></param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdStudId(System.Decimal _edStudId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdStudId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdStudId(transactionManager, _edStudId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_ED_STUD_ID_1 index.
		/// </summary>
		/// <param name="_edStudId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdStudId(System.Decimal _edStudId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdStudId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdStudId(transactionManager, _edStudId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_FEE_CODE_TYPE_ID_1 index.
		/// </summary>
		/// <param name="_feeCodeTypeId"></param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByFeeCodeTypeId(System.Decimal _feeCodeTypeId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeCodeTypeId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByFeeCodeTypeId(transactionManager, _feeCodeTypeId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_FEE_CODE_TYPE_ID_1 index.
		/// </summary>
		/// <param name="_feeCodeTypeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByFeeCodeTypeId(System.Decimal _feeCodeTypeId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeCodeTypeId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByFeeCodeTypeId(transactionManager, _feeCodeTypeId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_FEE_FACULTY_ITEM_ID_1 index.
		/// </summary>
		/// <param name="_feeFacultyItemId"></param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByFeeFacultyItemId(System.Decimal? _feeFacultyItemId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeFacultyItemId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByFeeFacultyItemId(transactionManager, _feeFacultyItemId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_FEE_FACULTY_ITEM_ID_1 index.
		/// </summary>
		/// <param name="_feeFacultyItemId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByFeeFacultyItemId(System.Decimal? _feeFacultyItemId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeFacultyItemId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByFeeFacultyItemId(transactionManager, _feeFacultyItemId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_GS_CODE_CURRENCY_ID_1 index.
		/// </summary>
		/// <param name="_gsCodeCurrencyId">قيمة التخفيض</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByGsCodeCurrencyId(System.Decimal _gsCodeCurrencyId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByGsCodeCurrencyId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByGsCodeCurrencyId(transactionManager, _gsCodeCurrencyId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key IX_GS_CODE_CURRENCY_ID_1 index.
		/// </summary>
		/// <param name="_gsCodeCurrencyId">قيمة التخفيض</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByGsCodeCurrencyId(System.Decimal _gsCodeCurrencyId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByGsCodeCurrencyId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByGsCodeCurrencyId(transactionManager, _gsCodeCurrencyId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key PK_FEE_STUD_FEE_ITEM index.
		/// </summary>
		/// <param name="_feeStudFeeItemId">بنود المصروفات على  طالب</param>
		/// <returns>Returns an instance of the <see cref="FeeStudFeeItem"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual FeeStudFeeItem GetByFeeStudFeeItemId(System.Decimal _feeStudFeeItemId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeStudFeeItemId");
			#endregion Security check
			
			#region Initialisation
			FeeStudFeeItem entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.FeeStudFeeItemProvider.GetByFeeStudFeeItemId(transactionManager, _feeStudFeeItemId)   as FeeStudFeeItem;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key PK_FEE_STUD_FEE_ITEM index.
		/// </summary>
		/// <param name="_feeStudFeeItemId">بنود المصروفات على  طالب</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="FeeStudFeeItem"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual FeeStudFeeItem GetByFeeStudFeeItemId(System.Decimal _feeStudFeeItemId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByFeeStudFeeItemId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			FeeStudFeeItem entity = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				entity = dataProvider.FeeStudFeeItemProvider.GetByFeeStudFeeItemId(transactionManager, _feeStudFeeItemId, start, pageLength, out totalCount)   as FeeStudFeeItem;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
	

		/// <summary>
		///  method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key UK_FEE_STUD_FEE_ITEM index.
		/// </summary>
		/// <param name="_edAcadYearId"></param>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="_edStudId"></param>
		/// <param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId(System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, System.Decimal _feeCodeItemId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId(transactionManager, _edAcadYearId, _edCodeSemesterId, _edStudId, _feeCodeItemId)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		/// <summary>
		///  Method that Gets rows in a <see cref="TList{FeeStudFeeItem}" /> from the datasource based on the primary key UK_FEE_STUD_FEE_ITEM index.
		/// </summary>
		/// <param name="_edAcadYearId"></param>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="_edStudId"></param>
		/// <param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Page length of records you would like to retrieve</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>Returns an instance of the <see cref="TList{FeeStudFeeItem}"/> class.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> GetByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId(System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, System.Decimal _feeCodeItemId, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;
				
				list = dataProvider.FeeStudFeeItemProvider.GetByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId(transactionManager, _edAcadYearId, _edCodeSemesterId, _edStudId, _feeCodeItemId, start, pageLength, out totalCount)  ;
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
	
		#endregion GetByIndexes
	
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="FeeStudFeeItem" /> entities.
		/// </summary>
		/// <returns></returns>
		public override TList<FeeStudFeeItem> GetAll() 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.FeeStudFeeItemProvider.GetAll(transactionManager);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}

		/// <summary>
		/// Get a set portion of a complete list of <see cref="FeeStudFeeItem" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{FeeStudFeeItem}"/> </returns>
		public virtual TList<FeeStudFeeItem> GetAll(int start, int pageLength, out int totalCount) 
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetAll");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.FeeStudFeeItemProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{FeeStudFeeItem}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
		public virtual TList<FeeStudFeeItem> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, int.MaxValue, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{FeeStudFeeItem}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
		public virtual TList<FeeStudFeeItem> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{FeeStudFeeItem}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
		public override TList<FeeStudFeeItem> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("GetPaged");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.FeeStudFeeItemProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, int.MaxValue, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	
				
		#region Find
		
		#region Parsed Find Methods
		
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public virtual TList<FeeStudFeeItem> Find(string whereClause)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.FeeStudFeeItemProvider.Find(transactionManager, whereClause);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}	
		
		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{FeeStudFeeItem} of <c>FeeStudFeeItem</c> objects.</returns>
		public override TList<FeeStudFeeItem> Find(string whereClause, int start, int pageLength, out int totalCount)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			totalCount = -1;
			TList<FeeStudFeeItem> list = null;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.FeeStudFeeItemProvider.Find(transactionManager, whereClause, start, pageLength, out totalCount);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			return list;
		}
		
		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods

		/// <summary>
		/// Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
		public virtual TList<FeeStudFeeItem> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, (string) null);
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
        public virtual TList<FeeStudFeeItem> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns)
        {
            return Find(parameters, sortColumns.ToString());
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
		public virtual TList<FeeStudFeeItem> Find(IFilterParameterCollection parameters, string orderBy)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			TList<FeeStudFeeItem> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.FeeStudFeeItemProvider.Find(transactionManager, parameters, orderBy);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;		
		}
		
		/// <summary>
        /// Returns rows from the DataSource that meet the parameter conditions.
        /// </summary>
        /// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
        /// <param name="sortColumns">A collection of <see cref="SqlSortColumn"/> objects.</param>
        /// <param name="start">Row number at which to start reading.</param>
        /// <param name="pageLength">Number of rows to return.</param>
        /// <param name="count">out. The number of rows that match this query.</param>
        /// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
        public virtual TList<FeeStudFeeItem> Find(IFilterParameterCollection parameters, ISortColumnCollection sortColumns, int start, int pageLength, out int count)
        {
            return Find(parameters, sortColumns.ToString(), start, pageLength, out count);
        }
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>FeeStudFeeItem</c> objects.</returns>
		public virtual TList<FeeStudFeeItem> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Find");
			#endregion Security check
			
			#region Initialisation
			count = -1;
			TransactionManager transactionManager = null; 
			TList<FeeStudFeeItem> list = null;
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				list = dataProvider.FeeStudFeeItemProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return list;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion
		
		#region Insert

		#region Insert Entity
		/// <summary>
		/// public virtual method that Inserts a FeeStudFeeItem object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">FeeStudFeeItem object to Insert.</param>
		/// <remarks>After Inserting into the datasource, the FeeStudFeeItem object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with an already open transaction.
        /// <code>
		/// FeeStudFeeItem entity = new FeeStudFeeItem();
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Insert Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Insert(entity.ChildObjectSource);
		///		FeeStudFeeItemService.Insert(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public override bool Insert(FeeStudFeeItem entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Insert", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.FeeStudFeeItemProvider.Insert(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Insert Entity
		
		#region Insert Collection
		/// <summary>
		/// public virtual method that Inserts rows in <see cref="TList{FeeStudFeeItem}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>FeeStudFeeItem</c> objects in a <see cref="TList{FeeStudFeeItem}" /> object to Insert.</param>
		/// <remarks>
		///		This function will only Insert entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Inserting the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Inserting into the datasource, the <c>FeeStudFeeItem</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Insert.</returns>
		/// <example>
        /// The following code shows the usage of the Insert Method with a collection of FeeStudFeeItem.
        /// <code><![CDATA[
		/// TList<FeeStudFeeItem> list = new TList<FeeStudFeeItem>();
		/// FeeStudFeeItem entity = new FeeStudFeeItem();
		/// entity.StringProperty = "foo";
		/// FeeStudFeeItem entity2 = new FeeStudFeeItem();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	FeeStudFeeItemService.Insert(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Insert)]
		public virtual TList<FeeStudFeeItem> Insert(TList<FeeStudFeeItem> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Insert");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Insert", DomainUtil.GetErrorsFromList<FeeStudFeeItem>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.FeeStudFeeItemProvider.Insert(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Insert Collection

		#endregion Insert 
		
		#region Update

		#region Update Entity
		/// <summary>
		/// public virtual method that Updates a FeeStudFeeItem object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">FeeStudFeeItem object to Update.</param>
		/// <remarks>After Updateing into the datasource, the FeeStudFeeItem object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with an already open transaction.
        /// <code>
		///	FeeStudFeeItem entity = FeeStudFeeItemService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Update Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Update(entity.ChildObjectSource);
		///		FeeStudFeeItemService.Update(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool Update(FeeStudFeeItem entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Update", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.FeeStudFeeItemProvider.Update(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Update Entity
		
		#region Update Collection
		/// <summary>
		/// public virtual method that Updates rows in <see cref="TList{FeeStudFeeItem}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>FeeStudFeeItem</c> objects in a <see cref="TList{FeeStudFeeItem}" /> object to Update.</param>
		/// <remarks>
		///		This function will only Update entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Updateing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Updateing into the datasource, the <c>FeeStudFeeItem</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Update.</returns>
		/// <example>
        /// The following code shows the usage of the Update Method with a collection of FeeStudFeeItem.
        /// <code><![CDATA[
		/// TList<FeeStudFeeItem> list = new TList<FeeStudFeeItem>();
		/// FeeStudFeeItem entity = new FeeStudFeeItem();
		/// entity.StringProperty = "foo";
		/// FeeStudFeeItem entity2 = new FeeStudFeeItem();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	FeeStudFeeItemService.Update(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<FeeStudFeeItem> Update(TList<FeeStudFeeItem> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Update");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Update", DomainUtil.GetErrorsFromList<FeeStudFeeItem>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.FeeStudFeeItemProvider.Update(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Update Collection

		#endregion Update 
		
		#region Save

		#region Save Entity
		/// <summary>
		/// public virtual method that Saves a FeeStudFeeItem object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">FeeStudFeeItem object to Save.</param>
		/// <remarks>After Saveing into the datasource, the FeeStudFeeItem object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with an already open transaction.
        /// <code>
		///	FeeStudFeeItem entity = FeeStudFeeItemService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Save Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Save(entity.ChildObjectSource);
		///		FeeStudFeeItemService.Save(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override FeeStudFeeItem Save(FeeStudFeeItem entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Save", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.FeeStudFeeItemProvider.Save(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return entity;
		}
		#endregion Save Entity
		
		#region Save Collection
		/// <summary>
		/// public virtual method that Saves rows in <see cref="TList{FeeStudFeeItem}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>FeeStudFeeItem</c> objects in a <see cref="TList{FeeStudFeeItem}" /> object to Save.</param>
		/// <remarks>
		///		This function will only Save entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Saveing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Saveing into the datasource, the <c>FeeStudFeeItem</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Save.</returns>
		/// <example>
        /// The following code shows the usage of the Save Method with a collection of FeeStudFeeItem.
        /// <code><![CDATA[
		/// TList<FeeStudFeeItem> list = new TList<FeeStudFeeItem>();
		/// FeeStudFeeItem entity = new FeeStudFeeItem();
		/// entity.StringProperty = "foo";
		/// FeeStudFeeItem entity2 = new FeeStudFeeItem();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	FeeStudFeeItemService.Save(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual TList<FeeStudFeeItem> Save(TList<FeeStudFeeItem> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Save");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Save", DomainUtil.GetErrorsFromList<FeeStudFeeItem>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.FeeStudFeeItemProvider.Save(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Save Collection

		#endregion Save 
		
		#region Delete

		#region Delete Entity
		/// <summary>
		/// public virtual method that Deletes a FeeStudFeeItem object into the datasource using a transaction.
		/// </summary>
		/// <param name="entity">FeeStudFeeItem object to Delete.</param>
		/// <remarks>After Deleteing into the datasource, the FeeStudFeeItem object will be updated
		/// to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns bool that the operation is successful.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with an already open transaction.
        /// <code>
		///	FeeStudFeeItem entity = FeeStudFeeItemService.GetByPrimaryKeyColumn(1234);
		/// entity.StringProperty = "foo";
		/// entity.IntProperty = 12;
		/// entity.ChildObjectSource.StringProperty = "bar";
		/// TransactionManager tm = null;
		/// try
        ///	{
		/// 	tm = ConnectionContext.CreateTransaction();
		///		//Delete Child entity, Then Parent Entity
		/// 	ChildObjectTypeService.Delete(entity.ChildObjectSource);
		///		FeeStudFeeItemService.Delete(entity);
		///	}
        ///	catch (Exception e)
        ///	{
		///		if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// </code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public override bool Delete(FeeStudFeeItem entity)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			
			if (!entity.IsValid)
				throw new EntityNotValidException(entity, "Delete", entity.Error);
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.FeeStudFeeItemProvider.Delete(transactionManager, entity); 
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
			}
			
			return result;
		}
		#endregion Delete Entity
		
		#region Delete Collection
		/// <summary>
		/// public virtual method that Deletes rows in <see cref="TList{FeeStudFeeItem}" /> to the datasource.
		/// </summary>
		/// <param name="entityCollection"><c>FeeStudFeeItem</c> objects in a <see cref="TList{FeeStudFeeItem}" /> object to Delete.</param>
		/// <remarks>
		///		This function will only Delete entity objects marked as dirty
		///		and have an identity field equal to zero.
		///		Upon Deleteing the objects, each dirty object will have the public
		///		method <c>Object.AcceptChanges()</c> called to make it clean.
		/// 	After Deleteing into the datasource, the <c>FeeStudFeeItem</c> objects will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		///</remarks>
		/// <returns>Returns the number of successful Delete.</returns>
		/// <example>
        /// The following code shows the usage of the Delete Method with a collection of FeeStudFeeItem.
        /// <code><![CDATA[
		/// TList<FeeStudFeeItem> list = new TList<FeeStudFeeItem>();
		/// FeeStudFeeItem entity = new FeeStudFeeItem();
		/// entity.StringProperty = "foo";
		/// FeeStudFeeItem entity2 = new FeeStudFeeItem();
		/// entity.StringProperty = "bar";
		/// list.Add(entity);
		/// list.Add(entity2);
		///	FeeStudFeeItemService.Delete(list);
		///	}
        ///	catch (Exception e)
        ///	{
        ///		if (DomainUtil.HandleException(e, name)) throw;
        ///	}
        /// ]]></code>
        /// </example>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual TList<FeeStudFeeItem> Delete(TList<FeeStudFeeItem> entityCollection)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
		
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "Delete", DomainUtil.GetErrorsFromList<FeeStudFeeItem>(entityCollection));
			}
			#endregion Security and validation check

			#region Initialisation
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation

			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.FeeStudFeeItemProvider.Delete(transactionManager, entityCollection); 

				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();                
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return entityCollection;		
		}
		#endregion Delete Collection

		#endregion Delete 

		#region   Delete
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="key">The unique identifier of the row to delete.</param>
		/// <returns>Returns true if operation suceeded.</returns>
		public bool Delete(FeeStudFeeItemKey key)
		{
			return Delete(key.FeeStudFeeItemId );
		}
		
		/// <summary>
		/// 	Deletes a row from the DataSource based on the PK'S System.Decimal _feeStudFeeItemId
		/// </summary>
		/// <param name="_feeStudFeeItemId">FeeStudFeeItem pk id.</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
		[DataObjectMethod(DataObjectMethodType.Delete)]
		public virtual bool Delete(System.Decimal _feeStudFeeItemId)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("Delete");
			#endregion Security check

			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.FeeStudFeeItemProvider.Delete(transactionManager, _feeStudFeeItemId);
				
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			
			return result;
			
		}
		#endregion 
		
		#region  GetBy m:m Aggregate Relationships
		#endregion	N2N Relationships

		#region Custom Methods
		#endregion
		
		#region DeepLoad
		#region Deep Load By Entity Keys
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByAsFacultyInfoId(System.Decimal? _asFacultyInfoId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByAsFacultyInfoId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByAsFacultyInfoId(_asFacultyInfoId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_edAcadYearId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByEdAcadYearId(System.Decimal _edAcadYearId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByEdAcadYearId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByEdAcadYearId(_edAcadYearId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByEdCodeSemesterId(System.Decimal? _edCodeSemesterId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByEdCodeSemesterId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByEdCodeSemesterId(_edCodeSemesterId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_edStudId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByEdStudId(System.Decimal _edStudId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByEdStudId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByEdStudId(_edStudId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_feeCodeTypeId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByFeeCodeTypeId(System.Decimal _feeCodeTypeId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByFeeCodeTypeId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByFeeCodeTypeId(_feeCodeTypeId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_feeFacultyItemId"></param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByFeeFacultyItemId(System.Decimal? _feeFacultyItemId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByFeeFacultyItemId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByFeeFacultyItemId(_feeFacultyItemId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_gsCodeCurrencyId">قيمة التخفيض</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByGsCodeCurrencyId(System.Decimal _gsCodeCurrencyId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByGsCodeCurrencyId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByGsCodeCurrencyId(_gsCodeCurrencyId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="FeeStudFeeItem"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_feeStudFeeItemId">بنود المصروفات على  طالب</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="FeeStudFeeItem"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual FeeStudFeeItem DeepLoadByFeeStudFeeItemId(System.Decimal _feeStudFeeItemId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByFeeStudFeeItemId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			FeeStudFeeItem entity = GetByFeeStudFeeItemId(_feeStudFeeItemId);
			
			//Check to see if entity is not null, before attempting to Deep Load
			if (entity != null)
				DeepLoad(entity, deep, deepLoadType, childTypes);
			
			return entity;
		}
		
		
		/// <summary>
		/// public virtualDeep Loads the requested <see cref="TList&lt;FeeStudFeeItem&gt;"/> by the entity keys.  The criteria of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <param name="_edAcadYearId"></param>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="_edStudId"></param>
		/// <param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;FeeStudFeeItem&gt;"/> class and DeepLoaded.</returns>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual TList<FeeStudFeeItem> DeepLoadByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId(System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, System.Decimal _feeCodeItemId, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoadByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId");		    
			bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;				
	
			TList<FeeStudFeeItem> list = GetByEdAcadYearIdEdCodeSemesterIdEdStudIdFeeCodeItemId(_edAcadYearId, _edCodeSemesterId, _edStudId, _feeCodeItemId);
			
			//Check to see if list is not null, before attempting to Deep Load
			if (list != null)
				DeepLoad(list, deep, deepLoadType, childTypes);
			
			return list;
		}
		
		
		#endregion 

		#region DeepLoad By Entity
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <param name="entity">FeeStudFeeItem Object</param>
		/// <remarks>
		/// <seealso cref="DeepLoad(FeeStudFeeItem)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(FeeStudFeeItem entity)
		{
			DeepLoad(entity, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Load the IEntity object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(FeeStudFeeItem)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entity">FeeStudFeeItem Object</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(FeeStudFeeItem entity, bool deep)
		{
			DeepLoad(entity, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
			
		/// <summary>
		/// public virtualDeep Loads the <see cref="IEntity"/> object with criteria based of the child 
		/// property collections only N Levels Deep based on the <see cref="DeepLoadType"/>.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
		/// </remarks>
		/// <param name="entity">The <see cref="FeeStudFeeItem"/> object to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
		/// If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(FeeStudFeeItem entity, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.FeeStudFeeItemProvider.DeepLoad(transactionManager, entity, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;
		}
		#endregion
		
		#region DeepLoad By Entity Collection
		/// <summary>
		/// Deep Loads the <see cref="TList{FeeStudFeeItem}" /> object with all of the child 
		/// property collections only 1 Level Deep.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(FeeStudFeeItem)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{FeeStudFeeItem}" /> Object to deep loads.</param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<FeeStudFeeItem> entityCollection)
		{
			DeepLoad(entityCollection, false, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Loads the <see cref="TList{FeeStudFeeItem}" /> object.
		/// </summary>
		/// <remarks>
		/// <seealso cref="DeepLoad(FeeStudFeeItem)"/> overloaded methods for a recursive N Level deep loading method.
		/// </remarks>
		/// <param name="entityCollection">the <see cref="TList{FeeStudFeeItem}" /> Object to deep loads.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		[DataObjectMethod(DataObjectMethodType.Select)]
		public virtual void DeepLoad(TList<FeeStudFeeItem> entityCollection, bool deep)
		{
			DeepLoad(entityCollection, deep, DeepLoadType.ExcludeChildren, System.Type.EmptyTypes);
		}	

		/// <summary>
		/// Deep Loads the entire <see cref="TList{FeeStudFeeItem}" /> object with criteria based of the child 
		/// property collections only N Levels Deep based on the DeepLoadType.
		/// </summary>
		/// <remarks>
		/// Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
		/// </remarks>
		/// <param name="entityCollection">The <see cref="TList{FeeStudFeeItem}" /> instance to load.</param>
		/// <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
		/// <param name="deepLoadType"><see cref="DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
		///		Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
		///	</param>
		/// <param name="childTypes"><see cref="FeeStudFeeItem"/> Property Collection Type Array To Include or Exclude from Load</param>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public override void DeepLoad(TList<FeeStudFeeItem> entityCollection, bool deep, DeepLoadType deepLoadType, params System.Type[] childTypes)
		{	
			#region Security check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepLoad");
			#endregion Security check
			
			#region Initialisation
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				dataProvider = ConnectionScope.Current.DataProvider;

				dataProvider.FeeStudFeeItemProvider.DeepLoad(transactionManager, entityCollection, deep, deepLoadType, childTypes);
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return;		
		}
		#endregion

		#endregion
		
		#region DeepSave
		
		#region DeepSave By Entity
		/// <summary>
		/// public virtualDeep Saves the <see cref="FeeStudFeeItem"/> object with all of the child
		/// property collections N Levels Deep.
		/// </summary>
		/// <param name="entity">FeeStudFeeItem Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(FeeStudFeeItem entity)
		{
			return DeepSave(entity, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// public virtualDeep Saves the entire object graph of the FeeStudFeeItem object with criteria based of the child 
		/// Type property array and DeepSaveType.
		/// </summary>
		/// <param name="entity">FeeStudFeeItem Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes"><c>FeeStudFeeItem</c> property Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(FeeStudFeeItem entity, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entity.IsValid)
			{
				throw new EntityNotValidException(entity, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {	
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;
				
				result = dataProvider.FeeStudFeeItemProvider.DeepSave(transactionManager, entity, deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;		
		}
		#endregion
		
		#region DeepSave By Entity Collection
		/// <summary>
		/// Deep Save the entire <see cref="TList{FeeStudFeeItem}" /> object with all of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection">TList{FeeStudFeeItem} Object</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public virtual bool DeepSave(TList<FeeStudFeeItem> entityCollection)
		{
			return DeepSave(entityCollection, DeepSaveType.ExcludeChildren, System.Type.EmptyTypes);
		}
		
		/// <summary>
		/// Deep Save the entire object graph of the <see cref="TList{FeeStudFeeItem}" /> object with criteria based of the child 
		/// property collections.
		/// </summary>
		/// <param name="entityCollection"><see cref="TList{FeeStudFeeItem}" /> Object</param>
		/// <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
		/// <param name="childTypes">FeeStudFeeItem Property Collection Type Array To Include or Exclude from Save</param>
		[DataObjectMethod(DataObjectMethodType.Update)]
		public override bool DeepSave(TList<FeeStudFeeItem> entityCollection, DeepSaveType deepSaveType, params System.Type[] childTypes)
		{	
			#region Security and validation check
			// throws security exception if not authorized
			SecurityContext.IsAuthorized("DeepSave");
			
			if (!entityCollection.IsValid)
			{
				throw new EntityNotValidException(entityCollection, "DeepSave");
			}
			#endregion Security and validation check
			
			#region Initialisation
			bool result = false;
			bool isBorrowedTransaction = false;
			TransactionManager transactionManager = null; 
			NetTiersProvider dataProvider = null;
			#endregion Initialisation
			
			try
            {
				isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
				
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction();
				dataProvider = ConnectionScope.Current.DataProvider;

				result = dataProvider.FeeStudFeeItemProvider.DeepSave(transactionManager, entityCollection,  deepSaveType, childTypes);
								
				if (!isBorrowedTransaction && transactionManager != null && transactionManager.IsOpen)
					transactionManager.Commit();
			}
            catch (Exception exc)
            {
				#region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
				#endregion Handle transaction rollback and exception
            }
			return result;
		}
		#endregion

		#endregion 

		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace





