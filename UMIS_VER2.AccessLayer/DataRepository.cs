#region Using directives

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Configuration.Provider;
using System.Web.Configuration;
using System.Web;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer
{
	/// <summary>
	/// This class represents the Data source repository and gives access to all the underlying providers.
	/// </summary>
	[CLSCompliant(true)]
	public sealed class DataRepository 
	{
		private static volatile NetTiersProvider _provider = null;
        private static volatile NetTiersProviderCollection _providers = null;
		private static volatile NetTiersServiceSection _section = null;
		private static volatile Configuration _config = null;
        
        private static object SyncRoot = new object();
				
		private DataRepository()
		{
		}
		
		#region Public LoadProvider
		/// <summary>
        /// Enables the DataRepository to programatically create and 
        /// pass in a <c>NetTiersProvider</c> during runtime.
        /// </summary>
        /// <param name="provider">An instatiated NetTiersProvider.</param>
        public static void LoadProvider(NetTiersProvider provider)
        {
			LoadProvider(provider, false);
        }
		
		/// <summary>
        /// Enables the DataRepository to programatically create and 
        /// pass in a <c>NetTiersProvider</c> during runtime.
        /// </summary>
        /// <param name="provider">An instatiated NetTiersProvider.</param>
        /// <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
		public static void LoadProvider(NetTiersProvider provider, bool setAsDefault)
        {
            if (provider == null)
                throw new ArgumentNullException("provider");

            if (_providers == null)
			{
				lock(SyncRoot)
				{
            		if (_providers == null)
						_providers = new NetTiersProviderCollection();
				}
			}
			
            if (_providers[provider.Name] == null)
            {
                lock (_providers.SyncRoot)
                {
                    _providers.Add(provider);
                }
            }

            if (_provider == null || setAsDefault)
            {
                lock (SyncRoot)
                {
                    if(_provider == null || setAsDefault)
                         _provider = provider;
                }
            }
        }
		#endregion 
		
		///<summary>
		/// Configuration based provider loading, will load the providers on first call.
		///</summary>
		private static void LoadProviders()
        {
            // Avoid claiming lock if providers are already loaded
            if (_provider == null)
            {
                lock (SyncRoot)
                {
                    // Do this again to make sure _provider is still null
                    if (_provider == null)
                    {
                        // Load registered providers and point _provider to the default provider
                        _providers = new NetTiersProviderCollection();

                        ProvidersHelper.InstantiateProviders(NetTiersSection.Providers, _providers, typeof(NetTiersProvider));
						_provider = _providers[NetTiersSection.DefaultProvider];

                        if (_provider == null)
                        {
                            throw new ProviderException("Unable to load default NetTiersProvider");
                        }
                    }
                }
            }
        }

		/// <summary>
        /// Gets the provider.
        /// </summary>
        /// <value>The provider.</value>
        public static NetTiersProvider Provider
        {
            get { LoadProviders(); return _provider; }
        }

		/// <summary>
        /// Gets the provider collection.
        /// </summary>
        /// <value>The providers.</value>
        public static NetTiersProviderCollection Providers
        {
            get { LoadProviders(); return _providers; }
        }
		
		/// <summary>
		/// Creates a new <c cref="TransactionManager"/> instance from the current datasource.
		/// </summary>
		/// <returns></returns>
		public TransactionManager CreateTransaction()
		{
			return _provider.CreateTransaction();
		}

		#region Configuration

		/// <summary>
		/// Gets a reference to the configured NetTiersServiceSection object.
		/// </summary>
		public static NetTiersServiceSection NetTiersSection
		{
			get
			{
				// Try to get a reference to the default <netTiersService> section
				_section = WebConfigurationManager.GetSection("netTiersService") as NetTiersServiceSection;

				if ( _section == null )
				{
					// otherwise look for section based on the assembly name
					_section = WebConfigurationManager.GetSection("UMIS_VER2.AccessLayer") as NetTiersServiceSection;
				}

				#region Design-Time Support

				if ( _section == null )
				{
					// lastly, try to find the specific NetTiersServiceSection for this assembly
					foreach ( ConfigurationSection temp in Configuration.Sections )
					{
						if ( temp is NetTiersServiceSection )
						{
							_section = temp as NetTiersServiceSection;
							break;
						}
					}
				}

				#endregion Design-Time Support
				
				if ( _section == null )
				{
					throw new ProviderException("Unable to load NetTiersServiceSection");
				}

				return _section;
			}
		}

		#region Design-Time Support

		/// <summary>
		/// Gets a reference to the application configuration object.
		/// </summary>
		public static Configuration Configuration
		{
			get
			{
				if ( _config == null )
				{
					// load specific config file
					if ( HttpContext.Current != null )
					{
						_config = WebConfigurationManager.OpenWebConfiguration("~");
					}
					else
					{
						String configFile = AppDomain.CurrentDomain.SetupInformation.ConfigurationFile.Replace(".config", "").Replace(".temp", "");

						// check for design mode
						if ( configFile.ToLower().Contains("devenv.exe") )
						{
							_config = GetDesignTimeConfig();
						}
						else
						{
							_config = ConfigurationManager.OpenExeConfiguration(configFile);
						}
					}
				}

				return _config;
			}
		}

		private static Configuration GetDesignTimeConfig()
		{
			ExeConfigurationFileMap configMap = null;
			Configuration config = null;
			String path = null;

			// Get an instance of the currently running Visual Studio IDE.
			EnvDTE80.DTE2 dte = (EnvDTE80.DTE2) System.Runtime.InteropServices.Marshal.GetActiveObject("VisualStudio.DTE.9.0");
			
			if ( dte != null )
			{
				dte.SuppressUI = true;

				EnvDTE.ProjectItem item = dte.Solution.FindProjectItem("web.config");
				if ( item != null )
				{
					if (!item.ContainingProject.FullName.ToLower().StartsWith("http:"))
               {
                  System.IO.FileInfo info = new System.IO.FileInfo(item.ContainingProject.FullName);
                  path = String.Format("{0}\\{1}", info.Directory.FullName, item.Name);
                  configMap = new ExeConfigurationFileMap();
                  configMap.ExeConfigFilename = path;
               }
               else
               {
                  configMap = new ExeConfigurationFileMap();
                  configMap.ExeConfigFilename = item.get_FileNames(0);
               }}

				/*
				Array projects = (Array) dte2.ActiveSolutionProjects;
				EnvDTE.Project project = (EnvDTE.Project) projects.GetValue(0);
				System.IO.FileInfo info;

				foreach ( EnvDTE.ProjectItem item in project.ProjectItems )
				{
					if ( String.Compare(item.Name, "web.config", true) == 0 )
					{
						info = new System.IO.FileInfo(project.FullName);
						path = String.Format("{0}\\{1}", info.Directory.FullName, item.Name);
						configMap = new ExeConfigurationFileMap();
						configMap.ExeConfigFilename = path;
						break;
					}
				}
				*/
			}

			config = ConfigurationManager.OpenMappedExeConfiguration(configMap, ConfigurationUserLevel.None);
			return config;
		}

		#endregion Design-Time Support

		#endregion Configuration

		#region Connections

		/// <summary>
		/// Gets a reference to the ConnectionStringSettings collection.
		/// </summary>
		public static ConnectionStringSettingsCollection ConnectionStrings
		{
			get
			{
				// use default ConnectionStrings if _section has already been discovered
				if ( _config == null && _section != null )
				{
					return WebConfigurationManager.ConnectionStrings;
				}
				
				return Configuration.ConnectionStrings.ConnectionStrings;
			}
		}

		// dictionary of connection providers
		private static Dictionary<String, ConnectionProvider> _connections;

		/// <summary>
		/// Gets the dictionary of connection providers.
		/// </summary>
		public static Dictionary<String, ConnectionProvider> Connections
		{
			get
			{
				if ( _connections == null )
				{
					lock (SyncRoot)
                	{
						if (_connections == null)
						{
							_connections = new Dictionary<String, ConnectionProvider>();
		
							// add a connection provider for each configured connection string
							foreach ( ConnectionStringSettings conn in ConnectionStrings )
							{
								_connections.Add(conn.Name, new ConnectionProvider(conn.Name, conn.ConnectionString));
							}
						}
					}
				}

				return _connections;
			}
		}

		/// <summary>
		/// Adds the specified connection string to the map of connection strings.
		/// </summary>
		/// <param name="connectionStringName">The connection string name.</param>
		/// <param name="connectionString">The provider specific connection information.</param>
		public static void AddConnection(String connectionStringName, String connectionString)
		{
			lock (SyncRoot)
            {
				Connections.Remove(connectionStringName);
				ConnectionProvider connection = new ConnectionProvider(connectionStringName, connectionString);
				Connections.Add(connectionStringName, connection);
			}
		}

		/// <summary>
		/// Provides ability to switch connection string at runtime.
		/// </summary>
		public sealed class ConnectionProvider
		{
			private NetTiersProvider _provider;
			private NetTiersProviderCollection _providers;
			private String _connectionStringName;
			private String _connectionString;


			/// <summary>
			/// Initializes a new instance of the ConnectionProvider class.
			/// </summary>
			/// <param name="connectionStringName">The connection string name.</param>
			/// <param name="connectionString">The provider specific connection information.</param>
			public ConnectionProvider(String connectionStringName, String connectionString)
			{
				_connectionString = connectionString;
				_connectionStringName = connectionStringName;
			}

			/// <summary>
			/// Gets the provider.
			/// </summary>
			public NetTiersProvider Provider
			{
				get { LoadProviders(); return _provider; }
			}

			/// <summary>
			/// Gets the provider collection.
			/// </summary>
			public NetTiersProviderCollection Providers
			{
				get { LoadProviders(); return _providers; }
			}

			/// <summary>
			/// Instantiates the configured providers based on the supplied connection string.
			/// </summary>
			private void LoadProviders()
			{
				DataRepository.LoadProviders();

				// Avoid claiming lock if providers are already loaded
				if ( _providers == null )
				{
					lock ( SyncRoot )
					{
						// Do this again to make sure _provider is still null
						if ( _providers == null )
						{
							// apply connection information to each provider
							for ( int i = 0; i < NetTiersSection.Providers.Count; i++ )
							{
								NetTiersSection.Providers[i].Parameters["connectionStringName"] = _connectionStringName;
								// remove previous connection string, if any
								NetTiersSection.Providers[i].Parameters.Remove("connectionString");

								if ( !String.IsNullOrEmpty(_connectionString) )
								{
									NetTiersSection.Providers[i].Parameters["connectionString"] = _connectionString;
								}
							}

							// Load registered providers and point _provider to the default provider
							_providers = new NetTiersProviderCollection();

							ProvidersHelper.InstantiateProviders(NetTiersSection.Providers, _providers, typeof(NetTiersProvider));
							_provider = _providers[NetTiersSection.DefaultProvider];
						}
					}
				}
			}
		}

		#endregion Connections

		#region Static properties
		
		#region MilCodeCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MilCodeCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MilCodeCourseProviderBase MilCodeCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MilCodeCourseProvider;
			}
		}
		
		#endregion
		
		#region AccomApartmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomApartment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomApartmentProviderBase AccomApartmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomApartmentProvider;
			}
		}
		
		#endregion
		
		#region MltCdeBhvrAttndcRltdProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltCdeBhvrAttndcRltd"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltCdeBhvrAttndcRltdProviderBase MltCdeBhvrAttndcRltdProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltCdeBhvrAttndcRltdProvider;
			}
		}
		
		#endregion
		
		#region MdiStudVaccProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudVacc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudVaccProviderBase MdiStudVaccProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudVaccProvider;
			}
		}
		
		#endregion
		
		#region MltCdeOrgTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltCdeOrgType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltCdeOrgTypeProviderBase MltCdeOrgTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltCdeOrgTypeProvider;
			}
		}
		
		#endregion
		
		#region MdiStudRecordProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudRecord"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudRecordProviderBase MdiStudRecordProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudRecordProvider;
			}
		}
		
		#endregion
		
		#region MdiStudSignProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudSign"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudSignProviderBase MdiStudSignProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudSignProvider;
			}
		}
		
		#endregion
		
		#region MdiStudHosptlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudHosptl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudHosptlProviderBase MdiStudHosptlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudHosptlProvider;
			}
		}
		
		#endregion
		
		#region MdiStudInvstgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudInvstg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudInvstgProviderBase MdiStudInvstgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudInvstgProvider;
			}
		}
		
		#endregion
		
		#region MdiStudLifeStyleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudLifeStyle"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudLifeStyleProviderBase MdiStudLifeStyleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudLifeStyleProvider;
			}
		}
		
		#endregion
		
		#region MdiStudProblemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudProblem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudProblemProviderBase MdiStudProblemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudProblemProvider;
			}
		}
		
		#endregion
		
		#region MltCdeOutRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltCdeOutRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltCdeOutRsnProviderBase MltCdeOutRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltCdeOutRsnProvider;
			}
		}
		
		#endregion
		
		#region MltCdeStudDegreeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltCdeStudDegree"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltCdeStudDegreeProviderBase MltCdeStudDegreeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltCdeStudDegreeProvider;
			}
		}
		
		#endregion
		
		#region MltLvlBhvrAttndcProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltLvlBhvrAttndc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltLvlBhvrAttndcProviderBase MltLvlBhvrAttndcProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltLvlBhvrAttndcProvider;
			}
		}
		
		#endregion
		
		#region PgCdeConfTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCdeConfType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCdeConfTypeProviderBase PgCdeConfTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCdeConfTypeProvider;
			}
		}
		
		#endregion
		
		#region PgCdeRptRecommendProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCdeRptRecommend"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCdeRptRecommendProviderBase PgCdeRptRecommendProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCdeRptRecommendProvider;
			}
		}
		
		#endregion
		
		#region PgCdeStfRoleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCdeStfRole"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCdeStfRoleProviderBase PgCdeStfRoleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCdeStfRoleProvider;
			}
		}
		
		#endregion
		
		#region MltOrgTreeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltOrgTree"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltOrgTreeProviderBase MltOrgTreeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltOrgTreeProvider;
			}
		}
		
		#endregion
		
		#region PgCdeCommRecommendProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCdeCommRecommend"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCdeCommRecommendProviderBase PgCdeCommRecommendProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCdeCommRecommendProvider;
			}
		}
		
		#endregion
		
		#region MltStudInfoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltStudInfo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltStudInfoProviderBase MltStudInfoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltStudInfoProvider;
			}
		}
		
		#endregion
		
		#region MltRptDayStudStsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltRptDayStudSts"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltRptDayStudStsProviderBase MltRptDayStudStsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltRptDayStudStsProvider;
			}
		}
		
		#endregion
		
		#region MltRptDayMissionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltRptDayMission"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltRptDayMissionProviderBase MltRptDayMissionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltRptDayMissionProvider;
			}
		}
		
		#endregion
		
		#region MltRptDayOutStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltRptDayOutStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltRptDayOutStudProviderBase MltRptDayOutStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltRptDayOutStudProvider;
			}
		}
		
		#endregion
		
		#region MltRptDayOutProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltRptDayOut"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltRptDayOutProviderBase MltRptDayOutProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltRptDayOutProvider;
			}
		}
		
		#endregion
		
		#region MdiStudFamHstryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudFamHstry"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudFamHstryProviderBase MdiStudFamHstryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudFamHstryProvider;
			}
		}
		
		#endregion
		
		#region MdiStudClnqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiStudClnq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiStudClnqProviderBase MdiStudClnqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiStudClnqProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeVaccProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeVacc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeVaccProviderBase MdiCdeVaccProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeVaccProvider;
			}
		}
		
		#endregion
		
		#region IntegFpStaffAbsenceDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegFpStaffAbsenceDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegFpStaffAbsenceDtlProviderBase IntegFpStaffAbsenceDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegFpStaffAbsenceDtlProvider;
			}
		}
		
		#endregion
		
		#region IntegLogProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegLog"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegLogProviderBase IntegLogProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegLogProvider;
			}
		}
		
		#endregion
		
		#region IntegMoodleEnrolProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegMoodleEnrol"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegMoodleEnrolProviderBase IntegMoodleEnrolProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegMoodleEnrolProvider;
			}
		}
		
		#endregion
		
		#region IntegMoodleUnenrolProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegMoodleUnenrol"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegMoodleUnenrolProviderBase IntegMoodleUnenrolProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegMoodleUnenrolProvider;
			}
		}
		
		#endregion
		
		#region IntegFpStaffAbsenceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegFpStaffAbsence"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegFpStaffAbsenceProviderBase IntegFpStaffAbsenceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegFpStaffAbsenceProvider;
			}
		}
		
		#endregion
		
		#region MltStudBhvrAttndcProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MltStudBhvrAttndc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MltStudBhvrAttndcProviderBase MltStudBhvrAttndcProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MltStudBhvrAttndcProvider;
			}
		}
		
		#endregion
		
		#region IntegFinanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegFinance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegFinanceProviderBase IntegFinanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegFinanceProvider;
			}
		}
		
		#endregion
		
		#region GsMilitaryRegionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsMilitaryRegion"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsMilitaryRegionProviderBase GsMilitaryRegionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsMilitaryRegionProvider;
			}
		}
		
		#endregion
		
		#region GsSysPivotProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsSysPivot"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsSysPivotProviderBase GsSysPivotProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsSysPivotProvider;
			}
		}
		
		#endregion
		
		#region HrDepartmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="HrDepartment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static HrDepartmentProviderBase HrDepartmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.HrDepartmentProvider;
			}
		}
		
		#endregion
		
		#region IntegCdeErrorTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegCdeErrorType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegCdeErrorTypeProviderBase IntegCdeErrorTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegCdeErrorTypeProvider;
			}
		}
		
		#endregion
		
		#region IntegMoodleUpdateStaffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegMoodleUpdateStaff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegMoodleUpdateStaffProviderBase IntegMoodleUpdateStaffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegMoodleUpdateStaffProvider;
			}
		}
		
		#endregion
		
		#region IntegMoodleUpdateStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegMoodleUpdateStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegMoodleUpdateStudProviderBase IntegMoodleUpdateStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegMoodleUpdateStudProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeSignCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeSignCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeSignCatProviderBase MdiCdeSignCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeSignCatProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeLifeStyleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeLifeStyle"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeLifeStyleProviderBase MdiCdeLifeStyleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeLifeStyleProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeProblemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeProblem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeProblemProviderBase MdiCdeProblemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeProblemProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeInvstgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeInvstg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeInvstgProviderBase MdiCdeInvstgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeInvstgProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeSignProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeSign"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeSignProviderBase MdiCdeSignProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeSignProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeHosptlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeHosptl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeHosptlProviderBase MdiCdeHosptlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeHosptlProvider;
			}
		}
		
		#endregion
		
		#region MdiCdeDiseaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="MdiCdeDisease"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static MdiCdeDiseaseProviderBase MdiCdeDiseaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.MdiCdeDiseaseProvider;
			}
		}
		
		#endregion
		
		#region IntegUserAdLogHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegUserAdLogHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegUserAdLogHdrProviderBase IntegUserAdLogHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegUserAdLogHdrProvider;
			}
		}
		
		#endregion
		
		#region IntegPaymentUpayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegPaymentUpay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegPaymentUpayProviderBase IntegPaymentUpayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegPaymentUpayProvider;
			}
		}
		
		#endregion
		
		#region IntegSemOpenCloseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegSemOpenClose"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegSemOpenCloseProviderBase IntegSemOpenCloseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegSemOpenCloseProvider;
			}
		}
		
		#endregion
		
		#region PgCdeThesisStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCdeThesisStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCdeThesisStatusProviderBase PgCdeThesisStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCdeThesisStatusProvider;
			}
		}
		
		#endregion
		
		#region IntegUserAdLogDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="IntegUserAdLogDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static IntegUserAdLogDtlProviderBase IntegUserAdLogDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.IntegUserAdLogDtlProvider;
			}
		}
		
		#endregion
		
		#region RsrchCdeTitleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="RsrchCdeTitle"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static RsrchCdeTitleProviderBase RsrchCdeTitleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.RsrchCdeTitleProvider;
			}
		}
		
		#endregion
		
		#region PgOfferingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgOffering"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgOfferingProviderBase PgOfferingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgOfferingProvider;
			}
		}
		
		#endregion
		
		#region SaCdeAdminJobProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCdeAdminJob"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCdeAdminJobProviderBase SaCdeAdminJobProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCdeAdminJobProvider;
			}
		}
		
		#endregion
		
		#region PgOfferingTopicProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgOfferingTopic"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgOfferingTopicProviderBase PgOfferingTopicProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgOfferingTopicProvider;
			}
		}
		
		#endregion
		
		#region RsrchCdeStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="RsrchCdeStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static RsrchCdeStatusProviderBase RsrchCdeStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.RsrchCdeStatusProvider;
			}
		}
		
		#endregion
		
		#region PgThesisDetailedSpecProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisDetailedSpec"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisDetailedSpecProviderBase PgThesisDetailedSpecProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisDetailedSpecProvider;
			}
		}
		
		#endregion
		
		#region PgThesisGeneralSpecProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisGeneralSpec"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisGeneralSpecProviderBase PgThesisGeneralSpecProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisGeneralSpecProvider;
			}
		}
		
		#endregion
		
		#region RsrchStudRegisterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="RsrchStudRegister"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static RsrchStudRegisterProviderBase RsrchStudRegisterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.RsrchStudRegisterProvider;
			}
		}
		
		#endregion
		
		#region RsrchStudRegisterDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="RsrchStudRegisterDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static RsrchStudRegisterDtlProviderBase RsrchStudRegisterDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.RsrchStudRegisterDtlProvider;
			}
		}
		
		#endregion
		
		#region RsrchCommStaffRecomProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="RsrchCommStaffRecom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static RsrchCommStaffRecomProviderBase RsrchCommStaffRecomProvider
		{
			get 
			{
				LoadProviders();
				return _provider.RsrchCommStaffRecomProvider;
			}
		}
		
		#endregion
		
		#region SaCandReleaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCandRelease"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCandReleaseProviderBase SaCandReleaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCandReleaseProvider;
			}
		}
		
		#endregion
		
		#region PgCodeChangeTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCodeChangeType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCodeChangeTypeProviderBase PgCodeChangeTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCodeChangeTypeProvider;
			}
		}
		
		#endregion
		
		#region SaCandReleaseDetailProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCandReleaseDetail"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCandReleaseDetailProviderBase SaCandReleaseDetailProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCandReleaseDetailProvider;
			}
		}
		
		#endregion
		
		#region SaCdeAcadLoadProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCdeAcadLoad"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCdeAcadLoadProviderBase SaCdeAcadLoadProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCdeAcadLoadProvider;
			}
		}
		
		#endregion
		
		#region SaCodeDocTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeDocType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeDocTypeProviderBase SaCodeDocTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeDocTypeProvider;
			}
		}
		
		#endregion
		
		#region SaCodeCourseTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeCourseType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeCourseTypeProviderBase SaCodeCourseTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeCourseTypeProvider;
			}
		}
		
		#endregion
		
		#region SaCodeDocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeDoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeDocProviderBase SaCodeDocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeDocProvider;
			}
		}
		
		#endregion
		
		#region SaCodeCourseScoreProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeCourseScore"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeCourseScoreProviderBase SaCodeCourseScoreProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeCourseScoreProvider;
			}
		}
		
		#endregion
		
		#region PgThesisStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisStudProviderBase PgThesisStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisStudProvider;
			}
		}
		
		#endregion
		
		#region SaCodeCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeCourseProviderBase SaCodeCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeCourseProvider;
			}
		}
		
		#endregion
		
		#region SaCodeEmpMethodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeEmpMethod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeEmpMethodProviderBase SaCodeEmpMethodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeEmpMethodProvider;
			}
		}
		
		#endregion
		
		#region SaCodeCommMemberTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeCommMemberType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeCommMemberTypeProviderBase SaCodeCommMemberTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeCommMemberTypeProvider;
			}
		}
		
		#endregion
		
		#region PgCodeRsrchStrategyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCodeRsrchStrategy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCodeRsrchStrategyProviderBase PgCodeRsrchStrategyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCodeRsrchStrategyProvider;
			}
		}
		
		#endregion
		
		#region PgThesisCommProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisComm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisCommProviderBase PgThesisCommProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisCommProvider;
			}
		}
		
		#endregion
		
		#region PgThesisCommApproveProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisCommApprove"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisCommApproveProviderBase PgThesisCommApproveProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisCommApproveProvider;
			}
		}
		
		#endregion
		
		#region PgThesisCommMemberProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisCommMember"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisCommMemberProviderBase PgThesisCommMemberProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisCommMemberProvider;
			}
		}
		
		#endregion
		
		#region RsrchStudPostponeReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="RsrchStudPostponeReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static RsrchStudPostponeReqProviderBase RsrchStudPostponeReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.RsrchStudPostponeReqProvider;
			}
		}
		
		#endregion
		
		#region PgSubjectDefinitionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgSubjectDefinition"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgSubjectDefinitionProviderBase PgSubjectDefinitionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgSubjectDefinitionProvider;
			}
		}
		
		#endregion
		
		#region PgStudTravelProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgStudTravel"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgStudTravelProviderBase PgStudTravelProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgStudTravelProvider;
			}
		}
		
		#endregion
		
		#region PgStudTravelExtendProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgStudTravelExtend"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgStudTravelExtendProviderBase PgStudTravelExtendProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgStudTravelExtendProvider;
			}
		}
		
		#endregion
		
		#region PgCodeSupervisorChgRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgCodeSupervisorChgRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgCodeSupervisorChgRsnProviderBase PgCodeSupervisorChgRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgCodeSupervisorChgRsnProvider;
			}
		}
		
		#endregion
		
		#region PgExtMemberProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgExtMember"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgExtMemberProviderBase PgExtMemberProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgExtMemberProvider;
			}
		}
		
		#endregion
		
		#region PgStfRoleDegProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgStfRoleDeg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgStfRoleDegProviderBase PgStfRoleDegProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgStfRoleDegProvider;
			}
		}
		
		#endregion
		
		#region PgStudConferenceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgStudConference"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgStudConferenceProviderBase PgStudConferenceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgStudConferenceProvider;
			}
		}
		
		#endregion
		
		#region PgStudPublishProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgStudPublish"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgStudPublishProviderBase PgStudPublishProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgStudPublishProvider;
			}
		}
		
		#endregion
		
		#region PgThesisCommRecommendProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisCommRecommend"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisCommRecommendProviderBase PgThesisCommRecommendProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisCommRecommendProvider;
			}
		}
		
		#endregion
		
		#region PgThesisCommRptProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisCommRpt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisCommRptProviderBase PgThesisCommRptProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisCommRptProvider;
			}
		}
		
		#endregion
		
		#region PgThesisDiscussionDateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisDiscussionDate"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisDiscussionDateProviderBase PgThesisDiscussionDateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisDiscussionDateProvider;
			}
		}
		
		#endregion
		
		#region PgThesisGrantDegreeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisGrantDegree"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisGrantDegreeProviderBase PgThesisGrantDegreeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisGrantDegreeProvider;
			}
		}
		
		#endregion
		
		#region PgThesisStaffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisStaff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisStaffProviderBase PgThesisStaffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisStaffProvider;
			}
		}
		
		#endregion
		
		#region PgThesisSeminarProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisSeminar"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisSeminarProviderBase PgThesisSeminarProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisSeminarProvider;
			}
		}
		
		#endregion
		
		#region PgThesisNoteProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisNote"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisNoteProviderBase PgThesisNoteProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisNoteProvider;
			}
		}
		
		#endregion
		
		#region GsMilitaryOfficeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsMilitaryOffice"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsMilitaryOfficeProviderBase GsMilitaryOfficeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsMilitaryOfficeProvider;
			}
		}
		
		#endregion
		
		#region PgThesisStudExtendProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisStudExtend"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisStudExtendProviderBase PgThesisStudExtendProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisStudExtendProvider;
			}
		}
		
		#endregion
		
		#region PgThesisSupervisorCommApproveProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisSupervisorCommApprove"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisSupervisorCommApproveProviderBase PgThesisSupervisorCommApproveProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisSupervisorCommApproveProvider;
			}
		}
		
		#endregion
		
		#region PgThesisValidityRptProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisValidityRpt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisValidityRptProviderBase PgThesisValidityRptProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisValidityRptProvider;
			}
		}
		
		#endregion
		
		#region PgThesisStudRsrchStrtgyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisStudRsrchStrtgy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisStudRsrchStrtgyProviderBase PgThesisStudRsrchStrtgyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisStudRsrchStrtgyProvider;
			}
		}
		
		#endregion
		
		#region PgThesisSupervisorRptProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisSupervisorRpt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisSupervisorRptProviderBase PgThesisSupervisorRptProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisSupervisorRptProvider;
			}
		}
		
		#endregion
		
		#region PgThesisSupervisorCommProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisSupervisorComm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisSupervisorCommProviderBase PgThesisSupervisorCommProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisSupervisorCommProvider;
			}
		}
		
		#endregion
		
		#region PgThesisStudTopicProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisStudTopic"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisStudTopicProviderBase PgThesisStudTopicProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisStudTopicProvider;
			}
		}
		
		#endregion
		
		#region PgThesisGrantStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisGrantStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisGrantStudProviderBase PgThesisGrantStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisGrantStudProvider;
			}
		}
		
		#endregion
		
		#region PgAttchdDocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgAttchdDoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgAttchdDocProviderBase PgAttchdDocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgAttchdDocProvider;
			}
		}
		
		#endregion
		
		#region PgThesisStudApproveProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="PgThesisStudApprove"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static PgThesisStudApproveProviderBase PgThesisStudApproveProvider
		{
			get 
			{
				LoadProviders();
				return _provider.PgThesisStudApproveProvider;
			}
		}
		
		#endregion
		
		#region GsCourseElectTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCourseElectType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCourseElectTypeProviderBase GsCourseElectTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCourseElectTypeProvider;
			}
		}
		
		#endregion
		
		#region GsCdeDocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeDoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeDocProviderBase GsCdeDocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeDocProvider;
			}
		}
		
		#endregion
		
		#region GsCdeActvtyTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeActvtyType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeActvtyTypeProviderBase GsCdeActvtyTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeActvtyTypeProvider;
			}
		}
		
		#endregion
		
		#region FeeUserFundReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeUserFundReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeUserFundReqProviderBase FeeUserFundReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeUserFundReqProvider;
			}
		}
		
		#endregion
		
		#region FeeUserBondReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeUserBondReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeUserBondReqProviderBase FeeUserBondReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeUserBondReqProvider;
			}
		}
		
		#endregion
		
		#region FeeTreasuryReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeTreasuryReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeTreasuryReqProviderBase FeeTreasuryReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeTreasuryReqProvider;
			}
		}
		
		#endregion
		
		#region FeeTreasuryItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeTreasuryItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeTreasuryItemProviderBase FeeTreasuryItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeTreasuryItemProvider;
			}
		}
		
		#endregion
		
		#region FeeYearPrdBankProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeYearPrdBank"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeYearPrdBankProviderBase FeeYearPrdBankProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeYearPrdBankProvider;
			}
		}
		
		#endregion
		
		#region GsAgendaHolidayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsAgendaHoliday"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsAgendaHolidayProviderBase GsAgendaHolidayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsAgendaHolidayProvider;
			}
		}
		
		#endregion
		
		#region GsCdeActvtyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeActvty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeActvtyProviderBase GsCdeActvtyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeActvtyProvider;
			}
		}
		
		#endregion
		
		#region GsCdeClrncReasonProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeClrncReason"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeClrncReasonProviderBase GsCdeClrncReasonProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeClrncReasonProvider;
			}
		}
		
		#endregion
		
		#region GsCdeClrncItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeClrncItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeClrncItemProviderBase GsCdeClrncItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeClrncItemProvider;
			}
		}
		
		#endregion
		
		#region GsCdeCampusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeCampus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeCampusProviderBase GsCdeCampusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeCampusProvider;
			}
		}
		
		#endregion
		
		#region GsCdeBloodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeBlood"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeBloodProviderBase GsCdeBloodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeBloodProvider;
			}
		}
		
		#endregion
		
		#region GsCountryNodeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCountryNode"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCountryNodeProviderBase GsCountryNodeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCountryNodeProvider;
			}
		}
		
		#endregion
		
		#region GsApprovalHProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsApprovalH"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsApprovalHProviderBase GsApprovalHProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsApprovalHProvider;
			}
		}
		
		#endregion
		
		#region FeeRefundCodeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeRefundCode"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeRefundCodeProviderBase FeeRefundCodeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeRefundCodeProvider;
			}
		}
		
		#endregion
		
		#region GsAttchdDocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsAttchdDoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsAttchdDocProviderBase GsAttchdDocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsAttchdDocProvider;
			}
		}
		
		#endregion
		
		#region GsApprovalDProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsApprovalD"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsApprovalDProviderBase GsApprovalDProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsApprovalDProvider;
			}
		}
		
		#endregion
		
		#region FeeStudDiscContinueProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudDiscContinue"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudDiscContinueProviderBase FeeStudDiscContinueProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudDiscContinueProvider;
			}
		}
		
		#endregion
		
		#region FeeSemesterAgendaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeSemesterAgenda"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeSemesterAgendaProviderBase FeeSemesterAgendaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeSemesterAgendaProvider;
			}
		}
		
		#endregion
		
		#region FeeRefundCodeDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeRefundCodeDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeRefundCodeDtlProviderBase FeeRefundCodeDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeRefundCodeDtlProvider;
			}
		}
		
		#endregion
		
		#region FeeVoucherInvocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeVoucherInvoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeVoucherInvocProviderBase FeeVoucherInvocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeVoucherInvocProvider;
			}
		}
		
		#endregion
		
		#region GsAddressDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsAddressDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsAddressDtlProviderBase GsAddressDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsAddressDtlProvider;
			}
		}
		
		#endregion
		
		#region FeeRefndStdReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeRefndStdReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeRefndStdReqProviderBase FeeRefndStdReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeRefndStdReqProvider;
			}
		}
		
		#endregion
		
		#region GsCdeHonorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeHonor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeHonorProviderBase GsCdeHonorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeHonorProvider;
			}
		}
		
		#endregion
		
		#region GsCdeApprovalPnltyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeApprovalPnlty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeApprovalPnltyProviderBase GsCdeApprovalPnltyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeApprovalPnltyProvider;
			}
		}
		
		#endregion
		
		#region FeeItemSemesterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeItemSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeItemSemesterProviderBase FeeItemSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeItemSemesterProvider;
			}
		}
		
		#endregion
		
		#region GsCdeFacultyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeFaculty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeFacultyProviderBase GsCdeFacultyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeFacultyProvider;
			}
		}
		
		#endregion
		
		#region GsCdeClrncItemFacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeClrncItemFac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeClrncItemFacProviderBase GsCdeClrncItemFacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeClrncItemFacProvider;
			}
		}
		
		#endregion
		
		#region FeeRefndStdDetProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeRefndStdDet"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeRefndStdDetProviderBase FeeRefndStdDetProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeRefndStdDetProvider;
			}
		}
		
		#endregion
		
		#region FeeItemTrnsBlncProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeItemTrnsBlnc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeItemTrnsBlncProviderBase FeeItemTrnsBlncProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeItemTrnsBlncProvider;
			}
		}
		
		#endregion
		
		#region FeeStudAllowanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudAllowance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudAllowanceProviderBase FeeStudAllowanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudAllowanceProvider;
			}
		}
		
		#endregion
		
		#region FeeLimitRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeLimitRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeLimitRuleProviderBase FeeLimitRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeLimitRuleProvider;
			}
		}
		
		#endregion
		
		#region FeeStudInstallmentRequestProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudInstallmentRequest"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudInstallmentRequestProviderBase FeeStudInstallmentRequestProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudInstallmentRequestProvider;
			}
		}
		
		#endregion
		
		#region FeeStudBankProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudBank"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudBankProviderBase FeeStudBankProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudBankProvider;
			}
		}
		
		#endregion
		
		#region FeeStudInstallmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudInstallment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudInstallmentProviderBase FeeStudInstallmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudInstallmentProvider;
			}
		}
		
		#endregion
		
		#region FeeStudItemCnclProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudItemCncl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudItemCnclProviderBase FeeStudItemCnclProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudItemCnclProvider;
			}
		}
		
		#endregion
		
		#region FeeStudFundProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudFund"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudFundProviderBase FeeStudFundProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudFundProvider;
			}
		}
		
		#endregion
		
		#region FeeStudFeeItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudFeeItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudFeeItemProviderBase FeeStudFeeItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudFeeItemProvider;
			}
		}
		
		#endregion
		
		#region FeeStudDiscFeeItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudDiscFeeItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudDiscFeeItemProviderBase FeeStudDiscFeeItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudDiscFeeItemProvider;
			}
		}
		
		#endregion
		
		#region FeeStudNatSimilarityRequestProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudNatSimilarityRequest"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudNatSimilarityRequestProviderBase FeeStudNatSimilarityRequestProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudNatSimilarityRequestProvider;
			}
		}
		
		#endregion
		
		#region FeeStudDiscSemesterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudDiscSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudDiscSemesterProviderBase FeeStudDiscSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudDiscSemesterProvider;
			}
		}
		
		#endregion
		
		#region FeeStudPayPostponeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudPayPostpone"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudPayPostponeProviderBase FeeStudPayPostponeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudPayPostponeProvider;
			}
		}
		
		#endregion
		
		#region FeeStudDiscProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudDisc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudDiscProviderBase FeeStudDiscProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudDiscProvider;
			}
		}
		
		#endregion
		
		#region FeeStudVoucherProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudVoucher"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudVoucherProviderBase FeeStudVoucherProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudVoucherProvider;
			}
		}
		
		#endregion
		
		#region FeeStudCoursesItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudCoursesItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudCoursesItemProviderBase FeeStudCoursesItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudCoursesItemProvider;
			}
		}
		
		#endregion
		
		#region FeeTreasuryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeTreasury"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeTreasuryProviderBase FeeTreasuryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeTreasuryProvider;
			}
		}
		
		#endregion
		
		#region FeeStudRetrieveRequestProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudRetrieveRequest"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudRetrieveRequestProviderBase FeeStudRetrieveRequestProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudRetrieveRequestProvider;
			}
		}
		
		#endregion
		
		#region FeeStudVoucherPayMthodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudVoucherPayMthod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudVoucherPayMthodProviderBase FeeStudVoucherPayMthodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudVoucherPayMthodProvider;
			}
		}
		
		#endregion
		
		#region FeeStudVoucherItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudVoucherItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudVoucherItemProviderBase FeeStudVoucherItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudVoucherItemProvider;
			}
		}
		
		#endregion
		
		#region FeeStudDiscCodeItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudDiscCodeItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudDiscCodeItemProviderBase FeeStudDiscCodeItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudDiscCodeItemProvider;
			}
		}
		
		#endregion
		
		#region FeeStudVoucherCrsItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeStudVoucherCrsItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeStudVoucherCrsItemProviderBase FeeStudVoucherCrsItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeStudVoucherCrsItemProvider;
			}
		}
		
		#endregion
		
		#region GsCdeIncomeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeIncome"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeIncomeProviderBase GsCdeIncomeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeIncomeProvider;
			}
		}
		
		#endregion
		
		#region GsCdeMaritalStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeMaritalStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeMaritalStatusProviderBase GsCdeMaritalStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeMaritalStatusProvider;
			}
		}
		
		#endregion
		
		#region GsCodeMilCourseResProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeMilCourseRes"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeMilCourseResProviderBase GsCodeMilCourseResProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeMilCourseResProvider;
			}
		}
		
		#endregion
		
		#region GsCodeMilitaryStateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeMilitaryState"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeMilitaryStateProviderBase GsCodeMilitaryStateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeMilitaryStateProvider;
			}
		}
		
		#endregion
		
		#region GsCodePassFailProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodePassFail"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodePassFailProviderBase GsCodePassFailProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodePassFailProvider;
			}
		}
		
		#endregion
		
		#region GsCodePayMethodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodePayMethod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodePayMethodProviderBase GsCodePayMethodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodePayMethodProvider;
			}
		}
		
		#endregion
		
		#region GsCodeLanguageProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeLanguage"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeLanguageProviderBase GsCodeLanguageProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeLanguageProvider;
			}
		}
		
		#endregion
		
		#region GsCodeKinshipProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeKinship"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeKinshipProviderBase GsCodeKinshipProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeKinshipProvider;
			}
		}
		
		#endregion
		
		#region GsCodeIdentTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeIdentType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeIdentTypeProviderBase GsCodeIdentTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeIdentTypeProvider;
			}
		}
		
		#endregion
		
		#region GsCodeGuardSupportLevelProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeGuardSupportLevel"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeGuardSupportLevelProviderBase GsCodeGuardSupportLevelProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeGuardSupportLevelProvider;
			}
		}
		
		#endregion
		
		#region GsCodeHouseStatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeHouseStat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeHouseStatProviderBase GsCodeHouseStatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeHouseStatProvider;
			}
		}
		
		#endregion
		
		#region GsCodeHouseTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeHouseType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeHouseTypeProviderBase GsCodeHouseTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeHouseTypeProvider;
			}
		}
		
		#endregion
		
		#region GsCodeIdentKindProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeIdentKind"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeIdentKindProviderBase GsCodeIdentKindProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeIdentKindProvider;
			}
		}
		
		#endregion
		
		#region GsCodePayMthdTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodePayMthdType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodePayMthdTypeProviderBase GsCodePayMthdTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodePayMthdTypeProvider;
			}
		}
		
		#endregion
		
		#region GsContactMethodHProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsContactMethodH"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsContactMethodHProviderBase GsContactMethodHProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsContactMethodHProvider;
			}
		}
		
		#endregion
		
		#region GsCodeGenderProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeGender"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeGenderProviderBase GsCodeGenderProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeGenderProvider;
			}
		}
		
		#endregion
		
		#region GsCommProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsComm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCommProviderBase GsCommProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCommProvider;
			}
		}
		
		#endregion
		
		#region GsCommRecomProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCommRecom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCommRecomProviderBase GsCommRecomProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCommRecomProvider;
			}
		}
		
		#endregion
		
		#region GsCommStaffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCommStaff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCommStaffProviderBase GsCommStaffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCommStaffProvider;
			}
		}
		
		#endregion
		
		#region GsContactMethodDProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsContactMethodD"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsContactMethodDProviderBase GsContactMethodDProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsContactMethodDProvider;
			}
		}
		
		#endregion
		
		#region GsCodeReligionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeReligion"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeReligionProviderBase GsCodeReligionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeReligionProvider;
			}
		}
		
		#endregion
		
		#region GsCommPurposeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCommPurpose"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCommPurposeProviderBase GsCommPurposeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCommPurposeProvider;
			}
		}
		
		#endregion
		
		#region GsCodeRptSignatureProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeRptSignature"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeRptSignatureProviderBase GsCodeRptSignatureProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeRptSignatureProvider;
			}
		}
		
		#endregion
		
		#region GsCommDuttyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCommDutty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCommDuttyProviderBase GsCommDuttyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCommDuttyProvider;
			}
		}
		
		#endregion
		
		#region GsCodeSysProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeSys"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeSysProviderBase GsCodeSysProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeSysProvider;
			}
		}
		
		#endregion
		
		#region GsCodeReqStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeReqStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeReqStatusProviderBase GsCodeReqStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeReqStatusProvider;
			}
		}
		
		#endregion
		
		#region GsCodeWeekDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeWeekDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeWeekDayProviderBase GsCodeWeekDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeWeekDayProvider;
			}
		}
		
		#endregion
		
		#region GsCdeSportTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeSportType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeSportTypeProviderBase GsCdeSportTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeSportTypeProvider;
			}
		}
		
		#endregion
		
		#region GsCodeEducationLevelProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeEducationLevel"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeEducationLevelProviderBase GsCodeEducationLevelProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeEducationLevelProvider;
			}
		}
		
		#endregion
		
		#region GsCdeTrnSiteActProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeTrnSiteAct"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeTrnSiteActProviderBase GsCdeTrnSiteActProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeTrnSiteActProvider;
			}
		}
		
		#endregion
		
		#region GsCdeSpecAreaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeSpecArea"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeSpecAreaProviderBase GsCdeSpecAreaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeSpecAreaProvider;
			}
		}
		
		#endregion
		
		#region GsCdeViolCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeViolCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeViolCatProviderBase GsCdeViolCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeViolCatProvider;
			}
		}
		
		#endregion
		
		#region GsCdeSchoolTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeSchoolType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeSchoolTypeProviderBase GsCdeSchoolTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeSchoolTypeProvider;
			}
		}
		
		#endregion
		
		#region GsCdeOutcomeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeOutcome"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeOutcomeProviderBase GsCdeOutcomeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeOutcomeProvider;
			}
		}
		
		#endregion
		
		#region GsCdeTrnSiteTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeTrnSiteType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeTrnSiteTypeProviderBase GsCdeTrnSiteTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeTrnSiteTypeProvider;
			}
		}
		
		#endregion
		
		#region GsCdePenaltyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdePenalty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdePenaltyProviderBase GsCdePenaltyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdePenaltyProvider;
			}
		}
		
		#endregion
		
		#region GsCdeSchoolProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeSchool"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeSchoolProviderBase GsCdeSchoolProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeSchoolProvider;
			}
		}
		
		#endregion
		
		#region GsCdeTrainSiteProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeTrainSite"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeTrainSiteProviderBase GsCdeTrainSiteProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeTrainSiteProvider;
			}
		}
		
		#endregion
		
		#region GsCdeTrainRespProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeTrainResp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeTrainRespProviderBase GsCdeTrainRespProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeTrainRespProvider;
			}
		}
		
		#endregion
		
		#region GsCdePenaltyRelatedProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdePenaltyRelated"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdePenaltyRelatedProviderBase GsCdePenaltyRelatedProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdePenaltyRelatedProvider;
			}
		}
		
		#endregion
		
		#region GsCdeUniversitiesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeUniversities"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeUniversitiesProviderBase GsCdeUniversitiesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeUniversitiesProvider;
			}
		}
		
		#endregion
		
		#region GsCdeViolProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeViol"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeViolProviderBase GsCdeViolProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeViolProvider;
			}
		}
		
		#endregion
		
		#region GsCodeCNodeNatureProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeCNodeNature"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeCNodeNatureProviderBase GsCodeCNodeNatureProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeCNodeNatureProvider;
			}
		}
		
		#endregion
		
		#region GsCodeContactMethodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeContactMethod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeContactMethodProviderBase GsCodeContactMethodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeContactMethodProvider;
			}
		}
		
		#endregion
		
		#region GsCodeCurrencyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeCurrency"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeCurrencyProviderBase GsCodeCurrencyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeCurrencyProvider;
			}
		}
		
		#endregion
		
		#region GsCodeApprovalProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeApproval"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeApprovalProviderBase GsCodeApprovalProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeApprovalProvider;
			}
		}
		
		#endregion
		
		#region GsCodeDocTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeDocType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeDocTypeProviderBase GsCodeDocTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeDocTypeProvider;
			}
		}
		
		#endregion
		
		#region GsCodeApprovalListHProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeApprovalListH"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeApprovalListHProviderBase GsCodeApprovalListHProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeApprovalListHProvider;
			}
		}
		
		#endregion
		
		#region GsCodeApprovalListDProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeApprovalListD"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeApprovalListDProviderBase GsCodeApprovalListDProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeApprovalListDProvider;
			}
		}
		
		#endregion
		
		#region GsCodeApprovalFuncProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeApprovalFunc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeApprovalFuncProviderBase GsCodeApprovalFuncProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeApprovalFuncProvider;
			}
		}
		
		#endregion
		
		#region GsCdeWeekDayGrpProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCdeWeekDayGrp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCdeWeekDayGrpProviderBase GsCdeWeekDayGrpProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCdeWeekDayGrpProvider;
			}
		}
		
		#endregion
		
		#region SaCodeExperienceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeExperience"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeExperienceProviderBase SaCodeExperienceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeExperienceProvider;
			}
		}
		
		#endregion
		
		#region GsCodeApprovalFacultyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="GsCodeApprovalFaculty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static GsCodeApprovalFacultyProviderBase GsCodeApprovalFacultyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.GsCodeApprovalFacultyProvider;
			}
		}
		
		#endregion
		
		#region SaCodeHealthStateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeHealthState"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeHealthStateProviderBase SaCodeHealthStateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeHealthStateProvider;
			}
		}
		
		#endregion
		
		#region SpoSponsorTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoSponsorType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoSponsorTypeProviderBase SpoSponsorTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoSponsorTypeProvider;
			}
		}
		
		#endregion
		
		#region SaCodeJobActivityProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeJobActivity"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeJobActivityProviderBase SaCodeJobActivityProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeJobActivityProvider;
			}
		}
		
		#endregion
		
		#region SpoSponsorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoSponsor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoSponsorProviderBase SpoSponsorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoSponsorProvider;
			}
		}
		
		#endregion
		
		#region StaticViNotesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="StaticViNotes"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static StaticViNotesProviderBase StaticViNotesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.StaticViNotesProvider;
			}
		}
		
		#endregion
		
		#region SpoSponsorOfferProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoSponsorOffer"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoSponsorOfferProviderBase SpoSponsorOfferProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoSponsorOfferProvider;
			}
		}
		
		#endregion
		
		#region SpoSponsorFeeItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoSponsorFeeItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoSponsorFeeItemProviderBase SpoSponsorFeeItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoSponsorFeeItemProvider;
			}
		}
		
		#endregion
		
		#region SpoOfferContinueProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoOfferContinue"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoOfferContinueProviderBase SpoOfferContinueProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoOfferContinueProvider;
			}
		}
		
		#endregion
		
		#region SpoResponsiblePersonProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoResponsiblePerson"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoResponsiblePersonProviderBase SpoResponsiblePersonProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoResponsiblePersonProvider;
			}
		}
		
		#endregion
		
		#region SpoSponsorStudSemesterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoSponsorStudSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoSponsorStudSemesterProviderBase SpoSponsorStudSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoSponsorStudSemesterProvider;
			}
		}
		
		#endregion
		
		#region SpoSponsorOfferExtProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoSponsorOfferExt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoSponsorOfferExtProviderBase SpoSponsorOfferExtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoSponsorOfferExtProvider;
			}
		}
		
		#endregion
		
		#region SvAutoMsgTmpltProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvAutoMsgTmplt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvAutoMsgTmpltProviderBase SvAutoMsgTmpltProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvAutoMsgTmpltProvider;
			}
		}
		
		#endregion
		
		#region SvCdeCompDProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeCompD"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeCompDProviderBase SvCdeCompDProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeCompDProvider;
			}
		}
		
		#endregion
		
		#region SvCdeCompHProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeCompH"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeCompHProviderBase SvCdeCompHProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeCompHProvider;
			}
		}
		
		#endregion
		
		#region SvCdeLockerProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeLocker"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeLockerProviderBase SvCdeLockerProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeLockerProvider;
			}
		}
		
		#endregion
		
		#region SvCdeMsgParamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeMsgParam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeMsgParamProviderBase SvCdeMsgParamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeMsgParamProvider;
			}
		}
		
		#endregion
		
		#region SvCdeQstnTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeQstnType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeQstnTypeProviderBase SvCdeQstnTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeQstnTypeProvider;
			}
		}
		
		#endregion
		
		#region SpoOfferStudExceptionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoOfferStudException"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoOfferStudExceptionProviderBase SpoOfferStudExceptionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoOfferStudExceptionProvider;
			}
		}
		
		#endregion
		
		#region SvCdeReqStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeReqStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeReqStatusProviderBase SvCdeReqStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeReqStatusProvider;
			}
		}
		
		#endregion
		
		#region SvCdeEvalItemHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeEvalItemHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeEvalItemHdrProviderBase SvCdeEvalItemHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeEvalItemHdrProvider;
			}
		}
		
		#endregion
		
		#region SvCdeEvalExtProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeEvalExt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeEvalExtProviderBase SvCdeEvalExtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeEvalExtProvider;
			}
		}
		
		#endregion
		
		#region SpoStudFeeItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoStudFeeItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoStudFeeItemProviderBase SpoStudFeeItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoStudFeeItemProvider;
			}
		}
		
		#endregion
		
		#region SvCdeCompTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeCompType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeCompTypeProviderBase SvCdeCompTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeCompTypeProvider;
			}
		}
		
		#endregion
		
		#region SvCdeCompReplyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeCompReply"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeCompReplyProviderBase SvCdeCompReplyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeCompReplyProvider;
			}
		}
		
		#endregion
		
		#region SvCdeDeviceTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeDeviceType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeDeviceTypeProviderBase SvCdeDeviceTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeDeviceTypeProvider;
			}
		}
		
		#endregion
		
		#region SpoDepartmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoDepartment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoDepartmentProviderBase SpoDepartmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoDepartmentProvider;
			}
		}
		
		#endregion
		
		#region SpoSponsorStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoSponsorStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoSponsorStudProviderBase SpoSponsorStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoSponsorStudProvider;
			}
		}
		
		#endregion
		
		#region SpoContactProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SpoContact"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SpoContactProviderBase SpoContactProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SpoContactProvider;
			}
		}
		
		#endregion
		
		#region SeVersionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeVersion"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeVersionProviderBase SeVersionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeVersionProvider;
			}
		}
		
		#endregion
		
		#region SeCodeUserTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeCodeUserType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeCodeUserTypeProviderBase SeCodeUserTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeCodeUserTypeProvider;
			}
		}
		
		#endregion
		
		#region SeControlBizTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeControlBizType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeControlBizTypeProviderBase SeControlBizTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeControlBizTypeProvider;
			}
		}
		
		#endregion
		
		#region SeModuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeModule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeModuleProviderBase SeModuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeModuleProvider;
			}
		}
		
		#endregion
		
		#region SeControlDisableWayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeControlDisableWay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeControlDisableWayProviderBase SeControlDisableWayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeControlDisableWayProvider;
			}
		}
		
		#endregion
		
		#region AsFacultyInfoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AsFacultyInfo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AsFacultyInfoProviderBase AsFacultyInfoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AsFacultyInfoProvider;
			}
		}
		
		#endregion
		
		#region AsCodeDegreeClassProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AsCodeDegreeClass"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AsCodeDegreeClassProviderBase AsCodeDegreeClassProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AsCodeDegreeClassProvider;
			}
		}
		
		#endregion
		
		#region SeCodeUserPlaceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeCodeUserPlace"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeCodeUserPlaceProviderBase SeCodeUserPlaceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeCodeUserPlaceProvider;
			}
		}
		
		#endregion
		
		#region SeCdeBlockTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeCdeBlockType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeCdeBlockTypeProviderBase SeCdeBlockTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeCdeBlockTypeProvider;
			}
		}
		
		#endregion
		
		#region SeAccntProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeAccnt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeAccntProviderBase SeAccntProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeAccntProvider;
			}
		}
		
		#endregion
		
		#region SeCodeChangeTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeCodeChangeType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeCodeChangeTypeProviderBase SeCodeChangeTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeCodeChangeTypeProvider;
			}
		}
		
		#endregion
		
		#region SeCodeUserJobProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeCodeUserJob"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeCodeUserJobProviderBase SeCodeUserJobProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeCodeUserJobProvider;
			}
		}
		
		#endregion
		
		#region SeControlTechTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeControlTechType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeControlTechTypeProviderBase SeControlTechTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeControlTechTypeProvider;
			}
		}
		
		#endregion
		
		#region SeUserAccntProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeUserAccnt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeUserAccntProviderBase SeUserAccntProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeUserAccntProvider;
			}
		}
		
		#endregion
		
		#region SeUserPhaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeUserPhase"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeUserPhaseProviderBase SeUserPhaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeUserPhaseProvider;
			}
		}
		
		#endregion
		
		#region SeFormProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeForm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeFormProviderBase SeFormProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeFormProvider;
			}
		}
		
		#endregion
		
		#region SeUserCrsAssessProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeUserCrsAssess"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeUserCrsAssessProviderBase SeUserCrsAssessProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeUserCrsAssessProvider;
			}
		}
		
		#endregion
		
		#region SeUserAccntDegProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeUserAccntDeg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeUserAccntDegProviderBase SeUserAccntDegProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeUserAccntDegProvider;
			}
		}
		
		#endregion
		
		#region SeUserProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeUser"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeUserProviderBase SeUserProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeUserProvider;
			}
		}
		
		#endregion
		
		#region SvCdeSrvyTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeSrvyType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeSrvyTypeProviderBase SvCdeSrvyTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeSrvyTypeProvider;
			}
		}
		
		#endregion
		
		#region SeUserAccntFormDiffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeUserAccntFormDiff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeUserAccntFormDiffProviderBase SeUserAccntFormDiffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeUserAccntFormDiffProvider;
			}
		}
		
		#endregion
		
		#region SeFormControlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeFormControl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeFormControlProviderBase SeFormControlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeFormControlProvider;
			}
		}
		
		#endregion
		
		#region SeBlockTransProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeBlockTrans"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeBlockTransProviderBase SeBlockTransProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeBlockTransProvider;
			}
		}
		
		#endregion
		
		#region SeUserAccntControlDiffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeUserAccntControlDiff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeUserAccntControlDiffProviderBase SeUserAccntControlDiffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeUserAccntControlDiffProvider;
			}
		}
		
		#endregion
		
		#region SeStudTabControlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeStudTabControl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeStudTabControlProviderBase SeStudTabControlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeStudTabControlProvider;
			}
		}
		
		#endregion
		
		#region SeStudTabUserTypeControlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeStudTabUserTypeControl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeStudTabUserTypeControlProviderBase SeStudTabUserTypeControlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeStudTabUserTypeControlProvider;
			}
		}
		
		#endregion
		
		#region SvCdeTaskStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCdeTaskStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCdeTaskStatusProviderBase SvCdeTaskStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCdeTaskStatusProvider;
			}
		}
		
		#endregion
		
		#region SvCodeEvalItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCodeEvalItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCodeEvalItemProviderBase SvCodeEvalItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCodeEvalItemProvider;
			}
		}
		
		#endregion
		
		#region SysFormControlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SysFormControl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SysFormControlProviderBase SysFormControlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SysFormControlProvider;
			}
		}
		
		#endregion
		
		#region SysMessagesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SysMessages"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SysMessagesProviderBase SysMessagesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SysMessagesProvider;
			}
		}
		
		#endregion
		
		#region SysParamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SysParam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SysParamProviderBase SysParamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SysParamProvider;
			}
		}
		
		#endregion
		
		#region SysServiceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SysService"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SysServiceProviderBase SysServiceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SysServiceProvider;
			}
		}
		
		#endregion
		
		#region SystemParamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SystemParam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SystemParamProviderBase SystemParamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SystemParamProvider;
			}
		}
		
		#endregion
		
		#region SysFormProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SysForm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SysFormProviderBase SysFormProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SysFormProvider;
			}
		}
		
		#endregion
		
		#region AdmAdmissionBandProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAdmissionBand"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAdmissionBandProviderBase AdmAdmissionBandProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAdmissionBandProvider;
			}
		}
		
		#endregion
		
		#region SvUserTaskProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvUserTask"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvUserTaskProviderBase SvUserTaskProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvUserTaskProvider;
			}
		}
		
		#endregion
		
		#region SvUserMobTokenProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvUserMobToken"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvUserMobTokenProviderBase SvUserMobTokenProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvUserMobTokenProvider;
			}
		}
		
		#endregion
		
		#region SvStudStaffEvalExtProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudStaffEvalExt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudStaffEvalExtProviderBase SvStudStaffEvalExtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudStaffEvalExtProvider;
			}
		}
		
		#endregion
		
		#region SvUserRefreshTokenProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvUserRefreshToken"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvUserRefreshTokenProviderBase SvUserRefreshTokenProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvUserRefreshTokenProvider;
			}
		}
		
		#endregion
		
		#region TrnsCdeBusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsCdeBus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsCdeBusProviderBase TrnsCdeBusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsCdeBusProvider;
			}
		}
		
		#endregion
		
		#region SvUserMessageProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvUserMessage"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvUserMessageProviderBase SvUserMessageProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvUserMessageProvider;
			}
		}
		
		#endregion
		
		#region SvCourseEvalProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCourseEval"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCourseEvalProviderBase SvCourseEvalProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCourseEvalProvider;
			}
		}
		
		#endregion
		
		#region TrnsCdeColorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsCdeColor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsCdeColorProviderBase TrnsCdeColorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsCdeColorProvider;
			}
		}
		
		#endregion
		
		#region WfCdeFunctionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="WfCdeFunction"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static WfCdeFunctionProviderBase WfCdeFunctionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.WfCdeFunctionProvider;
			}
		}
		
		#endregion
		
		#region TrnsCdeDrvrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsCdeDrvr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsCdeDrvrProviderBase TrnsCdeDrvrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsCdeDrvrProvider;
			}
		}
		
		#endregion
		
		#region SvCodeRatingSchmProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCodeRatingSchm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCodeRatingSchmProviderBase SvCodeRatingSchmProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCodeRatingSchmProvider;
			}
		}
		
		#endregion
		
		#region TrnsLineProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsLine"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsLineProviderBase TrnsLineProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsLineProvider;
			}
		}
		
		#endregion
		
		#region TrnsCdeStopProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsCdeStop"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsCdeStopProviderBase TrnsCdeStopProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsCdeStopProvider;
			}
		}
		
		#endregion
		
		#region SvCourseEvalExtProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCourseEvalExt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCourseEvalExtProviderBase SvCourseEvalExtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCourseEvalExtProvider;
			}
		}
		
		#endregion
		
		#region WfCdeActionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="WfCdeAction"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static WfCdeActionProviderBase WfCdeActionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.WfCdeActionProvider;
			}
		}
		
		#endregion
		
		#region TrnsLineStopProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsLineStop"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsLineStopProviderBase TrnsLineStopProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsLineStopProvider;
			}
		}
		
		#endregion
		
		#region UsrTopLinkProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="UsrTopLink"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static UsrTopLinkProviderBase UsrTopLinkProvider
		{
			get 
			{
				LoadProviders();
				return _provider.UsrTopLinkProvider;
			}
		}
		
		#endregion
		
		#region TrnsStudCarStkrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsStudCarStkr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsStudCarStkrProviderBase TrnsStudCarStkrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsStudCarStkrProvider;
			}
		}
		
		#endregion
		
		#region SvStudStaffEvalProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudStaffEval"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudStaffEvalProviderBase SvStudStaffEvalProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudStaffEvalProvider;
			}
		}
		
		#endregion
		
		#region TrnsStudReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TrnsStudReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TrnsStudReqProviderBase TrnsStudReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TrnsStudReqProvider;
			}
		}
		
		#endregion
		
		#region SvStudPollProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudPoll"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudPollProviderBase SvStudPollProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudPollProvider;
			}
		}
		
		#endregion
		
		#region SvStudLockerReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudLockerReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudLockerReqProviderBase SvStudLockerReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudLockerReqProvider;
			}
		}
		
		#endregion
		
		#region SvSrvyHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvSrvyHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvSrvyHdrProviderBase SvSrvyHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvSrvyHdrProvider;
			}
		}
		
		#endregion
		
		#region SvPollHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvPollHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvPollHdrProviderBase SvPollHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvPollHdrProvider;
			}
		}
		
		#endregion
		
		#region SvSrvyAnswrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvSrvyAnswr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvSrvyAnswrProviderBase SvSrvyAnswrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvSrvyAnswrProvider;
			}
		}
		
		#endregion
		
		#region SvPollDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvPollDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvPollDtlProviderBase SvPollDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvPollDtlProvider;
			}
		}
		
		#endregion
		
		#region SvSrvyRespondQstnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvSrvyRespondQstn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvSrvyRespondQstnProviderBase SvSrvyRespondQstnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvSrvyRespondQstnProvider;
			}
		}
		
		#endregion
		
		#region SvMsgTmpltParamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvMsgTmpltParam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvMsgTmpltParamProviderBase SvMsgTmpltParamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvMsgTmpltParamProvider;
			}
		}
		
		#endregion
		
		#region SvMessageSendPrvProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvMessageSendPrv"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvMessageSendPrvProviderBase SvMessageSendPrvProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvMessageSendPrvProvider;
			}
		}
		
		#endregion
		
		#region SvCodeRatingSchmDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCodeRatingSchmDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCodeRatingSchmDtlProviderBase SvCodeRatingSchmDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCodeRatingSchmDtlProvider;
			}
		}
		
		#endregion
		
		#region SvCourseEvalItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvCourseEvalItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvCourseEvalItemProviderBase SvCourseEvalItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvCourseEvalItemProvider;
			}
		}
		
		#endregion
		
		#region SvLecNoteProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvLecNote"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvLecNoteProviderBase SvLecNoteProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvLecNoteProvider;
			}
		}
		
		#endregion
		
		#region SvMessageProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvMessage"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvMessageProviderBase SvMessageProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvMessageProvider;
			}
		}
		
		#endregion
		
		#region SvSrvyQstnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvSrvyQstn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvSrvyQstnProviderBase SvSrvyQstnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvSrvyQstnProvider;
			}
		}
		
		#endregion
		
		#region SvStudCompProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudComp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudCompProviderBase SvStudCompProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudCompProvider;
			}
		}
		
		#endregion
		
		#region SvSrvyRespondAnswrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvSrvyRespondAnswr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvSrvyRespondAnswrProviderBase SvSrvyRespondAnswrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvSrvyRespondAnswrProvider;
			}
		}
		
		#endregion
		
		#region SvStudCourseEvalProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudCourseEval"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudCourseEvalProviderBase SvStudCourseEvalProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudCourseEvalProvider;
			}
		}
		
		#endregion
		
		#region SvStudAskAdvProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudAskAdv"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudAskAdvProviderBase SvStudAskAdvProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudAskAdvProvider;
			}
		}
		
		#endregion
		
		#region SvStudCourseEvalExtProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudCourseEvalExt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudCourseEvalExtProviderBase SvStudCourseEvalExtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudCourseEvalExtProvider;
			}
		}
		
		#endregion
		
		#region SvStaffEvlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStaffEvl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStaffEvlProviderBase SvStaffEvlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStaffEvlProvider;
			}
		}
		
		#endregion
		
		#region SvStaffPollProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStaffPoll"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStaffPollProviderBase SvStaffPollProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStaffPollProvider;
			}
		}
		
		#endregion
		
		#region SvStaffEvalExtProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStaffEvalExt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStaffEvalExtProviderBase SvStaffEvalExtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStaffEvalExtProvider;
			}
		}
		
		#endregion
		
		#region SvStudAskAdvReProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStudAskAdvRe"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStudAskAdvReProviderBase SvStudAskAdvReProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStudAskAdvReProvider;
			}
		}
		
		#endregion
		
		#region SeApplicationLogProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeApplicationLog"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeApplicationLogProviderBase SeApplicationLogProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeApplicationLogProvider;
			}
		}
		
		#endregion
		
		#region SvStaffEvalItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SvStaffEvalItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SvStaffEvalItemProviderBase SvStaffEvalItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SvStaffEvalItemProvider;
			}
		}
		
		#endregion
		
		#region SaCodeScDegProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeScDeg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeScDegProviderBase SaCodeScDegProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeScDegProvider;
			}
		}
		
		#endregion
		
		#region SaCodeJobStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeJobStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeJobStatusProviderBase SaCodeJobStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeJobStatusProvider;
			}
		}
		
		#endregion
		
		#region SaPromotionCondProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPromotionCond"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPromotionCondProviderBase SaPromotionCondProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPromotionCondProvider;
			}
		}
		
		#endregion
		
		#region AsCodeDegreeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AsCodeDegree"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AsCodeDegreeProviderBase AsCodeDegreeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AsCodeDegreeProvider;
			}
		}
		
		#endregion
		
		#region SaStfMemberProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaStfMember"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaStfMemberProviderBase SaStfMemberProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaStfMemberProvider;
			}
		}
		
		#endregion
		
		#region SaPersonIdProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPersonId"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPersonIdProviderBase SaPersonIdProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPersonIdProvider;
			}
		}
		
		#endregion
		
		#region SaPromotionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPromotion"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPromotionProviderBase SaPromotionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPromotionProvider;
			}
		}
		
		#endregion
		
		#region SaOfficeHourProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaOfficeHour"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaOfficeHourProviderBase SaOfficeHourProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaOfficeHourProvider;
			}
		}
		
		#endregion
		
		#region SaCodeSummeryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeSummery"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeSummeryProviderBase SaCodeSummeryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeSummeryProvider;
			}
		}
		
		#endregion
		
		#region SaMilitaryStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaMilitaryStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaMilitaryStatusProviderBase SaMilitaryStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaMilitaryStatusProvider;
			}
		}
		
		#endregion
		
		#region SaMiltaryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaMiltary"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaMiltaryProviderBase SaMiltaryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaMiltaryProvider;
			}
		}
		
		#endregion
		
		#region SaJobStartStatmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaJobStartStatment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaJobStartStatmentProviderBase SaJobStartStatmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaJobStartStatmentProvider;
			}
		}
		
		#endregion
		
		#region SaJobStoppageProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaJobStoppage"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaJobStoppageProviderBase SaJobStoppageProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaJobStoppageProvider;
			}
		}
		
		#endregion
		
		#region SaKeywordListProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaKeywordList"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaKeywordListProviderBase SaKeywordListProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaKeywordListProvider;
			}
		}
		
		#endregion
		
		#region SaPromotionCondStsfProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPromotionCondStsf"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPromotionCondStsfProviderBase SaPromotionCondStsfProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPromotionCondStsfProvider;
			}
		}
		
		#endregion
		
		#region SeApplicationAuditProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeApplicationAudit"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeApplicationAuditProviderBase SeApplicationAuditProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeApplicationAuditProvider;
			}
		}
		
		#endregion
		
		#region SaPromotionRequestProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPromotionRequest"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPromotionRequestProviderBase SaPromotionRequestProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPromotionRequestProvider;
			}
		}
		
		#endregion
		
		#region SaPublicationProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPublication"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPublicationProviderBase SaPublicationProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPublicationProvider;
			}
		}
		
		#endregion
		
		#region EdAcadYearProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdAcadYear"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdAcadYearProviderBase EdAcadYearProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdAcadYearProvider;
			}
		}
		
		#endregion
		
		#region SaPunishBylawAuthProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPunishBylawAuth"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPunishBylawAuthProviderBase SaPunishBylawAuthProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPunishBylawAuthProvider;
			}
		}
		
		#endregion
		
		#region SaRaiseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaRaise"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaRaiseProviderBase SaRaiseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaRaiseProvider;
			}
		}
		
		#endregion
		
		#region SaRelativeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaRelative"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaRelativeProviderBase SaRelativeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaRelativeProvider;
			}
		}
		
		#endregion
		
		#region SaResearchTeamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaResearchTeam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaResearchTeamProviderBase SaResearchTeamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaResearchTeamProvider;
			}
		}
		
		#endregion
		
		#region SaPunishmentBylawsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPunishmentBylaws"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPunishmentBylawsProviderBase SaPunishmentBylawsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPunishmentBylawsProvider;
			}
		}
		
		#endregion
		
		#region SaJobActivityProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaJobActivity"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaJobActivityProviderBase SaJobActivityProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaJobActivityProvider;
			}
		}
		
		#endregion
		
		#region SaPunishmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaPunishment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaPunishmentProviderBase SaPunishmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaPunishmentProvider;
			}
		}
		
		#endregion
		
		#region SaTransferProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaTransfer"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaTransferProviderBase SaTransferProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaTransferProvider;
			}
		}
		
		#endregion
		
		#region SaScCommProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaScComm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaScCommProviderBase SaScCommProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaScCommProvider;
			}
		}
		
		#endregion
		
		#region SaCodeRatingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeRating"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeRatingProviderBase SaCodeRatingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeRatingProvider;
			}
		}
		
		#endregion
		
		#region SaFinStatmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaFinStatment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaFinStatmentProviderBase SaFinStatmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaFinStatmentProvider;
			}
		}
		
		#endregion
		
		#region SaCodePunishRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodePunishRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodePunishRsnProviderBase SaCodePunishRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodePunishRsnProvider;
			}
		}
		
		#endregion
		
		#region SaExtDelProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaExtDel"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaExtDelProviderBase SaExtDelProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaExtDelProvider;
			}
		}
		
		#endregion
		
		#region SaCodePunishingAuthorityProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodePunishingAuthority"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodePunishingAuthorityProviderBase SaCodePunishingAuthorityProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodePunishingAuthorityProvider;
			}
		}
		
		#endregion
		
		#region SaCodePunishProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodePunish"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodePunishProviderBase SaCodePunishProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodePunishProvider;
			}
		}
		
		#endregion
		
		#region SaCodeResearchCoopProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeResearchCoop"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeResearchCoopProviderBase SaCodeResearchCoopProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeResearchCoopProvider;
			}
		}
		
		#endregion
		
		#region EdCodeSemesterTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeSemesterType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeSemesterTypeProviderBase EdCodeSemesterTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeSemesterTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeSemesterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeSemesterProviderBase EdCodeSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeSemesterProvider;
			}
		}
		
		#endregion
		
		#region SaCodeJobActivityPlaceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeJobActivityPlace"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeJobActivityPlaceProviderBase SaCodeJobActivityPlaceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeJobActivityPlaceProvider;
			}
		}
		
		#endregion
		
		#region SaCodeJobBeforeStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeJobBeforeStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeJobBeforeStatusProviderBase SaCodeJobBeforeStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeJobBeforeStatusProvider;
			}
		}
		
		#endregion
		
		#region SaCodeOrgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeOrg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeOrgProviderBase SaCodeOrgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeOrgProvider;
			}
		}
		
		#endregion
		
		#region SaCodeParDelNatureProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeParDelNature"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeParDelNatureProviderBase SaCodeParDelNatureProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeParDelNatureProvider;
			}
		}
		
		#endregion
		
		#region SaCodeServTerminRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeServTerminRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeServTerminRsnProviderBase SaCodeServTerminRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeServTerminRsnProvider;
			}
		}
		
		#endregion
		
		#region SaCodeStaffTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeStaffType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeStaffTypeProviderBase SaCodeStaffTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeStaffTypeProvider;
			}
		}
		
		#endregion
		
		#region SaDocOfFileProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaDocOfFile"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaDocOfFileProviderBase SaDocOfFileProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaDocOfFileProvider;
			}
		}
		
		#endregion
		
		#region SaEmpHierarchyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaEmpHierarchy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaEmpHierarchyProviderBase SaEmpHierarchyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaEmpHierarchyProvider;
			}
		}
		
		#endregion
		
		#region SaEmploymentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaEmployment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaEmploymentProviderBase SaEmploymentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaEmploymentProvider;
			}
		}
		
		#endregion
		
		#region SaExperienceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaExperience"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaExperienceProviderBase SaExperienceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaExperienceProvider;
			}
		}
		
		#endregion
		
		#region SaCommMemberProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCommMember"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCommMemberProviderBase SaCommMemberProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCommMemberProvider;
			}
		}
		
		#endregion
		
		#region SaCodeVacationTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeVacationType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeVacationTypeProviderBase SaCodeVacationTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeVacationTypeProvider;
			}
		}
		
		#endregion
		
		#region SaCodeStfFlgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeStfFlg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeStfFlgProviderBase SaCodeStfFlgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeStfFlgProvider;
			}
		}
		
		#endregion
		
		#region SaCodeSuperviseJobProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeSuperviseJob"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeSuperviseJobProviderBase SaCodeSuperviseJobProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeSuperviseJobProvider;
			}
		}
		
		#endregion
		
		#region SaCodeTrainingFlgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeTrainingFlg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeTrainingFlgProviderBase SaCodeTrainingFlgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeTrainingFlgProvider;
			}
		}
		
		#endregion
		
		#region SaCodeTrainingOrgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaCodeTrainingOrg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaCodeTrainingOrgProviderBase SaCodeTrainingOrgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaCodeTrainingOrgProvider;
			}
		}
		
		#endregion
		
		#region SaScCommDecisionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaScCommDecision"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaScCommDecisionProviderBase SaScCommDecisionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaScCommDecisionProvider;
			}
		}
		
		#endregion
		
		#region ScCdeHallTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScCdeHallType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScCdeHallTypeProviderBase ScCdeHallTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScCdeHallTypeProvider;
			}
		}
		
		#endregion
		
		#region ScCdeGrpTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScCdeGrpType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScCdeGrpTypeProviderBase ScCdeGrpTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScCdeGrpTypeProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleHdrProviderBase ScScheduleHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleHdrProvider;
			}
		}
		
		#endregion
		
		#region SaScQualProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaScQual"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaScQualProviderBase SaScQualProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaScQualProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleDtlProviderBase ScScheduleDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleDtlProvider;
			}
		}
		
		#endregion
		
		#region ScBuildingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScBuilding"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScBuildingProviderBase ScBuildingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScBuildingProvider;
			}
		}
		
		#endregion
		
		#region ScSchdlPeriodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScSchdlPeriod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScSchdlPeriodProviderBase ScSchdlPeriodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScSchdlPeriodProvider;
			}
		}
		
		#endregion
		
		#region ScGroupInfoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScGroupInfo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScGroupInfoProviderBase ScGroupInfoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScGroupInfoProvider;
			}
		}
		
		#endregion
		
		#region ScHallProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScHall"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScHallProviderBase ScHallProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScHallProvider;
			}
		}
		
		#endregion
		
		#region ScTchngSlotProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScTchngSlot"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScTchngSlotProviderBase ScTchngSlotProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScTchngSlotProvider;
			}
		}
		
		#endregion
		
		#region ScSchdlSlotProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScSchdlSlot"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScSchdlSlotProviderBase ScSchdlSlotProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScSchdlSlotProvider;
			}
		}
		
		#endregion
		
		#region ScGroupDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScGroupDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScGroupDayProviderBase ScGroupDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScGroupDayProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleCrossListProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleCrossList"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleCrossListProviderBase ScScheduleCrossListProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleCrossListProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleDtlDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleDtlDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleDtlDayProviderBase ScScheduleDtlDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleDtlDayProvider;
			}
		}
		
		#endregion
		
		#region ScSchdlSlotStaffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScSchdlSlotStaff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScSchdlSlotStaffProviderBase ScSchdlSlotStaffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScSchdlSlotStaffProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleDtlDateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleDtlDate"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleDtlDateProviderBase ScScheduleDtlDateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleDtlDateProvider;
			}
		}
		
		#endregion
		
		#region ScTchngDayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScTchngDay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScTchngDayProviderBase ScTchngDayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScTchngDayProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleDtlDayExceptionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleDtlDayException"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleDtlDayExceptionProviderBase ScScheduleDtlDayExceptionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleDtlDayExceptionProvider;
			}
		}
		
		#endregion
		
		#region SeAccntControlDiffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeAccntControlDiff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeAccntControlDiffProviderBase SeAccntControlDiffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeAccntControlDiffProvider;
			}
		}
		
		#endregion
		
		#region ScTchngAgendaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScTchngAgenda"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScTchngAgendaProviderBase ScTchngAgendaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScTchngAgendaProvider;
			}
		}
		
		#endregion
		
		#region SeAccntFormDiffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SeAccntFormDiff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SeAccntFormDiffProviderBase SeAccntFormDiffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SeAccntFormDiffProvider;
			}
		}
		
		#endregion
		
		#region ScSectionGroupHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScSectionGroupHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScSectionGroupHdrProviderBase ScSectionGroupHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScSectionGroupHdrProvider;
			}
		}
		
		#endregion
		
		#region ScStudGroupProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScStudGroup"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScStudGroupProviderBase ScStudGroupProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScStudGroupProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleDtlExtStfProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleDtlExtStf"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleDtlExtStfProviderBase ScScheduleDtlExtStfProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleDtlExtStfProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleHdrDefaultProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleHdrDefault"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleHdrDefaultProviderBase ScScheduleHdrDefaultProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleHdrDefaultProvider;
			}
		}
		
		#endregion
		
		#region ScScheduleRsrvProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScScheduleRsrv"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScScheduleRsrvProviderBase ScScheduleRsrvProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScScheduleRsrvProvider;
			}
		}
		
		#endregion
		
		#region ScSectionGroupDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScSectionGroupDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScSectionGroupDtlProviderBase ScSectionGroupDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScSectionGroupDtlProvider;
			}
		}
		
		#endregion
		
		#region ScSchdlHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScSchdlHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScSchdlHdrProviderBase ScSchdlHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScSchdlHdrProvider;
			}
		}
		
		#endregion
		
		#region SaSupervisingJobsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaSupervisingJobs"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaSupervisingJobsProviderBase SaSupervisingJobsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaSupervisingJobsProvider;
			}
		}
		
		#endregion
		
		#region ScHallRsrvProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScHallRsrv"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScHallRsrvProviderBase ScHallRsrvProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScHallRsrvProvider;
			}
		}
		
		#endregion
		
		#region SaStfSummeryTransProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaStfSummeryTrans"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaStfSummeryTransProviderBase SaStfSummeryTransProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaStfSummeryTransProvider;
			}
		}
		
		#endregion
		
		#region SaTrainingCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaTrainingCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaTrainingCourseProviderBase SaTrainingCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaTrainingCourseProvider;
			}
		}
		
		#endregion
		
		#region SaStfDocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaStfDoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaStfDocProviderBase SaStfDocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaStfDocProvider;
			}
		}
		
		#endregion
		
		#region SaScResearchProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaScResearch"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaScResearchProviderBase SaScResearchProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaScResearchProvider;
			}
		}
		
		#endregion
		
		#region SaStfAttendProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaStfAttend"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaStfAttendProviderBase SaStfAttendProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaStfAttendProvider;
			}
		}
		
		#endregion
		
		#region SaVacationBylawsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaVacationBylaws"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaVacationBylawsProviderBase SaVacationBylawsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaVacationBylawsProvider;
			}
		}
		
		#endregion
		
		#region SaServTerminProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaServTermin"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaServTerminProviderBase SaServTerminProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaServTerminProvider;
			}
		}
		
		#endregion
		
		#region SaVacationRenewProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaVacationRenew"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaVacationRenewProviderBase SaVacationRenewProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaVacationRenewProvider;
			}
		}
		
		#endregion
		
		#region ScCdeHallEquipProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScCdeHallEquip"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScCdeHallEquipProviderBase ScCdeHallEquipProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScCdeHallEquipProvider;
			}
		}
		
		#endregion
		
		#region ScDaySlotProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScDaySlot"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScDaySlotProviderBase ScDaySlotProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScDaySlotProvider;
			}
		}
		
		#endregion
		
		#region ScGroupStaffProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScGroupStaff"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScGroupStaffProviderBase ScGroupStaffProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScGroupStaffProvider;
			}
		}
		
		#endregion
		
		#region ScHallEquipProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScHallEquip"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScHallEquipProviderBase ScHallEquipProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScHallEquipProvider;
			}
		}
		
		#endregion
		
		#region ScCdeActvtyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ScCdeActvty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ScCdeActvtyProviderBase ScCdeActvtyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ScCdeActvtyProvider;
			}
		}
		
		#endregion
		
		#region SaWarningAddTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaWarningAddType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaWarningAddTypeProviderBase SaWarningAddTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaWarningAddTypeProvider;
			}
		}
		
		#endregion
		
		#region SaWarningProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaWarning"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaWarningProviderBase SaWarningProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaWarningProvider;
			}
		}
		
		#endregion
		
		#region SaVacationRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaVacationRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaVacationRuleProviderBase SaVacationRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaVacationRuleProvider;
			}
		}
		
		#endregion
		
		#region SaVacationBalanceHProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaVacationBalanceH"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaVacationBalanceHProviderBase SaVacationBalanceHProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaVacationBalanceHProvider;
			}
		}
		
		#endregion
		
		#region SaVacationBalanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaVacationBalance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaVacationBalanceProviderBase SaVacationBalanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaVacationBalanceProvider;
			}
		}
		
		#endregion
		
		#region SaVacationProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="SaVacation"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static SaVacationProviderBase SaVacationProvider
		{
			get 
			{
				LoadProviders();
				return _provider.SaVacationProvider;
			}
		}
		
		#endregion
		
		#region FeeItemPaymentWaysProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeItemPaymentWays"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeItemPaymentWaysProviderBase FeeItemPaymentWaysProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeItemPaymentWaysProvider;
			}
		}
		
		#endregion
		
		#region FeeInvoiceItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeInvoiceItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeInvoiceItemProviderBase FeeInvoiceItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeInvoiceItemProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeUnitProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeUnit"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeUnitProviderBase CtrCdeUnitProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeUnitProvider;
			}
		}
		
		#endregion
		
		#region FeeInvoiceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeInvoice"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeInvoiceProviderBase FeeInvoiceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeInvoiceProvider;
			}
		}
		
		#endregion
		
		#region CtrKtchnStfCrtfProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrKtchnStfCrtf"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrKtchnStfCrtfProviderBase CtrKtchnStfCrtfProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrKtchnStfCrtfProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeSrvcJobProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeSrvcJob"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeSrvcJobProviderBase CtrCdeSrvcJobProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeSrvcJobProvider;
			}
		}
		
		#endregion
		
		#region CtrSrvcCrewProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrSrvcCrew"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrSrvcCrewProviderBase CtrSrvcCrewProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrSrvcCrewProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeSrvMthdProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeSrvMthd"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeSrvMthdProviderBase CtrCdeSrvMthdProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeSrvMthdProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeMealProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeMeal"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeMealProviderBase CtrCdeMealProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeMealProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeSpclMealProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeSpclMeal"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeSpclMealProviderBase CtrCdeSpclMealProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeSpclMealProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeMealItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeMealItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeMealItemProviderBase CtrCdeMealItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeMealItemProvider;
			}
		}
		
		#endregion
		
		#region CtrStudExpProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrStudExp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrStudExpProviderBase CtrStudExpProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrStudExpProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeOutRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeOutRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeOutRsnProviderBase CtrCdeOutRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeOutRsnProvider;
			}
		}
		
		#endregion
		
		#region EdBranchRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdBranchRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdBranchRuleProviderBase EdBranchRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdBranchRuleProvider;
			}
		}
		
		#endregion
		
		#region CtrStudOutProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrStudOut"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrStudOutProviderBase CtrStudOutProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrStudOutProvider;
			}
		}
		
		#endregion
		
		#region EdBylawProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdBylaw"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdBylawProviderBase EdBylawProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdBylawProvider;
			}
		}
		
		#endregion
		
		#region EdBranchCrsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdBranchCrs"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdBranchCrsProviderBase EdBranchCrsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdBranchCrsProvider;
			}
		}
		
		#endregion
		
		#region EdAcdadvRmkProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdAcdadvRmk"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdAcdadvRmkProviderBase EdAcdadvRmkProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdAcdadvRmkProvider;
			}
		}
		
		#endregion
		
		#region EdAcadYearFacultyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdAcadYearFaculty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdAcadYearFacultyProviderBase EdAcadYearFacultyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdAcadYearFacultyProvider;
			}
		}
		
		#endregion
		
		#region EdAcadPlanProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdAcadPlan"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdAcadPlanProviderBase EdAcadPlanProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdAcadPlanProvider;
			}
		}
		
		#endregion
		
		#region EdAbsenceApproveProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdAbsenceApprove"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdAbsenceApproveProviderBase EdAbsenceApproveProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdAbsenceApproveProvider;
			}
		}
		
		#endregion
		
		#region EdAcadPlanDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdAcadPlanDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdAcadPlanDtlProviderBase EdAcadPlanDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdAcadPlanDtlProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeKtchnJobProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeKtchnJob"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeKtchnJobProviderBase CtrCdeKtchnJobProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeKtchnJobProvider;
			}
		}
		
		#endregion
		
		#region EdAcadPlanHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdAcadPlanHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdAcadPlanHdrProviderBase EdAcadPlanHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdAcadPlanHdrProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeItemTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeItemType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeItemTypeProviderBase CtrCdeItemTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeItemTypeProvider;
			}
		}
		
		#endregion
		
		#region CtrCdeExpRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrCdeExpRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrCdeExpRsnProviderBase CtrCdeExpRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrCdeExpRsnProvider;
			}
		}
		
		#endregion
		
		#region CoControlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoControl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoControlProviderBase CoControlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoControlProvider;
			}
		}
		
		#endregion
		
		#region CoControlMemberProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoControlMember"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoControlMemberProviderBase CoControlMemberProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoControlMemberProvider;
			}
		}
		
		#endregion
		
		#region CtrMenuProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrMenu"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrMenuProviderBase CtrMenuProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrMenuProvider;
			}
		}
		
		#endregion
		
		#region CoControlRoomProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoControlRoom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoControlRoomProviderBase CoControlRoomProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoControlRoomProvider;
			}
		}
		
		#endregion
		
		#region CoCourseResultProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoCourseResult"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoCourseResultProviderBase CoCourseResultProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoCourseResultProvider;
			}
		}
		
		#endregion
		
		#region CoContRoomMemberProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoContRoomMember"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoContRoomMemberProviderBase CoContRoomMemberProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoContRoomMemberProvider;
			}
		}
		
		#endregion
		
		#region CoContRmMemCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoContRmMemCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoContRmMemCourseProviderBase CoContRmMemCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoContRmMemCourseProvider;
			}
		}
		
		#endregion
		
		#region AdmTransferAcceptanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmTransferAcceptance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmTransferAcceptanceProviderBase AdmTransferAcceptanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmTransferAcceptanceProvider;
			}
		}
		
		#endregion
		
		#region AlmJobProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AlmJob"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AlmJobProviderBase AlmJobProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AlmJobProvider;
			}
		}
		
		#endregion
		
		#region AlmPrintRequestProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AlmPrintRequest"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AlmPrintRequestProviderBase AlmPrintRequestProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AlmPrintRequestProvider;
			}
		}
		
		#endregion
		
		#region AppTypeRegStepsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AppTypeRegSteps"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AppTypeRegStepsProviderBase AppTypeRegStepsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AppTypeRegStepsProvider;
			}
		}
		
		#endregion
		
		#region CoClemRuleFacProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoClemRuleFac"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoClemRuleFacProviderBase CoClemRuleFacProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoClemRuleFacProvider;
			}
		}
		
		#endregion
		
		#region CoCrsRsltRaiseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoCrsRsltRaise"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoCrsRsltRaiseProviderBase CoCrsRsltRaiseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoCrsRsltRaiseProvider;
			}
		}
		
		#endregion
		
		#region CtrMenuItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrMenuItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrMenuItemProviderBase CtrMenuItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrMenuItemProvider;
			}
		}
		
		#endregion
		
		#region CoExamPaperProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoExamPaper"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoExamPaperProviderBase CoExamPaperProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoExamPaperProvider;
			}
		}
		
		#endregion
		
		#region CoExaminerCorectorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoExaminerCorector"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoExaminerCorectorProviderBase CoExaminerCorectorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoExaminerCorectorProvider;
			}
		}
		
		#endregion
		
		#region CoScheduleDetailProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoScheduleDetail"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoScheduleDetailProviderBase CoScheduleDetailProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoScheduleDetailProvider;
			}
		}
		
		#endregion
		
		#region CoSupervisorStudCountProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoSupervisorStudCount"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoSupervisorStudCountProviderBase CoSupervisorStudCountProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoSupervisorStudCountProvider;
			}
		}
		
		#endregion
		
		#region CoExamCommitteeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoExamCommittee"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoExamCommitteeProviderBase CoExamCommitteeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoExamCommitteeProvider;
			}
		}
		
		#endregion
		
		#region CoExamCommSupervisorAltProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoExamCommSupervisorAlt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoExamCommSupervisorAltProviderBase CoExamCommSupervisorAltProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoExamCommSupervisorAltProvider;
			}
		}
		
		#endregion
		
		#region CtrMenuActProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrMenuAct"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrMenuActProviderBase CtrMenuActProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrMenuActProvider;
			}
		}
		
		#endregion
		
		#region CtrMenuActItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrMenuActItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrMenuActItemProviderBase CtrMenuActItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrMenuActItemProvider;
			}
		}
		
		#endregion
		
		#region CtrMealItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CtrMealItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CtrMealItemProviderBase CtrMealItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CtrMealItemProvider;
			}
		}
		
		#endregion
		
		#region CoExamSchdlPlaceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoExamSchdlPlace"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoExamSchdlPlaceProviderBase CoExamSchdlPlaceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoExamSchdlPlaceProvider;
			}
		}
		
		#endregion
		
		#region CoExamCommSupervisorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoExamCommSupervisor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoExamCommSupervisorProviderBase CoExamCommSupervisorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoExamCommSupervisorProvider;
			}
		}
		
		#endregion
		
		#region EdCdeAcadWarnTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeAcadWarnType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeAcadWarnTypeProviderBase EdCdeAcadWarnTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeAcadWarnTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCdeCourseChngRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeCourseChngRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeCourseChngRsnProviderBase EdCdeCourseChngRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeCourseChngRsnProvider;
			}
		}
		
		#endregion
		
		#region EdCdeCrsRegTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeCrsRegType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeCrsRegTypeProviderBase EdCdeCrsRegTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeCrsRegTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeGradingTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeGradingType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeGradingTypeProviderBase EdCodeGradingTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeGradingTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeLevelProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeLevel"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeLevelProviderBase EdCodeLevelProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeLevelProvider;
			}
		}
		
		#endregion
		
		#region EdCodeLoadTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeLoadType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeLoadTypeProviderBase EdCodeLoadTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeLoadTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeQualProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeQual"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeQualProviderBase EdCodeQualProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeQualProvider;
			}
		}
		
		#endregion
		
		#region EdCodeStudyMethodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeStudyMethod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeStudyMethodProviderBase EdCodeStudyMethodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeStudyMethodProvider;
			}
		}
		
		#endregion
		
		#region EdCodeGradingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeGrading"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeGradingProviderBase EdCodeGradingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeGradingProvider;
			}
		}
		
		#endregion
		
		#region EdCodeExamPeriodTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeExamPeriodType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeExamPeriodTypeProviderBase EdCodeExamPeriodTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeExamPeriodTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeExcuseTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeExcuseType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeExcuseTypeProviderBase EdCodeExcuseTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeExcuseTypeProvider;
			}
		}
		
		#endregion
		
		#region CoExamPlaceStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoExamPlaceStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoExamPlaceStudProviderBase CoExamPlaceStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoExamPlaceStudProvider;
			}
		}
		
		#endregion
		
		#region CoStudSecretNumProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoStudSecretNum"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoStudSecretNumProviderBase CoStudSecretNumProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoStudSecretNumProvider;
			}
		}
		
		#endregion
		
		#region CoStudCheatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="CoStudCheat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static CoStudCheatProviderBase CoStudCheatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.CoStudCheatProvider;
			}
		}
		
		#endregion
		
		#region EdCodeQualGroupProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeQualGroup"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeQualGroupProviderBase EdCodeQualGroupProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeQualGroupProvider;
			}
		}
		
		#endregion
		
		#region EdCodeQualSubjectProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeQualSubject"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeQualSubjectProviderBase EdCodeQualSubjectProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeQualSubjectProvider;
			}
		}
		
		#endregion
		
		#region EdCodeRatingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeRating"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeRatingProviderBase EdCodeRatingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeRatingProvider;
			}
		}
		
		#endregion
		
		#region EdCodeTrainEvalProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeTrainEval"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeTrainEvalProviderBase EdCodeTrainEvalProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeTrainEvalProvider;
			}
		}
		
		#endregion
		
		#region EdCourseExpHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseExpHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseExpHdrProviderBase EdCourseExpHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseExpHdrProvider;
			}
		}
		
		#endregion
		
		#region EdCodeTransCourseTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeTransCourseType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeTransCourseTypeProviderBase EdCodeTransCourseTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeTransCourseTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseProviderBase EdCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseProvider;
			}
		}
		
		#endregion
		
		#region EdCodeSubjectProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeSubject"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeSubjectProviderBase EdCodeSubjectProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeSubjectProvider;
			}
		}
		
		#endregion
		
		#region EdCodeStudCaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeStudCase"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeStudCaseProviderBase EdCodeStudCaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeStudCaseProvider;
			}
		}
		
		#endregion
		
		#region EdCodeRepeatRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeRepeatRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeRepeatRuleProviderBase EdCodeRepeatRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeRepeatRuleProvider;
			}
		}
		
		#endregion
		
		#region EdCodeSemActvityProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeSemActvity"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeSemActvityProviderBase EdCodeSemActvityProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeSemActvityProvider;
			}
		}
		
		#endregion
		
		#region EdCoursePrfxProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCoursePrfx"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCoursePrfxProviderBase EdCoursePrfxProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCoursePrfxProvider;
			}
		}
		
		#endregion
		
		#region EdCodeStateStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeStateStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeStateStatusProviderBase EdCodeStateStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeStateStatusProvider;
			}
		}
		
		#endregion
		
		#region EdCodeEnrollTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeEnrollType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeEnrollTypeProviderBase EdCodeEnrollTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeEnrollTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeDischargeReasonsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeDischargeReasons"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeDischargeReasonsProviderBase EdCodeDischargeReasonsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeDischargeReasonsProvider;
			}
		}
		
		#endregion
		
		#region EdCdeOutcomeCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeOutcomeCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeOutcomeCatProviderBase EdCdeOutcomeCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeOutcomeCatProvider;
			}
		}
		
		#endregion
		
		#region EdCodeDischargeHProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeDischargeH"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeDischargeHProviderBase EdCodeDischargeHProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeDischargeHProvider;
			}
		}
		
		#endregion
		
		#region EdCdeQualCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeQualCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeQualCatProviderBase EdCdeQualCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeQualCatProvider;
			}
		}
		
		#endregion
		
		#region EdCdeQualBrnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeQualBrn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeQualBrnProviderBase EdCdeQualBrnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeQualBrnProvider;
			}
		}
		
		#endregion
		
		#region EdCdeQualPhaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeQualPhase"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeQualPhaseProviderBase EdCdeQualPhaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeQualPhaseProvider;
			}
		}
		
		#endregion
		
		#region EdCdeGrdChngRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeGrdChngRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeGrdChngRsnProviderBase EdCdeGrdChngRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeGrdChngRsnProvider;
			}
		}
		
		#endregion
		
		#region EdCdeExmptProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeExmpt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeExmptProviderBase EdCdeExmptProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeExmptProvider;
			}
		}
		
		#endregion
		
		#region EdCdeExecuseRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeExecuseRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeExecuseRsnProviderBase EdCdeExecuseRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeExecuseRsnProvider;
			}
		}
		
		#endregion
		
		#region EdCdeEmpQualProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeEmpQual"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeEmpQualProviderBase EdCdeEmpQualProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeEmpQualProvider;
			}
		}
		
		#endregion
		
		#region EdCdeEnrollChngRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeEnrollChngRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeEnrollChngRsnProviderBase EdCdeEnrollChngRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeEnrollChngRsnProvider;
			}
		}
		
		#endregion
		
		#region EdCdeExamSchdlTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeExamSchdlType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeExamSchdlTypeProviderBase EdCdeExamSchdlTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeExamSchdlTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCdeExamTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeExamType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeExamTypeProviderBase EdCdeExamTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeExamTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCdeQualStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeQualStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeQualStatusProviderBase EdCdeQualStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeQualStatusProvider;
			}
		}
		
		#endregion
		
		#region EdCdeSchoolGradeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeSchoolGrade"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeSchoolGradeProviderBase EdCdeSchoolGradeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeSchoolGradeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCourseChngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCourseChng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCourseChngProviderBase EdCodeCourseChngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCourseChngProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCourseStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCourseStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCourseStatusProviderBase EdCodeCourseStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCourseStatusProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCourseTeachingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCourseTeaching"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCourseTeachingProviderBase EdCodeCourseTeachingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCourseTeachingProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCourseTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCourseType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCourseTypeProviderBase EdCodeCourseTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCourseTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCourseCaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCourseCase"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCourseCaseProviderBase EdCodeCourseCaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCourseCaseProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCourseAssessProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCourseAssess"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCourseAssessProviderBase EdCodeCourseAssessProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCourseAssessProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCourseProviderBase EdCodeCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCourseProvider;
			}
		}
		
		#endregion
		
		#region EdCdeSocialAffairProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeSocialAffair"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeSocialAffairProviderBase EdCdeSocialAffairProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeSocialAffairProvider;
			}
		}
		
		#endregion
		
		#region EdCdeStudTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeStudType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeStudTypeProviderBase EdCdeStudTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeStudTypeProvider;
			}
		}
		
		#endregion
		
		#region EdCdeTchngMthdProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCdeTchngMthd"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCdeTchngMthdProviderBase EdCdeTchngMthdProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCdeTchngMthdProvider;
			}
		}
		
		#endregion
		
		#region EdCodeCheatRsltProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCodeCheatRslt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCodeCheatRsltProviderBase EdCodeCheatRsltProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCodeCheatRsltProvider;
			}
		}
		
		#endregion
		
		#region AdmTransAcceptanceCategoryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmTransAcceptanceCategory"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmTransAcceptanceCategoryProviderBase AdmTransAcceptanceCategoryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmTransAcceptanceCategoryProvider;
			}
		}
		
		#endregion
		
		#region AdmTansikCodesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmTansikCodes"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmTansikCodesProviderBase AdmTansikCodesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmTansikCodesProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeExamGrdngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeExamGrdng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeExamGrdngProviderBase AdmCdeExamGrdngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeExamGrdngProvider;
			}
		}
		
		#endregion
		
		#region EntityMainProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntityMain"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntityMainProviderBase EntityMainProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntityMainProvider;
			}
		}
		
		#endregion
		
		#region AdmApplicantProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmApplicant"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmApplicantProviderBase AdmApplicantProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmApplicantProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeStatusProviderBase AdmCdeStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeStatusProvider;
			}
		}
		
		#endregion
		
		#region AdmCdePlacementExamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdePlacementExam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdePlacementExamProviderBase AdmCdePlacementExamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdePlacementExamProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeFeeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeFee"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeFeeProviderBase AdmCdeFeeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeFeeProvider;
			}
		}
		
		#endregion
		
		#region AdmTansikMajorsCodesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmTansikMajorsCodes"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmTansikMajorsCodesProviderBase AdmTansikMajorsCodesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmTansikMajorsCodesProvider;
			}
		}
		
		#endregion
		
		#region AdmAppCourseCompProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppCourseComp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppCourseCompProviderBase AdmAppCourseCompProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppCourseCompProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeAppStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeAppStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeAppStatusProviderBase AdmCdeAppStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeAppStatusProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeAppTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeAppType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeAppTypeProviderBase AdmCdeAppTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeAppTypeProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeStatusRsnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeStatusRsn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeStatusRsnProviderBase AdmCdeStatusRsnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeStatusRsnProvider;
			}
		}
		
		#endregion
		
		#region AdmAppRegHistoryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppRegHistory"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppRegHistoryProviderBase AdmAppRegHistoryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppRegHistoryProvider;
			}
		}
		
		#endregion
		
		#region AdmAcceptanceCategoryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAcceptanceCategory"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAcceptanceCategoryProviderBase AdmAcceptanceCategoryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAcceptanceCategoryProvider;
			}
		}
		
		#endregion
		
		#region AdmAppCountProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppCount"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppCountProviderBase AdmAppCountProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppCountProvider;
			}
		}
		
		#endregion
		
		#region AccomWfCdeFunctionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomWfCdeFunction"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomWfCdeFunctionProviderBase AccomWfCdeFunctionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomWfCdeFunctionProvider;
			}
		}
		
		#endregion
		
		#region AdmAppAlumniPrefProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppAlumniPref"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppAlumniPrefProviderBase AdmAppAlumniPrefProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppAlumniPrefProvider;
			}
		}
		
		#endregion
		
		#region AdmAppDisabilityProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppDisability"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppDisabilityProviderBase AdmAppDisabilityProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppDisabilityProvider;
			}
		}
		
		#endregion
		
		#region AdmAppInfoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppInfo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppInfoProviderBase AdmAppInfoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppInfoProvider;
			}
		}
		
		#endregion
		
		#region AdmAppInterviewExamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppInterviewExam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppInterviewExamProviderBase AdmAppInterviewExamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppInterviewExamProvider;
			}
		}
		
		#endregion
		
		#region AdmAppLanguagesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppLanguages"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppLanguagesProviderBase AdmAppLanguagesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppLanguagesProvider;
			}
		}
		
		#endregion
		
		#region AdmAppLanguagesDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppLanguagesDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppLanguagesDtlProviderBase AdmAppLanguagesDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppLanguagesDtlProvider;
			}
		}
		
		#endregion
		
		#region AdmAppHonorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppHonor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppHonorProviderBase AdmAppHonorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppHonorProvider;
			}
		}
		
		#endregion
		
		#region AdmAppGuardianProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppGuardian"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppGuardianProviderBase AdmAppGuardianProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppGuardianProvider;
			}
		}
		
		#endregion
		
		#region AdmAppFeesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppFees"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppFeesProviderBase AdmAppFeesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppFeesProvider;
			}
		}
		
		#endregion
		
		#region AdmAppDocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppDoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppDocProviderBase AdmAppDocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppDocProvider;
			}
		}
		
		#endregion
		
		#region AdmAppEssayProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppEssay"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppEssayProviderBase AdmAppEssayProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppEssayProvider;
			}
		}
		
		#endregion
		
		#region AdmAppExmptCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppExmptCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppExmptCourseProviderBase AdmAppExmptCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppExmptCourseProvider;
			}
		}
		
		#endregion
		
		#region AdmAppFeePromocodeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppFeePromocode"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppFeePromocodeProviderBase AdmAppFeePromocodeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppFeePromocodeProvider;
			}
		}
		
		#endregion
		
		#region AccomWfCdeActionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomWfCdeAction"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomWfCdeActionProviderBase AccomWfCdeActionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomWfCdeActionProvider;
			}
		}
		
		#endregion
		
		#region AccomPolcyAbsenceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomPolcyAbsence"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomPolcyAbsenceProviderBase AccomPolcyAbsenceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomPolcyAbsenceProvider;
			}
		}
		
		#endregion
		
		#region AccomStudResponsibleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudResponsible"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudResponsibleProviderBase AccomStudResponsibleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudResponsibleProvider;
			}
		}
		
		#endregion
		
		#region EntCodeEntityTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodeEntityType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodeEntityTypeProviderBase EntCodeEntityTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodeEntityTypeProvider;
			}
		}
		
		#endregion
		
		#region AccomFloorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomFloor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomFloorProviderBase AccomFloorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomFloorProvider;
			}
		}
		
		#endregion
		
		#region AccomStudAbsenceWarnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudAbsenceWarn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudAbsenceWarnProviderBase AccomStudAbsenceWarnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudAbsenceWarnProvider;
			}
		}
		
		#endregion
		
		#region AccomRoomProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomRoom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomRoomProviderBase AccomRoomProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomRoomProvider;
			}
		}
		
		#endregion
		
		#region AccomStudAbsenceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudAbsence"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudAbsenceProviderBase AccomStudAbsenceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudAbsenceProvider;
			}
		}
		
		#endregion
		
		#region AccomCdeWarnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomCdeWarn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomCdeWarnProviderBase AccomCdeWarnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomCdeWarnProvider;
			}
		}
		
		#endregion
		
		#region AccomBuildingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomBuilding"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomBuildingProviderBase AccomBuildingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomBuildingProvider;
			}
		}
		
		#endregion
		
		#region AdmRegStepsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmRegSteps"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmRegStepsProviderBase AdmRegStepsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmRegStepsProvider;
			}
		}
		
		#endregion
		
		#region AccomCdeBookStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomCdeBookStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomCdeBookStatusProviderBase AccomCdeBookStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomCdeBookStatusProvider;
			}
		}
		
		#endregion
		
		#region AccomBedProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomBed"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomBedProviderBase AccomBedProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomBedProvider;
			}
		}
		
		#endregion
		
		#region AccomCdeRoomTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomCdeRoomType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomCdeRoomTypeProviderBase AccomCdeRoomTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomCdeRoomTypeProvider;
			}
		}
		
		#endregion
		
		#region AccomCdePermtTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomCdePermtType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomCdePermtTypeProviderBase AccomCdePermtTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomCdePermtTypeProvider;
			}
		}
		
		#endregion
		
		#region AccomStudBookProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudBook"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudBookProviderBase AccomStudBookProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudBookProvider;
			}
		}
		
		#endregion
		
		#region AccomCdePrecondProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomCdePrecond"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomCdePrecondProviderBase AccomCdePrecondProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomCdePrecondProvider;
			}
		}
		
		#endregion
		
		#region AccomStudDismissProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudDismiss"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudDismissProviderBase AccomStudDismissProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudDismissProvider;
			}
		}
		
		#endregion
		
		#region AccomStudPermtReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudPermtReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudPermtReqProviderBase AccomStudPermtReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudPermtReqProvider;
			}
		}
		
		#endregion
		
		#region AdmExamGrdngPkgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmExamGrdngPkg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmExamGrdngPkgProviderBase AdmExamGrdngPkgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmExamGrdngPkgProvider;
			}
		}
		
		#endregion
		
		#region AccomStudReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudReqProviderBase AccomStudReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudReqProvider;
			}
		}
		
		#endregion
		
		#region AccomWfRequestApproveProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomWfRequestApprove"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomWfRequestApproveProviderBase AccomWfRequestApproveProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomWfRequestApproveProvider;
			}
		}
		
		#endregion
		
		#region AdmDecisionStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmDecisionStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmDecisionStatusProviderBase AdmDecisionStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmDecisionStatusProvider;
			}
		}
		
		#endregion
		
		#region AccomStudLeaveReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudLeaveReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudLeaveReqProviderBase AccomStudLeaveReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudLeaveReqProvider;
			}
		}
		
		#endregion
		
		#region AccomStudFeedReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudFeedReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudFeedReqProviderBase AccomStudFeedReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudFeedReqProvider;
			}
		}
		
		#endregion
		
		#region AdmOpenAcadSemesterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmOpenAcadSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmOpenAcadSemesterProviderBase AdmOpenAcadSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmOpenAcadSemesterProvider;
			}
		}
		
		#endregion
		
		#region AccomStudFeedReqDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudFeedReqDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudFeedReqDtlProviderBase AccomStudFeedReqDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudFeedReqDtlProvider;
			}
		}
		
		#endregion
		
		#region AccomStudLateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudLate"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudLateProviderBase AccomStudLateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudLateProvider;
			}
		}
		
		#endregion
		
		#region AdmAppLtrRecomProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppLtrRecom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppLtrRecomProviderBase AdmAppLtrRecomProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppLtrRecomProvider;
			}
		}
		
		#endregion
		
		#region AccomStudGuestReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudGuestReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudGuestReqProviderBase AccomStudGuestReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudGuestReqProvider;
			}
		}
		
		#endregion
		
		#region AccomStudGuestReqDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AccomStudGuestReqDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AccomStudGuestReqDtlProviderBase AccomStudGuestReqDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AccomStudGuestReqDtlProvider;
			}
		}
		
		#endregion
		
		#region AdmAppMediaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppMedia"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppMediaProviderBase AdmAppMediaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppMediaProvider;
			}
		}
		
		#endregion
		
		#region AdmParamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmParam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmParamProviderBase AdmParamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmParamProvider;
			}
		}
		
		#endregion
		
		#region AdmAppMessageProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppMessage"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppMessageProviderBase AdmAppMessageProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppMessageProvider;
			}
		}
		
		#endregion
		
		#region AdmParamMajorPhaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmParamMajorPhase"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmParamMajorPhaseProviderBase AdmParamMajorPhaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmParamMajorPhaseProvider;
			}
		}
		
		#endregion
		
		#region AdmOutboxProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmOutbox"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmOutboxProviderBase AdmOutboxProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmOutboxProvider;
			}
		}
		
		#endregion
		
		#region AdmPlaceExamCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmPlaceExamCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmPlaceExamCourseProviderBase AdmPlaceExamCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmPlaceExamCourseProvider;
			}
		}
		
		#endregion
		
		#region AdmIntTransferAcceptanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmIntTransferAcceptance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmIntTransferAcceptanceProviderBase AdmIntTransferAcceptanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmIntTransferAcceptanceProvider;
			}
		}
		
		#endregion
		
		#region AdmFeePromocodeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmFeePromocode"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmFeePromocodeProviderBase AdmFeePromocodeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmFeePromocodeProvider;
			}
		}
		
		#endregion
		
		#region AdmCodeEngTestProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCodeEngTest"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCodeEngTestProviderBase AdmCodeEngTestProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCodeEngTestProvider;
			}
		}
		
		#endregion
		
		#region AdmFeeQualCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmFeeQualCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmFeeQualCatProviderBase AdmFeeQualCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmFeeQualCatProvider;
			}
		}
		
		#endregion
		
		#region AdmPlaceExamDatetimeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmPlaceExamDatetime"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmPlaceExamDatetimeProviderBase AdmPlaceExamDatetimeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmPlaceExamDatetimeProvider;
			}
		}
		
		#endregion
		
		#region AdmInboxProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmInbox"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmInboxProviderBase AdmInboxProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmInboxProvider;
			}
		}
		
		#endregion
		
		#region AdmPlaceExamLocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmPlaceExamLoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmPlaceExamLocProviderBase AdmPlaceExamLocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmPlaceExamLocProvider;
			}
		}
		
		#endregion
		
		#region AdmSkillTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmSkillType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmSkillTypeProviderBase AdmSkillTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmSkillTypeProvider;
			}
		}
		
		#endregion
		
		#region AdmPrecondQualProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmPrecondQual"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmPrecondQualProviderBase AdmPrecondQualProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmPrecondQualProvider;
			}
		}
		
		#endregion
		
		#region AdmStaticScholarshipProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmStaticScholarship"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmStaticScholarshipProviderBase AdmStaticScholarshipProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmStaticScholarshipProvider;
			}
		}
		
		#endregion
		
		#region AdmScholorshipProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmScholorship"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmScholorshipProviderBase AdmScholorshipProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmScholorshipProvider;
			}
		}
		
		#endregion
		
		#region AdmTansikAppCodesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmTansikAppCodes"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmTansikAppCodesProviderBase AdmTansikAppCodesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmTansikAppCodesProvider;
			}
		}
		
		#endregion
		
		#region AdmRsrvdCodeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmRsrvdCode"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmRsrvdCodeProviderBase AdmRsrvdCodeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmRsrvdCodeProvider;
			}
		}
		
		#endregion
		
		#region AdmRatingParametersMajorsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmRatingParametersMajors"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmRatingParametersMajorsProviderBase AdmRatingParametersMajorsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmRatingParametersMajorsProvider;
			}
		}
		
		#endregion
		
		#region AdmReqDocProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmReqDoc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmReqDocProviderBase AdmReqDocProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmReqDocProvider;
			}
		}
		
		#endregion
		
		#region AdmRegStepPayOnlineProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmRegStepPayOnline"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmRegStepPayOnlineProviderBase AdmRegStepPayOnlineProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmRegStepPayOnlineProvider;
			}
		}
		
		#endregion
		
		#region AdmRatingParamMajorTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmRatingParamMajorType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmRatingParamMajorTypeProviderBase AdmRatingParamMajorTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmRatingParamMajorTypeProvider;
			}
		}
		
		#endregion
		
		#region AdmExamGrdngPkgDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmExamGrdngPkgDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmExamGrdngPkgDtlProviderBase AdmExamGrdngPkgDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmExamGrdngPkgDtlProvider;
			}
		}
		
		#endregion
		
		#region AdmAppTransReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppTransReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppTransReqProviderBase AdmAppTransReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppTransReqProvider;
			}
		}
		
		#endregion
		
		#region AdmEnglishProficiencyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmEnglishProficiency"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmEnglishProficiencyProviderBase AdmEnglishProficiencyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmEnglishProficiencyProvider;
			}
		}
		
		#endregion
		
		#region AdmAppTransFromCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppTransFromCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppTransFromCourseProviderBase AdmAppTransFromCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppTransFromCourseProvider;
			}
		}
		
		#endregion
		
		#region AdmAppTopicProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppTopic"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppTopicProviderBase AdmAppTopicProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppTopicProvider;
			}
		}
		
		#endregion
		
		#region AdmAppTransBalanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppTransBalance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppTransBalanceProviderBase AdmAppTransBalanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppTransBalanceProvider;
			}
		}
		
		#endregion
		
		#region AdmAppSponsorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppSponsor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppSponsorProviderBase AdmAppSponsorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppSponsorProvider;
			}
		}
		
		#endregion
		
		#region AdmAppPlaceExamCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppPlaceExamCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppPlaceExamCourseProviderBase AdmAppPlaceExamCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppPlaceExamCourseProvider;
			}
		}
		
		#endregion
		
		#region AdmAppProcStepsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppProcSteps"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppProcStepsProviderBase AdmAppProcStepsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppProcStepsProvider;
			}
		}
		
		#endregion
		
		#region AdmAppPlacementExamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppPlacementExam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppPlacementExamProviderBase AdmAppPlacementExamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppPlacementExamProvider;
			}
		}
		
		#endregion
		
		#region AdmAppTransToCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppTransToCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppTransToCourseProviderBase AdmAppTransToCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppTransToCourseProvider;
			}
		}
		
		#endregion
		
		#region AdmAppPrefProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppPref"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppPrefProviderBase AdmAppPrefProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppPrefProvider;
			}
		}
		
		#endregion
		
		#region AdmCodeMasteryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCodeMastery"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCodeMasteryProviderBase AdmCodeMasteryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCodeMasteryProvider;
			}
		}
		
		#endregion
		
		#region AdmAppWorkExperProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmAppWorkExper"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmAppWorkExperProviderBase AdmAppWorkExperProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmAppWorkExperProvider;
			}
		}
		
		#endregion
		
		#region AdmCodeTransferTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCodeTransferType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCodeTransferTypeProviderBase AdmCodeTransferTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCodeTransferTypeProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeQualStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeQualStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeQualStatusProviderBase AdmCdeQualStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeQualStatusProvider;
			}
		}
		
		#endregion
		
		#region AdmCompetitiveAvgProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCompetitiveAvg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCompetitiveAvgProviderBase AdmCompetitiveAvgProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCompetitiveAvgProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeMediaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeMedia"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeMediaProviderBase AdmCdeMediaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeMediaProvider;
			}
		}
		
		#endregion
		
		#region AdmApplicantAcceptanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmApplicantAcceptance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmApplicantAcceptanceProviderBase AdmApplicantAcceptanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmApplicantAcceptanceProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeEssayOptionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeEssayOption"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeEssayOptionProviderBase AdmCdeEssayOptionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeEssayOptionProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeAlumniPrefProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeAlumniPref"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeAlumniPrefProviderBase AdmCdeAlumniPrefProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeAlumniPrefProvider;
			}
		}
		
		#endregion
		
		#region EdCourseBarredProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseBarred"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseBarredProviderBase EdCourseBarredProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseBarredProvider;
			}
		}
		
		#endregion
		
		#region AdmCdeCourseCompProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AdmCdeCourseComp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AdmCdeCourseCompProviderBase AdmCdeCourseCompProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AdmCdeCourseCompProvider;
			}
		}
		
		#endregion
		
		#region EdCourseCoreqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseCoreq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseCoreqProviderBase EdCourseCoreqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseCoreqProvider;
			}
		}
		
		#endregion
		
		#region EntCodeMdTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodeMdType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodeMdTypeProviderBase EntCodeMdTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodeMdTypeProvider;
			}
		}
		
		#endregion
		
		#region EntCodeFullfillMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodeFullfillMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodeFullfillMetadataProviderBase EntCodeFullfillMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodeFullfillMetadataProvider;
			}
		}
		
		#endregion
		
		#region ErpOrgTreeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ErpOrgTree"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ErpOrgTreeProviderBase ErpOrgTreeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ErpOrgTreeProvider;
			}
		}
		
		#endregion
		
		#region EntIntroducMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntIntroducMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntIntroducMetadataProviderBase EntIntroducMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntIntroducMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntIntroducMdDataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntIntroducMdData"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntIntroducMdDataProviderBase EntIntroducMdDataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntIntroducMdDataProvider;
			}
		}
		
		#endregion
		
		#region EntGraduationReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntGraduationReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntGraduationReqProviderBase EntGraduationReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntGraduationReqProvider;
			}
		}
		
		#endregion
		
		#region EntCodePrecondMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodePrecondMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodePrecondMetadataProviderBase EntCodePrecondMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodePrecondMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntGradingMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntGradingMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntGradingMetadataProviderBase EntGradingMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntGradingMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntFullfillMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntFullfillMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntFullfillMetadataProviderBase EntFullfillMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntFullfillMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntGradingMdDataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntGradingMdData"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntGradingMdDataProviderBase EntGradingMdDataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntGradingMdDataProvider;
			}
		}
		
		#endregion
		
		#region EntFullfillMdDataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntFullfillMdData"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntFullfillMdDataProviderBase EntFullfillMdDataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntFullfillMdDataProvider;
			}
		}
		
		#endregion
		
		#region EntMainMatrixProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntMainMatrix"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntMainMatrixProviderBase EntMainMatrixProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntMainMatrixProvider;
			}
		}
		
		#endregion
		
		#region EntMajorPhaseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntMajorPhase"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntMajorPhaseProviderBase EntMajorPhaseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntMajorPhaseProvider;
			}
		}
		
		#endregion
		
		#region EntMajorPhaseCrsExpProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntMajorPhaseCrsExp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntMajorPhaseCrsExpProviderBase EntMajorPhaseCrsExpProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntMajorPhaseCrsExpProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyAccumHonorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyAccumHonor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyAccumHonorProviderBase EntPolicyAccumHonorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyAccumHonorProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyAssessCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyAssessCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyAssessCourseProviderBase EntPolicyAssessCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyAssessCourseProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyAssessDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyAssessDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyAssessDtlProviderBase EntPolicyAssessDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyAssessDtlProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyAssessGrpDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyAssessGrpDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyAssessGrpDtlProviderBase EntPolicyAssessGrpDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyAssessGrpDtlProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyAbsenceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyAbsence"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyAbsenceProviderBase EntPolicyAbsenceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyAbsenceProvider;
			}
		}
		
		#endregion
		
		#region EntPolcyGrdngHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolcyGrdngHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolcyGrdngHdrProviderBase EntPolcyGrdngHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolcyGrdngHdrProvider;
			}
		}
		
		#endregion
		
		#region EntPolcyGrdngCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolcyGrdngCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolcyGrdngCourseProviderBase EntPolcyGrdngCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolcyGrdngCourseProvider;
			}
		}
		
		#endregion
		
		#region EntPlcyAcadWarnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPlcyAcadWarn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPlcyAcadWarnProviderBase EntPlcyAcadWarnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPlcyAcadWarnProvider;
			}
		}
		
		#endregion
		
		#region EntPlcyAcadWarnDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPlcyAcadWarnDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPlcyAcadWarnDtlProviderBase EntPlcyAcadWarnDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPlcyAcadWarnDtlProvider;
			}
		}
		
		#endregion
		
		#region EntPolcyCrsRetakeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolcyCrsRetake"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolcyCrsRetakeProviderBase EntPolcyCrsRetakeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolcyCrsRetakeProvider;
			}
		}
		
		#endregion
		
		#region EntPolcyGpaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolcyGpa"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolcyGpaProviderBase EntPolcyGpaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolcyGpaProvider;
			}
		}
		
		#endregion
		
		#region EntCoursePkgMdDataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCoursePkgMdData"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCoursePkgMdDataProviderBase EntCoursePkgMdDataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCoursePkgMdDataProvider;
			}
		}
		
		#endregion
		
		#region EntCoursePkgHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCoursePkgHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCoursePkgHdrProviderBase EntCoursePkgHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCoursePkgHdrProvider;
			}
		}
		
		#endregion
		
		#region EntCoursePkgDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCoursePkgDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCoursePkgDtlProviderBase EntCoursePkgDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCoursePkgDtlProvider;
			}
		}
		
		#endregion
		
		#region EdStudStateTempProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudStateTemp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudStateTempProviderBase EdStudStateTempProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudStateTempProvider;
			}
		}
		
		#endregion
		
		#region EdStudTransProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudTrans"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudTransProviderBase EdStudTransProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudTransProvider;
			}
		}
		
		#endregion
		
		#region EdStudTransFromReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudTransFromReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudTransFromReqProviderBase EdStudTransFromReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudTransFromReqProvider;
			}
		}
		
		#endregion
		
		#region EdStudViolProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudViol"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudViolProviderBase EdStudViolProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudViolProvider;
			}
		}
		
		#endregion
		
		#region EdStudStateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudState"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudStateProviderBase EdStudStateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudStateProvider;
			}
		}
		
		#endregion
		
		#region EdStudSportProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudSport"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudSportProviderBase EdStudSportProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudSportProvider;
			}
		}
		
		#endregion
		
		#region EdStudSemesterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudSemesterProviderBase EdStudSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudSemesterProvider;
			}
		}
		
		#endregion
		
		#region EdStudSemesterExtProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudSemesterExt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudSemesterExtProviderBase EdStudSemesterExtProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudSemesterExtProvider;
			}
		}
		
		#endregion
		
		#region EdStudQualProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudQual"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudQualProviderBase EdStudQualProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudQualProvider;
			}
		}
		
		#endregion
		
		#region EdStudSemesterTempProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudSemesterTemp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudSemesterTempProviderBase EdStudSemesterTempProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudSemesterTempProvider;
			}
		}
		
		#endregion
		
		#region EdStudViolAppealProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudViolAppeal"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudViolAppealProviderBase EdStudViolAppealProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudViolAppealProvider;
			}
		}
		
		#endregion
		
		#region EdTopicTchngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdTopicTchng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdTopicTchngProviderBase EdTopicTchngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdTopicTchngProvider;
			}
		}
		
		#endregion
		
		#region EntCodeIntroMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodeIntroMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodeIntroMetadataProviderBase EntCodeIntroMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodeIntroMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntCodePolicyCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodePolicyCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodePolicyCatProviderBase EntCodePolicyCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodePolicyCatProvider;
			}
		}
		
		#endregion
		
		#region EntCodePolicyMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodePolicyMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodePolicyMetadataProviderBase EntCodePolicyMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodePolicyMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntCourseMdDataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCourseMdData"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCourseMdDataProviderBase EntCourseMdDataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCourseMdDataProvider;
			}
		}
		
		#endregion
		
		#region EntCodeGradingMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCodeGradingMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCodeGradingMetadataProviderBase EntCodeGradingMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCodeGradingMetadataProvider;
			}
		}
		
		#endregion
		
		#region EdTrainingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdTraining"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdTrainingProviderBase EdTrainingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdTrainingProvider;
			}
		}
		
		#endregion
		
		#region EntCdePkgTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntCdePkgType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntCdePkgTypeProviderBase EntCdePkgTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntCdePkgTypeProvider;
			}
		}
		
		#endregion
		
		#region EdTrainStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdTrainStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdTrainStudProviderBase EdTrainStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdTrainStudProvider;
			}
		}
		
		#endregion
		
		#region EntAvailPrntTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntAvailPrntType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntAvailPrntTypeProviderBase EntAvailPrntTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntAvailPrntTypeProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyAssessGrpHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyAssessGrpHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyAssessGrpHdrProviderBase EntPolicyAssessGrpHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyAssessGrpHdrProvider;
			}
		}
		
		#endregion
		
		#region EdTrainSupervisorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdTrainSupervisor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdTrainSupervisorProviderBase EdTrainSupervisorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdTrainSupervisorProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyAssessHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyAssessHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyAssessHdrProviderBase EntPolicyAssessHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyAssessHdrProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyCourseChngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyCourseChng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyCourseChngProviderBase EntPolicyCourseChngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyCourseChngProvider;
			}
		}
		
		#endregion
		
		#region FeeFacultyRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeFacultyRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeFacultyRuleProviderBase FeeFacultyRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeFacultyRuleProvider;
			}
		}
		
		#endregion
		
		#region FeeFacultyItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeFacultyItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeFacultyItemProviderBase FeeFacultyItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeFacultyItemProvider;
			}
		}
		
		#endregion
		
		#region FeeCodeBanksProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCodeBanks"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCodeBanksProviderBase FeeCodeBanksProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCodeBanksProvider;
			}
		}
		
		#endregion
		
		#region FeeCodeItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCodeItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCodeItemProviderBase FeeCodeItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCodeItemProvider;
			}
		}
		
		#endregion
		
		#region FeeCodeReasonsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCodeReasons"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCodeReasonsProviderBase FeeCodeReasonsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCodeReasonsProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeTrsryProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeTrsry"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeTrsryProviderBase FeeCdeTrsryProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeTrsryProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeTrnsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeTrns"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeTrnsProviderBase FeeCdeTrnsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeTrnsProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeFundProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeFund"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeFundProviderBase FeeCdeFundProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeFundProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeInvocStatusProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeInvocStatus"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeInvocStatusProviderBase FeeCdeInvocStatusProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeInvocStatusProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeLimitTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeLimitType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeLimitTypeProviderBase FeeCdeLimitTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeLimitTypeProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeSchshipCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeSchshipCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeSchshipCatProviderBase FeeCdeSchshipCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeSchshipCatProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeSchshipTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeSchshipType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeSchshipTypeProviderBase FeeCdeSchshipTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeSchshipTypeProvider;
			}
		}
		
		#endregion
		
		#region FeeCodeTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCodeType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCodeTypeProviderBase FeeCodeTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCodeTypeProvider;
			}
		}
		
		#endregion
		
		#region FeeInstlmntRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeInstlmntRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeInstlmntRuleProviderBase FeeInstlmntRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeInstlmntRuleProvider;
			}
		}
		
		#endregion
		
		#region FeeCourseExpProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCourseExp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCourseExpProviderBase FeeCourseExpProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCourseExpProvider;
			}
		}
		
		#endregion
		
		#region FeeInstlmntStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeInstlmntStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeInstlmntStudProviderBase FeeInstlmntStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeInstlmntStudProvider;
			}
		}
		
		#endregion
		
		#region FeeInstlmntDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeInstlmntDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeInstlmntDtlProviderBase FeeInstlmntDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeInstlmntDtlProvider;
			}
		}
		
		#endregion
		
		#region FeeIntegrationLedgerProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeIntegrationLedger"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeIntegrationLedgerProviderBase FeeIntegrationLedgerProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeIntegrationLedgerProvider;
			}
		}
		
		#endregion
		
		#region FeeFundRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeFundRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeFundRuleProviderBase FeeFundRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeFundRuleProvider;
			}
		}
		
		#endregion
		
		#region FeeFacItemAdmYearProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeFacItemAdmYear"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeFacItemAdmYearProviderBase FeeFacItemAdmYearProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeFacItemAdmYearProvider;
			}
		}
		
		#endregion
		
		#region FeeFineDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeFineDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeFineDtlProviderBase FeeFineDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeFineDtlProvider;
			}
		}
		
		#endregion
		
		#region FeeFacultyInstallmentProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeFacultyInstallment"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeFacultyInstallmentProviderBase FeeFacultyInstallmentProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeFacultyInstallmentProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeDiscCatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeDiscCat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeDiscCatProviderBase FeeCdeDiscCatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeDiscCatProvider;
			}
		}
		
		#endregion
		
		#region FeeFineProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeFine"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeFineProviderBase FeeFineProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeFineProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyLoadProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyLoad"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyLoadProviderBase EntPolicyLoadProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyLoadProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeBondItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeBondItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeBondItemProviderBase FeeCdeBondItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeBondItemProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyMetadataProviderBase EntPolicyMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyMdDataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyMdData"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyMdDataProviderBase EntPolicyMdDataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyMdDataProvider;
			}
		}
		
		#endregion
		
		#region EdStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudProviderBase EdStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyGradingLevelProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyGradingLevel"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyGradingLevelProviderBase EntPolicyGradingLevelProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyGradingLevelProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyGradingHdrProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyGradingHdr"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyGradingHdrProviderBase EntPolicyGradingHdrProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyGradingHdrProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyExcuseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyExcuse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyExcuseProviderBase EntPolicyExcuseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyExcuseProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyCourseRepeatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyCourseRepeat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyCourseRepeatProviderBase EntPolicyCourseRepeatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyCourseRepeatProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyGradingDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyGradingDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyGradingDtlProviderBase EntPolicyGradingDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyGradingDtlProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyObservedProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyObserved"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyObservedProviderBase EntPolicyObservedProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyObservedProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyGradingCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyGradingCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyGradingCourseProviderBase EntPolicyGradingCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyGradingCourseProvider;
			}
		}
		
		#endregion
		
		#region EntPolicyGradingLevelCoursesProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicyGradingLevelCourses"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicyGradingLevelCoursesProviderBase EntPolicyGradingLevelCoursesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicyGradingLevelCoursesProvider;
			}
		}
		
		#endregion
		
		#region EntPolicySemHonorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPolicySemHonor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPolicySemHonorProviderBase EntPolicySemHonorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPolicySemHonorProvider;
			}
		}
		
		#endregion
		
		#region FeeBusLineItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeBusLineItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeBusLineItemProviderBase FeeBusLineItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeBusLineItemProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeAllowanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeAllowance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeAllowanceProviderBase FeeCdeAllowanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeAllowanceProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeBankAccntProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeBankAccnt"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeBankAccntProviderBase FeeCdeBankAccntProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeBankAccntProvider;
			}
		}
		
		#endregion
		
		#region FeeCdeDiscTypeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeCdeDiscType"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeCdeDiscTypeProviderBase FeeCdeDiscTypeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeCdeDiscTypeProvider;
			}
		}
		
		#endregion
		
		#region FeeAllowanceRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeAllowanceRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeAllowanceRuleProviderBase FeeAllowanceRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeAllowanceRuleProvider;
			}
		}
		
		#endregion
		
		#region FeeAccomItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeAccomItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeAccomItemProviderBase FeeAccomItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeAccomItemProvider;
			}
		}
		
		#endregion
		
		#region FeeAccntYearPeriodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeAccntYearPeriod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeAccntYearPeriodProviderBase FeeAccntYearPeriodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeAccntYearPeriodProvider;
			}
		}
		
		#endregion
		
		#region EntPrecondMetadataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPrecondMetadata"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPrecondMetadataProviderBase EntPrecondMetadataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPrecondMetadataProvider;
			}
		}
		
		#endregion
		
		#region EntPrecondMdDataProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EntPrecondMdData"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EntPrecondMdDataProviderBase EntPrecondMdDataProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EntPrecondMdDataProvider;
			}
		}
		
		#endregion
		
		#region ErpEmpProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ErpEmp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ErpEmpProviderBase ErpEmpProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ErpEmpProvider;
			}
		}
		
		#endregion
		
		#region FeeAccntYearProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="FeeAccntYear"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static FeeAccntYearProviderBase FeeAccntYearProvider
		{
			get 
			{
				LoadProviders();
				return _provider.FeeAccntYearProvider;
			}
		}
		
		#endregion
		
		#region EdStudRsrvRegTimeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudRsrvRegTime"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudRsrvRegTimeProviderBase EdStudRsrvRegTimeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudRsrvRegTimeProvider;
			}
		}
		
		#endregion
		
		#region EdSemAgendaTimeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdSemAgendaTime"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdSemAgendaTimeProviderBase EdSemAgendaTimeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdSemAgendaTimeProvider;
			}
		}
		
		#endregion
		
		#region EdSemesterOpenProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdSemesterOpen"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdSemesterOpenProviderBase EdSemesterOpenProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdSemesterOpenProvider;
			}
		}
		
		#endregion
		
		#region EdSemesterAgendaProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdSemesterAgenda"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdSemesterAgendaProviderBase EdSemesterAgendaProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdSemesterAgendaProvider;
			}
		}
		
		#endregion
		
		#region EdStudRsdncyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudRsdncy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudRsdncyProviderBase EdStudRsdncyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudRsdncyProvider;
			}
		}
		
		#endregion
		
		#region EdStaffCoursePrefProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStaffCoursePref"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStaffCoursePrefProviderBase EdStaffCoursePrefProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStaffCoursePrefProvider;
			}
		}
		
		#endregion
		
		#region EdSemAgendaFormProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdSemAgendaForm"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdSemAgendaFormProviderBase EdSemAgendaFormProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdSemAgendaFormProvider;
			}
		}
		
		#endregion
		
		#region EdSemAgendaDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdSemAgendaDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdSemAgendaDtlProviderBase EdSemAgendaDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdSemAgendaDtlProvider;
			}
		}
		
		#endregion
		
		#region EdProjectProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdProject"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdProjectProviderBase EdProjectProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdProjectProvider;
			}
		}
		
		#endregion
		
		#region EdProjSupervisorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdProjSupervisor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdProjSupervisorProviderBase EdProjSupervisorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdProjSupervisorProvider;
			}
		}
		
		#endregion
		
		#region EdResidencyStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdResidencyStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdResidencyStudProviderBase EdResidencyStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdResidencyStudProvider;
			}
		}
		
		#endregion
		
		#region EdResultApproveProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdResultApprove"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdResultApproveProviderBase EdResultApproveProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdResultApproveProvider;
			}
		}
		
		#endregion
		
		#region EdStaffDayPrefProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStaffDayPref"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStaffDayPrefProviderBase EdStaffDayPrefProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStaffDayPrefProvider;
			}
		}
		
		#endregion
		
		#region EdStdCrsExamProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStdCrsExam"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStdCrsExamProviderBase EdStdCrsExamProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStdCrsExamProvider;
			}
		}
		
		#endregion
		
		#region EdStdCrsExamAssessProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStdCrsExamAssess"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStdCrsExamAssessProviderBase EdStdCrsExamAssessProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStdCrsExamAssessProvider;
			}
		}
		
		#endregion
		
		#region EdStudActvtyRegProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudActvtyReg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudActvtyRegProviderBase EdStudActvtyRegProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudActvtyRegProvider;
			}
		}
		
		#endregion
		
		#region EdStudBranchPrefProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudBranchPref"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudBranchPrefProviderBase EdStudBranchPrefProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudBranchPrefProvider;
			}
		}
		
		#endregion
		
		#region EdStudBranchTempProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudBranchTemp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudBranchTempProviderBase EdStudBranchTempProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudBranchTempProvider;
			}
		}
		
		#endregion
		
		#region EdStudCheatProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCheat"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCheatProviderBase EdStudCheatProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCheatProvider;
			}
		}
		
		#endregion
		
		#region EdStudActivityProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudActivity"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudActivityProviderBase EdStudActivityProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudActivityProvider;
			}
		}
		
		#endregion
		
		#region EdStudAcadmicAdvProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudAcadmicAdv"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudAcadmicAdvProviderBase EdStudAcadmicAdvProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudAcadmicAdvProvider;
			}
		}
		
		#endregion
		
		#region EdStdExamSemesterProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStdExamSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStdExamSemesterProviderBase EdStdExamSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStdExamSemesterProvider;
			}
		}
		
		#endregion
		
		#region EdStudAbsFwProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudAbsFw"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudAbsFwProviderBase EdStudAbsFwProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudAbsFwProvider;
			}
		}
		
		#endregion
		
		#region EdStudAbsenceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudAbsence"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudAbsenceProviderBase EdStudAbsenceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudAbsenceProvider;
			}
		}
		
		#endregion
		
		#region EdStudAcadWarnProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudAcadWarn"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudAcadWarnProviderBase EdStudAcadWarnProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudAcadWarnProvider;
			}
		}
		
		#endregion
		
		#region EdProjStudProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdProjStud"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdProjStudProviderBase EdProjStudProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdProjStudProvider;
			}
		}
		
		#endregion
		
		#region EdPrintReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdPrintReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdPrintReqProviderBase EdPrintReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdPrintReqProvider;
			}
		}
		
		#endregion
		
		#region EdCourseOutcomesTopicsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseOutcomesTopics"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseOutcomesTopicsProviderBase EdCourseOutcomesTopicsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseOutcomesTopicsProvider;
			}
		}
		
		#endregion
		
		#region EdCourseRltdProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseRltd"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseRltdProviderBase EdCourseRltdProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseRltdProvider;
			}
		}
		
		#endregion
		
		#region EdCourseTchngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseTchng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseTchngProviderBase EdCourseTchngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseTchngProvider;
			}
		}
		
		#endregion
		
		#region EdCourseTopicProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseTopic"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseTopicProviderBase EdCourseTopicProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseTopicProvider;
			}
		}
		
		#endregion
		
		#region EdCourseOutcomesDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseOutcomesDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseOutcomesDtlProviderBase EdCourseOutcomesDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseOutcomesDtlProvider;
			}
		}
		
		#endregion
		
		#region EdCourseOrientProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseOrient"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseOrientProviderBase EdCourseOrientProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseOrientProvider;
			}
		}
		
		#endregion
		
		#region EdCourseEquivProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseEquiv"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseEquivProviderBase EdCourseEquivProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseEquivProvider;
			}
		}
		
		#endregion
		
		#region EdCourseExpDtlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseExpDtl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseExpDtlProviderBase EdCourseExpDtlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseExpDtlProvider;
			}
		}
		
		#endregion
		
		#region EdCourseInfoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseInfo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseInfoProviderBase EdCourseInfoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseInfoProvider;
			}
		}
		
		#endregion
		
		#region EdCourseInstanceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCourseInstance"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCourseInstanceProviderBase EdCourseInstanceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCourseInstanceProvider;
			}
		}
		
		#endregion
		
		#region EdCrsFreeRstrctdProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdCrsFreeRstrctd"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdCrsFreeRstrctdProviderBase EdCrsFreeRstrctdProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdCrsFreeRstrctdProvider;
			}
		}
		
		#endregion
		
		#region EdEmployeeQualProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdEmployeeQual"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdEmployeeQualProviderBase EdEmployeeQualProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdEmployeeQualProvider;
			}
		}
		
		#endregion
		
		#region EdExamCrsOrderProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdExamCrsOrder"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdExamCrsOrderProviderBase EdExamCrsOrderProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdExamCrsOrderProvider;
			}
		}
		
		#endregion
		
		#region EdOfferingProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdOffering"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdOfferingProviderBase EdOfferingProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdOfferingProvider;
			}
		}
		
		#endregion
		
		#region EdOfferingCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdOfferingCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdOfferingCourseProviderBase EdOfferingCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdOfferingCourseProvider;
			}
		}
		
		#endregion
		
		#region EdOutcomeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdOutcome"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdOutcomeProviderBase EdOutcomeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdOutcomeProvider;
			}
		}
		
		#endregion
		
		#region EdOutcomesTopicsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdOutcomesTopics"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdOutcomesTopicsProviderBase EdOutcomesTopicsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdOutcomesTopicsProvider;
			}
		}
		
		#endregion
		
		#region EdInttransRuleProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdInttransRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdInttransRuleProviderBase EdInttransRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdInttransRuleProvider;
			}
		}
		
		#endregion
		
		#region EdGuardProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdGuard"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdGuardProviderBase EdGuardProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdGuardProvider;
			}
		}
		
		#endregion
		
		#region EdExamSchdlProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdExamSchdl"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdExamSchdlProviderBase EdExamSchdlProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdExamSchdlProvider;
			}
		}
		
		#endregion
		
		#region EdExamStudAbsenceProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdExamStudAbsence"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdExamStudAbsenceProviderBase EdExamStudAbsenceProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdExamStudAbsenceProvider;
			}
		}
		
		#endregion
		
		#region EdExamSuprvsorProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdExamSuprvsor"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdExamSuprvsorProviderBase EdExamSuprvsorProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdExamSuprvsorProvider;
			}
		}
		
		#endregion
		
		#region EdGraduationAwardProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdGraduationAward"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdGraduationAwardProviderBase EdGraduationAwardProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdGraduationAwardProvider;
			}
		}
		
		#endregion
		
		#region EdStudCheatExecProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCheatExec"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCheatExecProviderBase EdStudCheatExecProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCheatExecProvider;
			}
		}
		
		#endregion
		
		#region EdStudClrncReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudClrncReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudClrncReqProviderBase EdStudClrncReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudClrncReqProvider;
			}
		}
		
		#endregion
		
		#region EdStudIntTrnsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudIntTrns"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudIntTrnsProviderBase EdStudIntTrnsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudIntTrnsProvider;
			}
		}
		
		#endregion
		
		#region EdStudClrncItemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudClrncItem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudClrncItemProviderBase EdStudClrncItemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudClrncItemProvider;
			}
		}
		
		#endregion
		
		#region EdStudIntTrnsCourseFromProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudIntTrnsCourseFrom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudIntTrnsCourseFromProviderBase EdStudIntTrnsCourseFromProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudIntTrnsCourseFromProvider;
			}
		}
		
		#endregion
		
		#region EdStudIntTrnsCourseToProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudIntTrnsCourseTo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudIntTrnsCourseToProviderBase EdStudIntTrnsCourseToProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudIntTrnsCourseToProvider;
			}
		}
		
		#endregion
		
		#region EdStudIntTrnsStateToProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudIntTrnsStateTo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudIntTrnsStateToProviderBase EdStudIntTrnsStateToProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudIntTrnsStateToProvider;
			}
		}
		
		#endregion
		
		#region EdStudIntTrnsStateFromProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudIntTrnsStateFrom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudIntTrnsStateFromProviderBase EdStudIntTrnsStateFromProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudIntTrnsStateFromProvider;
			}
		}
		
		#endregion
		
		#region EdStudGuardProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudGuard"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudGuardProviderBase EdStudGuardProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudGuardProvider;
			}
		}
		
		#endregion
		
		#region EdStudGrantDegreeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudGrantDegree"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudGrantDegreeProviderBase EdStudGrantDegreeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudGrantDegreeProvider;
			}
		}
		
		#endregion
		
		#region EdStudGrantTempProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudGrantTemp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudGrantTempProviderBase EdStudGrantTempProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudGrantTempProvider;
			}
		}
		
		#endregion
		
		#region EdStudGroupProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudGroup"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudGroupProviderBase EdStudGroupProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudGroupProvider;
			}
		}
		
		#endregion
		
		#region EdStudGroupPreProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudGroupPre"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudGroupPreProviderBase EdStudGroupPreProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudGroupPreProvider;
			}
		}
		
		#endregion
		
		#region EdStudIntTransPrefProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudIntTransPref"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudIntTransPrefProviderBase EdStudIntTransPrefProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudIntTransPrefProvider;
			}
		}
		
		#endregion
		
		#region EdStudInttransTempProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudInttransTemp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudInttransTempProviderBase EdStudInttransTempProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudInttransTempProvider;
			}
		}
		
		#endregion
		
		#region EdStudLangProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudLang"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudLangProviderBase EdStudLangProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudLangProvider;
			}
		}
		
		#endregion
		
		#region EdStudPnltyCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudPnltyCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudPnltyCourseProviderBase EdStudPnltyCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudPnltyCourseProvider;
			}
		}
		
		#endregion
		
		#region EdStudProblemProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudProblem"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudProblemProviderBase EdStudProblemProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudProblemProvider;
			}
		}
		
		#endregion
		
		#region EdStudQualGroupProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudQualGroup"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudQualGroupProviderBase EdStudQualGroupProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudQualGroupProvider;
			}
		}
		
		#endregion
		
		#region EdStudQualSubjectProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudQualSubject"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudQualSubjectProviderBase EdStudQualSubjectProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudQualSubjectProvider;
			}
		}
		
		#endregion
		
		#region EdStudNoteProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudNote"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudNoteProviderBase EdStudNoteProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudNoteProvider;
			}
		}
		
		#endregion
		
		#region EdStudMltryCrsProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudMltryCrs"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudMltryCrsProviderBase EdStudMltryCrsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudMltryCrsProvider;
			}
		}
		
		#endregion
		
		#region EdStudLatenessProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudLateness"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudLatenessProviderBase EdStudLatenessProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudLatenessProvider;
			}
		}
		
		#endregion
		
		#region EdStudMilitaryInfoProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudMilitaryInfo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudMilitaryInfoProviderBase EdStudMilitaryInfoProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudMilitaryInfoProvider;
			}
		}
		
		#endregion
		
		#region EdStudMilitaryStateProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudMilitaryState"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudMilitaryStateProviderBase EdStudMilitaryStateProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudMilitaryStateProvider;
			}
		}
		
		#endregion
		
		#region EdStudMissionProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudMission"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudMissionProviderBase EdStudMissionProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudMissionProvider;
			}
		}
		
		#endregion
		
		#region EdStudGraduationAwardProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudGraduationAward"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudGraduationAwardProviderBase EdStudGraduationAwardProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudGraduationAwardProvider;
			}
		}
		
		#endregion
		
		#region EdStudFacultyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudFaculty"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudFacultyProviderBase EdStudFacultyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudFacultyProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseReg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegProviderBase EdStudCourseRegProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegProvider;
			}
		}
		
		#endregion
		
		#region EdStudExmptReqAttchProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudExmptReqAttch"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudExmptReqAttchProviderBase EdStudExmptReqAttchProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudExmptReqAttchProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegAddProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRegAdd"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegAddProviderBase EdStudCourseRegAddProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegAddProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegAssessProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRegAssess"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegAssessProviderBase EdStudCourseRegAssessProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegAssessProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegPolcyProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRegPolcy"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegPolcyProviderBase EdStudCourseRegPolcyProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegPolcyProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegAssessSubProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRegAssessSub"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegAssessSubProviderBase EdStudCourseRegAssessSubProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegAssessSubProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseGrdChngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseGrdChng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseGrdChngProviderBase EdStudCourseGrdChngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseGrdChngProvider;
			}
		}
		
		#endregion
		
		#region EdStudCodeChngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCodeChng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCodeChngProviderBase EdStudCodeChngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCodeChngProvider;
			}
		}
		
		#endregion
		
		#region EdStudContactMethodProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudContactMethod"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudContactMethodProviderBase EdStudContactMethodProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudContactMethodProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseChngProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseChng"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseChngProviderBase EdStudCourseChngProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseChngProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseCompProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseComp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseCompProviderBase EdStudCourseCompProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseCompProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegPreProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRegPre"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegPreProviderBase EdStudCourseRegPreProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegPreProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegTempProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRegTemp"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegTempProviderBase EdStudCourseRegTempProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegTempProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRegTopicProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRegTopic"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRegTopicProviderBase EdStudCourseRegTopicProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRegTopicProvider;
			}
		}
		
		#endregion
		
		#region EdStudExmptReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudExmptReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudExmptReqProviderBase EdStudExmptReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudExmptReqProvider;
			}
		}
		
		#endregion
		
		#region EdStudExmptCrsFromProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudExmptCrsFrom"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudExmptCrsFromProviderBase EdStudExmptCrsFromProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudExmptCrsFromProvider;
			}
		}
		
		#endregion
		
		#region EdStudExecuseReqProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudExecuseReq"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudExecuseReqProviderBase EdStudExecuseReqProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudExecuseReqProvider;
			}
		}
		
		#endregion
		
		#region EdStudExmptCrsToProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudExmptCrsTo"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudExmptCrsToProviderBase EdStudExmptCrsToProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudExmptCrsToProvider;
			}
		}
		
		#endregion
		
		#region EdStudExcuseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudExcuse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudExcuseProviderBase EdStudExcuseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudExcuseProvider;
			}
		}
		
		#endregion
		
		#region EdStudExcuseCourseProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudExcuseCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudExcuseCourseProviderBase EdStudExcuseCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudExcuseCourseProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseRplcProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseRplc"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseRplcProviderBase EdStudCourseRplcProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseRplcProvider;
			}
		}
		
		#endregion
		
		#region EdStudCourseWaitProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudCourseWait"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudCourseWaitProviderBase EdStudCourseWaitProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudCourseWaitProvider;
			}
		}
		
		#endregion
		
		#region EdStudDisabilityProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudDisability"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudDisabilityProviderBase EdStudDisabilityProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudDisabilityProvider;
			}
		}
		
		#endregion
		
		#region EdStudEnrollChangeProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="EdStudEnrollChange"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static EdStudEnrollChangeProviderBase EdStudEnrollChangeProvider
		{
			get 
			{
				LoadProviders();
				return _provider.EdStudEnrollChangeProvider;
			}
		}
		
		#endregion
		
		#region WfCrsRsltApproveProvider

		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="WfCrsRsltApprove"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static WfCrsRsltApproveProviderBase WfCrsRsltApproveProvider
		{
			get 
			{
				LoadProviders();
				return _provider.WfCrsRsltApproveProvider;
			}
		}
		
		#endregion
		
		
		#region AppFeeViewProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="AppFeeView"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static AppFeeViewProviderBase AppFeeViewProvider
		{
			get 
			{
				LoadProviders();
				return _provider.AppFeeViewProvider;
			}
		}
		
		#endregion
		
		#region ApplicantPlacementExamViewProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ApplicantPlacementExamView"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ApplicantPlacementExamViewProviderBase ApplicantPlacementExamViewProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ApplicantPlacementExamViewProvider;
			}
		}
		
		#endregion
		
		#region ApplicantRequiredDocumentViewProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ApplicantRequiredDocumentView"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ApplicantRequiredDocumentViewProviderBase ApplicantRequiredDocumentViewProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ApplicantRequiredDocumentViewProvider;
			}
		}
		
		#endregion
		
		#region ApplicantStepsViewProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ApplicantStepsView"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ApplicantStepsViewProviderBase ApplicantStepsViewProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ApplicantStepsViewProvider;
			}
		}
		
		#endregion
		
		#region ModulesTreeViewProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="ModulesTreeView"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static ModulesTreeViewProviderBase ModulesTreeViewProvider
		{
			get 
			{
				LoadProviders();
				return _provider.ModulesTreeViewProvider;
			}
		}
		
		#endregion
		
		#region StaffAcademicLoadsProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="StaffAcademicLoads"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static StaffAcademicLoadsProviderBase StaffAcademicLoadsProvider
		{
			get 
			{
				LoadProviders();
				return _provider.StaffAcademicLoadsProvider;
			}
		}
		
		#endregion
		
		#region TeachingLoadDistributionPerProgramProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="TeachingLoadDistributionPerProgram"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static TeachingLoadDistributionPerProgramProviderBase TeachingLoadDistributionPerProgramProvider
		{
			get 
			{
				LoadProviders();
				return _provider.TeachingLoadDistributionPerProgramProvider;
			}
		}
		
		#endregion
		
		#region VmGetOfferingInCurrentAcadYearSemesterProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VmGetOfferingInCurrentAcadYearSemester"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VmGetOfferingInCurrentAcadYearSemesterProviderBase VmGetOfferingInCurrentAcadYearSemesterProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VmGetOfferingInCurrentAcadYearSemesterProvider;
			}
		}
		
		#endregion
		
		#region VscheduleCoursesProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VscheduleCourses"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VscheduleCoursesProviderBase VscheduleCoursesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VscheduleCoursesProvider;
			}
		}
		
		#endregion
		
		#region VwGetAcadmicPlanCoursesProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VwGetAcadmicPlanCourses"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VwGetAcadmicPlanCoursesProviderBase VwGetAcadmicPlanCoursesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VwGetAcadmicPlanCoursesProvider;
			}
		}
		
		#endregion
		
		#region VwGetUniversityRequirementsCoursesProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VwGetUniversityRequirementsCourses"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VwGetUniversityRequirementsCoursesProviderBase VwGetUniversityRequirementsCoursesProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VwGetUniversityRequirementsCoursesProvider;
			}
		}
		
		#endregion
		
		#region VwSelectDegreeAfterApplyRepeateRuleProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VwSelectDegreeAfterApplyRepeateRule"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VwSelectDegreeAfterApplyRepeateRuleProviderBase VwSelectDegreeAfterApplyRepeateRuleProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VwSelectDegreeAfterApplyRepeateRuleProvider;
			}
		}
		
		#endregion
		
		#region VwSelectStudRemainCourseProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VwSelectStudRemainCourse"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VwSelectStudRemainCourseProviderBase VwSelectStudRemainCourseProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VwSelectStudRemainCourseProvider;
			}
		}
		
		#endregion
		
		#region VwSelectTotalCrsHrsRegProvider
		
		///<summary>
		/// Gets the current instance of the Data Access Logic Component for the <see cref="VwSelectTotalCrsHrsReg"/> business entity.
		/// It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
		///</summary>
		public static VwSelectTotalCrsHrsRegProviderBase VwSelectTotalCrsHrsRegProvider
		{
			get 
			{
				LoadProviders();
				return _provider.VwSelectTotalCrsHrsRegProvider;
			}
		}
		
		#endregion
		
		#endregion
	}
	
	#region Query/Filters
		
	#region MilCodeCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MilCodeCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MilCodeCourseFilters : MilCodeCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MilCodeCourseFilters class.
		/// </summary>
		public MilCodeCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MilCodeCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MilCodeCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MilCodeCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MilCodeCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MilCodeCourseFilters
	
	#region MilCodeCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MilCodeCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MilCodeCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MilCodeCourseQuery : MilCodeCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MilCodeCourseQuery class.
		/// </summary>
		public MilCodeCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MilCodeCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MilCodeCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MilCodeCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MilCodeCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MilCodeCourseQuery
		
	#region AccomApartmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomApartment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomApartmentFilters : AccomApartmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomApartmentFilters class.
		/// </summary>
		public AccomApartmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomApartmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomApartmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomApartmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomApartmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomApartmentFilters
	
	#region AccomApartmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomApartmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomApartment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomApartmentQuery : AccomApartmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomApartmentQuery class.
		/// </summary>
		public AccomApartmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomApartmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomApartmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomApartmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomApartmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomApartmentQuery
		
	#region MltCdeBhvrAttndcRltdFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltCdeBhvrAttndcRltd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeBhvrAttndcRltdFilters : MltCdeBhvrAttndcRltdFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeBhvrAttndcRltdFilters class.
		/// </summary>
		public MltCdeBhvrAttndcRltdFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeBhvrAttndcRltdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeBhvrAttndcRltdFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeBhvrAttndcRltdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeBhvrAttndcRltdFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeBhvrAttndcRltdFilters
	
	#region MltCdeBhvrAttndcRltdQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltCdeBhvrAttndcRltdParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltCdeBhvrAttndcRltd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeBhvrAttndcRltdQuery : MltCdeBhvrAttndcRltdParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeBhvrAttndcRltdQuery class.
		/// </summary>
		public MltCdeBhvrAttndcRltdQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeBhvrAttndcRltdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeBhvrAttndcRltdQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeBhvrAttndcRltdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeBhvrAttndcRltdQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeBhvrAttndcRltdQuery
		
	#region MdiStudVaccFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudVacc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudVaccFilters : MdiStudVaccFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudVaccFilters class.
		/// </summary>
		public MdiStudVaccFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudVaccFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudVaccFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudVaccFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudVaccFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudVaccFilters
	
	#region MdiStudVaccQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudVaccParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudVacc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudVaccQuery : MdiStudVaccParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudVaccQuery class.
		/// </summary>
		public MdiStudVaccQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudVaccQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudVaccQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudVaccQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudVaccQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudVaccQuery
		
	#region MltCdeOrgTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltCdeOrgType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeOrgTypeFilters : MltCdeOrgTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeOrgTypeFilters class.
		/// </summary>
		public MltCdeOrgTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOrgTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeOrgTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOrgTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeOrgTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeOrgTypeFilters
	
	#region MltCdeOrgTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltCdeOrgTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltCdeOrgType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeOrgTypeQuery : MltCdeOrgTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeOrgTypeQuery class.
		/// </summary>
		public MltCdeOrgTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOrgTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeOrgTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOrgTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeOrgTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeOrgTypeQuery
		
	#region MdiStudRecordFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudRecord"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudRecordFilters : MdiStudRecordFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudRecordFilters class.
		/// </summary>
		public MdiStudRecordFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudRecordFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudRecordFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudRecordFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudRecordFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudRecordFilters
	
	#region MdiStudRecordQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudRecordParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudRecord"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudRecordQuery : MdiStudRecordParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudRecordQuery class.
		/// </summary>
		public MdiStudRecordQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudRecordQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudRecordQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudRecordQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudRecordQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudRecordQuery
		
	#region MdiStudSignFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudSign"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudSignFilters : MdiStudSignFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudSignFilters class.
		/// </summary>
		public MdiStudSignFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudSignFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudSignFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudSignFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudSignFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudSignFilters
	
	#region MdiStudSignQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudSignParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudSign"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudSignQuery : MdiStudSignParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudSignQuery class.
		/// </summary>
		public MdiStudSignQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudSignQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudSignQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudSignQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudSignQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudSignQuery
		
	#region MdiStudHosptlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudHosptl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudHosptlFilters : MdiStudHosptlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlFilters class.
		/// </summary>
		public MdiStudHosptlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudHosptlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudHosptlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudHosptlFilters
	
	#region MdiStudHosptlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudHosptlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudHosptl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudHosptlQuery : MdiStudHosptlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlQuery class.
		/// </summary>
		public MdiStudHosptlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudHosptlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudHosptlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudHosptlQuery
		
	#region MdiStudInvstgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudInvstg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudInvstgFilters : MdiStudInvstgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudInvstgFilters class.
		/// </summary>
		public MdiStudInvstgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudInvstgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudInvstgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudInvstgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudInvstgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudInvstgFilters
	
	#region MdiStudInvstgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudInvstgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudInvstg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudInvstgQuery : MdiStudInvstgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudInvstgQuery class.
		/// </summary>
		public MdiStudInvstgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudInvstgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudInvstgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudInvstgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudInvstgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudInvstgQuery
		
	#region MdiStudLifeStyleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudLifeStyle"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudLifeStyleFilters : MdiStudLifeStyleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudLifeStyleFilters class.
		/// </summary>
		public MdiStudLifeStyleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudLifeStyleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudLifeStyleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudLifeStyleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudLifeStyleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudLifeStyleFilters
	
	#region MdiStudLifeStyleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudLifeStyleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudLifeStyle"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudLifeStyleQuery : MdiStudLifeStyleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudLifeStyleQuery class.
		/// </summary>
		public MdiStudLifeStyleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudLifeStyleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudLifeStyleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudLifeStyleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudLifeStyleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudLifeStyleQuery
		
	#region MdiStudProblemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudProblem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudProblemFilters : MdiStudProblemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudProblemFilters class.
		/// </summary>
		public MdiStudProblemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudProblemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudProblemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudProblemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudProblemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudProblemFilters
	
	#region MdiStudProblemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudProblemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudProblem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudProblemQuery : MdiStudProblemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudProblemQuery class.
		/// </summary>
		public MdiStudProblemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudProblemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudProblemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudProblemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudProblemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudProblemQuery
		
	#region MltCdeOutRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltCdeOutRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeOutRsnFilters : MltCdeOutRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeOutRsnFilters class.
		/// </summary>
		public MltCdeOutRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOutRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeOutRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOutRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeOutRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeOutRsnFilters
	
	#region MltCdeOutRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltCdeOutRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltCdeOutRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeOutRsnQuery : MltCdeOutRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeOutRsnQuery class.
		/// </summary>
		public MltCdeOutRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOutRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeOutRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeOutRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeOutRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeOutRsnQuery
		
	#region MltCdeStudDegreeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltCdeStudDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeStudDegreeFilters : MltCdeStudDegreeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeStudDegreeFilters class.
		/// </summary>
		public MltCdeStudDegreeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeStudDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeStudDegreeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeStudDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeStudDegreeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeStudDegreeFilters
	
	#region MltCdeStudDegreeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltCdeStudDegreeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltCdeStudDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltCdeStudDegreeQuery : MltCdeStudDegreeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltCdeStudDegreeQuery class.
		/// </summary>
		public MltCdeStudDegreeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltCdeStudDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltCdeStudDegreeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltCdeStudDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltCdeStudDegreeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltCdeStudDegreeQuery
		
	#region MltLvlBhvrAttndcFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltLvlBhvrAttndc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltLvlBhvrAttndcFilters : MltLvlBhvrAttndcFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltLvlBhvrAttndcFilters class.
		/// </summary>
		public MltLvlBhvrAttndcFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltLvlBhvrAttndcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltLvlBhvrAttndcFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltLvlBhvrAttndcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltLvlBhvrAttndcFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltLvlBhvrAttndcFilters
	
	#region MltLvlBhvrAttndcQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltLvlBhvrAttndcParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltLvlBhvrAttndc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltLvlBhvrAttndcQuery : MltLvlBhvrAttndcParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltLvlBhvrAttndcQuery class.
		/// </summary>
		public MltLvlBhvrAttndcQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltLvlBhvrAttndcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltLvlBhvrAttndcQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltLvlBhvrAttndcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltLvlBhvrAttndcQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltLvlBhvrAttndcQuery
		
	#region PgCdeConfTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCdeConfType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeConfTypeFilters : PgCdeConfTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeConfTypeFilters class.
		/// </summary>
		public PgCdeConfTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeConfTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeConfTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeConfTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeConfTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeConfTypeFilters
	
	#region PgCdeConfTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCdeConfTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCdeConfType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeConfTypeQuery : PgCdeConfTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeConfTypeQuery class.
		/// </summary>
		public PgCdeConfTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeConfTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeConfTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeConfTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeConfTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeConfTypeQuery
		
	#region PgCdeRptRecommendFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCdeRptRecommend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeRptRecommendFilters : PgCdeRptRecommendFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeRptRecommendFilters class.
		/// </summary>
		public PgCdeRptRecommendFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeRptRecommendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeRptRecommendFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeRptRecommendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeRptRecommendFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeRptRecommendFilters
	
	#region PgCdeRptRecommendQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCdeRptRecommendParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCdeRptRecommend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeRptRecommendQuery : PgCdeRptRecommendParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeRptRecommendQuery class.
		/// </summary>
		public PgCdeRptRecommendQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeRptRecommendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeRptRecommendQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeRptRecommendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeRptRecommendQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeRptRecommendQuery
		
	#region PgCdeStfRoleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCdeStfRole"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeStfRoleFilters : PgCdeStfRoleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleFilters class.
		/// </summary>
		public PgCdeStfRoleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeStfRoleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeStfRoleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeStfRoleFilters
	
	#region PgCdeStfRoleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCdeStfRoleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCdeStfRole"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeStfRoleQuery : PgCdeStfRoleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleQuery class.
		/// </summary>
		public PgCdeStfRoleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeStfRoleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeStfRoleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeStfRoleQuery
		
	#region MltOrgTreeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltOrgTree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltOrgTreeFilters : MltOrgTreeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltOrgTreeFilters class.
		/// </summary>
		public MltOrgTreeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltOrgTreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltOrgTreeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltOrgTreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltOrgTreeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltOrgTreeFilters
	
	#region MltOrgTreeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltOrgTreeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltOrgTree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltOrgTreeQuery : MltOrgTreeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltOrgTreeQuery class.
		/// </summary>
		public MltOrgTreeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltOrgTreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltOrgTreeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltOrgTreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltOrgTreeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltOrgTreeQuery
		
	#region PgCdeCommRecommendFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCdeCommRecommend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeCommRecommendFilters : PgCdeCommRecommendFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeCommRecommendFilters class.
		/// </summary>
		public PgCdeCommRecommendFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeCommRecommendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeCommRecommendFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeCommRecommendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeCommRecommendFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeCommRecommendFilters
	
	#region PgCdeCommRecommendQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCdeCommRecommendParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCdeCommRecommend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeCommRecommendQuery : PgCdeCommRecommendParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeCommRecommendQuery class.
		/// </summary>
		public PgCdeCommRecommendQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeCommRecommendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeCommRecommendQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeCommRecommendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeCommRecommendQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeCommRecommendQuery
		
	#region MltStudInfoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltStudInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltStudInfoFilters : MltStudInfoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltStudInfoFilters class.
		/// </summary>
		public MltStudInfoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltStudInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltStudInfoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltStudInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltStudInfoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltStudInfoFilters
	
	#region MltStudInfoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltStudInfoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltStudInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltStudInfoQuery : MltStudInfoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltStudInfoQuery class.
		/// </summary>
		public MltStudInfoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltStudInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltStudInfoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltStudInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltStudInfoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltStudInfoQuery
		
	#region MltRptDayStudStsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltRptDayStudSts"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayStudStsFilters : MltRptDayStudStsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsFilters class.
		/// </summary>
		public MltRptDayStudStsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayStudStsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayStudStsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayStudStsFilters
	
	#region MltRptDayStudStsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltRptDayStudStsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltRptDayStudSts"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayStudStsQuery : MltRptDayStudStsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsQuery class.
		/// </summary>
		public MltRptDayStudStsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayStudStsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayStudStsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayStudStsQuery
		
	#region MltRptDayMissionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltRptDayMission"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayMissionFilters : MltRptDayMissionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayMissionFilters class.
		/// </summary>
		public MltRptDayMissionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayMissionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayMissionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayMissionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayMissionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayMissionFilters
	
	#region MltRptDayMissionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltRptDayMissionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltRptDayMission"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayMissionQuery : MltRptDayMissionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayMissionQuery class.
		/// </summary>
		public MltRptDayMissionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayMissionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayMissionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayMissionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayMissionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayMissionQuery
		
	#region MltRptDayOutStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltRptDayOutStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayOutStudFilters : MltRptDayOutStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutStudFilters class.
		/// </summary>
		public MltRptDayOutStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayOutStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayOutStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayOutStudFilters
	
	#region MltRptDayOutStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltRptDayOutStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltRptDayOutStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayOutStudQuery : MltRptDayOutStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutStudQuery class.
		/// </summary>
		public MltRptDayOutStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayOutStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayOutStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayOutStudQuery
		
	#region MltRptDayOutFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltRptDayOut"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayOutFilters : MltRptDayOutFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutFilters class.
		/// </summary>
		public MltRptDayOutFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayOutFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayOutFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayOutFilters
	
	#region MltRptDayOutQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltRptDayOutParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltRptDayOut"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltRptDayOutQuery : MltRptDayOutParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutQuery class.
		/// </summary>
		public MltRptDayOutQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltRptDayOutQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltRptDayOutQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltRptDayOutQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltRptDayOutQuery
		
	#region MdiStudFamHstryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudFamHstry"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudFamHstryFilters : MdiStudFamHstryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudFamHstryFilters class.
		/// </summary>
		public MdiStudFamHstryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudFamHstryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudFamHstryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudFamHstryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudFamHstryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudFamHstryFilters
	
	#region MdiStudFamHstryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudFamHstryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudFamHstry"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudFamHstryQuery : MdiStudFamHstryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudFamHstryQuery class.
		/// </summary>
		public MdiStudFamHstryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudFamHstryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudFamHstryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudFamHstryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudFamHstryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudFamHstryQuery
		
	#region MdiStudClnqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiStudClnq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudClnqFilters : MdiStudClnqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudClnqFilters class.
		/// </summary>
		public MdiStudClnqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudClnqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudClnqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudClnqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudClnqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudClnqFilters
	
	#region MdiStudClnqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiStudClnqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiStudClnq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiStudClnqQuery : MdiStudClnqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiStudClnqQuery class.
		/// </summary>
		public MdiStudClnqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiStudClnqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiStudClnqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiStudClnqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiStudClnqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiStudClnqQuery
		
	#region MdiCdeVaccFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeVacc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeVaccFilters : MdiCdeVaccFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccFilters class.
		/// </summary>
		public MdiCdeVaccFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeVaccFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeVaccFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeVaccFilters
	
	#region MdiCdeVaccQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeVaccParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeVacc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeVaccQuery : MdiCdeVaccParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccQuery class.
		/// </summary>
		public MdiCdeVaccQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeVaccQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeVaccQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeVaccQuery
		
	#region IntegFpStaffAbsenceDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegFpStaffAbsenceDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegFpStaffAbsenceDtlFilters : IntegFpStaffAbsenceDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceDtlFilters class.
		/// </summary>
		public IntegFpStaffAbsenceDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegFpStaffAbsenceDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegFpStaffAbsenceDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegFpStaffAbsenceDtlFilters
	
	#region IntegFpStaffAbsenceDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegFpStaffAbsenceDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegFpStaffAbsenceDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegFpStaffAbsenceDtlQuery : IntegFpStaffAbsenceDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceDtlQuery class.
		/// </summary>
		public IntegFpStaffAbsenceDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegFpStaffAbsenceDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegFpStaffAbsenceDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegFpStaffAbsenceDtlQuery
		
	#region IntegLogFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegLog"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegLogFilters : IntegLogFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegLogFilters class.
		/// </summary>
		public IntegLogFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegLogFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegLogFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegLogFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegLogFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegLogFilters
	
	#region IntegLogQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegLogParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegLog"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegLogQuery : IntegLogParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegLogQuery class.
		/// </summary>
		public IntegLogQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegLogQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegLogQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegLogQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegLogQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegLogQuery
		
	#region IntegMoodleEnrolFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegMoodleEnrol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleEnrolFilters : IntegMoodleEnrolFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleEnrolFilters class.
		/// </summary>
		public IntegMoodleEnrolFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleEnrolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleEnrolFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleEnrolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleEnrolFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleEnrolFilters
	
	#region IntegMoodleEnrolQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegMoodleEnrolParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegMoodleEnrol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleEnrolQuery : IntegMoodleEnrolParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleEnrolQuery class.
		/// </summary>
		public IntegMoodleEnrolQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleEnrolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleEnrolQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleEnrolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleEnrolQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleEnrolQuery
		
	#region IntegMoodleUnenrolFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegMoodleUnenrol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleUnenrolFilters : IntegMoodleUnenrolFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUnenrolFilters class.
		/// </summary>
		public IntegMoodleUnenrolFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUnenrolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleUnenrolFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUnenrolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleUnenrolFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleUnenrolFilters
	
	#region IntegMoodleUnenrolQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegMoodleUnenrolParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegMoodleUnenrol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleUnenrolQuery : IntegMoodleUnenrolParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUnenrolQuery class.
		/// </summary>
		public IntegMoodleUnenrolQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUnenrolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleUnenrolQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUnenrolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleUnenrolQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleUnenrolQuery
		
	#region IntegFpStaffAbsenceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegFpStaffAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegFpStaffAbsenceFilters : IntegFpStaffAbsenceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceFilters class.
		/// </summary>
		public IntegFpStaffAbsenceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegFpStaffAbsenceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegFpStaffAbsenceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegFpStaffAbsenceFilters
	
	#region IntegFpStaffAbsenceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegFpStaffAbsenceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegFpStaffAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegFpStaffAbsenceQuery : IntegFpStaffAbsenceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceQuery class.
		/// </summary>
		public IntegFpStaffAbsenceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegFpStaffAbsenceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegFpStaffAbsenceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegFpStaffAbsenceQuery
		
	#region MltStudBhvrAttndcFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MltStudBhvrAttndc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltStudBhvrAttndcFilters : MltStudBhvrAttndcFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcFilters class.
		/// </summary>
		public MltStudBhvrAttndcFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltStudBhvrAttndcFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltStudBhvrAttndcFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltStudBhvrAttndcFilters
	
	#region MltStudBhvrAttndcQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MltStudBhvrAttndcParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MltStudBhvrAttndc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MltStudBhvrAttndcQuery : MltStudBhvrAttndcParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcQuery class.
		/// </summary>
		public MltStudBhvrAttndcQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MltStudBhvrAttndcQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MltStudBhvrAttndcQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MltStudBhvrAttndcQuery
		
	#region IntegFinanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegFinance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegFinanceFilters : IntegFinanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegFinanceFilters class.
		/// </summary>
		public IntegFinanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegFinanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegFinanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegFinanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegFinanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegFinanceFilters
	
	#region IntegFinanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegFinanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegFinance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegFinanceQuery : IntegFinanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegFinanceQuery class.
		/// </summary>
		public IntegFinanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegFinanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegFinanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegFinanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegFinanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegFinanceQuery
		
	#region GsMilitaryRegionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsMilitaryRegion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsMilitaryRegionFilters : GsMilitaryRegionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsMilitaryRegionFilters class.
		/// </summary>
		public GsMilitaryRegionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryRegionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsMilitaryRegionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryRegionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsMilitaryRegionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsMilitaryRegionFilters
	
	#region GsMilitaryRegionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsMilitaryRegionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsMilitaryRegion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsMilitaryRegionQuery : GsMilitaryRegionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsMilitaryRegionQuery class.
		/// </summary>
		public GsMilitaryRegionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryRegionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsMilitaryRegionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryRegionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsMilitaryRegionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsMilitaryRegionQuery
		
	#region GsSysPivotFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsSysPivot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsSysPivotFilters : GsSysPivotFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsSysPivotFilters class.
		/// </summary>
		public GsSysPivotFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsSysPivotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsSysPivotFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsSysPivotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsSysPivotFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsSysPivotFilters
	
	#region GsSysPivotQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsSysPivotParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsSysPivot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsSysPivotQuery : GsSysPivotParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsSysPivotQuery class.
		/// </summary>
		public GsSysPivotQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsSysPivotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsSysPivotQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsSysPivotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsSysPivotQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsSysPivotQuery
		
	#region HrDepartmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="HrDepartment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HrDepartmentFilters : HrDepartmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HrDepartmentFilters class.
		/// </summary>
		public HrDepartmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the HrDepartmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HrDepartmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HrDepartmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HrDepartmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HrDepartmentFilters
	
	#region HrDepartmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="HrDepartmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="HrDepartment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class HrDepartmentQuery : HrDepartmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the HrDepartmentQuery class.
		/// </summary>
		public HrDepartmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the HrDepartmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public HrDepartmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the HrDepartmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public HrDepartmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion HrDepartmentQuery
		
	#region IntegCdeErrorTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegCdeErrorType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegCdeErrorTypeFilters : IntegCdeErrorTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegCdeErrorTypeFilters class.
		/// </summary>
		public IntegCdeErrorTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegCdeErrorTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegCdeErrorTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegCdeErrorTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegCdeErrorTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegCdeErrorTypeFilters
	
	#region IntegCdeErrorTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegCdeErrorTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegCdeErrorType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegCdeErrorTypeQuery : IntegCdeErrorTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegCdeErrorTypeQuery class.
		/// </summary>
		public IntegCdeErrorTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegCdeErrorTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegCdeErrorTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegCdeErrorTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegCdeErrorTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegCdeErrorTypeQuery
		
	#region IntegMoodleUpdateStaffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegMoodleUpdateStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleUpdateStaffFilters : IntegMoodleUpdateStaffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffFilters class.
		/// </summary>
		public IntegMoodleUpdateStaffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleUpdateStaffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleUpdateStaffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleUpdateStaffFilters
	
	#region IntegMoodleUpdateStaffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegMoodleUpdateStaffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegMoodleUpdateStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleUpdateStaffQuery : IntegMoodleUpdateStaffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffQuery class.
		/// </summary>
		public IntegMoodleUpdateStaffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleUpdateStaffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleUpdateStaffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleUpdateStaffQuery
		
	#region IntegMoodleUpdateStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegMoodleUpdateStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleUpdateStudFilters : IntegMoodleUpdateStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStudFilters class.
		/// </summary>
		public IntegMoodleUpdateStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleUpdateStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleUpdateStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleUpdateStudFilters
	
	#region IntegMoodleUpdateStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegMoodleUpdateStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegMoodleUpdateStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegMoodleUpdateStudQuery : IntegMoodleUpdateStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStudQuery class.
		/// </summary>
		public IntegMoodleUpdateStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegMoodleUpdateStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegMoodleUpdateStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegMoodleUpdateStudQuery
		
	#region MdiCdeSignCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeSignCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeSignCatFilters : MdiCdeSignCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignCatFilters class.
		/// </summary>
		public MdiCdeSignCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeSignCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeSignCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeSignCatFilters
	
	#region MdiCdeSignCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeSignCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeSignCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeSignCatQuery : MdiCdeSignCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignCatQuery class.
		/// </summary>
		public MdiCdeSignCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeSignCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeSignCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeSignCatQuery
		
	#region MdiCdeLifeStyleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeLifeStyle"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeLifeStyleFilters : MdiCdeLifeStyleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeLifeStyleFilters class.
		/// </summary>
		public MdiCdeLifeStyleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeLifeStyleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeLifeStyleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeLifeStyleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeLifeStyleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeLifeStyleFilters
	
	#region MdiCdeLifeStyleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeLifeStyleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeLifeStyle"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeLifeStyleQuery : MdiCdeLifeStyleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeLifeStyleQuery class.
		/// </summary>
		public MdiCdeLifeStyleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeLifeStyleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeLifeStyleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeLifeStyleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeLifeStyleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeLifeStyleQuery
		
	#region MdiCdeProblemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeProblem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeProblemFilters : MdiCdeProblemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeProblemFilters class.
		/// </summary>
		public MdiCdeProblemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeProblemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeProblemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeProblemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeProblemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeProblemFilters
	
	#region MdiCdeProblemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeProblemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeProblem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeProblemQuery : MdiCdeProblemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeProblemQuery class.
		/// </summary>
		public MdiCdeProblemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeProblemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeProblemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeProblemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeProblemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeProblemQuery
		
	#region MdiCdeInvstgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeInvstg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeInvstgFilters : MdiCdeInvstgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeInvstgFilters class.
		/// </summary>
		public MdiCdeInvstgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeInvstgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeInvstgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeInvstgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeInvstgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeInvstgFilters
	
	#region MdiCdeInvstgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeInvstgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeInvstg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeInvstgQuery : MdiCdeInvstgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeInvstgQuery class.
		/// </summary>
		public MdiCdeInvstgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeInvstgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeInvstgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeInvstgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeInvstgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeInvstgQuery
		
	#region MdiCdeSignFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeSign"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeSignFilters : MdiCdeSignFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignFilters class.
		/// </summary>
		public MdiCdeSignFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeSignFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeSignFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeSignFilters
	
	#region MdiCdeSignQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeSignParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeSign"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeSignQuery : MdiCdeSignParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignQuery class.
		/// </summary>
		public MdiCdeSignQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeSignQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeSignQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeSignQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeSignQuery
		
	#region MdiCdeHosptlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeHosptl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeHosptlFilters : MdiCdeHosptlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeHosptlFilters class.
		/// </summary>
		public MdiCdeHosptlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeHosptlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeHosptlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeHosptlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeHosptlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeHosptlFilters
	
	#region MdiCdeHosptlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeHosptlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeHosptl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeHosptlQuery : MdiCdeHosptlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeHosptlQuery class.
		/// </summary>
		public MdiCdeHosptlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeHosptlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeHosptlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeHosptlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeHosptlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeHosptlQuery
		
	#region MdiCdeDiseaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="MdiCdeDisease"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeDiseaseFilters : MdiCdeDiseaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeDiseaseFilters class.
		/// </summary>
		public MdiCdeDiseaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeDiseaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeDiseaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeDiseaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeDiseaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeDiseaseFilters
	
	#region MdiCdeDiseaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="MdiCdeDiseaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="MdiCdeDisease"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class MdiCdeDiseaseQuery : MdiCdeDiseaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the MdiCdeDiseaseQuery class.
		/// </summary>
		public MdiCdeDiseaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeDiseaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public MdiCdeDiseaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the MdiCdeDiseaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public MdiCdeDiseaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion MdiCdeDiseaseQuery
		
	#region IntegUserAdLogHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegUserAdLogHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegUserAdLogHdrFilters : IntegUserAdLogHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogHdrFilters class.
		/// </summary>
		public IntegUserAdLogHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegUserAdLogHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegUserAdLogHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegUserAdLogHdrFilters
	
	#region IntegUserAdLogHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegUserAdLogHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegUserAdLogHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegUserAdLogHdrQuery : IntegUserAdLogHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogHdrQuery class.
		/// </summary>
		public IntegUserAdLogHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegUserAdLogHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegUserAdLogHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegUserAdLogHdrQuery
		
	#region IntegPaymentUpayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegPaymentUpay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegPaymentUpayFilters : IntegPaymentUpayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayFilters class.
		/// </summary>
		public IntegPaymentUpayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegPaymentUpayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegPaymentUpayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegPaymentUpayFilters
	
	#region IntegPaymentUpayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegPaymentUpayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegPaymentUpay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegPaymentUpayQuery : IntegPaymentUpayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayQuery class.
		/// </summary>
		public IntegPaymentUpayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegPaymentUpayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegPaymentUpayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegPaymentUpayQuery
		
	#region IntegSemOpenCloseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegSemOpenClose"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegSemOpenCloseFilters : IntegSemOpenCloseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegSemOpenCloseFilters class.
		/// </summary>
		public IntegSemOpenCloseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegSemOpenCloseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegSemOpenCloseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegSemOpenCloseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegSemOpenCloseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegSemOpenCloseFilters
	
	#region IntegSemOpenCloseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegSemOpenCloseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegSemOpenClose"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegSemOpenCloseQuery : IntegSemOpenCloseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegSemOpenCloseQuery class.
		/// </summary>
		public IntegSemOpenCloseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegSemOpenCloseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegSemOpenCloseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegSemOpenCloseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegSemOpenCloseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegSemOpenCloseQuery
		
	#region PgCdeThesisStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCdeThesisStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeThesisStatusFilters : PgCdeThesisStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeThesisStatusFilters class.
		/// </summary>
		public PgCdeThesisStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeThesisStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeThesisStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeThesisStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeThesisStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeThesisStatusFilters
	
	#region PgCdeThesisStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCdeThesisStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCdeThesisStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCdeThesisStatusQuery : PgCdeThesisStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCdeThesisStatusQuery class.
		/// </summary>
		public PgCdeThesisStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCdeThesisStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCdeThesisStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCdeThesisStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCdeThesisStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCdeThesisStatusQuery
		
	#region IntegUserAdLogDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="IntegUserAdLogDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegUserAdLogDtlFilters : IntegUserAdLogDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlFilters class.
		/// </summary>
		public IntegUserAdLogDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegUserAdLogDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegUserAdLogDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegUserAdLogDtlFilters
	
	#region IntegUserAdLogDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="IntegUserAdLogDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="IntegUserAdLogDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class IntegUserAdLogDtlQuery : IntegUserAdLogDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlQuery class.
		/// </summary>
		public IntegUserAdLogDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public IntegUserAdLogDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public IntegUserAdLogDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion IntegUserAdLogDtlQuery
		
	#region RsrchCdeTitleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="RsrchCdeTitle"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchCdeTitleFilters : RsrchCdeTitleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchCdeTitleFilters class.
		/// </summary>
		public RsrchCdeTitleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeTitleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchCdeTitleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeTitleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchCdeTitleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchCdeTitleFilters
	
	#region RsrchCdeTitleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="RsrchCdeTitleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="RsrchCdeTitle"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchCdeTitleQuery : RsrchCdeTitleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchCdeTitleQuery class.
		/// </summary>
		public RsrchCdeTitleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeTitleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchCdeTitleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeTitleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchCdeTitleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchCdeTitleQuery
		
	#region PgOfferingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgOffering"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgOfferingFilters : PgOfferingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgOfferingFilters class.
		/// </summary>
		public PgOfferingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgOfferingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgOfferingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgOfferingFilters
	
	#region PgOfferingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgOfferingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgOffering"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgOfferingQuery : PgOfferingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgOfferingQuery class.
		/// </summary>
		public PgOfferingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgOfferingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgOfferingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgOfferingQuery
		
	#region SaCdeAdminJobFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCdeAdminJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCdeAdminJobFilters : SaCdeAdminJobFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCdeAdminJobFilters class.
		/// </summary>
		public SaCdeAdminJobFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAdminJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCdeAdminJobFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAdminJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCdeAdminJobFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCdeAdminJobFilters
	
	#region SaCdeAdminJobQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCdeAdminJobParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCdeAdminJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCdeAdminJobQuery : SaCdeAdminJobParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCdeAdminJobQuery class.
		/// </summary>
		public SaCdeAdminJobQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAdminJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCdeAdminJobQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAdminJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCdeAdminJobQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCdeAdminJobQuery
		
	#region PgOfferingTopicFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgOfferingTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgOfferingTopicFilters : PgOfferingTopicFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgOfferingTopicFilters class.
		/// </summary>
		public PgOfferingTopicFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgOfferingTopicFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgOfferingTopicFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgOfferingTopicFilters
	
	#region PgOfferingTopicQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgOfferingTopicParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgOfferingTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgOfferingTopicQuery : PgOfferingTopicParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgOfferingTopicQuery class.
		/// </summary>
		public PgOfferingTopicQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgOfferingTopicQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgOfferingTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgOfferingTopicQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgOfferingTopicQuery
		
	#region RsrchCdeStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="RsrchCdeStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchCdeStatusFilters : RsrchCdeStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchCdeStatusFilters class.
		/// </summary>
		public RsrchCdeStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchCdeStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchCdeStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchCdeStatusFilters
	
	#region RsrchCdeStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="RsrchCdeStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="RsrchCdeStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchCdeStatusQuery : RsrchCdeStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchCdeStatusQuery class.
		/// </summary>
		public RsrchCdeStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchCdeStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchCdeStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchCdeStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchCdeStatusQuery
		
	#region PgThesisDetailedSpecFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisDetailedSpec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisDetailedSpecFilters : PgThesisDetailedSpecFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisDetailedSpecFilters class.
		/// </summary>
		public PgThesisDetailedSpecFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDetailedSpecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisDetailedSpecFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDetailedSpecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisDetailedSpecFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisDetailedSpecFilters
	
	#region PgThesisDetailedSpecQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisDetailedSpecParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisDetailedSpec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisDetailedSpecQuery : PgThesisDetailedSpecParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisDetailedSpecQuery class.
		/// </summary>
		public PgThesisDetailedSpecQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDetailedSpecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisDetailedSpecQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDetailedSpecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisDetailedSpecQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisDetailedSpecQuery
		
	#region PgThesisGeneralSpecFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisGeneralSpec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisGeneralSpecFilters : PgThesisGeneralSpecFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisGeneralSpecFilters class.
		/// </summary>
		public PgThesisGeneralSpecFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGeneralSpecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisGeneralSpecFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGeneralSpecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisGeneralSpecFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisGeneralSpecFilters
	
	#region PgThesisGeneralSpecQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisGeneralSpecParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisGeneralSpec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisGeneralSpecQuery : PgThesisGeneralSpecParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisGeneralSpecQuery class.
		/// </summary>
		public PgThesisGeneralSpecQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGeneralSpecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisGeneralSpecQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGeneralSpecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisGeneralSpecQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisGeneralSpecQuery
		
	#region RsrchStudRegisterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="RsrchStudRegister"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchStudRegisterFilters : RsrchStudRegisterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterFilters class.
		/// </summary>
		public RsrchStudRegisterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchStudRegisterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchStudRegisterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchStudRegisterFilters
	
	#region RsrchStudRegisterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="RsrchStudRegisterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="RsrchStudRegister"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchStudRegisterQuery : RsrchStudRegisterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterQuery class.
		/// </summary>
		public RsrchStudRegisterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchStudRegisterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchStudRegisterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchStudRegisterQuery
		
	#region RsrchStudRegisterDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="RsrchStudRegisterDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchStudRegisterDtlFilters : RsrchStudRegisterDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlFilters class.
		/// </summary>
		public RsrchStudRegisterDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchStudRegisterDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchStudRegisterDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchStudRegisterDtlFilters
	
	#region RsrchStudRegisterDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="RsrchStudRegisterDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="RsrchStudRegisterDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchStudRegisterDtlQuery : RsrchStudRegisterDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlQuery class.
		/// </summary>
		public RsrchStudRegisterDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchStudRegisterDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchStudRegisterDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchStudRegisterDtlQuery
		
	#region RsrchCommStaffRecomFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="RsrchCommStaffRecom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchCommStaffRecomFilters : RsrchCommStaffRecomFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchCommStaffRecomFilters class.
		/// </summary>
		public RsrchCommStaffRecomFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchCommStaffRecomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchCommStaffRecomFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchCommStaffRecomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchCommStaffRecomFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchCommStaffRecomFilters
	
	#region RsrchCommStaffRecomQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="RsrchCommStaffRecomParameterBuilder"/> class
	/// that is used exclusively with a <see cref="RsrchCommStaffRecom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchCommStaffRecomQuery : RsrchCommStaffRecomParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchCommStaffRecomQuery class.
		/// </summary>
		public RsrchCommStaffRecomQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchCommStaffRecomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchCommStaffRecomQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchCommStaffRecomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchCommStaffRecomQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchCommStaffRecomQuery
		
	#region SaCandReleaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCandRelease"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCandReleaseFilters : SaCandReleaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseFilters class.
		/// </summary>
		public SaCandReleaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCandReleaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCandReleaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCandReleaseFilters
	
	#region SaCandReleaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCandReleaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCandRelease"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCandReleaseQuery : SaCandReleaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseQuery class.
		/// </summary>
		public SaCandReleaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCandReleaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCandReleaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCandReleaseQuery
		
	#region PgCodeChangeTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCodeChangeType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCodeChangeTypeFilters : PgCodeChangeTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCodeChangeTypeFilters class.
		/// </summary>
		public PgCodeChangeTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCodeChangeTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCodeChangeTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCodeChangeTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCodeChangeTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCodeChangeTypeFilters
	
	#region PgCodeChangeTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCodeChangeTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCodeChangeType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCodeChangeTypeQuery : PgCodeChangeTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCodeChangeTypeQuery class.
		/// </summary>
		public PgCodeChangeTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCodeChangeTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCodeChangeTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCodeChangeTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCodeChangeTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCodeChangeTypeQuery
		
	#region SaCandReleaseDetailFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCandReleaseDetail"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCandReleaseDetailFilters : SaCandReleaseDetailFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseDetailFilters class.
		/// </summary>
		public SaCandReleaseDetailFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseDetailFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCandReleaseDetailFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseDetailFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCandReleaseDetailFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCandReleaseDetailFilters
	
	#region SaCandReleaseDetailQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCandReleaseDetailParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCandReleaseDetail"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCandReleaseDetailQuery : SaCandReleaseDetailParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseDetailQuery class.
		/// </summary>
		public SaCandReleaseDetailQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseDetailQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCandReleaseDetailQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCandReleaseDetailQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCandReleaseDetailQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCandReleaseDetailQuery
		
	#region SaCdeAcadLoadFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCdeAcadLoad"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCdeAcadLoadFilters : SaCdeAcadLoadFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCdeAcadLoadFilters class.
		/// </summary>
		public SaCdeAcadLoadFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAcadLoadFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCdeAcadLoadFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAcadLoadFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCdeAcadLoadFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCdeAcadLoadFilters
	
	#region SaCdeAcadLoadQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCdeAcadLoadParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCdeAcadLoad"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCdeAcadLoadQuery : SaCdeAcadLoadParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCdeAcadLoadQuery class.
		/// </summary>
		public SaCdeAcadLoadQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAcadLoadQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCdeAcadLoadQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCdeAcadLoadQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCdeAcadLoadQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCdeAcadLoadQuery
		
	#region SaCodeDocTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeDocType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeDocTypeFilters : SaCodeDocTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeDocTypeFilters class.
		/// </summary>
		public SaCodeDocTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeDocTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeDocTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeDocTypeFilters
	
	#region SaCodeDocTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeDocTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeDocType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeDocTypeQuery : SaCodeDocTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeDocTypeQuery class.
		/// </summary>
		public SaCodeDocTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeDocTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeDocTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeDocTypeQuery
		
	#region SaCodeCourseTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeCourseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCourseTypeFilters : SaCodeCourseTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseTypeFilters class.
		/// </summary>
		public SaCodeCourseTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCourseTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCourseTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCourseTypeFilters
	
	#region SaCodeCourseTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeCourseTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeCourseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCourseTypeQuery : SaCodeCourseTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseTypeQuery class.
		/// </summary>
		public SaCodeCourseTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCourseTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCourseTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCourseTypeQuery
		
	#region SaCodeDocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeDocFilters : SaCodeDocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeDocFilters class.
		/// </summary>
		public SaCodeDocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeDocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeDocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeDocFilters
	
	#region SaCodeDocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeDocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeDocQuery : SaCodeDocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeDocQuery class.
		/// </summary>
		public SaCodeDocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeDocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeDocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeDocQuery
		
	#region SaCodeCourseScoreFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeCourseScore"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCourseScoreFilters : SaCodeCourseScoreFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseScoreFilters class.
		/// </summary>
		public SaCodeCourseScoreFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseScoreFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCourseScoreFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseScoreFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCourseScoreFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCourseScoreFilters
	
	#region SaCodeCourseScoreQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeCourseScoreParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeCourseScore"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCourseScoreQuery : SaCodeCourseScoreParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseScoreQuery class.
		/// </summary>
		public SaCodeCourseScoreQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseScoreQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCourseScoreQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseScoreQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCourseScoreQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCourseScoreQuery
		
	#region PgThesisStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudFilters : PgThesisStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudFilters class.
		/// </summary>
		public PgThesisStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudFilters
	
	#region PgThesisStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudQuery : PgThesisStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudQuery class.
		/// </summary>
		public PgThesisStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudQuery
		
	#region SaCodeCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCourseFilters : SaCodeCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseFilters class.
		/// </summary>
		public SaCodeCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCourseFilters
	
	#region SaCodeCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCourseQuery : SaCodeCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseQuery class.
		/// </summary>
		public SaCodeCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCourseQuery
		
	#region SaCodeEmpMethodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeEmpMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeEmpMethodFilters : SaCodeEmpMethodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeEmpMethodFilters class.
		/// </summary>
		public SaCodeEmpMethodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeEmpMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeEmpMethodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeEmpMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeEmpMethodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeEmpMethodFilters
	
	#region SaCodeEmpMethodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeEmpMethodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeEmpMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeEmpMethodQuery : SaCodeEmpMethodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeEmpMethodQuery class.
		/// </summary>
		public SaCodeEmpMethodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeEmpMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeEmpMethodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeEmpMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeEmpMethodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeEmpMethodQuery
		
	#region SaCodeCommMemberTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeCommMemberType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCommMemberTypeFilters : SaCodeCommMemberTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCommMemberTypeFilters class.
		/// </summary>
		public SaCodeCommMemberTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCommMemberTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCommMemberTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCommMemberTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCommMemberTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCommMemberTypeFilters
	
	#region SaCodeCommMemberTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeCommMemberTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeCommMemberType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeCommMemberTypeQuery : SaCodeCommMemberTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeCommMemberTypeQuery class.
		/// </summary>
		public SaCodeCommMemberTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCommMemberTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeCommMemberTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeCommMemberTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeCommMemberTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeCommMemberTypeQuery
		
	#region PgCodeRsrchStrategyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCodeRsrchStrategy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCodeRsrchStrategyFilters : PgCodeRsrchStrategyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCodeRsrchStrategyFilters class.
		/// </summary>
		public PgCodeRsrchStrategyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCodeRsrchStrategyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCodeRsrchStrategyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCodeRsrchStrategyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCodeRsrchStrategyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCodeRsrchStrategyFilters
	
	#region PgCodeRsrchStrategyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCodeRsrchStrategyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCodeRsrchStrategy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCodeRsrchStrategyQuery : PgCodeRsrchStrategyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCodeRsrchStrategyQuery class.
		/// </summary>
		public PgCodeRsrchStrategyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCodeRsrchStrategyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCodeRsrchStrategyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCodeRsrchStrategyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCodeRsrchStrategyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCodeRsrchStrategyQuery
		
	#region PgThesisCommFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommFilters : PgThesisCommFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommFilters class.
		/// </summary>
		public PgThesisCommFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommFilters
	
	#region PgThesisCommQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisCommParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommQuery : PgThesisCommParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommQuery class.
		/// </summary>
		public PgThesisCommQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommQuery
		
	#region PgThesisCommApproveFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisCommApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommApproveFilters : PgThesisCommApproveFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommApproveFilters class.
		/// </summary>
		public PgThesisCommApproveFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommApproveFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommApproveFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommApproveFilters
	
	#region PgThesisCommApproveQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisCommApproveParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisCommApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommApproveQuery : PgThesisCommApproveParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommApproveQuery class.
		/// </summary>
		public PgThesisCommApproveQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommApproveQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommApproveQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommApproveQuery
		
	#region PgThesisCommMemberFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisCommMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommMemberFilters : PgThesisCommMemberFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommMemberFilters class.
		/// </summary>
		public PgThesisCommMemberFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommMemberFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommMemberFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommMemberFilters
	
	#region PgThesisCommMemberQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisCommMemberParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisCommMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommMemberQuery : PgThesisCommMemberParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommMemberQuery class.
		/// </summary>
		public PgThesisCommMemberQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommMemberQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommMemberQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommMemberQuery
		
	#region RsrchStudPostponeReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="RsrchStudPostponeReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchStudPostponeReqFilters : RsrchStudPostponeReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchStudPostponeReqFilters class.
		/// </summary>
		public RsrchStudPostponeReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudPostponeReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchStudPostponeReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudPostponeReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchStudPostponeReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchStudPostponeReqFilters
	
	#region RsrchStudPostponeReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="RsrchStudPostponeReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="RsrchStudPostponeReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class RsrchStudPostponeReqQuery : RsrchStudPostponeReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the RsrchStudPostponeReqQuery class.
		/// </summary>
		public RsrchStudPostponeReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudPostponeReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public RsrchStudPostponeReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the RsrchStudPostponeReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public RsrchStudPostponeReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion RsrchStudPostponeReqQuery
		
	#region PgSubjectDefinitionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgSubjectDefinition"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgSubjectDefinitionFilters : PgSubjectDefinitionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgSubjectDefinitionFilters class.
		/// </summary>
		public PgSubjectDefinitionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgSubjectDefinitionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgSubjectDefinitionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgSubjectDefinitionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgSubjectDefinitionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgSubjectDefinitionFilters
	
	#region PgSubjectDefinitionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgSubjectDefinitionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgSubjectDefinition"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgSubjectDefinitionQuery : PgSubjectDefinitionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgSubjectDefinitionQuery class.
		/// </summary>
		public PgSubjectDefinitionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgSubjectDefinitionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgSubjectDefinitionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgSubjectDefinitionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgSubjectDefinitionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgSubjectDefinitionQuery
		
	#region PgStudTravelFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgStudTravel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudTravelFilters : PgStudTravelFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudTravelFilters class.
		/// </summary>
		public PgStudTravelFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudTravelFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudTravelFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudTravelFilters
	
	#region PgStudTravelQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgStudTravelParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgStudTravel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudTravelQuery : PgStudTravelParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudTravelQuery class.
		/// </summary>
		public PgStudTravelQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudTravelQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudTravelQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudTravelQuery
		
	#region PgStudTravelExtendFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgStudTravelExtend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudTravelExtendFilters : PgStudTravelExtendFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudTravelExtendFilters class.
		/// </summary>
		public PgStudTravelExtendFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelExtendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudTravelExtendFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelExtendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudTravelExtendFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudTravelExtendFilters
	
	#region PgStudTravelExtendQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgStudTravelExtendParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgStudTravelExtend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudTravelExtendQuery : PgStudTravelExtendParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudTravelExtendQuery class.
		/// </summary>
		public PgStudTravelExtendQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelExtendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudTravelExtendQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudTravelExtendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudTravelExtendQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudTravelExtendQuery
		
	#region PgCodeSupervisorChgRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgCodeSupervisorChgRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCodeSupervisorChgRsnFilters : PgCodeSupervisorChgRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCodeSupervisorChgRsnFilters class.
		/// </summary>
		public PgCodeSupervisorChgRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCodeSupervisorChgRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCodeSupervisorChgRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCodeSupervisorChgRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCodeSupervisorChgRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCodeSupervisorChgRsnFilters
	
	#region PgCodeSupervisorChgRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgCodeSupervisorChgRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgCodeSupervisorChgRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgCodeSupervisorChgRsnQuery : PgCodeSupervisorChgRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgCodeSupervisorChgRsnQuery class.
		/// </summary>
		public PgCodeSupervisorChgRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgCodeSupervisorChgRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgCodeSupervisorChgRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgCodeSupervisorChgRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgCodeSupervisorChgRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgCodeSupervisorChgRsnQuery
		
	#region PgExtMemberFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgExtMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgExtMemberFilters : PgExtMemberFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgExtMemberFilters class.
		/// </summary>
		public PgExtMemberFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgExtMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgExtMemberFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgExtMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgExtMemberFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgExtMemberFilters
	
	#region PgExtMemberQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgExtMemberParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgExtMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgExtMemberQuery : PgExtMemberParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgExtMemberQuery class.
		/// </summary>
		public PgExtMemberQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgExtMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgExtMemberQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgExtMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgExtMemberQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgExtMemberQuery
		
	#region PgStfRoleDegFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgStfRoleDeg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStfRoleDegFilters : PgStfRoleDegFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStfRoleDegFilters class.
		/// </summary>
		public PgStfRoleDegFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStfRoleDegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStfRoleDegFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStfRoleDegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStfRoleDegFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStfRoleDegFilters
	
	#region PgStfRoleDegQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgStfRoleDegParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgStfRoleDeg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStfRoleDegQuery : PgStfRoleDegParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStfRoleDegQuery class.
		/// </summary>
		public PgStfRoleDegQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStfRoleDegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStfRoleDegQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStfRoleDegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStfRoleDegQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStfRoleDegQuery
		
	#region PgStudConferenceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgStudConference"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudConferenceFilters : PgStudConferenceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudConferenceFilters class.
		/// </summary>
		public PgStudConferenceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudConferenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudConferenceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudConferenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudConferenceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudConferenceFilters
	
	#region PgStudConferenceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgStudConferenceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgStudConference"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudConferenceQuery : PgStudConferenceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudConferenceQuery class.
		/// </summary>
		public PgStudConferenceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudConferenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudConferenceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudConferenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudConferenceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudConferenceQuery
		
	#region PgStudPublishFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgStudPublish"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudPublishFilters : PgStudPublishFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudPublishFilters class.
		/// </summary>
		public PgStudPublishFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudPublishFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudPublishFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudPublishFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudPublishFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudPublishFilters
	
	#region PgStudPublishQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgStudPublishParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgStudPublish"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgStudPublishQuery : PgStudPublishParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgStudPublishQuery class.
		/// </summary>
		public PgStudPublishQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgStudPublishQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgStudPublishQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgStudPublishQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgStudPublishQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgStudPublishQuery
		
	#region PgThesisCommRecommendFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisCommRecommend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommRecommendFilters : PgThesisCommRecommendFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRecommendFilters class.
		/// </summary>
		public PgThesisCommRecommendFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRecommendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommRecommendFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRecommendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommRecommendFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommRecommendFilters
	
	#region PgThesisCommRecommendQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisCommRecommendParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisCommRecommend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommRecommendQuery : PgThesisCommRecommendParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRecommendQuery class.
		/// </summary>
		public PgThesisCommRecommendQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRecommendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommRecommendQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRecommendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommRecommendQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommRecommendQuery
		
	#region PgThesisCommRptFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisCommRpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommRptFilters : PgThesisCommRptFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRptFilters class.
		/// </summary>
		public PgThesisCommRptFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommRptFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommRptFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommRptFilters
	
	#region PgThesisCommRptQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisCommRptParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisCommRpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisCommRptQuery : PgThesisCommRptParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRptQuery class.
		/// </summary>
		public PgThesisCommRptQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisCommRptQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisCommRptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisCommRptQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisCommRptQuery
		
	#region PgThesisDiscussionDateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisDiscussionDate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisDiscussionDateFilters : PgThesisDiscussionDateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisDiscussionDateFilters class.
		/// </summary>
		public PgThesisDiscussionDateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDiscussionDateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisDiscussionDateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDiscussionDateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisDiscussionDateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisDiscussionDateFilters
	
	#region PgThesisDiscussionDateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisDiscussionDateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisDiscussionDate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisDiscussionDateQuery : PgThesisDiscussionDateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisDiscussionDateQuery class.
		/// </summary>
		public PgThesisDiscussionDateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDiscussionDateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisDiscussionDateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisDiscussionDateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisDiscussionDateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisDiscussionDateQuery
		
	#region PgThesisGrantDegreeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisGrantDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisGrantDegreeFilters : PgThesisGrantDegreeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantDegreeFilters class.
		/// </summary>
		public PgThesisGrantDegreeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisGrantDegreeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisGrantDegreeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisGrantDegreeFilters
	
	#region PgThesisGrantDegreeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisGrantDegreeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisGrantDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisGrantDegreeQuery : PgThesisGrantDegreeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantDegreeQuery class.
		/// </summary>
		public PgThesisGrantDegreeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisGrantDegreeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisGrantDegreeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisGrantDegreeQuery
		
	#region PgThesisStaffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStaffFilters : PgThesisStaffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStaffFilters class.
		/// </summary>
		public PgThesisStaffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStaffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStaffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStaffFilters
	
	#region PgThesisStaffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisStaffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStaffQuery : PgThesisStaffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStaffQuery class.
		/// </summary>
		public PgThesisStaffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStaffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStaffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStaffQuery
		
	#region PgThesisSeminarFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisSeminar"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSeminarFilters : PgThesisSeminarFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarFilters class.
		/// </summary>
		public PgThesisSeminarFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSeminarFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSeminarFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSeminarFilters
	
	#region PgThesisSeminarQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisSeminarParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisSeminar"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSeminarQuery : PgThesisSeminarParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarQuery class.
		/// </summary>
		public PgThesisSeminarQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSeminarQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSeminarQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSeminarQuery
		
	#region PgThesisNoteFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisNote"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisNoteFilters : PgThesisNoteFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisNoteFilters class.
		/// </summary>
		public PgThesisNoteFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisNoteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisNoteFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisNoteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisNoteFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisNoteFilters
	
	#region PgThesisNoteQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisNoteParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisNote"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisNoteQuery : PgThesisNoteParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisNoteQuery class.
		/// </summary>
		public PgThesisNoteQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisNoteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisNoteQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisNoteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisNoteQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisNoteQuery
		
	#region GsMilitaryOfficeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsMilitaryOffice"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsMilitaryOfficeFilters : GsMilitaryOfficeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsMilitaryOfficeFilters class.
		/// </summary>
		public GsMilitaryOfficeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryOfficeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsMilitaryOfficeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryOfficeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsMilitaryOfficeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsMilitaryOfficeFilters
	
	#region GsMilitaryOfficeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsMilitaryOfficeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsMilitaryOffice"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsMilitaryOfficeQuery : GsMilitaryOfficeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsMilitaryOfficeQuery class.
		/// </summary>
		public GsMilitaryOfficeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryOfficeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsMilitaryOfficeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsMilitaryOfficeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsMilitaryOfficeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsMilitaryOfficeQuery
		
	#region PgThesisStudExtendFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisStudExtend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudExtendFilters : PgThesisStudExtendFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudExtendFilters class.
		/// </summary>
		public PgThesisStudExtendFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudExtendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudExtendFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudExtendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudExtendFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudExtendFilters
	
	#region PgThesisStudExtendQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisStudExtendParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisStudExtend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudExtendQuery : PgThesisStudExtendParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudExtendQuery class.
		/// </summary>
		public PgThesisStudExtendQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudExtendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudExtendQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudExtendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudExtendQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudExtendQuery
		
	#region PgThesisSupervisorCommApproveFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisSupervisorCommApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSupervisorCommApproveFilters : PgThesisSupervisorCommApproveFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommApproveFilters class.
		/// </summary>
		public PgThesisSupervisorCommApproveFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSupervisorCommApproveFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSupervisorCommApproveFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSupervisorCommApproveFilters
	
	#region PgThesisSupervisorCommApproveQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisSupervisorCommApproveParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisSupervisorCommApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSupervisorCommApproveQuery : PgThesisSupervisorCommApproveParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommApproveQuery class.
		/// </summary>
		public PgThesisSupervisorCommApproveQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSupervisorCommApproveQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSupervisorCommApproveQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSupervisorCommApproveQuery
		
	#region PgThesisValidityRptFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisValidityRpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisValidityRptFilters : PgThesisValidityRptFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisValidityRptFilters class.
		/// </summary>
		public PgThesisValidityRptFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisValidityRptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisValidityRptFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisValidityRptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisValidityRptFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisValidityRptFilters
	
	#region PgThesisValidityRptQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisValidityRptParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisValidityRpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisValidityRptQuery : PgThesisValidityRptParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisValidityRptQuery class.
		/// </summary>
		public PgThesisValidityRptQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisValidityRptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisValidityRptQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisValidityRptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisValidityRptQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisValidityRptQuery
		
	#region PgThesisStudRsrchStrtgyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisStudRsrchStrtgy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudRsrchStrtgyFilters : PgThesisStudRsrchStrtgyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudRsrchStrtgyFilters class.
		/// </summary>
		public PgThesisStudRsrchStrtgyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudRsrchStrtgyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudRsrchStrtgyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudRsrchStrtgyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudRsrchStrtgyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudRsrchStrtgyFilters
	
	#region PgThesisStudRsrchStrtgyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisStudRsrchStrtgyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisStudRsrchStrtgy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudRsrchStrtgyQuery : PgThesisStudRsrchStrtgyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudRsrchStrtgyQuery class.
		/// </summary>
		public PgThesisStudRsrchStrtgyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudRsrchStrtgyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudRsrchStrtgyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudRsrchStrtgyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudRsrchStrtgyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudRsrchStrtgyQuery
		
	#region PgThesisSupervisorRptFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisSupervisorRpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSupervisorRptFilters : PgThesisSupervisorRptFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptFilters class.
		/// </summary>
		public PgThesisSupervisorRptFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSupervisorRptFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSupervisorRptFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSupervisorRptFilters
	
	#region PgThesisSupervisorRptQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisSupervisorRptParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisSupervisorRpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSupervisorRptQuery : PgThesisSupervisorRptParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptQuery class.
		/// </summary>
		public PgThesisSupervisorRptQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSupervisorRptQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSupervisorRptQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSupervisorRptQuery
		
	#region PgThesisSupervisorCommFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisSupervisorComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSupervisorCommFilters : PgThesisSupervisorCommFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommFilters class.
		/// </summary>
		public PgThesisSupervisorCommFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSupervisorCommFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSupervisorCommFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSupervisorCommFilters
	
	#region PgThesisSupervisorCommQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisSupervisorCommParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisSupervisorComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisSupervisorCommQuery : PgThesisSupervisorCommParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommQuery class.
		/// </summary>
		public PgThesisSupervisorCommQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisSupervisorCommQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisSupervisorCommQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisSupervisorCommQuery
		
	#region PgThesisStudTopicFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisStudTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudTopicFilters : PgThesisStudTopicFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudTopicFilters class.
		/// </summary>
		public PgThesisStudTopicFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudTopicFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudTopicFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudTopicFilters
	
	#region PgThesisStudTopicQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisStudTopicParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisStudTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudTopicQuery : PgThesisStudTopicParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudTopicQuery class.
		/// </summary>
		public PgThesisStudTopicQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudTopicQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudTopicQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudTopicQuery
		
	#region PgThesisGrantStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisGrantStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisGrantStudFilters : PgThesisGrantStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantStudFilters class.
		/// </summary>
		public PgThesisGrantStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisGrantStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisGrantStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisGrantStudFilters
	
	#region PgThesisGrantStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisGrantStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisGrantStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisGrantStudQuery : PgThesisGrantStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantStudQuery class.
		/// </summary>
		public PgThesisGrantStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisGrantStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisGrantStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisGrantStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisGrantStudQuery
		
	#region PgAttchdDocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgAttchdDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgAttchdDocFilters : PgAttchdDocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgAttchdDocFilters class.
		/// </summary>
		public PgAttchdDocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgAttchdDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgAttchdDocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgAttchdDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgAttchdDocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgAttchdDocFilters
	
	#region PgAttchdDocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgAttchdDocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgAttchdDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgAttchdDocQuery : PgAttchdDocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgAttchdDocQuery class.
		/// </summary>
		public PgAttchdDocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgAttchdDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgAttchdDocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgAttchdDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgAttchdDocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgAttchdDocQuery
		
	#region PgThesisStudApproveFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="PgThesisStudApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudApproveFilters : PgThesisStudApproveFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudApproveFilters class.
		/// </summary>
		public PgThesisStudApproveFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudApproveFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudApproveFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudApproveFilters
	
	#region PgThesisStudApproveQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="PgThesisStudApproveParameterBuilder"/> class
	/// that is used exclusively with a <see cref="PgThesisStudApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class PgThesisStudApproveQuery : PgThesisStudApproveParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the PgThesisStudApproveQuery class.
		/// </summary>
		public PgThesisStudApproveQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public PgThesisStudApproveQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the PgThesisStudApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public PgThesisStudApproveQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion PgThesisStudApproveQuery
		
	#region GsCourseElectTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCourseElectType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCourseElectTypeFilters : GsCourseElectTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCourseElectTypeFilters class.
		/// </summary>
		public GsCourseElectTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCourseElectTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCourseElectTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCourseElectTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCourseElectTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCourseElectTypeFilters
	
	#region GsCourseElectTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCourseElectTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCourseElectType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCourseElectTypeQuery : GsCourseElectTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCourseElectTypeQuery class.
		/// </summary>
		public GsCourseElectTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCourseElectTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCourseElectTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCourseElectTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCourseElectTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCourseElectTypeQuery
		
	#region GsCdeDocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeDocFilters : GsCdeDocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeDocFilters class.
		/// </summary>
		public GsCdeDocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeDocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeDocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeDocFilters
	
	#region GsCdeDocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeDocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeDocQuery : GsCdeDocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeDocQuery class.
		/// </summary>
		public GsCdeDocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeDocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeDocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeDocQuery
		
	#region GsCdeActvtyTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeActvtyType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeActvtyTypeFilters : GsCdeActvtyTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyTypeFilters class.
		/// </summary>
		public GsCdeActvtyTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeActvtyTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeActvtyTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeActvtyTypeFilters
	
	#region GsCdeActvtyTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeActvtyTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeActvtyType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeActvtyTypeQuery : GsCdeActvtyTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyTypeQuery class.
		/// </summary>
		public GsCdeActvtyTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeActvtyTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeActvtyTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeActvtyTypeQuery
		
	#region FeeUserFundReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeUserFundReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeUserFundReqFilters : FeeUserFundReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqFilters class.
		/// </summary>
		public FeeUserFundReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeUserFundReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeUserFundReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeUserFundReqFilters
	
	#region FeeUserFundReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeUserFundReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeUserFundReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeUserFundReqQuery : FeeUserFundReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqQuery class.
		/// </summary>
		public FeeUserFundReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeUserFundReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeUserFundReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeUserFundReqQuery
		
	#region FeeUserBondReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeUserBondReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeUserBondReqFilters : FeeUserBondReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqFilters class.
		/// </summary>
		public FeeUserBondReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeUserBondReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeUserBondReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeUserBondReqFilters
	
	#region FeeUserBondReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeUserBondReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeUserBondReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeUserBondReqQuery : FeeUserBondReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqQuery class.
		/// </summary>
		public FeeUserBondReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeUserBondReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeUserBondReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeUserBondReqQuery
		
	#region FeeTreasuryReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeTreasuryReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeTreasuryReqFilters : FeeTreasuryReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryReqFilters class.
		/// </summary>
		public FeeTreasuryReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeTreasuryReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeTreasuryReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeTreasuryReqFilters
	
	#region FeeTreasuryReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeTreasuryReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeTreasuryReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeTreasuryReqQuery : FeeTreasuryReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryReqQuery class.
		/// </summary>
		public FeeTreasuryReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeTreasuryReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeTreasuryReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeTreasuryReqQuery
		
	#region FeeTreasuryItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeTreasuryItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeTreasuryItemFilters : FeeTreasuryItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryItemFilters class.
		/// </summary>
		public FeeTreasuryItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeTreasuryItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeTreasuryItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeTreasuryItemFilters
	
	#region FeeTreasuryItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeTreasuryItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeTreasuryItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeTreasuryItemQuery : FeeTreasuryItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryItemQuery class.
		/// </summary>
		public FeeTreasuryItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeTreasuryItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeTreasuryItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeTreasuryItemQuery
		
	#region FeeYearPrdBankFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeYearPrdBank"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeYearPrdBankFilters : FeeYearPrdBankFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeYearPrdBankFilters class.
		/// </summary>
		public FeeYearPrdBankFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeYearPrdBankFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeYearPrdBankFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeYearPrdBankFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeYearPrdBankFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeYearPrdBankFilters
	
	#region FeeYearPrdBankQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeYearPrdBankParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeYearPrdBank"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeYearPrdBankQuery : FeeYearPrdBankParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeYearPrdBankQuery class.
		/// </summary>
		public FeeYearPrdBankQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeYearPrdBankQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeYearPrdBankQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeYearPrdBankQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeYearPrdBankQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeYearPrdBankQuery
		
	#region GsAgendaHolidayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsAgendaHoliday"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsAgendaHolidayFilters : GsAgendaHolidayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsAgendaHolidayFilters class.
		/// </summary>
		public GsAgendaHolidayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsAgendaHolidayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsAgendaHolidayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsAgendaHolidayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsAgendaHolidayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsAgendaHolidayFilters
	
	#region GsAgendaHolidayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsAgendaHolidayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsAgendaHoliday"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsAgendaHolidayQuery : GsAgendaHolidayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsAgendaHolidayQuery class.
		/// </summary>
		public GsAgendaHolidayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsAgendaHolidayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsAgendaHolidayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsAgendaHolidayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsAgendaHolidayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsAgendaHolidayQuery
		
	#region GsCdeActvtyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeActvty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeActvtyFilters : GsCdeActvtyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyFilters class.
		/// </summary>
		public GsCdeActvtyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeActvtyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeActvtyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeActvtyFilters
	
	#region GsCdeActvtyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeActvtyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeActvty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeActvtyQuery : GsCdeActvtyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyQuery class.
		/// </summary>
		public GsCdeActvtyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeActvtyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeActvtyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeActvtyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeActvtyQuery
		
	#region GsCdeClrncReasonFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeClrncReason"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeClrncReasonFilters : GsCdeClrncReasonFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncReasonFilters class.
		/// </summary>
		public GsCdeClrncReasonFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncReasonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeClrncReasonFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncReasonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeClrncReasonFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeClrncReasonFilters
	
	#region GsCdeClrncReasonQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeClrncReasonParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeClrncReason"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeClrncReasonQuery : GsCdeClrncReasonParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncReasonQuery class.
		/// </summary>
		public GsCdeClrncReasonQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncReasonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeClrncReasonQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncReasonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeClrncReasonQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeClrncReasonQuery
		
	#region GsCdeClrncItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeClrncItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeClrncItemFilters : GsCdeClrncItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFilters class.
		/// </summary>
		public GsCdeClrncItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeClrncItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeClrncItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeClrncItemFilters
	
	#region GsCdeClrncItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeClrncItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeClrncItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeClrncItemQuery : GsCdeClrncItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemQuery class.
		/// </summary>
		public GsCdeClrncItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeClrncItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeClrncItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeClrncItemQuery
		
	#region GsCdeCampusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeCampus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeCampusFilters : GsCdeCampusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeCampusFilters class.
		/// </summary>
		public GsCdeCampusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeCampusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeCampusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeCampusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeCampusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeCampusFilters
	
	#region GsCdeCampusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeCampusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeCampus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeCampusQuery : GsCdeCampusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeCampusQuery class.
		/// </summary>
		public GsCdeCampusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeCampusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeCampusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeCampusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeCampusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeCampusQuery
		
	#region GsCdeBloodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeBlood"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeBloodFilters : GsCdeBloodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeBloodFilters class.
		/// </summary>
		public GsCdeBloodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeBloodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeBloodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeBloodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeBloodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeBloodFilters
	
	#region GsCdeBloodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeBloodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeBlood"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeBloodQuery : GsCdeBloodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeBloodQuery class.
		/// </summary>
		public GsCdeBloodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeBloodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeBloodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeBloodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeBloodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeBloodQuery
		
	#region GsCountryNodeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCountryNode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCountryNodeFilters : GsCountryNodeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCountryNodeFilters class.
		/// </summary>
		public GsCountryNodeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCountryNodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCountryNodeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCountryNodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCountryNodeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCountryNodeFilters
	
	#region GsCountryNodeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCountryNodeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCountryNode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCountryNodeQuery : GsCountryNodeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCountryNodeQuery class.
		/// </summary>
		public GsCountryNodeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCountryNodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCountryNodeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCountryNodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCountryNodeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCountryNodeQuery
		
	#region GsApprovalHFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsApprovalH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsApprovalHFilters : GsApprovalHFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsApprovalHFilters class.
		/// </summary>
		public GsApprovalHFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsApprovalHFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsApprovalHFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsApprovalHFilters
	
	#region GsApprovalHQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsApprovalHParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsApprovalH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsApprovalHQuery : GsApprovalHParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsApprovalHQuery class.
		/// </summary>
		public GsApprovalHQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsApprovalHQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsApprovalHQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsApprovalHQuery
		
	#region FeeRefundCodeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeRefundCode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefundCodeFilters : FeeRefundCodeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeFilters class.
		/// </summary>
		public FeeRefundCodeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefundCodeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefundCodeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefundCodeFilters
	
	#region FeeRefundCodeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeRefundCodeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeRefundCode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefundCodeQuery : FeeRefundCodeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeQuery class.
		/// </summary>
		public FeeRefundCodeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefundCodeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefundCodeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefundCodeQuery
		
	#region GsAttchdDocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsAttchdDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsAttchdDocFilters : GsAttchdDocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsAttchdDocFilters class.
		/// </summary>
		public GsAttchdDocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsAttchdDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsAttchdDocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsAttchdDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsAttchdDocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsAttchdDocFilters
	
	#region GsAttchdDocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsAttchdDocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsAttchdDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsAttchdDocQuery : GsAttchdDocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsAttchdDocQuery class.
		/// </summary>
		public GsAttchdDocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsAttchdDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsAttchdDocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsAttchdDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsAttchdDocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsAttchdDocQuery
		
	#region GsApprovalDFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsApprovalD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsApprovalDFilters : GsApprovalDFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsApprovalDFilters class.
		/// </summary>
		public GsApprovalDFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsApprovalDFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsApprovalDFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsApprovalDFilters
	
	#region GsApprovalDQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsApprovalDParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsApprovalD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsApprovalDQuery : GsApprovalDParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsApprovalDQuery class.
		/// </summary>
		public GsApprovalDQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsApprovalDQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsApprovalDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsApprovalDQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsApprovalDQuery
		
	#region FeeStudDiscContinueFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscContinue"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscContinueFilters : FeeStudDiscContinueFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscContinueFilters class.
		/// </summary>
		public FeeStudDiscContinueFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscContinueFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscContinueFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscContinueFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscContinueFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscContinueFilters
	
	#region FeeStudDiscContinueQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudDiscContinueParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscContinue"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscContinueQuery : FeeStudDiscContinueParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscContinueQuery class.
		/// </summary>
		public FeeStudDiscContinueQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscContinueQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscContinueQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscContinueQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscContinueQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscContinueQuery
		
	#region FeeSemesterAgendaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeSemesterAgenda"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeSemesterAgendaFilters : FeeSemesterAgendaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaFilters class.
		/// </summary>
		public FeeSemesterAgendaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeSemesterAgendaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeSemesterAgendaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeSemesterAgendaFilters
	
	#region FeeSemesterAgendaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeSemesterAgendaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeSemesterAgenda"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeSemesterAgendaQuery : FeeSemesterAgendaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaQuery class.
		/// </summary>
		public FeeSemesterAgendaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeSemesterAgendaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeSemesterAgendaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeSemesterAgendaQuery
		
	#region FeeRefundCodeDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeRefundCodeDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefundCodeDtlFilters : FeeRefundCodeDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlFilters class.
		/// </summary>
		public FeeRefundCodeDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefundCodeDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefundCodeDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefundCodeDtlFilters
	
	#region FeeRefundCodeDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeRefundCodeDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeRefundCodeDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefundCodeDtlQuery : FeeRefundCodeDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlQuery class.
		/// </summary>
		public FeeRefundCodeDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefundCodeDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefundCodeDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefundCodeDtlQuery
		
	#region FeeVoucherInvocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeVoucherInvoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeVoucherInvocFilters : FeeVoucherInvocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeVoucherInvocFilters class.
		/// </summary>
		public FeeVoucherInvocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeVoucherInvocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeVoucherInvocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeVoucherInvocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeVoucherInvocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeVoucherInvocFilters
	
	#region FeeVoucherInvocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeVoucherInvocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeVoucherInvoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeVoucherInvocQuery : FeeVoucherInvocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeVoucherInvocQuery class.
		/// </summary>
		public FeeVoucherInvocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeVoucherInvocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeVoucherInvocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeVoucherInvocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeVoucherInvocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeVoucherInvocQuery
		
	#region GsAddressDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsAddressDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsAddressDtlFilters : GsAddressDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsAddressDtlFilters class.
		/// </summary>
		public GsAddressDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsAddressDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsAddressDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsAddressDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsAddressDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsAddressDtlFilters
	
	#region GsAddressDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsAddressDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsAddressDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsAddressDtlQuery : GsAddressDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsAddressDtlQuery class.
		/// </summary>
		public GsAddressDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsAddressDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsAddressDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsAddressDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsAddressDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsAddressDtlQuery
		
	#region FeeRefndStdReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeRefndStdReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefndStdReqFilters : FeeRefndStdReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqFilters class.
		/// </summary>
		public FeeRefndStdReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefndStdReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefndStdReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefndStdReqFilters
	
	#region FeeRefndStdReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeRefndStdReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeRefndStdReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefndStdReqQuery : FeeRefndStdReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqQuery class.
		/// </summary>
		public FeeRefndStdReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefndStdReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefndStdReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefndStdReqQuery
		
	#region GsCdeHonorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeHonorFilters : GsCdeHonorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeHonorFilters class.
		/// </summary>
		public GsCdeHonorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeHonorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeHonorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeHonorFilters
	
	#region GsCdeHonorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeHonorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeHonorQuery : GsCdeHonorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeHonorQuery class.
		/// </summary>
		public GsCdeHonorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeHonorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeHonorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeHonorQuery
		
	#region GsCdeApprovalPnltyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeApprovalPnlty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeApprovalPnltyFilters : GsCdeApprovalPnltyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeApprovalPnltyFilters class.
		/// </summary>
		public GsCdeApprovalPnltyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeApprovalPnltyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeApprovalPnltyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeApprovalPnltyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeApprovalPnltyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeApprovalPnltyFilters
	
	#region GsCdeApprovalPnltyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeApprovalPnltyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeApprovalPnlty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeApprovalPnltyQuery : GsCdeApprovalPnltyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeApprovalPnltyQuery class.
		/// </summary>
		public GsCdeApprovalPnltyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeApprovalPnltyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeApprovalPnltyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeApprovalPnltyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeApprovalPnltyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeApprovalPnltyQuery
		
	#region FeeItemSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeItemSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeItemSemesterFilters : FeeItemSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeItemSemesterFilters class.
		/// </summary>
		public FeeItemSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeItemSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeItemSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeItemSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeItemSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeItemSemesterFilters
	
	#region FeeItemSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeItemSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeItemSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeItemSemesterQuery : FeeItemSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeItemSemesterQuery class.
		/// </summary>
		public FeeItemSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeItemSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeItemSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeItemSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeItemSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeItemSemesterQuery
		
	#region GsCdeFacultyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeFacultyFilters : GsCdeFacultyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeFacultyFilters class.
		/// </summary>
		public GsCdeFacultyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeFacultyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeFacultyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeFacultyFilters
	
	#region GsCdeFacultyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeFacultyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeFacultyQuery : GsCdeFacultyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeFacultyQuery class.
		/// </summary>
		public GsCdeFacultyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeFacultyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeFacultyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeFacultyQuery
		
	#region GsCdeClrncItemFacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeClrncItemFac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeClrncItemFacFilters : GsCdeClrncItemFacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFacFilters class.
		/// </summary>
		public GsCdeClrncItemFacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeClrncItemFacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeClrncItemFacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeClrncItemFacFilters
	
	#region GsCdeClrncItemFacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeClrncItemFacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeClrncItemFac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeClrncItemFacQuery : GsCdeClrncItemFacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFacQuery class.
		/// </summary>
		public GsCdeClrncItemFacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeClrncItemFacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeClrncItemFacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeClrncItemFacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeClrncItemFacQuery
		
	#region FeeRefndStdDetFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeRefndStdDet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefndStdDetFilters : FeeRefndStdDetFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetFilters class.
		/// </summary>
		public FeeRefndStdDetFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefndStdDetFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefndStdDetFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefndStdDetFilters
	
	#region FeeRefndStdDetQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeRefndStdDetParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeRefndStdDet"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeRefndStdDetQuery : FeeRefndStdDetParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetQuery class.
		/// </summary>
		public FeeRefndStdDetQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeRefndStdDetQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeRefndStdDetQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeRefndStdDetQuery
		
	#region FeeItemTrnsBlncFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeItemTrnsBlnc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeItemTrnsBlncFilters : FeeItemTrnsBlncFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeItemTrnsBlncFilters class.
		/// </summary>
		public FeeItemTrnsBlncFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeItemTrnsBlncFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeItemTrnsBlncFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeItemTrnsBlncFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeItemTrnsBlncFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeItemTrnsBlncFilters
	
	#region FeeItemTrnsBlncQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeItemTrnsBlncParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeItemTrnsBlnc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeItemTrnsBlncQuery : FeeItemTrnsBlncParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeItemTrnsBlncQuery class.
		/// </summary>
		public FeeItemTrnsBlncQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeItemTrnsBlncQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeItemTrnsBlncQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeItemTrnsBlncQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeItemTrnsBlncQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeItemTrnsBlncQuery
		
	#region FeeStudAllowanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudAllowance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudAllowanceFilters : FeeStudAllowanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudAllowanceFilters class.
		/// </summary>
		public FeeStudAllowanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudAllowanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudAllowanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudAllowanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudAllowanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudAllowanceFilters
	
	#region FeeStudAllowanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudAllowanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudAllowance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudAllowanceQuery : FeeStudAllowanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudAllowanceQuery class.
		/// </summary>
		public FeeStudAllowanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudAllowanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudAllowanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudAllowanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudAllowanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudAllowanceQuery
		
	#region FeeLimitRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeLimitRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeLimitRuleFilters : FeeLimitRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeLimitRuleFilters class.
		/// </summary>
		public FeeLimitRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeLimitRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeLimitRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeLimitRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeLimitRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeLimitRuleFilters
	
	#region FeeLimitRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeLimitRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeLimitRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeLimitRuleQuery : FeeLimitRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeLimitRuleQuery class.
		/// </summary>
		public FeeLimitRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeLimitRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeLimitRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeLimitRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeLimitRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeLimitRuleQuery
		
	#region FeeStudInstallmentRequestFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudInstallmentRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudInstallmentRequestFilters : FeeStudInstallmentRequestFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentRequestFilters class.
		/// </summary>
		public FeeStudInstallmentRequestFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudInstallmentRequestFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudInstallmentRequestFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudInstallmentRequestFilters
	
	#region FeeStudInstallmentRequestQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudInstallmentRequestParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudInstallmentRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudInstallmentRequestQuery : FeeStudInstallmentRequestParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentRequestQuery class.
		/// </summary>
		public FeeStudInstallmentRequestQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudInstallmentRequestQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudInstallmentRequestQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudInstallmentRequestQuery
		
	#region FeeStudBankFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudBank"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudBankFilters : FeeStudBankFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudBankFilters class.
		/// </summary>
		public FeeStudBankFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudBankFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudBankFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudBankFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudBankFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudBankFilters
	
	#region FeeStudBankQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudBankParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudBank"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudBankQuery : FeeStudBankParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudBankQuery class.
		/// </summary>
		public FeeStudBankQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudBankQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudBankQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudBankQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudBankQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudBankQuery
		
	#region FeeStudInstallmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudInstallment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudInstallmentFilters : FeeStudInstallmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentFilters class.
		/// </summary>
		public FeeStudInstallmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudInstallmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudInstallmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudInstallmentFilters
	
	#region FeeStudInstallmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudInstallmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudInstallment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudInstallmentQuery : FeeStudInstallmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentQuery class.
		/// </summary>
		public FeeStudInstallmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudInstallmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudInstallmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudInstallmentQuery
		
	#region FeeStudItemCnclFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudItemCncl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudItemCnclFilters : FeeStudItemCnclFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudItemCnclFilters class.
		/// </summary>
		public FeeStudItemCnclFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudItemCnclFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudItemCnclFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudItemCnclFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudItemCnclFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudItemCnclFilters
	
	#region FeeStudItemCnclQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudItemCnclParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudItemCncl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudItemCnclQuery : FeeStudItemCnclParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudItemCnclQuery class.
		/// </summary>
		public FeeStudItemCnclQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudItemCnclQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudItemCnclQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudItemCnclQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudItemCnclQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudItemCnclQuery
		
	#region FeeStudFundFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudFund"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudFundFilters : FeeStudFundFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudFundFilters class.
		/// </summary>
		public FeeStudFundFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFundFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudFundFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFundFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudFundFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudFundFilters
	
	#region FeeStudFundQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudFundParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudFund"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudFundQuery : FeeStudFundParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudFundQuery class.
		/// </summary>
		public FeeStudFundQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFundQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudFundQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFundQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudFundQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudFundQuery
		
	#region FeeStudFeeItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudFeeItemFilters : FeeStudFeeItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemFilters class.
		/// </summary>
		public FeeStudFeeItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudFeeItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudFeeItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudFeeItemFilters
	
	#region FeeStudFeeItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudFeeItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudFeeItemQuery : FeeStudFeeItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemQuery class.
		/// </summary>
		public FeeStudFeeItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudFeeItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudFeeItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudFeeItemQuery
		
	#region FeeStudDiscFeeItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscFeeItemFilters : FeeStudDiscFeeItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFeeItemFilters class.
		/// </summary>
		public FeeStudDiscFeeItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscFeeItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscFeeItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscFeeItemFilters
	
	#region FeeStudDiscFeeItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudDiscFeeItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscFeeItemQuery : FeeStudDiscFeeItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFeeItemQuery class.
		/// </summary>
		public FeeStudDiscFeeItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscFeeItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscFeeItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscFeeItemQuery
		
	#region FeeStudNatSimilarityRequestFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudNatSimilarityRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudNatSimilarityRequestFilters : FeeStudNatSimilarityRequestFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudNatSimilarityRequestFilters class.
		/// </summary>
		public FeeStudNatSimilarityRequestFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudNatSimilarityRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudNatSimilarityRequestFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudNatSimilarityRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudNatSimilarityRequestFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudNatSimilarityRequestFilters
	
	#region FeeStudNatSimilarityRequestQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudNatSimilarityRequestParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudNatSimilarityRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudNatSimilarityRequestQuery : FeeStudNatSimilarityRequestParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudNatSimilarityRequestQuery class.
		/// </summary>
		public FeeStudNatSimilarityRequestQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudNatSimilarityRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudNatSimilarityRequestQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudNatSimilarityRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudNatSimilarityRequestQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudNatSimilarityRequestQuery
		
	#region FeeStudDiscSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscSemesterFilters : FeeStudDiscSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscSemesterFilters class.
		/// </summary>
		public FeeStudDiscSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscSemesterFilters
	
	#region FeeStudDiscSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudDiscSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscSemesterQuery : FeeStudDiscSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscSemesterQuery class.
		/// </summary>
		public FeeStudDiscSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscSemesterQuery
		
	#region FeeStudPayPostponeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudPayPostpone"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudPayPostponeFilters : FeeStudPayPostponeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudPayPostponeFilters class.
		/// </summary>
		public FeeStudPayPostponeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudPayPostponeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudPayPostponeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudPayPostponeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudPayPostponeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudPayPostponeFilters
	
	#region FeeStudPayPostponeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudPayPostponeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudPayPostpone"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudPayPostponeQuery : FeeStudPayPostponeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudPayPostponeQuery class.
		/// </summary>
		public FeeStudPayPostponeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudPayPostponeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudPayPostponeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudPayPostponeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudPayPostponeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudPayPostponeQuery
		
	#region FeeStudDiscFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudDisc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscFilters : FeeStudDiscFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFilters class.
		/// </summary>
		public FeeStudDiscFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscFilters
	
	#region FeeStudDiscQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudDiscParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudDisc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscQuery : FeeStudDiscParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscQuery class.
		/// </summary>
		public FeeStudDiscQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscQuery
		
	#region FeeStudVoucherFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucher"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherFilters : FeeStudVoucherFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherFilters class.
		/// </summary>
		public FeeStudVoucherFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherFilters
	
	#region FeeStudVoucherQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudVoucherParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucher"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherQuery : FeeStudVoucherParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherQuery class.
		/// </summary>
		public FeeStudVoucherQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherQuery
		
	#region FeeStudCoursesItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudCoursesItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudCoursesItemFilters : FeeStudCoursesItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudCoursesItemFilters class.
		/// </summary>
		public FeeStudCoursesItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudCoursesItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudCoursesItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudCoursesItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudCoursesItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudCoursesItemFilters
	
	#region FeeStudCoursesItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudCoursesItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudCoursesItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudCoursesItemQuery : FeeStudCoursesItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudCoursesItemQuery class.
		/// </summary>
		public FeeStudCoursesItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudCoursesItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudCoursesItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudCoursesItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudCoursesItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudCoursesItemQuery
		
	#region FeeTreasuryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeTreasury"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeTreasuryFilters : FeeTreasuryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryFilters class.
		/// </summary>
		public FeeTreasuryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeTreasuryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeTreasuryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeTreasuryFilters
	
	#region FeeTreasuryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeTreasuryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeTreasury"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeTreasuryQuery : FeeTreasuryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryQuery class.
		/// </summary>
		public FeeTreasuryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeTreasuryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeTreasuryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeTreasuryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeTreasuryQuery
		
	#region FeeStudRetrieveRequestFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudRetrieveRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudRetrieveRequestFilters : FeeStudRetrieveRequestFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudRetrieveRequestFilters class.
		/// </summary>
		public FeeStudRetrieveRequestFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudRetrieveRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudRetrieveRequestFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudRetrieveRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudRetrieveRequestFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudRetrieveRequestFilters
	
	#region FeeStudRetrieveRequestQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudRetrieveRequestParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudRetrieveRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudRetrieveRequestQuery : FeeStudRetrieveRequestParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudRetrieveRequestQuery class.
		/// </summary>
		public FeeStudRetrieveRequestQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudRetrieveRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudRetrieveRequestQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudRetrieveRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudRetrieveRequestQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudRetrieveRequestQuery
		
	#region FeeStudVoucherPayMthodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucherPayMthod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherPayMthodFilters : FeeStudVoucherPayMthodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherPayMthodFilters class.
		/// </summary>
		public FeeStudVoucherPayMthodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherPayMthodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherPayMthodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherPayMthodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherPayMthodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherPayMthodFilters
	
	#region FeeStudVoucherPayMthodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudVoucherPayMthodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucherPayMthod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherPayMthodQuery : FeeStudVoucherPayMthodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherPayMthodQuery class.
		/// </summary>
		public FeeStudVoucherPayMthodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherPayMthodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherPayMthodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherPayMthodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherPayMthodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherPayMthodQuery
		
	#region FeeStudVoucherItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucherItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherItemFilters : FeeStudVoucherItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherItemFilters class.
		/// </summary>
		public FeeStudVoucherItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherItemFilters
	
	#region FeeStudVoucherItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudVoucherItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucherItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherItemQuery : FeeStudVoucherItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherItemQuery class.
		/// </summary>
		public FeeStudVoucherItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherItemQuery
		
	#region FeeStudDiscCodeItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscCodeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscCodeItemFilters : FeeStudDiscCodeItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscCodeItemFilters class.
		/// </summary>
		public FeeStudDiscCodeItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscCodeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscCodeItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscCodeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscCodeItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscCodeItemFilters
	
	#region FeeStudDiscCodeItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudDiscCodeItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudDiscCodeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudDiscCodeItemQuery : FeeStudDiscCodeItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscCodeItemQuery class.
		/// </summary>
		public FeeStudDiscCodeItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscCodeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudDiscCodeItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudDiscCodeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudDiscCodeItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudDiscCodeItemQuery
		
	#region FeeStudVoucherCrsItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucherCrsItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherCrsItemFilters : FeeStudVoucherCrsItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherCrsItemFilters class.
		/// </summary>
		public FeeStudVoucherCrsItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherCrsItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherCrsItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherCrsItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherCrsItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherCrsItemFilters
	
	#region FeeStudVoucherCrsItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeStudVoucherCrsItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeStudVoucherCrsItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeStudVoucherCrsItemQuery : FeeStudVoucherCrsItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherCrsItemQuery class.
		/// </summary>
		public FeeStudVoucherCrsItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherCrsItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeStudVoucherCrsItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeStudVoucherCrsItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeStudVoucherCrsItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeStudVoucherCrsItemQuery
		
	#region GsCdeIncomeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeIncome"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeIncomeFilters : GsCdeIncomeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeIncomeFilters class.
		/// </summary>
		public GsCdeIncomeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeIncomeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeIncomeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeIncomeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeIncomeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeIncomeFilters
	
	#region GsCdeIncomeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeIncomeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeIncome"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeIncomeQuery : GsCdeIncomeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeIncomeQuery class.
		/// </summary>
		public GsCdeIncomeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeIncomeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeIncomeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeIncomeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeIncomeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeIncomeQuery
		
	#region GsCdeMaritalStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeMaritalStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeMaritalStatusFilters : GsCdeMaritalStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeMaritalStatusFilters class.
		/// </summary>
		public GsCdeMaritalStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeMaritalStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeMaritalStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeMaritalStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeMaritalStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeMaritalStatusFilters
	
	#region GsCdeMaritalStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeMaritalStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeMaritalStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeMaritalStatusQuery : GsCdeMaritalStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeMaritalStatusQuery class.
		/// </summary>
		public GsCdeMaritalStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeMaritalStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeMaritalStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeMaritalStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeMaritalStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeMaritalStatusQuery
		
	#region GsCodeMilCourseResFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeMilCourseRes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeMilCourseResFilters : GsCodeMilCourseResFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeMilCourseResFilters class.
		/// </summary>
		public GsCodeMilCourseResFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilCourseResFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeMilCourseResFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilCourseResFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeMilCourseResFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeMilCourseResFilters
	
	#region GsCodeMilCourseResQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeMilCourseResParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeMilCourseRes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeMilCourseResQuery : GsCodeMilCourseResParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeMilCourseResQuery class.
		/// </summary>
		public GsCodeMilCourseResQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilCourseResQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeMilCourseResQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilCourseResQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeMilCourseResQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeMilCourseResQuery
		
	#region GsCodeMilitaryStateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeMilitaryState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeMilitaryStateFilters : GsCodeMilitaryStateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeMilitaryStateFilters class.
		/// </summary>
		public GsCodeMilitaryStateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilitaryStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeMilitaryStateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilitaryStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeMilitaryStateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeMilitaryStateFilters
	
	#region GsCodeMilitaryStateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeMilitaryStateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeMilitaryState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeMilitaryStateQuery : GsCodeMilitaryStateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeMilitaryStateQuery class.
		/// </summary>
		public GsCodeMilitaryStateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilitaryStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeMilitaryStateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeMilitaryStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeMilitaryStateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeMilitaryStateQuery
		
	#region GsCodePassFailFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodePassFail"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodePassFailFilters : GsCodePassFailFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodePassFailFilters class.
		/// </summary>
		public GsCodePassFailFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodePassFailFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodePassFailFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodePassFailFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodePassFailFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodePassFailFilters
	
	#region GsCodePassFailQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodePassFailParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodePassFail"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodePassFailQuery : GsCodePassFailParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodePassFailQuery class.
		/// </summary>
		public GsCodePassFailQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodePassFailQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodePassFailQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodePassFailQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodePassFailQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodePassFailQuery
		
	#region GsCodePayMethodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodePayMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodePayMethodFilters : GsCodePayMethodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodePayMethodFilters class.
		/// </summary>
		public GsCodePayMethodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodePayMethodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodePayMethodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodePayMethodFilters
	
	#region GsCodePayMethodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodePayMethodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodePayMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodePayMethodQuery : GsCodePayMethodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodePayMethodQuery class.
		/// </summary>
		public GsCodePayMethodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodePayMethodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodePayMethodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodePayMethodQuery
		
	#region GsCodeLanguageFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeLanguage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeLanguageFilters : GsCodeLanguageFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeLanguageFilters class.
		/// </summary>
		public GsCodeLanguageFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeLanguageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeLanguageFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeLanguageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeLanguageFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeLanguageFilters
	
	#region GsCodeLanguageQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeLanguageParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeLanguage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeLanguageQuery : GsCodeLanguageParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeLanguageQuery class.
		/// </summary>
		public GsCodeLanguageQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeLanguageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeLanguageQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeLanguageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeLanguageQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeLanguageQuery
		
	#region GsCodeKinshipFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeKinship"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeKinshipFilters : GsCodeKinshipFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeKinshipFilters class.
		/// </summary>
		public GsCodeKinshipFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeKinshipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeKinshipFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeKinshipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeKinshipFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeKinshipFilters
	
	#region GsCodeKinshipQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeKinshipParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeKinship"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeKinshipQuery : GsCodeKinshipParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeKinshipQuery class.
		/// </summary>
		public GsCodeKinshipQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeKinshipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeKinshipQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeKinshipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeKinshipQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeKinshipQuery
		
	#region GsCodeIdentTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeIdentType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeIdentTypeFilters : GsCodeIdentTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentTypeFilters class.
		/// </summary>
		public GsCodeIdentTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeIdentTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeIdentTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeIdentTypeFilters
	
	#region GsCodeIdentTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeIdentTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeIdentType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeIdentTypeQuery : GsCodeIdentTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentTypeQuery class.
		/// </summary>
		public GsCodeIdentTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeIdentTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeIdentTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeIdentTypeQuery
		
	#region GsCodeGuardSupportLevelFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeGuardSupportLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeGuardSupportLevelFilters : GsCodeGuardSupportLevelFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeGuardSupportLevelFilters class.
		/// </summary>
		public GsCodeGuardSupportLevelFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGuardSupportLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeGuardSupportLevelFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGuardSupportLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeGuardSupportLevelFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeGuardSupportLevelFilters
	
	#region GsCodeGuardSupportLevelQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeGuardSupportLevelParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeGuardSupportLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeGuardSupportLevelQuery : GsCodeGuardSupportLevelParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeGuardSupportLevelQuery class.
		/// </summary>
		public GsCodeGuardSupportLevelQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGuardSupportLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeGuardSupportLevelQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGuardSupportLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeGuardSupportLevelQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeGuardSupportLevelQuery
		
	#region GsCodeHouseStatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeHouseStat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeHouseStatFilters : GsCodeHouseStatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseStatFilters class.
		/// </summary>
		public GsCodeHouseStatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseStatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeHouseStatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseStatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeHouseStatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeHouseStatFilters
	
	#region GsCodeHouseStatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeHouseStatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeHouseStat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeHouseStatQuery : GsCodeHouseStatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseStatQuery class.
		/// </summary>
		public GsCodeHouseStatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseStatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeHouseStatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseStatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeHouseStatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeHouseStatQuery
		
	#region GsCodeHouseTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeHouseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeHouseTypeFilters : GsCodeHouseTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseTypeFilters class.
		/// </summary>
		public GsCodeHouseTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeHouseTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeHouseTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeHouseTypeFilters
	
	#region GsCodeHouseTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeHouseTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeHouseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeHouseTypeQuery : GsCodeHouseTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseTypeQuery class.
		/// </summary>
		public GsCodeHouseTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeHouseTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeHouseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeHouseTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeHouseTypeQuery
		
	#region GsCodeIdentKindFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeIdentKind"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeIdentKindFilters : GsCodeIdentKindFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentKindFilters class.
		/// </summary>
		public GsCodeIdentKindFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentKindFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeIdentKindFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentKindFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeIdentKindFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeIdentKindFilters
	
	#region GsCodeIdentKindQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeIdentKindParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeIdentKind"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeIdentKindQuery : GsCodeIdentKindParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentKindQuery class.
		/// </summary>
		public GsCodeIdentKindQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentKindQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeIdentKindQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeIdentKindQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeIdentKindQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeIdentKindQuery
		
	#region GsCodePayMthdTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodePayMthdType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodePayMthdTypeFilters : GsCodePayMthdTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodePayMthdTypeFilters class.
		/// </summary>
		public GsCodePayMthdTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMthdTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodePayMthdTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMthdTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodePayMthdTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodePayMthdTypeFilters
	
	#region GsCodePayMthdTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodePayMthdTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodePayMthdType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodePayMthdTypeQuery : GsCodePayMthdTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodePayMthdTypeQuery class.
		/// </summary>
		public GsCodePayMthdTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMthdTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodePayMthdTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodePayMthdTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodePayMthdTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodePayMthdTypeQuery
		
	#region GsContactMethodHFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsContactMethodH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsContactMethodHFilters : GsContactMethodHFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsContactMethodHFilters class.
		/// </summary>
		public GsContactMethodHFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsContactMethodHFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsContactMethodHFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsContactMethodHFilters
	
	#region GsContactMethodHQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsContactMethodHParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsContactMethodH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsContactMethodHQuery : GsContactMethodHParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsContactMethodHQuery class.
		/// </summary>
		public GsContactMethodHQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsContactMethodHQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsContactMethodHQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsContactMethodHQuery
		
	#region GsCodeGenderFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeGender"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeGenderFilters : GsCodeGenderFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeGenderFilters class.
		/// </summary>
		public GsCodeGenderFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGenderFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeGenderFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGenderFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeGenderFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeGenderFilters
	
	#region GsCodeGenderQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeGenderParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeGender"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeGenderQuery : GsCodeGenderParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeGenderQuery class.
		/// </summary>
		public GsCodeGenderQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGenderQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeGenderQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeGenderQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeGenderQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeGenderQuery
		
	#region GsCommFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommFilters : GsCommFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommFilters class.
		/// </summary>
		public GsCommFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommFilters
	
	#region GsCommQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCommParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommQuery : GsCommParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommQuery class.
		/// </summary>
		public GsCommQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommQuery
		
	#region GsCommRecomFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCommRecom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommRecomFilters : GsCommRecomFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommRecomFilters class.
		/// </summary>
		public GsCommRecomFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommRecomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommRecomFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommRecomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommRecomFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommRecomFilters
	
	#region GsCommRecomQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCommRecomParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCommRecom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommRecomQuery : GsCommRecomParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommRecomQuery class.
		/// </summary>
		public GsCommRecomQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommRecomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommRecomQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommRecomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommRecomQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommRecomQuery
		
	#region GsCommStaffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCommStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommStaffFilters : GsCommStaffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommStaffFilters class.
		/// </summary>
		public GsCommStaffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommStaffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommStaffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommStaffFilters
	
	#region GsCommStaffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCommStaffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCommStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommStaffQuery : GsCommStaffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommStaffQuery class.
		/// </summary>
		public GsCommStaffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommStaffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommStaffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommStaffQuery
		
	#region GsContactMethodDFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsContactMethodD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsContactMethodDFilters : GsContactMethodDFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsContactMethodDFilters class.
		/// </summary>
		public GsContactMethodDFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsContactMethodDFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsContactMethodDFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsContactMethodDFilters
	
	#region GsContactMethodDQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsContactMethodDParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsContactMethodD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsContactMethodDQuery : GsContactMethodDParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsContactMethodDQuery class.
		/// </summary>
		public GsContactMethodDQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsContactMethodDQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsContactMethodDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsContactMethodDQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsContactMethodDQuery
		
	#region GsCodeReligionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeReligion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeReligionFilters : GsCodeReligionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeReligionFilters class.
		/// </summary>
		public GsCodeReligionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReligionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeReligionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReligionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeReligionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeReligionFilters
	
	#region GsCodeReligionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeReligionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeReligion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeReligionQuery : GsCodeReligionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeReligionQuery class.
		/// </summary>
		public GsCodeReligionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReligionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeReligionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReligionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeReligionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeReligionQuery
		
	#region GsCommPurposeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCommPurpose"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommPurposeFilters : GsCommPurposeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommPurposeFilters class.
		/// </summary>
		public GsCommPurposeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommPurposeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommPurposeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommPurposeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommPurposeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommPurposeFilters
	
	#region GsCommPurposeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCommPurposeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCommPurpose"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommPurposeQuery : GsCommPurposeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommPurposeQuery class.
		/// </summary>
		public GsCommPurposeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommPurposeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommPurposeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommPurposeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommPurposeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommPurposeQuery
		
	#region GsCodeRptSignatureFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeRptSignature"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeRptSignatureFilters : GsCodeRptSignatureFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeRptSignatureFilters class.
		/// </summary>
		public GsCodeRptSignatureFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeRptSignatureFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeRptSignatureFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeRptSignatureFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeRptSignatureFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeRptSignatureFilters
	
	#region GsCodeRptSignatureQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeRptSignatureParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeRptSignature"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeRptSignatureQuery : GsCodeRptSignatureParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeRptSignatureQuery class.
		/// </summary>
		public GsCodeRptSignatureQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeRptSignatureQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeRptSignatureQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeRptSignatureQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeRptSignatureQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeRptSignatureQuery
		
	#region GsCommDuttyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCommDutty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommDuttyFilters : GsCommDuttyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommDuttyFilters class.
		/// </summary>
		public GsCommDuttyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommDuttyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommDuttyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommDuttyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommDuttyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommDuttyFilters
	
	#region GsCommDuttyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCommDuttyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCommDutty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCommDuttyQuery : GsCommDuttyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCommDuttyQuery class.
		/// </summary>
		public GsCommDuttyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCommDuttyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCommDuttyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCommDuttyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCommDuttyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCommDuttyQuery
		
	#region GsCodeSysFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeSys"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeSysFilters : GsCodeSysFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeSysFilters class.
		/// </summary>
		public GsCodeSysFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeSysFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeSysFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeSysFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeSysFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeSysFilters
	
	#region GsCodeSysQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeSysParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeSys"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeSysQuery : GsCodeSysParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeSysQuery class.
		/// </summary>
		public GsCodeSysQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeSysQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeSysQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeSysQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeSysQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeSysQuery
		
	#region GsCodeReqStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeReqStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeReqStatusFilters : GsCodeReqStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeReqStatusFilters class.
		/// </summary>
		public GsCodeReqStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReqStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeReqStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReqStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeReqStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeReqStatusFilters
	
	#region GsCodeReqStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeReqStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeReqStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeReqStatusQuery : GsCodeReqStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeReqStatusQuery class.
		/// </summary>
		public GsCodeReqStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReqStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeReqStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeReqStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeReqStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeReqStatusQuery
		
	#region GsCodeWeekDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeWeekDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeWeekDayFilters : GsCodeWeekDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeWeekDayFilters class.
		/// </summary>
		public GsCodeWeekDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeWeekDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeWeekDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeWeekDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeWeekDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeWeekDayFilters
	
	#region GsCodeWeekDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeWeekDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeWeekDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeWeekDayQuery : GsCodeWeekDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeWeekDayQuery class.
		/// </summary>
		public GsCodeWeekDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeWeekDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeWeekDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeWeekDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeWeekDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeWeekDayQuery
		
	#region GsCdeSportTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeSportType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSportTypeFilters : GsCdeSportTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSportTypeFilters class.
		/// </summary>
		public GsCdeSportTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSportTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSportTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSportTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSportTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSportTypeFilters
	
	#region GsCdeSportTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeSportTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeSportType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSportTypeQuery : GsCdeSportTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSportTypeQuery class.
		/// </summary>
		public GsCdeSportTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSportTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSportTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSportTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSportTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSportTypeQuery
		
	#region GsCodeEducationLevelFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeEducationLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeEducationLevelFilters : GsCodeEducationLevelFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeEducationLevelFilters class.
		/// </summary>
		public GsCodeEducationLevelFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeEducationLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeEducationLevelFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeEducationLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeEducationLevelFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeEducationLevelFilters
	
	#region GsCodeEducationLevelQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeEducationLevelParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeEducationLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeEducationLevelQuery : GsCodeEducationLevelParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeEducationLevelQuery class.
		/// </summary>
		public GsCodeEducationLevelQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeEducationLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeEducationLevelQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeEducationLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeEducationLevelQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeEducationLevelQuery
		
	#region GsCdeTrnSiteActFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeTrnSiteAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrnSiteActFilters : GsCdeTrnSiteActFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteActFilters class.
		/// </summary>
		public GsCdeTrnSiteActFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrnSiteActFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrnSiteActFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrnSiteActFilters
	
	#region GsCdeTrnSiteActQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeTrnSiteActParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeTrnSiteAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrnSiteActQuery : GsCdeTrnSiteActParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteActQuery class.
		/// </summary>
		public GsCdeTrnSiteActQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrnSiteActQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrnSiteActQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrnSiteActQuery
		
	#region GsCdeSpecAreaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeSpecArea"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSpecAreaFilters : GsCdeSpecAreaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSpecAreaFilters class.
		/// </summary>
		public GsCdeSpecAreaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSpecAreaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSpecAreaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSpecAreaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSpecAreaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSpecAreaFilters
	
	#region GsCdeSpecAreaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeSpecAreaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeSpecArea"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSpecAreaQuery : GsCdeSpecAreaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSpecAreaQuery class.
		/// </summary>
		public GsCdeSpecAreaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSpecAreaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSpecAreaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSpecAreaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSpecAreaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSpecAreaQuery
		
	#region GsCdeViolCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeViolCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeViolCatFilters : GsCdeViolCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeViolCatFilters class.
		/// </summary>
		public GsCdeViolCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeViolCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeViolCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeViolCatFilters
	
	#region GsCdeViolCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeViolCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeViolCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeViolCatQuery : GsCdeViolCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeViolCatQuery class.
		/// </summary>
		public GsCdeViolCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeViolCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeViolCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeViolCatQuery
		
	#region GsCdeSchoolTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeSchoolType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSchoolTypeFilters : GsCdeSchoolTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolTypeFilters class.
		/// </summary>
		public GsCdeSchoolTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSchoolTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSchoolTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSchoolTypeFilters
	
	#region GsCdeSchoolTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeSchoolTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeSchoolType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSchoolTypeQuery : GsCdeSchoolTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolTypeQuery class.
		/// </summary>
		public GsCdeSchoolTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSchoolTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSchoolTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSchoolTypeQuery
		
	#region GsCdeOutcomeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeOutcome"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeOutcomeFilters : GsCdeOutcomeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeOutcomeFilters class.
		/// </summary>
		public GsCdeOutcomeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeOutcomeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeOutcomeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeOutcomeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeOutcomeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeOutcomeFilters
	
	#region GsCdeOutcomeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeOutcomeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeOutcome"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeOutcomeQuery : GsCdeOutcomeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeOutcomeQuery class.
		/// </summary>
		public GsCdeOutcomeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeOutcomeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeOutcomeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeOutcomeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeOutcomeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeOutcomeQuery
		
	#region GsCdeTrnSiteTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeTrnSiteType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrnSiteTypeFilters : GsCdeTrnSiteTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteTypeFilters class.
		/// </summary>
		public GsCdeTrnSiteTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrnSiteTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrnSiteTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrnSiteTypeFilters
	
	#region GsCdeTrnSiteTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeTrnSiteTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeTrnSiteType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrnSiteTypeQuery : GsCdeTrnSiteTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteTypeQuery class.
		/// </summary>
		public GsCdeTrnSiteTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrnSiteTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrnSiteTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrnSiteTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrnSiteTypeQuery
		
	#region GsCdePenaltyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdePenalty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdePenaltyFilters : GsCdePenaltyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyFilters class.
		/// </summary>
		public GsCdePenaltyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdePenaltyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdePenaltyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdePenaltyFilters
	
	#region GsCdePenaltyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdePenaltyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdePenalty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdePenaltyQuery : GsCdePenaltyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyQuery class.
		/// </summary>
		public GsCdePenaltyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdePenaltyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdePenaltyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdePenaltyQuery
		
	#region GsCdeSchoolFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeSchool"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSchoolFilters : GsCdeSchoolFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolFilters class.
		/// </summary>
		public GsCdeSchoolFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSchoolFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSchoolFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSchoolFilters
	
	#region GsCdeSchoolQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeSchoolParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeSchool"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeSchoolQuery : GsCdeSchoolParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolQuery class.
		/// </summary>
		public GsCdeSchoolQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeSchoolQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeSchoolQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeSchoolQuery
		
	#region GsCdeTrainSiteFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeTrainSite"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrainSiteFilters : GsCdeTrainSiteFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainSiteFilters class.
		/// </summary>
		public GsCdeTrainSiteFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainSiteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrainSiteFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainSiteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrainSiteFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrainSiteFilters
	
	#region GsCdeTrainSiteQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeTrainSiteParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeTrainSite"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrainSiteQuery : GsCdeTrainSiteParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainSiteQuery class.
		/// </summary>
		public GsCdeTrainSiteQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainSiteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrainSiteQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainSiteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrainSiteQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrainSiteQuery
		
	#region GsCdeTrainRespFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeTrainResp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrainRespFilters : GsCdeTrainRespFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainRespFilters class.
		/// </summary>
		public GsCdeTrainRespFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainRespFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrainRespFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainRespFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrainRespFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrainRespFilters
	
	#region GsCdeTrainRespQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeTrainRespParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeTrainResp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeTrainRespQuery : GsCdeTrainRespParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainRespQuery class.
		/// </summary>
		public GsCdeTrainRespQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainRespQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeTrainRespQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeTrainRespQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeTrainRespQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeTrainRespQuery
		
	#region GsCdePenaltyRelatedFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdePenaltyRelated"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdePenaltyRelatedFilters : GsCdePenaltyRelatedFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyRelatedFilters class.
		/// </summary>
		public GsCdePenaltyRelatedFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyRelatedFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdePenaltyRelatedFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyRelatedFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdePenaltyRelatedFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdePenaltyRelatedFilters
	
	#region GsCdePenaltyRelatedQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdePenaltyRelatedParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdePenaltyRelated"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdePenaltyRelatedQuery : GsCdePenaltyRelatedParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyRelatedQuery class.
		/// </summary>
		public GsCdePenaltyRelatedQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyRelatedQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdePenaltyRelatedQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyRelatedQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdePenaltyRelatedQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdePenaltyRelatedQuery
		
	#region GsCdeUniversitiesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeUniversities"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeUniversitiesFilters : GsCdeUniversitiesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeUniversitiesFilters class.
		/// </summary>
		public GsCdeUniversitiesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeUniversitiesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeUniversitiesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeUniversitiesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeUniversitiesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeUniversitiesFilters
	
	#region GsCdeUniversitiesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeUniversitiesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeUniversities"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeUniversitiesQuery : GsCdeUniversitiesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeUniversitiesQuery class.
		/// </summary>
		public GsCdeUniversitiesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeUniversitiesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeUniversitiesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeUniversitiesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeUniversitiesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeUniversitiesQuery
		
	#region GsCdeViolFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeViol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeViolFilters : GsCdeViolFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeViolFilters class.
		/// </summary>
		public GsCdeViolFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeViolFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeViolFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeViolFilters
	
	#region GsCdeViolQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeViolParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeViol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeViolQuery : GsCdeViolParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeViolQuery class.
		/// </summary>
		public GsCdeViolQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeViolQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeViolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeViolQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeViolQuery
		
	#region GsCodeCNodeNatureFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeCNodeNature"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeCNodeNatureFilters : GsCodeCNodeNatureFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeCNodeNatureFilters class.
		/// </summary>
		public GsCodeCNodeNatureFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCNodeNatureFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeCNodeNatureFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCNodeNatureFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeCNodeNatureFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeCNodeNatureFilters
	
	#region GsCodeCNodeNatureQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeCNodeNatureParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeCNodeNature"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeCNodeNatureQuery : GsCodeCNodeNatureParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeCNodeNatureQuery class.
		/// </summary>
		public GsCodeCNodeNatureQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCNodeNatureQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeCNodeNatureQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCNodeNatureQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeCNodeNatureQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeCNodeNatureQuery
		
	#region GsCodeContactMethodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeContactMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeContactMethodFilters : GsCodeContactMethodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeContactMethodFilters class.
		/// </summary>
		public GsCodeContactMethodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeContactMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeContactMethodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeContactMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeContactMethodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeContactMethodFilters
	
	#region GsCodeContactMethodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeContactMethodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeContactMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeContactMethodQuery : GsCodeContactMethodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeContactMethodQuery class.
		/// </summary>
		public GsCodeContactMethodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeContactMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeContactMethodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeContactMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeContactMethodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeContactMethodQuery
		
	#region GsCodeCurrencyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeCurrency"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeCurrencyFilters : GsCodeCurrencyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyFilters class.
		/// </summary>
		public GsCodeCurrencyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeCurrencyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeCurrencyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeCurrencyFilters
	
	#region GsCodeCurrencyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeCurrencyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeCurrency"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeCurrencyQuery : GsCodeCurrencyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyQuery class.
		/// </summary>
		public GsCodeCurrencyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeCurrencyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeCurrencyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeCurrencyQuery
		
	#region GsCodeApprovalFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeApproval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalFilters : GsCodeApprovalFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFilters class.
		/// </summary>
		public GsCodeApprovalFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalFilters
	
	#region GsCodeApprovalQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeApprovalParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeApproval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalQuery : GsCodeApprovalParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalQuery class.
		/// </summary>
		public GsCodeApprovalQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalQuery
		
	#region GsCodeDocTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeDocType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeDocTypeFilters : GsCodeDocTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeDocTypeFilters class.
		/// </summary>
		public GsCodeDocTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeDocTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeDocTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeDocTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeDocTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeDocTypeFilters
	
	#region GsCodeDocTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeDocTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeDocType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeDocTypeQuery : GsCodeDocTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeDocTypeQuery class.
		/// </summary>
		public GsCodeDocTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeDocTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeDocTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeDocTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeDocTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeDocTypeQuery
		
	#region GsCodeApprovalListHFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalListH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalListHFilters : GsCodeApprovalListHFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListHFilters class.
		/// </summary>
		public GsCodeApprovalListHFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalListHFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalListHFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalListHFilters
	
	#region GsCodeApprovalListHQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeApprovalListHParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalListH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalListHQuery : GsCodeApprovalListHParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListHQuery class.
		/// </summary>
		public GsCodeApprovalListHQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalListHQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalListHQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalListHQuery
		
	#region GsCodeApprovalListDFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalListD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalListDFilters : GsCodeApprovalListDFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListDFilters class.
		/// </summary>
		public GsCodeApprovalListDFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalListDFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalListDFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalListDFilters
	
	#region GsCodeApprovalListDQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeApprovalListDParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalListD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalListDQuery : GsCodeApprovalListDParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListDQuery class.
		/// </summary>
		public GsCodeApprovalListDQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalListDQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalListDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalListDQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalListDQuery
		
	#region GsCodeApprovalFuncFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalFunc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalFuncFilters : GsCodeApprovalFuncFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFuncFilters class.
		/// </summary>
		public GsCodeApprovalFuncFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFuncFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalFuncFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFuncFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalFuncFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalFuncFilters
	
	#region GsCodeApprovalFuncQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeApprovalFuncParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalFunc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalFuncQuery : GsCodeApprovalFuncParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFuncQuery class.
		/// </summary>
		public GsCodeApprovalFuncQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFuncQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalFuncQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFuncQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalFuncQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalFuncQuery
		
	#region GsCdeWeekDayGrpFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCdeWeekDayGrp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeWeekDayGrpFilters : GsCdeWeekDayGrpFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeWeekDayGrpFilters class.
		/// </summary>
		public GsCdeWeekDayGrpFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeWeekDayGrpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeWeekDayGrpFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeWeekDayGrpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeWeekDayGrpFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeWeekDayGrpFilters
	
	#region GsCdeWeekDayGrpQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCdeWeekDayGrpParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCdeWeekDayGrp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCdeWeekDayGrpQuery : GsCdeWeekDayGrpParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCdeWeekDayGrpQuery class.
		/// </summary>
		public GsCdeWeekDayGrpQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCdeWeekDayGrpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCdeWeekDayGrpQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCdeWeekDayGrpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCdeWeekDayGrpQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCdeWeekDayGrpQuery
		
	#region SaCodeExperienceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeExperience"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeExperienceFilters : SaCodeExperienceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeExperienceFilters class.
		/// </summary>
		public SaCodeExperienceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeExperienceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeExperienceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeExperienceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeExperienceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeExperienceFilters
	
	#region SaCodeExperienceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeExperienceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeExperience"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeExperienceQuery : SaCodeExperienceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeExperienceQuery class.
		/// </summary>
		public SaCodeExperienceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeExperienceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeExperienceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeExperienceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeExperienceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeExperienceQuery
		
	#region GsCodeApprovalFacultyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalFacultyFilters : GsCodeApprovalFacultyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFacultyFilters class.
		/// </summary>
		public GsCodeApprovalFacultyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalFacultyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalFacultyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalFacultyFilters
	
	#region GsCodeApprovalFacultyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="GsCodeApprovalFacultyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="GsCodeApprovalFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class GsCodeApprovalFacultyQuery : GsCodeApprovalFacultyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFacultyQuery class.
		/// </summary>
		public GsCodeApprovalFacultyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public GsCodeApprovalFacultyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public GsCodeApprovalFacultyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion GsCodeApprovalFacultyQuery
		
	#region SaCodeHealthStateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeHealthState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeHealthStateFilters : SaCodeHealthStateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeHealthStateFilters class.
		/// </summary>
		public SaCodeHealthStateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeHealthStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeHealthStateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeHealthStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeHealthStateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeHealthStateFilters
	
	#region SaCodeHealthStateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeHealthStateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeHealthState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeHealthStateQuery : SaCodeHealthStateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeHealthStateQuery class.
		/// </summary>
		public SaCodeHealthStateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeHealthStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeHealthStateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeHealthStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeHealthStateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeHealthStateQuery
		
	#region SpoSponsorTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoSponsorType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorTypeFilters : SpoSponsorTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorTypeFilters class.
		/// </summary>
		public SpoSponsorTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorTypeFilters
	
	#region SpoSponsorTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoSponsorTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoSponsorType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorTypeQuery : SpoSponsorTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorTypeQuery class.
		/// </summary>
		public SpoSponsorTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorTypeQuery
		
	#region SaCodeJobActivityFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeJobActivity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobActivityFilters : SaCodeJobActivityFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityFilters class.
		/// </summary>
		public SaCodeJobActivityFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobActivityFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobActivityFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobActivityFilters
	
	#region SaCodeJobActivityQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeJobActivityParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeJobActivity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobActivityQuery : SaCodeJobActivityParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityQuery class.
		/// </summary>
		public SaCodeJobActivityQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobActivityQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobActivityQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobActivityQuery
		
	#region SpoSponsorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoSponsor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorFilters : SpoSponsorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFilters class.
		/// </summary>
		public SpoSponsorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorFilters
	
	#region SpoSponsorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoSponsorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoSponsor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorQuery : SpoSponsorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorQuery class.
		/// </summary>
		public SpoSponsorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorQuery
		
	#region StaticViNotesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="StaticViNotes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class StaticViNotesFilters : StaticViNotesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the StaticViNotesFilters class.
		/// </summary>
		public StaticViNotesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the StaticViNotesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public StaticViNotesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the StaticViNotesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public StaticViNotesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion StaticViNotesFilters
	
	#region StaticViNotesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="StaticViNotesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="StaticViNotes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class StaticViNotesQuery : StaticViNotesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the StaticViNotesQuery class.
		/// </summary>
		public StaticViNotesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the StaticViNotesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public StaticViNotesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the StaticViNotesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public StaticViNotesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion StaticViNotesQuery
		
	#region SpoSponsorOfferFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoSponsorOffer"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorOfferFilters : SpoSponsorOfferFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferFilters class.
		/// </summary>
		public SpoSponsorOfferFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorOfferFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorOfferFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorOfferFilters
	
	#region SpoSponsorOfferQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoSponsorOfferParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoSponsorOffer"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorOfferQuery : SpoSponsorOfferParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferQuery class.
		/// </summary>
		public SpoSponsorOfferQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorOfferQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorOfferQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorOfferQuery
		
	#region SpoSponsorFeeItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoSponsorFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorFeeItemFilters : SpoSponsorFeeItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFeeItemFilters class.
		/// </summary>
		public SpoSponsorFeeItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorFeeItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorFeeItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorFeeItemFilters
	
	#region SpoSponsorFeeItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoSponsorFeeItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoSponsorFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorFeeItemQuery : SpoSponsorFeeItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFeeItemQuery class.
		/// </summary>
		public SpoSponsorFeeItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorFeeItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorFeeItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorFeeItemQuery
		
	#region SpoOfferContinueFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoOfferContinue"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoOfferContinueFilters : SpoOfferContinueFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueFilters class.
		/// </summary>
		public SpoOfferContinueFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoOfferContinueFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoOfferContinueFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoOfferContinueFilters
	
	#region SpoOfferContinueQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoOfferContinueParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoOfferContinue"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoOfferContinueQuery : SpoOfferContinueParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueQuery class.
		/// </summary>
		public SpoOfferContinueQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoOfferContinueQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoOfferContinueQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoOfferContinueQuery
		
	#region SpoResponsiblePersonFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoResponsiblePerson"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoResponsiblePersonFilters : SpoResponsiblePersonFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoResponsiblePersonFilters class.
		/// </summary>
		public SpoResponsiblePersonFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoResponsiblePersonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoResponsiblePersonFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoResponsiblePersonFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoResponsiblePersonFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoResponsiblePersonFilters
	
	#region SpoResponsiblePersonQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoResponsiblePersonParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoResponsiblePerson"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoResponsiblePersonQuery : SpoResponsiblePersonParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoResponsiblePersonQuery class.
		/// </summary>
		public SpoResponsiblePersonQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoResponsiblePersonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoResponsiblePersonQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoResponsiblePersonQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoResponsiblePersonQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoResponsiblePersonQuery
		
	#region SpoSponsorStudSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoSponsorStudSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorStudSemesterFilters : SpoSponsorStudSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudSemesterFilters class.
		/// </summary>
		public SpoSponsorStudSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorStudSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorStudSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorStudSemesterFilters
	
	#region SpoSponsorStudSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoSponsorStudSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoSponsorStudSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorStudSemesterQuery : SpoSponsorStudSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudSemesterQuery class.
		/// </summary>
		public SpoSponsorStudSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorStudSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorStudSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorStudSemesterQuery
		
	#region SpoSponsorOfferExtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoSponsorOfferExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorOfferExtFilters : SpoSponsorOfferExtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferExtFilters class.
		/// </summary>
		public SpoSponsorOfferExtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorOfferExtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorOfferExtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorOfferExtFilters
	
	#region SpoSponsorOfferExtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoSponsorOfferExtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoSponsorOfferExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorOfferExtQuery : SpoSponsorOfferExtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferExtQuery class.
		/// </summary>
		public SpoSponsorOfferExtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorOfferExtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorOfferExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorOfferExtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorOfferExtQuery
		
	#region SvAutoMsgTmpltFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvAutoMsgTmplt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvAutoMsgTmpltFilters : SvAutoMsgTmpltFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltFilters class.
		/// </summary>
		public SvAutoMsgTmpltFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvAutoMsgTmpltFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvAutoMsgTmpltFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvAutoMsgTmpltFilters
	
	#region SvAutoMsgTmpltQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvAutoMsgTmpltParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvAutoMsgTmplt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvAutoMsgTmpltQuery : SvAutoMsgTmpltParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltQuery class.
		/// </summary>
		public SvAutoMsgTmpltQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvAutoMsgTmpltQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvAutoMsgTmpltQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvAutoMsgTmpltQuery
		
	#region SvCdeCompDFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeCompD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompDFilters : SvCdeCompDFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompDFilters class.
		/// </summary>
		public SvCdeCompDFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompDFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompDFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompDFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompDFilters
	
	#region SvCdeCompDQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeCompDParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeCompD"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompDQuery : SvCdeCompDParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompDQuery class.
		/// </summary>
		public SvCdeCompDQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompDQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompDQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompDQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompDQuery
		
	#region SvCdeCompHFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeCompH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompHFilters : SvCdeCompHFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompHFilters class.
		/// </summary>
		public SvCdeCompHFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompHFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompHFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompHFilters
	
	#region SvCdeCompHQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeCompHParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeCompH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompHQuery : SvCdeCompHParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompHQuery class.
		/// </summary>
		public SvCdeCompHQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompHQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompHQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompHQuery
		
	#region SvCdeLockerFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeLocker"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeLockerFilters : SvCdeLockerFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeLockerFilters class.
		/// </summary>
		public SvCdeLockerFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeLockerFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeLockerFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeLockerFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeLockerFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeLockerFilters
	
	#region SvCdeLockerQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeLockerParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeLocker"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeLockerQuery : SvCdeLockerParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeLockerQuery class.
		/// </summary>
		public SvCdeLockerQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeLockerQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeLockerQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeLockerQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeLockerQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeLockerQuery
		
	#region SvCdeMsgParamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeMsgParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeMsgParamFilters : SvCdeMsgParamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeMsgParamFilters class.
		/// </summary>
		public SvCdeMsgParamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeMsgParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeMsgParamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeMsgParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeMsgParamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeMsgParamFilters
	
	#region SvCdeMsgParamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeMsgParamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeMsgParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeMsgParamQuery : SvCdeMsgParamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeMsgParamQuery class.
		/// </summary>
		public SvCdeMsgParamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeMsgParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeMsgParamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeMsgParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeMsgParamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeMsgParamQuery
		
	#region SvCdeQstnTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeQstnType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeQstnTypeFilters : SvCdeQstnTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeQstnTypeFilters class.
		/// </summary>
		public SvCdeQstnTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeQstnTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeQstnTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeQstnTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeQstnTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeQstnTypeFilters
	
	#region SvCdeQstnTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeQstnTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeQstnType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeQstnTypeQuery : SvCdeQstnTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeQstnTypeQuery class.
		/// </summary>
		public SvCdeQstnTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeQstnTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeQstnTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeQstnTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeQstnTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeQstnTypeQuery
		
	#region SpoOfferStudExceptionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoOfferStudException"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoOfferStudExceptionFilters : SpoOfferStudExceptionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoOfferStudExceptionFilters class.
		/// </summary>
		public SpoOfferStudExceptionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferStudExceptionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoOfferStudExceptionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferStudExceptionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoOfferStudExceptionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoOfferStudExceptionFilters
	
	#region SpoOfferStudExceptionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoOfferStudExceptionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoOfferStudException"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoOfferStudExceptionQuery : SpoOfferStudExceptionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoOfferStudExceptionQuery class.
		/// </summary>
		public SpoOfferStudExceptionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferStudExceptionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoOfferStudExceptionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoOfferStudExceptionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoOfferStudExceptionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoOfferStudExceptionQuery
		
	#region SvCdeReqStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeReqStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeReqStatusFilters : SvCdeReqStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeReqStatusFilters class.
		/// </summary>
		public SvCdeReqStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeReqStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeReqStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeReqStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeReqStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeReqStatusFilters
	
	#region SvCdeReqStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeReqStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeReqStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeReqStatusQuery : SvCdeReqStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeReqStatusQuery class.
		/// </summary>
		public SvCdeReqStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeReqStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeReqStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeReqStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeReqStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeReqStatusQuery
		
	#region SvCdeEvalItemHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeEvalItemHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeEvalItemHdrFilters : SvCdeEvalItemHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalItemHdrFilters class.
		/// </summary>
		public SvCdeEvalItemHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalItemHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeEvalItemHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalItemHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeEvalItemHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeEvalItemHdrFilters
	
	#region SvCdeEvalItemHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeEvalItemHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeEvalItemHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeEvalItemHdrQuery : SvCdeEvalItemHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalItemHdrQuery class.
		/// </summary>
		public SvCdeEvalItemHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalItemHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeEvalItemHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalItemHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeEvalItemHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeEvalItemHdrQuery
		
	#region SvCdeEvalExtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeEvalExtFilters : SvCdeEvalExtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalExtFilters class.
		/// </summary>
		public SvCdeEvalExtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeEvalExtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeEvalExtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeEvalExtFilters
	
	#region SvCdeEvalExtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeEvalExtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeEvalExtQuery : SvCdeEvalExtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalExtQuery class.
		/// </summary>
		public SvCdeEvalExtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeEvalExtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeEvalExtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeEvalExtQuery
		
	#region SpoStudFeeItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoStudFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoStudFeeItemFilters : SpoStudFeeItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoStudFeeItemFilters class.
		/// </summary>
		public SpoStudFeeItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoStudFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoStudFeeItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoStudFeeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoStudFeeItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoStudFeeItemFilters
	
	#region SpoStudFeeItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoStudFeeItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoStudFeeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoStudFeeItemQuery : SpoStudFeeItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoStudFeeItemQuery class.
		/// </summary>
		public SpoStudFeeItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoStudFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoStudFeeItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoStudFeeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoStudFeeItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoStudFeeItemQuery
		
	#region SvCdeCompTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeCompType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompTypeFilters : SvCdeCompTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompTypeFilters class.
		/// </summary>
		public SvCdeCompTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompTypeFilters
	
	#region SvCdeCompTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeCompTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeCompType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompTypeQuery : SvCdeCompTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompTypeQuery class.
		/// </summary>
		public SvCdeCompTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompTypeQuery
		
	#region SvCdeCompReplyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeCompReply"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompReplyFilters : SvCdeCompReplyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompReplyFilters class.
		/// </summary>
		public SvCdeCompReplyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompReplyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompReplyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompReplyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompReplyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompReplyFilters
	
	#region SvCdeCompReplyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeCompReplyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeCompReply"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeCompReplyQuery : SvCdeCompReplyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeCompReplyQuery class.
		/// </summary>
		public SvCdeCompReplyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompReplyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeCompReplyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeCompReplyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeCompReplyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeCompReplyQuery
		
	#region SvCdeDeviceTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeDeviceType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeDeviceTypeFilters : SvCdeDeviceTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeDeviceTypeFilters class.
		/// </summary>
		public SvCdeDeviceTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeDeviceTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeDeviceTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeDeviceTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeDeviceTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeDeviceTypeFilters
	
	#region SvCdeDeviceTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeDeviceTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeDeviceType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeDeviceTypeQuery : SvCdeDeviceTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeDeviceTypeQuery class.
		/// </summary>
		public SvCdeDeviceTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeDeviceTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeDeviceTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeDeviceTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeDeviceTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeDeviceTypeQuery
		
	#region SpoDepartmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoDepartment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoDepartmentFilters : SpoDepartmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoDepartmentFilters class.
		/// </summary>
		public SpoDepartmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoDepartmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoDepartmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoDepartmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoDepartmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoDepartmentFilters
	
	#region SpoDepartmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoDepartmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoDepartment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoDepartmentQuery : SpoDepartmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoDepartmentQuery class.
		/// </summary>
		public SpoDepartmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoDepartmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoDepartmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoDepartmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoDepartmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoDepartmentQuery
		
	#region SpoSponsorStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoSponsorStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorStudFilters : SpoSponsorStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudFilters class.
		/// </summary>
		public SpoSponsorStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorStudFilters
	
	#region SpoSponsorStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoSponsorStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoSponsorStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoSponsorStudQuery : SpoSponsorStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudQuery class.
		/// </summary>
		public SpoSponsorStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoSponsorStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoSponsorStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoSponsorStudQuery
		
	#region SpoContactFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SpoContact"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoContactFilters : SpoContactFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoContactFilters class.
		/// </summary>
		public SpoContactFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoContactFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoContactFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoContactFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoContactFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoContactFilters
	
	#region SpoContactQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SpoContactParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SpoContact"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SpoContactQuery : SpoContactParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SpoContactQuery class.
		/// </summary>
		public SpoContactQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SpoContactQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SpoContactQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SpoContactQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SpoContactQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SpoContactQuery
		
	#region SeVersionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeVersion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeVersionFilters : SeVersionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeVersionFilters class.
		/// </summary>
		public SeVersionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeVersionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeVersionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeVersionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeVersionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeVersionFilters
	
	#region SeVersionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeVersionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeVersion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeVersionQuery : SeVersionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeVersionQuery class.
		/// </summary>
		public SeVersionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeVersionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeVersionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeVersionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeVersionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeVersionQuery
		
	#region SeCodeUserTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeCodeUserType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeUserTypeFilters : SeCodeUserTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeUserTypeFilters class.
		/// </summary>
		public SeCodeUserTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeUserTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeUserTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeUserTypeFilters
	
	#region SeCodeUserTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeCodeUserTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeCodeUserType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeUserTypeQuery : SeCodeUserTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeUserTypeQuery class.
		/// </summary>
		public SeCodeUserTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeUserTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeUserTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeUserTypeQuery
		
	#region SeControlBizTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeControlBizType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeControlBizTypeFilters : SeControlBizTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeControlBizTypeFilters class.
		/// </summary>
		public SeControlBizTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeControlBizTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeControlBizTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeControlBizTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeControlBizTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeControlBizTypeFilters
	
	#region SeControlBizTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeControlBizTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeControlBizType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeControlBizTypeQuery : SeControlBizTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeControlBizTypeQuery class.
		/// </summary>
		public SeControlBizTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeControlBizTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeControlBizTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeControlBizTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeControlBizTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeControlBizTypeQuery
		
	#region SeModuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeModule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeModuleFilters : SeModuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeModuleFilters class.
		/// </summary>
		public SeModuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeModuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeModuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeModuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeModuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeModuleFilters
	
	#region SeModuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeModuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeModule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeModuleQuery : SeModuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeModuleQuery class.
		/// </summary>
		public SeModuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeModuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeModuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeModuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeModuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeModuleQuery
		
	#region SeControlDisableWayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeControlDisableWay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeControlDisableWayFilters : SeControlDisableWayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeControlDisableWayFilters class.
		/// </summary>
		public SeControlDisableWayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeControlDisableWayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeControlDisableWayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeControlDisableWayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeControlDisableWayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeControlDisableWayFilters
	
	#region SeControlDisableWayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeControlDisableWayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeControlDisableWay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeControlDisableWayQuery : SeControlDisableWayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeControlDisableWayQuery class.
		/// </summary>
		public SeControlDisableWayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeControlDisableWayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeControlDisableWayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeControlDisableWayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeControlDisableWayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeControlDisableWayQuery
		
	#region AsFacultyInfoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AsFacultyInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AsFacultyInfoFilters : AsFacultyInfoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AsFacultyInfoFilters class.
		/// </summary>
		public AsFacultyInfoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AsFacultyInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AsFacultyInfoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AsFacultyInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AsFacultyInfoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AsFacultyInfoFilters
	
	#region AsFacultyInfoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AsFacultyInfoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AsFacultyInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AsFacultyInfoQuery : AsFacultyInfoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AsFacultyInfoQuery class.
		/// </summary>
		public AsFacultyInfoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AsFacultyInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AsFacultyInfoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AsFacultyInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AsFacultyInfoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AsFacultyInfoQuery
		
	#region AsCodeDegreeClassFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AsCodeDegreeClass"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AsCodeDegreeClassFilters : AsCodeDegreeClassFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassFilters class.
		/// </summary>
		public AsCodeDegreeClassFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AsCodeDegreeClassFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AsCodeDegreeClassFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AsCodeDegreeClassFilters
	
	#region AsCodeDegreeClassQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AsCodeDegreeClassParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AsCodeDegreeClass"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AsCodeDegreeClassQuery : AsCodeDegreeClassParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassQuery class.
		/// </summary>
		public AsCodeDegreeClassQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AsCodeDegreeClassQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AsCodeDegreeClassQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AsCodeDegreeClassQuery
		
	#region SeCodeUserPlaceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeCodeUserPlace"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeUserPlaceFilters : SeCodeUserPlaceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeUserPlaceFilters class.
		/// </summary>
		public SeCodeUserPlaceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserPlaceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeUserPlaceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserPlaceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeUserPlaceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeUserPlaceFilters
	
	#region SeCodeUserPlaceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeCodeUserPlaceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeCodeUserPlace"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeUserPlaceQuery : SeCodeUserPlaceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeUserPlaceQuery class.
		/// </summary>
		public SeCodeUserPlaceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserPlaceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeUserPlaceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserPlaceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeUserPlaceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeUserPlaceQuery
		
	#region SeCdeBlockTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeCdeBlockType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCdeBlockTypeFilters : SeCdeBlockTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCdeBlockTypeFilters class.
		/// </summary>
		public SeCdeBlockTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCdeBlockTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCdeBlockTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCdeBlockTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCdeBlockTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCdeBlockTypeFilters
	
	#region SeCdeBlockTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeCdeBlockTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeCdeBlockType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCdeBlockTypeQuery : SeCdeBlockTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCdeBlockTypeQuery class.
		/// </summary>
		public SeCdeBlockTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCdeBlockTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCdeBlockTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCdeBlockTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCdeBlockTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCdeBlockTypeQuery
		
	#region SeAccntFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeAccnt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeAccntFilters : SeAccntFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeAccntFilters class.
		/// </summary>
		public SeAccntFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeAccntFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeAccntFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeAccntFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeAccntFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeAccntFilters
	
	#region SeAccntQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeAccntParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeAccnt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeAccntQuery : SeAccntParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeAccntQuery class.
		/// </summary>
		public SeAccntQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeAccntQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeAccntQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeAccntQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeAccntQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeAccntQuery
		
	#region SeCodeChangeTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeCodeChangeType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeChangeTypeFilters : SeCodeChangeTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeChangeTypeFilters class.
		/// </summary>
		public SeCodeChangeTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeChangeTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeChangeTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeChangeTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeChangeTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeChangeTypeFilters
	
	#region SeCodeChangeTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeCodeChangeTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeCodeChangeType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeChangeTypeQuery : SeCodeChangeTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeChangeTypeQuery class.
		/// </summary>
		public SeCodeChangeTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeChangeTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeChangeTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeChangeTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeChangeTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeChangeTypeQuery
		
	#region SeCodeUserJobFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeCodeUserJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeUserJobFilters : SeCodeUserJobFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeUserJobFilters class.
		/// </summary>
		public SeCodeUserJobFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeUserJobFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeUserJobFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeUserJobFilters
	
	#region SeCodeUserJobQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeCodeUserJobParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeCodeUserJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeCodeUserJobQuery : SeCodeUserJobParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeCodeUserJobQuery class.
		/// </summary>
		public SeCodeUserJobQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeCodeUserJobQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeCodeUserJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeCodeUserJobQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeCodeUserJobQuery
		
	#region SeControlTechTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeControlTechType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeControlTechTypeFilters : SeControlTechTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeControlTechTypeFilters class.
		/// </summary>
		public SeControlTechTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeControlTechTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeControlTechTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeControlTechTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeControlTechTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeControlTechTypeFilters
	
	#region SeControlTechTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeControlTechTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeControlTechType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeControlTechTypeQuery : SeControlTechTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeControlTechTypeQuery class.
		/// </summary>
		public SeControlTechTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeControlTechTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeControlTechTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeControlTechTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeControlTechTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeControlTechTypeQuery
		
	#region SeUserAccntFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeUserAccnt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntFilters : SeUserAccntFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFilters class.
		/// </summary>
		public SeUserAccntFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntFilters
	
	#region SeUserAccntQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeUserAccntParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeUserAccnt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntQuery : SeUserAccntParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntQuery class.
		/// </summary>
		public SeUserAccntQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntQuery
		
	#region SeUserPhaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeUserPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserPhaseFilters : SeUserPhaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserPhaseFilters class.
		/// </summary>
		public SeUserPhaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserPhaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserPhaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserPhaseFilters
	
	#region SeUserPhaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeUserPhaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeUserPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserPhaseQuery : SeUserPhaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserPhaseQuery class.
		/// </summary>
		public SeUserPhaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserPhaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserPhaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserPhaseQuery
		
	#region SeFormFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeFormFilters : SeFormFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeFormFilters class.
		/// </summary>
		public SeFormFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeFormFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeFormFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeFormFilters
	
	#region SeFormQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeFormParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeFormQuery : SeFormParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeFormQuery class.
		/// </summary>
		public SeFormQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeFormQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeFormQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeFormQuery
		
	#region SeUserCrsAssessFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeUserCrsAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserCrsAssessFilters : SeUserCrsAssessFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserCrsAssessFilters class.
		/// </summary>
		public SeUserCrsAssessFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserCrsAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserCrsAssessFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserCrsAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserCrsAssessFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserCrsAssessFilters
	
	#region SeUserCrsAssessQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeUserCrsAssessParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeUserCrsAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserCrsAssessQuery : SeUserCrsAssessParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserCrsAssessQuery class.
		/// </summary>
		public SeUserCrsAssessQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserCrsAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserCrsAssessQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserCrsAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserCrsAssessQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserCrsAssessQuery
		
	#region SeUserAccntDegFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeUserAccntDeg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntDegFilters : SeUserAccntDegFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntDegFilters class.
		/// </summary>
		public SeUserAccntDegFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntDegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntDegFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntDegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntDegFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntDegFilters
	
	#region SeUserAccntDegQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeUserAccntDegParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeUserAccntDeg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntDegQuery : SeUserAccntDegParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntDegQuery class.
		/// </summary>
		public SeUserAccntDegQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntDegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntDegQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntDegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntDegQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntDegQuery
		
	#region SeUserFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeUser"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserFilters : SeUserFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserFilters class.
		/// </summary>
		public SeUserFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserFilters
	
	#region SeUserQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeUserParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeUser"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserQuery : SeUserParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserQuery class.
		/// </summary>
		public SeUserQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserQuery
		
	#region SvCdeSrvyTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeSrvyType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeSrvyTypeFilters : SvCdeSrvyTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeSrvyTypeFilters class.
		/// </summary>
		public SvCdeSrvyTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeSrvyTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeSrvyTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeSrvyTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeSrvyTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeSrvyTypeFilters
	
	#region SvCdeSrvyTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeSrvyTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeSrvyType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeSrvyTypeQuery : SvCdeSrvyTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeSrvyTypeQuery class.
		/// </summary>
		public SvCdeSrvyTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeSrvyTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeSrvyTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeSrvyTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeSrvyTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeSrvyTypeQuery
		
	#region SeUserAccntFormDiffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeUserAccntFormDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntFormDiffFilters : SeUserAccntFormDiffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFormDiffFilters class.
		/// </summary>
		public SeUserAccntFormDiffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFormDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntFormDiffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFormDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntFormDiffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntFormDiffFilters
	
	#region SeUserAccntFormDiffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeUserAccntFormDiffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeUserAccntFormDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntFormDiffQuery : SeUserAccntFormDiffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFormDiffQuery class.
		/// </summary>
		public SeUserAccntFormDiffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFormDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntFormDiffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntFormDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntFormDiffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntFormDiffQuery
		
	#region SeFormControlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeFormControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeFormControlFilters : SeFormControlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeFormControlFilters class.
		/// </summary>
		public SeFormControlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeFormControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeFormControlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeFormControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeFormControlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeFormControlFilters
	
	#region SeFormControlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeFormControlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeFormControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeFormControlQuery : SeFormControlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeFormControlQuery class.
		/// </summary>
		public SeFormControlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeFormControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeFormControlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeFormControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeFormControlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeFormControlQuery
		
	#region SeBlockTransFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeBlockTrans"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeBlockTransFilters : SeBlockTransFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeBlockTransFilters class.
		/// </summary>
		public SeBlockTransFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeBlockTransFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeBlockTransFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeBlockTransFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeBlockTransFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeBlockTransFilters
	
	#region SeBlockTransQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeBlockTransParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeBlockTrans"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeBlockTransQuery : SeBlockTransParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeBlockTransQuery class.
		/// </summary>
		public SeBlockTransQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeBlockTransQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeBlockTransQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeBlockTransQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeBlockTransQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeBlockTransQuery
		
	#region SeUserAccntControlDiffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeUserAccntControlDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntControlDiffFilters : SeUserAccntControlDiffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntControlDiffFilters class.
		/// </summary>
		public SeUserAccntControlDiffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntControlDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntControlDiffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntControlDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntControlDiffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntControlDiffFilters
	
	#region SeUserAccntControlDiffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeUserAccntControlDiffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeUserAccntControlDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeUserAccntControlDiffQuery : SeUserAccntControlDiffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeUserAccntControlDiffQuery class.
		/// </summary>
		public SeUserAccntControlDiffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntControlDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeUserAccntControlDiffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeUserAccntControlDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeUserAccntControlDiffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeUserAccntControlDiffQuery
		
	#region SeStudTabControlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeStudTabControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeStudTabControlFilters : SeStudTabControlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeStudTabControlFilters class.
		/// </summary>
		public SeStudTabControlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeStudTabControlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeStudTabControlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeStudTabControlFilters
	
	#region SeStudTabControlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeStudTabControlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeStudTabControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeStudTabControlQuery : SeStudTabControlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeStudTabControlQuery class.
		/// </summary>
		public SeStudTabControlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeStudTabControlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeStudTabControlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeStudTabControlQuery
		
	#region SeStudTabUserTypeControlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeStudTabUserTypeControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeStudTabUserTypeControlFilters : SeStudTabUserTypeControlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeStudTabUserTypeControlFilters class.
		/// </summary>
		public SeStudTabUserTypeControlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabUserTypeControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeStudTabUserTypeControlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabUserTypeControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeStudTabUserTypeControlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeStudTabUserTypeControlFilters
	
	#region SeStudTabUserTypeControlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeStudTabUserTypeControlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeStudTabUserTypeControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeStudTabUserTypeControlQuery : SeStudTabUserTypeControlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeStudTabUserTypeControlQuery class.
		/// </summary>
		public SeStudTabUserTypeControlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabUserTypeControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeStudTabUserTypeControlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeStudTabUserTypeControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeStudTabUserTypeControlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeStudTabUserTypeControlQuery
		
	#region SvCdeTaskStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCdeTaskStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeTaskStatusFilters : SvCdeTaskStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeTaskStatusFilters class.
		/// </summary>
		public SvCdeTaskStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeTaskStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeTaskStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeTaskStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeTaskStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeTaskStatusFilters
	
	#region SvCdeTaskStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCdeTaskStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCdeTaskStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCdeTaskStatusQuery : SvCdeTaskStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCdeTaskStatusQuery class.
		/// </summary>
		public SvCdeTaskStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCdeTaskStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCdeTaskStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCdeTaskStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCdeTaskStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCdeTaskStatusQuery
		
	#region SvCodeEvalItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCodeEvalItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCodeEvalItemFilters : SvCodeEvalItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCodeEvalItemFilters class.
		/// </summary>
		public SvCodeEvalItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCodeEvalItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCodeEvalItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCodeEvalItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCodeEvalItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCodeEvalItemFilters
	
	#region SvCodeEvalItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCodeEvalItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCodeEvalItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCodeEvalItemQuery : SvCodeEvalItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCodeEvalItemQuery class.
		/// </summary>
		public SvCodeEvalItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCodeEvalItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCodeEvalItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCodeEvalItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCodeEvalItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCodeEvalItemQuery
		
	#region SysFormControlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SysFormControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysFormControlFilters : SysFormControlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysFormControlFilters class.
		/// </summary>
		public SysFormControlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysFormControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysFormControlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysFormControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysFormControlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysFormControlFilters
	
	#region SysFormControlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SysFormControlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SysFormControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysFormControlQuery : SysFormControlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysFormControlQuery class.
		/// </summary>
		public SysFormControlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysFormControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysFormControlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysFormControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysFormControlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysFormControlQuery
		
	#region SysMessagesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SysMessages"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysMessagesFilters : SysMessagesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysMessagesFilters class.
		/// </summary>
		public SysMessagesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysMessagesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysMessagesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysMessagesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysMessagesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysMessagesFilters
	
	#region SysMessagesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SysMessagesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SysMessages"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysMessagesQuery : SysMessagesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysMessagesQuery class.
		/// </summary>
		public SysMessagesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysMessagesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysMessagesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysMessagesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysMessagesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysMessagesQuery
		
	#region SysParamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SysParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysParamFilters : SysParamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysParamFilters class.
		/// </summary>
		public SysParamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysParamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysParamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysParamFilters
	
	#region SysParamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SysParamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SysParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysParamQuery : SysParamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysParamQuery class.
		/// </summary>
		public SysParamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysParamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysParamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysParamQuery
		
	#region SysServiceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SysService"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysServiceFilters : SysServiceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysServiceFilters class.
		/// </summary>
		public SysServiceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysServiceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysServiceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysServiceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysServiceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysServiceFilters
	
	#region SysServiceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SysServiceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SysService"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysServiceQuery : SysServiceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysServiceQuery class.
		/// </summary>
		public SysServiceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysServiceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysServiceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysServiceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysServiceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysServiceQuery
		
	#region SystemParamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SystemParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SystemParamFilters : SystemParamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SystemParamFilters class.
		/// </summary>
		public SystemParamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SystemParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SystemParamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SystemParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SystemParamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SystemParamFilters
	
	#region SystemParamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SystemParamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SystemParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SystemParamQuery : SystemParamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SystemParamQuery class.
		/// </summary>
		public SystemParamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SystemParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SystemParamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SystemParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SystemParamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SystemParamQuery
		
	#region SysFormFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SysForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysFormFilters : SysFormFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysFormFilters class.
		/// </summary>
		public SysFormFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysFormFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysFormFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysFormFilters
	
	#region SysFormQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SysFormParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SysForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SysFormQuery : SysFormParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SysFormQuery class.
		/// </summary>
		public SysFormQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SysFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SysFormQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SysFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SysFormQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SysFormQuery
		
	#region AdmAdmissionBandFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAdmissionBand"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAdmissionBandFilters : AdmAdmissionBandFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAdmissionBandFilters class.
		/// </summary>
		public AdmAdmissionBandFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAdmissionBandFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAdmissionBandFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAdmissionBandFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAdmissionBandFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAdmissionBandFilters
	
	#region AdmAdmissionBandQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAdmissionBandParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAdmissionBand"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAdmissionBandQuery : AdmAdmissionBandParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAdmissionBandQuery class.
		/// </summary>
		public AdmAdmissionBandQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAdmissionBandQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAdmissionBandQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAdmissionBandQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAdmissionBandQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAdmissionBandQuery
		
	#region SvUserTaskFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvUserTask"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserTaskFilters : SvUserTaskFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserTaskFilters class.
		/// </summary>
		public SvUserTaskFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserTaskFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserTaskFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserTaskFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserTaskFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserTaskFilters
	
	#region SvUserTaskQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvUserTaskParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvUserTask"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserTaskQuery : SvUserTaskParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserTaskQuery class.
		/// </summary>
		public SvUserTaskQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserTaskQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserTaskQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserTaskQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserTaskQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserTaskQuery
		
	#region SvUserMobTokenFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvUserMobToken"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserMobTokenFilters : SvUserMobTokenFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserMobTokenFilters class.
		/// </summary>
		public SvUserMobTokenFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserMobTokenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserMobTokenFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserMobTokenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserMobTokenFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserMobTokenFilters
	
	#region SvUserMobTokenQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvUserMobTokenParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvUserMobToken"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserMobTokenQuery : SvUserMobTokenParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserMobTokenQuery class.
		/// </summary>
		public SvUserMobTokenQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserMobTokenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserMobTokenQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserMobTokenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserMobTokenQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserMobTokenQuery
		
	#region SvStudStaffEvalExtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudStaffEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudStaffEvalExtFilters : SvStudStaffEvalExtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalExtFilters class.
		/// </summary>
		public SvStudStaffEvalExtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudStaffEvalExtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudStaffEvalExtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudStaffEvalExtFilters
	
	#region SvStudStaffEvalExtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudStaffEvalExtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudStaffEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudStaffEvalExtQuery : SvStudStaffEvalExtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalExtQuery class.
		/// </summary>
		public SvStudStaffEvalExtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudStaffEvalExtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudStaffEvalExtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudStaffEvalExtQuery
		
	#region SvUserRefreshTokenFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvUserRefreshToken"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserRefreshTokenFilters : SvUserRefreshTokenFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserRefreshTokenFilters class.
		/// </summary>
		public SvUserRefreshTokenFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserRefreshTokenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserRefreshTokenFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserRefreshTokenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserRefreshTokenFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserRefreshTokenFilters
	
	#region SvUserRefreshTokenQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvUserRefreshTokenParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvUserRefreshToken"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserRefreshTokenQuery : SvUserRefreshTokenParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserRefreshTokenQuery class.
		/// </summary>
		public SvUserRefreshTokenQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserRefreshTokenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserRefreshTokenQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserRefreshTokenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserRefreshTokenQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserRefreshTokenQuery
		
	#region TrnsCdeBusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsCdeBus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeBusFilters : TrnsCdeBusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeBusFilters class.
		/// </summary>
		public TrnsCdeBusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeBusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeBusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeBusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeBusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeBusFilters
	
	#region TrnsCdeBusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsCdeBusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsCdeBus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeBusQuery : TrnsCdeBusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeBusQuery class.
		/// </summary>
		public TrnsCdeBusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeBusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeBusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeBusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeBusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeBusQuery
		
	#region SvUserMessageFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvUserMessage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserMessageFilters : SvUserMessageFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserMessageFilters class.
		/// </summary>
		public SvUserMessageFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserMessageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserMessageFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserMessageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserMessageFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserMessageFilters
	
	#region SvUserMessageQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvUserMessageParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvUserMessage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvUserMessageQuery : SvUserMessageParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvUserMessageQuery class.
		/// </summary>
		public SvUserMessageQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvUserMessageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvUserMessageQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvUserMessageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvUserMessageQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvUserMessageQuery
		
	#region SvCourseEvalFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCourseEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCourseEvalFilters : SvCourseEvalFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalFilters class.
		/// </summary>
		public SvCourseEvalFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCourseEvalFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCourseEvalFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCourseEvalFilters
	
	#region SvCourseEvalQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCourseEvalParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCourseEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCourseEvalQuery : SvCourseEvalParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalQuery class.
		/// </summary>
		public SvCourseEvalQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCourseEvalQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCourseEvalQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCourseEvalQuery
		
	#region TrnsCdeColorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsCdeColor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeColorFilters : TrnsCdeColorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeColorFilters class.
		/// </summary>
		public TrnsCdeColorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeColorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeColorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeColorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeColorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeColorFilters
	
	#region TrnsCdeColorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsCdeColorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsCdeColor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeColorQuery : TrnsCdeColorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeColorQuery class.
		/// </summary>
		public TrnsCdeColorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeColorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeColorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeColorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeColorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeColorQuery
		
	#region WfCdeFunctionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="WfCdeFunction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class WfCdeFunctionFilters : WfCdeFunctionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the WfCdeFunctionFilters class.
		/// </summary>
		public WfCdeFunctionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the WfCdeFunctionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public WfCdeFunctionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the WfCdeFunctionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public WfCdeFunctionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion WfCdeFunctionFilters
	
	#region WfCdeFunctionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="WfCdeFunctionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="WfCdeFunction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class WfCdeFunctionQuery : WfCdeFunctionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the WfCdeFunctionQuery class.
		/// </summary>
		public WfCdeFunctionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the WfCdeFunctionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public WfCdeFunctionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the WfCdeFunctionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public WfCdeFunctionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion WfCdeFunctionQuery
		
	#region TrnsCdeDrvrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsCdeDrvr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeDrvrFilters : TrnsCdeDrvrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeDrvrFilters class.
		/// </summary>
		public TrnsCdeDrvrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeDrvrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeDrvrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeDrvrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeDrvrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeDrvrFilters
	
	#region TrnsCdeDrvrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsCdeDrvrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsCdeDrvr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeDrvrQuery : TrnsCdeDrvrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeDrvrQuery class.
		/// </summary>
		public TrnsCdeDrvrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeDrvrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeDrvrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeDrvrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeDrvrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeDrvrQuery
		
	#region SvCodeRatingSchmFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCodeRatingSchm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCodeRatingSchmFilters : SvCodeRatingSchmFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmFilters class.
		/// </summary>
		public SvCodeRatingSchmFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCodeRatingSchmFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCodeRatingSchmFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCodeRatingSchmFilters
	
	#region SvCodeRatingSchmQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCodeRatingSchmParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCodeRatingSchm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCodeRatingSchmQuery : SvCodeRatingSchmParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmQuery class.
		/// </summary>
		public SvCodeRatingSchmQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCodeRatingSchmQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCodeRatingSchmQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCodeRatingSchmQuery
		
	#region TrnsLineFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsLine"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsLineFilters : TrnsLineFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsLineFilters class.
		/// </summary>
		public TrnsLineFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsLineFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsLineFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsLineFilters
	
	#region TrnsLineQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsLineParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsLine"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsLineQuery : TrnsLineParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsLineQuery class.
		/// </summary>
		public TrnsLineQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsLineQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsLineQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsLineQuery
		
	#region TrnsCdeStopFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsCdeStop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeStopFilters : TrnsCdeStopFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeStopFilters class.
		/// </summary>
		public TrnsCdeStopFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeStopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeStopFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeStopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeStopFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeStopFilters
	
	#region TrnsCdeStopQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsCdeStopParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsCdeStop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsCdeStopQuery : TrnsCdeStopParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsCdeStopQuery class.
		/// </summary>
		public TrnsCdeStopQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeStopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsCdeStopQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsCdeStopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsCdeStopQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsCdeStopQuery
		
	#region SvCourseEvalExtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCourseEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCourseEvalExtFilters : SvCourseEvalExtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalExtFilters class.
		/// </summary>
		public SvCourseEvalExtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCourseEvalExtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCourseEvalExtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCourseEvalExtFilters
	
	#region SvCourseEvalExtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCourseEvalExtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCourseEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCourseEvalExtQuery : SvCourseEvalExtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalExtQuery class.
		/// </summary>
		public SvCourseEvalExtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCourseEvalExtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCourseEvalExtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCourseEvalExtQuery
		
	#region WfCdeActionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="WfCdeAction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class WfCdeActionFilters : WfCdeActionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the WfCdeActionFilters class.
		/// </summary>
		public WfCdeActionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the WfCdeActionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public WfCdeActionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the WfCdeActionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public WfCdeActionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion WfCdeActionFilters
	
	#region WfCdeActionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="WfCdeActionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="WfCdeAction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class WfCdeActionQuery : WfCdeActionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the WfCdeActionQuery class.
		/// </summary>
		public WfCdeActionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the WfCdeActionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public WfCdeActionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the WfCdeActionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public WfCdeActionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion WfCdeActionQuery
		
	#region TrnsLineStopFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsLineStop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsLineStopFilters : TrnsLineStopFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsLineStopFilters class.
		/// </summary>
		public TrnsLineStopFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineStopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsLineStopFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineStopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsLineStopFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsLineStopFilters
	
	#region TrnsLineStopQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsLineStopParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsLineStop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsLineStopQuery : TrnsLineStopParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsLineStopQuery class.
		/// </summary>
		public TrnsLineStopQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineStopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsLineStopQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsLineStopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsLineStopQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsLineStopQuery
		
	#region UsrTopLinkFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="UsrTopLink"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UsrTopLinkFilters : UsrTopLinkFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UsrTopLinkFilters class.
		/// </summary>
		public UsrTopLinkFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the UsrTopLinkFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UsrTopLinkFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UsrTopLinkFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UsrTopLinkFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UsrTopLinkFilters
	
	#region UsrTopLinkQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="UsrTopLinkParameterBuilder"/> class
	/// that is used exclusively with a <see cref="UsrTopLink"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class UsrTopLinkQuery : UsrTopLinkParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the UsrTopLinkQuery class.
		/// </summary>
		public UsrTopLinkQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the UsrTopLinkQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public UsrTopLinkQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the UsrTopLinkQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public UsrTopLinkQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion UsrTopLinkQuery
		
	#region TrnsStudCarStkrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsStudCarStkr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsStudCarStkrFilters : TrnsStudCarStkrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrFilters class.
		/// </summary>
		public TrnsStudCarStkrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsStudCarStkrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsStudCarStkrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsStudCarStkrFilters
	
	#region TrnsStudCarStkrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsStudCarStkrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsStudCarStkr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsStudCarStkrQuery : TrnsStudCarStkrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrQuery class.
		/// </summary>
		public TrnsStudCarStkrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsStudCarStkrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsStudCarStkrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsStudCarStkrQuery
		
	#region SvStudStaffEvalFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudStaffEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudStaffEvalFilters : SvStudStaffEvalFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalFilters class.
		/// </summary>
		public SvStudStaffEvalFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudStaffEvalFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudStaffEvalFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudStaffEvalFilters
	
	#region SvStudStaffEvalQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudStaffEvalParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudStaffEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudStaffEvalQuery : SvStudStaffEvalParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalQuery class.
		/// </summary>
		public SvStudStaffEvalQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudStaffEvalQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudStaffEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudStaffEvalQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudStaffEvalQuery
		
	#region TrnsStudReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TrnsStudReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsStudReqFilters : TrnsStudReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsStudReqFilters class.
		/// </summary>
		public TrnsStudReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsStudReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsStudReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsStudReqFilters
	
	#region TrnsStudReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TrnsStudReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TrnsStudReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TrnsStudReqQuery : TrnsStudReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TrnsStudReqQuery class.
		/// </summary>
		public TrnsStudReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TrnsStudReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TrnsStudReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TrnsStudReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TrnsStudReqQuery
		
	#region SvStudPollFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudPoll"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudPollFilters : SvStudPollFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudPollFilters class.
		/// </summary>
		public SvStudPollFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudPollFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudPollFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudPollFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudPollFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudPollFilters
	
	#region SvStudPollQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudPollParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudPoll"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudPollQuery : SvStudPollParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudPollQuery class.
		/// </summary>
		public SvStudPollQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudPollQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudPollQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudPollQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudPollQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudPollQuery
		
	#region SvStudLockerReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudLockerReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudLockerReqFilters : SvStudLockerReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqFilters class.
		/// </summary>
		public SvStudLockerReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudLockerReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudLockerReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudLockerReqFilters
	
	#region SvStudLockerReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudLockerReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudLockerReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudLockerReqQuery : SvStudLockerReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqQuery class.
		/// </summary>
		public SvStudLockerReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudLockerReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudLockerReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudLockerReqQuery
		
	#region SvSrvyHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvSrvyHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyHdrFilters : SvSrvyHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrFilters class.
		/// </summary>
		public SvSrvyHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyHdrFilters
	
	#region SvSrvyHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvSrvyHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvSrvyHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyHdrQuery : SvSrvyHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrQuery class.
		/// </summary>
		public SvSrvyHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyHdrQuery
		
	#region SvPollHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvPollHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvPollHdrFilters : SvPollHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvPollHdrFilters class.
		/// </summary>
		public SvPollHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvPollHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvPollHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvPollHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvPollHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvPollHdrFilters
	
	#region SvPollHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvPollHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvPollHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvPollHdrQuery : SvPollHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvPollHdrQuery class.
		/// </summary>
		public SvPollHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvPollHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvPollHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvPollHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvPollHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvPollHdrQuery
		
	#region SvSrvyAnswrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvSrvyAnswr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyAnswrFilters : SvSrvyAnswrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyAnswrFilters class.
		/// </summary>
		public SvSrvyAnswrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyAnswrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyAnswrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyAnswrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyAnswrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyAnswrFilters
	
	#region SvSrvyAnswrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvSrvyAnswrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvSrvyAnswr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyAnswrQuery : SvSrvyAnswrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyAnswrQuery class.
		/// </summary>
		public SvSrvyAnswrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyAnswrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyAnswrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyAnswrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyAnswrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyAnswrQuery
		
	#region SvPollDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvPollDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvPollDtlFilters : SvPollDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvPollDtlFilters class.
		/// </summary>
		public SvPollDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvPollDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvPollDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvPollDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvPollDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvPollDtlFilters
	
	#region SvPollDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvPollDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvPollDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvPollDtlQuery : SvPollDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvPollDtlQuery class.
		/// </summary>
		public SvPollDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvPollDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvPollDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvPollDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvPollDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvPollDtlQuery
		
	#region SvSrvyRespondQstnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvSrvyRespondQstn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyRespondQstnFilters : SvSrvyRespondQstnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondQstnFilters class.
		/// </summary>
		public SvSrvyRespondQstnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondQstnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyRespondQstnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondQstnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyRespondQstnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyRespondQstnFilters
	
	#region SvSrvyRespondQstnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvSrvyRespondQstnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvSrvyRespondQstn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyRespondQstnQuery : SvSrvyRespondQstnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondQstnQuery class.
		/// </summary>
		public SvSrvyRespondQstnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondQstnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyRespondQstnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondQstnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyRespondQstnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyRespondQstnQuery
		
	#region SvMsgTmpltParamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvMsgTmpltParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvMsgTmpltParamFilters : SvMsgTmpltParamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvMsgTmpltParamFilters class.
		/// </summary>
		public SvMsgTmpltParamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvMsgTmpltParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvMsgTmpltParamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvMsgTmpltParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvMsgTmpltParamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvMsgTmpltParamFilters
	
	#region SvMsgTmpltParamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvMsgTmpltParamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvMsgTmpltParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvMsgTmpltParamQuery : SvMsgTmpltParamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvMsgTmpltParamQuery class.
		/// </summary>
		public SvMsgTmpltParamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvMsgTmpltParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvMsgTmpltParamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvMsgTmpltParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvMsgTmpltParamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvMsgTmpltParamQuery
		
	#region SvMessageSendPrvFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvMessageSendPrv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvMessageSendPrvFilters : SvMessageSendPrvFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvMessageSendPrvFilters class.
		/// </summary>
		public SvMessageSendPrvFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvMessageSendPrvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvMessageSendPrvFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvMessageSendPrvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvMessageSendPrvFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvMessageSendPrvFilters
	
	#region SvMessageSendPrvQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvMessageSendPrvParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvMessageSendPrv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvMessageSendPrvQuery : SvMessageSendPrvParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvMessageSendPrvQuery class.
		/// </summary>
		public SvMessageSendPrvQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvMessageSendPrvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvMessageSendPrvQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvMessageSendPrvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvMessageSendPrvQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvMessageSendPrvQuery
		
	#region SvCodeRatingSchmDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCodeRatingSchmDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCodeRatingSchmDtlFilters : SvCodeRatingSchmDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmDtlFilters class.
		/// </summary>
		public SvCodeRatingSchmDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCodeRatingSchmDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCodeRatingSchmDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCodeRatingSchmDtlFilters
	
	#region SvCodeRatingSchmDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCodeRatingSchmDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCodeRatingSchmDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCodeRatingSchmDtlQuery : SvCodeRatingSchmDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmDtlQuery class.
		/// </summary>
		public SvCodeRatingSchmDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCodeRatingSchmDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCodeRatingSchmDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCodeRatingSchmDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCodeRatingSchmDtlQuery
		
	#region SvCourseEvalItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvCourseEvalItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCourseEvalItemFilters : SvCourseEvalItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalItemFilters class.
		/// </summary>
		public SvCourseEvalItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCourseEvalItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCourseEvalItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCourseEvalItemFilters
	
	#region SvCourseEvalItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvCourseEvalItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvCourseEvalItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvCourseEvalItemQuery : SvCourseEvalItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalItemQuery class.
		/// </summary>
		public SvCourseEvalItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvCourseEvalItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvCourseEvalItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvCourseEvalItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvCourseEvalItemQuery
		
	#region SvLecNoteFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvLecNote"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvLecNoteFilters : SvLecNoteFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvLecNoteFilters class.
		/// </summary>
		public SvLecNoteFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvLecNoteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvLecNoteFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvLecNoteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvLecNoteFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvLecNoteFilters
	
	#region SvLecNoteQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvLecNoteParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvLecNote"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvLecNoteQuery : SvLecNoteParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvLecNoteQuery class.
		/// </summary>
		public SvLecNoteQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvLecNoteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvLecNoteQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvLecNoteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvLecNoteQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvLecNoteQuery
		
	#region SvMessageFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvMessage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvMessageFilters : SvMessageFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvMessageFilters class.
		/// </summary>
		public SvMessageFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvMessageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvMessageFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvMessageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvMessageFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvMessageFilters
	
	#region SvMessageQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvMessageParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvMessage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvMessageQuery : SvMessageParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvMessageQuery class.
		/// </summary>
		public SvMessageQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvMessageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvMessageQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvMessageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvMessageQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvMessageQuery
		
	#region SvSrvyQstnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvSrvyQstn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyQstnFilters : SvSrvyQstnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnFilters class.
		/// </summary>
		public SvSrvyQstnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyQstnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyQstnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyQstnFilters
	
	#region SvSrvyQstnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvSrvyQstnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvSrvyQstn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyQstnQuery : SvSrvyQstnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnQuery class.
		/// </summary>
		public SvSrvyQstnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyQstnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyQstnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyQstnQuery
		
	#region SvStudCompFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudCompFilters : SvStudCompFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudCompFilters class.
		/// </summary>
		public SvStudCompFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudCompFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudCompFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudCompFilters
	
	#region SvStudCompQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudCompParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudCompQuery : SvStudCompParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudCompQuery class.
		/// </summary>
		public SvStudCompQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudCompQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudCompQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudCompQuery
		
	#region SvSrvyRespondAnswrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvSrvyRespondAnswr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyRespondAnswrFilters : SvSrvyRespondAnswrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondAnswrFilters class.
		/// </summary>
		public SvSrvyRespondAnswrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondAnswrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyRespondAnswrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondAnswrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyRespondAnswrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyRespondAnswrFilters
	
	#region SvSrvyRespondAnswrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvSrvyRespondAnswrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvSrvyRespondAnswr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvSrvyRespondAnswrQuery : SvSrvyRespondAnswrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondAnswrQuery class.
		/// </summary>
		public SvSrvyRespondAnswrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondAnswrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvSrvyRespondAnswrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvSrvyRespondAnswrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvSrvyRespondAnswrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvSrvyRespondAnswrQuery
		
	#region SvStudCourseEvalFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudCourseEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudCourseEvalFilters : SvStudCourseEvalFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalFilters class.
		/// </summary>
		public SvStudCourseEvalFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudCourseEvalFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudCourseEvalFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudCourseEvalFilters
	
	#region SvStudCourseEvalQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudCourseEvalParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudCourseEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudCourseEvalQuery : SvStudCourseEvalParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalQuery class.
		/// </summary>
		public SvStudCourseEvalQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudCourseEvalQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudCourseEvalQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudCourseEvalQuery
		
	#region SvStudAskAdvFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudAskAdv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudAskAdvFilters : SvStudAskAdvFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvFilters class.
		/// </summary>
		public SvStudAskAdvFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudAskAdvFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudAskAdvFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudAskAdvFilters
	
	#region SvStudAskAdvQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudAskAdvParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudAskAdv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudAskAdvQuery : SvStudAskAdvParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvQuery class.
		/// </summary>
		public SvStudAskAdvQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudAskAdvQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudAskAdvQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudAskAdvQuery
		
	#region SvStudCourseEvalExtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudCourseEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudCourseEvalExtFilters : SvStudCourseEvalExtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalExtFilters class.
		/// </summary>
		public SvStudCourseEvalExtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudCourseEvalExtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudCourseEvalExtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudCourseEvalExtFilters
	
	#region SvStudCourseEvalExtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudCourseEvalExtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudCourseEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudCourseEvalExtQuery : SvStudCourseEvalExtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalExtQuery class.
		/// </summary>
		public SvStudCourseEvalExtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudCourseEvalExtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudCourseEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudCourseEvalExtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudCourseEvalExtQuery
		
	#region SvStaffEvlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStaffEvl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffEvlFilters : SvStaffEvlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffEvlFilters class.
		/// </summary>
		public SvStaffEvlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffEvlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffEvlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffEvlFilters
	
	#region SvStaffEvlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStaffEvlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStaffEvl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffEvlQuery : SvStaffEvlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffEvlQuery class.
		/// </summary>
		public SvStaffEvlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffEvlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffEvlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffEvlQuery
		
	#region SvStaffPollFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStaffPoll"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffPollFilters : SvStaffPollFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffPollFilters class.
		/// </summary>
		public SvStaffPollFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffPollFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffPollFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffPollFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffPollFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffPollFilters
	
	#region SvStaffPollQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStaffPollParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStaffPoll"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffPollQuery : SvStaffPollParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffPollQuery class.
		/// </summary>
		public SvStaffPollQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffPollQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffPollQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffPollQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffPollQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffPollQuery
		
	#region SvStaffEvalExtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStaffEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffEvalExtFilters : SvStaffEvalExtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalExtFilters class.
		/// </summary>
		public SvStaffEvalExtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffEvalExtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffEvalExtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffEvalExtFilters
	
	#region SvStaffEvalExtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStaffEvalExtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStaffEvalExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffEvalExtQuery : SvStaffEvalExtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalExtQuery class.
		/// </summary>
		public SvStaffEvalExtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffEvalExtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffEvalExtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffEvalExtQuery
		
	#region SvStudAskAdvReFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStudAskAdvRe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudAskAdvReFilters : SvStudAskAdvReFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvReFilters class.
		/// </summary>
		public SvStudAskAdvReFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvReFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudAskAdvReFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvReFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudAskAdvReFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudAskAdvReFilters
	
	#region SvStudAskAdvReQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStudAskAdvReParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStudAskAdvRe"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStudAskAdvReQuery : SvStudAskAdvReParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvReQuery class.
		/// </summary>
		public SvStudAskAdvReQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvReQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStudAskAdvReQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStudAskAdvReQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStudAskAdvReQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStudAskAdvReQuery
		
	#region SeApplicationLogFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeApplicationLog"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeApplicationLogFilters : SeApplicationLogFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeApplicationLogFilters class.
		/// </summary>
		public SeApplicationLogFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationLogFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeApplicationLogFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationLogFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeApplicationLogFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeApplicationLogFilters
	
	#region SeApplicationLogQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeApplicationLogParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeApplicationLog"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeApplicationLogQuery : SeApplicationLogParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeApplicationLogQuery class.
		/// </summary>
		public SeApplicationLogQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationLogQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeApplicationLogQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationLogQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeApplicationLogQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeApplicationLogQuery
		
	#region SvStaffEvalItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SvStaffEvalItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffEvalItemFilters : SvStaffEvalItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalItemFilters class.
		/// </summary>
		public SvStaffEvalItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffEvalItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffEvalItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffEvalItemFilters
	
	#region SvStaffEvalItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SvStaffEvalItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SvStaffEvalItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SvStaffEvalItemQuery : SvStaffEvalItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalItemQuery class.
		/// </summary>
		public SvStaffEvalItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SvStaffEvalItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SvStaffEvalItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SvStaffEvalItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SvStaffEvalItemQuery
		
	#region SaCodeScDegFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeScDeg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeScDegFilters : SaCodeScDegFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeScDegFilters class.
		/// </summary>
		public SaCodeScDegFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeScDegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeScDegFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeScDegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeScDegFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeScDegFilters
	
	#region SaCodeScDegQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeScDegParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeScDeg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeScDegQuery : SaCodeScDegParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeScDegQuery class.
		/// </summary>
		public SaCodeScDegQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeScDegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeScDegQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeScDegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeScDegQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeScDegQuery
		
	#region SaCodeJobStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeJobStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobStatusFilters : SaCodeJobStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobStatusFilters class.
		/// </summary>
		public SaCodeJobStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobStatusFilters
	
	#region SaCodeJobStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeJobStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeJobStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobStatusQuery : SaCodeJobStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobStatusQuery class.
		/// </summary>
		public SaCodeJobStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobStatusQuery
		
	#region SaPromotionCondFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPromotionCond"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionCondFilters : SaPromotionCondFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondFilters class.
		/// </summary>
		public SaPromotionCondFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionCondFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionCondFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionCondFilters
	
	#region SaPromotionCondQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPromotionCondParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPromotionCond"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionCondQuery : SaPromotionCondParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondQuery class.
		/// </summary>
		public SaPromotionCondQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionCondQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionCondQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionCondQuery
		
	#region AsCodeDegreeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AsCodeDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AsCodeDegreeFilters : AsCodeDegreeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeFilters class.
		/// </summary>
		public AsCodeDegreeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AsCodeDegreeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AsCodeDegreeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AsCodeDegreeFilters
	
	#region AsCodeDegreeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AsCodeDegreeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AsCodeDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AsCodeDegreeQuery : AsCodeDegreeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeQuery class.
		/// </summary>
		public AsCodeDegreeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AsCodeDegreeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AsCodeDegreeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AsCodeDegreeQuery
		
	#region SaStfMemberFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaStfMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfMemberFilters : SaStfMemberFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfMemberFilters class.
		/// </summary>
		public SaStfMemberFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfMemberFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfMemberFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfMemberFilters
	
	#region SaStfMemberQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaStfMemberParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaStfMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfMemberQuery : SaStfMemberParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfMemberQuery class.
		/// </summary>
		public SaStfMemberQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfMemberQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfMemberQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfMemberQuery
		
	#region SaPersonIdFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPersonId"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPersonIdFilters : SaPersonIdFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPersonIdFilters class.
		/// </summary>
		public SaPersonIdFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPersonIdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPersonIdFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPersonIdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPersonIdFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPersonIdFilters
	
	#region SaPersonIdQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPersonIdParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPersonId"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPersonIdQuery : SaPersonIdParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPersonIdQuery class.
		/// </summary>
		public SaPersonIdQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPersonIdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPersonIdQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPersonIdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPersonIdQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPersonIdQuery
		
	#region SaPromotionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPromotion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionFilters : SaPromotionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionFilters class.
		/// </summary>
		public SaPromotionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionFilters
	
	#region SaPromotionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPromotionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPromotion"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionQuery : SaPromotionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionQuery class.
		/// </summary>
		public SaPromotionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionQuery
		
	#region SaOfficeHourFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaOfficeHour"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaOfficeHourFilters : SaOfficeHourFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaOfficeHourFilters class.
		/// </summary>
		public SaOfficeHourFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaOfficeHourFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaOfficeHourFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaOfficeHourFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaOfficeHourFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaOfficeHourFilters
	
	#region SaOfficeHourQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaOfficeHourParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaOfficeHour"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaOfficeHourQuery : SaOfficeHourParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaOfficeHourQuery class.
		/// </summary>
		public SaOfficeHourQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaOfficeHourQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaOfficeHourQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaOfficeHourQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaOfficeHourQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaOfficeHourQuery
		
	#region SaCodeSummeryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeSummery"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeSummeryFilters : SaCodeSummeryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeSummeryFilters class.
		/// </summary>
		public SaCodeSummeryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSummeryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeSummeryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSummeryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeSummeryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeSummeryFilters
	
	#region SaCodeSummeryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeSummeryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeSummery"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeSummeryQuery : SaCodeSummeryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeSummeryQuery class.
		/// </summary>
		public SaCodeSummeryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSummeryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeSummeryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSummeryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeSummeryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeSummeryQuery
		
	#region SaMilitaryStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaMilitaryStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaMilitaryStatusFilters : SaMilitaryStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaMilitaryStatusFilters class.
		/// </summary>
		public SaMilitaryStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaMilitaryStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaMilitaryStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaMilitaryStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaMilitaryStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaMilitaryStatusFilters
	
	#region SaMilitaryStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaMilitaryStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaMilitaryStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaMilitaryStatusQuery : SaMilitaryStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaMilitaryStatusQuery class.
		/// </summary>
		public SaMilitaryStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaMilitaryStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaMilitaryStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaMilitaryStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaMilitaryStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaMilitaryStatusQuery
		
	#region SaMiltaryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaMiltary"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaMiltaryFilters : SaMiltaryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaMiltaryFilters class.
		/// </summary>
		public SaMiltaryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaMiltaryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaMiltaryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaMiltaryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaMiltaryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaMiltaryFilters
	
	#region SaMiltaryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaMiltaryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaMiltary"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaMiltaryQuery : SaMiltaryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaMiltaryQuery class.
		/// </summary>
		public SaMiltaryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaMiltaryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaMiltaryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaMiltaryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaMiltaryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaMiltaryQuery
		
	#region SaJobStartStatmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaJobStartStatment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaJobStartStatmentFilters : SaJobStartStatmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaJobStartStatmentFilters class.
		/// </summary>
		public SaJobStartStatmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaJobStartStatmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaJobStartStatmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaJobStartStatmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaJobStartStatmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaJobStartStatmentFilters
	
	#region SaJobStartStatmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaJobStartStatmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaJobStartStatment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaJobStartStatmentQuery : SaJobStartStatmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaJobStartStatmentQuery class.
		/// </summary>
		public SaJobStartStatmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaJobStartStatmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaJobStartStatmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaJobStartStatmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaJobStartStatmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaJobStartStatmentQuery
		
	#region SaJobStoppageFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaJobStoppage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaJobStoppageFilters : SaJobStoppageFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaJobStoppageFilters class.
		/// </summary>
		public SaJobStoppageFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaJobStoppageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaJobStoppageFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaJobStoppageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaJobStoppageFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaJobStoppageFilters
	
	#region SaJobStoppageQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaJobStoppageParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaJobStoppage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaJobStoppageQuery : SaJobStoppageParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaJobStoppageQuery class.
		/// </summary>
		public SaJobStoppageQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaJobStoppageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaJobStoppageQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaJobStoppageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaJobStoppageQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaJobStoppageQuery
		
	#region SaKeywordListFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaKeywordList"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaKeywordListFilters : SaKeywordListFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaKeywordListFilters class.
		/// </summary>
		public SaKeywordListFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaKeywordListFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaKeywordListFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaKeywordListFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaKeywordListFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaKeywordListFilters
	
	#region SaKeywordListQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaKeywordListParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaKeywordList"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaKeywordListQuery : SaKeywordListParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaKeywordListQuery class.
		/// </summary>
		public SaKeywordListQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaKeywordListQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaKeywordListQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaKeywordListQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaKeywordListQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaKeywordListQuery
		
	#region SaPromotionCondStsfFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPromotionCondStsf"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionCondStsfFilters : SaPromotionCondStsfFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondStsfFilters class.
		/// </summary>
		public SaPromotionCondStsfFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondStsfFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionCondStsfFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondStsfFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionCondStsfFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionCondStsfFilters
	
	#region SaPromotionCondStsfQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPromotionCondStsfParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPromotionCondStsf"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionCondStsfQuery : SaPromotionCondStsfParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondStsfQuery class.
		/// </summary>
		public SaPromotionCondStsfQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondStsfQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionCondStsfQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionCondStsfQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionCondStsfQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionCondStsfQuery
		
	#region SeApplicationAuditFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeApplicationAudit"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeApplicationAuditFilters : SeApplicationAuditFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditFilters class.
		/// </summary>
		public SeApplicationAuditFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeApplicationAuditFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeApplicationAuditFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeApplicationAuditFilters
	
	#region SeApplicationAuditQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeApplicationAuditParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeApplicationAudit"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeApplicationAuditQuery : SeApplicationAuditParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditQuery class.
		/// </summary>
		public SeApplicationAuditQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeApplicationAuditQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeApplicationAuditQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeApplicationAuditQuery
		
	#region SaPromotionRequestFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPromotionRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionRequestFilters : SaPromotionRequestFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionRequestFilters class.
		/// </summary>
		public SaPromotionRequestFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionRequestFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionRequestFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionRequestFilters
	
	#region SaPromotionRequestQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPromotionRequestParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPromotionRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPromotionRequestQuery : SaPromotionRequestParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPromotionRequestQuery class.
		/// </summary>
		public SaPromotionRequestQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPromotionRequestQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPromotionRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPromotionRequestQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPromotionRequestQuery
		
	#region SaPublicationFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPublication"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPublicationFilters : SaPublicationFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPublicationFilters class.
		/// </summary>
		public SaPublicationFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPublicationFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPublicationFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPublicationFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPublicationFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPublicationFilters
	
	#region SaPublicationQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPublicationParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPublication"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPublicationQuery : SaPublicationParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPublicationQuery class.
		/// </summary>
		public SaPublicationQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPublicationQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPublicationQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPublicationQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPublicationQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPublicationQuery
		
	#region EdAcadYearFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdAcadYear"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadYearFilters : EdAcadYearFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFilters class.
		/// </summary>
		public EdAcadYearFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadYearFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadYearFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadYearFilters
	
	#region EdAcadYearQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdAcadYearParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdAcadYear"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadYearQuery : EdAcadYearParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadYearQuery class.
		/// </summary>
		public EdAcadYearQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadYearQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadYearQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadYearQuery
		
	#region SaPunishBylawAuthFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPunishBylawAuth"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPunishBylawAuthFilters : SaPunishBylawAuthFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPunishBylawAuthFilters class.
		/// </summary>
		public SaPunishBylawAuthFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPunishBylawAuthFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPunishBylawAuthFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPunishBylawAuthFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPunishBylawAuthFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPunishBylawAuthFilters
	
	#region SaPunishBylawAuthQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPunishBylawAuthParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPunishBylawAuth"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPunishBylawAuthQuery : SaPunishBylawAuthParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPunishBylawAuthQuery class.
		/// </summary>
		public SaPunishBylawAuthQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPunishBylawAuthQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPunishBylawAuthQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPunishBylawAuthQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPunishBylawAuthQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPunishBylawAuthQuery
		
	#region SaRaiseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaRaise"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaRaiseFilters : SaRaiseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaRaiseFilters class.
		/// </summary>
		public SaRaiseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaRaiseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaRaiseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaRaiseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaRaiseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaRaiseFilters
	
	#region SaRaiseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaRaiseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaRaise"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaRaiseQuery : SaRaiseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaRaiseQuery class.
		/// </summary>
		public SaRaiseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaRaiseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaRaiseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaRaiseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaRaiseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaRaiseQuery
		
	#region SaRelativeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaRelative"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaRelativeFilters : SaRelativeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaRelativeFilters class.
		/// </summary>
		public SaRelativeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaRelativeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaRelativeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaRelativeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaRelativeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaRelativeFilters
	
	#region SaRelativeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaRelativeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaRelative"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaRelativeQuery : SaRelativeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaRelativeQuery class.
		/// </summary>
		public SaRelativeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaRelativeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaRelativeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaRelativeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaRelativeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaRelativeQuery
		
	#region SaResearchTeamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaResearchTeam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaResearchTeamFilters : SaResearchTeamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaResearchTeamFilters class.
		/// </summary>
		public SaResearchTeamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaResearchTeamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaResearchTeamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaResearchTeamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaResearchTeamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaResearchTeamFilters
	
	#region SaResearchTeamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaResearchTeamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaResearchTeam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaResearchTeamQuery : SaResearchTeamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaResearchTeamQuery class.
		/// </summary>
		public SaResearchTeamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaResearchTeamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaResearchTeamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaResearchTeamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaResearchTeamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaResearchTeamQuery
		
	#region SaPunishmentBylawsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPunishmentBylaws"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPunishmentBylawsFilters : SaPunishmentBylawsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPunishmentBylawsFilters class.
		/// </summary>
		public SaPunishmentBylawsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentBylawsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPunishmentBylawsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentBylawsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPunishmentBylawsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPunishmentBylawsFilters
	
	#region SaPunishmentBylawsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPunishmentBylawsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPunishmentBylaws"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPunishmentBylawsQuery : SaPunishmentBylawsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPunishmentBylawsQuery class.
		/// </summary>
		public SaPunishmentBylawsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentBylawsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPunishmentBylawsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentBylawsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPunishmentBylawsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPunishmentBylawsQuery
		
	#region SaJobActivityFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaJobActivity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaJobActivityFilters : SaJobActivityFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaJobActivityFilters class.
		/// </summary>
		public SaJobActivityFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaJobActivityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaJobActivityFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaJobActivityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaJobActivityFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaJobActivityFilters
	
	#region SaJobActivityQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaJobActivityParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaJobActivity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaJobActivityQuery : SaJobActivityParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaJobActivityQuery class.
		/// </summary>
		public SaJobActivityQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaJobActivityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaJobActivityQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaJobActivityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaJobActivityQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaJobActivityQuery
		
	#region SaPunishmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaPunishment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPunishmentFilters : SaPunishmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPunishmentFilters class.
		/// </summary>
		public SaPunishmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPunishmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPunishmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPunishmentFilters
	
	#region SaPunishmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaPunishmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaPunishment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaPunishmentQuery : SaPunishmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaPunishmentQuery class.
		/// </summary>
		public SaPunishmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaPunishmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaPunishmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaPunishmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaPunishmentQuery
		
	#region SaTransferFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaTransfer"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaTransferFilters : SaTransferFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaTransferFilters class.
		/// </summary>
		public SaTransferFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaTransferFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaTransferFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaTransferFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaTransferFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaTransferFilters
	
	#region SaTransferQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaTransferParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaTransfer"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaTransferQuery : SaTransferParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaTransferQuery class.
		/// </summary>
		public SaTransferQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaTransferQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaTransferQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaTransferQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaTransferQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaTransferQuery
		
	#region SaScCommFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaScComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScCommFilters : SaScCommFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScCommFilters class.
		/// </summary>
		public SaScCommFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScCommFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScCommFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScCommFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScCommFilters
	
	#region SaScCommQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaScCommParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaScComm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScCommQuery : SaScCommParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScCommQuery class.
		/// </summary>
		public SaScCommQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScCommQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScCommQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScCommQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScCommQuery
		
	#region SaCodeRatingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeRating"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeRatingFilters : SaCodeRatingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeRatingFilters class.
		/// </summary>
		public SaCodeRatingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeRatingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeRatingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeRatingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeRatingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeRatingFilters
	
	#region SaCodeRatingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeRatingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeRating"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeRatingQuery : SaCodeRatingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeRatingQuery class.
		/// </summary>
		public SaCodeRatingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeRatingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeRatingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeRatingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeRatingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeRatingQuery
		
	#region SaFinStatmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaFinStatment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaFinStatmentFilters : SaFinStatmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaFinStatmentFilters class.
		/// </summary>
		public SaFinStatmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaFinStatmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaFinStatmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaFinStatmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaFinStatmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaFinStatmentFilters
	
	#region SaFinStatmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaFinStatmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaFinStatment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaFinStatmentQuery : SaFinStatmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaFinStatmentQuery class.
		/// </summary>
		public SaFinStatmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaFinStatmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaFinStatmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaFinStatmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaFinStatmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaFinStatmentQuery
		
	#region SaCodePunishRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodePunishRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodePunishRsnFilters : SaCodePunishRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodePunishRsnFilters class.
		/// </summary>
		public SaCodePunishRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodePunishRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodePunishRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodePunishRsnFilters
	
	#region SaCodePunishRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodePunishRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodePunishRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodePunishRsnQuery : SaCodePunishRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodePunishRsnQuery class.
		/// </summary>
		public SaCodePunishRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodePunishRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodePunishRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodePunishRsnQuery
		
	#region SaExtDelFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaExtDel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaExtDelFilters : SaExtDelFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaExtDelFilters class.
		/// </summary>
		public SaExtDelFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaExtDelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaExtDelFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaExtDelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaExtDelFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaExtDelFilters
	
	#region SaExtDelQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaExtDelParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaExtDel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaExtDelQuery : SaExtDelParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaExtDelQuery class.
		/// </summary>
		public SaExtDelQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaExtDelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaExtDelQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaExtDelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaExtDelQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaExtDelQuery
		
	#region SaCodePunishingAuthorityFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodePunishingAuthority"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodePunishingAuthorityFilters : SaCodePunishingAuthorityFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodePunishingAuthorityFilters class.
		/// </summary>
		public SaCodePunishingAuthorityFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishingAuthorityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodePunishingAuthorityFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishingAuthorityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodePunishingAuthorityFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodePunishingAuthorityFilters
	
	#region SaCodePunishingAuthorityQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodePunishingAuthorityParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodePunishingAuthority"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodePunishingAuthorityQuery : SaCodePunishingAuthorityParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodePunishingAuthorityQuery class.
		/// </summary>
		public SaCodePunishingAuthorityQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishingAuthorityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodePunishingAuthorityQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishingAuthorityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodePunishingAuthorityQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodePunishingAuthorityQuery
		
	#region SaCodePunishFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodePunish"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodePunishFilters : SaCodePunishFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodePunishFilters class.
		/// </summary>
		public SaCodePunishFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodePunishFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodePunishFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodePunishFilters
	
	#region SaCodePunishQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodePunishParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodePunish"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodePunishQuery : SaCodePunishParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodePunishQuery class.
		/// </summary>
		public SaCodePunishQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodePunishQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodePunishQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodePunishQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodePunishQuery
		
	#region SaCodeResearchCoopFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeResearchCoop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeResearchCoopFilters : SaCodeResearchCoopFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeResearchCoopFilters class.
		/// </summary>
		public SaCodeResearchCoopFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeResearchCoopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeResearchCoopFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeResearchCoopFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeResearchCoopFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeResearchCoopFilters
	
	#region SaCodeResearchCoopQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeResearchCoopParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeResearchCoop"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeResearchCoopQuery : SaCodeResearchCoopParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeResearchCoopQuery class.
		/// </summary>
		public SaCodeResearchCoopQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeResearchCoopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeResearchCoopQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeResearchCoopQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeResearchCoopQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeResearchCoopQuery
		
	#region EdCodeSemesterTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeSemesterType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSemesterTypeFilters : EdCodeSemesterTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterTypeFilters class.
		/// </summary>
		public EdCodeSemesterTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSemesterTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSemesterTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSemesterTypeFilters
	
	#region EdCodeSemesterTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeSemesterTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeSemesterType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSemesterTypeQuery : EdCodeSemesterTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterTypeQuery class.
		/// </summary>
		public EdCodeSemesterTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSemesterTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSemesterTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSemesterTypeQuery
		
	#region EdCodeSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSemesterFilters : EdCodeSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterFilters class.
		/// </summary>
		public EdCodeSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSemesterFilters
	
	#region EdCodeSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSemesterQuery : EdCodeSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterQuery class.
		/// </summary>
		public EdCodeSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSemesterQuery
		
	#region SaCodeJobActivityPlaceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeJobActivityPlace"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobActivityPlaceFilters : SaCodeJobActivityPlaceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityPlaceFilters class.
		/// </summary>
		public SaCodeJobActivityPlaceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityPlaceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobActivityPlaceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityPlaceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobActivityPlaceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobActivityPlaceFilters
	
	#region SaCodeJobActivityPlaceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeJobActivityPlaceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeJobActivityPlace"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobActivityPlaceQuery : SaCodeJobActivityPlaceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityPlaceQuery class.
		/// </summary>
		public SaCodeJobActivityPlaceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityPlaceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobActivityPlaceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobActivityPlaceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobActivityPlaceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobActivityPlaceQuery
		
	#region SaCodeJobBeforeStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeJobBeforeStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobBeforeStatusFilters : SaCodeJobBeforeStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobBeforeStatusFilters class.
		/// </summary>
		public SaCodeJobBeforeStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobBeforeStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobBeforeStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobBeforeStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobBeforeStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobBeforeStatusFilters
	
	#region SaCodeJobBeforeStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeJobBeforeStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeJobBeforeStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeJobBeforeStatusQuery : SaCodeJobBeforeStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeJobBeforeStatusQuery class.
		/// </summary>
		public SaCodeJobBeforeStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobBeforeStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeJobBeforeStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeJobBeforeStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeJobBeforeStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeJobBeforeStatusQuery
		
	#region SaCodeOrgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeOrg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeOrgFilters : SaCodeOrgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeOrgFilters class.
		/// </summary>
		public SaCodeOrgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeOrgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeOrgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeOrgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeOrgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeOrgFilters
	
	#region SaCodeOrgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeOrgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeOrg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeOrgQuery : SaCodeOrgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeOrgQuery class.
		/// </summary>
		public SaCodeOrgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeOrgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeOrgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeOrgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeOrgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeOrgQuery
		
	#region SaCodeParDelNatureFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeParDelNature"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeParDelNatureFilters : SaCodeParDelNatureFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeParDelNatureFilters class.
		/// </summary>
		public SaCodeParDelNatureFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeParDelNatureFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeParDelNatureFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeParDelNatureFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeParDelNatureFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeParDelNatureFilters
	
	#region SaCodeParDelNatureQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeParDelNatureParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeParDelNature"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeParDelNatureQuery : SaCodeParDelNatureParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeParDelNatureQuery class.
		/// </summary>
		public SaCodeParDelNatureQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeParDelNatureQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeParDelNatureQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeParDelNatureQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeParDelNatureQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeParDelNatureQuery
		
	#region SaCodeServTerminRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeServTerminRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeServTerminRsnFilters : SaCodeServTerminRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeServTerminRsnFilters class.
		/// </summary>
		public SaCodeServTerminRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeServTerminRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeServTerminRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeServTerminRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeServTerminRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeServTerminRsnFilters
	
	#region SaCodeServTerminRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeServTerminRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeServTerminRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeServTerminRsnQuery : SaCodeServTerminRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeServTerminRsnQuery class.
		/// </summary>
		public SaCodeServTerminRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeServTerminRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeServTerminRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeServTerminRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeServTerminRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeServTerminRsnQuery
		
	#region SaCodeStaffTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeStaffType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeStaffTypeFilters : SaCodeStaffTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeStaffTypeFilters class.
		/// </summary>
		public SaCodeStaffTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStaffTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeStaffTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStaffTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeStaffTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeStaffTypeFilters
	
	#region SaCodeStaffTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeStaffTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeStaffType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeStaffTypeQuery : SaCodeStaffTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeStaffTypeQuery class.
		/// </summary>
		public SaCodeStaffTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStaffTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeStaffTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStaffTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeStaffTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeStaffTypeQuery
		
	#region SaDocOfFileFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaDocOfFile"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaDocOfFileFilters : SaDocOfFileFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaDocOfFileFilters class.
		/// </summary>
		public SaDocOfFileFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaDocOfFileFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaDocOfFileFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaDocOfFileFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaDocOfFileFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaDocOfFileFilters
	
	#region SaDocOfFileQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaDocOfFileParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaDocOfFile"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaDocOfFileQuery : SaDocOfFileParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaDocOfFileQuery class.
		/// </summary>
		public SaDocOfFileQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaDocOfFileQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaDocOfFileQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaDocOfFileQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaDocOfFileQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaDocOfFileQuery
		
	#region SaEmpHierarchyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaEmpHierarchy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaEmpHierarchyFilters : SaEmpHierarchyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaEmpHierarchyFilters class.
		/// </summary>
		public SaEmpHierarchyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaEmpHierarchyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaEmpHierarchyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaEmpHierarchyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaEmpHierarchyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaEmpHierarchyFilters
	
	#region SaEmpHierarchyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaEmpHierarchyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaEmpHierarchy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaEmpHierarchyQuery : SaEmpHierarchyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaEmpHierarchyQuery class.
		/// </summary>
		public SaEmpHierarchyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaEmpHierarchyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaEmpHierarchyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaEmpHierarchyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaEmpHierarchyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaEmpHierarchyQuery
		
	#region SaEmploymentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaEmployment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaEmploymentFilters : SaEmploymentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaEmploymentFilters class.
		/// </summary>
		public SaEmploymentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaEmploymentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaEmploymentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaEmploymentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaEmploymentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaEmploymentFilters
	
	#region SaEmploymentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaEmploymentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaEmployment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaEmploymentQuery : SaEmploymentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaEmploymentQuery class.
		/// </summary>
		public SaEmploymentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaEmploymentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaEmploymentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaEmploymentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaEmploymentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaEmploymentQuery
		
	#region SaExperienceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaExperience"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaExperienceFilters : SaExperienceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaExperienceFilters class.
		/// </summary>
		public SaExperienceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaExperienceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaExperienceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaExperienceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaExperienceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaExperienceFilters
	
	#region SaExperienceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaExperienceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaExperience"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaExperienceQuery : SaExperienceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaExperienceQuery class.
		/// </summary>
		public SaExperienceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaExperienceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaExperienceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaExperienceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaExperienceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaExperienceQuery
		
	#region SaCommMemberFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCommMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCommMemberFilters : SaCommMemberFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCommMemberFilters class.
		/// </summary>
		public SaCommMemberFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCommMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCommMemberFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCommMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCommMemberFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCommMemberFilters
	
	#region SaCommMemberQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCommMemberParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCommMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCommMemberQuery : SaCommMemberParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCommMemberQuery class.
		/// </summary>
		public SaCommMemberQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCommMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCommMemberQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCommMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCommMemberQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCommMemberQuery
		
	#region SaCodeVacationTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeVacationType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeVacationTypeFilters : SaCodeVacationTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeVacationTypeFilters class.
		/// </summary>
		public SaCodeVacationTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeVacationTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeVacationTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeVacationTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeVacationTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeVacationTypeFilters
	
	#region SaCodeVacationTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeVacationTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeVacationType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeVacationTypeQuery : SaCodeVacationTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeVacationTypeQuery class.
		/// </summary>
		public SaCodeVacationTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeVacationTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeVacationTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeVacationTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeVacationTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeVacationTypeQuery
		
	#region SaCodeStfFlgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeStfFlg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeStfFlgFilters : SaCodeStfFlgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeStfFlgFilters class.
		/// </summary>
		public SaCodeStfFlgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStfFlgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeStfFlgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStfFlgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeStfFlgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeStfFlgFilters
	
	#region SaCodeStfFlgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeStfFlgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeStfFlg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeStfFlgQuery : SaCodeStfFlgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeStfFlgQuery class.
		/// </summary>
		public SaCodeStfFlgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStfFlgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeStfFlgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeStfFlgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeStfFlgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeStfFlgQuery
		
	#region SaCodeSuperviseJobFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeSuperviseJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeSuperviseJobFilters : SaCodeSuperviseJobFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeSuperviseJobFilters class.
		/// </summary>
		public SaCodeSuperviseJobFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSuperviseJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeSuperviseJobFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSuperviseJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeSuperviseJobFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeSuperviseJobFilters
	
	#region SaCodeSuperviseJobQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeSuperviseJobParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeSuperviseJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeSuperviseJobQuery : SaCodeSuperviseJobParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeSuperviseJobQuery class.
		/// </summary>
		public SaCodeSuperviseJobQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSuperviseJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeSuperviseJobQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeSuperviseJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeSuperviseJobQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeSuperviseJobQuery
		
	#region SaCodeTrainingFlgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeTrainingFlg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeTrainingFlgFilters : SaCodeTrainingFlgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingFlgFilters class.
		/// </summary>
		public SaCodeTrainingFlgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingFlgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeTrainingFlgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingFlgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeTrainingFlgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeTrainingFlgFilters
	
	#region SaCodeTrainingFlgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeTrainingFlgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeTrainingFlg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeTrainingFlgQuery : SaCodeTrainingFlgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingFlgQuery class.
		/// </summary>
		public SaCodeTrainingFlgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingFlgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeTrainingFlgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingFlgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeTrainingFlgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeTrainingFlgQuery
		
	#region SaCodeTrainingOrgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaCodeTrainingOrg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeTrainingOrgFilters : SaCodeTrainingOrgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingOrgFilters class.
		/// </summary>
		public SaCodeTrainingOrgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingOrgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeTrainingOrgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingOrgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeTrainingOrgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeTrainingOrgFilters
	
	#region SaCodeTrainingOrgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaCodeTrainingOrgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaCodeTrainingOrg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaCodeTrainingOrgQuery : SaCodeTrainingOrgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingOrgQuery class.
		/// </summary>
		public SaCodeTrainingOrgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingOrgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaCodeTrainingOrgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaCodeTrainingOrgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaCodeTrainingOrgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaCodeTrainingOrgQuery
		
	#region SaScCommDecisionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaScCommDecision"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScCommDecisionFilters : SaScCommDecisionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScCommDecisionFilters class.
		/// </summary>
		public SaScCommDecisionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScCommDecisionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScCommDecisionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScCommDecisionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScCommDecisionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScCommDecisionFilters
	
	#region SaScCommDecisionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaScCommDecisionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaScCommDecision"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScCommDecisionQuery : SaScCommDecisionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScCommDecisionQuery class.
		/// </summary>
		public SaScCommDecisionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScCommDecisionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScCommDecisionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScCommDecisionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScCommDecisionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScCommDecisionQuery
		
	#region ScCdeHallTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScCdeHallType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeHallTypeFilters : ScCdeHallTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeHallTypeFilters class.
		/// </summary>
		public ScCdeHallTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeHallTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeHallTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeHallTypeFilters
	
	#region ScCdeHallTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScCdeHallTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScCdeHallType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeHallTypeQuery : ScCdeHallTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeHallTypeQuery class.
		/// </summary>
		public ScCdeHallTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeHallTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeHallTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeHallTypeQuery
		
	#region ScCdeGrpTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScCdeGrpType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeGrpTypeFilters : ScCdeGrpTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeGrpTypeFilters class.
		/// </summary>
		public ScCdeGrpTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeGrpTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeGrpTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeGrpTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeGrpTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeGrpTypeFilters
	
	#region ScCdeGrpTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScCdeGrpTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScCdeGrpType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeGrpTypeQuery : ScCdeGrpTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeGrpTypeQuery class.
		/// </summary>
		public ScCdeGrpTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeGrpTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeGrpTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeGrpTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeGrpTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeGrpTypeQuery
		
	#region ScScheduleHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleHdrFilters : ScScheduleHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrFilters class.
		/// </summary>
		public ScScheduleHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleHdrFilters
	
	#region ScScheduleHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleHdrQuery : ScScheduleHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrQuery class.
		/// </summary>
		public ScScheduleHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleHdrQuery
		
	#region SaScQualFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaScQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScQualFilters : SaScQualFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScQualFilters class.
		/// </summary>
		public SaScQualFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScQualFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScQualFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScQualFilters
	
	#region SaScQualQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaScQualParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaScQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScQualQuery : SaScQualParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScQualQuery class.
		/// </summary>
		public SaScQualQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScQualQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScQualQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScQualQuery
		
	#region ScScheduleDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlFilters : ScScheduleDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlFilters class.
		/// </summary>
		public ScScheduleDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlFilters
	
	#region ScScheduleDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlQuery : ScScheduleDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlQuery class.
		/// </summary>
		public ScScheduleDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlQuery
		
	#region ScBuildingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScBuilding"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScBuildingFilters : ScBuildingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScBuildingFilters class.
		/// </summary>
		public ScBuildingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScBuildingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScBuildingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScBuildingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScBuildingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScBuildingFilters
	
	#region ScBuildingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScBuildingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScBuilding"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScBuildingQuery : ScBuildingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScBuildingQuery class.
		/// </summary>
		public ScBuildingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScBuildingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScBuildingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScBuildingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScBuildingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScBuildingQuery
		
	#region ScSchdlPeriodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScSchdlPeriod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlPeriodFilters : ScSchdlPeriodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlPeriodFilters class.
		/// </summary>
		public ScSchdlPeriodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlPeriodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlPeriodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlPeriodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlPeriodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlPeriodFilters
	
	#region ScSchdlPeriodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScSchdlPeriodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScSchdlPeriod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlPeriodQuery : ScSchdlPeriodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlPeriodQuery class.
		/// </summary>
		public ScSchdlPeriodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlPeriodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlPeriodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlPeriodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlPeriodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlPeriodQuery
		
	#region ScGroupInfoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScGroupInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScGroupInfoFilters : ScGroupInfoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScGroupInfoFilters class.
		/// </summary>
		public ScGroupInfoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScGroupInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScGroupInfoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScGroupInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScGroupInfoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScGroupInfoFilters
	
	#region ScGroupInfoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScGroupInfoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScGroupInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScGroupInfoQuery : ScGroupInfoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScGroupInfoQuery class.
		/// </summary>
		public ScGroupInfoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScGroupInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScGroupInfoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScGroupInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScGroupInfoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScGroupInfoQuery
		
	#region ScHallFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScHall"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScHallFilters : ScHallFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScHallFilters class.
		/// </summary>
		public ScHallFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScHallFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScHallFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScHallFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScHallFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScHallFilters
	
	#region ScHallQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScHallParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScHall"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScHallQuery : ScHallParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScHallQuery class.
		/// </summary>
		public ScHallQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScHallQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScHallQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScHallQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScHallQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScHallQuery
		
	#region ScTchngSlotFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScTchngSlot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScTchngSlotFilters : ScTchngSlotFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScTchngSlotFilters class.
		/// </summary>
		public ScTchngSlotFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScTchngSlotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScTchngSlotFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScTchngSlotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScTchngSlotFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScTchngSlotFilters
	
	#region ScTchngSlotQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScTchngSlotParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScTchngSlot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScTchngSlotQuery : ScTchngSlotParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScTchngSlotQuery class.
		/// </summary>
		public ScTchngSlotQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScTchngSlotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScTchngSlotQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScTchngSlotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScTchngSlotQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScTchngSlotQuery
		
	#region ScSchdlSlotFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScSchdlSlot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlSlotFilters : ScSchdlSlotFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotFilters class.
		/// </summary>
		public ScSchdlSlotFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlSlotFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlSlotFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlSlotFilters
	
	#region ScSchdlSlotQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScSchdlSlotParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScSchdlSlot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlSlotQuery : ScSchdlSlotParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotQuery class.
		/// </summary>
		public ScSchdlSlotQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlSlotQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlSlotQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlSlotQuery
		
	#region ScGroupDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScGroupDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScGroupDayFilters : ScGroupDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScGroupDayFilters class.
		/// </summary>
		public ScGroupDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScGroupDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScGroupDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScGroupDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScGroupDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScGroupDayFilters
	
	#region ScGroupDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScGroupDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScGroupDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScGroupDayQuery : ScGroupDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScGroupDayQuery class.
		/// </summary>
		public ScGroupDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScGroupDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScGroupDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScGroupDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScGroupDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScGroupDayQuery
		
	#region ScScheduleCrossListFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleCrossList"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleCrossListFilters : ScScheduleCrossListFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleCrossListFilters class.
		/// </summary>
		public ScScheduleCrossListFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleCrossListFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleCrossListFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleCrossListFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleCrossListFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleCrossListFilters
	
	#region ScScheduleCrossListQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleCrossListParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleCrossList"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleCrossListQuery : ScScheduleCrossListParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleCrossListQuery class.
		/// </summary>
		public ScScheduleCrossListQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleCrossListQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleCrossListQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleCrossListQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleCrossListQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleCrossListQuery
		
	#region ScScheduleDtlDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlDayFilters : ScScheduleDtlDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayFilters class.
		/// </summary>
		public ScScheduleDtlDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlDayFilters
	
	#region ScScheduleDtlDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleDtlDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlDayQuery : ScScheduleDtlDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayQuery class.
		/// </summary>
		public ScScheduleDtlDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlDayQuery
		
	#region ScSchdlSlotStaffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScSchdlSlotStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlSlotStaffFilters : ScSchdlSlotStaffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotStaffFilters class.
		/// </summary>
		public ScSchdlSlotStaffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlSlotStaffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlSlotStaffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlSlotStaffFilters
	
	#region ScSchdlSlotStaffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScSchdlSlotStaffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScSchdlSlotStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlSlotStaffQuery : ScSchdlSlotStaffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotStaffQuery class.
		/// </summary>
		public ScSchdlSlotStaffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlSlotStaffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlSlotStaffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlSlotStaffQuery
		
	#region ScScheduleDtlDateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlDate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlDateFilters : ScScheduleDtlDateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDateFilters class.
		/// </summary>
		public ScScheduleDtlDateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlDateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlDateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlDateFilters
	
	#region ScScheduleDtlDateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleDtlDateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlDate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlDateQuery : ScScheduleDtlDateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDateQuery class.
		/// </summary>
		public ScScheduleDtlDateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlDateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlDateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlDateQuery
		
	#region ScTchngDayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScTchngDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScTchngDayFilters : ScTchngDayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScTchngDayFilters class.
		/// </summary>
		public ScTchngDayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScTchngDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScTchngDayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScTchngDayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScTchngDayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScTchngDayFilters
	
	#region ScTchngDayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScTchngDayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScTchngDay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScTchngDayQuery : ScTchngDayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScTchngDayQuery class.
		/// </summary>
		public ScTchngDayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScTchngDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScTchngDayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScTchngDayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScTchngDayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScTchngDayQuery
		
	#region ScScheduleDtlDayExceptionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlDayException"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlDayExceptionFilters : ScScheduleDtlDayExceptionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionFilters class.
		/// </summary>
		public ScScheduleDtlDayExceptionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlDayExceptionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlDayExceptionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlDayExceptionFilters
	
	#region ScScheduleDtlDayExceptionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleDtlDayExceptionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlDayException"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlDayExceptionQuery : ScScheduleDtlDayExceptionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionQuery class.
		/// </summary>
		public ScScheduleDtlDayExceptionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlDayExceptionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlDayExceptionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlDayExceptionQuery
		
	#region SeAccntControlDiffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeAccntControlDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeAccntControlDiffFilters : SeAccntControlDiffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeAccntControlDiffFilters class.
		/// </summary>
		public SeAccntControlDiffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeAccntControlDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeAccntControlDiffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeAccntControlDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeAccntControlDiffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeAccntControlDiffFilters
	
	#region SeAccntControlDiffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeAccntControlDiffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeAccntControlDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeAccntControlDiffQuery : SeAccntControlDiffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeAccntControlDiffQuery class.
		/// </summary>
		public SeAccntControlDiffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeAccntControlDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeAccntControlDiffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeAccntControlDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeAccntControlDiffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeAccntControlDiffQuery
		
	#region ScTchngAgendaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScTchngAgenda"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScTchngAgendaFilters : ScTchngAgendaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScTchngAgendaFilters class.
		/// </summary>
		public ScTchngAgendaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScTchngAgendaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScTchngAgendaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScTchngAgendaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScTchngAgendaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScTchngAgendaFilters
	
	#region ScTchngAgendaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScTchngAgendaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScTchngAgenda"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScTchngAgendaQuery : ScTchngAgendaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScTchngAgendaQuery class.
		/// </summary>
		public ScTchngAgendaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScTchngAgendaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScTchngAgendaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScTchngAgendaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScTchngAgendaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScTchngAgendaQuery
		
	#region SeAccntFormDiffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SeAccntFormDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeAccntFormDiffFilters : SeAccntFormDiffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeAccntFormDiffFilters class.
		/// </summary>
		public SeAccntFormDiffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeAccntFormDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeAccntFormDiffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeAccntFormDiffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeAccntFormDiffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeAccntFormDiffFilters
	
	#region SeAccntFormDiffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SeAccntFormDiffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SeAccntFormDiff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SeAccntFormDiffQuery : SeAccntFormDiffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SeAccntFormDiffQuery class.
		/// </summary>
		public SeAccntFormDiffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SeAccntFormDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SeAccntFormDiffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SeAccntFormDiffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SeAccntFormDiffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SeAccntFormDiffQuery
		
	#region ScSectionGroupHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScSectionGroupHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSectionGroupHdrFilters : ScSectionGroupHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrFilters class.
		/// </summary>
		public ScSectionGroupHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSectionGroupHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSectionGroupHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSectionGroupHdrFilters
	
	#region ScSectionGroupHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScSectionGroupHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScSectionGroupHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSectionGroupHdrQuery : ScSectionGroupHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrQuery class.
		/// </summary>
		public ScSectionGroupHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSectionGroupHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSectionGroupHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSectionGroupHdrQuery
		
	#region ScStudGroupFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScStudGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScStudGroupFilters : ScStudGroupFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScStudGroupFilters class.
		/// </summary>
		public ScStudGroupFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScStudGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScStudGroupFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScStudGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScStudGroupFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScStudGroupFilters
	
	#region ScStudGroupQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScStudGroupParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScStudGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScStudGroupQuery : ScStudGroupParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScStudGroupQuery class.
		/// </summary>
		public ScStudGroupQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScStudGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScStudGroupQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScStudGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScStudGroupQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScStudGroupQuery
		
	#region ScScheduleDtlExtStfFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlExtStf"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlExtStfFilters : ScScheduleDtlExtStfFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlExtStfFilters class.
		/// </summary>
		public ScScheduleDtlExtStfFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlExtStfFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlExtStfFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlExtStfFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlExtStfFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlExtStfFilters
	
	#region ScScheduleDtlExtStfQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleDtlExtStfParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleDtlExtStf"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleDtlExtStfQuery : ScScheduleDtlExtStfParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlExtStfQuery class.
		/// </summary>
		public ScScheduleDtlExtStfQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlExtStfQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleDtlExtStfQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlExtStfQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleDtlExtStfQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleDtlExtStfQuery
		
	#region ScScheduleHdrDefaultFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleHdrDefault"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleHdrDefaultFilters : ScScheduleHdrDefaultFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrDefaultFilters class.
		/// </summary>
		public ScScheduleHdrDefaultFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrDefaultFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleHdrDefaultFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrDefaultFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleHdrDefaultFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleHdrDefaultFilters
	
	#region ScScheduleHdrDefaultQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleHdrDefaultParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleHdrDefault"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleHdrDefaultQuery : ScScheduleHdrDefaultParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrDefaultQuery class.
		/// </summary>
		public ScScheduleHdrDefaultQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrDefaultQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleHdrDefaultQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleHdrDefaultQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleHdrDefaultQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleHdrDefaultQuery
		
	#region ScScheduleRsrvFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScScheduleRsrv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleRsrvFilters : ScScheduleRsrvFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleRsrvFilters class.
		/// </summary>
		public ScScheduleRsrvFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleRsrvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleRsrvFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleRsrvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleRsrvFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleRsrvFilters
	
	#region ScScheduleRsrvQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScScheduleRsrvParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScScheduleRsrv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScScheduleRsrvQuery : ScScheduleRsrvParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScScheduleRsrvQuery class.
		/// </summary>
		public ScScheduleRsrvQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleRsrvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScScheduleRsrvQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScScheduleRsrvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScScheduleRsrvQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScScheduleRsrvQuery
		
	#region ScSectionGroupDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScSectionGroupDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSectionGroupDtlFilters : ScSectionGroupDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupDtlFilters class.
		/// </summary>
		public ScSectionGroupDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSectionGroupDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSectionGroupDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSectionGroupDtlFilters
	
	#region ScSectionGroupDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScSectionGroupDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScSectionGroupDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSectionGroupDtlQuery : ScSectionGroupDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupDtlQuery class.
		/// </summary>
		public ScSectionGroupDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSectionGroupDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSectionGroupDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSectionGroupDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSectionGroupDtlQuery
		
	#region ScSchdlHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScSchdlHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlHdrFilters : ScSchdlHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrFilters class.
		/// </summary>
		public ScSchdlHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlHdrFilters
	
	#region ScSchdlHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScSchdlHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScSchdlHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScSchdlHdrQuery : ScSchdlHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrQuery class.
		/// </summary>
		public ScSchdlHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScSchdlHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScSchdlHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScSchdlHdrQuery
		
	#region SaSupervisingJobsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaSupervisingJobs"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaSupervisingJobsFilters : SaSupervisingJobsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaSupervisingJobsFilters class.
		/// </summary>
		public SaSupervisingJobsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaSupervisingJobsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaSupervisingJobsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaSupervisingJobsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaSupervisingJobsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaSupervisingJobsFilters
	
	#region SaSupervisingJobsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaSupervisingJobsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaSupervisingJobs"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaSupervisingJobsQuery : SaSupervisingJobsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaSupervisingJobsQuery class.
		/// </summary>
		public SaSupervisingJobsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaSupervisingJobsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaSupervisingJobsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaSupervisingJobsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaSupervisingJobsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaSupervisingJobsQuery
		
	#region ScHallRsrvFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScHallRsrv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScHallRsrvFilters : ScHallRsrvFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScHallRsrvFilters class.
		/// </summary>
		public ScHallRsrvFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScHallRsrvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScHallRsrvFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScHallRsrvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScHallRsrvFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScHallRsrvFilters
	
	#region ScHallRsrvQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScHallRsrvParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScHallRsrv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScHallRsrvQuery : ScHallRsrvParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScHallRsrvQuery class.
		/// </summary>
		public ScHallRsrvQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScHallRsrvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScHallRsrvQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScHallRsrvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScHallRsrvQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScHallRsrvQuery
		
	#region SaStfSummeryTransFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaStfSummeryTrans"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfSummeryTransFilters : SaStfSummeryTransFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransFilters class.
		/// </summary>
		public SaStfSummeryTransFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfSummeryTransFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfSummeryTransFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfSummeryTransFilters
	
	#region SaStfSummeryTransQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaStfSummeryTransParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaStfSummeryTrans"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfSummeryTransQuery : SaStfSummeryTransParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransQuery class.
		/// </summary>
		public SaStfSummeryTransQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfSummeryTransQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfSummeryTransQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfSummeryTransQuery
		
	#region SaTrainingCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaTrainingCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaTrainingCourseFilters : SaTrainingCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseFilters class.
		/// </summary>
		public SaTrainingCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaTrainingCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaTrainingCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaTrainingCourseFilters
	
	#region SaTrainingCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaTrainingCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaTrainingCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaTrainingCourseQuery : SaTrainingCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseQuery class.
		/// </summary>
		public SaTrainingCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaTrainingCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaTrainingCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaTrainingCourseQuery
		
	#region SaStfDocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaStfDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfDocFilters : SaStfDocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfDocFilters class.
		/// </summary>
		public SaStfDocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfDocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfDocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfDocFilters
	
	#region SaStfDocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaStfDocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaStfDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfDocQuery : SaStfDocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfDocQuery class.
		/// </summary>
		public SaStfDocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfDocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfDocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfDocQuery
		
	#region SaScResearchFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaScResearch"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScResearchFilters : SaScResearchFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScResearchFilters class.
		/// </summary>
		public SaScResearchFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScResearchFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScResearchFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScResearchFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScResearchFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScResearchFilters
	
	#region SaScResearchQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaScResearchParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaScResearch"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaScResearchQuery : SaScResearchParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaScResearchQuery class.
		/// </summary>
		public SaScResearchQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaScResearchQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaScResearchQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaScResearchQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaScResearchQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaScResearchQuery
		
	#region SaStfAttendFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaStfAttend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfAttendFilters : SaStfAttendFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfAttendFilters class.
		/// </summary>
		public SaStfAttendFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfAttendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfAttendFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfAttendFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfAttendFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfAttendFilters
	
	#region SaStfAttendQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaStfAttendParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaStfAttend"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaStfAttendQuery : SaStfAttendParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaStfAttendQuery class.
		/// </summary>
		public SaStfAttendQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaStfAttendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaStfAttendQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaStfAttendQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaStfAttendQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaStfAttendQuery
		
	#region SaVacationBylawsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaVacationBylaws"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationBylawsFilters : SaVacationBylawsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationBylawsFilters class.
		/// </summary>
		public SaVacationBylawsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBylawsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationBylawsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBylawsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationBylawsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationBylawsFilters
	
	#region SaVacationBylawsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaVacationBylawsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaVacationBylaws"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationBylawsQuery : SaVacationBylawsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationBylawsQuery class.
		/// </summary>
		public SaVacationBylawsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBylawsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationBylawsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBylawsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationBylawsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationBylawsQuery
		
	#region SaServTerminFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaServTermin"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaServTerminFilters : SaServTerminFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaServTerminFilters class.
		/// </summary>
		public SaServTerminFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaServTerminFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaServTerminFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaServTerminFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaServTerminFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaServTerminFilters
	
	#region SaServTerminQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaServTerminParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaServTermin"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaServTerminQuery : SaServTerminParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaServTerminQuery class.
		/// </summary>
		public SaServTerminQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaServTerminQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaServTerminQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaServTerminQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaServTerminQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaServTerminQuery
		
	#region SaVacationRenewFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaVacationRenew"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationRenewFilters : SaVacationRenewFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationRenewFilters class.
		/// </summary>
		public SaVacationRenewFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRenewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationRenewFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRenewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationRenewFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationRenewFilters
	
	#region SaVacationRenewQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaVacationRenewParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaVacationRenew"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationRenewQuery : SaVacationRenewParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationRenewQuery class.
		/// </summary>
		public SaVacationRenewQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRenewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationRenewQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRenewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationRenewQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationRenewQuery
		
	#region ScCdeHallEquipFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScCdeHallEquip"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeHallEquipFilters : ScCdeHallEquipFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeHallEquipFilters class.
		/// </summary>
		public ScCdeHallEquipFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallEquipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeHallEquipFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallEquipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeHallEquipFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeHallEquipFilters
	
	#region ScCdeHallEquipQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScCdeHallEquipParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScCdeHallEquip"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeHallEquipQuery : ScCdeHallEquipParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeHallEquipQuery class.
		/// </summary>
		public ScCdeHallEquipQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallEquipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeHallEquipQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeHallEquipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeHallEquipQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeHallEquipQuery
		
	#region ScDaySlotFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScDaySlot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScDaySlotFilters : ScDaySlotFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScDaySlotFilters class.
		/// </summary>
		public ScDaySlotFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScDaySlotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScDaySlotFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScDaySlotFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScDaySlotFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScDaySlotFilters
	
	#region ScDaySlotQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScDaySlotParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScDaySlot"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScDaySlotQuery : ScDaySlotParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScDaySlotQuery class.
		/// </summary>
		public ScDaySlotQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScDaySlotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScDaySlotQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScDaySlotQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScDaySlotQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScDaySlotQuery
		
	#region ScGroupStaffFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScGroupStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScGroupStaffFilters : ScGroupStaffFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScGroupStaffFilters class.
		/// </summary>
		public ScGroupStaffFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScGroupStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScGroupStaffFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScGroupStaffFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScGroupStaffFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScGroupStaffFilters
	
	#region ScGroupStaffQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScGroupStaffParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScGroupStaff"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScGroupStaffQuery : ScGroupStaffParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScGroupStaffQuery class.
		/// </summary>
		public ScGroupStaffQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScGroupStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScGroupStaffQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScGroupStaffQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScGroupStaffQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScGroupStaffQuery
		
	#region ScHallEquipFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScHallEquip"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScHallEquipFilters : ScHallEquipFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScHallEquipFilters class.
		/// </summary>
		public ScHallEquipFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScHallEquipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScHallEquipFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScHallEquipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScHallEquipFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScHallEquipFilters
	
	#region ScHallEquipQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScHallEquipParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScHallEquip"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScHallEquipQuery : ScHallEquipParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScHallEquipQuery class.
		/// </summary>
		public ScHallEquipQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScHallEquipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScHallEquipQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScHallEquipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScHallEquipQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScHallEquipQuery
		
	#region ScCdeActvtyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ScCdeActvty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeActvtyFilters : ScCdeActvtyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeActvtyFilters class.
		/// </summary>
		public ScCdeActvtyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeActvtyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeActvtyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeActvtyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeActvtyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeActvtyFilters
	
	#region ScCdeActvtyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ScCdeActvtyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ScCdeActvty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ScCdeActvtyQuery : ScCdeActvtyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ScCdeActvtyQuery class.
		/// </summary>
		public ScCdeActvtyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ScCdeActvtyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ScCdeActvtyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ScCdeActvtyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ScCdeActvtyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ScCdeActvtyQuery
		
	#region SaWarningAddTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaWarningAddType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaWarningAddTypeFilters : SaWarningAddTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaWarningAddTypeFilters class.
		/// </summary>
		public SaWarningAddTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaWarningAddTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaWarningAddTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaWarningAddTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaWarningAddTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaWarningAddTypeFilters
	
	#region SaWarningAddTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaWarningAddTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaWarningAddType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaWarningAddTypeQuery : SaWarningAddTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaWarningAddTypeQuery class.
		/// </summary>
		public SaWarningAddTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaWarningAddTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaWarningAddTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaWarningAddTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaWarningAddTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaWarningAddTypeQuery
		
	#region SaWarningFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaWarning"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaWarningFilters : SaWarningFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaWarningFilters class.
		/// </summary>
		public SaWarningFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaWarningFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaWarningFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaWarningFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaWarningFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaWarningFilters
	
	#region SaWarningQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaWarningParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaWarning"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaWarningQuery : SaWarningParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaWarningQuery class.
		/// </summary>
		public SaWarningQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaWarningQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaWarningQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaWarningQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaWarningQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaWarningQuery
		
	#region SaVacationRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaVacationRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationRuleFilters : SaVacationRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationRuleFilters class.
		/// </summary>
		public SaVacationRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationRuleFilters
	
	#region SaVacationRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaVacationRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaVacationRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationRuleQuery : SaVacationRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationRuleQuery class.
		/// </summary>
		public SaVacationRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationRuleQuery
		
	#region SaVacationBalanceHFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaVacationBalanceH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationBalanceHFilters : SaVacationBalanceHFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHFilters class.
		/// </summary>
		public SaVacationBalanceHFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationBalanceHFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationBalanceHFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationBalanceHFilters
	
	#region SaVacationBalanceHQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaVacationBalanceHParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaVacationBalanceH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationBalanceHQuery : SaVacationBalanceHParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHQuery class.
		/// </summary>
		public SaVacationBalanceHQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationBalanceHQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationBalanceHQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationBalanceHQuery
		
	#region SaVacationBalanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaVacationBalance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationBalanceFilters : SaVacationBalanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceFilters class.
		/// </summary>
		public SaVacationBalanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationBalanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationBalanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationBalanceFilters
	
	#region SaVacationBalanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaVacationBalanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaVacationBalance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationBalanceQuery : SaVacationBalanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceQuery class.
		/// </summary>
		public SaVacationBalanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationBalanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationBalanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationBalanceQuery
		
	#region SaVacationFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="SaVacation"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationFilters : SaVacationFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationFilters class.
		/// </summary>
		public SaVacationFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationFilters
	
	#region SaVacationQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SaVacationParameterBuilder"/> class
	/// that is used exclusively with a <see cref="SaVacation"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class SaVacationQuery : SaVacationParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the SaVacationQuery class.
		/// </summary>
		public SaVacationQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the SaVacationQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public SaVacationQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the SaVacationQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public SaVacationQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion SaVacationQuery
		
	#region FeeItemPaymentWaysFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeItemPaymentWays"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeItemPaymentWaysFilters : FeeItemPaymentWaysFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeItemPaymentWaysFilters class.
		/// </summary>
		public FeeItemPaymentWaysFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeItemPaymentWaysFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeItemPaymentWaysFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeItemPaymentWaysFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeItemPaymentWaysFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeItemPaymentWaysFilters
	
	#region FeeItemPaymentWaysQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeItemPaymentWaysParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeItemPaymentWays"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeItemPaymentWaysQuery : FeeItemPaymentWaysParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeItemPaymentWaysQuery class.
		/// </summary>
		public FeeItemPaymentWaysQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeItemPaymentWaysQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeItemPaymentWaysQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeItemPaymentWaysQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeItemPaymentWaysQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeItemPaymentWaysQuery
		
	#region FeeInvoiceItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeInvoiceItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInvoiceItemFilters : FeeInvoiceItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceItemFilters class.
		/// </summary>
		public FeeInvoiceItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInvoiceItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInvoiceItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInvoiceItemFilters
	
	#region FeeInvoiceItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeInvoiceItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeInvoiceItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInvoiceItemQuery : FeeInvoiceItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceItemQuery class.
		/// </summary>
		public FeeInvoiceItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInvoiceItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInvoiceItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInvoiceItemQuery
		
	#region CtrCdeUnitFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeUnit"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeUnitFilters : CtrCdeUnitFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeUnitFilters class.
		/// </summary>
		public CtrCdeUnitFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeUnitFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeUnitFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeUnitFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeUnitFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeUnitFilters
	
	#region CtrCdeUnitQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeUnitParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeUnit"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeUnitQuery : CtrCdeUnitParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeUnitQuery class.
		/// </summary>
		public CtrCdeUnitQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeUnitQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeUnitQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeUnitQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeUnitQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeUnitQuery
		
	#region FeeInvoiceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeInvoice"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInvoiceFilters : FeeInvoiceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceFilters class.
		/// </summary>
		public FeeInvoiceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInvoiceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInvoiceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInvoiceFilters
	
	#region FeeInvoiceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeInvoiceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeInvoice"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInvoiceQuery : FeeInvoiceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceQuery class.
		/// </summary>
		public FeeInvoiceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInvoiceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInvoiceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInvoiceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInvoiceQuery
		
	#region CtrKtchnStfCrtfFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrKtchnStfCrtf"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrKtchnStfCrtfFilters : CtrKtchnStfCrtfFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrKtchnStfCrtfFilters class.
		/// </summary>
		public CtrKtchnStfCrtfFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrKtchnStfCrtfFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrKtchnStfCrtfFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrKtchnStfCrtfFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrKtchnStfCrtfFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrKtchnStfCrtfFilters
	
	#region CtrKtchnStfCrtfQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrKtchnStfCrtfParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrKtchnStfCrtf"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrKtchnStfCrtfQuery : CtrKtchnStfCrtfParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrKtchnStfCrtfQuery class.
		/// </summary>
		public CtrKtchnStfCrtfQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrKtchnStfCrtfQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrKtchnStfCrtfQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrKtchnStfCrtfQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrKtchnStfCrtfQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrKtchnStfCrtfQuery
		
	#region CtrCdeSrvcJobFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeSrvcJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeSrvcJobFilters : CtrCdeSrvcJobFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvcJobFilters class.
		/// </summary>
		public CtrCdeSrvcJobFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvcJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeSrvcJobFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvcJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeSrvcJobFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeSrvcJobFilters
	
	#region CtrCdeSrvcJobQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeSrvcJobParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeSrvcJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeSrvcJobQuery : CtrCdeSrvcJobParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvcJobQuery class.
		/// </summary>
		public CtrCdeSrvcJobQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvcJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeSrvcJobQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvcJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeSrvcJobQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeSrvcJobQuery
		
	#region CtrSrvcCrewFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrSrvcCrew"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrSrvcCrewFilters : CtrSrvcCrewFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrSrvcCrewFilters class.
		/// </summary>
		public CtrSrvcCrewFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrSrvcCrewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrSrvcCrewFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrSrvcCrewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrSrvcCrewFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrSrvcCrewFilters
	
	#region CtrSrvcCrewQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrSrvcCrewParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrSrvcCrew"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrSrvcCrewQuery : CtrSrvcCrewParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrSrvcCrewQuery class.
		/// </summary>
		public CtrSrvcCrewQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrSrvcCrewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrSrvcCrewQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrSrvcCrewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrSrvcCrewQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrSrvcCrewQuery
		
	#region CtrCdeSrvMthdFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeSrvMthd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeSrvMthdFilters : CtrCdeSrvMthdFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvMthdFilters class.
		/// </summary>
		public CtrCdeSrvMthdFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvMthdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeSrvMthdFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvMthdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeSrvMthdFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeSrvMthdFilters
	
	#region CtrCdeSrvMthdQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeSrvMthdParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeSrvMthd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeSrvMthdQuery : CtrCdeSrvMthdParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvMthdQuery class.
		/// </summary>
		public CtrCdeSrvMthdQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvMthdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeSrvMthdQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSrvMthdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeSrvMthdQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeSrvMthdQuery
		
	#region CtrCdeMealFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeMeal"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeMealFilters : CtrCdeMealFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealFilters class.
		/// </summary>
		public CtrCdeMealFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeMealFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeMealFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeMealFilters
	
	#region CtrCdeMealQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeMealParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeMeal"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeMealQuery : CtrCdeMealParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealQuery class.
		/// </summary>
		public CtrCdeMealQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeMealQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeMealQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeMealQuery
		
	#region CtrCdeSpclMealFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeSpclMeal"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeSpclMealFilters : CtrCdeSpclMealFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeSpclMealFilters class.
		/// </summary>
		public CtrCdeSpclMealFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSpclMealFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeSpclMealFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSpclMealFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeSpclMealFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeSpclMealFilters
	
	#region CtrCdeSpclMealQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeSpclMealParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeSpclMeal"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeSpclMealQuery : CtrCdeSpclMealParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeSpclMealQuery class.
		/// </summary>
		public CtrCdeSpclMealQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSpclMealQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeSpclMealQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeSpclMealQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeSpclMealQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeSpclMealQuery
		
	#region CtrCdeMealItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeMealItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeMealItemFilters : CtrCdeMealItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemFilters class.
		/// </summary>
		public CtrCdeMealItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeMealItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeMealItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeMealItemFilters
	
	#region CtrCdeMealItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeMealItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeMealItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeMealItemQuery : CtrCdeMealItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemQuery class.
		/// </summary>
		public CtrCdeMealItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeMealItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeMealItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeMealItemQuery
		
	#region CtrStudExpFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrStudExp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrStudExpFilters : CtrStudExpFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrStudExpFilters class.
		/// </summary>
		public CtrStudExpFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrStudExpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrStudExpFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrStudExpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrStudExpFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrStudExpFilters
	
	#region CtrStudExpQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrStudExpParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrStudExp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrStudExpQuery : CtrStudExpParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrStudExpQuery class.
		/// </summary>
		public CtrStudExpQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrStudExpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrStudExpQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrStudExpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrStudExpQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrStudExpQuery
		
	#region CtrCdeOutRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeOutRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeOutRsnFilters : CtrCdeOutRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeOutRsnFilters class.
		/// </summary>
		public CtrCdeOutRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeOutRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeOutRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeOutRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeOutRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeOutRsnFilters
	
	#region CtrCdeOutRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeOutRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeOutRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeOutRsnQuery : CtrCdeOutRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeOutRsnQuery class.
		/// </summary>
		public CtrCdeOutRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeOutRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeOutRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeOutRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeOutRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeOutRsnQuery
		
	#region EdBranchRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdBranchRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdBranchRuleFilters : EdBranchRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdBranchRuleFilters class.
		/// </summary>
		public EdBranchRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdBranchRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdBranchRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdBranchRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdBranchRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdBranchRuleFilters
	
	#region EdBranchRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdBranchRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdBranchRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdBranchRuleQuery : EdBranchRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdBranchRuleQuery class.
		/// </summary>
		public EdBranchRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdBranchRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdBranchRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdBranchRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdBranchRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdBranchRuleQuery
		
	#region CtrStudOutFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrStudOut"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrStudOutFilters : CtrStudOutFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrStudOutFilters class.
		/// </summary>
		public CtrStudOutFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrStudOutFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrStudOutFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrStudOutFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrStudOutFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrStudOutFilters
	
	#region CtrStudOutQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrStudOutParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrStudOut"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrStudOutQuery : CtrStudOutParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrStudOutQuery class.
		/// </summary>
		public CtrStudOutQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrStudOutQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrStudOutQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrStudOutQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrStudOutQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrStudOutQuery
		
	#region EdBylawFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdBylaw"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdBylawFilters : EdBylawFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdBylawFilters class.
		/// </summary>
		public EdBylawFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdBylawFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdBylawFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdBylawFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdBylawFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdBylawFilters
	
	#region EdBylawQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdBylawParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdBylaw"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdBylawQuery : EdBylawParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdBylawQuery class.
		/// </summary>
		public EdBylawQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdBylawQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdBylawQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdBylawQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdBylawQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdBylawQuery
		
	#region EdBranchCrsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdBranchCrs"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdBranchCrsFilters : EdBranchCrsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdBranchCrsFilters class.
		/// </summary>
		public EdBranchCrsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdBranchCrsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdBranchCrsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdBranchCrsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdBranchCrsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdBranchCrsFilters
	
	#region EdBranchCrsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdBranchCrsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdBranchCrs"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdBranchCrsQuery : EdBranchCrsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdBranchCrsQuery class.
		/// </summary>
		public EdBranchCrsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdBranchCrsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdBranchCrsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdBranchCrsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdBranchCrsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdBranchCrsQuery
		
	#region EdAcdadvRmkFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdAcdadvRmk"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcdadvRmkFilters : EdAcdadvRmkFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcdadvRmkFilters class.
		/// </summary>
		public EdAcdadvRmkFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcdadvRmkFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcdadvRmkFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcdadvRmkFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcdadvRmkFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcdadvRmkFilters
	
	#region EdAcdadvRmkQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdAcdadvRmkParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdAcdadvRmk"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcdadvRmkQuery : EdAcdadvRmkParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcdadvRmkQuery class.
		/// </summary>
		public EdAcdadvRmkQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcdadvRmkQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcdadvRmkQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcdadvRmkQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcdadvRmkQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcdadvRmkQuery
		
	#region EdAcadYearFacultyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdAcadYearFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadYearFacultyFilters : EdAcadYearFacultyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFacultyFilters class.
		/// </summary>
		public EdAcadYearFacultyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadYearFacultyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadYearFacultyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadYearFacultyFilters
	
	#region EdAcadYearFacultyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdAcadYearFacultyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdAcadYearFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadYearFacultyQuery : EdAcadYearFacultyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFacultyQuery class.
		/// </summary>
		public EdAcadYearFacultyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadYearFacultyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadYearFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadYearFacultyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadYearFacultyQuery
		
	#region EdAcadPlanFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdAcadPlan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadPlanFilters : EdAcadPlanFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanFilters class.
		/// </summary>
		public EdAcadPlanFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadPlanFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadPlanFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadPlanFilters
	
	#region EdAcadPlanQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdAcadPlanParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdAcadPlan"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadPlanQuery : EdAcadPlanParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanQuery class.
		/// </summary>
		public EdAcadPlanQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadPlanQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadPlanQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadPlanQuery
		
	#region EdAbsenceApproveFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdAbsenceApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAbsenceApproveFilters : EdAbsenceApproveFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAbsenceApproveFilters class.
		/// </summary>
		public EdAbsenceApproveFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAbsenceApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAbsenceApproveFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAbsenceApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAbsenceApproveFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAbsenceApproveFilters
	
	#region EdAbsenceApproveQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdAbsenceApproveParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdAbsenceApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAbsenceApproveQuery : EdAbsenceApproveParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAbsenceApproveQuery class.
		/// </summary>
		public EdAbsenceApproveQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAbsenceApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAbsenceApproveQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAbsenceApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAbsenceApproveQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAbsenceApproveQuery
		
	#region EdAcadPlanDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdAcadPlanDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadPlanDtlFilters : EdAcadPlanDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlFilters class.
		/// </summary>
		public EdAcadPlanDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadPlanDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadPlanDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadPlanDtlFilters
	
	#region EdAcadPlanDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdAcadPlanDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdAcadPlanDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadPlanDtlQuery : EdAcadPlanDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlQuery class.
		/// </summary>
		public EdAcadPlanDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadPlanDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadPlanDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadPlanDtlQuery
		
	#region CtrCdeKtchnJobFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeKtchnJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeKtchnJobFilters : CtrCdeKtchnJobFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeKtchnJobFilters class.
		/// </summary>
		public CtrCdeKtchnJobFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeKtchnJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeKtchnJobFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeKtchnJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeKtchnJobFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeKtchnJobFilters
	
	#region CtrCdeKtchnJobQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeKtchnJobParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeKtchnJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeKtchnJobQuery : CtrCdeKtchnJobParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeKtchnJobQuery class.
		/// </summary>
		public CtrCdeKtchnJobQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeKtchnJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeKtchnJobQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeKtchnJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeKtchnJobQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeKtchnJobQuery
		
	#region EdAcadPlanHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdAcadPlanHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadPlanHdrFilters : EdAcadPlanHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanHdrFilters class.
		/// </summary>
		public EdAcadPlanHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadPlanHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadPlanHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadPlanHdrFilters
	
	#region EdAcadPlanHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdAcadPlanHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdAcadPlanHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdAcadPlanHdrQuery : EdAcadPlanHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanHdrQuery class.
		/// </summary>
		public EdAcadPlanHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdAcadPlanHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdAcadPlanHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdAcadPlanHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdAcadPlanHdrQuery
		
	#region CtrCdeItemTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeItemType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeItemTypeFilters : CtrCdeItemTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeItemTypeFilters class.
		/// </summary>
		public CtrCdeItemTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeItemTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeItemTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeItemTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeItemTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeItemTypeFilters
	
	#region CtrCdeItemTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeItemTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeItemType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeItemTypeQuery : CtrCdeItemTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeItemTypeQuery class.
		/// </summary>
		public CtrCdeItemTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeItemTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeItemTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeItemTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeItemTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeItemTypeQuery
		
	#region CtrCdeExpRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrCdeExpRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeExpRsnFilters : CtrCdeExpRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeExpRsnFilters class.
		/// </summary>
		public CtrCdeExpRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeExpRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeExpRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeExpRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeExpRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeExpRsnFilters
	
	#region CtrCdeExpRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrCdeExpRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrCdeExpRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrCdeExpRsnQuery : CtrCdeExpRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrCdeExpRsnQuery class.
		/// </summary>
		public CtrCdeExpRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeExpRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrCdeExpRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrCdeExpRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrCdeExpRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrCdeExpRsnQuery
		
	#region CoControlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoControlFilters : CoControlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoControlFilters class.
		/// </summary>
		public CoControlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoControlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoControlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoControlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoControlFilters
	
	#region CoControlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoControlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoControl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoControlQuery : CoControlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoControlQuery class.
		/// </summary>
		public CoControlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoControlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoControlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoControlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoControlQuery
		
	#region CoControlMemberFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoControlMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoControlMemberFilters : CoControlMemberFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoControlMemberFilters class.
		/// </summary>
		public CoControlMemberFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoControlMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoControlMemberFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoControlMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoControlMemberFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoControlMemberFilters
	
	#region CoControlMemberQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoControlMemberParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoControlMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoControlMemberQuery : CoControlMemberParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoControlMemberQuery class.
		/// </summary>
		public CoControlMemberQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoControlMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoControlMemberQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoControlMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoControlMemberQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoControlMemberQuery
		
	#region CtrMenuFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrMenu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuFilters : CtrMenuFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuFilters class.
		/// </summary>
		public CtrMenuFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuFilters
	
	#region CtrMenuQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrMenuParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrMenu"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuQuery : CtrMenuParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuQuery class.
		/// </summary>
		public CtrMenuQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuQuery
		
	#region CoControlRoomFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoControlRoom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoControlRoomFilters : CoControlRoomFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoControlRoomFilters class.
		/// </summary>
		public CoControlRoomFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoControlRoomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoControlRoomFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoControlRoomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoControlRoomFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoControlRoomFilters
	
	#region CoControlRoomQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoControlRoomParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoControlRoom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoControlRoomQuery : CoControlRoomParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoControlRoomQuery class.
		/// </summary>
		public CoControlRoomQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoControlRoomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoControlRoomQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoControlRoomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoControlRoomQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoControlRoomQuery
		
	#region CoCourseResultFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoCourseResult"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoCourseResultFilters : CoCourseResultFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoCourseResultFilters class.
		/// </summary>
		public CoCourseResultFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoCourseResultFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoCourseResultFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoCourseResultFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoCourseResultFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoCourseResultFilters
	
	#region CoCourseResultQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoCourseResultParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoCourseResult"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoCourseResultQuery : CoCourseResultParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoCourseResultQuery class.
		/// </summary>
		public CoCourseResultQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoCourseResultQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoCourseResultQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoCourseResultQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoCourseResultQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoCourseResultQuery
		
	#region CoContRoomMemberFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoContRoomMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoContRoomMemberFilters : CoContRoomMemberFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoContRoomMemberFilters class.
		/// </summary>
		public CoContRoomMemberFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoContRoomMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoContRoomMemberFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoContRoomMemberFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoContRoomMemberFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoContRoomMemberFilters
	
	#region CoContRoomMemberQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoContRoomMemberParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoContRoomMember"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoContRoomMemberQuery : CoContRoomMemberParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoContRoomMemberQuery class.
		/// </summary>
		public CoContRoomMemberQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoContRoomMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoContRoomMemberQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoContRoomMemberQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoContRoomMemberQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoContRoomMemberQuery
		
	#region CoContRmMemCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoContRmMemCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoContRmMemCourseFilters : CoContRmMemCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoContRmMemCourseFilters class.
		/// </summary>
		public CoContRmMemCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoContRmMemCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoContRmMemCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoContRmMemCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoContRmMemCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoContRmMemCourseFilters
	
	#region CoContRmMemCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoContRmMemCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoContRmMemCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoContRmMemCourseQuery : CoContRmMemCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoContRmMemCourseQuery class.
		/// </summary>
		public CoContRmMemCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoContRmMemCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoContRmMemCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoContRmMemCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoContRmMemCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoContRmMemCourseQuery
		
	#region AdmTransferAcceptanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmTransferAcceptance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTransferAcceptanceFilters : AdmTransferAcceptanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTransferAcceptanceFilters class.
		/// </summary>
		public AdmTransferAcceptanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTransferAcceptanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTransferAcceptanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTransferAcceptanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTransferAcceptanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTransferAcceptanceFilters
	
	#region AdmTransferAcceptanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmTransferAcceptanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmTransferAcceptance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTransferAcceptanceQuery : AdmTransferAcceptanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTransferAcceptanceQuery class.
		/// </summary>
		public AdmTransferAcceptanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTransferAcceptanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTransferAcceptanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTransferAcceptanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTransferAcceptanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTransferAcceptanceQuery
		
	#region AlmJobFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AlmJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AlmJobFilters : AlmJobFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AlmJobFilters class.
		/// </summary>
		public AlmJobFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AlmJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AlmJobFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AlmJobFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AlmJobFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AlmJobFilters
	
	#region AlmJobQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AlmJobParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AlmJob"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AlmJobQuery : AlmJobParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AlmJobQuery class.
		/// </summary>
		public AlmJobQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AlmJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AlmJobQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AlmJobQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AlmJobQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AlmJobQuery
		
	#region AlmPrintRequestFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AlmPrintRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AlmPrintRequestFilters : AlmPrintRequestFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestFilters class.
		/// </summary>
		public AlmPrintRequestFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AlmPrintRequestFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AlmPrintRequestFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AlmPrintRequestFilters
	
	#region AlmPrintRequestQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AlmPrintRequestParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AlmPrintRequest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AlmPrintRequestQuery : AlmPrintRequestParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestQuery class.
		/// </summary>
		public AlmPrintRequestQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AlmPrintRequestQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AlmPrintRequestQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AlmPrintRequestQuery
		
	#region AppTypeRegStepsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AppTypeRegSteps"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AppTypeRegStepsFilters : AppTypeRegStepsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsFilters class.
		/// </summary>
		public AppTypeRegStepsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AppTypeRegStepsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AppTypeRegStepsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AppTypeRegStepsFilters
	
	#region AppTypeRegStepsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AppTypeRegStepsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AppTypeRegSteps"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AppTypeRegStepsQuery : AppTypeRegStepsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsQuery class.
		/// </summary>
		public AppTypeRegStepsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AppTypeRegStepsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AppTypeRegStepsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AppTypeRegStepsQuery
		
	#region CoClemRuleFacFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoClemRuleFac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoClemRuleFacFilters : CoClemRuleFacFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoClemRuleFacFilters class.
		/// </summary>
		public CoClemRuleFacFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoClemRuleFacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoClemRuleFacFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoClemRuleFacFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoClemRuleFacFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoClemRuleFacFilters
	
	#region CoClemRuleFacQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoClemRuleFacParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoClemRuleFac"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoClemRuleFacQuery : CoClemRuleFacParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoClemRuleFacQuery class.
		/// </summary>
		public CoClemRuleFacQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoClemRuleFacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoClemRuleFacQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoClemRuleFacQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoClemRuleFacQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoClemRuleFacQuery
		
	#region CoCrsRsltRaiseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoCrsRsltRaise"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoCrsRsltRaiseFilters : CoCrsRsltRaiseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseFilters class.
		/// </summary>
		public CoCrsRsltRaiseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoCrsRsltRaiseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoCrsRsltRaiseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoCrsRsltRaiseFilters
	
	#region CoCrsRsltRaiseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoCrsRsltRaiseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoCrsRsltRaise"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoCrsRsltRaiseQuery : CoCrsRsltRaiseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseQuery class.
		/// </summary>
		public CoCrsRsltRaiseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoCrsRsltRaiseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoCrsRsltRaiseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoCrsRsltRaiseQuery
		
	#region CtrMenuItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrMenuItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuItemFilters : CtrMenuItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuItemFilters class.
		/// </summary>
		public CtrMenuItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuItemFilters
	
	#region CtrMenuItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrMenuItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrMenuItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuItemQuery : CtrMenuItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuItemQuery class.
		/// </summary>
		public CtrMenuItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuItemQuery
		
	#region CoExamPaperFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoExamPaper"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamPaperFilters : CoExamPaperFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamPaperFilters class.
		/// </summary>
		public CoExamPaperFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamPaperFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamPaperFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamPaperFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamPaperFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamPaperFilters
	
	#region CoExamPaperQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoExamPaperParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoExamPaper"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamPaperQuery : CoExamPaperParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamPaperQuery class.
		/// </summary>
		public CoExamPaperQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamPaperQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamPaperQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamPaperQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamPaperQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamPaperQuery
		
	#region CoExaminerCorectorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoExaminerCorector"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExaminerCorectorFilters : CoExaminerCorectorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExaminerCorectorFilters class.
		/// </summary>
		public CoExaminerCorectorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExaminerCorectorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExaminerCorectorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExaminerCorectorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExaminerCorectorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExaminerCorectorFilters
	
	#region CoExaminerCorectorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoExaminerCorectorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoExaminerCorector"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExaminerCorectorQuery : CoExaminerCorectorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExaminerCorectorQuery class.
		/// </summary>
		public CoExaminerCorectorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExaminerCorectorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExaminerCorectorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExaminerCorectorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExaminerCorectorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExaminerCorectorQuery
		
	#region CoScheduleDetailFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoScheduleDetail"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoScheduleDetailFilters : CoScheduleDetailFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailFilters class.
		/// </summary>
		public CoScheduleDetailFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoScheduleDetailFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoScheduleDetailFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoScheduleDetailFilters
	
	#region CoScheduleDetailQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoScheduleDetailParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoScheduleDetail"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoScheduleDetailQuery : CoScheduleDetailParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailQuery class.
		/// </summary>
		public CoScheduleDetailQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoScheduleDetailQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoScheduleDetailQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoScheduleDetailQuery
		
	#region CoSupervisorStudCountFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoSupervisorStudCount"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoSupervisorStudCountFilters : CoSupervisorStudCountFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoSupervisorStudCountFilters class.
		/// </summary>
		public CoSupervisorStudCountFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoSupervisorStudCountFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoSupervisorStudCountFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoSupervisorStudCountFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoSupervisorStudCountFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoSupervisorStudCountFilters
	
	#region CoSupervisorStudCountQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoSupervisorStudCountParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoSupervisorStudCount"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoSupervisorStudCountQuery : CoSupervisorStudCountParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoSupervisorStudCountQuery class.
		/// </summary>
		public CoSupervisorStudCountQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoSupervisorStudCountQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoSupervisorStudCountQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoSupervisorStudCountQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoSupervisorStudCountQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoSupervisorStudCountQuery
		
	#region CoExamCommitteeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoExamCommittee"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamCommitteeFilters : CoExamCommitteeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeFilters class.
		/// </summary>
		public CoExamCommitteeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamCommitteeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamCommitteeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamCommitteeFilters
	
	#region CoExamCommitteeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoExamCommitteeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoExamCommittee"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamCommitteeQuery : CoExamCommitteeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeQuery class.
		/// </summary>
		public CoExamCommitteeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamCommitteeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamCommitteeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamCommitteeQuery
		
	#region CoExamCommSupervisorAltFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoExamCommSupervisorAlt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamCommSupervisorAltFilters : CoExamCommSupervisorAltFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorAltFilters class.
		/// </summary>
		public CoExamCommSupervisorAltFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorAltFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamCommSupervisorAltFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorAltFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamCommSupervisorAltFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamCommSupervisorAltFilters
	
	#region CoExamCommSupervisorAltQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoExamCommSupervisorAltParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoExamCommSupervisorAlt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamCommSupervisorAltQuery : CoExamCommSupervisorAltParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorAltQuery class.
		/// </summary>
		public CoExamCommSupervisorAltQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorAltQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamCommSupervisorAltQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorAltQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamCommSupervisorAltQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamCommSupervisorAltQuery
		
	#region CtrMenuActFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrMenuAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuActFilters : CtrMenuActFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuActFilters class.
		/// </summary>
		public CtrMenuActFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuActFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuActFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuActFilters
	
	#region CtrMenuActQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrMenuActParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrMenuAct"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuActQuery : CtrMenuActParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuActQuery class.
		/// </summary>
		public CtrMenuActQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuActQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuActQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuActQuery
		
	#region CtrMenuActItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrMenuActItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuActItemFilters : CtrMenuActItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuActItemFilters class.
		/// </summary>
		public CtrMenuActItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuActItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuActItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuActItemFilters
	
	#region CtrMenuActItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrMenuActItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrMenuActItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMenuActItemQuery : CtrMenuActItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMenuActItemQuery class.
		/// </summary>
		public CtrMenuActItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMenuActItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMenuActItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMenuActItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMenuActItemQuery
		
	#region CtrMealItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CtrMealItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMealItemFilters : CtrMealItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMealItemFilters class.
		/// </summary>
		public CtrMealItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMealItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMealItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMealItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMealItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMealItemFilters
	
	#region CtrMealItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CtrMealItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CtrMealItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CtrMealItemQuery : CtrMealItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CtrMealItemQuery class.
		/// </summary>
		public CtrMealItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CtrMealItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CtrMealItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CtrMealItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CtrMealItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CtrMealItemQuery
		
	#region CoExamSchdlPlaceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoExamSchdlPlace"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamSchdlPlaceFilters : CoExamSchdlPlaceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamSchdlPlaceFilters class.
		/// </summary>
		public CoExamSchdlPlaceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamSchdlPlaceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamSchdlPlaceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamSchdlPlaceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamSchdlPlaceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamSchdlPlaceFilters
	
	#region CoExamSchdlPlaceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoExamSchdlPlaceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoExamSchdlPlace"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamSchdlPlaceQuery : CoExamSchdlPlaceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamSchdlPlaceQuery class.
		/// </summary>
		public CoExamSchdlPlaceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamSchdlPlaceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamSchdlPlaceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamSchdlPlaceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamSchdlPlaceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamSchdlPlaceQuery
		
	#region CoExamCommSupervisorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoExamCommSupervisor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamCommSupervisorFilters : CoExamCommSupervisorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorFilters class.
		/// </summary>
		public CoExamCommSupervisorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamCommSupervisorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamCommSupervisorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamCommSupervisorFilters
	
	#region CoExamCommSupervisorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoExamCommSupervisorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoExamCommSupervisor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamCommSupervisorQuery : CoExamCommSupervisorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorQuery class.
		/// </summary>
		public CoExamCommSupervisorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamCommSupervisorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamCommSupervisorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamCommSupervisorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamCommSupervisorQuery
		
	#region EdCdeAcadWarnTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeAcadWarnType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeAcadWarnTypeFilters : EdCdeAcadWarnTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeAcadWarnTypeFilters class.
		/// </summary>
		public EdCdeAcadWarnTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeAcadWarnTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeAcadWarnTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeAcadWarnTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeAcadWarnTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeAcadWarnTypeFilters
	
	#region EdCdeAcadWarnTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeAcadWarnTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeAcadWarnType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeAcadWarnTypeQuery : EdCdeAcadWarnTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeAcadWarnTypeQuery class.
		/// </summary>
		public EdCdeAcadWarnTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeAcadWarnTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeAcadWarnTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeAcadWarnTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeAcadWarnTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeAcadWarnTypeQuery
		
	#region EdCdeCourseChngRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeCourseChngRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeCourseChngRsnFilters : EdCdeCourseChngRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeCourseChngRsnFilters class.
		/// </summary>
		public EdCdeCourseChngRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCourseChngRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeCourseChngRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCourseChngRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeCourseChngRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeCourseChngRsnFilters
	
	#region EdCdeCourseChngRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeCourseChngRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeCourseChngRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeCourseChngRsnQuery : EdCdeCourseChngRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeCourseChngRsnQuery class.
		/// </summary>
		public EdCdeCourseChngRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCourseChngRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeCourseChngRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCourseChngRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeCourseChngRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeCourseChngRsnQuery
		
	#region EdCdeCrsRegTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeCrsRegType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeCrsRegTypeFilters : EdCdeCrsRegTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeCrsRegTypeFilters class.
		/// </summary>
		public EdCdeCrsRegTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCrsRegTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeCrsRegTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCrsRegTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeCrsRegTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeCrsRegTypeFilters
	
	#region EdCdeCrsRegTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeCrsRegTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeCrsRegType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeCrsRegTypeQuery : EdCdeCrsRegTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeCrsRegTypeQuery class.
		/// </summary>
		public EdCdeCrsRegTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCrsRegTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeCrsRegTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeCrsRegTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeCrsRegTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeCrsRegTypeQuery
		
	#region EdCodeGradingTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeGradingType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeGradingTypeFilters : EdCodeGradingTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingTypeFilters class.
		/// </summary>
		public EdCodeGradingTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeGradingTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeGradingTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeGradingTypeFilters
	
	#region EdCodeGradingTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeGradingTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeGradingType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeGradingTypeQuery : EdCodeGradingTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingTypeQuery class.
		/// </summary>
		public EdCodeGradingTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeGradingTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeGradingTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeGradingTypeQuery
		
	#region EdCodeLevelFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeLevelFilters : EdCodeLevelFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeLevelFilters class.
		/// </summary>
		public EdCodeLevelFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeLevelFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeLevelFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeLevelFilters
	
	#region EdCodeLevelQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeLevelParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeLevelQuery : EdCodeLevelParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeLevelQuery class.
		/// </summary>
		public EdCodeLevelQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeLevelQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeLevelQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeLevelQuery
		
	#region EdCodeLoadTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeLoadType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeLoadTypeFilters : EdCodeLoadTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeLoadTypeFilters class.
		/// </summary>
		public EdCodeLoadTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLoadTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeLoadTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLoadTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeLoadTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeLoadTypeFilters
	
	#region EdCodeLoadTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeLoadTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeLoadType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeLoadTypeQuery : EdCodeLoadTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeLoadTypeQuery class.
		/// </summary>
		public EdCodeLoadTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLoadTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeLoadTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeLoadTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeLoadTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeLoadTypeQuery
		
	#region EdCodeQualFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeQualFilters : EdCodeQualFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeQualFilters class.
		/// </summary>
		public EdCodeQualFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeQualFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeQualFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeQualFilters
	
	#region EdCodeQualQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeQualParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeQualQuery : EdCodeQualParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeQualQuery class.
		/// </summary>
		public EdCodeQualQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeQualQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeQualQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeQualQuery
		
	#region EdCodeStudyMethodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeStudyMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeStudyMethodFilters : EdCodeStudyMethodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeStudyMethodFilters class.
		/// </summary>
		public EdCodeStudyMethodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudyMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeStudyMethodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudyMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeStudyMethodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeStudyMethodFilters
	
	#region EdCodeStudyMethodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeStudyMethodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeStudyMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeStudyMethodQuery : EdCodeStudyMethodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeStudyMethodQuery class.
		/// </summary>
		public EdCodeStudyMethodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudyMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeStudyMethodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudyMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeStudyMethodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeStudyMethodQuery
		
	#region EdCodeGradingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeGrading"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeGradingFilters : EdCodeGradingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingFilters class.
		/// </summary>
		public EdCodeGradingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeGradingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeGradingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeGradingFilters
	
	#region EdCodeGradingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeGradingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeGrading"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeGradingQuery : EdCodeGradingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingQuery class.
		/// </summary>
		public EdCodeGradingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeGradingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeGradingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeGradingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeGradingQuery
		
	#region EdCodeExamPeriodTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeExamPeriodType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeExamPeriodTypeFilters : EdCodeExamPeriodTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeExamPeriodTypeFilters class.
		/// </summary>
		public EdCodeExamPeriodTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExamPeriodTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeExamPeriodTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExamPeriodTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeExamPeriodTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeExamPeriodTypeFilters
	
	#region EdCodeExamPeriodTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeExamPeriodTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeExamPeriodType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeExamPeriodTypeQuery : EdCodeExamPeriodTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeExamPeriodTypeQuery class.
		/// </summary>
		public EdCodeExamPeriodTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExamPeriodTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeExamPeriodTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExamPeriodTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeExamPeriodTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeExamPeriodTypeQuery
		
	#region EdCodeExcuseTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeExcuseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeExcuseTypeFilters : EdCodeExcuseTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeExcuseTypeFilters class.
		/// </summary>
		public EdCodeExcuseTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExcuseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeExcuseTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExcuseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeExcuseTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeExcuseTypeFilters
	
	#region EdCodeExcuseTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeExcuseTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeExcuseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeExcuseTypeQuery : EdCodeExcuseTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeExcuseTypeQuery class.
		/// </summary>
		public EdCodeExcuseTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExcuseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeExcuseTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeExcuseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeExcuseTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeExcuseTypeQuery
		
	#region CoExamPlaceStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoExamPlaceStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamPlaceStudFilters : CoExamPlaceStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamPlaceStudFilters class.
		/// </summary>
		public CoExamPlaceStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamPlaceStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamPlaceStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamPlaceStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamPlaceStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamPlaceStudFilters
	
	#region CoExamPlaceStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoExamPlaceStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoExamPlaceStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoExamPlaceStudQuery : CoExamPlaceStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoExamPlaceStudQuery class.
		/// </summary>
		public CoExamPlaceStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoExamPlaceStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoExamPlaceStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoExamPlaceStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoExamPlaceStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoExamPlaceStudQuery
		
	#region CoStudSecretNumFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoStudSecretNum"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoStudSecretNumFilters : CoStudSecretNumFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoStudSecretNumFilters class.
		/// </summary>
		public CoStudSecretNumFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoStudSecretNumFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoStudSecretNumFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoStudSecretNumFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoStudSecretNumFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoStudSecretNumFilters
	
	#region CoStudSecretNumQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoStudSecretNumParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoStudSecretNum"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoStudSecretNumQuery : CoStudSecretNumParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoStudSecretNumQuery class.
		/// </summary>
		public CoStudSecretNumQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoStudSecretNumQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoStudSecretNumQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoStudSecretNumQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoStudSecretNumQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoStudSecretNumQuery
		
	#region CoStudCheatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="CoStudCheat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoStudCheatFilters : CoStudCheatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoStudCheatFilters class.
		/// </summary>
		public CoStudCheatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoStudCheatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoStudCheatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoStudCheatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoStudCheatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoStudCheatFilters
	
	#region CoStudCheatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="CoStudCheatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="CoStudCheat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class CoStudCheatQuery : CoStudCheatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the CoStudCheatQuery class.
		/// </summary>
		public CoStudCheatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the CoStudCheatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public CoStudCheatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the CoStudCheatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public CoStudCheatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion CoStudCheatQuery
		
	#region EdCodeQualGroupFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeQualGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeQualGroupFilters : EdCodeQualGroupFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupFilters class.
		/// </summary>
		public EdCodeQualGroupFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeQualGroupFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeQualGroupFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeQualGroupFilters
	
	#region EdCodeQualGroupQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeQualGroupParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeQualGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeQualGroupQuery : EdCodeQualGroupParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupQuery class.
		/// </summary>
		public EdCodeQualGroupQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeQualGroupQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeQualGroupQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeQualGroupQuery
		
	#region EdCodeQualSubjectFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeQualSubject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeQualSubjectFilters : EdCodeQualSubjectFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectFilters class.
		/// </summary>
		public EdCodeQualSubjectFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeQualSubjectFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeQualSubjectFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeQualSubjectFilters
	
	#region EdCodeQualSubjectQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeQualSubjectParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeQualSubject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeQualSubjectQuery : EdCodeQualSubjectParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectQuery class.
		/// </summary>
		public EdCodeQualSubjectQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeQualSubjectQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeQualSubjectQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeQualSubjectQuery
		
	#region EdCodeRatingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeRating"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeRatingFilters : EdCodeRatingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeRatingFilters class.
		/// </summary>
		public EdCodeRatingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRatingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeRatingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRatingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeRatingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeRatingFilters
	
	#region EdCodeRatingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeRatingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeRating"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeRatingQuery : EdCodeRatingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeRatingQuery class.
		/// </summary>
		public EdCodeRatingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRatingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeRatingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRatingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeRatingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeRatingQuery
		
	#region EdCodeTrainEvalFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeTrainEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeTrainEvalFilters : EdCodeTrainEvalFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeTrainEvalFilters class.
		/// </summary>
		public EdCodeTrainEvalFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTrainEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeTrainEvalFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTrainEvalFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeTrainEvalFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeTrainEvalFilters
	
	#region EdCodeTrainEvalQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeTrainEvalParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeTrainEval"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeTrainEvalQuery : EdCodeTrainEvalParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeTrainEvalQuery class.
		/// </summary>
		public EdCodeTrainEvalQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTrainEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeTrainEvalQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTrainEvalQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeTrainEvalQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeTrainEvalQuery
		
	#region EdCourseExpHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseExpHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseExpHdrFilters : EdCourseExpHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseExpHdrFilters class.
		/// </summary>
		public EdCourseExpHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseExpHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseExpHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseExpHdrFilters
	
	#region EdCourseExpHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseExpHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseExpHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseExpHdrQuery : EdCourseExpHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseExpHdrQuery class.
		/// </summary>
		public EdCourseExpHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseExpHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseExpHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseExpHdrQuery
		
	#region EdCodeTransCourseTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeTransCourseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeTransCourseTypeFilters : EdCodeTransCourseTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeTransCourseTypeFilters class.
		/// </summary>
		public EdCodeTransCourseTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTransCourseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeTransCourseTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTransCourseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeTransCourseTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeTransCourseTypeFilters
	
	#region EdCodeTransCourseTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeTransCourseTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeTransCourseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeTransCourseTypeQuery : EdCodeTransCourseTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeTransCourseTypeQuery class.
		/// </summary>
		public EdCodeTransCourseTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTransCourseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeTransCourseTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeTransCourseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeTransCourseTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeTransCourseTypeQuery
		
	#region EdCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseFilters : EdCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseFilters class.
		/// </summary>
		public EdCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseFilters
	
	#region EdCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseQuery : EdCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseQuery class.
		/// </summary>
		public EdCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseQuery
		
	#region EdCodeSubjectFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeSubject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSubjectFilters : EdCodeSubjectFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSubjectFilters class.
		/// </summary>
		public EdCodeSubjectFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSubjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSubjectFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSubjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSubjectFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSubjectFilters
	
	#region EdCodeSubjectQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeSubjectParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeSubject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSubjectQuery : EdCodeSubjectParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSubjectQuery class.
		/// </summary>
		public EdCodeSubjectQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSubjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSubjectQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSubjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSubjectQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSubjectQuery
		
	#region EdCodeStudCaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeStudCase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeStudCaseFilters : EdCodeStudCaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeStudCaseFilters class.
		/// </summary>
		public EdCodeStudCaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudCaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeStudCaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudCaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeStudCaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeStudCaseFilters
	
	#region EdCodeStudCaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeStudCaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeStudCase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeStudCaseQuery : EdCodeStudCaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeStudCaseQuery class.
		/// </summary>
		public EdCodeStudCaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudCaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeStudCaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStudCaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeStudCaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeStudCaseQuery
		
	#region EdCodeRepeatRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeRepeatRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeRepeatRuleFilters : EdCodeRepeatRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeRepeatRuleFilters class.
		/// </summary>
		public EdCodeRepeatRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRepeatRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeRepeatRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRepeatRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeRepeatRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeRepeatRuleFilters
	
	#region EdCodeRepeatRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeRepeatRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeRepeatRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeRepeatRuleQuery : EdCodeRepeatRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeRepeatRuleQuery class.
		/// </summary>
		public EdCodeRepeatRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRepeatRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeRepeatRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeRepeatRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeRepeatRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeRepeatRuleQuery
		
	#region EdCodeSemActvityFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeSemActvity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSemActvityFilters : EdCodeSemActvityFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSemActvityFilters class.
		/// </summary>
		public EdCodeSemActvityFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemActvityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSemActvityFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemActvityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSemActvityFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSemActvityFilters
	
	#region EdCodeSemActvityQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeSemActvityParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeSemActvity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeSemActvityQuery : EdCodeSemActvityParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeSemActvityQuery class.
		/// </summary>
		public EdCodeSemActvityQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemActvityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeSemActvityQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeSemActvityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeSemActvityQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeSemActvityQuery
		
	#region EdCoursePrfxFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCoursePrfx"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCoursePrfxFilters : EdCoursePrfxFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCoursePrfxFilters class.
		/// </summary>
		public EdCoursePrfxFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCoursePrfxFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCoursePrfxFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCoursePrfxFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCoursePrfxFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCoursePrfxFilters
	
	#region EdCoursePrfxQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCoursePrfxParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCoursePrfx"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCoursePrfxQuery : EdCoursePrfxParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCoursePrfxQuery class.
		/// </summary>
		public EdCoursePrfxQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCoursePrfxQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCoursePrfxQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCoursePrfxQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCoursePrfxQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCoursePrfxQuery
		
	#region EdCodeStateStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeStateStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeStateStatusFilters : EdCodeStateStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeStateStatusFilters class.
		/// </summary>
		public EdCodeStateStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStateStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeStateStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStateStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeStateStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeStateStatusFilters
	
	#region EdCodeStateStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeStateStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeStateStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeStateStatusQuery : EdCodeStateStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeStateStatusQuery class.
		/// </summary>
		public EdCodeStateStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStateStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeStateStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeStateStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeStateStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeStateStatusQuery
		
	#region EdCodeEnrollTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeEnrollType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeEnrollTypeFilters : EdCodeEnrollTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeEnrollTypeFilters class.
		/// </summary>
		public EdCodeEnrollTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeEnrollTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeEnrollTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeEnrollTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeEnrollTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeEnrollTypeFilters
	
	#region EdCodeEnrollTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeEnrollTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeEnrollType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeEnrollTypeQuery : EdCodeEnrollTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeEnrollTypeQuery class.
		/// </summary>
		public EdCodeEnrollTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeEnrollTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeEnrollTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeEnrollTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeEnrollTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeEnrollTypeQuery
		
	#region EdCodeDischargeReasonsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeDischargeReasons"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeDischargeReasonsFilters : EdCodeDischargeReasonsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeReasonsFilters class.
		/// </summary>
		public EdCodeDischargeReasonsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeReasonsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeDischargeReasonsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeReasonsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeDischargeReasonsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeDischargeReasonsFilters
	
	#region EdCodeDischargeReasonsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeDischargeReasonsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeDischargeReasons"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeDischargeReasonsQuery : EdCodeDischargeReasonsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeReasonsQuery class.
		/// </summary>
		public EdCodeDischargeReasonsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeReasonsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeDischargeReasonsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeReasonsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeDischargeReasonsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeDischargeReasonsQuery
		
	#region EdCdeOutcomeCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeOutcomeCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeOutcomeCatFilters : EdCdeOutcomeCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeOutcomeCatFilters class.
		/// </summary>
		public EdCdeOutcomeCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeOutcomeCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeOutcomeCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeOutcomeCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeOutcomeCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeOutcomeCatFilters
	
	#region EdCdeOutcomeCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeOutcomeCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeOutcomeCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeOutcomeCatQuery : EdCdeOutcomeCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeOutcomeCatQuery class.
		/// </summary>
		public EdCdeOutcomeCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeOutcomeCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeOutcomeCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeOutcomeCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeOutcomeCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeOutcomeCatQuery
		
	#region EdCodeDischargeHFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeDischargeH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeDischargeHFilters : EdCodeDischargeHFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeHFilters class.
		/// </summary>
		public EdCodeDischargeHFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeDischargeHFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeHFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeDischargeHFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeDischargeHFilters
	
	#region EdCodeDischargeHQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeDischargeHParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeDischargeH"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeDischargeHQuery : EdCodeDischargeHParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeHQuery class.
		/// </summary>
		public EdCodeDischargeHQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeDischargeHQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeDischargeHQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeDischargeHQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeDischargeHQuery
		
	#region EdCdeQualCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeQualCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualCatFilters : EdCdeQualCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatFilters class.
		/// </summary>
		public EdCdeQualCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualCatFilters
	
	#region EdCdeQualCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeQualCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeQualCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualCatQuery : EdCdeQualCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatQuery class.
		/// </summary>
		public EdCdeQualCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualCatQuery
		
	#region EdCdeQualBrnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeQualBrn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualBrnFilters : EdCdeQualBrnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualBrnFilters class.
		/// </summary>
		public EdCdeQualBrnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualBrnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualBrnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualBrnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualBrnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualBrnFilters
	
	#region EdCdeQualBrnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeQualBrnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeQualBrn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualBrnQuery : EdCdeQualBrnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualBrnQuery class.
		/// </summary>
		public EdCdeQualBrnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualBrnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualBrnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualBrnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualBrnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualBrnQuery
		
	#region EdCdeQualPhaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeQualPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualPhaseFilters : EdCdeQualPhaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualPhaseFilters class.
		/// </summary>
		public EdCdeQualPhaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualPhaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualPhaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualPhaseFilters
	
	#region EdCdeQualPhaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeQualPhaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeQualPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualPhaseQuery : EdCdeQualPhaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualPhaseQuery class.
		/// </summary>
		public EdCdeQualPhaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualPhaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualPhaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualPhaseQuery
		
	#region EdCdeGrdChngRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeGrdChngRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeGrdChngRsnFilters : EdCdeGrdChngRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeGrdChngRsnFilters class.
		/// </summary>
		public EdCdeGrdChngRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeGrdChngRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeGrdChngRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeGrdChngRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeGrdChngRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeGrdChngRsnFilters
	
	#region EdCdeGrdChngRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeGrdChngRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeGrdChngRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeGrdChngRsnQuery : EdCdeGrdChngRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeGrdChngRsnQuery class.
		/// </summary>
		public EdCdeGrdChngRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeGrdChngRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeGrdChngRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeGrdChngRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeGrdChngRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeGrdChngRsnQuery
		
	#region EdCdeExmptFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeExmpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExmptFilters : EdCdeExmptFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExmptFilters class.
		/// </summary>
		public EdCdeExmptFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExmptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExmptFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExmptFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExmptFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExmptFilters
	
	#region EdCdeExmptQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeExmptParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeExmpt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExmptQuery : EdCdeExmptParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExmptQuery class.
		/// </summary>
		public EdCdeExmptQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExmptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExmptQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExmptQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExmptQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExmptQuery
		
	#region EdCdeExecuseRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeExecuseRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExecuseRsnFilters : EdCdeExecuseRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExecuseRsnFilters class.
		/// </summary>
		public EdCdeExecuseRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExecuseRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExecuseRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExecuseRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExecuseRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExecuseRsnFilters
	
	#region EdCdeExecuseRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeExecuseRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeExecuseRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExecuseRsnQuery : EdCdeExecuseRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExecuseRsnQuery class.
		/// </summary>
		public EdCdeExecuseRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExecuseRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExecuseRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExecuseRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExecuseRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExecuseRsnQuery
		
	#region EdCdeEmpQualFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeEmpQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeEmpQualFilters : EdCdeEmpQualFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeEmpQualFilters class.
		/// </summary>
		public EdCdeEmpQualFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEmpQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeEmpQualFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEmpQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeEmpQualFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeEmpQualFilters
	
	#region EdCdeEmpQualQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeEmpQualParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeEmpQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeEmpQualQuery : EdCdeEmpQualParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeEmpQualQuery class.
		/// </summary>
		public EdCdeEmpQualQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEmpQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeEmpQualQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEmpQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeEmpQualQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeEmpQualQuery
		
	#region EdCdeEnrollChngRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeEnrollChngRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeEnrollChngRsnFilters : EdCdeEnrollChngRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeEnrollChngRsnFilters class.
		/// </summary>
		public EdCdeEnrollChngRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEnrollChngRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeEnrollChngRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEnrollChngRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeEnrollChngRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeEnrollChngRsnFilters
	
	#region EdCdeEnrollChngRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeEnrollChngRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeEnrollChngRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeEnrollChngRsnQuery : EdCdeEnrollChngRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeEnrollChngRsnQuery class.
		/// </summary>
		public EdCdeEnrollChngRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEnrollChngRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeEnrollChngRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeEnrollChngRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeEnrollChngRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeEnrollChngRsnQuery
		
	#region EdCdeExamSchdlTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeExamSchdlType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExamSchdlTypeFilters : EdCdeExamSchdlTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExamSchdlTypeFilters class.
		/// </summary>
		public EdCdeExamSchdlTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamSchdlTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExamSchdlTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamSchdlTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExamSchdlTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExamSchdlTypeFilters
	
	#region EdCdeExamSchdlTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeExamSchdlTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeExamSchdlType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExamSchdlTypeQuery : EdCdeExamSchdlTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExamSchdlTypeQuery class.
		/// </summary>
		public EdCdeExamSchdlTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamSchdlTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExamSchdlTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamSchdlTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExamSchdlTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExamSchdlTypeQuery
		
	#region EdCdeExamTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeExamType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExamTypeFilters : EdCdeExamTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExamTypeFilters class.
		/// </summary>
		public EdCdeExamTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExamTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExamTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExamTypeFilters
	
	#region EdCdeExamTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeExamTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeExamType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeExamTypeQuery : EdCdeExamTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeExamTypeQuery class.
		/// </summary>
		public EdCdeExamTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeExamTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeExamTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeExamTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeExamTypeQuery
		
	#region EdCdeQualStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeQualStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualStatusFilters : EdCdeQualStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualStatusFilters class.
		/// </summary>
		public EdCdeQualStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualStatusFilters
	
	#region EdCdeQualStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeQualStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeQualStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeQualStatusQuery : EdCdeQualStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeQualStatusQuery class.
		/// </summary>
		public EdCdeQualStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeQualStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeQualStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeQualStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeQualStatusQuery
		
	#region EdCdeSchoolGradeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeSchoolGrade"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeSchoolGradeFilters : EdCdeSchoolGradeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeSchoolGradeFilters class.
		/// </summary>
		public EdCdeSchoolGradeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSchoolGradeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeSchoolGradeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSchoolGradeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeSchoolGradeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeSchoolGradeFilters
	
	#region EdCdeSchoolGradeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeSchoolGradeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeSchoolGrade"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeSchoolGradeQuery : EdCdeSchoolGradeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeSchoolGradeQuery class.
		/// </summary>
		public EdCdeSchoolGradeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSchoolGradeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeSchoolGradeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSchoolGradeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeSchoolGradeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeSchoolGradeQuery
		
	#region EdCodeCourseChngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseChngFilters : EdCodeCourseChngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseChngFilters class.
		/// </summary>
		public EdCodeCourseChngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseChngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseChngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseChngFilters
	
	#region EdCodeCourseChngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCourseChngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseChngQuery : EdCodeCourseChngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseChngQuery class.
		/// </summary>
		public EdCodeCourseChngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseChngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseChngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseChngQuery
		
	#region EdCodeCourseStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseStatusFilters : EdCodeCourseStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseStatusFilters class.
		/// </summary>
		public EdCodeCourseStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseStatusFilters
	
	#region EdCodeCourseStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCourseStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseStatusQuery : EdCodeCourseStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseStatusQuery class.
		/// </summary>
		public EdCodeCourseStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseStatusQuery
		
	#region EdCodeCourseTeachingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseTeaching"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseTeachingFilters : EdCodeCourseTeachingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTeachingFilters class.
		/// </summary>
		public EdCodeCourseTeachingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTeachingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseTeachingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTeachingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseTeachingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseTeachingFilters
	
	#region EdCodeCourseTeachingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCourseTeachingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseTeaching"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseTeachingQuery : EdCodeCourseTeachingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTeachingQuery class.
		/// </summary>
		public EdCodeCourseTeachingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTeachingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseTeachingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTeachingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseTeachingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseTeachingQuery
		
	#region EdCodeCourseTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseTypeFilters : EdCodeCourseTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTypeFilters class.
		/// </summary>
		public EdCodeCourseTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseTypeFilters
	
	#region EdCodeCourseTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCourseTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseTypeQuery : EdCodeCourseTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTypeQuery class.
		/// </summary>
		public EdCodeCourseTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseTypeQuery
		
	#region EdCodeCourseCaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseCase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseCaseFilters : EdCodeCourseCaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseCaseFilters class.
		/// </summary>
		public EdCodeCourseCaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseCaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseCaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseCaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseCaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseCaseFilters
	
	#region EdCodeCourseCaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCourseCaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseCase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseCaseQuery : EdCodeCourseCaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseCaseQuery class.
		/// </summary>
		public EdCodeCourseCaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseCaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseCaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseCaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseCaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseCaseQuery
		
	#region EdCodeCourseAssessFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseAssessFilters : EdCodeCourseAssessFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessFilters class.
		/// </summary>
		public EdCodeCourseAssessFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseAssessFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseAssessFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseAssessFilters
	
	#region EdCodeCourseAssessQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCourseAssessParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCourseAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseAssessQuery : EdCodeCourseAssessParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessQuery class.
		/// </summary>
		public EdCodeCourseAssessQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseAssessQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseAssessQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseAssessQuery
		
	#region EdCodeCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseFilters : EdCodeCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseFilters class.
		/// </summary>
		public EdCodeCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseFilters
	
	#region EdCodeCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCourseQuery : EdCodeCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseQuery class.
		/// </summary>
		public EdCodeCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCourseQuery
		
	#region EdCdeSocialAffairFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeSocialAffair"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeSocialAffairFilters : EdCdeSocialAffairFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeSocialAffairFilters class.
		/// </summary>
		public EdCdeSocialAffairFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSocialAffairFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeSocialAffairFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSocialAffairFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeSocialAffairFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeSocialAffairFilters
	
	#region EdCdeSocialAffairQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeSocialAffairParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeSocialAffair"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeSocialAffairQuery : EdCdeSocialAffairParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeSocialAffairQuery class.
		/// </summary>
		public EdCdeSocialAffairQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSocialAffairQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeSocialAffairQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeSocialAffairQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeSocialAffairQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeSocialAffairQuery
		
	#region EdCdeStudTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeStudType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeStudTypeFilters : EdCdeStudTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeStudTypeFilters class.
		/// </summary>
		public EdCdeStudTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeStudTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeStudTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeStudTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeStudTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeStudTypeFilters
	
	#region EdCdeStudTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeStudTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeStudType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeStudTypeQuery : EdCdeStudTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeStudTypeQuery class.
		/// </summary>
		public EdCdeStudTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeStudTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeStudTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeStudTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeStudTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeStudTypeQuery
		
	#region EdCdeTchngMthdFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCdeTchngMthd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeTchngMthdFilters : EdCdeTchngMthdFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeTchngMthdFilters class.
		/// </summary>
		public EdCdeTchngMthdFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeTchngMthdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeTchngMthdFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeTchngMthdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeTchngMthdFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeTchngMthdFilters
	
	#region EdCdeTchngMthdQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCdeTchngMthdParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCdeTchngMthd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCdeTchngMthdQuery : EdCdeTchngMthdParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCdeTchngMthdQuery class.
		/// </summary>
		public EdCdeTchngMthdQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCdeTchngMthdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCdeTchngMthdQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCdeTchngMthdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCdeTchngMthdQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCdeTchngMthdQuery
		
	#region EdCodeCheatRsltFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCodeCheatRslt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCheatRsltFilters : EdCodeCheatRsltFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCheatRsltFilters class.
		/// </summary>
		public EdCodeCheatRsltFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCheatRsltFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCheatRsltFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCheatRsltFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCheatRsltFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCheatRsltFilters
	
	#region EdCodeCheatRsltQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCodeCheatRsltParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCodeCheatRslt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCodeCheatRsltQuery : EdCodeCheatRsltParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCodeCheatRsltQuery class.
		/// </summary>
		public EdCodeCheatRsltQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCheatRsltQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCodeCheatRsltQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCodeCheatRsltQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCodeCheatRsltQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCodeCheatRsltQuery
		
	#region AdmTransAcceptanceCategoryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmTransAcceptanceCategory"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTransAcceptanceCategoryFilters : AdmTransAcceptanceCategoryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryFilters class.
		/// </summary>
		public AdmTransAcceptanceCategoryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTransAcceptanceCategoryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTransAcceptanceCategoryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTransAcceptanceCategoryFilters
	
	#region AdmTransAcceptanceCategoryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmTransAcceptanceCategoryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmTransAcceptanceCategory"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTransAcceptanceCategoryQuery : AdmTransAcceptanceCategoryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryQuery class.
		/// </summary>
		public AdmTransAcceptanceCategoryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTransAcceptanceCategoryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTransAcceptanceCategoryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTransAcceptanceCategoryQuery
		
	#region AdmTansikCodesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmTansikCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTansikCodesFilters : AdmTansikCodesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTansikCodesFilters class.
		/// </summary>
		public AdmTansikCodesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTansikCodesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTansikCodesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTansikCodesFilters
	
	#region AdmTansikCodesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmTansikCodesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmTansikCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTansikCodesQuery : AdmTansikCodesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTansikCodesQuery class.
		/// </summary>
		public AdmTansikCodesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTansikCodesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTansikCodesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTansikCodesQuery
		
	#region AdmCdeExamGrdngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeExamGrdng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeExamGrdngFilters : AdmCdeExamGrdngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngFilters class.
		/// </summary>
		public AdmCdeExamGrdngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeExamGrdngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeExamGrdngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeExamGrdngFilters
	
	#region AdmCdeExamGrdngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeExamGrdngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeExamGrdng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeExamGrdngQuery : AdmCdeExamGrdngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngQuery class.
		/// </summary>
		public AdmCdeExamGrdngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeExamGrdngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeExamGrdngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeExamGrdngQuery
		
	#region EntityMainFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntityMain"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntityMainFilters : EntityMainFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntityMainFilters class.
		/// </summary>
		public EntityMainFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntityMainFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntityMainFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntityMainFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntityMainFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntityMainFilters
	
	#region EntityMainQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntityMainParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntityMain"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntityMainQuery : EntityMainParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntityMainQuery class.
		/// </summary>
		public EntityMainQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntityMainQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntityMainQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntityMainQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntityMainQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntityMainQuery
		
	#region AdmApplicantFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmApplicant"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmApplicantFilters : AdmApplicantFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmApplicantFilters class.
		/// </summary>
		public AdmApplicantFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmApplicantFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmApplicantFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmApplicantFilters
	
	#region AdmApplicantQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmApplicantParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmApplicant"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmApplicantQuery : AdmApplicantParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmApplicantQuery class.
		/// </summary>
		public AdmApplicantQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmApplicantQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmApplicantQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmApplicantQuery
		
	#region AdmCdeStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeStatusFilters : AdmCdeStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusFilters class.
		/// </summary>
		public AdmCdeStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeStatusFilters
	
	#region AdmCdeStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeStatusQuery : AdmCdeStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusQuery class.
		/// </summary>
		public AdmCdeStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeStatusQuery
		
	#region AdmCdePlacementExamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdePlacementExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdePlacementExamFilters : AdmCdePlacementExamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamFilters class.
		/// </summary>
		public AdmCdePlacementExamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdePlacementExamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdePlacementExamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdePlacementExamFilters
	
	#region AdmCdePlacementExamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdePlacementExamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdePlacementExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdePlacementExamQuery : AdmCdePlacementExamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamQuery class.
		/// </summary>
		public AdmCdePlacementExamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdePlacementExamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdePlacementExamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdePlacementExamQuery
		
	#region AdmCdeFeeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeFee"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeFeeFilters : AdmCdeFeeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeFilters class.
		/// </summary>
		public AdmCdeFeeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeFeeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeFeeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeFeeFilters
	
	#region AdmCdeFeeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeFeeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeFee"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeFeeQuery : AdmCdeFeeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeQuery class.
		/// </summary>
		public AdmCdeFeeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeFeeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeFeeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeFeeQuery
		
	#region AdmTansikMajorsCodesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmTansikMajorsCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTansikMajorsCodesFilters : AdmTansikMajorsCodesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTansikMajorsCodesFilters class.
		/// </summary>
		public AdmTansikMajorsCodesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikMajorsCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTansikMajorsCodesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikMajorsCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTansikMajorsCodesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTansikMajorsCodesFilters
	
	#region AdmTansikMajorsCodesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmTansikMajorsCodesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmTansikMajorsCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTansikMajorsCodesQuery : AdmTansikMajorsCodesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTansikMajorsCodesQuery class.
		/// </summary>
		public AdmTansikMajorsCodesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikMajorsCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTansikMajorsCodesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikMajorsCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTansikMajorsCodesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTansikMajorsCodesQuery
		
	#region AdmAppCourseCompFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppCourseComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppCourseCompFilters : AdmAppCourseCompFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppCourseCompFilters class.
		/// </summary>
		public AdmAppCourseCompFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCourseCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppCourseCompFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCourseCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppCourseCompFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppCourseCompFilters
	
	#region AdmAppCourseCompQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppCourseCompParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppCourseComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppCourseCompQuery : AdmAppCourseCompParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppCourseCompQuery class.
		/// </summary>
		public AdmAppCourseCompQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCourseCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppCourseCompQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCourseCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppCourseCompQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppCourseCompQuery
		
	#region AdmCdeAppStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeAppStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeAppStatusFilters : AdmCdeAppStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusFilters class.
		/// </summary>
		public AdmCdeAppStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeAppStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeAppStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeAppStatusFilters
	
	#region AdmCdeAppStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeAppStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeAppStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeAppStatusQuery : AdmCdeAppStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusQuery class.
		/// </summary>
		public AdmCdeAppStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeAppStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeAppStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeAppStatusQuery
		
	#region AdmCdeAppTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeAppType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeAppTypeFilters : AdmCdeAppTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppTypeFilters class.
		/// </summary>
		public AdmCdeAppTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeAppTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeAppTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeAppTypeFilters
	
	#region AdmCdeAppTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeAppTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeAppType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeAppTypeQuery : AdmCdeAppTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppTypeQuery class.
		/// </summary>
		public AdmCdeAppTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeAppTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAppTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeAppTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeAppTypeQuery
		
	#region AdmCdeStatusRsnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeStatusRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeStatusRsnFilters : AdmCdeStatusRsnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusRsnFilters class.
		/// </summary>
		public AdmCdeStatusRsnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeStatusRsnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusRsnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeStatusRsnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeStatusRsnFilters
	
	#region AdmCdeStatusRsnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeStatusRsnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeStatusRsn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeStatusRsnQuery : AdmCdeStatusRsnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusRsnQuery class.
		/// </summary>
		public AdmCdeStatusRsnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeStatusRsnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeStatusRsnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeStatusRsnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeStatusRsnQuery
		
	#region AdmAppRegHistoryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppRegHistory"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppRegHistoryFilters : AdmAppRegHistoryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppRegHistoryFilters class.
		/// </summary>
		public AdmAppRegHistoryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppRegHistoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppRegHistoryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppRegHistoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppRegHistoryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppRegHistoryFilters
	
	#region AdmAppRegHistoryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppRegHistoryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppRegHistory"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppRegHistoryQuery : AdmAppRegHistoryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppRegHistoryQuery class.
		/// </summary>
		public AdmAppRegHistoryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppRegHistoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppRegHistoryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppRegHistoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppRegHistoryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppRegHistoryQuery
		
	#region AdmAcceptanceCategoryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAcceptanceCategory"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAcceptanceCategoryFilters : AdmAcceptanceCategoryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryFilters class.
		/// </summary>
		public AdmAcceptanceCategoryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAcceptanceCategoryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAcceptanceCategoryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAcceptanceCategoryFilters
	
	#region AdmAcceptanceCategoryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAcceptanceCategoryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAcceptanceCategory"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAcceptanceCategoryQuery : AdmAcceptanceCategoryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryQuery class.
		/// </summary>
		public AdmAcceptanceCategoryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAcceptanceCategoryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAcceptanceCategoryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAcceptanceCategoryQuery
		
	#region AdmAppCountFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppCount"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppCountFilters : AdmAppCountFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppCountFilters class.
		/// </summary>
		public AdmAppCountFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCountFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppCountFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCountFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppCountFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppCountFilters
	
	#region AdmAppCountQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppCountParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppCount"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppCountQuery : AdmAppCountParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppCountQuery class.
		/// </summary>
		public AdmAppCountQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCountQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppCountQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppCountQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppCountQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppCountQuery
		
	#region AccomWfCdeFunctionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomWfCdeFunction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomWfCdeFunctionFilters : AccomWfCdeFunctionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeFunctionFilters class.
		/// </summary>
		public AccomWfCdeFunctionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeFunctionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomWfCdeFunctionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeFunctionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomWfCdeFunctionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomWfCdeFunctionFilters
	
	#region AccomWfCdeFunctionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomWfCdeFunctionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomWfCdeFunction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomWfCdeFunctionQuery : AccomWfCdeFunctionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeFunctionQuery class.
		/// </summary>
		public AccomWfCdeFunctionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeFunctionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomWfCdeFunctionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeFunctionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomWfCdeFunctionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomWfCdeFunctionQuery
		
	#region AdmAppAlumniPrefFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppAlumniPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppAlumniPrefFilters : AdmAppAlumniPrefFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppAlumniPrefFilters class.
		/// </summary>
		public AdmAppAlumniPrefFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppAlumniPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppAlumniPrefFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppAlumniPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppAlumniPrefFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppAlumniPrefFilters
	
	#region AdmAppAlumniPrefQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppAlumniPrefParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppAlumniPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppAlumniPrefQuery : AdmAppAlumniPrefParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppAlumniPrefQuery class.
		/// </summary>
		public AdmAppAlumniPrefQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppAlumniPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppAlumniPrefQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppAlumniPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppAlumniPrefQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppAlumniPrefQuery
		
	#region AdmAppDisabilityFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppDisability"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppDisabilityFilters : AdmAppDisabilityFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppDisabilityFilters class.
		/// </summary>
		public AdmAppDisabilityFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDisabilityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppDisabilityFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDisabilityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppDisabilityFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppDisabilityFilters
	
	#region AdmAppDisabilityQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppDisabilityParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppDisability"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppDisabilityQuery : AdmAppDisabilityParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppDisabilityQuery class.
		/// </summary>
		public AdmAppDisabilityQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDisabilityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppDisabilityQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDisabilityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppDisabilityQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppDisabilityQuery
		
	#region AdmAppInfoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppInfoFilters : AdmAppInfoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppInfoFilters class.
		/// </summary>
		public AdmAppInfoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppInfoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppInfoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppInfoFilters
	
	#region AdmAppInfoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppInfoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppInfoQuery : AdmAppInfoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppInfoQuery class.
		/// </summary>
		public AdmAppInfoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppInfoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppInfoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppInfoQuery
		
	#region AdmAppInterviewExamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppInterviewExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppInterviewExamFilters : AdmAppInterviewExamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamFilters class.
		/// </summary>
		public AdmAppInterviewExamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppInterviewExamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppInterviewExamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppInterviewExamFilters
	
	#region AdmAppInterviewExamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppInterviewExamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppInterviewExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppInterviewExamQuery : AdmAppInterviewExamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamQuery class.
		/// </summary>
		public AdmAppInterviewExamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppInterviewExamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppInterviewExamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppInterviewExamQuery
		
	#region AdmAppLanguagesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppLanguages"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppLanguagesFilters : AdmAppLanguagesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesFilters class.
		/// </summary>
		public AdmAppLanguagesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppLanguagesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppLanguagesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppLanguagesFilters
	
	#region AdmAppLanguagesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppLanguagesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppLanguages"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppLanguagesQuery : AdmAppLanguagesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesQuery class.
		/// </summary>
		public AdmAppLanguagesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppLanguagesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppLanguagesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppLanguagesQuery
		
	#region AdmAppLanguagesDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppLanguagesDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppLanguagesDtlFilters : AdmAppLanguagesDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesDtlFilters class.
		/// </summary>
		public AdmAppLanguagesDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppLanguagesDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppLanguagesDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppLanguagesDtlFilters
	
	#region AdmAppLanguagesDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppLanguagesDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppLanguagesDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppLanguagesDtlQuery : AdmAppLanguagesDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesDtlQuery class.
		/// </summary>
		public AdmAppLanguagesDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppLanguagesDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLanguagesDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppLanguagesDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppLanguagesDtlQuery
		
	#region AdmAppHonorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppHonorFilters : AdmAppHonorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppHonorFilters class.
		/// </summary>
		public AdmAppHonorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppHonorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppHonorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppHonorFilters
	
	#region AdmAppHonorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppHonorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppHonorQuery : AdmAppHonorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppHonorQuery class.
		/// </summary>
		public AdmAppHonorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppHonorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppHonorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppHonorQuery
		
	#region AdmAppGuardianFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppGuardian"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppGuardianFilters : AdmAppGuardianFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppGuardianFilters class.
		/// </summary>
		public AdmAppGuardianFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppGuardianFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppGuardianFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppGuardianFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppGuardianFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppGuardianFilters
	
	#region AdmAppGuardianQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppGuardianParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppGuardian"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppGuardianQuery : AdmAppGuardianParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppGuardianQuery class.
		/// </summary>
		public AdmAppGuardianQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppGuardianQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppGuardianQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppGuardianQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppGuardianQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppGuardianQuery
		
	#region AdmAppFeesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppFees"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppFeesFilters : AdmAppFeesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppFeesFilters class.
		/// </summary>
		public AdmAppFeesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppFeesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppFeesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppFeesFilters
	
	#region AdmAppFeesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppFeesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppFees"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppFeesQuery : AdmAppFeesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppFeesQuery class.
		/// </summary>
		public AdmAppFeesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppFeesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppFeesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppFeesQuery
		
	#region AdmAppDocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppDocFilters : AdmAppDocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppDocFilters class.
		/// </summary>
		public AdmAppDocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppDocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppDocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppDocFilters
	
	#region AdmAppDocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppDocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppDocQuery : AdmAppDocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppDocQuery class.
		/// </summary>
		public AdmAppDocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppDocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppDocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppDocQuery
		
	#region AdmAppEssayFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppEssay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppEssayFilters : AdmAppEssayFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppEssayFilters class.
		/// </summary>
		public AdmAppEssayFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppEssayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppEssayFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppEssayFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppEssayFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppEssayFilters
	
	#region AdmAppEssayQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppEssayParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppEssay"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppEssayQuery : AdmAppEssayParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppEssayQuery class.
		/// </summary>
		public AdmAppEssayQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppEssayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppEssayQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppEssayQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppEssayQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppEssayQuery
		
	#region AdmAppExmptCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppExmptCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppExmptCourseFilters : AdmAppExmptCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppExmptCourseFilters class.
		/// </summary>
		public AdmAppExmptCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppExmptCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppExmptCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppExmptCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppExmptCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppExmptCourseFilters
	
	#region AdmAppExmptCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppExmptCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppExmptCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppExmptCourseQuery : AdmAppExmptCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppExmptCourseQuery class.
		/// </summary>
		public AdmAppExmptCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppExmptCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppExmptCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppExmptCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppExmptCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppExmptCourseQuery
		
	#region AdmAppFeePromocodeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppFeePromocode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppFeePromocodeFilters : AdmAppFeePromocodeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppFeePromocodeFilters class.
		/// </summary>
		public AdmAppFeePromocodeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeePromocodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppFeePromocodeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeePromocodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppFeePromocodeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppFeePromocodeFilters
	
	#region AdmAppFeePromocodeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppFeePromocodeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppFeePromocode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppFeePromocodeQuery : AdmAppFeePromocodeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppFeePromocodeQuery class.
		/// </summary>
		public AdmAppFeePromocodeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeePromocodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppFeePromocodeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppFeePromocodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppFeePromocodeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppFeePromocodeQuery
		
	#region AccomWfCdeActionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomWfCdeAction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomWfCdeActionFilters : AccomWfCdeActionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeActionFilters class.
		/// </summary>
		public AccomWfCdeActionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeActionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomWfCdeActionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeActionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomWfCdeActionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomWfCdeActionFilters
	
	#region AccomWfCdeActionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomWfCdeActionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomWfCdeAction"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomWfCdeActionQuery : AccomWfCdeActionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeActionQuery class.
		/// </summary>
		public AccomWfCdeActionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeActionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomWfCdeActionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomWfCdeActionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomWfCdeActionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomWfCdeActionQuery
		
	#region AccomPolcyAbsenceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomPolcyAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomPolcyAbsenceFilters : AccomPolcyAbsenceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomPolcyAbsenceFilters class.
		/// </summary>
		public AccomPolcyAbsenceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomPolcyAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomPolcyAbsenceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomPolcyAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomPolcyAbsenceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomPolcyAbsenceFilters
	
	#region AccomPolcyAbsenceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomPolcyAbsenceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomPolcyAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomPolcyAbsenceQuery : AccomPolcyAbsenceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomPolcyAbsenceQuery class.
		/// </summary>
		public AccomPolcyAbsenceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomPolcyAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomPolcyAbsenceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomPolcyAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomPolcyAbsenceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomPolcyAbsenceQuery
		
	#region AccomStudResponsibleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudResponsible"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudResponsibleFilters : AccomStudResponsibleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudResponsibleFilters class.
		/// </summary>
		public AccomStudResponsibleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudResponsibleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudResponsibleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudResponsibleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudResponsibleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudResponsibleFilters
	
	#region AccomStudResponsibleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudResponsibleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudResponsible"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudResponsibleQuery : AccomStudResponsibleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudResponsibleQuery class.
		/// </summary>
		public AccomStudResponsibleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudResponsibleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudResponsibleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudResponsibleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudResponsibleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudResponsibleQuery
		
	#region EntCodeEntityTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodeEntityType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeEntityTypeFilters : EntCodeEntityTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeFilters class.
		/// </summary>
		public EntCodeEntityTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeEntityTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeEntityTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeEntityTypeFilters
	
	#region EntCodeEntityTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodeEntityTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodeEntityType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeEntityTypeQuery : EntCodeEntityTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeQuery class.
		/// </summary>
		public EntCodeEntityTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeEntityTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeEntityTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeEntityTypeQuery
		
	#region AccomFloorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomFloor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomFloorFilters : AccomFloorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomFloorFilters class.
		/// </summary>
		public AccomFloorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomFloorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomFloorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomFloorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomFloorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomFloorFilters
	
	#region AccomFloorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomFloorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomFloor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomFloorQuery : AccomFloorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomFloorQuery class.
		/// </summary>
		public AccomFloorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomFloorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomFloorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomFloorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomFloorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomFloorQuery
		
	#region AccomStudAbsenceWarnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudAbsenceWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudAbsenceWarnFilters : AccomStudAbsenceWarnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceWarnFilters class.
		/// </summary>
		public AccomStudAbsenceWarnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudAbsenceWarnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudAbsenceWarnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudAbsenceWarnFilters
	
	#region AccomStudAbsenceWarnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudAbsenceWarnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudAbsenceWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudAbsenceWarnQuery : AccomStudAbsenceWarnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceWarnQuery class.
		/// </summary>
		public AccomStudAbsenceWarnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudAbsenceWarnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudAbsenceWarnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudAbsenceWarnQuery
		
	#region AccomRoomFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomRoom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomRoomFilters : AccomRoomFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomRoomFilters class.
		/// </summary>
		public AccomRoomFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomRoomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomRoomFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomRoomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomRoomFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomRoomFilters
	
	#region AccomRoomQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomRoomParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomRoom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomRoomQuery : AccomRoomParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomRoomQuery class.
		/// </summary>
		public AccomRoomQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomRoomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomRoomQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomRoomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomRoomQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomRoomQuery
		
	#region AccomStudAbsenceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudAbsenceFilters : AccomStudAbsenceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceFilters class.
		/// </summary>
		public AccomStudAbsenceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudAbsenceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudAbsenceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudAbsenceFilters
	
	#region AccomStudAbsenceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudAbsenceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudAbsenceQuery : AccomStudAbsenceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceQuery class.
		/// </summary>
		public AccomStudAbsenceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudAbsenceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudAbsenceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudAbsenceQuery
		
	#region AccomCdeWarnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomCdeWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdeWarnFilters : AccomCdeWarnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdeWarnFilters class.
		/// </summary>
		public AccomCdeWarnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdeWarnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdeWarnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdeWarnFilters
	
	#region AccomCdeWarnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomCdeWarnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomCdeWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdeWarnQuery : AccomCdeWarnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdeWarnQuery class.
		/// </summary>
		public AccomCdeWarnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdeWarnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdeWarnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdeWarnQuery
		
	#region AccomBuildingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomBuilding"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomBuildingFilters : AccomBuildingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomBuildingFilters class.
		/// </summary>
		public AccomBuildingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomBuildingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomBuildingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomBuildingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomBuildingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomBuildingFilters
	
	#region AccomBuildingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomBuildingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomBuilding"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomBuildingQuery : AccomBuildingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomBuildingQuery class.
		/// </summary>
		public AccomBuildingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomBuildingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomBuildingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomBuildingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomBuildingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomBuildingQuery
		
	#region AdmRegStepsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmRegSteps"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRegStepsFilters : AdmRegStepsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRegStepsFilters class.
		/// </summary>
		public AdmRegStepsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRegStepsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRegStepsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRegStepsFilters
	
	#region AdmRegStepsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmRegStepsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmRegSteps"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRegStepsQuery : AdmRegStepsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRegStepsQuery class.
		/// </summary>
		public AdmRegStepsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRegStepsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRegStepsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRegStepsQuery
		
	#region AccomCdeBookStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomCdeBookStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdeBookStatusFilters : AccomCdeBookStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdeBookStatusFilters class.
		/// </summary>
		public AccomCdeBookStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeBookStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdeBookStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeBookStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdeBookStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdeBookStatusFilters
	
	#region AccomCdeBookStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomCdeBookStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomCdeBookStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdeBookStatusQuery : AccomCdeBookStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdeBookStatusQuery class.
		/// </summary>
		public AccomCdeBookStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeBookStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdeBookStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeBookStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdeBookStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdeBookStatusQuery
		
	#region AccomBedFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomBed"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomBedFilters : AccomBedFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomBedFilters class.
		/// </summary>
		public AccomBedFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomBedFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomBedFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomBedFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomBedFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomBedFilters
	
	#region AccomBedQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomBedParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomBed"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomBedQuery : AccomBedParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomBedQuery class.
		/// </summary>
		public AccomBedQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomBedQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomBedQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomBedQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomBedQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomBedQuery
		
	#region AccomCdeRoomTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomCdeRoomType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdeRoomTypeFilters : AccomCdeRoomTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdeRoomTypeFilters class.
		/// </summary>
		public AccomCdeRoomTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeRoomTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdeRoomTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeRoomTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdeRoomTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdeRoomTypeFilters
	
	#region AccomCdeRoomTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomCdeRoomTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomCdeRoomType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdeRoomTypeQuery : AccomCdeRoomTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdeRoomTypeQuery class.
		/// </summary>
		public AccomCdeRoomTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeRoomTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdeRoomTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdeRoomTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdeRoomTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdeRoomTypeQuery
		
	#region AccomCdePermtTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomCdePermtType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdePermtTypeFilters : AccomCdePermtTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdePermtTypeFilters class.
		/// </summary>
		public AccomCdePermtTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePermtTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdePermtTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePermtTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdePermtTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdePermtTypeFilters
	
	#region AccomCdePermtTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomCdePermtTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomCdePermtType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdePermtTypeQuery : AccomCdePermtTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdePermtTypeQuery class.
		/// </summary>
		public AccomCdePermtTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePermtTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdePermtTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePermtTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdePermtTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdePermtTypeQuery
		
	#region AccomStudBookFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudBook"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudBookFilters : AccomStudBookFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudBookFilters class.
		/// </summary>
		public AccomStudBookFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudBookFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudBookFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudBookFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudBookFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudBookFilters
	
	#region AccomStudBookQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudBookParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudBook"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudBookQuery : AccomStudBookParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudBookQuery class.
		/// </summary>
		public AccomStudBookQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudBookQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudBookQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudBookQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudBookQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudBookQuery
		
	#region AccomCdePrecondFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomCdePrecond"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdePrecondFilters : AccomCdePrecondFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondFilters class.
		/// </summary>
		public AccomCdePrecondFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdePrecondFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdePrecondFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdePrecondFilters
	
	#region AccomCdePrecondQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomCdePrecondParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomCdePrecond"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomCdePrecondQuery : AccomCdePrecondParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondQuery class.
		/// </summary>
		public AccomCdePrecondQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomCdePrecondQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomCdePrecondQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomCdePrecondQuery
		
	#region AccomStudDismissFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudDismiss"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudDismissFilters : AccomStudDismissFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudDismissFilters class.
		/// </summary>
		public AccomStudDismissFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudDismissFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudDismissFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudDismissFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudDismissFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudDismissFilters
	
	#region AccomStudDismissQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudDismissParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudDismiss"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudDismissQuery : AccomStudDismissParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudDismissQuery class.
		/// </summary>
		public AccomStudDismissQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudDismissQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudDismissQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudDismissQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudDismissQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudDismissQuery
		
	#region AccomStudPermtReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudPermtReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudPermtReqFilters : AccomStudPermtReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudPermtReqFilters class.
		/// </summary>
		public AccomStudPermtReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudPermtReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudPermtReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudPermtReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudPermtReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudPermtReqFilters
	
	#region AccomStudPermtReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudPermtReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudPermtReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudPermtReqQuery : AccomStudPermtReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudPermtReqQuery class.
		/// </summary>
		public AccomStudPermtReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudPermtReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudPermtReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudPermtReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudPermtReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudPermtReqQuery
		
	#region AdmExamGrdngPkgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmExamGrdngPkg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmExamGrdngPkgFilters : AdmExamGrdngPkgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgFilters class.
		/// </summary>
		public AdmExamGrdngPkgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmExamGrdngPkgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmExamGrdngPkgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmExamGrdngPkgFilters
	
	#region AdmExamGrdngPkgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmExamGrdngPkgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmExamGrdngPkg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmExamGrdngPkgQuery : AdmExamGrdngPkgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgQuery class.
		/// </summary>
		public AdmExamGrdngPkgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmExamGrdngPkgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmExamGrdngPkgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmExamGrdngPkgQuery
		
	#region AccomStudReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudReqFilters : AccomStudReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudReqFilters class.
		/// </summary>
		public AccomStudReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudReqFilters
	
	#region AccomStudReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudReqQuery : AccomStudReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudReqQuery class.
		/// </summary>
		public AccomStudReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudReqQuery
		
	#region AccomWfRequestApproveFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomWfRequestApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomWfRequestApproveFilters : AccomWfRequestApproveFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomWfRequestApproveFilters class.
		/// </summary>
		public AccomWfRequestApproveFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomWfRequestApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomWfRequestApproveFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomWfRequestApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomWfRequestApproveFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomWfRequestApproveFilters
	
	#region AccomWfRequestApproveQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomWfRequestApproveParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomWfRequestApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomWfRequestApproveQuery : AccomWfRequestApproveParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomWfRequestApproveQuery class.
		/// </summary>
		public AccomWfRequestApproveQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomWfRequestApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomWfRequestApproveQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomWfRequestApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomWfRequestApproveQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomWfRequestApproveQuery
		
	#region AdmDecisionStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmDecisionStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmDecisionStatusFilters : AdmDecisionStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmDecisionStatusFilters class.
		/// </summary>
		public AdmDecisionStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmDecisionStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmDecisionStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmDecisionStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmDecisionStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmDecisionStatusFilters
	
	#region AdmDecisionStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmDecisionStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmDecisionStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmDecisionStatusQuery : AdmDecisionStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmDecisionStatusQuery class.
		/// </summary>
		public AdmDecisionStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmDecisionStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmDecisionStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmDecisionStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmDecisionStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmDecisionStatusQuery
		
	#region AccomStudLeaveReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudLeaveReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudLeaveReqFilters : AccomStudLeaveReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudLeaveReqFilters class.
		/// </summary>
		public AccomStudLeaveReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLeaveReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudLeaveReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLeaveReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudLeaveReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudLeaveReqFilters
	
	#region AccomStudLeaveReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudLeaveReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudLeaveReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudLeaveReqQuery : AccomStudLeaveReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudLeaveReqQuery class.
		/// </summary>
		public AccomStudLeaveReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLeaveReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudLeaveReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLeaveReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudLeaveReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudLeaveReqQuery
		
	#region AccomStudFeedReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudFeedReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudFeedReqFilters : AccomStudFeedReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqFilters class.
		/// </summary>
		public AccomStudFeedReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudFeedReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudFeedReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudFeedReqFilters
	
	#region AccomStudFeedReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudFeedReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudFeedReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudFeedReqQuery : AccomStudFeedReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqQuery class.
		/// </summary>
		public AccomStudFeedReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudFeedReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudFeedReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudFeedReqQuery
		
	#region AdmOpenAcadSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmOpenAcadSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmOpenAcadSemesterFilters : AdmOpenAcadSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterFilters class.
		/// </summary>
		public AdmOpenAcadSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmOpenAcadSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmOpenAcadSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmOpenAcadSemesterFilters
	
	#region AdmOpenAcadSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmOpenAcadSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmOpenAcadSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmOpenAcadSemesterQuery : AdmOpenAcadSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterQuery class.
		/// </summary>
		public AdmOpenAcadSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmOpenAcadSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmOpenAcadSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmOpenAcadSemesterQuery
		
	#region AccomStudFeedReqDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudFeedReqDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudFeedReqDtlFilters : AccomStudFeedReqDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqDtlFilters class.
		/// </summary>
		public AccomStudFeedReqDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudFeedReqDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudFeedReqDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudFeedReqDtlFilters
	
	#region AccomStudFeedReqDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudFeedReqDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudFeedReqDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudFeedReqDtlQuery : AccomStudFeedReqDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqDtlQuery class.
		/// </summary>
		public AccomStudFeedReqDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudFeedReqDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudFeedReqDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudFeedReqDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudFeedReqDtlQuery
		
	#region AccomStudLateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudLate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudLateFilters : AccomStudLateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudLateFilters class.
		/// </summary>
		public AccomStudLateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudLateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudLateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudLateFilters
	
	#region AccomStudLateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudLateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudLate"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudLateQuery : AccomStudLateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudLateQuery class.
		/// </summary>
		public AccomStudLateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudLateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudLateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudLateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudLateQuery
		
	#region AdmAppLtrRecomFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppLtrRecom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppLtrRecomFilters : AdmAppLtrRecomFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppLtrRecomFilters class.
		/// </summary>
		public AdmAppLtrRecomFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLtrRecomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppLtrRecomFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLtrRecomFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppLtrRecomFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppLtrRecomFilters
	
	#region AdmAppLtrRecomQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppLtrRecomParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppLtrRecom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppLtrRecomQuery : AdmAppLtrRecomParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppLtrRecomQuery class.
		/// </summary>
		public AdmAppLtrRecomQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLtrRecomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppLtrRecomQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppLtrRecomQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppLtrRecomQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppLtrRecomQuery
		
	#region AccomStudGuestReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudGuestReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudGuestReqFilters : AccomStudGuestReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqFilters class.
		/// </summary>
		public AccomStudGuestReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudGuestReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudGuestReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudGuestReqFilters
	
	#region AccomStudGuestReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudGuestReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudGuestReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudGuestReqQuery : AccomStudGuestReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqQuery class.
		/// </summary>
		public AccomStudGuestReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudGuestReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudGuestReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudGuestReqQuery
		
	#region AccomStudGuestReqDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AccomStudGuestReqDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudGuestReqDtlFilters : AccomStudGuestReqDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlFilters class.
		/// </summary>
		public AccomStudGuestReqDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudGuestReqDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudGuestReqDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudGuestReqDtlFilters
	
	#region AccomStudGuestReqDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AccomStudGuestReqDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AccomStudGuestReqDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AccomStudGuestReqDtlQuery : AccomStudGuestReqDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlQuery class.
		/// </summary>
		public AccomStudGuestReqDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AccomStudGuestReqDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AccomStudGuestReqDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AccomStudGuestReqDtlQuery
		
	#region AdmAppMediaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppMedia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppMediaFilters : AdmAppMediaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppMediaFilters class.
		/// </summary>
		public AdmAppMediaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMediaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppMediaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMediaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppMediaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppMediaFilters
	
	#region AdmAppMediaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppMediaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppMedia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppMediaQuery : AdmAppMediaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppMediaQuery class.
		/// </summary>
		public AdmAppMediaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMediaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppMediaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMediaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppMediaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppMediaQuery
		
	#region AdmParamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmParamFilters : AdmParamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmParamFilters class.
		/// </summary>
		public AdmParamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmParamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmParamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmParamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmParamFilters
	
	#region AdmParamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmParamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmParam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmParamQuery : AdmParamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmParamQuery class.
		/// </summary>
		public AdmParamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmParamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmParamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmParamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmParamQuery
		
	#region AdmAppMessageFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppMessage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppMessageFilters : AdmAppMessageFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppMessageFilters class.
		/// </summary>
		public AdmAppMessageFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMessageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppMessageFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMessageFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppMessageFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppMessageFilters
	
	#region AdmAppMessageQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppMessageParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppMessage"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppMessageQuery : AdmAppMessageParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppMessageQuery class.
		/// </summary>
		public AdmAppMessageQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMessageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppMessageQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppMessageQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppMessageQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppMessageQuery
		
	#region AdmParamMajorPhaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmParamMajorPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmParamMajorPhaseFilters : AdmParamMajorPhaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmParamMajorPhaseFilters class.
		/// </summary>
		public AdmParamMajorPhaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmParamMajorPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmParamMajorPhaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmParamMajorPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmParamMajorPhaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmParamMajorPhaseFilters
	
	#region AdmParamMajorPhaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmParamMajorPhaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmParamMajorPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmParamMajorPhaseQuery : AdmParamMajorPhaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmParamMajorPhaseQuery class.
		/// </summary>
		public AdmParamMajorPhaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmParamMajorPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmParamMajorPhaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmParamMajorPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmParamMajorPhaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmParamMajorPhaseQuery
		
	#region AdmOutboxFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmOutbox"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmOutboxFilters : AdmOutboxFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmOutboxFilters class.
		/// </summary>
		public AdmOutboxFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmOutboxFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmOutboxFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmOutboxFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmOutboxFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmOutboxFilters
	
	#region AdmOutboxQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmOutboxParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmOutbox"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmOutboxQuery : AdmOutboxParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmOutboxQuery class.
		/// </summary>
		public AdmOutboxQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmOutboxQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmOutboxQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmOutboxQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmOutboxQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmOutboxQuery
		
	#region AdmPlaceExamCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmPlaceExamCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPlaceExamCourseFilters : AdmPlaceExamCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamCourseFilters class.
		/// </summary>
		public AdmPlaceExamCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPlaceExamCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPlaceExamCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPlaceExamCourseFilters
	
	#region AdmPlaceExamCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmPlaceExamCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmPlaceExamCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPlaceExamCourseQuery : AdmPlaceExamCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamCourseQuery class.
		/// </summary>
		public AdmPlaceExamCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPlaceExamCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPlaceExamCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPlaceExamCourseQuery
		
	#region AdmIntTransferAcceptanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmIntTransferAcceptance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmIntTransferAcceptanceFilters : AdmIntTransferAcceptanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmIntTransferAcceptanceFilters class.
		/// </summary>
		public AdmIntTransferAcceptanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmIntTransferAcceptanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmIntTransferAcceptanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmIntTransferAcceptanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmIntTransferAcceptanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmIntTransferAcceptanceFilters
	
	#region AdmIntTransferAcceptanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmIntTransferAcceptanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmIntTransferAcceptance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmIntTransferAcceptanceQuery : AdmIntTransferAcceptanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmIntTransferAcceptanceQuery class.
		/// </summary>
		public AdmIntTransferAcceptanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmIntTransferAcceptanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmIntTransferAcceptanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmIntTransferAcceptanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmIntTransferAcceptanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmIntTransferAcceptanceQuery
		
	#region AdmFeePromocodeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmFeePromocode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmFeePromocodeFilters : AdmFeePromocodeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmFeePromocodeFilters class.
		/// </summary>
		public AdmFeePromocodeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmFeePromocodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmFeePromocodeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmFeePromocodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmFeePromocodeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmFeePromocodeFilters
	
	#region AdmFeePromocodeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmFeePromocodeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmFeePromocode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmFeePromocodeQuery : AdmFeePromocodeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmFeePromocodeQuery class.
		/// </summary>
		public AdmFeePromocodeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmFeePromocodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmFeePromocodeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmFeePromocodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmFeePromocodeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmFeePromocodeQuery
		
	#region AdmCodeEngTestFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCodeEngTest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCodeEngTestFilters : AdmCodeEngTestFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestFilters class.
		/// </summary>
		public AdmCodeEngTestFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCodeEngTestFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCodeEngTestFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCodeEngTestFilters
	
	#region AdmCodeEngTestQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCodeEngTestParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCodeEngTest"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCodeEngTestQuery : AdmCodeEngTestParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestQuery class.
		/// </summary>
		public AdmCodeEngTestQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCodeEngTestQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCodeEngTestQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCodeEngTestQuery
		
	#region AdmFeeQualCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmFeeQualCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmFeeQualCatFilters : AdmFeeQualCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmFeeQualCatFilters class.
		/// </summary>
		public AdmFeeQualCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmFeeQualCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmFeeQualCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmFeeQualCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmFeeQualCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmFeeQualCatFilters
	
	#region AdmFeeQualCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmFeeQualCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmFeeQualCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmFeeQualCatQuery : AdmFeeQualCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmFeeQualCatQuery class.
		/// </summary>
		public AdmFeeQualCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmFeeQualCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmFeeQualCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmFeeQualCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmFeeQualCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmFeeQualCatQuery
		
	#region AdmPlaceExamDatetimeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmPlaceExamDatetime"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPlaceExamDatetimeFilters : AdmPlaceExamDatetimeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeFilters class.
		/// </summary>
		public AdmPlaceExamDatetimeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPlaceExamDatetimeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPlaceExamDatetimeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPlaceExamDatetimeFilters
	
	#region AdmPlaceExamDatetimeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmPlaceExamDatetimeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmPlaceExamDatetime"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPlaceExamDatetimeQuery : AdmPlaceExamDatetimeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeQuery class.
		/// </summary>
		public AdmPlaceExamDatetimeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPlaceExamDatetimeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPlaceExamDatetimeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPlaceExamDatetimeQuery
		
	#region AdmInboxFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmInbox"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmInboxFilters : AdmInboxFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmInboxFilters class.
		/// </summary>
		public AdmInboxFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmInboxFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmInboxFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmInboxFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmInboxFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmInboxFilters
	
	#region AdmInboxQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmInboxParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmInbox"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmInboxQuery : AdmInboxParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmInboxQuery class.
		/// </summary>
		public AdmInboxQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmInboxQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmInboxQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmInboxQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmInboxQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmInboxQuery
		
	#region AdmPlaceExamLocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmPlaceExamLoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPlaceExamLocFilters : AdmPlaceExamLocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamLocFilters class.
		/// </summary>
		public AdmPlaceExamLocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamLocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPlaceExamLocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamLocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPlaceExamLocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPlaceExamLocFilters
	
	#region AdmPlaceExamLocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmPlaceExamLocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmPlaceExamLoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPlaceExamLocQuery : AdmPlaceExamLocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamLocQuery class.
		/// </summary>
		public AdmPlaceExamLocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamLocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPlaceExamLocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamLocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPlaceExamLocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPlaceExamLocQuery
		
	#region AdmSkillTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmSkillType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmSkillTypeFilters : AdmSkillTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmSkillTypeFilters class.
		/// </summary>
		public AdmSkillTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmSkillTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmSkillTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmSkillTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmSkillTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmSkillTypeFilters
	
	#region AdmSkillTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmSkillTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmSkillType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmSkillTypeQuery : AdmSkillTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmSkillTypeQuery class.
		/// </summary>
		public AdmSkillTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmSkillTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmSkillTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmSkillTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmSkillTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmSkillTypeQuery
		
	#region AdmPrecondQualFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmPrecondQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPrecondQualFilters : AdmPrecondQualFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualFilters class.
		/// </summary>
		public AdmPrecondQualFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPrecondQualFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPrecondQualFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPrecondQualFilters
	
	#region AdmPrecondQualQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmPrecondQualParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmPrecondQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmPrecondQualQuery : AdmPrecondQualParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualQuery class.
		/// </summary>
		public AdmPrecondQualQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmPrecondQualQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmPrecondQualQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmPrecondQualQuery
		
	#region AdmStaticScholarshipFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmStaticScholarship"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmStaticScholarshipFilters : AdmStaticScholarshipFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmStaticScholarshipFilters class.
		/// </summary>
		public AdmStaticScholarshipFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmStaticScholarshipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmStaticScholarshipFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmStaticScholarshipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmStaticScholarshipFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmStaticScholarshipFilters
	
	#region AdmStaticScholarshipQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmStaticScholarshipParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmStaticScholarship"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmStaticScholarshipQuery : AdmStaticScholarshipParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmStaticScholarshipQuery class.
		/// </summary>
		public AdmStaticScholarshipQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmStaticScholarshipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmStaticScholarshipQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmStaticScholarshipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmStaticScholarshipQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmStaticScholarshipQuery
		
	#region AdmScholorshipFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmScholorship"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmScholorshipFilters : AdmScholorshipFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmScholorshipFilters class.
		/// </summary>
		public AdmScholorshipFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmScholorshipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmScholorshipFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmScholorshipFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmScholorshipFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmScholorshipFilters
	
	#region AdmScholorshipQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmScholorshipParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmScholorship"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmScholorshipQuery : AdmScholorshipParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmScholorshipQuery class.
		/// </summary>
		public AdmScholorshipQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmScholorshipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmScholorshipQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmScholorshipQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmScholorshipQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmScholorshipQuery
		
	#region AdmTansikAppCodesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmTansikAppCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTansikAppCodesFilters : AdmTansikAppCodesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTansikAppCodesFilters class.
		/// </summary>
		public AdmTansikAppCodesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikAppCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTansikAppCodesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikAppCodesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTansikAppCodesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTansikAppCodesFilters
	
	#region AdmTansikAppCodesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmTansikAppCodesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmTansikAppCodes"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmTansikAppCodesQuery : AdmTansikAppCodesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmTansikAppCodesQuery class.
		/// </summary>
		public AdmTansikAppCodesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikAppCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmTansikAppCodesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmTansikAppCodesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmTansikAppCodesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmTansikAppCodesQuery
		
	#region AdmRsrvdCodeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmRsrvdCode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRsrvdCodeFilters : AdmRsrvdCodeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRsrvdCodeFilters class.
		/// </summary>
		public AdmRsrvdCodeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRsrvdCodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRsrvdCodeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRsrvdCodeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRsrvdCodeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRsrvdCodeFilters
	
	#region AdmRsrvdCodeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmRsrvdCodeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmRsrvdCode"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRsrvdCodeQuery : AdmRsrvdCodeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRsrvdCodeQuery class.
		/// </summary>
		public AdmRsrvdCodeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRsrvdCodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRsrvdCodeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRsrvdCodeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRsrvdCodeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRsrvdCodeQuery
		
	#region AdmRatingParametersMajorsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmRatingParametersMajors"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRatingParametersMajorsFilters : AdmRatingParametersMajorsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsFilters class.
		/// </summary>
		public AdmRatingParametersMajorsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRatingParametersMajorsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRatingParametersMajorsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRatingParametersMajorsFilters
	
	#region AdmRatingParametersMajorsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmRatingParametersMajorsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmRatingParametersMajors"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRatingParametersMajorsQuery : AdmRatingParametersMajorsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsQuery class.
		/// </summary>
		public AdmRatingParametersMajorsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRatingParametersMajorsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRatingParametersMajorsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRatingParametersMajorsQuery
		
	#region AdmReqDocFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmReqDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmReqDocFilters : AdmReqDocFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmReqDocFilters class.
		/// </summary>
		public AdmReqDocFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmReqDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmReqDocFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmReqDocFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmReqDocFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmReqDocFilters
	
	#region AdmReqDocQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmReqDocParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmReqDoc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmReqDocQuery : AdmReqDocParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmReqDocQuery class.
		/// </summary>
		public AdmReqDocQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmReqDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmReqDocQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmReqDocQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmReqDocQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmReqDocQuery
		
	#region AdmRegStepPayOnlineFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmRegStepPayOnline"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRegStepPayOnlineFilters : AdmRegStepPayOnlineFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRegStepPayOnlineFilters class.
		/// </summary>
		public AdmRegStepPayOnlineFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepPayOnlineFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRegStepPayOnlineFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepPayOnlineFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRegStepPayOnlineFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRegStepPayOnlineFilters
	
	#region AdmRegStepPayOnlineQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmRegStepPayOnlineParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmRegStepPayOnline"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRegStepPayOnlineQuery : AdmRegStepPayOnlineParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRegStepPayOnlineQuery class.
		/// </summary>
		public AdmRegStepPayOnlineQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepPayOnlineQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRegStepPayOnlineQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRegStepPayOnlineQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRegStepPayOnlineQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRegStepPayOnlineQuery
		
	#region AdmRatingParamMajorTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmRatingParamMajorType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRatingParamMajorTypeFilters : AdmRatingParamMajorTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRatingParamMajorTypeFilters class.
		/// </summary>
		public AdmRatingParamMajorTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParamMajorTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRatingParamMajorTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParamMajorTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRatingParamMajorTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRatingParamMajorTypeFilters
	
	#region AdmRatingParamMajorTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmRatingParamMajorTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmRatingParamMajorType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmRatingParamMajorTypeQuery : AdmRatingParamMajorTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmRatingParamMajorTypeQuery class.
		/// </summary>
		public AdmRatingParamMajorTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParamMajorTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmRatingParamMajorTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmRatingParamMajorTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmRatingParamMajorTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmRatingParamMajorTypeQuery
		
	#region AdmExamGrdngPkgDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmExamGrdngPkgDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmExamGrdngPkgDtlFilters : AdmExamGrdngPkgDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgDtlFilters class.
		/// </summary>
		public AdmExamGrdngPkgDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmExamGrdngPkgDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmExamGrdngPkgDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmExamGrdngPkgDtlFilters
	
	#region AdmExamGrdngPkgDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmExamGrdngPkgDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmExamGrdngPkgDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmExamGrdngPkgDtlQuery : AdmExamGrdngPkgDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgDtlQuery class.
		/// </summary>
		public AdmExamGrdngPkgDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmExamGrdngPkgDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmExamGrdngPkgDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmExamGrdngPkgDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmExamGrdngPkgDtlQuery
		
	#region AdmAppTransReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppTransReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransReqFilters : AdmAppTransReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqFilters class.
		/// </summary>
		public AdmAppTransReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransReqFilters
	
	#region AdmAppTransReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppTransReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppTransReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransReqQuery : AdmAppTransReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqQuery class.
		/// </summary>
		public AdmAppTransReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransReqQuery
		
	#region AdmEnglishProficiencyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmEnglishProficiency"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmEnglishProficiencyFilters : AdmEnglishProficiencyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmEnglishProficiencyFilters class.
		/// </summary>
		public AdmEnglishProficiencyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmEnglishProficiencyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmEnglishProficiencyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmEnglishProficiencyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmEnglishProficiencyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmEnglishProficiencyFilters
	
	#region AdmEnglishProficiencyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmEnglishProficiencyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmEnglishProficiency"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmEnglishProficiencyQuery : AdmEnglishProficiencyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmEnglishProficiencyQuery class.
		/// </summary>
		public AdmEnglishProficiencyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmEnglishProficiencyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmEnglishProficiencyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmEnglishProficiencyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmEnglishProficiencyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmEnglishProficiencyQuery
		
	#region AdmAppTransFromCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppTransFromCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransFromCourseFilters : AdmAppTransFromCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransFromCourseFilters class.
		/// </summary>
		public AdmAppTransFromCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransFromCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransFromCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransFromCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransFromCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransFromCourseFilters
	
	#region AdmAppTransFromCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppTransFromCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppTransFromCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransFromCourseQuery : AdmAppTransFromCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransFromCourseQuery class.
		/// </summary>
		public AdmAppTransFromCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransFromCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransFromCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransFromCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransFromCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransFromCourseQuery
		
	#region AdmAppTopicFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTopicFilters : AdmAppTopicFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTopicFilters class.
		/// </summary>
		public AdmAppTopicFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTopicFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTopicFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTopicFilters
	
	#region AdmAppTopicQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppTopicParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTopicQuery : AdmAppTopicParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTopicQuery class.
		/// </summary>
		public AdmAppTopicQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTopicQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTopicQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTopicQuery
		
	#region AdmAppTransBalanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppTransBalance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransBalanceFilters : AdmAppTransBalanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransBalanceFilters class.
		/// </summary>
		public AdmAppTransBalanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransBalanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransBalanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransBalanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransBalanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransBalanceFilters
	
	#region AdmAppTransBalanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppTransBalanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppTransBalance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransBalanceQuery : AdmAppTransBalanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransBalanceQuery class.
		/// </summary>
		public AdmAppTransBalanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransBalanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransBalanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransBalanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransBalanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransBalanceQuery
		
	#region AdmAppSponsorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppSponsor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppSponsorFilters : AdmAppSponsorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppSponsorFilters class.
		/// </summary>
		public AdmAppSponsorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppSponsorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppSponsorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppSponsorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppSponsorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppSponsorFilters
	
	#region AdmAppSponsorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppSponsorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppSponsor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppSponsorQuery : AdmAppSponsorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppSponsorQuery class.
		/// </summary>
		public AdmAppSponsorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppSponsorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppSponsorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppSponsorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppSponsorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppSponsorQuery
		
	#region AdmAppPlaceExamCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppPlaceExamCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppPlaceExamCourseFilters : AdmAppPlaceExamCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppPlaceExamCourseFilters class.
		/// </summary>
		public AdmAppPlaceExamCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlaceExamCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppPlaceExamCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlaceExamCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppPlaceExamCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppPlaceExamCourseFilters
	
	#region AdmAppPlaceExamCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppPlaceExamCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppPlaceExamCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppPlaceExamCourseQuery : AdmAppPlaceExamCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppPlaceExamCourseQuery class.
		/// </summary>
		public AdmAppPlaceExamCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlaceExamCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppPlaceExamCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlaceExamCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppPlaceExamCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppPlaceExamCourseQuery
		
	#region AdmAppProcStepsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppProcSteps"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppProcStepsFilters : AdmAppProcStepsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppProcStepsFilters class.
		/// </summary>
		public AdmAppProcStepsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppProcStepsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppProcStepsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppProcStepsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppProcStepsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppProcStepsFilters
	
	#region AdmAppProcStepsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppProcStepsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppProcSteps"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppProcStepsQuery : AdmAppProcStepsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppProcStepsQuery class.
		/// </summary>
		public AdmAppProcStepsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppProcStepsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppProcStepsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppProcStepsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppProcStepsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppProcStepsQuery
		
	#region AdmAppPlacementExamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppPlacementExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppPlacementExamFilters : AdmAppPlacementExamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamFilters class.
		/// </summary>
		public AdmAppPlacementExamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppPlacementExamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppPlacementExamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppPlacementExamFilters
	
	#region AdmAppPlacementExamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppPlacementExamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppPlacementExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppPlacementExamQuery : AdmAppPlacementExamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamQuery class.
		/// </summary>
		public AdmAppPlacementExamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppPlacementExamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppPlacementExamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppPlacementExamQuery
		
	#region AdmAppTransToCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppTransToCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransToCourseFilters : AdmAppTransToCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseFilters class.
		/// </summary>
		public AdmAppTransToCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransToCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransToCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransToCourseFilters
	
	#region AdmAppTransToCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppTransToCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppTransToCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppTransToCourseQuery : AdmAppTransToCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseQuery class.
		/// </summary>
		public AdmAppTransToCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppTransToCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppTransToCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppTransToCourseQuery
		
	#region AdmAppPrefFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppPrefFilters : AdmAppPrefFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppPrefFilters class.
		/// </summary>
		public AdmAppPrefFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppPrefFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppPrefFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppPrefFilters
	
	#region AdmAppPrefQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppPrefParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppPrefQuery : AdmAppPrefParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppPrefQuery class.
		/// </summary>
		public AdmAppPrefQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppPrefQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppPrefQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppPrefQuery
		
	#region AdmCodeMasteryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCodeMastery"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCodeMasteryFilters : AdmCodeMasteryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCodeMasteryFilters class.
		/// </summary>
		public AdmCodeMasteryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeMasteryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCodeMasteryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeMasteryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCodeMasteryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCodeMasteryFilters
	
	#region AdmCodeMasteryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCodeMasteryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCodeMastery"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCodeMasteryQuery : AdmCodeMasteryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCodeMasteryQuery class.
		/// </summary>
		public AdmCodeMasteryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeMasteryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCodeMasteryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeMasteryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCodeMasteryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCodeMasteryQuery
		
	#region AdmAppWorkExperFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmAppWorkExper"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppWorkExperFilters : AdmAppWorkExperFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppWorkExperFilters class.
		/// </summary>
		public AdmAppWorkExperFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppWorkExperFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppWorkExperFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppWorkExperFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppWorkExperFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppWorkExperFilters
	
	#region AdmAppWorkExperQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmAppWorkExperParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmAppWorkExper"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmAppWorkExperQuery : AdmAppWorkExperParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmAppWorkExperQuery class.
		/// </summary>
		public AdmAppWorkExperQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmAppWorkExperQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmAppWorkExperQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmAppWorkExperQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmAppWorkExperQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmAppWorkExperQuery
		
	#region AdmCodeTransferTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCodeTransferType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCodeTransferTypeFilters : AdmCodeTransferTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCodeTransferTypeFilters class.
		/// </summary>
		public AdmCodeTransferTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeTransferTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCodeTransferTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeTransferTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCodeTransferTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCodeTransferTypeFilters
	
	#region AdmCodeTransferTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCodeTransferTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCodeTransferType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCodeTransferTypeQuery : AdmCodeTransferTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCodeTransferTypeQuery class.
		/// </summary>
		public AdmCodeTransferTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeTransferTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCodeTransferTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCodeTransferTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCodeTransferTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCodeTransferTypeQuery
		
	#region AdmCdeQualStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeQualStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeQualStatusFilters : AdmCdeQualStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeQualStatusFilters class.
		/// </summary>
		public AdmCdeQualStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeQualStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeQualStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeQualStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeQualStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeQualStatusFilters
	
	#region AdmCdeQualStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeQualStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeQualStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeQualStatusQuery : AdmCdeQualStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeQualStatusQuery class.
		/// </summary>
		public AdmCdeQualStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeQualStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeQualStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeQualStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeQualStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeQualStatusQuery
		
	#region AdmCompetitiveAvgFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCompetitiveAvg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCompetitiveAvgFilters : AdmCompetitiveAvgFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCompetitiveAvgFilters class.
		/// </summary>
		public AdmCompetitiveAvgFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCompetitiveAvgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCompetitiveAvgFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCompetitiveAvgFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCompetitiveAvgFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCompetitiveAvgFilters
	
	#region AdmCompetitiveAvgQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCompetitiveAvgParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCompetitiveAvg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCompetitiveAvgQuery : AdmCompetitiveAvgParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCompetitiveAvgQuery class.
		/// </summary>
		public AdmCompetitiveAvgQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCompetitiveAvgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCompetitiveAvgQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCompetitiveAvgQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCompetitiveAvgQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCompetitiveAvgQuery
		
	#region AdmCdeMediaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeMedia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeMediaFilters : AdmCdeMediaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeMediaFilters class.
		/// </summary>
		public AdmCdeMediaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeMediaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeMediaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeMediaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeMediaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeMediaFilters
	
	#region AdmCdeMediaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeMediaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeMedia"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeMediaQuery : AdmCdeMediaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeMediaQuery class.
		/// </summary>
		public AdmCdeMediaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeMediaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeMediaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeMediaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeMediaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeMediaQuery
		
	#region AdmApplicantAcceptanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmApplicantAcceptance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmApplicantAcceptanceFilters : AdmApplicantAcceptanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmApplicantAcceptanceFilters class.
		/// </summary>
		public AdmApplicantAcceptanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantAcceptanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmApplicantAcceptanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantAcceptanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmApplicantAcceptanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmApplicantAcceptanceFilters
	
	#region AdmApplicantAcceptanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmApplicantAcceptanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmApplicantAcceptance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmApplicantAcceptanceQuery : AdmApplicantAcceptanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmApplicantAcceptanceQuery class.
		/// </summary>
		public AdmApplicantAcceptanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantAcceptanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmApplicantAcceptanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmApplicantAcceptanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmApplicantAcceptanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmApplicantAcceptanceQuery
		
	#region AdmCdeEssayOptionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeEssayOption"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeEssayOptionFilters : AdmCdeEssayOptionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeEssayOptionFilters class.
		/// </summary>
		public AdmCdeEssayOptionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeEssayOptionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeEssayOptionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeEssayOptionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeEssayOptionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeEssayOptionFilters
	
	#region AdmCdeEssayOptionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeEssayOptionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeEssayOption"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeEssayOptionQuery : AdmCdeEssayOptionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeEssayOptionQuery class.
		/// </summary>
		public AdmCdeEssayOptionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeEssayOptionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeEssayOptionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeEssayOptionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeEssayOptionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeEssayOptionQuery
		
	#region AdmCdeAlumniPrefFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeAlumniPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeAlumniPrefFilters : AdmCdeAlumniPrefFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeAlumniPrefFilters class.
		/// </summary>
		public AdmCdeAlumniPrefFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAlumniPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeAlumniPrefFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAlumniPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeAlumniPrefFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeAlumniPrefFilters
	
	#region AdmCdeAlumniPrefQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeAlumniPrefParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeAlumniPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeAlumniPrefQuery : AdmCdeAlumniPrefParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeAlumniPrefQuery class.
		/// </summary>
		public AdmCdeAlumniPrefQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAlumniPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeAlumniPrefQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeAlumniPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeAlumniPrefQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeAlumniPrefQuery
		
	#region EdCourseBarredFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseBarred"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseBarredFilters : EdCourseBarredFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseBarredFilters class.
		/// </summary>
		public EdCourseBarredFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseBarredFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseBarredFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseBarredFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseBarredFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseBarredFilters
	
	#region EdCourseBarredQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseBarredParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseBarred"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseBarredQuery : EdCourseBarredParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseBarredQuery class.
		/// </summary>
		public EdCourseBarredQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseBarredQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseBarredQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseBarredQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseBarredQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseBarredQuery
		
	#region AdmCdeCourseCompFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AdmCdeCourseComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeCourseCompFilters : AdmCdeCourseCompFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeCourseCompFilters class.
		/// </summary>
		public AdmCdeCourseCompFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeCourseCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeCourseCompFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeCourseCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeCourseCompFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeCourseCompFilters
	
	#region AdmCdeCourseCompQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AdmCdeCourseCompParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AdmCdeCourseComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AdmCdeCourseCompQuery : AdmCdeCourseCompParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AdmCdeCourseCompQuery class.
		/// </summary>
		public AdmCdeCourseCompQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeCourseCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AdmCdeCourseCompQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AdmCdeCourseCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AdmCdeCourseCompQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AdmCdeCourseCompQuery
		
	#region EdCourseCoreqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseCoreq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseCoreqFilters : EdCourseCoreqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseCoreqFilters class.
		/// </summary>
		public EdCourseCoreqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseCoreqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseCoreqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseCoreqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseCoreqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseCoreqFilters
	
	#region EdCourseCoreqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseCoreqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseCoreq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseCoreqQuery : EdCourseCoreqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseCoreqQuery class.
		/// </summary>
		public EdCourseCoreqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseCoreqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseCoreqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseCoreqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseCoreqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseCoreqQuery
		
	#region EntCodeMdTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodeMdType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeMdTypeFilters : EntCodeMdTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeMdTypeFilters class.
		/// </summary>
		public EntCodeMdTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeMdTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeMdTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeMdTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeMdTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeMdTypeFilters
	
	#region EntCodeMdTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodeMdTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodeMdType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeMdTypeQuery : EntCodeMdTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeMdTypeQuery class.
		/// </summary>
		public EntCodeMdTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeMdTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeMdTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeMdTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeMdTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeMdTypeQuery
		
	#region EntCodeFullfillMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodeFullfillMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeFullfillMetadataFilters : EntCodeFullfillMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeFullfillMetadataFilters class.
		/// </summary>
		public EntCodeFullfillMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeFullfillMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeFullfillMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeFullfillMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeFullfillMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeFullfillMetadataFilters
	
	#region EntCodeFullfillMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodeFullfillMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodeFullfillMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeFullfillMetadataQuery : EntCodeFullfillMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeFullfillMetadataQuery class.
		/// </summary>
		public EntCodeFullfillMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeFullfillMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeFullfillMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeFullfillMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeFullfillMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeFullfillMetadataQuery
		
	#region ErpOrgTreeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ErpOrgTree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ErpOrgTreeFilters : ErpOrgTreeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ErpOrgTreeFilters class.
		/// </summary>
		public ErpOrgTreeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ErpOrgTreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ErpOrgTreeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ErpOrgTreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ErpOrgTreeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ErpOrgTreeFilters
	
	#region ErpOrgTreeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ErpOrgTreeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ErpOrgTree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ErpOrgTreeQuery : ErpOrgTreeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ErpOrgTreeQuery class.
		/// </summary>
		public ErpOrgTreeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ErpOrgTreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ErpOrgTreeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ErpOrgTreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ErpOrgTreeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ErpOrgTreeQuery
		
	#region EntIntroducMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntIntroducMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntIntroducMetadataFilters : EntIntroducMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntIntroducMetadataFilters class.
		/// </summary>
		public EntIntroducMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntIntroducMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntIntroducMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntIntroducMetadataFilters
	
	#region EntIntroducMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntIntroducMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntIntroducMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntIntroducMetadataQuery : EntIntroducMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntIntroducMetadataQuery class.
		/// </summary>
		public EntIntroducMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntIntroducMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntIntroducMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntIntroducMetadataQuery
		
	#region EntIntroducMdDataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntIntroducMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntIntroducMdDataFilters : EntIntroducMdDataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntIntroducMdDataFilters class.
		/// </summary>
		public EntIntroducMdDataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntIntroducMdDataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntIntroducMdDataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntIntroducMdDataFilters
	
	#region EntIntroducMdDataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntIntroducMdDataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntIntroducMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntIntroducMdDataQuery : EntIntroducMdDataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntIntroducMdDataQuery class.
		/// </summary>
		public EntIntroducMdDataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntIntroducMdDataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntIntroducMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntIntroducMdDataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntIntroducMdDataQuery
		
	#region EntGraduationReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntGraduationReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntGraduationReqFilters : EntGraduationReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntGraduationReqFilters class.
		/// </summary>
		public EntGraduationReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntGraduationReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntGraduationReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntGraduationReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntGraduationReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntGraduationReqFilters
	
	#region EntGraduationReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntGraduationReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntGraduationReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntGraduationReqQuery : EntGraduationReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntGraduationReqQuery class.
		/// </summary>
		public EntGraduationReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntGraduationReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntGraduationReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntGraduationReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntGraduationReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntGraduationReqQuery
		
	#region EntCodePrecondMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodePrecondMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodePrecondMetadataFilters : EntCodePrecondMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodePrecondMetadataFilters class.
		/// </summary>
		public EntCodePrecondMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodePrecondMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodePrecondMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodePrecondMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodePrecondMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodePrecondMetadataFilters
	
	#region EntCodePrecondMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodePrecondMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodePrecondMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodePrecondMetadataQuery : EntCodePrecondMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodePrecondMetadataQuery class.
		/// </summary>
		public EntCodePrecondMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodePrecondMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodePrecondMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodePrecondMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodePrecondMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodePrecondMetadataQuery
		
	#region EntGradingMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntGradingMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntGradingMetadataFilters : EntGradingMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntGradingMetadataFilters class.
		/// </summary>
		public EntGradingMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntGradingMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntGradingMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntGradingMetadataFilters
	
	#region EntGradingMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntGradingMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntGradingMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntGradingMetadataQuery : EntGradingMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntGradingMetadataQuery class.
		/// </summary>
		public EntGradingMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntGradingMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntGradingMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntGradingMetadataQuery
		
	#region EntFullfillMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntFullfillMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntFullfillMetadataFilters : EntFullfillMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntFullfillMetadataFilters class.
		/// </summary>
		public EntFullfillMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntFullfillMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntFullfillMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntFullfillMetadataFilters
	
	#region EntFullfillMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntFullfillMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntFullfillMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntFullfillMetadataQuery : EntFullfillMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntFullfillMetadataQuery class.
		/// </summary>
		public EntFullfillMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntFullfillMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntFullfillMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntFullfillMetadataQuery
		
	#region EntGradingMdDataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntGradingMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntGradingMdDataFilters : EntGradingMdDataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntGradingMdDataFilters class.
		/// </summary>
		public EntGradingMdDataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntGradingMdDataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntGradingMdDataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntGradingMdDataFilters
	
	#region EntGradingMdDataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntGradingMdDataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntGradingMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntGradingMdDataQuery : EntGradingMdDataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntGradingMdDataQuery class.
		/// </summary>
		public EntGradingMdDataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntGradingMdDataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntGradingMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntGradingMdDataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntGradingMdDataQuery
		
	#region EntFullfillMdDataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntFullfillMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntFullfillMdDataFilters : EntFullfillMdDataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntFullfillMdDataFilters class.
		/// </summary>
		public EntFullfillMdDataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntFullfillMdDataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntFullfillMdDataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntFullfillMdDataFilters
	
	#region EntFullfillMdDataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntFullfillMdDataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntFullfillMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntFullfillMdDataQuery : EntFullfillMdDataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntFullfillMdDataQuery class.
		/// </summary>
		public EntFullfillMdDataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntFullfillMdDataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntFullfillMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntFullfillMdDataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntFullfillMdDataQuery
		
	#region EntMainMatrixFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntMainMatrix"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntMainMatrixFilters : EntMainMatrixFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntMainMatrixFilters class.
		/// </summary>
		public EntMainMatrixFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntMainMatrixFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntMainMatrixFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntMainMatrixFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntMainMatrixFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntMainMatrixFilters
	
	#region EntMainMatrixQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntMainMatrixParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntMainMatrix"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntMainMatrixQuery : EntMainMatrixParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntMainMatrixQuery class.
		/// </summary>
		public EntMainMatrixQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntMainMatrixQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntMainMatrixQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntMainMatrixQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntMainMatrixQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntMainMatrixQuery
		
	#region EntMajorPhaseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntMajorPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntMajorPhaseFilters : EntMajorPhaseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseFilters class.
		/// </summary>
		public EntMajorPhaseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntMajorPhaseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntMajorPhaseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntMajorPhaseFilters
	
	#region EntMajorPhaseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntMajorPhaseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntMajorPhase"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntMajorPhaseQuery : EntMajorPhaseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseQuery class.
		/// </summary>
		public EntMajorPhaseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntMajorPhaseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntMajorPhaseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntMajorPhaseQuery
		
	#region EntMajorPhaseCrsExpFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntMajorPhaseCrsExp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntMajorPhaseCrsExpFilters : EntMajorPhaseCrsExpFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseCrsExpFilters class.
		/// </summary>
		public EntMajorPhaseCrsExpFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseCrsExpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntMajorPhaseCrsExpFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseCrsExpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntMajorPhaseCrsExpFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntMajorPhaseCrsExpFilters
	
	#region EntMajorPhaseCrsExpQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntMajorPhaseCrsExpParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntMajorPhaseCrsExp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntMajorPhaseCrsExpQuery : EntMajorPhaseCrsExpParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseCrsExpQuery class.
		/// </summary>
		public EntMajorPhaseCrsExpQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseCrsExpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntMajorPhaseCrsExpQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseCrsExpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntMajorPhaseCrsExpQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntMajorPhaseCrsExpQuery
		
	#region EntPolicyAccumHonorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyAccumHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAccumHonorFilters : EntPolicyAccumHonorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAccumHonorFilters class.
		/// </summary>
		public EntPolicyAccumHonorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAccumHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAccumHonorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAccumHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAccumHonorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAccumHonorFilters
	
	#region EntPolicyAccumHonorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyAccumHonorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyAccumHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAccumHonorQuery : EntPolicyAccumHonorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAccumHonorQuery class.
		/// </summary>
		public EntPolicyAccumHonorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAccumHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAccumHonorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAccumHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAccumHonorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAccumHonorQuery
		
	#region EntPolicyAssessCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessCourseFilters : EntPolicyAssessCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessCourseFilters class.
		/// </summary>
		public EntPolicyAssessCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessCourseFilters
	
	#region EntPolicyAssessCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyAssessCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessCourseQuery : EntPolicyAssessCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessCourseQuery class.
		/// </summary>
		public EntPolicyAssessCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessCourseQuery
		
	#region EntPolicyAssessDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessDtlFilters : EntPolicyAssessDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessDtlFilters class.
		/// </summary>
		public EntPolicyAssessDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessDtlFilters
	
	#region EntPolicyAssessDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyAssessDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessDtlQuery : EntPolicyAssessDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessDtlQuery class.
		/// </summary>
		public EntPolicyAssessDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessDtlQuery
		
	#region EntPolicyAssessGrpDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessGrpDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessGrpDtlFilters : EntPolicyAssessGrpDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpDtlFilters class.
		/// </summary>
		public EntPolicyAssessGrpDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessGrpDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessGrpDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessGrpDtlFilters
	
	#region EntPolicyAssessGrpDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyAssessGrpDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessGrpDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessGrpDtlQuery : EntPolicyAssessGrpDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpDtlQuery class.
		/// </summary>
		public EntPolicyAssessGrpDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessGrpDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessGrpDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessGrpDtlQuery
		
	#region EntPolicyAbsenceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAbsenceFilters : EntPolicyAbsenceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAbsenceFilters class.
		/// </summary>
		public EntPolicyAbsenceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAbsenceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAbsenceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAbsenceFilters
	
	#region EntPolicyAbsenceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyAbsenceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAbsenceQuery : EntPolicyAbsenceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAbsenceQuery class.
		/// </summary>
		public EntPolicyAbsenceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAbsenceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAbsenceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAbsenceQuery
		
	#region EntPolcyGrdngHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolcyGrdngHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyGrdngHdrFilters : EntPolcyGrdngHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngHdrFilters class.
		/// </summary>
		public EntPolcyGrdngHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyGrdngHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyGrdngHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyGrdngHdrFilters
	
	#region EntPolcyGrdngHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolcyGrdngHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolcyGrdngHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyGrdngHdrQuery : EntPolcyGrdngHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngHdrQuery class.
		/// </summary>
		public EntPolcyGrdngHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyGrdngHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyGrdngHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyGrdngHdrQuery
		
	#region EntPolcyGrdngCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolcyGrdngCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyGrdngCourseFilters : EntPolcyGrdngCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngCourseFilters class.
		/// </summary>
		public EntPolcyGrdngCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyGrdngCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyGrdngCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyGrdngCourseFilters
	
	#region EntPolcyGrdngCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolcyGrdngCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolcyGrdngCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyGrdngCourseQuery : EntPolcyGrdngCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngCourseQuery class.
		/// </summary>
		public EntPolcyGrdngCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyGrdngCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGrdngCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyGrdngCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyGrdngCourseQuery
		
	#region EntPlcyAcadWarnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPlcyAcadWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPlcyAcadWarnFilters : EntPlcyAcadWarnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnFilters class.
		/// </summary>
		public EntPlcyAcadWarnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPlcyAcadWarnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPlcyAcadWarnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPlcyAcadWarnFilters
	
	#region EntPlcyAcadWarnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPlcyAcadWarnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPlcyAcadWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPlcyAcadWarnQuery : EntPlcyAcadWarnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnQuery class.
		/// </summary>
		public EntPlcyAcadWarnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPlcyAcadWarnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPlcyAcadWarnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPlcyAcadWarnQuery
		
	#region EntPlcyAcadWarnDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPlcyAcadWarnDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPlcyAcadWarnDtlFilters : EntPlcyAcadWarnDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnDtlFilters class.
		/// </summary>
		public EntPlcyAcadWarnDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPlcyAcadWarnDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPlcyAcadWarnDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPlcyAcadWarnDtlFilters
	
	#region EntPlcyAcadWarnDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPlcyAcadWarnDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPlcyAcadWarnDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPlcyAcadWarnDtlQuery : EntPlcyAcadWarnDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnDtlQuery class.
		/// </summary>
		public EntPlcyAcadWarnDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPlcyAcadWarnDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPlcyAcadWarnDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPlcyAcadWarnDtlQuery
		
	#region EntPolcyCrsRetakeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolcyCrsRetake"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyCrsRetakeFilters : EntPolcyCrsRetakeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyCrsRetakeFilters class.
		/// </summary>
		public EntPolcyCrsRetakeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyCrsRetakeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyCrsRetakeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyCrsRetakeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyCrsRetakeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyCrsRetakeFilters
	
	#region EntPolcyCrsRetakeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolcyCrsRetakeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolcyCrsRetake"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyCrsRetakeQuery : EntPolcyCrsRetakeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyCrsRetakeQuery class.
		/// </summary>
		public EntPolcyCrsRetakeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyCrsRetakeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyCrsRetakeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyCrsRetakeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyCrsRetakeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyCrsRetakeQuery
		
	#region EntPolcyGpaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolcyGpa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyGpaFilters : EntPolcyGpaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaFilters class.
		/// </summary>
		public EntPolcyGpaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyGpaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyGpaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyGpaFilters
	
	#region EntPolcyGpaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolcyGpaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolcyGpa"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolcyGpaQuery : EntPolcyGpaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaQuery class.
		/// </summary>
		public EntPolcyGpaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolcyGpaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolcyGpaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolcyGpaQuery
		
	#region EntCoursePkgMdDataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCoursePkgMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCoursePkgMdDataFilters : EntCoursePkgMdDataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgMdDataFilters class.
		/// </summary>
		public EntCoursePkgMdDataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCoursePkgMdDataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCoursePkgMdDataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCoursePkgMdDataFilters
	
	#region EntCoursePkgMdDataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCoursePkgMdDataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCoursePkgMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCoursePkgMdDataQuery : EntCoursePkgMdDataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgMdDataQuery class.
		/// </summary>
		public EntCoursePkgMdDataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCoursePkgMdDataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCoursePkgMdDataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCoursePkgMdDataQuery
		
	#region EntCoursePkgHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCoursePkgHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCoursePkgHdrFilters : EntCoursePkgHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgHdrFilters class.
		/// </summary>
		public EntCoursePkgHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCoursePkgHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCoursePkgHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCoursePkgHdrFilters
	
	#region EntCoursePkgHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCoursePkgHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCoursePkgHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCoursePkgHdrQuery : EntCoursePkgHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgHdrQuery class.
		/// </summary>
		public EntCoursePkgHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCoursePkgHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCoursePkgHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCoursePkgHdrQuery
		
	#region EntCoursePkgDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCoursePkgDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCoursePkgDtlFilters : EntCoursePkgDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlFilters class.
		/// </summary>
		public EntCoursePkgDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCoursePkgDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCoursePkgDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCoursePkgDtlFilters
	
	#region EntCoursePkgDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCoursePkgDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCoursePkgDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCoursePkgDtlQuery : EntCoursePkgDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlQuery class.
		/// </summary>
		public EntCoursePkgDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCoursePkgDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCoursePkgDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCoursePkgDtlQuery
		
	#region EdStudStateTempFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudStateTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudStateTempFilters : EdStudStateTempFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudStateTempFilters class.
		/// </summary>
		public EdStudStateTempFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudStateTempFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudStateTempFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudStateTempFilters
	
	#region EdStudStateTempQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudStateTempParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudStateTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudStateTempQuery : EdStudStateTempParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudStateTempQuery class.
		/// </summary>
		public EdStudStateTempQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudStateTempQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudStateTempQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudStateTempQuery
		
	#region EdStudTransFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudTrans"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudTransFilters : EdStudTransFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudTransFilters class.
		/// </summary>
		public EdStudTransFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudTransFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudTransFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudTransFilters
	
	#region EdStudTransQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudTransParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudTrans"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudTransQuery : EdStudTransParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudTransQuery class.
		/// </summary>
		public EdStudTransQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudTransQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudTransQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudTransQuery
		
	#region EdStudTransFromReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudTransFromReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudTransFromReqFilters : EdStudTransFromReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudTransFromReqFilters class.
		/// </summary>
		public EdStudTransFromReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransFromReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudTransFromReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransFromReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudTransFromReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudTransFromReqFilters
	
	#region EdStudTransFromReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudTransFromReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudTransFromReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudTransFromReqQuery : EdStudTransFromReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudTransFromReqQuery class.
		/// </summary>
		public EdStudTransFromReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransFromReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudTransFromReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudTransFromReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudTransFromReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudTransFromReqQuery
		
	#region EdStudViolFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudViol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudViolFilters : EdStudViolFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudViolFilters class.
		/// </summary>
		public EdStudViolFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudViolFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudViolFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudViolFilters
	
	#region EdStudViolQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudViolParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudViol"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudViolQuery : EdStudViolParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudViolQuery class.
		/// </summary>
		public EdStudViolQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudViolQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudViolQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudViolQuery
		
	#region EdStudStateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudStateFilters : EdStudStateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudStateFilters class.
		/// </summary>
		public EdStudStateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudStateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudStateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudStateFilters
	
	#region EdStudStateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudStateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudStateQuery : EdStudStateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudStateQuery class.
		/// </summary>
		public EdStudStateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudStateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudStateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudStateQuery
		
	#region EdStudSportFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudSport"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSportFilters : EdStudSportFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSportFilters class.
		/// </summary>
		public EdStudSportFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSportFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSportFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSportFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSportFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSportFilters
	
	#region EdStudSportQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudSportParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudSport"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSportQuery : EdStudSportParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSportQuery class.
		/// </summary>
		public EdStudSportQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSportQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSportQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSportQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSportQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSportQuery
		
	#region EdStudSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSemesterFilters : EdStudSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterFilters class.
		/// </summary>
		public EdStudSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSemesterFilters
	
	#region EdStudSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSemesterQuery : EdStudSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterQuery class.
		/// </summary>
		public EdStudSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSemesterQuery
		
	#region EdStudSemesterExtFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudSemesterExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSemesterExtFilters : EdStudSemesterExtFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtFilters class.
		/// </summary>
		public EdStudSemesterExtFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSemesterExtFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSemesterExtFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSemesterExtFilters
	
	#region EdStudSemesterExtQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudSemesterExtParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudSemesterExt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSemesterExtQuery : EdStudSemesterExtParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtQuery class.
		/// </summary>
		public EdStudSemesterExtQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSemesterExtQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSemesterExtQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSemesterExtQuery
		
	#region EdStudQualFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudQualFilters : EdStudQualFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudQualFilters class.
		/// </summary>
		public EdStudQualFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudQualFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudQualFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudQualFilters
	
	#region EdStudQualQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudQualParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudQualQuery : EdStudQualParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudQualQuery class.
		/// </summary>
		public EdStudQualQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudQualQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudQualQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudQualQuery
		
	#region EdStudSemesterTempFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudSemesterTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSemesterTempFilters : EdStudSemesterTempFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempFilters class.
		/// </summary>
		public EdStudSemesterTempFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSemesterTempFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSemesterTempFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSemesterTempFilters
	
	#region EdStudSemesterTempQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudSemesterTempParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudSemesterTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudSemesterTempQuery : EdStudSemesterTempParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempQuery class.
		/// </summary>
		public EdStudSemesterTempQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudSemesterTempQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudSemesterTempQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudSemesterTempQuery
		
	#region EdStudViolAppealFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudViolAppeal"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudViolAppealFilters : EdStudViolAppealFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudViolAppealFilters class.
		/// </summary>
		public EdStudViolAppealFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolAppealFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudViolAppealFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolAppealFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudViolAppealFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudViolAppealFilters
	
	#region EdStudViolAppealQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudViolAppealParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudViolAppeal"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudViolAppealQuery : EdStudViolAppealParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudViolAppealQuery class.
		/// </summary>
		public EdStudViolAppealQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolAppealQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudViolAppealQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudViolAppealQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudViolAppealQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudViolAppealQuery
		
	#region EdTopicTchngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdTopicTchng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTopicTchngFilters : EdTopicTchngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTopicTchngFilters class.
		/// </summary>
		public EdTopicTchngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTopicTchngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTopicTchngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTopicTchngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTopicTchngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTopicTchngFilters
	
	#region EdTopicTchngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdTopicTchngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdTopicTchng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTopicTchngQuery : EdTopicTchngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTopicTchngQuery class.
		/// </summary>
		public EdTopicTchngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTopicTchngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTopicTchngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTopicTchngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTopicTchngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTopicTchngQuery
		
	#region EntCodeIntroMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodeIntroMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeIntroMetadataFilters : EntCodeIntroMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeIntroMetadataFilters class.
		/// </summary>
		public EntCodeIntroMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeIntroMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeIntroMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeIntroMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeIntroMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeIntroMetadataFilters
	
	#region EntCodeIntroMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodeIntroMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodeIntroMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeIntroMetadataQuery : EntCodeIntroMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeIntroMetadataQuery class.
		/// </summary>
		public EntCodeIntroMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeIntroMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeIntroMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeIntroMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeIntroMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeIntroMetadataQuery
		
	#region EntCodePolicyCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodePolicyCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodePolicyCatFilters : EntCodePolicyCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyCatFilters class.
		/// </summary>
		public EntCodePolicyCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodePolicyCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodePolicyCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodePolicyCatFilters
	
	#region EntCodePolicyCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodePolicyCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodePolicyCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodePolicyCatQuery : EntCodePolicyCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyCatQuery class.
		/// </summary>
		public EntCodePolicyCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodePolicyCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodePolicyCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodePolicyCatQuery
		
	#region EntCodePolicyMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodePolicyMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodePolicyMetadataFilters : EntCodePolicyMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataFilters class.
		/// </summary>
		public EntCodePolicyMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodePolicyMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodePolicyMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodePolicyMetadataFilters
	
	#region EntCodePolicyMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodePolicyMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodePolicyMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodePolicyMetadataQuery : EntCodePolicyMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataQuery class.
		/// </summary>
		public EntCodePolicyMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodePolicyMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodePolicyMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodePolicyMetadataQuery
		
	#region EntCourseMdDataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCourseMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCourseMdDataFilters : EntCourseMdDataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCourseMdDataFilters class.
		/// </summary>
		public EntCourseMdDataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCourseMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCourseMdDataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCourseMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCourseMdDataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCourseMdDataFilters
	
	#region EntCourseMdDataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCourseMdDataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCourseMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCourseMdDataQuery : EntCourseMdDataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCourseMdDataQuery class.
		/// </summary>
		public EntCourseMdDataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCourseMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCourseMdDataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCourseMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCourseMdDataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCourseMdDataQuery
		
	#region EntCodeGradingMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCodeGradingMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeGradingMetadataFilters : EntCodeGradingMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeGradingMetadataFilters class.
		/// </summary>
		public EntCodeGradingMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeGradingMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeGradingMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeGradingMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeGradingMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeGradingMetadataFilters
	
	#region EntCodeGradingMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCodeGradingMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCodeGradingMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCodeGradingMetadataQuery : EntCodeGradingMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCodeGradingMetadataQuery class.
		/// </summary>
		public EntCodeGradingMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCodeGradingMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCodeGradingMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCodeGradingMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCodeGradingMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCodeGradingMetadataQuery
		
	#region EdTrainingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdTraining"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTrainingFilters : EdTrainingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTrainingFilters class.
		/// </summary>
		public EdTrainingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTrainingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTrainingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTrainingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTrainingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTrainingFilters
	
	#region EdTrainingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdTrainingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdTraining"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTrainingQuery : EdTrainingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTrainingQuery class.
		/// </summary>
		public EdTrainingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTrainingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTrainingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTrainingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTrainingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTrainingQuery
		
	#region EntCdePkgTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntCdePkgType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCdePkgTypeFilters : EntCdePkgTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCdePkgTypeFilters class.
		/// </summary>
		public EntCdePkgTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCdePkgTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCdePkgTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCdePkgTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCdePkgTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCdePkgTypeFilters
	
	#region EntCdePkgTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntCdePkgTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntCdePkgType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntCdePkgTypeQuery : EntCdePkgTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntCdePkgTypeQuery class.
		/// </summary>
		public EntCdePkgTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntCdePkgTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntCdePkgTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntCdePkgTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntCdePkgTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntCdePkgTypeQuery
		
	#region EdTrainStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdTrainStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTrainStudFilters : EdTrainStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTrainStudFilters class.
		/// </summary>
		public EdTrainStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTrainStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTrainStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTrainStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTrainStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTrainStudFilters
	
	#region EdTrainStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdTrainStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdTrainStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTrainStudQuery : EdTrainStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTrainStudQuery class.
		/// </summary>
		public EdTrainStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTrainStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTrainStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTrainStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTrainStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTrainStudQuery
		
	#region EntAvailPrntTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntAvailPrntType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntAvailPrntTypeFilters : EntAvailPrntTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntAvailPrntTypeFilters class.
		/// </summary>
		public EntAvailPrntTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntAvailPrntTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntAvailPrntTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntAvailPrntTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntAvailPrntTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntAvailPrntTypeFilters
	
	#region EntAvailPrntTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntAvailPrntTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntAvailPrntType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntAvailPrntTypeQuery : EntAvailPrntTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntAvailPrntTypeQuery class.
		/// </summary>
		public EntAvailPrntTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntAvailPrntTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntAvailPrntTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntAvailPrntTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntAvailPrntTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntAvailPrntTypeQuery
		
	#region EntPolicyAssessGrpHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessGrpHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessGrpHdrFilters : EntPolicyAssessGrpHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpHdrFilters class.
		/// </summary>
		public EntPolicyAssessGrpHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessGrpHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessGrpHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessGrpHdrFilters
	
	#region EntPolicyAssessGrpHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyAssessGrpHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessGrpHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessGrpHdrQuery : EntPolicyAssessGrpHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpHdrQuery class.
		/// </summary>
		public EntPolicyAssessGrpHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessGrpHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessGrpHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessGrpHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessGrpHdrQuery
		
	#region EdTrainSupervisorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdTrainSupervisor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTrainSupervisorFilters : EdTrainSupervisorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTrainSupervisorFilters class.
		/// </summary>
		public EdTrainSupervisorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTrainSupervisorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTrainSupervisorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTrainSupervisorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTrainSupervisorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTrainSupervisorFilters
	
	#region EdTrainSupervisorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdTrainSupervisorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdTrainSupervisor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdTrainSupervisorQuery : EdTrainSupervisorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdTrainSupervisorQuery class.
		/// </summary>
		public EdTrainSupervisorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdTrainSupervisorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdTrainSupervisorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdTrainSupervisorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdTrainSupervisorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdTrainSupervisorQuery
		
	#region EntPolicyAssessHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessHdrFilters : EntPolicyAssessHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessHdrFilters class.
		/// </summary>
		public EntPolicyAssessHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessHdrFilters
	
	#region EntPolicyAssessHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyAssessHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyAssessHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyAssessHdrQuery : EntPolicyAssessHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessHdrQuery class.
		/// </summary>
		public EntPolicyAssessHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyAssessHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyAssessHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyAssessHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyAssessHdrQuery
		
	#region EntPolicyCourseChngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyCourseChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyCourseChngFilters : EntPolicyCourseChngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseChngFilters class.
		/// </summary>
		public EntPolicyCourseChngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyCourseChngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyCourseChngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyCourseChngFilters
	
	#region EntPolicyCourseChngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyCourseChngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyCourseChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyCourseChngQuery : EntPolicyCourseChngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseChngQuery class.
		/// </summary>
		public EntPolicyCourseChngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyCourseChngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyCourseChngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyCourseChngQuery
		
	#region FeeFacultyRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeFacultyRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacultyRuleFilters : FeeFacultyRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleFilters class.
		/// </summary>
		public FeeFacultyRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacultyRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacultyRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacultyRuleFilters
	
	#region FeeFacultyRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeFacultyRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeFacultyRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacultyRuleQuery : FeeFacultyRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleQuery class.
		/// </summary>
		public FeeFacultyRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacultyRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacultyRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacultyRuleQuery
		
	#region FeeFacultyItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeFacultyItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacultyItemFilters : FeeFacultyItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemFilters class.
		/// </summary>
		public FeeFacultyItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacultyItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacultyItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacultyItemFilters
	
	#region FeeFacultyItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeFacultyItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeFacultyItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacultyItemQuery : FeeFacultyItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemQuery class.
		/// </summary>
		public FeeFacultyItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacultyItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacultyItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacultyItemQuery
		
	#region FeeCodeBanksFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCodeBanks"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeBanksFilters : FeeCodeBanksFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksFilters class.
		/// </summary>
		public FeeCodeBanksFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeBanksFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeBanksFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeBanksFilters
	
	#region FeeCodeBanksQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCodeBanksParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCodeBanks"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeBanksQuery : FeeCodeBanksParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksQuery class.
		/// </summary>
		public FeeCodeBanksQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeBanksQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeBanksQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeBanksQuery
		
	#region FeeCodeItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCodeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeItemFilters : FeeCodeItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeItemFilters class.
		/// </summary>
		public FeeCodeItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeItemFilters
	
	#region FeeCodeItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCodeItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCodeItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeItemQuery : FeeCodeItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeItemQuery class.
		/// </summary>
		public FeeCodeItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeItemQuery
		
	#region FeeCodeReasonsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCodeReasons"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeReasonsFilters : FeeCodeReasonsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeReasonsFilters class.
		/// </summary>
		public FeeCodeReasonsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeReasonsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeReasonsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeReasonsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeReasonsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeReasonsFilters
	
	#region FeeCodeReasonsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCodeReasonsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCodeReasons"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeReasonsQuery : FeeCodeReasonsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeReasonsQuery class.
		/// </summary>
		public FeeCodeReasonsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeReasonsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeReasonsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeReasonsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeReasonsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeReasonsQuery
		
	#region FeeCdeTrsryFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeTrsry"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeTrsryFilters : FeeCdeTrsryFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrsryFilters class.
		/// </summary>
		public FeeCdeTrsryFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrsryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeTrsryFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrsryFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeTrsryFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeTrsryFilters
	
	#region FeeCdeTrsryQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeTrsryParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeTrsry"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeTrsryQuery : FeeCdeTrsryParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrsryQuery class.
		/// </summary>
		public FeeCdeTrsryQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrsryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeTrsryQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrsryQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeTrsryQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeTrsryQuery
		
	#region FeeCdeTrnsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeTrns"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeTrnsFilters : FeeCdeTrnsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrnsFilters class.
		/// </summary>
		public FeeCdeTrnsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrnsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeTrnsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrnsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeTrnsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeTrnsFilters
	
	#region FeeCdeTrnsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeTrnsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeTrns"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeTrnsQuery : FeeCdeTrnsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrnsQuery class.
		/// </summary>
		public FeeCdeTrnsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrnsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeTrnsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeTrnsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeTrnsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeTrnsQuery
		
	#region FeeCdeFundFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeFund"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeFundFilters : FeeCdeFundFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeFundFilters class.
		/// </summary>
		public FeeCdeFundFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeFundFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeFundFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeFundFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeFundFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeFundFilters
	
	#region FeeCdeFundQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeFundParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeFund"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeFundQuery : FeeCdeFundParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeFundQuery class.
		/// </summary>
		public FeeCdeFundQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeFundQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeFundQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeFundQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeFundQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeFundQuery
		
	#region FeeCdeInvocStatusFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeInvocStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeInvocStatusFilters : FeeCdeInvocStatusFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusFilters class.
		/// </summary>
		public FeeCdeInvocStatusFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeInvocStatusFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeInvocStatusFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeInvocStatusFilters
	
	#region FeeCdeInvocStatusQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeInvocStatusParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeInvocStatus"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeInvocStatusQuery : FeeCdeInvocStatusParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusQuery class.
		/// </summary>
		public FeeCdeInvocStatusQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeInvocStatusQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeInvocStatusQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeInvocStatusQuery
		
	#region FeeCdeLimitTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeLimitType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeLimitTypeFilters : FeeCdeLimitTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeLimitTypeFilters class.
		/// </summary>
		public FeeCdeLimitTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeLimitTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeLimitTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeLimitTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeLimitTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeLimitTypeFilters
	
	#region FeeCdeLimitTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeLimitTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeLimitType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeLimitTypeQuery : FeeCdeLimitTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeLimitTypeQuery class.
		/// </summary>
		public FeeCdeLimitTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeLimitTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeLimitTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeLimitTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeLimitTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeLimitTypeQuery
		
	#region FeeCdeSchshipCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeSchshipCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeSchshipCatFilters : FeeCdeSchshipCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipCatFilters class.
		/// </summary>
		public FeeCdeSchshipCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeSchshipCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeSchshipCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeSchshipCatFilters
	
	#region FeeCdeSchshipCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeSchshipCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeSchshipCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeSchshipCatQuery : FeeCdeSchshipCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipCatQuery class.
		/// </summary>
		public FeeCdeSchshipCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeSchshipCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeSchshipCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeSchshipCatQuery
		
	#region FeeCdeSchshipTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeSchshipType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeSchshipTypeFilters : FeeCdeSchshipTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipTypeFilters class.
		/// </summary>
		public FeeCdeSchshipTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeSchshipTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeSchshipTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeSchshipTypeFilters
	
	#region FeeCdeSchshipTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeSchshipTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeSchshipType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeSchshipTypeQuery : FeeCdeSchshipTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipTypeQuery class.
		/// </summary>
		public FeeCdeSchshipTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeSchshipTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeSchshipTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeSchshipTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeSchshipTypeQuery
		
	#region FeeCodeTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCodeType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeTypeFilters : FeeCodeTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeTypeFilters class.
		/// </summary>
		public FeeCodeTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeTypeFilters
	
	#region FeeCodeTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCodeTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCodeType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCodeTypeQuery : FeeCodeTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCodeTypeQuery class.
		/// </summary>
		public FeeCodeTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCodeTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCodeTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCodeTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCodeTypeQuery
		
	#region FeeInstlmntRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeInstlmntRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInstlmntRuleFilters : FeeInstlmntRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntRuleFilters class.
		/// </summary>
		public FeeInstlmntRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInstlmntRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInstlmntRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInstlmntRuleFilters
	
	#region FeeInstlmntRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeInstlmntRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeInstlmntRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInstlmntRuleQuery : FeeInstlmntRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntRuleQuery class.
		/// </summary>
		public FeeInstlmntRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInstlmntRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInstlmntRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInstlmntRuleQuery
		
	#region FeeCourseExpFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCourseExp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCourseExpFilters : FeeCourseExpFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCourseExpFilters class.
		/// </summary>
		public FeeCourseExpFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCourseExpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCourseExpFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCourseExpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCourseExpFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCourseExpFilters
	
	#region FeeCourseExpQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCourseExpParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCourseExp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCourseExpQuery : FeeCourseExpParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCourseExpQuery class.
		/// </summary>
		public FeeCourseExpQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCourseExpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCourseExpQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCourseExpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCourseExpQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCourseExpQuery
		
	#region FeeInstlmntStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeInstlmntStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInstlmntStudFilters : FeeInstlmntStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntStudFilters class.
		/// </summary>
		public FeeInstlmntStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInstlmntStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInstlmntStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInstlmntStudFilters
	
	#region FeeInstlmntStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeInstlmntStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeInstlmntStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInstlmntStudQuery : FeeInstlmntStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntStudQuery class.
		/// </summary>
		public FeeInstlmntStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInstlmntStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInstlmntStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInstlmntStudQuery
		
	#region FeeInstlmntDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeInstlmntDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInstlmntDtlFilters : FeeInstlmntDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntDtlFilters class.
		/// </summary>
		public FeeInstlmntDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInstlmntDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInstlmntDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInstlmntDtlFilters
	
	#region FeeInstlmntDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeInstlmntDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeInstlmntDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeInstlmntDtlQuery : FeeInstlmntDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntDtlQuery class.
		/// </summary>
		public FeeInstlmntDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeInstlmntDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeInstlmntDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeInstlmntDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeInstlmntDtlQuery
		
	#region FeeIntegrationLedgerFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeIntegrationLedger"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeIntegrationLedgerFilters : FeeIntegrationLedgerFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerFilters class.
		/// </summary>
		public FeeIntegrationLedgerFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeIntegrationLedgerFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeIntegrationLedgerFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeIntegrationLedgerFilters
	
	#region FeeIntegrationLedgerQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeIntegrationLedgerParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeIntegrationLedger"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeIntegrationLedgerQuery : FeeIntegrationLedgerParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerQuery class.
		/// </summary>
		public FeeIntegrationLedgerQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeIntegrationLedgerQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeIntegrationLedgerQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeIntegrationLedgerQuery
		
	#region FeeFundRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeFundRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFundRuleFilters : FeeFundRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFundRuleFilters class.
		/// </summary>
		public FeeFundRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFundRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFundRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFundRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFundRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFundRuleFilters
	
	#region FeeFundRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeFundRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeFundRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFundRuleQuery : FeeFundRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFundRuleQuery class.
		/// </summary>
		public FeeFundRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFundRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFundRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFundRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFundRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFundRuleQuery
		
	#region FeeFacItemAdmYearFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeFacItemAdmYear"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacItemAdmYearFilters : FeeFacItemAdmYearFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacItemAdmYearFilters class.
		/// </summary>
		public FeeFacItemAdmYearFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacItemAdmYearFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacItemAdmYearFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacItemAdmYearFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacItemAdmYearFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacItemAdmYearFilters
	
	#region FeeFacItemAdmYearQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeFacItemAdmYearParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeFacItemAdmYear"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacItemAdmYearQuery : FeeFacItemAdmYearParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacItemAdmYearQuery class.
		/// </summary>
		public FeeFacItemAdmYearQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacItemAdmYearQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacItemAdmYearQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacItemAdmYearQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacItemAdmYearQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacItemAdmYearQuery
		
	#region FeeFineDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeFineDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFineDtlFilters : FeeFineDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFineDtlFilters class.
		/// </summary>
		public FeeFineDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFineDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFineDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFineDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFineDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFineDtlFilters
	
	#region FeeFineDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeFineDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeFineDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFineDtlQuery : FeeFineDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFineDtlQuery class.
		/// </summary>
		public FeeFineDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFineDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFineDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFineDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFineDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFineDtlQuery
		
	#region FeeFacultyInstallmentFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeFacultyInstallment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacultyInstallmentFilters : FeeFacultyInstallmentFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacultyInstallmentFilters class.
		/// </summary>
		public FeeFacultyInstallmentFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyInstallmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacultyInstallmentFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyInstallmentFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacultyInstallmentFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacultyInstallmentFilters
	
	#region FeeFacultyInstallmentQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeFacultyInstallmentParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeFacultyInstallment"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFacultyInstallmentQuery : FeeFacultyInstallmentParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFacultyInstallmentQuery class.
		/// </summary>
		public FeeFacultyInstallmentQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyInstallmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFacultyInstallmentQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFacultyInstallmentQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFacultyInstallmentQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFacultyInstallmentQuery
		
	#region FeeCdeDiscCatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeDiscCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeDiscCatFilters : FeeCdeDiscCatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscCatFilters class.
		/// </summary>
		public FeeCdeDiscCatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeDiscCatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscCatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeDiscCatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeDiscCatFilters
	
	#region FeeCdeDiscCatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeDiscCatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeDiscCat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeDiscCatQuery : FeeCdeDiscCatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscCatQuery class.
		/// </summary>
		public FeeCdeDiscCatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeDiscCatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscCatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeDiscCatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeDiscCatQuery
		
	#region FeeFineFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeFine"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFineFilters : FeeFineFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFineFilters class.
		/// </summary>
		public FeeFineFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFineFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFineFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFineFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFineFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFineFilters
	
	#region FeeFineQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeFineParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeFine"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeFineQuery : FeeFineParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeFineQuery class.
		/// </summary>
		public FeeFineQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeFineQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeFineQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeFineQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeFineQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeFineQuery
		
	#region EntPolicyLoadFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyLoad"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyLoadFilters : EntPolicyLoadFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadFilters class.
		/// </summary>
		public EntPolicyLoadFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyLoadFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyLoadFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyLoadFilters
	
	#region EntPolicyLoadQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyLoadParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyLoad"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyLoadQuery : EntPolicyLoadParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadQuery class.
		/// </summary>
		public EntPolicyLoadQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyLoadQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyLoadQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyLoadQuery
		
	#region FeeCdeBondItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeBondItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeBondItemFilters : FeeCdeBondItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeBondItemFilters class.
		/// </summary>
		public FeeCdeBondItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBondItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeBondItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBondItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeBondItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeBondItemFilters
	
	#region FeeCdeBondItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeBondItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeBondItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeBondItemQuery : FeeCdeBondItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeBondItemQuery class.
		/// </summary>
		public FeeCdeBondItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBondItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeBondItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBondItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeBondItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeBondItemQuery
		
	#region EntPolicyMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyMetadataFilters : EntPolicyMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyMetadataFilters class.
		/// </summary>
		public EntPolicyMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyMetadataFilters
	
	#region EntPolicyMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyMetadataQuery : EntPolicyMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyMetadataQuery class.
		/// </summary>
		public EntPolicyMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyMetadataQuery
		
	#region EntPolicyMdDataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyMdDataFilters : EntPolicyMdDataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyMdDataFilters class.
		/// </summary>
		public EntPolicyMdDataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyMdDataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyMdDataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyMdDataFilters
	
	#region EntPolicyMdDataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyMdDataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyMdDataQuery : EntPolicyMdDataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyMdDataQuery class.
		/// </summary>
		public EntPolicyMdDataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyMdDataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyMdDataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyMdDataQuery
		
	#region EdStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudFilters : EdStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudFilters class.
		/// </summary>
		public EdStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudFilters
	
	#region EdStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudQuery : EdStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudQuery class.
		/// </summary>
		public EdStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudQuery
		
	#region EntPolicyGradingLevelFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingLevelFilters : EntPolicyGradingLevelFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelFilters class.
		/// </summary>
		public EntPolicyGradingLevelFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingLevelFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingLevelFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingLevelFilters
	
	#region EntPolicyGradingLevelQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyGradingLevelParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingLevel"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingLevelQuery : EntPolicyGradingLevelParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelQuery class.
		/// </summary>
		public EntPolicyGradingLevelQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingLevelQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingLevelQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingLevelQuery
		
	#region EntPolicyGradingHdrFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingHdrFilters : EntPolicyGradingHdrFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrFilters class.
		/// </summary>
		public EntPolicyGradingHdrFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingHdrFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingHdrFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingHdrFilters
	
	#region EntPolicyGradingHdrQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyGradingHdrParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingHdr"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingHdrQuery : EntPolicyGradingHdrParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrQuery class.
		/// </summary>
		public EntPolicyGradingHdrQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingHdrQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingHdrQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingHdrQuery
		
	#region EntPolicyExcuseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyExcuse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyExcuseFilters : EntPolicyExcuseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyExcuseFilters class.
		/// </summary>
		public EntPolicyExcuseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyExcuseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyExcuseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyExcuseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyExcuseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyExcuseFilters
	
	#region EntPolicyExcuseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyExcuseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyExcuse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyExcuseQuery : EntPolicyExcuseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyExcuseQuery class.
		/// </summary>
		public EntPolicyExcuseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyExcuseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyExcuseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyExcuseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyExcuseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyExcuseQuery
		
	#region EntPolicyCourseRepeatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyCourseRepeat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyCourseRepeatFilters : EntPolicyCourseRepeatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatFilters class.
		/// </summary>
		public EntPolicyCourseRepeatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyCourseRepeatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyCourseRepeatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyCourseRepeatFilters
	
	#region EntPolicyCourseRepeatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyCourseRepeatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyCourseRepeat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyCourseRepeatQuery : EntPolicyCourseRepeatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatQuery class.
		/// </summary>
		public EntPolicyCourseRepeatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyCourseRepeatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyCourseRepeatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyCourseRepeatQuery
		
	#region EntPolicyGradingDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingDtlFilters : EntPolicyGradingDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlFilters class.
		/// </summary>
		public EntPolicyGradingDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingDtlFilters
	
	#region EntPolicyGradingDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyGradingDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingDtlQuery : EntPolicyGradingDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlQuery class.
		/// </summary>
		public EntPolicyGradingDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingDtlQuery
		
	#region EntPolicyObservedFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyObserved"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyObservedFilters : EntPolicyObservedFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyObservedFilters class.
		/// </summary>
		public EntPolicyObservedFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyObservedFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyObservedFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyObservedFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyObservedFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyObservedFilters
	
	#region EntPolicyObservedQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyObservedParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyObserved"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyObservedQuery : EntPolicyObservedParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyObservedQuery class.
		/// </summary>
		public EntPolicyObservedQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyObservedQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyObservedQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyObservedQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyObservedQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyObservedQuery
		
	#region EntPolicyGradingCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingCourseFilters : EntPolicyGradingCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingCourseFilters class.
		/// </summary>
		public EntPolicyGradingCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingCourseFilters
	
	#region EntPolicyGradingCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyGradingCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingCourseQuery : EntPolicyGradingCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingCourseQuery class.
		/// </summary>
		public EntPolicyGradingCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingCourseQuery
		
	#region EntPolicyGradingLevelCoursesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingLevelCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingLevelCoursesFilters : EntPolicyGradingLevelCoursesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelCoursesFilters class.
		/// </summary>
		public EntPolicyGradingLevelCoursesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingLevelCoursesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingLevelCoursesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingLevelCoursesFilters
	
	#region EntPolicyGradingLevelCoursesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicyGradingLevelCoursesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicyGradingLevelCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicyGradingLevelCoursesQuery : EntPolicyGradingLevelCoursesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelCoursesQuery class.
		/// </summary>
		public EntPolicyGradingLevelCoursesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicyGradingLevelCoursesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingLevelCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicyGradingLevelCoursesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicyGradingLevelCoursesQuery
		
	#region EntPolicySemHonorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPolicySemHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicySemHonorFilters : EntPolicySemHonorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicySemHonorFilters class.
		/// </summary>
		public EntPolicySemHonorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicySemHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicySemHonorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicySemHonorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicySemHonorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicySemHonorFilters
	
	#region EntPolicySemHonorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPolicySemHonorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPolicySemHonor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPolicySemHonorQuery : EntPolicySemHonorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPolicySemHonorQuery class.
		/// </summary>
		public EntPolicySemHonorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPolicySemHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPolicySemHonorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPolicySemHonorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPolicySemHonorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPolicySemHonorQuery
		
	#region FeeBusLineItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeBusLineItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeBusLineItemFilters : FeeBusLineItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeBusLineItemFilters class.
		/// </summary>
		public FeeBusLineItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeBusLineItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeBusLineItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeBusLineItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeBusLineItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeBusLineItemFilters
	
	#region FeeBusLineItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeBusLineItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeBusLineItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeBusLineItemQuery : FeeBusLineItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeBusLineItemQuery class.
		/// </summary>
		public FeeBusLineItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeBusLineItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeBusLineItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeBusLineItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeBusLineItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeBusLineItemQuery
		
	#region FeeCdeAllowanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeAllowance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeAllowanceFilters : FeeCdeAllowanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeAllowanceFilters class.
		/// </summary>
		public FeeCdeAllowanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeAllowanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeAllowanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeAllowanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeAllowanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeAllowanceFilters
	
	#region FeeCdeAllowanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeAllowanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeAllowance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeAllowanceQuery : FeeCdeAllowanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeAllowanceQuery class.
		/// </summary>
		public FeeCdeAllowanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeAllowanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeAllowanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeAllowanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeAllowanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeAllowanceQuery
		
	#region FeeCdeBankAccntFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeBankAccnt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeBankAccntFilters : FeeCdeBankAccntFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeBankAccntFilters class.
		/// </summary>
		public FeeCdeBankAccntFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBankAccntFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeBankAccntFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBankAccntFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeBankAccntFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeBankAccntFilters
	
	#region FeeCdeBankAccntQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeBankAccntParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeBankAccnt"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeBankAccntQuery : FeeCdeBankAccntParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeBankAccntQuery class.
		/// </summary>
		public FeeCdeBankAccntQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBankAccntQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeBankAccntQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeBankAccntQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeBankAccntQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeBankAccntQuery
		
	#region FeeCdeDiscTypeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeCdeDiscType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeDiscTypeFilters : FeeCdeDiscTypeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeFilters class.
		/// </summary>
		public FeeCdeDiscTypeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeDiscTypeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeDiscTypeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeDiscTypeFilters
	
	#region FeeCdeDiscTypeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeCdeDiscTypeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeCdeDiscType"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeCdeDiscTypeQuery : FeeCdeDiscTypeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeQuery class.
		/// </summary>
		public FeeCdeDiscTypeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeCdeDiscTypeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeCdeDiscTypeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeCdeDiscTypeQuery
		
	#region FeeAllowanceRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeAllowanceRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAllowanceRuleFilters : FeeAllowanceRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAllowanceRuleFilters class.
		/// </summary>
		public FeeAllowanceRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAllowanceRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAllowanceRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAllowanceRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAllowanceRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAllowanceRuleFilters
	
	#region FeeAllowanceRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeAllowanceRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeAllowanceRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAllowanceRuleQuery : FeeAllowanceRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAllowanceRuleQuery class.
		/// </summary>
		public FeeAllowanceRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAllowanceRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAllowanceRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAllowanceRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAllowanceRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAllowanceRuleQuery
		
	#region FeeAccomItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeAccomItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAccomItemFilters : FeeAccomItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAccomItemFilters class.
		/// </summary>
		public FeeAccomItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAccomItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAccomItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAccomItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAccomItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAccomItemFilters
	
	#region FeeAccomItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeAccomItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeAccomItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAccomItemQuery : FeeAccomItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAccomItemQuery class.
		/// </summary>
		public FeeAccomItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAccomItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAccomItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAccomItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAccomItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAccomItemQuery
		
	#region FeeAccntYearPeriodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeAccntYearPeriod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAccntYearPeriodFilters : FeeAccntYearPeriodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearPeriodFilters class.
		/// </summary>
		public FeeAccntYearPeriodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearPeriodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAccntYearPeriodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearPeriodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAccntYearPeriodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAccntYearPeriodFilters
	
	#region FeeAccntYearPeriodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeAccntYearPeriodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeAccntYearPeriod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAccntYearPeriodQuery : FeeAccntYearPeriodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearPeriodQuery class.
		/// </summary>
		public FeeAccntYearPeriodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearPeriodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAccntYearPeriodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearPeriodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAccntYearPeriodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAccntYearPeriodQuery
		
	#region EntPrecondMetadataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPrecondMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPrecondMetadataFilters : EntPrecondMetadataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPrecondMetadataFilters class.
		/// </summary>
		public EntPrecondMetadataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPrecondMetadataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMetadataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPrecondMetadataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPrecondMetadataFilters
	
	#region EntPrecondMetadataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPrecondMetadataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPrecondMetadata"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPrecondMetadataQuery : EntPrecondMetadataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPrecondMetadataQuery class.
		/// </summary>
		public EntPrecondMetadataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPrecondMetadataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMetadataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPrecondMetadataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPrecondMetadataQuery
		
	#region EntPrecondMdDataFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EntPrecondMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPrecondMdDataFilters : EntPrecondMdDataFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPrecondMdDataFilters class.
		/// </summary>
		public EntPrecondMdDataFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPrecondMdDataFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMdDataFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPrecondMdDataFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPrecondMdDataFilters
	
	#region EntPrecondMdDataQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EntPrecondMdDataParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EntPrecondMdData"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EntPrecondMdDataQuery : EntPrecondMdDataParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EntPrecondMdDataQuery class.
		/// </summary>
		public EntPrecondMdDataQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EntPrecondMdDataQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EntPrecondMdDataQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EntPrecondMdDataQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EntPrecondMdDataQuery
		
	#region ErpEmpFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ErpEmp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ErpEmpFilters : ErpEmpFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ErpEmpFilters class.
		/// </summary>
		public ErpEmpFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ErpEmpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ErpEmpFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ErpEmpFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ErpEmpFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ErpEmpFilters
	
	#region ErpEmpQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ErpEmpParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ErpEmp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ErpEmpQuery : ErpEmpParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ErpEmpQuery class.
		/// </summary>
		public ErpEmpQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ErpEmpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ErpEmpQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ErpEmpQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ErpEmpQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ErpEmpQuery
		
	#region FeeAccntYearFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="FeeAccntYear"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAccntYearFilters : FeeAccntYearFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearFilters class.
		/// </summary>
		public FeeAccntYearFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAccntYearFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAccntYearFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAccntYearFilters
	
	#region FeeAccntYearQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="FeeAccntYearParameterBuilder"/> class
	/// that is used exclusively with a <see cref="FeeAccntYear"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class FeeAccntYearQuery : FeeAccntYearParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearQuery class.
		/// </summary>
		public FeeAccntYearQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public FeeAccntYearQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the FeeAccntYearQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public FeeAccntYearQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion FeeAccntYearQuery
		
	#region EdStudRsrvRegTimeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudRsrvRegTime"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudRsrvRegTimeFilters : EdStudRsrvRegTimeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudRsrvRegTimeFilters class.
		/// </summary>
		public EdStudRsrvRegTimeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsrvRegTimeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudRsrvRegTimeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsrvRegTimeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudRsrvRegTimeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudRsrvRegTimeFilters
	
	#region EdStudRsrvRegTimeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudRsrvRegTimeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudRsrvRegTime"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudRsrvRegTimeQuery : EdStudRsrvRegTimeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudRsrvRegTimeQuery class.
		/// </summary>
		public EdStudRsrvRegTimeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsrvRegTimeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudRsrvRegTimeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsrvRegTimeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudRsrvRegTimeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudRsrvRegTimeQuery
		
	#region EdSemAgendaTimeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdSemAgendaTime"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemAgendaTimeFilters : EdSemAgendaTimeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaTimeFilters class.
		/// </summary>
		public EdSemAgendaTimeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaTimeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemAgendaTimeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaTimeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemAgendaTimeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemAgendaTimeFilters
	
	#region EdSemAgendaTimeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdSemAgendaTimeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdSemAgendaTime"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemAgendaTimeQuery : EdSemAgendaTimeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaTimeQuery class.
		/// </summary>
		public EdSemAgendaTimeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaTimeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemAgendaTimeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaTimeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemAgendaTimeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemAgendaTimeQuery
		
	#region EdSemesterOpenFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdSemesterOpen"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemesterOpenFilters : EdSemesterOpenFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenFilters class.
		/// </summary>
		public EdSemesterOpenFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemesterOpenFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemesterOpenFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemesterOpenFilters
	
	#region EdSemesterOpenQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdSemesterOpenParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdSemesterOpen"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemesterOpenQuery : EdSemesterOpenParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenQuery class.
		/// </summary>
		public EdSemesterOpenQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemesterOpenQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemesterOpenQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemesterOpenQuery
		
	#region EdSemesterAgendaFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdSemesterAgenda"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemesterAgendaFilters : EdSemesterAgendaFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaFilters class.
		/// </summary>
		public EdSemesterAgendaFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemesterAgendaFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemesterAgendaFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemesterAgendaFilters
	
	#region EdSemesterAgendaQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdSemesterAgendaParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdSemesterAgenda"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemesterAgendaQuery : EdSemesterAgendaParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaQuery class.
		/// </summary>
		public EdSemesterAgendaQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemesterAgendaQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemesterAgendaQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemesterAgendaQuery
		
	#region EdStudRsdncyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudRsdncy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudRsdncyFilters : EdStudRsdncyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudRsdncyFilters class.
		/// </summary>
		public EdStudRsdncyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsdncyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudRsdncyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsdncyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudRsdncyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudRsdncyFilters
	
	#region EdStudRsdncyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudRsdncyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudRsdncy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudRsdncyQuery : EdStudRsdncyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudRsdncyQuery class.
		/// </summary>
		public EdStudRsdncyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsdncyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudRsdncyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudRsdncyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudRsdncyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudRsdncyQuery
		
	#region EdStaffCoursePrefFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStaffCoursePref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStaffCoursePrefFilters : EdStaffCoursePrefFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStaffCoursePrefFilters class.
		/// </summary>
		public EdStaffCoursePrefFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStaffCoursePrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStaffCoursePrefFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStaffCoursePrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStaffCoursePrefFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStaffCoursePrefFilters
	
	#region EdStaffCoursePrefQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStaffCoursePrefParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStaffCoursePref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStaffCoursePrefQuery : EdStaffCoursePrefParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStaffCoursePrefQuery class.
		/// </summary>
		public EdStaffCoursePrefQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStaffCoursePrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStaffCoursePrefQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStaffCoursePrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStaffCoursePrefQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStaffCoursePrefQuery
		
	#region EdSemAgendaFormFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdSemAgendaForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemAgendaFormFilters : EdSemAgendaFormFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormFilters class.
		/// </summary>
		public EdSemAgendaFormFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemAgendaFormFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemAgendaFormFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemAgendaFormFilters
	
	#region EdSemAgendaFormQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdSemAgendaFormParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdSemAgendaForm"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemAgendaFormQuery : EdSemAgendaFormParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormQuery class.
		/// </summary>
		public EdSemAgendaFormQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemAgendaFormQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemAgendaFormQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemAgendaFormQuery
		
	#region EdSemAgendaDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdSemAgendaDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemAgendaDtlFilters : EdSemAgendaDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlFilters class.
		/// </summary>
		public EdSemAgendaDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemAgendaDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemAgendaDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemAgendaDtlFilters
	
	#region EdSemAgendaDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdSemAgendaDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdSemAgendaDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdSemAgendaDtlQuery : EdSemAgendaDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlQuery class.
		/// </summary>
		public EdSemAgendaDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdSemAgendaDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdSemAgendaDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdSemAgendaDtlQuery
		
	#region EdProjectFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdProject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdProjectFilters : EdProjectFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdProjectFilters class.
		/// </summary>
		public EdProjectFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdProjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdProjectFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdProjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdProjectFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdProjectFilters
	
	#region EdProjectQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdProjectParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdProject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdProjectQuery : EdProjectParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdProjectQuery class.
		/// </summary>
		public EdProjectQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdProjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdProjectQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdProjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdProjectQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdProjectQuery
		
	#region EdProjSupervisorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdProjSupervisor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdProjSupervisorFilters : EdProjSupervisorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdProjSupervisorFilters class.
		/// </summary>
		public EdProjSupervisorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdProjSupervisorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdProjSupervisorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdProjSupervisorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdProjSupervisorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdProjSupervisorFilters
	
	#region EdProjSupervisorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdProjSupervisorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdProjSupervisor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdProjSupervisorQuery : EdProjSupervisorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdProjSupervisorQuery class.
		/// </summary>
		public EdProjSupervisorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdProjSupervisorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdProjSupervisorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdProjSupervisorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdProjSupervisorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdProjSupervisorQuery
		
	#region EdResidencyStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdResidencyStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdResidencyStudFilters : EdResidencyStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdResidencyStudFilters class.
		/// </summary>
		public EdResidencyStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdResidencyStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdResidencyStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdResidencyStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdResidencyStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdResidencyStudFilters
	
	#region EdResidencyStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdResidencyStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdResidencyStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdResidencyStudQuery : EdResidencyStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdResidencyStudQuery class.
		/// </summary>
		public EdResidencyStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdResidencyStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdResidencyStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdResidencyStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdResidencyStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdResidencyStudQuery
		
	#region EdResultApproveFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdResultApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdResultApproveFilters : EdResultApproveFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdResultApproveFilters class.
		/// </summary>
		public EdResultApproveFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdResultApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdResultApproveFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdResultApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdResultApproveFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdResultApproveFilters
	
	#region EdResultApproveQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdResultApproveParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdResultApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdResultApproveQuery : EdResultApproveParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdResultApproveQuery class.
		/// </summary>
		public EdResultApproveQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdResultApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdResultApproveQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdResultApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdResultApproveQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdResultApproveQuery
		
	#region EdStaffDayPrefFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStaffDayPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStaffDayPrefFilters : EdStaffDayPrefFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStaffDayPrefFilters class.
		/// </summary>
		public EdStaffDayPrefFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStaffDayPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStaffDayPrefFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStaffDayPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStaffDayPrefFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStaffDayPrefFilters
	
	#region EdStaffDayPrefQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStaffDayPrefParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStaffDayPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStaffDayPrefQuery : EdStaffDayPrefParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStaffDayPrefQuery class.
		/// </summary>
		public EdStaffDayPrefQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStaffDayPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStaffDayPrefQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStaffDayPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStaffDayPrefQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStaffDayPrefQuery
		
	#region EdStdCrsExamFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStdCrsExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStdCrsExamFilters : EdStdCrsExamFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamFilters class.
		/// </summary>
		public EdStdCrsExamFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStdCrsExamFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStdCrsExamFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStdCrsExamFilters
	
	#region EdStdCrsExamQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStdCrsExamParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStdCrsExam"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStdCrsExamQuery : EdStdCrsExamParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamQuery class.
		/// </summary>
		public EdStdCrsExamQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStdCrsExamQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStdCrsExamQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStdCrsExamQuery
		
	#region EdStdCrsExamAssessFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStdCrsExamAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStdCrsExamAssessFilters : EdStdCrsExamAssessFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamAssessFilters class.
		/// </summary>
		public EdStdCrsExamAssessFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStdCrsExamAssessFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStdCrsExamAssessFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStdCrsExamAssessFilters
	
	#region EdStdCrsExamAssessQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStdCrsExamAssessParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStdCrsExamAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStdCrsExamAssessQuery : EdStdCrsExamAssessParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamAssessQuery class.
		/// </summary>
		public EdStdCrsExamAssessQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStdCrsExamAssessQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStdCrsExamAssessQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStdCrsExamAssessQuery
		
	#region EdStudActvtyRegFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudActvtyReg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudActvtyRegFilters : EdStudActvtyRegFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudActvtyRegFilters class.
		/// </summary>
		public EdStudActvtyRegFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudActvtyRegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudActvtyRegFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudActvtyRegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudActvtyRegFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudActvtyRegFilters
	
	#region EdStudActvtyRegQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudActvtyRegParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudActvtyReg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudActvtyRegQuery : EdStudActvtyRegParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudActvtyRegQuery class.
		/// </summary>
		public EdStudActvtyRegQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudActvtyRegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudActvtyRegQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudActvtyRegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudActvtyRegQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudActvtyRegQuery
		
	#region EdStudBranchPrefFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudBranchPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudBranchPrefFilters : EdStudBranchPrefFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudBranchPrefFilters class.
		/// </summary>
		public EdStudBranchPrefFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudBranchPrefFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudBranchPrefFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudBranchPrefFilters
	
	#region EdStudBranchPrefQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudBranchPrefParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudBranchPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudBranchPrefQuery : EdStudBranchPrefParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudBranchPrefQuery class.
		/// </summary>
		public EdStudBranchPrefQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudBranchPrefQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudBranchPrefQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudBranchPrefQuery
		
	#region EdStudBranchTempFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudBranchTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudBranchTempFilters : EdStudBranchTempFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudBranchTempFilters class.
		/// </summary>
		public EdStudBranchTempFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudBranchTempFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudBranchTempFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudBranchTempFilters
	
	#region EdStudBranchTempQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudBranchTempParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudBranchTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudBranchTempQuery : EdStudBranchTempParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudBranchTempQuery class.
		/// </summary>
		public EdStudBranchTempQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudBranchTempQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudBranchTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudBranchTempQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudBranchTempQuery
		
	#region EdStudCheatFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCheat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCheatFilters : EdStudCheatFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCheatFilters class.
		/// </summary>
		public EdStudCheatFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCheatFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCheatFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCheatFilters
	
	#region EdStudCheatQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCheatParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCheat"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCheatQuery : EdStudCheatParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCheatQuery class.
		/// </summary>
		public EdStudCheatQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCheatQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCheatQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCheatQuery
		
	#region EdStudActivityFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudActivity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudActivityFilters : EdStudActivityFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudActivityFilters class.
		/// </summary>
		public EdStudActivityFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudActivityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudActivityFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudActivityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudActivityFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudActivityFilters
	
	#region EdStudActivityQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudActivityParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudActivity"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudActivityQuery : EdStudActivityParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudActivityQuery class.
		/// </summary>
		public EdStudActivityQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudActivityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudActivityQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudActivityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudActivityQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudActivityQuery
		
	#region EdStudAcadmicAdvFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudAcadmicAdv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAcadmicAdvFilters : EdStudAcadmicAdvFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAcadmicAdvFilters class.
		/// </summary>
		public EdStudAcadmicAdvFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadmicAdvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAcadmicAdvFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadmicAdvFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAcadmicAdvFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAcadmicAdvFilters
	
	#region EdStudAcadmicAdvQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudAcadmicAdvParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudAcadmicAdv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAcadmicAdvQuery : EdStudAcadmicAdvParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAcadmicAdvQuery class.
		/// </summary>
		public EdStudAcadmicAdvQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadmicAdvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAcadmicAdvQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadmicAdvQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAcadmicAdvQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAcadmicAdvQuery
		
	#region EdStdExamSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStdExamSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStdExamSemesterFilters : EdStdExamSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterFilters class.
		/// </summary>
		public EdStdExamSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStdExamSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStdExamSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStdExamSemesterFilters
	
	#region EdStdExamSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStdExamSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStdExamSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStdExamSemesterQuery : EdStdExamSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterQuery class.
		/// </summary>
		public EdStdExamSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStdExamSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStdExamSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStdExamSemesterQuery
		
	#region EdStudAbsFwFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudAbsFw"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAbsFwFilters : EdStudAbsFwFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAbsFwFilters class.
		/// </summary>
		public EdStudAbsFwFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsFwFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAbsFwFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsFwFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAbsFwFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAbsFwFilters
	
	#region EdStudAbsFwQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudAbsFwParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudAbsFw"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAbsFwQuery : EdStudAbsFwParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAbsFwQuery class.
		/// </summary>
		public EdStudAbsFwQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsFwQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAbsFwQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsFwQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAbsFwQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAbsFwQuery
		
	#region EdStudAbsenceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAbsenceFilters : EdStudAbsenceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceFilters class.
		/// </summary>
		public EdStudAbsenceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAbsenceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAbsenceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAbsenceFilters
	
	#region EdStudAbsenceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudAbsenceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAbsenceQuery : EdStudAbsenceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceQuery class.
		/// </summary>
		public EdStudAbsenceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAbsenceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAbsenceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAbsenceQuery
		
	#region EdStudAcadWarnFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudAcadWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAcadWarnFilters : EdStudAcadWarnFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAcadWarnFilters class.
		/// </summary>
		public EdStudAcadWarnFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAcadWarnFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadWarnFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAcadWarnFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAcadWarnFilters
	
	#region EdStudAcadWarnQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudAcadWarnParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudAcadWarn"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudAcadWarnQuery : EdStudAcadWarnParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudAcadWarnQuery class.
		/// </summary>
		public EdStudAcadWarnQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudAcadWarnQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudAcadWarnQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudAcadWarnQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudAcadWarnQuery
		
	#region EdProjStudFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdProjStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdProjStudFilters : EdProjStudFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdProjStudFilters class.
		/// </summary>
		public EdProjStudFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdProjStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdProjStudFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdProjStudFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdProjStudFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdProjStudFilters
	
	#region EdProjStudQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdProjStudParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdProjStud"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdProjStudQuery : EdProjStudParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdProjStudQuery class.
		/// </summary>
		public EdProjStudQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdProjStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdProjStudQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdProjStudQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdProjStudQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdProjStudQuery
		
	#region EdPrintReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdPrintReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdPrintReqFilters : EdPrintReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdPrintReqFilters class.
		/// </summary>
		public EdPrintReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdPrintReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdPrintReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdPrintReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdPrintReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdPrintReqFilters
	
	#region EdPrintReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdPrintReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdPrintReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdPrintReqQuery : EdPrintReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdPrintReqQuery class.
		/// </summary>
		public EdPrintReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdPrintReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdPrintReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdPrintReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdPrintReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdPrintReqQuery
		
	#region EdCourseOutcomesTopicsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseOutcomesTopics"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseOutcomesTopicsFilters : EdCourseOutcomesTopicsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesTopicsFilters class.
		/// </summary>
		public EdCourseOutcomesTopicsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesTopicsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseOutcomesTopicsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesTopicsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseOutcomesTopicsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseOutcomesTopicsFilters
	
	#region EdCourseOutcomesTopicsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseOutcomesTopicsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseOutcomesTopics"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseOutcomesTopicsQuery : EdCourseOutcomesTopicsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesTopicsQuery class.
		/// </summary>
		public EdCourseOutcomesTopicsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesTopicsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseOutcomesTopicsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesTopicsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseOutcomesTopicsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseOutcomesTopicsQuery
		
	#region EdCourseRltdFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseRltd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseRltdFilters : EdCourseRltdFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseRltdFilters class.
		/// </summary>
		public EdCourseRltdFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseRltdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseRltdFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseRltdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseRltdFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseRltdFilters
	
	#region EdCourseRltdQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseRltdParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseRltd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseRltdQuery : EdCourseRltdParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseRltdQuery class.
		/// </summary>
		public EdCourseRltdQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseRltdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseRltdQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseRltdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseRltdQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseRltdQuery
		
	#region EdCourseTchngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseTchng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseTchngFilters : EdCourseTchngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseTchngFilters class.
		/// </summary>
		public EdCourseTchngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTchngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseTchngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTchngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseTchngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseTchngFilters
	
	#region EdCourseTchngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseTchngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseTchng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseTchngQuery : EdCourseTchngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseTchngQuery class.
		/// </summary>
		public EdCourseTchngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTchngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseTchngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTchngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseTchngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseTchngQuery
		
	#region EdCourseTopicFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseTopicFilters : EdCourseTopicFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseTopicFilters class.
		/// </summary>
		public EdCourseTopicFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseTopicFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseTopicFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseTopicFilters
	
	#region EdCourseTopicQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseTopicParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseTopicQuery : EdCourseTopicParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseTopicQuery class.
		/// </summary>
		public EdCourseTopicQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseTopicQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseTopicQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseTopicQuery
		
	#region EdCourseOutcomesDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseOutcomesDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseOutcomesDtlFilters : EdCourseOutcomesDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlFilters class.
		/// </summary>
		public EdCourseOutcomesDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseOutcomesDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseOutcomesDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseOutcomesDtlFilters
	
	#region EdCourseOutcomesDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseOutcomesDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseOutcomesDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseOutcomesDtlQuery : EdCourseOutcomesDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlQuery class.
		/// </summary>
		public EdCourseOutcomesDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseOutcomesDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseOutcomesDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseOutcomesDtlQuery
		
	#region EdCourseOrientFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseOrient"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseOrientFilters : EdCourseOrientFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseOrientFilters class.
		/// </summary>
		public EdCourseOrientFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOrientFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseOrientFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOrientFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseOrientFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseOrientFilters
	
	#region EdCourseOrientQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseOrientParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseOrient"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseOrientQuery : EdCourseOrientParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseOrientQuery class.
		/// </summary>
		public EdCourseOrientQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOrientQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseOrientQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseOrientQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseOrientQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseOrientQuery
		
	#region EdCourseEquivFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseEquiv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseEquivFilters : EdCourseEquivFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseEquivFilters class.
		/// </summary>
		public EdCourseEquivFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseEquivFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseEquivFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseEquivFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseEquivFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseEquivFilters
	
	#region EdCourseEquivQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseEquivParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseEquiv"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseEquivQuery : EdCourseEquivParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseEquivQuery class.
		/// </summary>
		public EdCourseEquivQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseEquivQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseEquivQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseEquivQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseEquivQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseEquivQuery
		
	#region EdCourseExpDtlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseExpDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseExpDtlFilters : EdCourseExpDtlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlFilters class.
		/// </summary>
		public EdCourseExpDtlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseExpDtlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseExpDtlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseExpDtlFilters
	
	#region EdCourseExpDtlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseExpDtlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseExpDtl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseExpDtlQuery : EdCourseExpDtlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlQuery class.
		/// </summary>
		public EdCourseExpDtlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseExpDtlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseExpDtlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseExpDtlQuery
		
	#region EdCourseInfoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseInfoFilters : EdCourseInfoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseInfoFilters class.
		/// </summary>
		public EdCourseInfoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseInfoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseInfoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseInfoFilters
	
	#region EdCourseInfoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseInfoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseInfoQuery : EdCourseInfoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseInfoQuery class.
		/// </summary>
		public EdCourseInfoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseInfoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseInfoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseInfoQuery
		
	#region EdCourseInstanceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCourseInstance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseInstanceFilters : EdCourseInstanceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseInstanceFilters class.
		/// </summary>
		public EdCourseInstanceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInstanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseInstanceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInstanceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseInstanceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseInstanceFilters
	
	#region EdCourseInstanceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCourseInstanceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCourseInstance"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCourseInstanceQuery : EdCourseInstanceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCourseInstanceQuery class.
		/// </summary>
		public EdCourseInstanceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInstanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCourseInstanceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCourseInstanceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCourseInstanceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCourseInstanceQuery
		
	#region EdCrsFreeRstrctdFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdCrsFreeRstrctd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCrsFreeRstrctdFilters : EdCrsFreeRstrctdFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCrsFreeRstrctdFilters class.
		/// </summary>
		public EdCrsFreeRstrctdFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCrsFreeRstrctdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCrsFreeRstrctdFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCrsFreeRstrctdFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCrsFreeRstrctdFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCrsFreeRstrctdFilters
	
	#region EdCrsFreeRstrctdQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdCrsFreeRstrctdParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdCrsFreeRstrctd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdCrsFreeRstrctdQuery : EdCrsFreeRstrctdParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdCrsFreeRstrctdQuery class.
		/// </summary>
		public EdCrsFreeRstrctdQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdCrsFreeRstrctdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdCrsFreeRstrctdQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdCrsFreeRstrctdQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdCrsFreeRstrctdQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdCrsFreeRstrctdQuery
		
	#region EdEmployeeQualFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdEmployeeQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdEmployeeQualFilters : EdEmployeeQualFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdEmployeeQualFilters class.
		/// </summary>
		public EdEmployeeQualFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdEmployeeQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdEmployeeQualFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdEmployeeQualFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdEmployeeQualFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdEmployeeQualFilters
	
	#region EdEmployeeQualQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdEmployeeQualParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdEmployeeQual"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdEmployeeQualQuery : EdEmployeeQualParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdEmployeeQualQuery class.
		/// </summary>
		public EdEmployeeQualQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdEmployeeQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdEmployeeQualQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdEmployeeQualQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdEmployeeQualQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdEmployeeQualQuery
		
	#region EdExamCrsOrderFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdExamCrsOrder"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamCrsOrderFilters : EdExamCrsOrderFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamCrsOrderFilters class.
		/// </summary>
		public EdExamCrsOrderFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamCrsOrderFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamCrsOrderFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamCrsOrderFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamCrsOrderFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamCrsOrderFilters
	
	#region EdExamCrsOrderQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdExamCrsOrderParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdExamCrsOrder"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamCrsOrderQuery : EdExamCrsOrderParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamCrsOrderQuery class.
		/// </summary>
		public EdExamCrsOrderQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamCrsOrderQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamCrsOrderQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamCrsOrderQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamCrsOrderQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamCrsOrderQuery
		
	#region EdOfferingFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdOffering"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOfferingFilters : EdOfferingFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOfferingFilters class.
		/// </summary>
		public EdOfferingFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOfferingFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOfferingFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOfferingFilters
	
	#region EdOfferingQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdOfferingParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdOffering"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOfferingQuery : EdOfferingParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOfferingQuery class.
		/// </summary>
		public EdOfferingQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOfferingQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOfferingQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOfferingQuery
		
	#region EdOfferingCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdOfferingCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOfferingCourseFilters : EdOfferingCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseFilters class.
		/// </summary>
		public EdOfferingCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOfferingCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOfferingCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOfferingCourseFilters
	
	#region EdOfferingCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdOfferingCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdOfferingCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOfferingCourseQuery : EdOfferingCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseQuery class.
		/// </summary>
		public EdOfferingCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOfferingCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOfferingCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOfferingCourseQuery
		
	#region EdOutcomeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdOutcome"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOutcomeFilters : EdOutcomeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOutcomeFilters class.
		/// </summary>
		public EdOutcomeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOutcomeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOutcomeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOutcomeFilters
	
	#region EdOutcomeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdOutcomeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdOutcome"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOutcomeQuery : EdOutcomeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOutcomeQuery class.
		/// </summary>
		public EdOutcomeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOutcomeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOutcomeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOutcomeQuery
		
	#region EdOutcomesTopicsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdOutcomesTopics"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOutcomesTopicsFilters : EdOutcomesTopicsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOutcomesTopicsFilters class.
		/// </summary>
		public EdOutcomesTopicsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomesTopicsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOutcomesTopicsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomesTopicsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOutcomesTopicsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOutcomesTopicsFilters
	
	#region EdOutcomesTopicsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdOutcomesTopicsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdOutcomesTopics"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdOutcomesTopicsQuery : EdOutcomesTopicsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdOutcomesTopicsQuery class.
		/// </summary>
		public EdOutcomesTopicsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomesTopicsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdOutcomesTopicsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdOutcomesTopicsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdOutcomesTopicsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdOutcomesTopicsQuery
		
	#region EdInttransRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdInttransRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdInttransRuleFilters : EdInttransRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdInttransRuleFilters class.
		/// </summary>
		public EdInttransRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdInttransRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdInttransRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdInttransRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdInttransRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdInttransRuleFilters
	
	#region EdInttransRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdInttransRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdInttransRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdInttransRuleQuery : EdInttransRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdInttransRuleQuery class.
		/// </summary>
		public EdInttransRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdInttransRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdInttransRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdInttransRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdInttransRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdInttransRuleQuery
		
	#region EdGuardFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdGuard"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdGuardFilters : EdGuardFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdGuardFilters class.
		/// </summary>
		public EdGuardFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdGuardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdGuardFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdGuardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdGuardFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdGuardFilters
	
	#region EdGuardQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdGuardParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdGuard"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdGuardQuery : EdGuardParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdGuardQuery class.
		/// </summary>
		public EdGuardQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdGuardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdGuardQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdGuardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdGuardQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdGuardQuery
		
	#region EdExamSchdlFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdExamSchdl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamSchdlFilters : EdExamSchdlFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamSchdlFilters class.
		/// </summary>
		public EdExamSchdlFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamSchdlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamSchdlFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamSchdlFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamSchdlFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamSchdlFilters
	
	#region EdExamSchdlQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdExamSchdlParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdExamSchdl"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamSchdlQuery : EdExamSchdlParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamSchdlQuery class.
		/// </summary>
		public EdExamSchdlQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamSchdlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamSchdlQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamSchdlQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamSchdlQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamSchdlQuery
		
	#region EdExamStudAbsenceFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdExamStudAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamStudAbsenceFilters : EdExamStudAbsenceFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamStudAbsenceFilters class.
		/// </summary>
		public EdExamStudAbsenceFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamStudAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamStudAbsenceFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamStudAbsenceFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamStudAbsenceFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamStudAbsenceFilters
	
	#region EdExamStudAbsenceQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdExamStudAbsenceParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdExamStudAbsence"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamStudAbsenceQuery : EdExamStudAbsenceParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamStudAbsenceQuery class.
		/// </summary>
		public EdExamStudAbsenceQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamStudAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamStudAbsenceQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamStudAbsenceQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamStudAbsenceQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamStudAbsenceQuery
		
	#region EdExamSuprvsorFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdExamSuprvsor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamSuprvsorFilters : EdExamSuprvsorFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamSuprvsorFilters class.
		/// </summary>
		public EdExamSuprvsorFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamSuprvsorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamSuprvsorFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamSuprvsorFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamSuprvsorFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamSuprvsorFilters
	
	#region EdExamSuprvsorQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdExamSuprvsorParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdExamSuprvsor"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdExamSuprvsorQuery : EdExamSuprvsorParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdExamSuprvsorQuery class.
		/// </summary>
		public EdExamSuprvsorQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdExamSuprvsorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdExamSuprvsorQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdExamSuprvsorQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdExamSuprvsorQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdExamSuprvsorQuery
		
	#region EdGraduationAwardFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdGraduationAward"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdGraduationAwardFilters : EdGraduationAwardFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardFilters class.
		/// </summary>
		public EdGraduationAwardFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdGraduationAwardFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdGraduationAwardFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdGraduationAwardFilters
	
	#region EdGraduationAwardQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdGraduationAwardParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdGraduationAward"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdGraduationAwardQuery : EdGraduationAwardParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardQuery class.
		/// </summary>
		public EdGraduationAwardQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdGraduationAwardQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdGraduationAwardQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdGraduationAwardQuery
		
	#region EdStudCheatExecFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCheatExec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCheatExecFilters : EdStudCheatExecFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCheatExecFilters class.
		/// </summary>
		public EdStudCheatExecFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatExecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCheatExecFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatExecFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCheatExecFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCheatExecFilters
	
	#region EdStudCheatExecQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCheatExecParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCheatExec"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCheatExecQuery : EdStudCheatExecParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCheatExecQuery class.
		/// </summary>
		public EdStudCheatExecQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatExecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCheatExecQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCheatExecQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCheatExecQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCheatExecQuery
		
	#region EdStudClrncReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudClrncReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudClrncReqFilters : EdStudClrncReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqFilters class.
		/// </summary>
		public EdStudClrncReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudClrncReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudClrncReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudClrncReqFilters
	
	#region EdStudClrncReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudClrncReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudClrncReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudClrncReqQuery : EdStudClrncReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqQuery class.
		/// </summary>
		public EdStudClrncReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudClrncReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudClrncReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudClrncReqQuery
		
	#region EdStudIntTrnsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrns"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsFilters : EdStudIntTrnsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsFilters class.
		/// </summary>
		public EdStudIntTrnsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsFilters
	
	#region EdStudIntTrnsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudIntTrnsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrns"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsQuery : EdStudIntTrnsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsQuery class.
		/// </summary>
		public EdStudIntTrnsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsQuery
		
	#region EdStudClrncItemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudClrncItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudClrncItemFilters : EdStudClrncItemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudClrncItemFilters class.
		/// </summary>
		public EdStudClrncItemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudClrncItemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncItemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudClrncItemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudClrncItemFilters
	
	#region EdStudClrncItemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudClrncItemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudClrncItem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudClrncItemQuery : EdStudClrncItemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudClrncItemQuery class.
		/// </summary>
		public EdStudClrncItemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudClrncItemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudClrncItemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudClrncItemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudClrncItemQuery
		
	#region EdStudIntTrnsCourseFromFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsCourseFrom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsCourseFromFilters : EdStudIntTrnsCourseFromFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromFilters class.
		/// </summary>
		public EdStudIntTrnsCourseFromFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsCourseFromFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsCourseFromFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsCourseFromFilters
	
	#region EdStudIntTrnsCourseFromQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudIntTrnsCourseFromParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsCourseFrom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsCourseFromQuery : EdStudIntTrnsCourseFromParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromQuery class.
		/// </summary>
		public EdStudIntTrnsCourseFromQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsCourseFromQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsCourseFromQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsCourseFromQuery
		
	#region EdStudIntTrnsCourseToFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsCourseTo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsCourseToFilters : EdStudIntTrnsCourseToFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseToFilters class.
		/// </summary>
		public EdStudIntTrnsCourseToFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseToFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsCourseToFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseToFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsCourseToFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsCourseToFilters
	
	#region EdStudIntTrnsCourseToQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudIntTrnsCourseToParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsCourseTo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsCourseToQuery : EdStudIntTrnsCourseToParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseToQuery class.
		/// </summary>
		public EdStudIntTrnsCourseToQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseToQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsCourseToQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseToQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsCourseToQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsCourseToQuery
		
	#region EdStudIntTrnsStateToFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsStateTo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsStateToFilters : EdStudIntTrnsStateToFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateToFilters class.
		/// </summary>
		public EdStudIntTrnsStateToFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateToFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsStateToFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateToFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsStateToFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsStateToFilters
	
	#region EdStudIntTrnsStateToQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudIntTrnsStateToParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsStateTo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsStateToQuery : EdStudIntTrnsStateToParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateToQuery class.
		/// </summary>
		public EdStudIntTrnsStateToQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateToQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsStateToQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateToQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsStateToQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsStateToQuery
		
	#region EdStudIntTrnsStateFromFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsStateFrom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsStateFromFilters : EdStudIntTrnsStateFromFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateFromFilters class.
		/// </summary>
		public EdStudIntTrnsStateFromFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateFromFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsStateFromFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateFromFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsStateFromFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsStateFromFilters
	
	#region EdStudIntTrnsStateFromQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudIntTrnsStateFromParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudIntTrnsStateFrom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTrnsStateFromQuery : EdStudIntTrnsStateFromParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateFromQuery class.
		/// </summary>
		public EdStudIntTrnsStateFromQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateFromQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTrnsStateFromQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsStateFromQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTrnsStateFromQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTrnsStateFromQuery
		
	#region EdStudGuardFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudGuard"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGuardFilters : EdStudGuardFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGuardFilters class.
		/// </summary>
		public EdStudGuardFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGuardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGuardFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGuardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGuardFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGuardFilters
	
	#region EdStudGuardQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudGuardParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudGuard"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGuardQuery : EdStudGuardParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGuardQuery class.
		/// </summary>
		public EdStudGuardQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGuardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGuardQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGuardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGuardQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGuardQuery
		
	#region EdStudGrantDegreeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudGrantDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGrantDegreeFilters : EdStudGrantDegreeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGrantDegreeFilters class.
		/// </summary>
		public EdStudGrantDegreeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGrantDegreeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantDegreeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGrantDegreeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGrantDegreeFilters
	
	#region EdStudGrantDegreeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudGrantDegreeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudGrantDegree"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGrantDegreeQuery : EdStudGrantDegreeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGrantDegreeQuery class.
		/// </summary>
		public EdStudGrantDegreeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGrantDegreeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantDegreeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGrantDegreeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGrantDegreeQuery
		
	#region EdStudGrantTempFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudGrantTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGrantTempFilters : EdStudGrantTempFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGrantTempFilters class.
		/// </summary>
		public EdStudGrantTempFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGrantTempFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGrantTempFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGrantTempFilters
	
	#region EdStudGrantTempQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudGrantTempParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudGrantTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGrantTempQuery : EdStudGrantTempParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGrantTempQuery class.
		/// </summary>
		public EdStudGrantTempQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGrantTempQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGrantTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGrantTempQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGrantTempQuery
		
	#region EdStudGroupFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGroupFilters : EdStudGroupFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGroupFilters class.
		/// </summary>
		public EdStudGroupFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGroupFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGroupFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGroupFilters
	
	#region EdStudGroupQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudGroupParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGroupQuery : EdStudGroupParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGroupQuery class.
		/// </summary>
		public EdStudGroupQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGroupQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGroupQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGroupQuery
		
	#region EdStudGroupPreFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudGroupPre"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGroupPreFilters : EdStudGroupPreFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGroupPreFilters class.
		/// </summary>
		public EdStudGroupPreFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupPreFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGroupPreFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupPreFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGroupPreFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGroupPreFilters
	
	#region EdStudGroupPreQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudGroupPreParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudGroupPre"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGroupPreQuery : EdStudGroupPreParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGroupPreQuery class.
		/// </summary>
		public EdStudGroupPreQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupPreQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGroupPreQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGroupPreQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGroupPreQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGroupPreQuery
		
	#region EdStudIntTransPrefFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudIntTransPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTransPrefFilters : EdStudIntTransPrefFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTransPrefFilters class.
		/// </summary>
		public EdStudIntTransPrefFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTransPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTransPrefFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTransPrefFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTransPrefFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTransPrefFilters
	
	#region EdStudIntTransPrefQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudIntTransPrefParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudIntTransPref"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudIntTransPrefQuery : EdStudIntTransPrefParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudIntTransPrefQuery class.
		/// </summary>
		public EdStudIntTransPrefQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTransPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudIntTransPrefQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudIntTransPrefQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudIntTransPrefQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudIntTransPrefQuery
		
	#region EdStudInttransTempFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudInttransTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudInttransTempFilters : EdStudInttransTempFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudInttransTempFilters class.
		/// </summary>
		public EdStudInttransTempFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudInttransTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudInttransTempFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudInttransTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudInttransTempFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudInttransTempFilters
	
	#region EdStudInttransTempQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudInttransTempParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudInttransTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudInttransTempQuery : EdStudInttransTempParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudInttransTempQuery class.
		/// </summary>
		public EdStudInttransTempQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudInttransTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudInttransTempQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudInttransTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudInttransTempQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudInttransTempQuery
		
	#region EdStudLangFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudLang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudLangFilters : EdStudLangFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudLangFilters class.
		/// </summary>
		public EdStudLangFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudLangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudLangFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudLangFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudLangFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudLangFilters
	
	#region EdStudLangQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudLangParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudLang"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudLangQuery : EdStudLangParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudLangQuery class.
		/// </summary>
		public EdStudLangQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudLangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudLangQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudLangQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudLangQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudLangQuery
		
	#region EdStudPnltyCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudPnltyCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudPnltyCourseFilters : EdStudPnltyCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudPnltyCourseFilters class.
		/// </summary>
		public EdStudPnltyCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudPnltyCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudPnltyCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudPnltyCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudPnltyCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudPnltyCourseFilters
	
	#region EdStudPnltyCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudPnltyCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudPnltyCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudPnltyCourseQuery : EdStudPnltyCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudPnltyCourseQuery class.
		/// </summary>
		public EdStudPnltyCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudPnltyCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudPnltyCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudPnltyCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudPnltyCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudPnltyCourseQuery
		
	#region EdStudProblemFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudProblem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudProblemFilters : EdStudProblemFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudProblemFilters class.
		/// </summary>
		public EdStudProblemFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudProblemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudProblemFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudProblemFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudProblemFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudProblemFilters
	
	#region EdStudProblemQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudProblemParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudProblem"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudProblemQuery : EdStudProblemParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudProblemQuery class.
		/// </summary>
		public EdStudProblemQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudProblemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudProblemQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudProblemQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudProblemQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudProblemQuery
		
	#region EdStudQualGroupFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudQualGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudQualGroupFilters : EdStudQualGroupFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudQualGroupFilters class.
		/// </summary>
		public EdStudQualGroupFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudQualGroupFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualGroupFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudQualGroupFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudQualGroupFilters
	
	#region EdStudQualGroupQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudQualGroupParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudQualGroup"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudQualGroupQuery : EdStudQualGroupParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudQualGroupQuery class.
		/// </summary>
		public EdStudQualGroupQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudQualGroupQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualGroupQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudQualGroupQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudQualGroupQuery
		
	#region EdStudQualSubjectFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudQualSubject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudQualSubjectFilters : EdStudQualSubjectFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudQualSubjectFilters class.
		/// </summary>
		public EdStudQualSubjectFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualSubjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudQualSubjectFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualSubjectFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudQualSubjectFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudQualSubjectFilters
	
	#region EdStudQualSubjectQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudQualSubjectParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudQualSubject"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudQualSubjectQuery : EdStudQualSubjectParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudQualSubjectQuery class.
		/// </summary>
		public EdStudQualSubjectQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualSubjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudQualSubjectQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudQualSubjectQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudQualSubjectQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudQualSubjectQuery
		
	#region EdStudNoteFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudNote"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudNoteFilters : EdStudNoteFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudNoteFilters class.
		/// </summary>
		public EdStudNoteFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudNoteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudNoteFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudNoteFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudNoteFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudNoteFilters
	
	#region EdStudNoteQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudNoteParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudNote"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudNoteQuery : EdStudNoteParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudNoteQuery class.
		/// </summary>
		public EdStudNoteQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudNoteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudNoteQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudNoteQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudNoteQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudNoteQuery
		
	#region EdStudMltryCrsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudMltryCrs"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMltryCrsFilters : EdStudMltryCrsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsFilters class.
		/// </summary>
		public EdStudMltryCrsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMltryCrsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMltryCrsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMltryCrsFilters
	
	#region EdStudMltryCrsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudMltryCrsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudMltryCrs"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMltryCrsQuery : EdStudMltryCrsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsQuery class.
		/// </summary>
		public EdStudMltryCrsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMltryCrsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMltryCrsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMltryCrsQuery
		
	#region EdStudLatenessFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudLateness"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudLatenessFilters : EdStudLatenessFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudLatenessFilters class.
		/// </summary>
		public EdStudLatenessFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudLatenessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudLatenessFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudLatenessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudLatenessFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudLatenessFilters
	
	#region EdStudLatenessQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudLatenessParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudLateness"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudLatenessQuery : EdStudLatenessParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudLatenessQuery class.
		/// </summary>
		public EdStudLatenessQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudLatenessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudLatenessQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudLatenessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudLatenessQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudLatenessQuery
		
	#region EdStudMilitaryInfoFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudMilitaryInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMilitaryInfoFilters : EdStudMilitaryInfoFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryInfoFilters class.
		/// </summary>
		public EdStudMilitaryInfoFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMilitaryInfoFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryInfoFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMilitaryInfoFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMilitaryInfoFilters
	
	#region EdStudMilitaryInfoQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudMilitaryInfoParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudMilitaryInfo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMilitaryInfoQuery : EdStudMilitaryInfoParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryInfoQuery class.
		/// </summary>
		public EdStudMilitaryInfoQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMilitaryInfoQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryInfoQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMilitaryInfoQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMilitaryInfoQuery
		
	#region EdStudMilitaryStateFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudMilitaryState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMilitaryStateFilters : EdStudMilitaryStateFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateFilters class.
		/// </summary>
		public EdStudMilitaryStateFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMilitaryStateFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMilitaryStateFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMilitaryStateFilters
	
	#region EdStudMilitaryStateQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudMilitaryStateParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudMilitaryState"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMilitaryStateQuery : EdStudMilitaryStateParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateQuery class.
		/// </summary>
		public EdStudMilitaryStateQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMilitaryStateQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMilitaryStateQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMilitaryStateQuery
		
	#region EdStudMissionFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudMission"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMissionFilters : EdStudMissionFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMissionFilters class.
		/// </summary>
		public EdStudMissionFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMissionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMissionFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMissionFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMissionFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMissionFilters
	
	#region EdStudMissionQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudMissionParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudMission"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudMissionQuery : EdStudMissionParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudMissionQuery class.
		/// </summary>
		public EdStudMissionQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudMissionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudMissionQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudMissionQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudMissionQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudMissionQuery
		
	#region EdStudGraduationAwardFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudGraduationAward"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGraduationAwardFilters : EdStudGraduationAwardFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGraduationAwardFilters class.
		/// </summary>
		public EdStudGraduationAwardFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGraduationAwardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGraduationAwardFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGraduationAwardFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGraduationAwardFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGraduationAwardFilters
	
	#region EdStudGraduationAwardQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudGraduationAwardParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudGraduationAward"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudGraduationAwardQuery : EdStudGraduationAwardParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudGraduationAwardQuery class.
		/// </summary>
		public EdStudGraduationAwardQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudGraduationAwardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudGraduationAwardQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudGraduationAwardQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudGraduationAwardQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudGraduationAwardQuery
		
	#region EdStudFacultyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudFacultyFilters : EdStudFacultyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudFacultyFilters class.
		/// </summary>
		public EdStudFacultyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudFacultyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudFacultyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudFacultyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudFacultyFilters
	
	#region EdStudFacultyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudFacultyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudFaculty"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudFacultyQuery : EdStudFacultyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudFacultyQuery class.
		/// </summary>
		public EdStudFacultyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudFacultyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudFacultyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudFacultyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudFacultyQuery
		
	#region EdStudCourseRegFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseReg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegFilters : EdStudCourseRegFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegFilters class.
		/// </summary>
		public EdStudCourseRegFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegFilters
	
	#region EdStudCourseRegQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseReg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegQuery : EdStudCourseRegParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegQuery class.
		/// </summary>
		public EdStudCourseRegQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegQuery
		
	#region EdStudExmptReqAttchFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudExmptReqAttch"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptReqAttchFilters : EdStudExmptReqAttchFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqAttchFilters class.
		/// </summary>
		public EdStudExmptReqAttchFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqAttchFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptReqAttchFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqAttchFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptReqAttchFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptReqAttchFilters
	
	#region EdStudExmptReqAttchQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudExmptReqAttchParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudExmptReqAttch"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptReqAttchQuery : EdStudExmptReqAttchParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqAttchQuery class.
		/// </summary>
		public EdStudExmptReqAttchQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqAttchQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptReqAttchQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqAttchQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptReqAttchQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptReqAttchQuery
		
	#region EdStudCourseRegAddFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegAdd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegAddFilters : EdStudCourseRegAddFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddFilters class.
		/// </summary>
		public EdStudCourseRegAddFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegAddFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegAddFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegAddFilters
	
	#region EdStudCourseRegAddQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegAddParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegAdd"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegAddQuery : EdStudCourseRegAddParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddQuery class.
		/// </summary>
		public EdStudCourseRegAddQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegAddQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegAddQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegAddQuery
		
	#region EdStudCourseRegAssessFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegAssessFilters : EdStudCourseRegAssessFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessFilters class.
		/// </summary>
		public EdStudCourseRegAssessFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegAssessFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegAssessFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegAssessFilters
	
	#region EdStudCourseRegAssessQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegAssessParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegAssess"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegAssessQuery : EdStudCourseRegAssessParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessQuery class.
		/// </summary>
		public EdStudCourseRegAssessQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegAssessQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegAssessQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegAssessQuery
		
	#region EdStudCourseRegPolcyFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegPolcy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegPolcyFilters : EdStudCourseRegPolcyFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPolcyFilters class.
		/// </summary>
		public EdStudCourseRegPolcyFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPolcyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegPolcyFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPolcyFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegPolcyFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegPolcyFilters
	
	#region EdStudCourseRegPolcyQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegPolcyParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegPolcy"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegPolcyQuery : EdStudCourseRegPolcyParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPolcyQuery class.
		/// </summary>
		public EdStudCourseRegPolcyQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPolcyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegPolcyQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPolcyQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegPolcyQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegPolcyQuery
		
	#region EdStudCourseRegAssessSubFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegAssessSub"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegAssessSubFilters : EdStudCourseRegAssessSubFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubFilters class.
		/// </summary>
		public EdStudCourseRegAssessSubFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegAssessSubFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegAssessSubFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegAssessSubFilters
	
	#region EdStudCourseRegAssessSubQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegAssessSubParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegAssessSub"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegAssessSubQuery : EdStudCourseRegAssessSubParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubQuery class.
		/// </summary>
		public EdStudCourseRegAssessSubQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegAssessSubQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegAssessSubQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegAssessSubQuery
		
	#region EdStudCourseGrdChngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseGrdChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseGrdChngFilters : EdStudCourseGrdChngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseGrdChngFilters class.
		/// </summary>
		public EdStudCourseGrdChngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseGrdChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseGrdChngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseGrdChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseGrdChngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseGrdChngFilters
	
	#region EdStudCourseGrdChngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseGrdChngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseGrdChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseGrdChngQuery : EdStudCourseGrdChngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseGrdChngQuery class.
		/// </summary>
		public EdStudCourseGrdChngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseGrdChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseGrdChngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseGrdChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseGrdChngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseGrdChngQuery
		
	#region EdStudCodeChngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCodeChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCodeChngFilters : EdStudCodeChngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCodeChngFilters class.
		/// </summary>
		public EdStudCodeChngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCodeChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCodeChngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCodeChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCodeChngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCodeChngFilters
	
	#region EdStudCodeChngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCodeChngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCodeChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCodeChngQuery : EdStudCodeChngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCodeChngQuery class.
		/// </summary>
		public EdStudCodeChngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCodeChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCodeChngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCodeChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCodeChngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCodeChngQuery
		
	#region EdStudContactMethodFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudContactMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudContactMethodFilters : EdStudContactMethodFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudContactMethodFilters class.
		/// </summary>
		public EdStudContactMethodFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudContactMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudContactMethodFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudContactMethodFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudContactMethodFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudContactMethodFilters
	
	#region EdStudContactMethodQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudContactMethodParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudContactMethod"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudContactMethodQuery : EdStudContactMethodParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudContactMethodQuery class.
		/// </summary>
		public EdStudContactMethodQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudContactMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudContactMethodQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudContactMethodQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudContactMethodQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudContactMethodQuery
		
	#region EdStudCourseChngFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseChngFilters : EdStudCourseChngFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseChngFilters class.
		/// </summary>
		public EdStudCourseChngFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseChngFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseChngFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseChngFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseChngFilters
	
	#region EdStudCourseChngQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseChngParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseChng"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseChngQuery : EdStudCourseChngParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseChngQuery class.
		/// </summary>
		public EdStudCourseChngQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseChngQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseChngQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseChngQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseChngQuery
		
	#region EdStudCourseCompFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseCompFilters : EdStudCourseCompFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseCompFilters class.
		/// </summary>
		public EdStudCourseCompFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseCompFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseCompFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseCompFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseCompFilters
	
	#region EdStudCourseCompQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseCompParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseComp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseCompQuery : EdStudCourseCompParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseCompQuery class.
		/// </summary>
		public EdStudCourseCompQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseCompQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseCompQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseCompQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseCompQuery
		
	#region EdStudCourseRegPreFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegPre"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegPreFilters : EdStudCourseRegPreFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPreFilters class.
		/// </summary>
		public EdStudCourseRegPreFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPreFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegPreFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPreFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegPreFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegPreFilters
	
	#region EdStudCourseRegPreQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegPreParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegPre"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegPreQuery : EdStudCourseRegPreParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPreQuery class.
		/// </summary>
		public EdStudCourseRegPreQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPreQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegPreQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegPreQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegPreQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegPreQuery
		
	#region EdStudCourseRegTempFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegTempFilters : EdStudCourseRegTempFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempFilters class.
		/// </summary>
		public EdStudCourseRegTempFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegTempFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegTempFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegTempFilters
	
	#region EdStudCourseRegTempQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegTempParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegTemp"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegTempQuery : EdStudCourseRegTempParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempQuery class.
		/// </summary>
		public EdStudCourseRegTempQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegTempQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegTempQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegTempQuery
		
	#region EdStudCourseRegTopicFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegTopicFilters : EdStudCourseRegTopicFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTopicFilters class.
		/// </summary>
		public EdStudCourseRegTopicFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegTopicFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTopicFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegTopicFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegTopicFilters
	
	#region EdStudCourseRegTopicQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRegTopicParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRegTopic"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRegTopicQuery : EdStudCourseRegTopicParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTopicQuery class.
		/// </summary>
		public EdStudCourseRegTopicQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRegTopicQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTopicQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRegTopicQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRegTopicQuery
		
	#region EdStudExmptReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudExmptReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptReqFilters : EdStudExmptReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqFilters class.
		/// </summary>
		public EdStudExmptReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptReqFilters
	
	#region EdStudExmptReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudExmptReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudExmptReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptReqQuery : EdStudExmptReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqQuery class.
		/// </summary>
		public EdStudExmptReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptReqQuery
		
	#region EdStudExmptCrsFromFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudExmptCrsFrom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptCrsFromFilters : EdStudExmptCrsFromFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsFromFilters class.
		/// </summary>
		public EdStudExmptCrsFromFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsFromFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptCrsFromFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsFromFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptCrsFromFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptCrsFromFilters
	
	#region EdStudExmptCrsFromQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudExmptCrsFromParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudExmptCrsFrom"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptCrsFromQuery : EdStudExmptCrsFromParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsFromQuery class.
		/// </summary>
		public EdStudExmptCrsFromQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsFromQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptCrsFromQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsFromQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptCrsFromQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptCrsFromQuery
		
	#region EdStudExecuseReqFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudExecuseReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExecuseReqFilters : EdStudExecuseReqFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExecuseReqFilters class.
		/// </summary>
		public EdStudExecuseReqFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExecuseReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExecuseReqFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExecuseReqFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExecuseReqFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExecuseReqFilters
	
	#region EdStudExecuseReqQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudExecuseReqParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudExecuseReq"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExecuseReqQuery : EdStudExecuseReqParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExecuseReqQuery class.
		/// </summary>
		public EdStudExecuseReqQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExecuseReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExecuseReqQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExecuseReqQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExecuseReqQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExecuseReqQuery
		
	#region EdStudExmptCrsToFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudExmptCrsTo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptCrsToFilters : EdStudExmptCrsToFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsToFilters class.
		/// </summary>
		public EdStudExmptCrsToFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsToFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptCrsToFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsToFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptCrsToFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptCrsToFilters
	
	#region EdStudExmptCrsToQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudExmptCrsToParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudExmptCrsTo"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExmptCrsToQuery : EdStudExmptCrsToParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsToQuery class.
		/// </summary>
		public EdStudExmptCrsToQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsToQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExmptCrsToQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExmptCrsToQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExmptCrsToQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExmptCrsToQuery
		
	#region EdStudExcuseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudExcuse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExcuseFilters : EdStudExcuseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseFilters class.
		/// </summary>
		public EdStudExcuseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExcuseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExcuseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExcuseFilters
	
	#region EdStudExcuseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudExcuseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudExcuse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExcuseQuery : EdStudExcuseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseQuery class.
		/// </summary>
		public EdStudExcuseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExcuseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExcuseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExcuseQuery
		
	#region EdStudExcuseCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudExcuseCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExcuseCourseFilters : EdStudExcuseCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseCourseFilters class.
		/// </summary>
		public EdStudExcuseCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExcuseCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExcuseCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExcuseCourseFilters
	
	#region EdStudExcuseCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudExcuseCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudExcuseCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudExcuseCourseQuery : EdStudExcuseCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseCourseQuery class.
		/// </summary>
		public EdStudExcuseCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudExcuseCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudExcuseCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudExcuseCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudExcuseCourseQuery
		
	#region EdStudCourseRplcFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRplc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRplcFilters : EdStudCourseRplcFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRplcFilters class.
		/// </summary>
		public EdStudCourseRplcFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRplcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRplcFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRplcFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRplcFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRplcFilters
	
	#region EdStudCourseRplcQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseRplcParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseRplc"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseRplcQuery : EdStudCourseRplcParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRplcQuery class.
		/// </summary>
		public EdStudCourseRplcQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRplcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseRplcQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseRplcQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseRplcQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseRplcQuery
		
	#region EdStudCourseWaitFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudCourseWait"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseWaitFilters : EdStudCourseWaitFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseWaitFilters class.
		/// </summary>
		public EdStudCourseWaitFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseWaitFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseWaitFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseWaitFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseWaitFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseWaitFilters
	
	#region EdStudCourseWaitQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudCourseWaitParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudCourseWait"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudCourseWaitQuery : EdStudCourseWaitParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudCourseWaitQuery class.
		/// </summary>
		public EdStudCourseWaitQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseWaitQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudCourseWaitQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudCourseWaitQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudCourseWaitQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudCourseWaitQuery
		
	#region EdStudDisabilityFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudDisability"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudDisabilityFilters : EdStudDisabilityFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudDisabilityFilters class.
		/// </summary>
		public EdStudDisabilityFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudDisabilityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudDisabilityFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudDisabilityFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudDisabilityFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudDisabilityFilters
	
	#region EdStudDisabilityQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudDisabilityParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudDisability"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudDisabilityQuery : EdStudDisabilityParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudDisabilityQuery class.
		/// </summary>
		public EdStudDisabilityQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudDisabilityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudDisabilityQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudDisabilityQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudDisabilityQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudDisabilityQuery
		
	#region EdStudEnrollChangeFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="EdStudEnrollChange"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudEnrollChangeFilters : EdStudEnrollChangeFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeFilters class.
		/// </summary>
		public EdStudEnrollChangeFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudEnrollChangeFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudEnrollChangeFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudEnrollChangeFilters
	
	#region EdStudEnrollChangeQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="EdStudEnrollChangeParameterBuilder"/> class
	/// that is used exclusively with a <see cref="EdStudEnrollChange"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class EdStudEnrollChangeQuery : EdStudEnrollChangeParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeQuery class.
		/// </summary>
		public EdStudEnrollChangeQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public EdStudEnrollChangeQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public EdStudEnrollChangeQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion EdStudEnrollChangeQuery
		
	#region WfCrsRsltApproveFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="WfCrsRsltApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class WfCrsRsltApproveFilters : WfCrsRsltApproveFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the WfCrsRsltApproveFilters class.
		/// </summary>
		public WfCrsRsltApproveFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the WfCrsRsltApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public WfCrsRsltApproveFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the WfCrsRsltApproveFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public WfCrsRsltApproveFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion WfCrsRsltApproveFilters
	
	#region WfCrsRsltApproveQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="WfCrsRsltApproveParameterBuilder"/> class
	/// that is used exclusively with a <see cref="WfCrsRsltApprove"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class WfCrsRsltApproveQuery : WfCrsRsltApproveParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the WfCrsRsltApproveQuery class.
		/// </summary>
		public WfCrsRsltApproveQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the WfCrsRsltApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public WfCrsRsltApproveQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the WfCrsRsltApproveQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public WfCrsRsltApproveQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion WfCrsRsltApproveQuery
		
	#region AppFeeViewFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="AppFeeView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AppFeeViewFilters : AppFeeViewFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AppFeeViewFilters class.
		/// </summary>
		public AppFeeViewFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the AppFeeViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AppFeeViewFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AppFeeViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AppFeeViewFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AppFeeViewFilters
	
	#region AppFeeViewQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="AppFeeViewParameterBuilder"/> class
	/// that is used exclusively with a <see cref="AppFeeView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class AppFeeViewQuery : AppFeeViewParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the AppFeeViewQuery class.
		/// </summary>
		public AppFeeViewQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the AppFeeViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public AppFeeViewQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the AppFeeViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public AppFeeViewQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion AppFeeViewQuery
		
	#region ApplicantPlacementExamViewFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ApplicantPlacementExamView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ApplicantPlacementExamViewFilters : ApplicantPlacementExamViewFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ApplicantPlacementExamViewFilters class.
		/// </summary>
		public ApplicantPlacementExamViewFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ApplicantPlacementExamViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ApplicantPlacementExamViewFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ApplicantPlacementExamViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ApplicantPlacementExamViewFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ApplicantPlacementExamViewFilters
	
	#region ApplicantPlacementExamViewQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ApplicantPlacementExamViewParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ApplicantPlacementExamView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ApplicantPlacementExamViewQuery : ApplicantPlacementExamViewParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ApplicantPlacementExamViewQuery class.
		/// </summary>
		public ApplicantPlacementExamViewQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ApplicantPlacementExamViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ApplicantPlacementExamViewQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ApplicantPlacementExamViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ApplicantPlacementExamViewQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ApplicantPlacementExamViewQuery
		
	#region ApplicantRequiredDocumentViewFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ApplicantRequiredDocumentView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ApplicantRequiredDocumentViewFilters : ApplicantRequiredDocumentViewFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ApplicantRequiredDocumentViewFilters class.
		/// </summary>
		public ApplicantRequiredDocumentViewFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ApplicantRequiredDocumentViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ApplicantRequiredDocumentViewFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ApplicantRequiredDocumentViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ApplicantRequiredDocumentViewFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ApplicantRequiredDocumentViewFilters
	
	#region ApplicantRequiredDocumentViewQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ApplicantRequiredDocumentViewParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ApplicantRequiredDocumentView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ApplicantRequiredDocumentViewQuery : ApplicantRequiredDocumentViewParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ApplicantRequiredDocumentViewQuery class.
		/// </summary>
		public ApplicantRequiredDocumentViewQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ApplicantRequiredDocumentViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ApplicantRequiredDocumentViewQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ApplicantRequiredDocumentViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ApplicantRequiredDocumentViewQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ApplicantRequiredDocumentViewQuery
		
	#region ApplicantStepsViewFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ApplicantStepsView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ApplicantStepsViewFilters : ApplicantStepsViewFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ApplicantStepsViewFilters class.
		/// </summary>
		public ApplicantStepsViewFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ApplicantStepsViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ApplicantStepsViewFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ApplicantStepsViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ApplicantStepsViewFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ApplicantStepsViewFilters
	
	#region ApplicantStepsViewQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ApplicantStepsViewParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ApplicantStepsView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ApplicantStepsViewQuery : ApplicantStepsViewParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ApplicantStepsViewQuery class.
		/// </summary>
		public ApplicantStepsViewQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ApplicantStepsViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ApplicantStepsViewQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ApplicantStepsViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ApplicantStepsViewQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ApplicantStepsViewQuery
		
	#region ModulesTreeViewFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="ModulesTreeView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ModulesTreeViewFilters : ModulesTreeViewFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ModulesTreeViewFilters class.
		/// </summary>
		public ModulesTreeViewFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the ModulesTreeViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ModulesTreeViewFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ModulesTreeViewFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ModulesTreeViewFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ModulesTreeViewFilters
	
	#region ModulesTreeViewQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="ModulesTreeViewParameterBuilder"/> class
	/// that is used exclusively with a <see cref="ModulesTreeView"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class ModulesTreeViewQuery : ModulesTreeViewParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the ModulesTreeViewQuery class.
		/// </summary>
		public ModulesTreeViewQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the ModulesTreeViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public ModulesTreeViewQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the ModulesTreeViewQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public ModulesTreeViewQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion ModulesTreeViewQuery
		
	#region StaffAcademicLoadsFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="StaffAcademicLoads"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class StaffAcademicLoadsFilters : StaffAcademicLoadsFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the StaffAcademicLoadsFilters class.
		/// </summary>
		public StaffAcademicLoadsFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the StaffAcademicLoadsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public StaffAcademicLoadsFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the StaffAcademicLoadsFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public StaffAcademicLoadsFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion StaffAcademicLoadsFilters
	
	#region StaffAcademicLoadsQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="StaffAcademicLoadsParameterBuilder"/> class
	/// that is used exclusively with a <see cref="StaffAcademicLoads"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class StaffAcademicLoadsQuery : StaffAcademicLoadsParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the StaffAcademicLoadsQuery class.
		/// </summary>
		public StaffAcademicLoadsQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the StaffAcademicLoadsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public StaffAcademicLoadsQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the StaffAcademicLoadsQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public StaffAcademicLoadsQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion StaffAcademicLoadsQuery
		
	#region TeachingLoadDistributionPerProgramFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="TeachingLoadDistributionPerProgram"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TeachingLoadDistributionPerProgramFilters : TeachingLoadDistributionPerProgramFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TeachingLoadDistributionPerProgramFilters class.
		/// </summary>
		public TeachingLoadDistributionPerProgramFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the TeachingLoadDistributionPerProgramFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TeachingLoadDistributionPerProgramFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TeachingLoadDistributionPerProgramFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TeachingLoadDistributionPerProgramFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TeachingLoadDistributionPerProgramFilters
	
	#region TeachingLoadDistributionPerProgramQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="TeachingLoadDistributionPerProgramParameterBuilder"/> class
	/// that is used exclusively with a <see cref="TeachingLoadDistributionPerProgram"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class TeachingLoadDistributionPerProgramQuery : TeachingLoadDistributionPerProgramParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the TeachingLoadDistributionPerProgramQuery class.
		/// </summary>
		public TeachingLoadDistributionPerProgramQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the TeachingLoadDistributionPerProgramQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public TeachingLoadDistributionPerProgramQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the TeachingLoadDistributionPerProgramQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public TeachingLoadDistributionPerProgramQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion TeachingLoadDistributionPerProgramQuery
		
	#region VmGetOfferingInCurrentAcadYearSemesterFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VmGetOfferingInCurrentAcadYearSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VmGetOfferingInCurrentAcadYearSemesterFilters : VmGetOfferingInCurrentAcadYearSemesterFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VmGetOfferingInCurrentAcadYearSemesterFilters class.
		/// </summary>
		public VmGetOfferingInCurrentAcadYearSemesterFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VmGetOfferingInCurrentAcadYearSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VmGetOfferingInCurrentAcadYearSemesterFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VmGetOfferingInCurrentAcadYearSemesterFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VmGetOfferingInCurrentAcadYearSemesterFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VmGetOfferingInCurrentAcadYearSemesterFilters
	
	#region VmGetOfferingInCurrentAcadYearSemesterQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VmGetOfferingInCurrentAcadYearSemesterParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VmGetOfferingInCurrentAcadYearSemester"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VmGetOfferingInCurrentAcadYearSemesterQuery : VmGetOfferingInCurrentAcadYearSemesterParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VmGetOfferingInCurrentAcadYearSemesterQuery class.
		/// </summary>
		public VmGetOfferingInCurrentAcadYearSemesterQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VmGetOfferingInCurrentAcadYearSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VmGetOfferingInCurrentAcadYearSemesterQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VmGetOfferingInCurrentAcadYearSemesterQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VmGetOfferingInCurrentAcadYearSemesterQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VmGetOfferingInCurrentAcadYearSemesterQuery
		
	#region VscheduleCoursesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VscheduleCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VscheduleCoursesFilters : VscheduleCoursesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VscheduleCoursesFilters class.
		/// </summary>
		public VscheduleCoursesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VscheduleCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VscheduleCoursesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VscheduleCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VscheduleCoursesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VscheduleCoursesFilters
	
	#region VscheduleCoursesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VscheduleCoursesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VscheduleCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VscheduleCoursesQuery : VscheduleCoursesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VscheduleCoursesQuery class.
		/// </summary>
		public VscheduleCoursesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VscheduleCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VscheduleCoursesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VscheduleCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VscheduleCoursesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VscheduleCoursesQuery
		
	#region VwGetAcadmicPlanCoursesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VwGetAcadmicPlanCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwGetAcadmicPlanCoursesFilters : VwGetAcadmicPlanCoursesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwGetAcadmicPlanCoursesFilters class.
		/// </summary>
		public VwGetAcadmicPlanCoursesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwGetAcadmicPlanCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwGetAcadmicPlanCoursesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwGetAcadmicPlanCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwGetAcadmicPlanCoursesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwGetAcadmicPlanCoursesFilters
	
	#region VwGetAcadmicPlanCoursesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VwGetAcadmicPlanCoursesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VwGetAcadmicPlanCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwGetAcadmicPlanCoursesQuery : VwGetAcadmicPlanCoursesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwGetAcadmicPlanCoursesQuery class.
		/// </summary>
		public VwGetAcadmicPlanCoursesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwGetAcadmicPlanCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwGetAcadmicPlanCoursesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwGetAcadmicPlanCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwGetAcadmicPlanCoursesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwGetAcadmicPlanCoursesQuery
		
	#region VwGetUniversityRequirementsCoursesFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VwGetUniversityRequirementsCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwGetUniversityRequirementsCoursesFilters : VwGetUniversityRequirementsCoursesFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwGetUniversityRequirementsCoursesFilters class.
		/// </summary>
		public VwGetUniversityRequirementsCoursesFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwGetUniversityRequirementsCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwGetUniversityRequirementsCoursesFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwGetUniversityRequirementsCoursesFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwGetUniversityRequirementsCoursesFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwGetUniversityRequirementsCoursesFilters
	
	#region VwGetUniversityRequirementsCoursesQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VwGetUniversityRequirementsCoursesParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VwGetUniversityRequirementsCourses"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwGetUniversityRequirementsCoursesQuery : VwGetUniversityRequirementsCoursesParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwGetUniversityRequirementsCoursesQuery class.
		/// </summary>
		public VwGetUniversityRequirementsCoursesQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwGetUniversityRequirementsCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwGetUniversityRequirementsCoursesQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwGetUniversityRequirementsCoursesQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwGetUniversityRequirementsCoursesQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwGetUniversityRequirementsCoursesQuery
		
	#region VwSelectDegreeAfterApplyRepeateRuleFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VwSelectDegreeAfterApplyRepeateRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwSelectDegreeAfterApplyRepeateRuleFilters : VwSelectDegreeAfterApplyRepeateRuleFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwSelectDegreeAfterApplyRepeateRuleFilters class.
		/// </summary>
		public VwSelectDegreeAfterApplyRepeateRuleFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwSelectDegreeAfterApplyRepeateRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwSelectDegreeAfterApplyRepeateRuleFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwSelectDegreeAfterApplyRepeateRuleFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwSelectDegreeAfterApplyRepeateRuleFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwSelectDegreeAfterApplyRepeateRuleFilters
	
	#region VwSelectDegreeAfterApplyRepeateRuleQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VwSelectDegreeAfterApplyRepeateRuleParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VwSelectDegreeAfterApplyRepeateRule"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwSelectDegreeAfterApplyRepeateRuleQuery : VwSelectDegreeAfterApplyRepeateRuleParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwSelectDegreeAfterApplyRepeateRuleQuery class.
		/// </summary>
		public VwSelectDegreeAfterApplyRepeateRuleQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwSelectDegreeAfterApplyRepeateRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwSelectDegreeAfterApplyRepeateRuleQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwSelectDegreeAfterApplyRepeateRuleQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwSelectDegreeAfterApplyRepeateRuleQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwSelectDegreeAfterApplyRepeateRuleQuery
		
	#region VwSelectStudRemainCourseFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VwSelectStudRemainCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwSelectStudRemainCourseFilters : VwSelectStudRemainCourseFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwSelectStudRemainCourseFilters class.
		/// </summary>
		public VwSelectStudRemainCourseFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwSelectStudRemainCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwSelectStudRemainCourseFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwSelectStudRemainCourseFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwSelectStudRemainCourseFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwSelectStudRemainCourseFilters
	
	#region VwSelectStudRemainCourseQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VwSelectStudRemainCourseParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VwSelectStudRemainCourse"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwSelectStudRemainCourseQuery : VwSelectStudRemainCourseParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwSelectStudRemainCourseQuery class.
		/// </summary>
		public VwSelectStudRemainCourseQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwSelectStudRemainCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwSelectStudRemainCourseQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwSelectStudRemainCourseQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwSelectStudRemainCourseQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwSelectStudRemainCourseQuery
		
	#region VwSelectTotalCrsHrsRegFilters
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="SqlFilterBuilder&lt;EntityColumn&gt;"/> class
	/// that is used exclusively with a <see cref="VwSelectTotalCrsHrsReg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwSelectTotalCrsHrsRegFilters : VwSelectTotalCrsHrsRegFilterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwSelectTotalCrsHrsRegFilters class.
		/// </summary>
		public VwSelectTotalCrsHrsRegFilters() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwSelectTotalCrsHrsRegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwSelectTotalCrsHrsRegFilters(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwSelectTotalCrsHrsRegFilters class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwSelectTotalCrsHrsRegFilters(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwSelectTotalCrsHrsRegFilters
	
	#region VwSelectTotalCrsHrsRegQuery
	
	/// <summary>
	/// A strongly-typed instance of the <see cref="VwSelectTotalCrsHrsRegParameterBuilder"/> class
	/// that is used exclusively with a <see cref="VwSelectTotalCrsHrsReg"/> object.
	/// </summary>
	[CLSCompliant(true)]
	public class VwSelectTotalCrsHrsRegQuery : VwSelectTotalCrsHrsRegParameterBuilder
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the VwSelectTotalCrsHrsRegQuery class.
		/// </summary>
		public VwSelectTotalCrsHrsRegQuery() : base() { }

		/// <summary>
		/// Initializes a new instance of the VwSelectTotalCrsHrsRegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		public VwSelectTotalCrsHrsRegQuery(bool ignoreCase) : base(ignoreCase) { }

		/// <summary>
		/// Initializes a new instance of the VwSelectTotalCrsHrsRegQuery class.
		/// </summary>
		/// <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
		/// <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
		public VwSelectTotalCrsHrsRegQuery(bool ignoreCase, bool useAnd) : base(ignoreCase, useAnd) { }

		#endregion Constructors
	}

	#endregion VwSelectTotalCrsHrsRegQuery
	#endregion

	
}
