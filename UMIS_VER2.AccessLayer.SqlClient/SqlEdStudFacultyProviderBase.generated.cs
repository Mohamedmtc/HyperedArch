/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdStudFacultyProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdStudFaculty"/> entity.
	///</summary>
	public abstract partial class SqlEdStudFacultyProviderBase : EdStudFacultyProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdStudFacultyProviderBase"/> instance.
		/// </summary>
		public SqlEdStudFacultyProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdStudFacultyProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdStudFacultyProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edStudFacultyId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edStudFacultyId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdStudFacultyId", DbType.Decimal, _edStudFacultyId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdStudFaculty)
					,_edStudFacultyId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
		public override TList<EdStudFaculty> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdStudFaculty>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdStudFacultyId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudFacultyCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadYearJoinId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeSemesterJoinId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnrollDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ComptativeRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullTimeFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GraduatesFlag", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WithHonor", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntPolicyAccumHonorId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumCredit", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumPoints", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntMainGrad1", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntMainGrad2", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntMainGrad3", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntMainMatrixId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TransferFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCodeTransferTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UnivApproveDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FacApproveDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DeptApproveDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsActive", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MajorCgpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cgpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdBylawId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OldAlumniFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudCardFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GrantingCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AmanestPermanentStopFlag", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BatchNo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TrnsfrFrom", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TrnsfrNotes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TrnsfrDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrgFacultyNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudFeeBalance", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumPrcent", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HecId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExpctdGradDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumMarks", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumCourseMarks", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MotherId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_stud_faculty_id ") || clause.Trim().StartsWith("ed_stud_faculty_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudFacultyId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_id ") || clause.Trim().StartsWith("ed_stud_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_faculty_info_id ") || clause.Trim().StartsWith("as_faculty_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsFacultyInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_code_degree_id ") || clause.Trim().StartsWith("as_code_degree_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsCodeDegreeId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_faculty_code ") || clause.Trim().StartsWith("stud_faculty_code="))
				{
					database.SetParameterValue(commandWrapper, "@StudFacultyCode", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_app_type_id ") || clause.Trim().StartsWith("adm_cde_app_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeAppTypeId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_year_join_id ") || clause.Trim().StartsWith("ed_acad_year_join_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadYearJoinId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_semester_join_id ") || clause.Trim().StartsWith("ed_code_semester_join_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeSemesterJoinId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enroll_date ") || clause.Trim().StartsWith("enroll_date="))
				{
					database.SetParameterValue(commandWrapper, "@EnrollDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("comptative_rate ") || clause.Trim().StartsWith("comptative_rate="))
				{
					database.SetParameterValue(commandWrapper, "@ComptativeRate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_time_flg ") || clause.Trim().StartsWith("full_time_flg="))
				{
					database.SetParameterValue(commandWrapper, "@FullTimeFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_qual_phase ") || clause.Trim().StartsWith("ed_cde_qual_phase="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeQualPhase", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_qual_id ") || clause.Trim().StartsWith("ed_stud_qual_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudQualId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("graduates_flag ") || clause.Trim().StartsWith("graduates_flag="))
				{
					database.SetParameterValue(commandWrapper, "@GraduatesFlag", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_year_id ") || clause.Trim().StartsWith("ed_acad_year_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadYearId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_semester_id ") || clause.Trim().StartsWith("ed_code_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeSemesterId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("with_honor ") || clause.Trim().StartsWith("with_honor="))
				{
					database.SetParameterValue(commandWrapper, "@WithHonor", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_policy_accum_honor_id ") || clause.Trim().StartsWith("ent_policy_accum_honor_id="))
				{
					database.SetParameterValue(commandWrapper, "@EntPolicyAccumHonorId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_credit ") || clause.Trim().StartsWith("accum_credit="))
				{
					database.SetParameterValue(commandWrapper, "@AccumCredit", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_points ") || clause.Trim().StartsWith("accum_points="))
				{
					database.SetParameterValue(commandWrapper, "@AccumPoints", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_main_grad_1 ") || clause.Trim().StartsWith("ent_main_grad_1="))
				{
					database.SetParameterValue(commandWrapper, "@EntMainGrad1", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_main_grad_2 ") || clause.Trim().StartsWith("ent_main_grad_2="))
				{
					database.SetParameterValue(commandWrapper, "@EntMainGrad2", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_main_grad_3 ") || clause.Trim().StartsWith("ent_main_grad_3="))
				{
					database.SetParameterValue(commandWrapper, "@EntMainGrad3", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_main_matrix_id ") || clause.Trim().StartsWith("ent_main_matrix_id="))
				{
					database.SetParameterValue(commandWrapper, "@EntMainMatrixId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("transfer_flg ") || clause.Trim().StartsWith("transfer_flg="))
				{
					database.SetParameterValue(commandWrapper, "@TransferFlg", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_code_transfer_type_id ") || clause.Trim().StartsWith("adm_code_transfer_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCodeTransferTypeId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("univ_approve_date ") || clause.Trim().StartsWith("univ_approve_date="))
				{
					database.SetParameterValue(commandWrapper, "@UnivApproveDate", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fac_approve_date ") || clause.Trim().StartsWith("fac_approve_date="))
				{
					database.SetParameterValue(commandWrapper, "@FacApproveDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dept_approve_date ") || clause.Trim().StartsWith("dept_approve_date="))
				{
					database.SetParameterValue(commandWrapper, "@DeptApproveDate", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_grading_id ") || clause.Trim().StartsWith("ed_code_grading_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeGradingId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_active ") || clause.Trim().StartsWith("is_active="))
				{
					database.SetParameterValue(commandWrapper, "@IsActive", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("major_cgpa ") || clause.Trim().StartsWith("major_cgpa="))
				{
					database.SetParameterValue(commandWrapper, "@MajorCgpa", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cgpa ") || clause.Trim().StartsWith("cgpa="))
				{
					database.SetParameterValue(commandWrapper, "@Cgpa", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_bylaw_id ") || clause.Trim().StartsWith("ed_bylaw_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdBylawId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("old_alumni_flg ") || clause.Trim().StartsWith("old_alumni_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OldAlumniFlg", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_card_flg ") || clause.Trim().StartsWith("stud_card_flg="))
				{
					database.SetParameterValue(commandWrapper, "@StudCardFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("granting_code ") || clause.Trim().StartsWith("granting_code="))
				{
					database.SetParameterValue(commandWrapper, "@GrantingCode", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_last ") || clause.Trim().StartsWith("is_last="))
				{
					database.SetParameterValue(commandWrapper, "@IsLast", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("amanest_permanent_stop_flag ") || clause.Trim().StartsWith("amanest_permanent_stop_flag="))
				{
					database.SetParameterValue(commandWrapper, "@AmanestPermanentStopFlag", 
						clause.Trim().Remove(0,27).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("batch_no ") || clause.Trim().StartsWith("batch_no="))
				{
					database.SetParameterValue(commandWrapper, "@BatchNo", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_honor_id ") || clause.Trim().StartsWith("gs_cde_honor_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeHonorId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trnsfr_from ") || clause.Trim().StartsWith("trnsfr_from="))
				{
					database.SetParameterValue(commandWrapper, "@TrnsfrFrom", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trnsfr_notes ") || clause.Trim().StartsWith("trnsfr_notes="))
				{
					database.SetParameterValue(commandWrapper, "@TrnsfrNotes", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trnsfr_date ") || clause.Trim().StartsWith("trnsfr_date="))
				{
					database.SetParameterValue(commandWrapper, "@TrnsfrDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("org_faculty_name_ar ") || clause.Trim().StartsWith("org_faculty_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@OrgFacultyNameAr", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_fee_balance ") || clause.Trim().StartsWith("stud_fee_balance="))
				{
					database.SetParameterValue(commandWrapper, "@StudFeeBalance", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_prcent ") || clause.Trim().StartsWith("accum_prcent="))
				{
					database.SetParameterValue(commandWrapper, "@AccumPrcent", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hec_id ") || clause.Trim().StartsWith("hec_id="))
				{
					database.SetParameterValue(commandWrapper, "@HecId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("expctd_grad_date ") || clause.Trim().StartsWith("expctd_grad_date="))
				{
					database.SetParameterValue(commandWrapper, "@ExpctdGradDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_marks ") || clause.Trim().StartsWith("accum_marks="))
				{
					database.SetParameterValue(commandWrapper, "@AccumMarks", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_course_marks ") || clause.Trim().StartsWith("accum_course_marks="))
				{
					database.SetParameterValue(commandWrapper, "@AccumCourseMarks", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mother_id ") || clause.Trim().StartsWith("mother_id="))
				{
					database.SetParameterValue(commandWrapper, "@MotherId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("part_time_flg ") || clause.Trim().StartsWith("part_time_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PartTimeFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
		public override TList<EdStudFaculty> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_Find_Dynamic", typeof(EdStudFacultyColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
		public override TList<EdStudFaculty> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAdmCdeAppTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ADM_CDE_APP_TYPE key.
		///		FK_ED_STUD_FACULTY_ADM_CDE_APP_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeAppTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByAdmCdeAppTypeId(TransactionManager transactionManager, System.Decimal? _admCdeAppTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByAdmCdeAppTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, _admCdeAppTypeId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmCodeTransferTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ADM_CODE_TRANSFER_TYPE key.
		///		FK_ED_STUD_FACULTY_ADM_CODE_TRANSFER_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCodeTransferTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByAdmCodeTransferTypeId(TransactionManager transactionManager, System.Decimal? _admCodeTransferTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByAdmCodeTransferTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCodeTransferTypeId", DbType.Decimal, _admCodeTransferTypeId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCodeTransferTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCodeTransferTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsCodeDegreeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_AS_CODE_DEGREE key.
		///		FK_ED_STUD_FACULTY_AS_CODE_DEGREE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asCodeDegreeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByAsCodeDegreeId(TransactionManager transactionManager, System.Decimal _asCodeDegreeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByAsCodeDegreeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, _asCodeDegreeId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdBylawId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ED_BYLAW key.
		///		FK_ED_STUD_FACULTY_ED_BYLAW Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edBylawId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdBylawId(TransactionManager transactionManager, System.Decimal? _edBylawId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdBylawId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdBylawId", DbType.Decimal, _edBylawId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdBylawId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdBylawId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeQualPhase
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ED_CDE_QUAL_PHASE key.
		///		FK_ED_STUD_FACULTY_ED_CDE_QUAL_PHASE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeQualPhase"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdCdeQualPhase(TransactionManager transactionManager, System.Decimal? _edCdeQualPhase, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdCdeQualPhase", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, _edCdeQualPhase);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeQualPhase", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeQualPhase", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeSemesterJoinId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ED_CODE_SEMESTER key.
		///		FK_ED_STUD_FACULTY_ED_CODE_SEMESTER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeSemesterJoinId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdCodeSemesterJoinId(TransactionManager transactionManager, System.Decimal? _edCodeSemesterJoinId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdCodeSemesterJoinId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeSemesterJoinId", DbType.Decimal, _edCodeSemesterJoinId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterJoinId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterJoinId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeSemesterId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ED_CODE_SEMESTER1 key.
		///		FK_ED_STUD_FACULTY_ED_CODE_SEMESTER1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdCodeSemesterId(TransactionManager transactionManager, System.Decimal? _edCodeSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdCodeSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, _edCodeSemesterId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudQualId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ED_STUD_QUAL key.
		///		FK_ED_STUD_FACULTY_ED_STUD_QUAL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudQualId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdStudQualId(TransactionManager transactionManager, System.Decimal? _edStudQualId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdStudQualId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, _edStudQualId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudQualId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudQualId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntMainMatrixId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ENT_MAIN_MATRIX key.
		///		FK_ED_STUD_FACULTY_ENT_MAIN_MATRIX Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entMainMatrixId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEntMainMatrixId(TransactionManager transactionManager, System.Decimal? _entMainMatrixId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEntMainMatrixId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntMainMatrixId", DbType.Decimal, _entMainMatrixId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntMainMatrixId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntMainMatrixId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntPolicyAccumHonorId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ENT_POLICY_ACCUM_HONOR key.
		///		FK_ED_STUD_FACULTY_ENT_POLICY_ACCUM_HONOR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entPolicyAccumHonorId">XXXXX</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEntPolicyAccumHonorId(TransactionManager transactionManager, System.Decimal? _entPolicyAccumHonorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEntPolicyAccumHonorId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntPolicyAccumHonorId", DbType.Decimal, _entPolicyAccumHonorId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntPolicyAccumHonorId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntPolicyAccumHonorId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntMainGrad1
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ENTITY_MAIN key.
		///		FK_ED_STUD_FACULTY_ENTITY_MAIN Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entMainGrad1"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEntMainGrad1(TransactionManager transactionManager, System.Decimal? _entMainGrad1, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEntMainGrad1", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntMainGrad1", DbType.Decimal, _entMainGrad1);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntMainGrad1", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntMainGrad1", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntMainGrad2
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ENTITY_MAIN1 key.
		///		FK_ED_STUD_FACULTY_ENTITY_MAIN1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entMainGrad2"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEntMainGrad2(TransactionManager transactionManager, System.Decimal? _entMainGrad2, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEntMainGrad2", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntMainGrad2", DbType.Decimal, _entMainGrad2);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntMainGrad2", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntMainGrad2", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntMainGrad3
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_ENTITY_MAIN2 key.
		///		FK_ED_STUD_FACULTY_ENTITY_MAIN2 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entMainGrad3"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEntMainGrad3(TransactionManager transactionManager, System.Decimal? _entMainGrad3, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEntMainGrad3", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntMainGrad3", DbType.Decimal, _entMainGrad3);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntMainGrad3", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntMainGrad3", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeHonorId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_FACULTY_GS_CDE_HONOR key.
		///		FK_ED_STUD_FACULTY_GS_CDE_HONOR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeHonorId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudFaculty objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByGsCdeHonorId(TransactionManager transactionManager, System.Decimal? _gsCdeHonorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByGsCdeHonorId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, _gsCdeHonorId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> rows = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeHonorId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeHonorId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAsFacultyInfoId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_AS_FACULTY_INFO_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudFaculty&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByAsFacultyInfoId(TransactionManager transactionManager, System.Decimal? _asFacultyInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByAsFacultyInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdAcadYearId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_ACAD_YEAR_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudFaculty&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdAcadYearId(TransactionManager transactionManager, System.Decimal? _edAcadYearId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdAcadYearId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, _edAcadYearId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdAcadYearJoinId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_ACAD_YEAR_JOIN_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearJoinId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudFaculty&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdAcadYearJoinId(TransactionManager transactionManager, System.Decimal? _edAcadYearJoinId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdAcadYearJoinId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearJoinId", DbType.Decimal, _edAcadYearJoinId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearJoinId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearJoinId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCodeGradingId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_GRADING_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeGradingId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudFaculty&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdCodeGradingId(TransactionManager transactionManager, System.Decimal? _edCodeGradingId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdCodeGradingId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, _edCodeGradingId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeGradingId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeGradingId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_STUD_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudFaculty&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudFaculty> GetByEdStudId(TransactionManager transactionManager, System.Decimal _edStudId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdStudId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudFacultyId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ED_STUD_FACULTY index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudFacultyId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudFaculty"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudFaculty GetByEdStudFacultyId(TransactionManager transactionManager, System.Decimal _edStudFacultyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdStudFacultyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudFacultyId", DbType.Decimal, _edStudFacultyId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudFacultyId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudFacultyId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudIdAsFacultyInfoIdAsCodeDegreeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_STUD_FACULTY index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="_asCodeDegreeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudFaculty"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudFaculty GetByEdStudIdAsFacultyInfoIdAsCodeDegreeId(TransactionManager transactionManager, System.Decimal _edStudId, System.Decimal? _asFacultyInfoId, System.Decimal _asCodeDegreeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByEdStudIdAsFacultyInfoIdAsCodeDegreeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
				database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, _asCodeDegreeId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudIdAsFacultyInfoIdAsCodeDegreeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudIdAsFacultyInfoIdAsCodeDegreeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByStudFacultyCodeAsFacultyInfoIdAsCodeDegreeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_STUD_FACULTY_CODE index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_studFacultyCode"></param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="_asCodeDegreeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudFaculty"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudFaculty GetByStudFacultyCodeAsFacultyInfoIdAsCodeDegreeId(TransactionManager transactionManager, System.String _studFacultyCode, System.Decimal? _asFacultyInfoId, System.Decimal _asCodeDegreeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_GetByStudFacultyCodeAsFacultyInfoIdAsCodeDegreeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@StudFacultyCode", DbType.String, _studFacultyCode);
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
				database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, _asCodeDegreeId);
			
			IDataReader reader = null;
			TList<EdStudFaculty> tmp = new TList<EdStudFaculty>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByStudFacultyCodeAsFacultyInfoIdAsCodeDegreeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByStudFacultyCodeAsFacultyInfoIdAsCodeDegreeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudFaculty object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdStudFaculty> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_STUD_FACULTY";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_STUD_FACULTY_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ED_STUD_ID", typeof(System.Decimal));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("AS_FACULTY_INFO_ID", typeof(System.Decimal));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("AS_CODE_DEGREE_ID", typeof(System.Decimal));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("STUD_FACULTY_CODE", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("ADM_CDE_APP_TYPE_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("ED_ACAD_YEAR_JOIN_ID", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("ED_CODE_SEMESTER_JOIN_ID", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ENROLL_DATE", typeof(System.DateTime));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("COMPTATIVE_RATE", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("FULL_TIME_FLG", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ED_CDE_QUAL_PHASE", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("ED_STUD_QUAL_ID", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("GRADUATES_FLAG", typeof(System.Decimal));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("ED_ACAD_YEAR_ID", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("ED_CODE_SEMESTER_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("WITH_HONOR", typeof(System.Decimal));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("ENT_POLICY_ACCUM_HONOR_ID", typeof(System.Decimal));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ACCUM_CREDIT", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("ACCUM_POINTS", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ENT_MAIN_GRAD_1", typeof(System.Decimal));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ENT_MAIN_GRAD_2", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ENT_MAIN_GRAD_3", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ENT_MAIN_MATRIX_ID", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("TRANSFER_FLG", typeof(System.Decimal));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("ADM_CODE_TRANSFER_TYPE_ID", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("UNIV_APPROVE_DATE", typeof(System.DateTime));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("FAC_APPROVE_DATE", typeof(System.DateTime));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("DEPT_APPROVE_DATE", typeof(System.DateTime));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("ED_CODE_GRADING_ID", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("IS_ACTIVE", typeof(System.Decimal));
			col30.AllowDBNull = false;		
			DataColumn col31 = dataTable.Columns.Add("NOTES", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("MAJOR_CGPA", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("CGPA", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("ED_BYLAW_ID", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("OLD_ALUMNI_FLG", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("STUD_CARD_FLG", typeof(System.Decimal));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("GRANTING_CODE", typeof(System.String));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("IS_LAST", typeof(System.Decimal));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("AMANEST_PERMANENT_STOP_FLAG", typeof(System.Decimal));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("BATCH_NO", typeof(System.String));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("GS_CDE_HONOR_ID", typeof(System.Decimal));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("TRNSFR_FROM", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("TRNSFR_NOTES", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("TRNSFR_DATE", typeof(System.DateTime));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("ORG_FACULTY_NAME_AR", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("STUD_FEE_BALANCE", typeof(System.Decimal));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("ACCUM_PRCENT", typeof(System.Decimal));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("HEC_ID", typeof(System.String));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("EXPCTD_GRAD_DATE", typeof(System.DateTime));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("ACCUM_MARKS", typeof(System.Decimal));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("ACCUM_COURSE_MARKS", typeof(System.Decimal));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("Mother_ID", typeof(System.String));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("PART_TIME_FLG", typeof(System.Boolean));
			col53.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_STUD_FACULTY_ID", "ED_STUD_FACULTY_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_ID", "ED_STUD_ID");
			bulkCopy.ColumnMappings.Add("AS_FACULTY_INFO_ID", "AS_FACULTY_INFO_ID");
			bulkCopy.ColumnMappings.Add("AS_CODE_DEGREE_ID", "AS_CODE_DEGREE_ID");
			bulkCopy.ColumnMappings.Add("STUD_FACULTY_CODE", "STUD_FACULTY_CODE");
			bulkCopy.ColumnMappings.Add("ADM_CDE_APP_TYPE_ID", "ADM_CDE_APP_TYPE_ID");
			bulkCopy.ColumnMappings.Add("ED_ACAD_YEAR_JOIN_ID", "ED_ACAD_YEAR_JOIN_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_SEMESTER_JOIN_ID", "ED_CODE_SEMESTER_JOIN_ID");
			bulkCopy.ColumnMappings.Add("ENROLL_DATE", "ENROLL_DATE");
			bulkCopy.ColumnMappings.Add("COMPTATIVE_RATE", "COMPTATIVE_RATE");
			bulkCopy.ColumnMappings.Add("FULL_TIME_FLG", "FULL_TIME_FLG");
			bulkCopy.ColumnMappings.Add("ED_CDE_QUAL_PHASE", "ED_CDE_QUAL_PHASE");
			bulkCopy.ColumnMappings.Add("ED_STUD_QUAL_ID", "ED_STUD_QUAL_ID");
			bulkCopy.ColumnMappings.Add("GRADUATES_FLAG", "GRADUATES_FLAG");
			bulkCopy.ColumnMappings.Add("ED_ACAD_YEAR_ID", "ED_ACAD_YEAR_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_SEMESTER_ID", "ED_CODE_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("WITH_HONOR", "WITH_HONOR");
			bulkCopy.ColumnMappings.Add("ENT_POLICY_ACCUM_HONOR_ID", "ENT_POLICY_ACCUM_HONOR_ID");
			bulkCopy.ColumnMappings.Add("ACCUM_CREDIT", "ACCUM_CREDIT");
			bulkCopy.ColumnMappings.Add("ACCUM_POINTS", "ACCUM_POINTS");
			bulkCopy.ColumnMappings.Add("ENT_MAIN_GRAD_1", "ENT_MAIN_GRAD_1");
			bulkCopy.ColumnMappings.Add("ENT_MAIN_GRAD_2", "ENT_MAIN_GRAD_2");
			bulkCopy.ColumnMappings.Add("ENT_MAIN_GRAD_3", "ENT_MAIN_GRAD_3");
			bulkCopy.ColumnMappings.Add("ENT_MAIN_MATRIX_ID", "ENT_MAIN_MATRIX_ID");
			bulkCopy.ColumnMappings.Add("TRANSFER_FLG", "TRANSFER_FLG");
			bulkCopy.ColumnMappings.Add("ADM_CODE_TRANSFER_TYPE_ID", "ADM_CODE_TRANSFER_TYPE_ID");
			bulkCopy.ColumnMappings.Add("UNIV_APPROVE_DATE", "UNIV_APPROVE_DATE");
			bulkCopy.ColumnMappings.Add("FAC_APPROVE_DATE", "FAC_APPROVE_DATE");
			bulkCopy.ColumnMappings.Add("DEPT_APPROVE_DATE", "DEPT_APPROVE_DATE");
			bulkCopy.ColumnMappings.Add("ED_CODE_GRADING_ID", "ED_CODE_GRADING_ID");
			bulkCopy.ColumnMappings.Add("IS_ACTIVE", "IS_ACTIVE");
			bulkCopy.ColumnMappings.Add("NOTES", "NOTES");
			bulkCopy.ColumnMappings.Add("MAJOR_CGPA", "MAJOR_CGPA");
			bulkCopy.ColumnMappings.Add("CGPA", "CGPA");
			bulkCopy.ColumnMappings.Add("ED_BYLAW_ID", "ED_BYLAW_ID");
			bulkCopy.ColumnMappings.Add("OLD_ALUMNI_FLG", "OLD_ALUMNI_FLG");
			bulkCopy.ColumnMappings.Add("STUD_CARD_FLG", "STUD_CARD_FLG");
			bulkCopy.ColumnMappings.Add("GRANTING_CODE", "GRANTING_CODE");
			bulkCopy.ColumnMappings.Add("IS_LAST", "IS_LAST");
			bulkCopy.ColumnMappings.Add("AMANEST_PERMANENT_STOP_FLAG", "AMANEST_PERMANENT_STOP_FLAG");
			bulkCopy.ColumnMappings.Add("BATCH_NO", "BATCH_NO");
			bulkCopy.ColumnMappings.Add("GS_CDE_HONOR_ID", "GS_CDE_HONOR_ID");
			bulkCopy.ColumnMappings.Add("TRNSFR_FROM", "TRNSFR_FROM");
			bulkCopy.ColumnMappings.Add("TRNSFR_NOTES", "TRNSFR_NOTES");
			bulkCopy.ColumnMappings.Add("TRNSFR_DATE", "TRNSFR_DATE");
			bulkCopy.ColumnMappings.Add("ORG_FACULTY_NAME_AR", "ORG_FACULTY_NAME_AR");
			bulkCopy.ColumnMappings.Add("STUD_FEE_BALANCE", "STUD_FEE_BALANCE");
			bulkCopy.ColumnMappings.Add("ACCUM_PRCENT", "ACCUM_PRCENT");
			bulkCopy.ColumnMappings.Add("HEC_ID", "HEC_ID");
			bulkCopy.ColumnMappings.Add("EXPCTD_GRAD_DATE", "EXPCTD_GRAD_DATE");
			bulkCopy.ColumnMappings.Add("ACCUM_MARKS", "ACCUM_MARKS");
			bulkCopy.ColumnMappings.Add("ACCUM_COURSE_MARKS", "ACCUM_COURSE_MARKS");
			bulkCopy.ColumnMappings.Add("Mother_ID", "Mother_ID");
			bulkCopy.ColumnMappings.Add("PART_TIME_FLG", "PART_TIME_FLG");
			
			foreach(UMIS_VER2.BusinessLyer.EdStudFaculty entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_STUD_FACULTY_ID"] = entity.EdStudFacultyId;
							
				
					row["ED_STUD_ID"] = entity.EdStudId;
							
				
					row["AS_FACULTY_INFO_ID"] = entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value;
							
				
					row["AS_CODE_DEGREE_ID"] = entity.AsCodeDegreeId;
							
				
					row["STUD_FACULTY_CODE"] = entity.StudFacultyCode;
							
				
					row["ADM_CDE_APP_TYPE_ID"] = entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId  : System.DBNull.Value;
							
				
					row["ED_ACAD_YEAR_JOIN_ID"] = entity.EdAcadYearJoinId.HasValue ? (object) entity.EdAcadYearJoinId  : System.DBNull.Value;
							
				
					row["ED_CODE_SEMESTER_JOIN_ID"] = entity.EdCodeSemesterJoinId.HasValue ? (object) entity.EdCodeSemesterJoinId  : System.DBNull.Value;
							
				
					row["ENROLL_DATE"] = entity.EnrollDate.HasValue ? (object) entity.EnrollDate  : System.DBNull.Value;
							
				
					row["COMPTATIVE_RATE"] = entity.ComptativeRate.HasValue ? (object) entity.ComptativeRate  : System.DBNull.Value;
							
				
					row["FULL_TIME_FLG"] = entity.FullTimeFlg.HasValue ? (object) entity.FullTimeFlg  : System.DBNull.Value;
							
				
					row["ED_CDE_QUAL_PHASE"] = entity.EdCdeQualPhase.HasValue ? (object) entity.EdCdeQualPhase  : System.DBNull.Value;
							
				
					row["ED_STUD_QUAL_ID"] = entity.EdStudQualId.HasValue ? (object) entity.EdStudQualId  : System.DBNull.Value;
							
				
					row["GRADUATES_FLAG"] = entity.GraduatesFlag;
							
				
					row["ED_ACAD_YEAR_ID"] = entity.EdAcadYearId.HasValue ? (object) entity.EdAcadYearId  : System.DBNull.Value;
							
				
					row["ED_CODE_SEMESTER_ID"] = entity.EdCodeSemesterId.HasValue ? (object) entity.EdCodeSemesterId  : System.DBNull.Value;
							
				
					row["WITH_HONOR"] = entity.WithHonor.HasValue ? (object) entity.WithHonor  : System.DBNull.Value;
							
				
					row["ENT_POLICY_ACCUM_HONOR_ID"] = entity.EntPolicyAccumHonorId.HasValue ? (object) entity.EntPolicyAccumHonorId  : System.DBNull.Value;
							
				
					row["ACCUM_CREDIT"] = entity.AccumCredit.HasValue ? (object) entity.AccumCredit  : System.DBNull.Value;
							
				
					row["ACCUM_POINTS"] = entity.AccumPoints.HasValue ? (object) entity.AccumPoints  : System.DBNull.Value;
							
				
					row["ENT_MAIN_GRAD_1"] = entity.EntMainGrad1.HasValue ? (object) entity.EntMainGrad1  : System.DBNull.Value;
							
				
					row["ENT_MAIN_GRAD_2"] = entity.EntMainGrad2.HasValue ? (object) entity.EntMainGrad2  : System.DBNull.Value;
							
				
					row["ENT_MAIN_GRAD_3"] = entity.EntMainGrad3.HasValue ? (object) entity.EntMainGrad3  : System.DBNull.Value;
							
				
					row["ENT_MAIN_MATRIX_ID"] = entity.EntMainMatrixId.HasValue ? (object) entity.EntMainMatrixId  : System.DBNull.Value;
							
				
					row["TRANSFER_FLG"] = entity.TransferFlg.HasValue ? (object) entity.TransferFlg  : System.DBNull.Value;
							
				
					row["ADM_CODE_TRANSFER_TYPE_ID"] = entity.AdmCodeTransferTypeId.HasValue ? (object) entity.AdmCodeTransferTypeId  : System.DBNull.Value;
							
				
					row["UNIV_APPROVE_DATE"] = entity.UnivApproveDate.HasValue ? (object) entity.UnivApproveDate  : System.DBNull.Value;
							
				
					row["FAC_APPROVE_DATE"] = entity.FacApproveDate.HasValue ? (object) entity.FacApproveDate  : System.DBNull.Value;
							
				
					row["DEPT_APPROVE_DATE"] = entity.DeptApproveDate.HasValue ? (object) entity.DeptApproveDate  : System.DBNull.Value;
							
				
					row["ED_CODE_GRADING_ID"] = entity.EdCodeGradingId.HasValue ? (object) entity.EdCodeGradingId  : System.DBNull.Value;
							
				
					row["IS_ACTIVE"] = entity.IsActive;
							
				
					row["NOTES"] = entity.Notes;
							
				
					row["MAJOR_CGPA"] = entity.MajorCgpa.HasValue ? (object) entity.MajorCgpa  : System.DBNull.Value;
							
				
					row["CGPA"] = entity.Cgpa.HasValue ? (object) entity.Cgpa  : System.DBNull.Value;
							
				
					row["ED_BYLAW_ID"] = entity.EdBylawId.HasValue ? (object) entity.EdBylawId  : System.DBNull.Value;
							
				
					row["OLD_ALUMNI_FLG"] = entity.OldAlumniFlg.HasValue ? (object) entity.OldAlumniFlg  : System.DBNull.Value;
							
				
					row["STUD_CARD_FLG"] = entity.StudCardFlg.HasValue ? (object) entity.StudCardFlg  : System.DBNull.Value;
							
				
					row["GRANTING_CODE"] = entity.GrantingCode;
							
				
					row["IS_LAST"] = entity.IsLast.HasValue ? (object) entity.IsLast  : System.DBNull.Value;
							
				
					row["AMANEST_PERMANENT_STOP_FLAG"] = entity.AmanestPermanentStopFlag.HasValue ? (object) entity.AmanestPermanentStopFlag  : System.DBNull.Value;
							
				
					row["BATCH_NO"] = entity.BatchNo;
							
				
					row["GS_CDE_HONOR_ID"] = entity.GsCdeHonorId.HasValue ? (object) entity.GsCdeHonorId  : System.DBNull.Value;
							
				
					row["TRNSFR_FROM"] = entity.TrnsfrFrom;
							
				
					row["TRNSFR_NOTES"] = entity.TrnsfrNotes;
							
				
					row["TRNSFR_DATE"] = entity.TrnsfrDate.HasValue ? (object) entity.TrnsfrDate  : System.DBNull.Value;
							
				
					row["ORG_FACULTY_NAME_AR"] = entity.OrgFacultyNameAr;
							
				
					row["STUD_FEE_BALANCE"] = entity.StudFeeBalance.HasValue ? (object) entity.StudFeeBalance  : System.DBNull.Value;
							
				
					row["ACCUM_PRCENT"] = entity.AccumPrcent.HasValue ? (object) entity.AccumPrcent  : System.DBNull.Value;
							
				
					row["HEC_ID"] = entity.HecId;
							
				
					row["EXPCTD_GRAD_DATE"] = entity.ExpctdGradDate.HasValue ? (object) entity.ExpctdGradDate  : System.DBNull.Value;
							
				
					row["ACCUM_MARKS"] = entity.AccumMarks.HasValue ? (object) entity.AccumMarks  : System.DBNull.Value;
							
				
					row["ACCUM_COURSE_MARKS"] = entity.AccumCourseMarks.HasValue ? (object) entity.AccumCourseMarks  : System.DBNull.Value;
							
				
					row["Mother_ID"] = entity.MotherId;
							
				
					row["PART_TIME_FLG"] = entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdStudFaculty entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdStudFaculty object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudFaculty object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudFaculty object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudFaculty entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdStudFacultyId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, entity.EdStudId );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, entity.AsCodeDegreeId );
			database.AddInParameter(commandWrapper, "@StudFacultyCode", DbType.String, entity.StudFacultyCode );
			database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, (entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdAcadYearJoinId", DbType.Decimal, (entity.EdAcadYearJoinId.HasValue ? (object) entity.EdAcadYearJoinId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeSemesterJoinId", DbType.Decimal, (entity.EdCodeSemesterJoinId.HasValue ? (object) entity.EdCodeSemesterJoinId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EnrollDate", DbType.DateTime, (entity.EnrollDate.HasValue ? (object) entity.EnrollDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ComptativeRate", DbType.Decimal, (entity.ComptativeRate.HasValue ? (object) entity.ComptativeRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FullTimeFlg", DbType.Decimal, (entity.FullTimeFlg.HasValue ? (object) entity.FullTimeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, (entity.EdCdeQualPhase.HasValue ? (object) entity.EdCdeQualPhase  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, (entity.EdStudQualId.HasValue ? (object) entity.EdStudQualId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GraduatesFlag", DbType.Decimal, entity.GraduatesFlag );
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, (entity.EdAcadYearId.HasValue ? (object) entity.EdAcadYearId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, (entity.EdCodeSemesterId.HasValue ? (object) entity.EdCodeSemesterId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WithHonor", DbType.Decimal, (entity.WithHonor.HasValue ? (object) entity.WithHonor  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntPolicyAccumHonorId", DbType.Decimal, (entity.EntPolicyAccumHonorId.HasValue ? (object) entity.EntPolicyAccumHonorId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumCredit", DbType.Decimal, (entity.AccumCredit.HasValue ? (object) entity.AccumCredit  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumPoints", DbType.Decimal, (entity.AccumPoints.HasValue ? (object) entity.AccumPoints  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntMainGrad1", DbType.Decimal, (entity.EntMainGrad1.HasValue ? (object) entity.EntMainGrad1  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntMainGrad2", DbType.Decimal, (entity.EntMainGrad2.HasValue ? (object) entity.EntMainGrad2  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntMainGrad3", DbType.Decimal, (entity.EntMainGrad3.HasValue ? (object) entity.EntMainGrad3  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntMainMatrixId", DbType.Decimal, (entity.EntMainMatrixId.HasValue ? (object) entity.EntMainMatrixId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TransferFlg", DbType.Decimal, (entity.TransferFlg.HasValue ? (object) entity.TransferFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCodeTransferTypeId", DbType.Decimal, (entity.AdmCodeTransferTypeId.HasValue ? (object) entity.AdmCodeTransferTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UnivApproveDate", DbType.DateTime, (entity.UnivApproveDate.HasValue ? (object) entity.UnivApproveDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FacApproveDate", DbType.DateTime, (entity.FacApproveDate.HasValue ? (object) entity.FacApproveDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DeptApproveDate", DbType.DateTime, (entity.DeptApproveDate.HasValue ? (object) entity.DeptApproveDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, (entity.EdCodeGradingId.HasValue ? (object) entity.EdCodeGradingId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsActive", DbType.Decimal, entity.IsActive );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@MajorCgpa", DbType.Decimal, (entity.MajorCgpa.HasValue ? (object) entity.MajorCgpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Cgpa", DbType.Decimal, (entity.Cgpa.HasValue ? (object) entity.Cgpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdBylawId", DbType.Decimal, (entity.EdBylawId.HasValue ? (object) entity.EdBylawId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OldAlumniFlg", DbType.Decimal, (entity.OldAlumniFlg.HasValue ? (object) entity.OldAlumniFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StudCardFlg", DbType.Decimal, (entity.StudCardFlg.HasValue ? (object) entity.StudCardFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GrantingCode", DbType.String, entity.GrantingCode );
			database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, (entity.IsLast.HasValue ? (object) entity.IsLast  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AmanestPermanentStopFlag", DbType.Decimal, (entity.AmanestPermanentStopFlag.HasValue ? (object) entity.AmanestPermanentStopFlag  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BatchNo", DbType.String, entity.BatchNo );
			database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, (entity.GsCdeHonorId.HasValue ? (object) entity.GsCdeHonorId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TrnsfrFrom", DbType.String, entity.TrnsfrFrom );
			database.AddInParameter(commandWrapper, "@TrnsfrNotes", DbType.String, entity.TrnsfrNotes );
			database.AddInParameter(commandWrapper, "@TrnsfrDate", DbType.DateTime, (entity.TrnsfrDate.HasValue ? (object) entity.TrnsfrDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OrgFacultyNameAr", DbType.String, entity.OrgFacultyNameAr );
			database.AddInParameter(commandWrapper, "@StudFeeBalance", DbType.Decimal, (entity.StudFeeBalance.HasValue ? (object) entity.StudFeeBalance  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumPrcent", DbType.Decimal, (entity.AccumPrcent.HasValue ? (object) entity.AccumPrcent  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HecId", DbType.String, entity.HecId );
			database.AddInParameter(commandWrapper, "@ExpctdGradDate", DbType.DateTime, (entity.ExpctdGradDate.HasValue ? (object) entity.ExpctdGradDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumMarks", DbType.Decimal, (entity.AccumMarks.HasValue ? (object) entity.AccumMarks  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumCourseMarks", DbType.Decimal, (entity.AccumCourseMarks.HasValue ? (object) entity.AccumCourseMarks  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MotherId", DbType.String, entity.MotherId );
			database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Boolean, (entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edStudFacultyId = database.GetParameterValue(commandWrapper, "@EdStudFacultyId");
			entity.EdStudFacultyId = (System.Decimal)_edStudFacultyId;
			
			entity.OriginalEdStudFacultyId = entity.EdStudFacultyId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudFaculty object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdStudFaculty object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudFaculty entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_FACULTY_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdStudFacultyId", DbType.Decimal, entity.EdStudFacultyId );
			database.AddInParameter(commandWrapper, "@OriginalEdStudFacultyId", DbType.Decimal, entity.OriginalEdStudFacultyId);
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, entity.EdStudId );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, entity.AsCodeDegreeId );
			database.AddInParameter(commandWrapper, "@StudFacultyCode", DbType.String, entity.StudFacultyCode );
			database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, (entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdAcadYearJoinId", DbType.Decimal, (entity.EdAcadYearJoinId.HasValue ? (object) entity.EdAcadYearJoinId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterJoinId", DbType.Decimal, (entity.EdCodeSemesterJoinId.HasValue ? (object) entity.EdCodeSemesterJoinId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EnrollDate", DbType.DateTime, (entity.EnrollDate.HasValue ? (object) entity.EnrollDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ComptativeRate", DbType.Decimal, (entity.ComptativeRate.HasValue ? (object) entity.ComptativeRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FullTimeFlg", DbType.Decimal, (entity.FullTimeFlg.HasValue ? (object) entity.FullTimeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, (entity.EdCdeQualPhase.HasValue ? (object) entity.EdCdeQualPhase : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, (entity.EdStudQualId.HasValue ? (object) entity.EdStudQualId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GraduatesFlag", DbType.Decimal, entity.GraduatesFlag );
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, (entity.EdAcadYearId.HasValue ? (object) entity.EdAcadYearId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, (entity.EdCodeSemesterId.HasValue ? (object) entity.EdCodeSemesterId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WithHonor", DbType.Decimal, (entity.WithHonor.HasValue ? (object) entity.WithHonor : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntPolicyAccumHonorId", DbType.Decimal, (entity.EntPolicyAccumHonorId.HasValue ? (object) entity.EntPolicyAccumHonorId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumCredit", DbType.Decimal, (entity.AccumCredit.HasValue ? (object) entity.AccumCredit : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumPoints", DbType.Decimal, (entity.AccumPoints.HasValue ? (object) entity.AccumPoints : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntMainGrad1", DbType.Decimal, (entity.EntMainGrad1.HasValue ? (object) entity.EntMainGrad1 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntMainGrad2", DbType.Decimal, (entity.EntMainGrad2.HasValue ? (object) entity.EntMainGrad2 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntMainGrad3", DbType.Decimal, (entity.EntMainGrad3.HasValue ? (object) entity.EntMainGrad3 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntMainMatrixId", DbType.Decimal, (entity.EntMainMatrixId.HasValue ? (object) entity.EntMainMatrixId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TransferFlg", DbType.Decimal, (entity.TransferFlg.HasValue ? (object) entity.TransferFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCodeTransferTypeId", DbType.Decimal, (entity.AdmCodeTransferTypeId.HasValue ? (object) entity.AdmCodeTransferTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UnivApproveDate", DbType.DateTime, (entity.UnivApproveDate.HasValue ? (object) entity.UnivApproveDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FacApproveDate", DbType.DateTime, (entity.FacApproveDate.HasValue ? (object) entity.FacApproveDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DeptApproveDate", DbType.DateTime, (entity.DeptApproveDate.HasValue ? (object) entity.DeptApproveDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, (entity.EdCodeGradingId.HasValue ? (object) entity.EdCodeGradingId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsActive", DbType.Decimal, entity.IsActive );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@MajorCgpa", DbType.Decimal, (entity.MajorCgpa.HasValue ? (object) entity.MajorCgpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Cgpa", DbType.Decimal, (entity.Cgpa.HasValue ? (object) entity.Cgpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdBylawId", DbType.Decimal, (entity.EdBylawId.HasValue ? (object) entity.EdBylawId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OldAlumniFlg", DbType.Decimal, (entity.OldAlumniFlg.HasValue ? (object) entity.OldAlumniFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StudCardFlg", DbType.Decimal, (entity.StudCardFlg.HasValue ? (object) entity.StudCardFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GrantingCode", DbType.String, entity.GrantingCode );
			database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, (entity.IsLast.HasValue ? (object) entity.IsLast : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AmanestPermanentStopFlag", DbType.Decimal, (entity.AmanestPermanentStopFlag.HasValue ? (object) entity.AmanestPermanentStopFlag : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BatchNo", DbType.String, entity.BatchNo );
			database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, (entity.GsCdeHonorId.HasValue ? (object) entity.GsCdeHonorId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TrnsfrFrom", DbType.String, entity.TrnsfrFrom );
			database.AddInParameter(commandWrapper, "@TrnsfrNotes", DbType.String, entity.TrnsfrNotes );
			database.AddInParameter(commandWrapper, "@TrnsfrDate", DbType.DateTime, (entity.TrnsfrDate.HasValue ? (object) entity.TrnsfrDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OrgFacultyNameAr", DbType.String, entity.OrgFacultyNameAr );
			database.AddInParameter(commandWrapper, "@StudFeeBalance", DbType.Decimal, (entity.StudFeeBalance.HasValue ? (object) entity.StudFeeBalance : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumPrcent", DbType.Decimal, (entity.AccumPrcent.HasValue ? (object) entity.AccumPrcent : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HecId", DbType.String, entity.HecId );
			database.AddInParameter(commandWrapper, "@ExpctdGradDate", DbType.DateTime, (entity.ExpctdGradDate.HasValue ? (object) entity.ExpctdGradDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumMarks", DbType.Decimal, (entity.AccumMarks.HasValue ? (object) entity.AccumMarks : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumCourseMarks", DbType.Decimal, (entity.AccumCourseMarks.HasValue ? (object) entity.AccumCourseMarks : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MotherId", DbType.String, entity.MotherId );
			database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Boolean, (entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdStudFacultyId = entity.EdStudFacultyId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
