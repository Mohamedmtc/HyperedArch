/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlPgExtMemberProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="PgExtMember"/> entity.
	///</summary>
	public abstract partial class SqlPgExtMemberProviderBase : PgExtMemberProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlPgExtMemberProviderBase"/> instance.
		/// </summary>
		public SqlPgExtMemberProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlPgExtMemberProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlPgExtMemberProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_pgExtMemberId">مسلسل مشرف/محكم خارجى. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _pgExtMemberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@PgExtMemberId", DbType.Decimal, _pgExtMemberId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(PgExtMember)
					,_pgExtMemberId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
		public override TList<PgExtMember> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<PgExtMember>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@PgExtMemberId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberJob", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberHireDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WorkPlaceType", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SaCodeOrgId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Address", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EMail", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MobNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdentNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MemberQualMajorAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsActive", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("pg_ext_member_id ") || clause.Trim().StartsWith("pg_ext_member_id="))
				{
					database.SetParameterValue(commandWrapper, "@PgExtMemberId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("member_code ") || clause.Trim().StartsWith("member_code="))
				{
					database.SetParameterValue(commandWrapper, "@MemberCode", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("member_name_ar ") || clause.Trim().StartsWith("member_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@MemberNameAr", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("member_name_en ") || clause.Trim().StartsWith("member_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@MemberNameEn", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_gender_id ") || clause.Trim().StartsWith("gs_code_gender_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeGenderId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("member_job ") || clause.Trim().StartsWith("member_job="))
				{
					database.SetParameterValue(commandWrapper, "@MemberJob", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("member_hire_date ") || clause.Trim().StartsWith("member_hire_date="))
				{
					database.SetParameterValue(commandWrapper, "@MemberHireDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("work_place_type ") || clause.Trim().StartsWith("work_place_type="))
				{
					database.SetParameterValue(commandWrapper, "@WorkPlaceType", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sa_code_sc_deg_id ") || clause.Trim().StartsWith("sa_code_sc_deg_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaCodeScDegId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sa_code_org_id ") || clause.Trim().StartsWith("sa_code_org_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaCodeOrgId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_universities_id ") || clause.Trim().StartsWith("gs_cde_universities_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeUniversitiesId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_info_id ") || clause.Trim().StartsWith("gs_country_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("address ") || clause.Trim().StartsWith("address="))
				{
					database.SetParameterValue(commandWrapper, "@Address", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("e_mail ") || clause.Trim().StartsWith("e_mail="))
				{
					database.SetParameterValue(commandWrapper, "@EMail", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mob_num ") || clause.Trim().StartsWith("mob_num="))
				{
					database.SetParameterValue(commandWrapper, "@MobNum", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_ident_type_id ") || clause.Trim().StartsWith("gs_code_ident_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeIdentTypeId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ident_number ") || clause.Trim().StartsWith("ident_number="))
				{
					database.SetParameterValue(commandWrapper, "@IdentNumber", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("member_qual_major_ar ") || clause.Trim().StartsWith("member_qual_major_ar="))
				{
					database.SetParameterValue(commandWrapper, "@MemberQualMajorAr", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_active ") || clause.Trim().StartsWith("is_active="))
				{
					database.SetParameterValue(commandWrapper, "@IsActive", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<PgExtMember> rows = new TList<PgExtMember>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
		public override TList<PgExtMember> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_Find_Dynamic", typeof(PgExtMemberColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<PgExtMember> rows = new TList<PgExtMember>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<PgExtMember> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<PgExtMember> rows = new TList<PgExtMember>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
		public override TList<PgExtMember> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<PgExtMember> rows = new TList<PgExtMember>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetBySaCodeScDegId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_AUTO_039b key.
		///		FK_AUTO_039b Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saCodeScDegId">الدرجة العلمية</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<PgExtMember> GetBySaCodeScDegId(TransactionManager transactionManager, System.Decimal _saCodeScDegId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetBySaCodeScDegId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, _saCodeScDegId);
			
			IDataReader reader = null;
			TList<PgExtMember> rows = new TList<PgExtMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaCodeScDegId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaCodeScDegId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeUniversitiesId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_PG_EXT_MEMBER_GS_CDE_UNIVERSITIES key.
		///		FK_PG_EXT_MEMBER_GS_CDE_UNIVERSITIES Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeUniversitiesId">اسم الجامعه</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<PgExtMember> GetByGsCdeUniversitiesId(TransactionManager transactionManager, System.Decimal? _gsCdeUniversitiesId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetByGsCdeUniversitiesId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, _gsCdeUniversitiesId);
			
			IDataReader reader = null;
			TList<PgExtMember> rows = new TList<PgExtMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeUniversitiesId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeUniversitiesId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeGenderId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_PG_EXT_MEMBER_GS_CODE_GENDER key.
		///		FK_PG_EXT_MEMBER_GS_CODE_GENDER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeGenderId">النوع (ذكر أو انثى)</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<PgExtMember> GetByGsCodeGenderId(TransactionManager transactionManager, System.Decimal _gsCodeGenderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetByGsCodeGenderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, _gsCodeGenderId);
			
			IDataReader reader = null;
			TList<PgExtMember> rows = new TList<PgExtMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeIdentTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_PG_EXT_MEMBER_GS_CODE_IDENT_TYPE key.
		///		FK_PG_EXT_MEMBER_GS_CODE_IDENT_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeIdentTypeId">نوع تحقيق الشخصية</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<PgExtMember> GetByGsCodeIdentTypeId(TransactionManager transactionManager, System.Decimal? _gsCodeIdentTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetByGsCodeIdentTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, _gsCodeIdentTypeId);
			
			IDataReader reader = null;
			TList<PgExtMember> rows = new TList<PgExtMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeIdentTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeIdentTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCountryInfoId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_PG_EXT_MEMBER_GS_COUNTRY_NODE key.
		///		FK_PG_EXT_MEMBER_GS_COUNTRY_NODE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryInfoId">الجنسية</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<PgExtMember> GetByGsCountryInfoId(TransactionManager transactionManager, System.Decimal? _gsCountryInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetByGsCountryInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, _gsCountryInfoId);
			
			IDataReader reader = null;
			TList<PgExtMember> rows = new TList<PgExtMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySaCodeOrgId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_PG_EXT_MEMBER_SA_CODE_ORG key.
		///		FK_PG_EXT_MEMBER_SA_CODE_ORG Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saCodeOrgId">XXX'جهة العمل'XX</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.PgExtMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<PgExtMember> GetBySaCodeOrgId(TransactionManager transactionManager, System.Decimal? _saCodeOrgId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetBySaCodeOrgId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaCodeOrgId", DbType.Decimal, _saCodeOrgId);
			
			IDataReader reader = null;
			TList<PgExtMember> rows = new TList<PgExtMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaCodeOrgId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaCodeOrgId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByPgExtMemberId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_PG_EXT_SUPERVISOR index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_pgExtMemberId">مسلسل مشرف/محكم خارجى</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.PgExtMember"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.PgExtMember GetByPgExtMemberId(TransactionManager transactionManager, System.Decimal _pgExtMemberId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_GetByPgExtMemberId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PgExtMemberId", DbType.Decimal, _pgExtMemberId);
			
			IDataReader reader = null;
			TList<PgExtMember> tmp = new TList<PgExtMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPgExtMemberId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPgExtMemberId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.PgExtMember object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.PgExtMember> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "PG_EXT_MEMBER";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("PG_EXT_MEMBER_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MEMBER_CODE", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("MEMBER_NAME_AR", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("MEMBER_NAME_EN", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("GS_CODE_GENDER_ID", typeof(System.Decimal));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("MEMBER_JOB", typeof(System.String));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("MEMBER_HIRE_DATE", typeof(System.DateTime));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("WORK_PLACE_TYPE", typeof(System.Decimal));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("SA_CODE_SC_DEG_ID", typeof(System.Decimal));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("SA_CODE_ORG_ID", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("GS_CDE_UNIVERSITIES_ID", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("GS_COUNTRY_INFO_ID", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("ADDRESS", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("E_MAIL", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("MOB_NUM", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("GS_CODE_IDENT_TYPE_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("IDENT_NUMBER", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("MEMBER_QUAL_MAJOR_AR", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("NOTES", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("IS_ACTIVE", typeof(System.Boolean));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("PG_EXT_MEMBER_ID", "PG_EXT_MEMBER_ID");
			bulkCopy.ColumnMappings.Add("MEMBER_CODE", "MEMBER_CODE");
			bulkCopy.ColumnMappings.Add("MEMBER_NAME_AR", "MEMBER_NAME_AR");
			bulkCopy.ColumnMappings.Add("MEMBER_NAME_EN", "MEMBER_NAME_EN");
			bulkCopy.ColumnMappings.Add("GS_CODE_GENDER_ID", "GS_CODE_GENDER_ID");
			bulkCopy.ColumnMappings.Add("MEMBER_JOB", "MEMBER_JOB");
			bulkCopy.ColumnMappings.Add("MEMBER_HIRE_DATE", "MEMBER_HIRE_DATE");
			bulkCopy.ColumnMappings.Add("WORK_PLACE_TYPE", "WORK_PLACE_TYPE");
			bulkCopy.ColumnMappings.Add("SA_CODE_SC_DEG_ID", "SA_CODE_SC_DEG_ID");
			bulkCopy.ColumnMappings.Add("SA_CODE_ORG_ID", "SA_CODE_ORG_ID");
			bulkCopy.ColumnMappings.Add("GS_CDE_UNIVERSITIES_ID", "GS_CDE_UNIVERSITIES_ID");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_INFO_ID", "GS_COUNTRY_INFO_ID");
			bulkCopy.ColumnMappings.Add("ADDRESS", "ADDRESS");
			bulkCopy.ColumnMappings.Add("E_MAIL", "E_MAIL");
			bulkCopy.ColumnMappings.Add("MOB_NUM", "MOB_NUM");
			bulkCopy.ColumnMappings.Add("GS_CODE_IDENT_TYPE_ID", "GS_CODE_IDENT_TYPE_ID");
			bulkCopy.ColumnMappings.Add("IDENT_NUMBER", "IDENT_NUMBER");
			bulkCopy.ColumnMappings.Add("MEMBER_QUAL_MAJOR_AR", "MEMBER_QUAL_MAJOR_AR");
			bulkCopy.ColumnMappings.Add("NOTES", "NOTES");
			bulkCopy.ColumnMappings.Add("IS_ACTIVE", "IS_ACTIVE");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			
			foreach(UMIS_VER2.BusinessLyer.PgExtMember entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["PG_EXT_MEMBER_ID"] = entity.PgExtMemberId;
							
				
					row["MEMBER_CODE"] = entity.MemberCode;
							
				
					row["MEMBER_NAME_AR"] = entity.MemberNameAr;
							
				
					row["MEMBER_NAME_EN"] = entity.MemberNameEn;
							
				
					row["GS_CODE_GENDER_ID"] = entity.GsCodeGenderId;
							
				
					row["MEMBER_JOB"] = entity.MemberJob;
							
				
					row["MEMBER_HIRE_DATE"] = entity.MemberHireDate.HasValue ? (object) entity.MemberHireDate  : System.DBNull.Value;
							
				
					row["WORK_PLACE_TYPE"] = entity.WorkPlaceType;
							
				
					row["SA_CODE_SC_DEG_ID"] = entity.SaCodeScDegId;
							
				
					row["SA_CODE_ORG_ID"] = entity.SaCodeOrgId.HasValue ? (object) entity.SaCodeOrgId  : System.DBNull.Value;
							
				
					row["GS_CDE_UNIVERSITIES_ID"] = entity.GsCdeUniversitiesId.HasValue ? (object) entity.GsCdeUniversitiesId  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_INFO_ID"] = entity.GsCountryInfoId.HasValue ? (object) entity.GsCountryInfoId  : System.DBNull.Value;
							
				
					row["ADDRESS"] = entity.Address;
							
				
					row["E_MAIL"] = entity.EMail;
							
				
					row["MOB_NUM"] = entity.MobNum;
							
				
					row["GS_CODE_IDENT_TYPE_ID"] = entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId  : System.DBNull.Value;
							
				
					row["IDENT_NUMBER"] = entity.IdentNumber;
							
				
					row["MEMBER_QUAL_MAJOR_AR"] = entity.MemberQualMajorAr;
							
				
					row["NOTES"] = entity.Notes;
							
				
					row["IS_ACTIVE"] = entity.IsActive.HasValue ? (object) entity.IsActive  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.PgExtMember entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.PgExtMember object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.PgExtMember object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.PgExtMember object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.PgExtMember entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@PgExtMemberId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@MemberCode", DbType.String, entity.MemberCode );
			database.AddInParameter(commandWrapper, "@MemberNameAr", DbType.String, entity.MemberNameAr );
			database.AddInParameter(commandWrapper, "@MemberNameEn", DbType.String, entity.MemberNameEn );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, entity.GsCodeGenderId );
			database.AddInParameter(commandWrapper, "@MemberJob", DbType.String, entity.MemberJob );
			database.AddInParameter(commandWrapper, "@MemberHireDate", DbType.DateTime, (entity.MemberHireDate.HasValue ? (object) entity.MemberHireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WorkPlaceType", DbType.Decimal, entity.WorkPlaceType );
			database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, entity.SaCodeScDegId );
			database.AddInParameter(commandWrapper, "@SaCodeOrgId", DbType.Decimal, (entity.SaCodeOrgId.HasValue ? (object) entity.SaCodeOrgId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, (entity.GsCdeUniversitiesId.HasValue ? (object) entity.GsCdeUniversitiesId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, (entity.GsCountryInfoId.HasValue ? (object) entity.GsCountryInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Address", DbType.String, entity.Address );
			database.AddInParameter(commandWrapper, "@EMail", DbType.String, entity.EMail );
			database.AddInParameter(commandWrapper, "@MobNum", DbType.String, entity.MobNum );
			database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, (entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdentNumber", DbType.String, entity.IdentNumber );
			database.AddInParameter(commandWrapper, "@MemberQualMajorAr", DbType.String, entity.MemberQualMajorAr );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@IsActive", DbType.Boolean, (entity.IsActive.HasValue ? (object) entity.IsActive  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _pgExtMemberId = database.GetParameterValue(commandWrapper, "@PgExtMemberId");
			entity.PgExtMemberId = (System.Decimal)_pgExtMemberId;
			
			entity.OriginalPgExtMemberId = entity.PgExtMemberId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.PgExtMember object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.PgExtMember object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.PgExtMember entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.PG_EXT_MEMBER_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@PgExtMemberId", DbType.Decimal, entity.PgExtMemberId );
			database.AddInParameter(commandWrapper, "@OriginalPgExtMemberId", DbType.Decimal, entity.OriginalPgExtMemberId);
			database.AddInParameter(commandWrapper, "@MemberCode", DbType.String, entity.MemberCode );
			database.AddInParameter(commandWrapper, "@MemberNameAr", DbType.String, entity.MemberNameAr );
			database.AddInParameter(commandWrapper, "@MemberNameEn", DbType.String, entity.MemberNameEn );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, entity.GsCodeGenderId );
			database.AddInParameter(commandWrapper, "@MemberJob", DbType.String, entity.MemberJob );
			database.AddInParameter(commandWrapper, "@MemberHireDate", DbType.DateTime, (entity.MemberHireDate.HasValue ? (object) entity.MemberHireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WorkPlaceType", DbType.Decimal, entity.WorkPlaceType );
			database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, entity.SaCodeScDegId );
			database.AddInParameter(commandWrapper, "@SaCodeOrgId", DbType.Decimal, (entity.SaCodeOrgId.HasValue ? (object) entity.SaCodeOrgId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, (entity.GsCdeUniversitiesId.HasValue ? (object) entity.GsCdeUniversitiesId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, (entity.GsCountryInfoId.HasValue ? (object) entity.GsCountryInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Address", DbType.String, entity.Address );
			database.AddInParameter(commandWrapper, "@EMail", DbType.String, entity.EMail );
			database.AddInParameter(commandWrapper, "@MobNum", DbType.String, entity.MobNum );
			database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, (entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdentNumber", DbType.String, entity.IdentNumber );
			database.AddInParameter(commandWrapper, "@MemberQualMajorAr", DbType.String, entity.MemberQualMajorAr );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@IsActive", DbType.Boolean, (entity.IsActive.HasValue ? (object) entity.IsActive : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalPgExtMemberId = entity.PgExtMemberId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
