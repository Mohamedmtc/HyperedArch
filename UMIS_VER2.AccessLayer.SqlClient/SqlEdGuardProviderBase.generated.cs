/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdGuardProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdGuard"/> entity.
	///</summary>
	public abstract partial class SqlEdGuardProviderBase : EdGuardProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdGuardProviderBase"/> instance.
		/// </summary>
		public SqlEdGuardProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdGuardProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdGuardProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edGuardId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edGuardId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdGuardId", DbType.Decimal, _edGuardId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdGuard)
					,_edGuardId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
		public override TList<EdGuard> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdGuard>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdGuardId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@JobTitle", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PermAddr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EMail", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhoneNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MobileNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MonthIncome", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StaffFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiplomaticFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BirthDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeEducationLevelId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompanyName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cpr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResidentExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResidentId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Username", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PasswordSalt", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PasswordHash", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurityQs", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurityQsAnsSalt", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurityQsAnsHash", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmpFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WorkAddress", DbType.String, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_guard_id ") || clause.Trim().StartsWith("ed_guard_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdGuardId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_name_en ") || clause.Trim().StartsWith("full_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@FullNameEn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("job_title ") || clause.Trim().StartsWith("job_title="))
				{
					database.SetParameterValue(commandWrapper, "@JobTitle", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("perm_addr ") || clause.Trim().StartsWith("perm_addr="))
				{
					database.SetParameterValue(commandWrapper, "@PermAddr", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("e_mail ") || clause.Trim().StartsWith("e_mail="))
				{
					database.SetParameterValue(commandWrapper, "@EMail", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phone_num ") || clause.Trim().StartsWith("phone_num="))
				{
					database.SetParameterValue(commandWrapper, "@PhoneNum", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mobile_num ") || clause.Trim().StartsWith("mobile_num="))
				{
					database.SetParameterValue(commandWrapper, "@MobileNum", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("month_income ") || clause.Trim().StartsWith("month_income="))
				{
					database.SetParameterValue(commandWrapper, "@MonthIncome", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("staff_flg ") || clause.Trim().StartsWith("staff_flg="))
				{
					database.SetParameterValue(commandWrapper, "@StaffFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("diplomatic_flg ") || clause.Trim().StartsWith("diplomatic_flg="))
				{
					database.SetParameterValue(commandWrapper, "@DiplomaticFlg", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sa_stf_member_id ") || clause.Trim().StartsWith("sa_stf_member_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaStfMemberId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("birth_date ") || clause.Trim().StartsWith("birth_date="))
				{
					database.SetParameterValue(commandWrapper, "@BirthDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_marital_state_id ") || clause.Trim().StartsWith("gs_code_marital_state_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeMaritalStateId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_education_level_id ") || clause.Trim().StartsWith("gs_code_education_level_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeEducationLevelId", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("company_name ") || clause.Trim().StartsWith("company_name="))
				{
					database.SetParameterValue(commandWrapper, "@CompanyName", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_node_id ") || clause.Trim().StartsWith("gs_country_node_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryNodeId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_name_ar ") || clause.Trim().StartsWith("full_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@FullNameAr", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cpr ") || clause.Trim().StartsWith("cpr="))
				{
					database.SetParameterValue(commandWrapper, "@Cpr", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_no ") || clause.Trim().StartsWith("passpor_no="))
				{
					database.SetParameterValue(commandWrapper, "@PassporNo", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_expire_date ") || clause.Trim().StartsWith("passpor_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@PassporExpireDate", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("resident_expire_date ") || clause.Trim().StartsWith("resident_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@ResidentExpireDate", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("resident_id ") || clause.Trim().StartsWith("resident_id="))
				{
					database.SetParameterValue(commandWrapper, "@ResidentId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("username ") || clause.Trim().StartsWith("username="))
				{
					database.SetParameterValue(commandWrapper, "@Username", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("password_salt ") || clause.Trim().StartsWith("password_salt="))
				{
					database.SetParameterValue(commandWrapper, "@PasswordSalt", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("password_hash ") || clause.Trim().StartsWith("password_hash="))
				{
					database.SetParameterValue(commandWrapper, "@PasswordHash", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("security_qs ") || clause.Trim().StartsWith("security_qs="))
				{
					database.SetParameterValue(commandWrapper, "@SecurityQs", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("security_qs_ans_salt ") || clause.Trim().StartsWith("security_qs_ans_salt="))
				{
					database.SetParameterValue(commandWrapper, "@SecurityQsAnsSalt", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("security_qs_ans_hash ") || clause.Trim().StartsWith("security_qs_ans_hash="))
				{
					database.SetParameterValue(commandWrapper, "@SecurityQsAnsHash", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("emp_flg ") || clause.Trim().StartsWith("emp_flg="))
				{
					database.SetParameterValue(commandWrapper, "@EmpFlg", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("work_address ") || clause.Trim().StartsWith("work_address="))
				{
					database.SetParameterValue(commandWrapper, "@WorkAddress", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdGuard> rows = new TList<EdGuard>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
		public override TList<EdGuard> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_Find_Dynamic", typeof(EdGuardColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdGuard> rows = new TList<EdGuard>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdGuard> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdGuard> rows = new TList<EdGuard>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
		public override TList<EdGuard> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdGuard> rows = new TList<EdGuard>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByGsCodeMaritalStateId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_GUARD_GS_CDE_MARITAL_STATUS key.
		///		FK_ED_GUARD_GS_CDE_MARITAL_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeMaritalStateId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdGuard> GetByGsCodeMaritalStateId(TransactionManager transactionManager, System.Decimal? _gsCodeMaritalStateId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_GetByGsCodeMaritalStateId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, _gsCodeMaritalStateId);
			
			IDataReader reader = null;
			TList<EdGuard> rows = new TList<EdGuard>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeMaritalStateId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeMaritalStateId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCountryNodeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_GUARD_GS_COUNTRY_NODE key.
		///		FK_ED_GUARD_GS_COUNTRY_NODE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryNodeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdGuard> GetByGsCountryNodeId(TransactionManager transactionManager, System.Decimal? _gsCountryNodeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_GetByGsCountryNodeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, _gsCountryNodeId);
			
			IDataReader reader = null;
			TList<EdGuard> rows = new TList<EdGuard>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeEducationLevelId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_GUARD_GS_CODE_EDUCATION_LEVEL key.
		///		FK_ED_STUD_GUARD_GS_CODE_EDUCATION_LEVEL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeEducationLevelId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdGuard> GetByGsCodeEducationLevelId(TransactionManager transactionManager, System.Decimal? _gsCodeEducationLevelId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_GetByGsCodeEducationLevelId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeEducationLevelId", DbType.Decimal, _gsCodeEducationLevelId);
			
			IDataReader reader = null;
			TList<EdGuard> rows = new TList<EdGuard>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeEducationLevelId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeEducationLevelId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySaStfMemberId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_GUARD_SA_STF_MEMBER key.
		///		FK_ED_STUD_GUARD_SA_STF_MEMBER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saStfMemberId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdGuard objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdGuard> GetBySaStfMemberId(TransactionManager transactionManager, System.Decimal? _saStfMemberId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_GetBySaStfMemberId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, _saStfMemberId);
			
			IDataReader reader = null;
			TList<EdGuard> rows = new TList<EdGuard>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaStfMemberId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaStfMemberId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByEdGuardId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ED_GUARD index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edGuardId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdGuard"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdGuard GetByEdGuardId(TransactionManager transactionManager, System.Decimal _edGuardId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_GetByEdGuardId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdGuardId", DbType.Decimal, _edGuardId);
			
			IDataReader reader = null;
			TList<EdGuard> tmp = new TList<EdGuard>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdGuardId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdGuardId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdGuard object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdGuard> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_GUARD";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_GUARD_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("FULL_NAME_EN", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("JOB_TITLE", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("PERM_ADDR", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("E_MAIL", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("PHONE_NUM", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("MOBILE_NUM", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("MONTH_INCOME", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("STAFF_FLG", typeof(System.Decimal));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("DIPLOMATIC_FLG", typeof(System.Decimal));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("SA_STF_MEMBER_ID", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("BIRTH_DATE", typeof(System.DateTime));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("GS_CODE_MARITAL_STATE_ID", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("GS_CODE_EDUCATION_LEVEL_ID", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("COMPANY_NAME", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("GS_COUNTRY_NODE_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("FULL_NAME_AR", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("CPR", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("PASSPOR_NO", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("PASSPOR_EXPIRE_DATE", typeof(System.DateTime));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("RESIDENT_EXPIRE_DATE", typeof(System.DateTime));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("RESIDENT_ID", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("USERNAME", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("PASSWORD_SALT", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("PASSWORD_HASH", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("SECURITY_QS", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("SECURITY_QS_ANS_SALT", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("SECURITY_QS_ANS_HASH", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("EMP_FLG", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("WORK_ADDRESS", typeof(System.String));
			col29.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_GUARD_ID", "ED_GUARD_ID");
			bulkCopy.ColumnMappings.Add("FULL_NAME_EN", "FULL_NAME_EN");
			bulkCopy.ColumnMappings.Add("JOB_TITLE", "JOB_TITLE");
			bulkCopy.ColumnMappings.Add("PERM_ADDR", "PERM_ADDR");
			bulkCopy.ColumnMappings.Add("E_MAIL", "E_MAIL");
			bulkCopy.ColumnMappings.Add("PHONE_NUM", "PHONE_NUM");
			bulkCopy.ColumnMappings.Add("MOBILE_NUM", "MOBILE_NUM");
			bulkCopy.ColumnMappings.Add("MONTH_INCOME", "MONTH_INCOME");
			bulkCopy.ColumnMappings.Add("STAFF_FLG", "STAFF_FLG");
			bulkCopy.ColumnMappings.Add("DIPLOMATIC_FLG", "DIPLOMATIC_FLG");
			bulkCopy.ColumnMappings.Add("SA_STF_MEMBER_ID", "SA_STF_MEMBER_ID");
			bulkCopy.ColumnMappings.Add("BIRTH_DATE", "BIRTH_DATE");
			bulkCopy.ColumnMappings.Add("GS_CODE_MARITAL_STATE_ID", "GS_CODE_MARITAL_STATE_ID");
			bulkCopy.ColumnMappings.Add("GS_CODE_EDUCATION_LEVEL_ID", "GS_CODE_EDUCATION_LEVEL_ID");
			bulkCopy.ColumnMappings.Add("COMPANY_NAME", "COMPANY_NAME");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_NODE_ID", "GS_COUNTRY_NODE_ID");
			bulkCopy.ColumnMappings.Add("FULL_NAME_AR", "FULL_NAME_AR");
			bulkCopy.ColumnMappings.Add("CPR", "CPR");
			bulkCopy.ColumnMappings.Add("PASSPOR_NO", "PASSPOR_NO");
			bulkCopy.ColumnMappings.Add("PASSPOR_EXPIRE_DATE", "PASSPOR_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("RESIDENT_EXPIRE_DATE", "RESIDENT_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("RESIDENT_ID", "RESIDENT_ID");
			bulkCopy.ColumnMappings.Add("USERNAME", "USERNAME");
			bulkCopy.ColumnMappings.Add("PASSWORD_SALT", "PASSWORD_SALT");
			bulkCopy.ColumnMappings.Add("PASSWORD_HASH", "PASSWORD_HASH");
			bulkCopy.ColumnMappings.Add("SECURITY_QS", "SECURITY_QS");
			bulkCopy.ColumnMappings.Add("SECURITY_QS_ANS_SALT", "SECURITY_QS_ANS_SALT");
			bulkCopy.ColumnMappings.Add("SECURITY_QS_ANS_HASH", "SECURITY_QS_ANS_HASH");
			bulkCopy.ColumnMappings.Add("EMP_FLG", "EMP_FLG");
			bulkCopy.ColumnMappings.Add("WORK_ADDRESS", "WORK_ADDRESS");
			
			foreach(UMIS_VER2.BusinessLyer.EdGuard entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_GUARD_ID"] = entity.EdGuardId;
							
				
					row["FULL_NAME_EN"] = entity.FullNameEn;
							
				
					row["JOB_TITLE"] = entity.JobTitle;
							
				
					row["PERM_ADDR"] = entity.PermAddr;
							
				
					row["E_MAIL"] = entity.EMail;
							
				
					row["PHONE_NUM"] = entity.PhoneNum;
							
				
					row["MOBILE_NUM"] = entity.MobileNum;
							
				
					row["MONTH_INCOME"] = entity.MonthIncome.HasValue ? (object) entity.MonthIncome  : System.DBNull.Value;
							
				
					row["STAFF_FLG"] = entity.StaffFlg;
							
				
					row["DIPLOMATIC_FLG"] = entity.DiplomaticFlg;
							
				
					row["SA_STF_MEMBER_ID"] = entity.SaStfMemberId.HasValue ? (object) entity.SaStfMemberId  : System.DBNull.Value;
							
				
					row["BIRTH_DATE"] = entity.BirthDate.HasValue ? (object) entity.BirthDate  : System.DBNull.Value;
							
				
					row["GS_CODE_MARITAL_STATE_ID"] = entity.GsCodeMaritalStateId.HasValue ? (object) entity.GsCodeMaritalStateId  : System.DBNull.Value;
							
				
					row["GS_CODE_EDUCATION_LEVEL_ID"] = entity.GsCodeEducationLevelId.HasValue ? (object) entity.GsCodeEducationLevelId  : System.DBNull.Value;
							
				
					row["COMPANY_NAME"] = entity.CompanyName;
							
				
					row["GS_COUNTRY_NODE_ID"] = entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value;
							
				
					row["FULL_NAME_AR"] = entity.FullNameAr;
							
				
					row["CPR"] = entity.Cpr;
							
				
					row["PASSPOR_NO"] = entity.PassporNo;
							
				
					row["PASSPOR_EXPIRE_DATE"] = entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate  : System.DBNull.Value;
							
				
					row["RESIDENT_EXPIRE_DATE"] = entity.ResidentExpireDate.HasValue ? (object) entity.ResidentExpireDate  : System.DBNull.Value;
							
				
					row["RESIDENT_ID"] = entity.ResidentId;
							
				
					row["USERNAME"] = entity.Username;
							
				
					row["PASSWORD_SALT"] = entity.PasswordSalt;
							
				
					row["PASSWORD_HASH"] = entity.PasswordHash;
							
				
					row["SECURITY_QS"] = entity.SecurityQs;
							
				
					row["SECURITY_QS_ANS_SALT"] = entity.SecurityQsAnsSalt;
							
				
					row["SECURITY_QS_ANS_HASH"] = entity.SecurityQsAnsHash;
							
				
					row["EMP_FLG"] = entity.EmpFlg.HasValue ? (object) entity.EmpFlg  : System.DBNull.Value;
							
				
					row["WORK_ADDRESS"] = entity.WorkAddress;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdGuard entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdGuard object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdGuard object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdGuard object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdGuard entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdGuardId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, entity.FullNameEn );
			database.AddInParameter(commandWrapper, "@JobTitle", DbType.String, entity.JobTitle );
			database.AddInParameter(commandWrapper, "@PermAddr", DbType.String, entity.PermAddr );
			database.AddInParameter(commandWrapper, "@EMail", DbType.String, entity.EMail );
			database.AddInParameter(commandWrapper, "@PhoneNum", DbType.String, entity.PhoneNum );
			database.AddInParameter(commandWrapper, "@MobileNum", DbType.String, entity.MobileNum );
			database.AddInParameter(commandWrapper, "@MonthIncome", DbType.Decimal, (entity.MonthIncome.HasValue ? (object) entity.MonthIncome  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StaffFlg", DbType.Decimal, entity.StaffFlg );
			database.AddInParameter(commandWrapper, "@DiplomaticFlg", DbType.Decimal, entity.DiplomaticFlg );
			database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, (entity.SaStfMemberId.HasValue ? (object) entity.SaStfMemberId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BirthDate", DbType.DateTime, (entity.BirthDate.HasValue ? (object) entity.BirthDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, (entity.GsCodeMaritalStateId.HasValue ? (object) entity.GsCodeMaritalStateId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeEducationLevelId", DbType.Decimal, (entity.GsCodeEducationLevelId.HasValue ? (object) entity.GsCodeEducationLevelId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.String, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, entity.FullNameAr );
			database.AddInParameter(commandWrapper, "@Cpr", DbType.String, entity.Cpr );
			database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, entity.PassporNo );
			database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, (entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ResidentExpireDate", DbType.Date, (entity.ResidentExpireDate.HasValue ? (object) entity.ResidentExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ResidentId", DbType.String, entity.ResidentId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String, entity.Username );
			database.AddInParameter(commandWrapper, "@PasswordSalt", DbType.String, entity.PasswordSalt );
			database.AddInParameter(commandWrapper, "@PasswordHash", DbType.String, entity.PasswordHash );
			database.AddInParameter(commandWrapper, "@SecurityQs", DbType.String, entity.SecurityQs );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsSalt", DbType.String, entity.SecurityQsAnsSalt );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsHash", DbType.String, entity.SecurityQsAnsHash );
			database.AddInParameter(commandWrapper, "@EmpFlg", DbType.Decimal, (entity.EmpFlg.HasValue ? (object) entity.EmpFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WorkAddress", DbType.String, entity.WorkAddress );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edGuardId = database.GetParameterValue(commandWrapper, "@EdGuardId");
			entity.EdGuardId = (System.Decimal)_edGuardId;
			
			entity.OriginalEdGuardId = entity.EdGuardId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdGuard object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdGuard object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdGuard entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_GUARD_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdGuardId", DbType.Decimal, entity.EdGuardId );
			database.AddInParameter(commandWrapper, "@OriginalEdGuardId", DbType.Decimal, entity.OriginalEdGuardId);
			database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, entity.FullNameEn );
			database.AddInParameter(commandWrapper, "@JobTitle", DbType.String, entity.JobTitle );
			database.AddInParameter(commandWrapper, "@PermAddr", DbType.String, entity.PermAddr );
			database.AddInParameter(commandWrapper, "@EMail", DbType.String, entity.EMail );
			database.AddInParameter(commandWrapper, "@PhoneNum", DbType.String, entity.PhoneNum );
			database.AddInParameter(commandWrapper, "@MobileNum", DbType.String, entity.MobileNum );
			database.AddInParameter(commandWrapper, "@MonthIncome", DbType.Decimal, (entity.MonthIncome.HasValue ? (object) entity.MonthIncome : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StaffFlg", DbType.Decimal, entity.StaffFlg );
			database.AddInParameter(commandWrapper, "@DiplomaticFlg", DbType.Decimal, entity.DiplomaticFlg );
			database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, (entity.SaStfMemberId.HasValue ? (object) entity.SaStfMemberId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BirthDate", DbType.DateTime, (entity.BirthDate.HasValue ? (object) entity.BirthDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, (entity.GsCodeMaritalStateId.HasValue ? (object) entity.GsCodeMaritalStateId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeEducationLevelId", DbType.Decimal, (entity.GsCodeEducationLevelId.HasValue ? (object) entity.GsCodeEducationLevelId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CompanyName", DbType.String, entity.CompanyName );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, entity.FullNameAr );
			database.AddInParameter(commandWrapper, "@Cpr", DbType.String, entity.Cpr );
			database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, entity.PassporNo );
			database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, (entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ResidentExpireDate", DbType.Date, (entity.ResidentExpireDate.HasValue ? (object) entity.ResidentExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ResidentId", DbType.String, entity.ResidentId );
			database.AddInParameter(commandWrapper, "@Username", DbType.String, entity.Username );
			database.AddInParameter(commandWrapper, "@PasswordSalt", DbType.String, entity.PasswordSalt );
			database.AddInParameter(commandWrapper, "@PasswordHash", DbType.String, entity.PasswordHash );
			database.AddInParameter(commandWrapper, "@SecurityQs", DbType.String, entity.SecurityQs );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsSalt", DbType.String, entity.SecurityQsAnsSalt );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsHash", DbType.String, entity.SecurityQsAnsHash );
			database.AddInParameter(commandWrapper, "@EmpFlg", DbType.Decimal, (entity.EmpFlg.HasValue ? (object) entity.EmpFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WorkAddress", DbType.String, entity.WorkAddress );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdGuardId = entity.EdGuardId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
