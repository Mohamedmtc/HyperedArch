/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlAdmApplicantProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="AdmApplicant"/> entity.
	///</summary>
	public abstract partial class SqlAdmApplicantProviderBase : AdmApplicantProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlAdmApplicantProviderBase"/> instance.
		/// </summary>
		public SqlAdmApplicantProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlAdmApplicantProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlAdmApplicantProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_admApplicantId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _admApplicantId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(AdmApplicant)
					,_admApplicantId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
		public override TList<AdmApplicant> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<AdmApplicant>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmAppCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PasswordSalt", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PasswordHash", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurityQs", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurityQsAnsSalt", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurityQsAnsHash", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ActivationCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ActivationFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RegDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FnameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FnameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MnameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MnameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LnameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LnameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FamilyAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FamilyEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cpr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Birthdate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PhotoPath", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WorkFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResidentId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResidentExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoyaltyFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporIssueDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SpecialNeedFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdentIssueDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdentExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdentIssuePlc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VisaNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VisaIssueDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VisaExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeSocialAffairId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PucFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoChild", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HighQualFlg", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("adm_applicant_id ") || clause.Trim().StartsWith("adm_applicant_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmApplicantId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_app_code ") || clause.Trim().StartsWith("adm_app_code="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAppCode", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("username ") || clause.Trim().StartsWith("username="))
				{
					database.SetParameterValue(commandWrapper, "@Username", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("password_salt ") || clause.Trim().StartsWith("password_salt="))
				{
					database.SetParameterValue(commandWrapper, "@PasswordSalt", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("password_hash ") || clause.Trim().StartsWith("password_hash="))
				{
					database.SetParameterValue(commandWrapper, "@PasswordHash", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("security_qs ") || clause.Trim().StartsWith("security_qs="))
				{
					database.SetParameterValue(commandWrapper, "@SecurityQs", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("security_qs_ans_salt ") || clause.Trim().StartsWith("security_qs_ans_salt="))
				{
					database.SetParameterValue(commandWrapper, "@SecurityQsAnsSalt", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("security_qs_ans_hash ") || clause.Trim().StartsWith("security_qs_ans_hash="))
				{
					database.SetParameterValue(commandWrapper, "@SecurityQsAnsHash", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("activation_code ") || clause.Trim().StartsWith("activation_code="))
				{
					database.SetParameterValue(commandWrapper, "@ActivationCode", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("activation_flg ") || clause.Trim().StartsWith("activation_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ActivationFlg", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("reg_date ") || clause.Trim().StartsWith("reg_date="))
				{
					database.SetParameterValue(commandWrapper, "@RegDate", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fname_ar ") || clause.Trim().StartsWith("fname_ar="))
				{
					database.SetParameterValue(commandWrapper, "@FnameAr", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fname_en ") || clause.Trim().StartsWith("fname_en="))
				{
					database.SetParameterValue(commandWrapper, "@FnameEn", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mname_ar ") || clause.Trim().StartsWith("mname_ar="))
				{
					database.SetParameterValue(commandWrapper, "@MnameAr", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mname_en ") || clause.Trim().StartsWith("mname_en="))
				{
					database.SetParameterValue(commandWrapper, "@MnameEn", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lname_ar ") || clause.Trim().StartsWith("lname_ar="))
				{
					database.SetParameterValue(commandWrapper, "@LnameAr", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lname_en ") || clause.Trim().StartsWith("lname_en="))
				{
					database.SetParameterValue(commandWrapper, "@LnameEn", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("family_ar ") || clause.Trim().StartsWith("family_ar="))
				{
					database.SetParameterValue(commandWrapper, "@FamilyAr", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("family_en ") || clause.Trim().StartsWith("family_en="))
				{
					database.SetParameterValue(commandWrapper, "@FamilyEn", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_religion_id ") || clause.Trim().StartsWith("gs_code_religion_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeReligionId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cpr ") || clause.Trim().StartsWith("cpr="))
				{
					database.SetParameterValue(commandWrapper, "@Cpr", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_no ") || clause.Trim().StartsWith("passpor_no="))
				{
					database.SetParameterValue(commandWrapper, "@PassporNo", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_expire_date ") || clause.Trim().StartsWith("passpor_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@PassporExpireDate", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("birthdate ") || clause.Trim().StartsWith("birthdate="))
				{
					database.SetParameterValue(commandWrapper, "@Birthdate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("photo_path ") || clause.Trim().StartsWith("photo_path="))
				{
					database.SetParameterValue(commandWrapper, "@PhotoPath", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_marital_status_id ") || clause.Trim().StartsWith("gs_cde_marital_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeMaritalStatusId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_gender_id ") || clause.Trim().StartsWith("gs_code_gender_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeGenderId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("work_flg ") || clause.Trim().StartsWith("work_flg="))
				{
					database.SetParameterValue(commandWrapper, "@WorkFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_node_id ") || clause.Trim().StartsWith("gs_country_node_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryNodeId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_name_ar ") || clause.Trim().StartsWith("full_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@FullNameAr", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_name_en ") || clause.Trim().StartsWith("full_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@FullNameEn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("resident_id ") || clause.Trim().StartsWith("resident_id="))
				{
					database.SetParameterValue(commandWrapper, "@ResidentId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("resident_expire_date ") || clause.Trim().StartsWith("resident_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@ResidentExpireDate", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_birth_country_node_id ") || clause.Trim().StartsWith("gs_birth_country_node_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsBirthCountryNodeId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_id ") || clause.Trim().StartsWith("ed_stud_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("loyalty_flg ") || clause.Trim().StartsWith("loyalty_flg="))
				{
					database.SetParameterValue(commandWrapper, "@LoyaltyFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_language_id ") || clause.Trim().StartsWith("gs_code_language_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeLanguageId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_issue_date ") || clause.Trim().StartsWith("passpor_issue_date="))
				{
					database.SetParameterValue(commandWrapper, "@PassporIssueDate", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("special_need_flg ") || clause.Trim().StartsWith("special_need_flg="))
				{
					database.SetParameterValue(commandWrapper, "@SpecialNeedFlg", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ident_issue_date ") || clause.Trim().StartsWith("ident_issue_date="))
				{
					database.SetParameterValue(commandWrapper, "@IdentIssueDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ident_expire_date ") || clause.Trim().StartsWith("ident_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@IdentExpireDate", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ident_issue_plc ") || clause.Trim().StartsWith("ident_issue_plc="))
				{
					database.SetParameterValue(commandWrapper, "@IdentIssuePlc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("visa_number ") || clause.Trim().StartsWith("visa_number="))
				{
					database.SetParameterValue(commandWrapper, "@VisaNumber", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("visa_issue_date ") || clause.Trim().StartsWith("visa_issue_date="))
				{
					database.SetParameterValue(commandWrapper, "@VisaIssueDate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("visa_expire_date ") || clause.Trim().StartsWith("visa_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@VisaExpireDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_social_affair_id ") || clause.Trim().StartsWith("ed_cde_social_affair_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeSocialAffairId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("puc_flg ") || clause.Trim().StartsWith("puc_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PucFlg", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("no_child ") || clause.Trim().StartsWith("no_child="))
				{
					database.SetParameterValue(commandWrapper, "@NoChild", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("high_qual_flg ") || clause.Trim().StartsWith("high_qual_flg="))
				{
					database.SetParameterValue(commandWrapper, "@HighQualFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
		public override TList<AdmApplicant> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_Find_Dynamic", typeof(AdmApplicantColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
		public override TList<AdmApplicant> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByEdCdeSocialAffairId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APPLICANT_ED_CDE_SOCIAL_AFFAIR key.
		///		FK_ADM_APPLICANT_ED_CDE_SOCIAL_AFFAIR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeSocialAffairId">نوع الشؤن الاجتماعية CSS</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByEdCdeSocialAffairId(TransactionManager transactionManager, System.Int32? _edCdeSocialAffairId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByEdCdeSocialAffairId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeSocialAffairId", DbType.Int32, _edCdeSocialAffairId);
			
			IDataReader reader = null;
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeSocialAffairId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeSocialAffairId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeLanguageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APPLICANT_GS_CODE_LANGUAGE key.
		///		FK_ADM_APPLICANT_GS_CODE_LANGUAGE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeLanguageId">لغة التخصص</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByGsCodeLanguageId(TransactionManager transactionManager, System.Decimal? _gsCodeLanguageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByGsCodeLanguageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, _gsCodeLanguageId);
			
			IDataReader reader = null;
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCountryNodeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APPLICANT_GS_COUNTRY_NODE key.
		///		FK_ADM_APPLICANT_GS_COUNTRY_NODE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryNodeId">الجنسية</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByGsCountryNodeId(TransactionManager transactionManager, System.Decimal? _gsCountryNodeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByGsCountryNodeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, _gsCountryNodeId);
			
			IDataReader reader = null;
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeMaritalStatusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APPLICANTS_GS_CDE_MARITAL_STATUS key.
		///		FK_ADM_APPLICANTS_GS_CDE_MARITAL_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeMaritalStatusId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByGsCdeMaritalStatusId(TransactionManager transactionManager, System.Decimal? _gsCdeMaritalStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByGsCdeMaritalStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, _gsCdeMaritalStatusId);
			
			IDataReader reader = null;
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeMaritalStatusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeMaritalStatusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeReligionId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APPLICANTS_GS_CODE_RELIGION key.
		///		FK_ADM_APPLICANTS_GS_CODE_RELIGION Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeReligionId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmApplicant objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByGsCodeReligionId(TransactionManager transactionManager, System.Decimal? _gsCodeReligionId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByGsCodeReligionId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, _gsCodeReligionId);
			
			IDataReader reader = null;
			TList<AdmApplicant> rows = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeReligionId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeReligionId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAdmAppCode
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ADM_APP_CODE_INDEX index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAppCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmApplicant&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByAdmAppCode(TransactionManager transactionManager, System.String _admAppCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByAdmAppCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAppCode", DbType.String, _admAppCode);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAppCode", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAppCode", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByCpr
					
		/// <summary>
		/// 	Gets rows from the datasource based on the CPR_NonClusteredIndex index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_cpr"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmApplicant&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByCpr(TransactionManager transactionManager, System.String _cpr, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByCpr", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Cpr", DbType.String, _cpr);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCpr", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCpr", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ED_STUD_ID_NonClusteredIndex-20131121-210615 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmApplicant&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByEdStudId(TransactionManager transactionManager, System.Decimal? _edStudId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByEdStudId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsBirthCountryNodeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the GS_BIRTH_COUNTRY_NO_NonClusteredIndex index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsBirthCountryNodeId">مكان الميلاد</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmApplicant&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByGsBirthCountryNodeId(TransactionManager transactionManager, System.Decimal? _gsBirthCountryNodeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByGsBirthCountryNodeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, _gsBirthCountryNodeId);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsBirthCountryNodeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsBirthCountryNodeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCodeGenderId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the GS_CODE_GENDER_ID_NonClusteredIndex index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeGenderId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmApplicant&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetByGsCodeGenderId(TransactionManager transactionManager, System.Decimal? _gsCodeGenderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByGsCodeGenderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, _gsCodeGenderId);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByUsername
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ADM_APPLICANT index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_username"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmApplicant"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmApplicant GetByUsername(TransactionManager transactionManager, System.String _username, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByUsername", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, _username);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByUsername", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByUsername", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmApplicantId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ADM_N_APP index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admApplicantId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmApplicant"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmApplicant GetByAdmApplicantId(TransactionManager transactionManager, System.Decimal _admApplicantId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetByAdmApplicantId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmApplicantId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmApplicantId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetBySecurityQs
					
		/// <summary>
		/// 	Gets rows from the datasource based on the SECURITY_QS_NonClusteredIndex index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_securityQs"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmApplicant&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmApplicant> GetBySecurityQs(TransactionManager transactionManager, System.String _securityQs, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_GetBySecurityQs", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SecurityQs", DbType.String, _securityQs);
			
			IDataReader reader = null;
			TList<AdmApplicant> tmp = new TList<AdmApplicant>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySecurityQs", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySecurityQs", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmApplicant object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.AdmApplicant> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ADM_APPLICANT";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ADM_APPLICANT_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ADM_APP_CODE", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("USERNAME", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("PASSWORD_SALT", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("PASSWORD_HASH", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("SECURITY_QS", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("SECURITY_QS_ANS_SALT", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("SECURITY_QS_ANS_HASH", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ACTIVATION_CODE", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ACTIVATION_FLG", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("REG_DATE", typeof(System.DateTime));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("FNAME_AR", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("FNAME_EN", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("MNAME_AR", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("MNAME_EN", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("LNAME_AR", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("LNAME_EN", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("FAMILY_AR", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("FAMILY_EN", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("GS_CODE_RELIGION_ID", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("CPR", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("PASSPOR_NO", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("PASSPOR_EXPIRE_DATE", typeof(System.DateTime));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("BIRTHDATE", typeof(System.DateTime));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("PHOTO_PATH", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("GS_CDE_MARITAL_STATUS_ID", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("GS_CODE_GENDER_ID", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("WORK_FLG", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("GS_COUNTRY_NODE_ID", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("FULL_NAME_AR", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("FULL_NAME_EN", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("RESIDENT_ID", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("RESIDENT_EXPIRE_DATE", typeof(System.DateTime));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("GS_BIRTH_COUNTRY_NODE_ID", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("ED_STUD_ID", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("LOYALTY_FLG", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("GS_CODE_LANGUAGE_ID", typeof(System.Decimal));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("PASSPOR_ISSUE_DATE", typeof(System.DateTime));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("SPECIAL_NEED_FLG", typeof(System.Boolean));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("IDENT_ISSUE_DATE", typeof(System.DateTime));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("IDENT_EXPIRE_DATE", typeof(System.DateTime));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("IDENT_ISSUE_PLC", typeof(System.String));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("VISA_NUMBER", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("VISA_ISSUE_DATE", typeof(System.DateTime));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("VISA_EXPIRE_DATE", typeof(System.DateTime));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("ED_CDE_SOCIAL_AFFAIR_ID", typeof(System.Int32));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("PUC_FLG", typeof(System.Boolean));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("NO_CHILD", typeof(System.Int32));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("HIGH_QUAL_FLG", typeof(System.Boolean));
			col50.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ADM_APPLICANT_ID", "ADM_APPLICANT_ID");
			bulkCopy.ColumnMappings.Add("ADM_APP_CODE", "ADM_APP_CODE");
			bulkCopy.ColumnMappings.Add("USERNAME", "USERNAME");
			bulkCopy.ColumnMappings.Add("PASSWORD_SALT", "PASSWORD_SALT");
			bulkCopy.ColumnMappings.Add("PASSWORD_HASH", "PASSWORD_HASH");
			bulkCopy.ColumnMappings.Add("SECURITY_QS", "SECURITY_QS");
			bulkCopy.ColumnMappings.Add("SECURITY_QS_ANS_SALT", "SECURITY_QS_ANS_SALT");
			bulkCopy.ColumnMappings.Add("SECURITY_QS_ANS_HASH", "SECURITY_QS_ANS_HASH");
			bulkCopy.ColumnMappings.Add("ACTIVATION_CODE", "ACTIVATION_CODE");
			bulkCopy.ColumnMappings.Add("ACTIVATION_FLG", "ACTIVATION_FLG");
			bulkCopy.ColumnMappings.Add("REG_DATE", "REG_DATE");
			bulkCopy.ColumnMappings.Add("FNAME_AR", "FNAME_AR");
			bulkCopy.ColumnMappings.Add("FNAME_EN", "FNAME_EN");
			bulkCopy.ColumnMappings.Add("MNAME_AR", "MNAME_AR");
			bulkCopy.ColumnMappings.Add("MNAME_EN", "MNAME_EN");
			bulkCopy.ColumnMappings.Add("LNAME_AR", "LNAME_AR");
			bulkCopy.ColumnMappings.Add("LNAME_EN", "LNAME_EN");
			bulkCopy.ColumnMappings.Add("FAMILY_AR", "FAMILY_AR");
			bulkCopy.ColumnMappings.Add("FAMILY_EN", "FAMILY_EN");
			bulkCopy.ColumnMappings.Add("GS_CODE_RELIGION_ID", "GS_CODE_RELIGION_ID");
			bulkCopy.ColumnMappings.Add("CPR", "CPR");
			bulkCopy.ColumnMappings.Add("PASSPOR_NO", "PASSPOR_NO");
			bulkCopy.ColumnMappings.Add("PASSPOR_EXPIRE_DATE", "PASSPOR_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("BIRTHDATE", "BIRTHDATE");
			bulkCopy.ColumnMappings.Add("PHOTO_PATH", "PHOTO_PATH");
			bulkCopy.ColumnMappings.Add("GS_CDE_MARITAL_STATUS_ID", "GS_CDE_MARITAL_STATUS_ID");
			bulkCopy.ColumnMappings.Add("GS_CODE_GENDER_ID", "GS_CODE_GENDER_ID");
			bulkCopy.ColumnMappings.Add("WORK_FLG", "WORK_FLG");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_NODE_ID", "GS_COUNTRY_NODE_ID");
			bulkCopy.ColumnMappings.Add("FULL_NAME_AR", "FULL_NAME_AR");
			bulkCopy.ColumnMappings.Add("FULL_NAME_EN", "FULL_NAME_EN");
			bulkCopy.ColumnMappings.Add("RESIDENT_ID", "RESIDENT_ID");
			bulkCopy.ColumnMappings.Add("RESIDENT_EXPIRE_DATE", "RESIDENT_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("GS_BIRTH_COUNTRY_NODE_ID", "GS_BIRTH_COUNTRY_NODE_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_ID", "ED_STUD_ID");
			bulkCopy.ColumnMappings.Add("LOYALTY_FLG", "LOYALTY_FLG");
			bulkCopy.ColumnMappings.Add("GS_CODE_LANGUAGE_ID", "GS_CODE_LANGUAGE_ID");
			bulkCopy.ColumnMappings.Add("PASSPOR_ISSUE_DATE", "PASSPOR_ISSUE_DATE");
			bulkCopy.ColumnMappings.Add("SPECIAL_NEED_FLG", "SPECIAL_NEED_FLG");
			bulkCopy.ColumnMappings.Add("IDENT_ISSUE_DATE", "IDENT_ISSUE_DATE");
			bulkCopy.ColumnMappings.Add("IDENT_EXPIRE_DATE", "IDENT_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("IDENT_ISSUE_PLC", "IDENT_ISSUE_PLC");
			bulkCopy.ColumnMappings.Add("VISA_NUMBER", "VISA_NUMBER");
			bulkCopy.ColumnMappings.Add("VISA_ISSUE_DATE", "VISA_ISSUE_DATE");
			bulkCopy.ColumnMappings.Add("VISA_EXPIRE_DATE", "VISA_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("ED_CDE_SOCIAL_AFFAIR_ID", "ED_CDE_SOCIAL_AFFAIR_ID");
			bulkCopy.ColumnMappings.Add("PUC_FLG", "PUC_FLG");
			bulkCopy.ColumnMappings.Add("NO_CHILD", "NO_CHILD");
			bulkCopy.ColumnMappings.Add("HIGH_QUAL_FLG", "HIGH_QUAL_FLG");
			
			foreach(UMIS_VER2.BusinessLyer.AdmApplicant entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ADM_APPLICANT_ID"] = entity.AdmApplicantId;
							
				
					row["ADM_APP_CODE"] = entity.AdmAppCode;
							
				
					row["USERNAME"] = entity.Username;
							
				
					row["PASSWORD_SALT"] = entity.PasswordSalt;
							
				
					row["PASSWORD_HASH"] = entity.PasswordHash;
							
				
					row["SECURITY_QS"] = entity.SecurityQs;
							
				
					row["SECURITY_QS_ANS_SALT"] = entity.SecurityQsAnsSalt;
							
				
					row["SECURITY_QS_ANS_HASH"] = entity.SecurityQsAnsHash;
							
				
					row["ACTIVATION_CODE"] = entity.ActivationCode;
							
				
					row["ACTIVATION_FLG"] = entity.ActivationFlg.HasValue ? (object) entity.ActivationFlg  : System.DBNull.Value;
							
				
					row["REG_DATE"] = entity.RegDate.HasValue ? (object) entity.RegDate  : System.DBNull.Value;
							
				
					row["FNAME_AR"] = entity.FnameAr;
							
				
					row["FNAME_EN"] = entity.FnameEn;
							
				
					row["MNAME_AR"] = entity.MnameAr;
							
				
					row["MNAME_EN"] = entity.MnameEn;
							
				
					row["LNAME_AR"] = entity.LnameAr;
							
				
					row["LNAME_EN"] = entity.LnameEn;
							
				
					row["FAMILY_AR"] = entity.FamilyAr;
							
				
					row["FAMILY_EN"] = entity.FamilyEn;
							
				
					row["GS_CODE_RELIGION_ID"] = entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId  : System.DBNull.Value;
							
				
					row["CPR"] = entity.Cpr;
							
				
					row["PASSPOR_NO"] = entity.PassporNo;
							
				
					row["PASSPOR_EXPIRE_DATE"] = entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate  : System.DBNull.Value;
							
				
					row["BIRTHDATE"] = entity.Birthdate.HasValue ? (object) entity.Birthdate  : System.DBNull.Value;
							
				
					row["PHOTO_PATH"] = entity.PhotoPath;
							
				
					row["GS_CDE_MARITAL_STATUS_ID"] = entity.GsCdeMaritalStatusId.HasValue ? (object) entity.GsCdeMaritalStatusId  : System.DBNull.Value;
							
				
					row["GS_CODE_GENDER_ID"] = entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value;
							
				
					row["WORK_FLG"] = entity.WorkFlg.HasValue ? (object) entity.WorkFlg  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_NODE_ID"] = entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value;
							
				
					row["FULL_NAME_AR"] = entity.FullNameAr;
							
				
					row["FULL_NAME_EN"] = entity.FullNameEn;
							
				
					row["RESIDENT_ID"] = entity.ResidentId;
							
				
					row["RESIDENT_EXPIRE_DATE"] = entity.ResidentExpireDate.HasValue ? (object) entity.ResidentExpireDate  : System.DBNull.Value;
							
				
					row["GS_BIRTH_COUNTRY_NODE_ID"] = entity.GsBirthCountryNodeId.HasValue ? (object) entity.GsBirthCountryNodeId  : System.DBNull.Value;
							
				
					row["ED_STUD_ID"] = entity.EdStudId.HasValue ? (object) entity.EdStudId  : System.DBNull.Value;
							
				
					row["LOYALTY_FLG"] = entity.LoyaltyFlg.HasValue ? (object) entity.LoyaltyFlg  : System.DBNull.Value;
							
				
					row["GS_CODE_LANGUAGE_ID"] = entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value;
							
				
					row["PASSPOR_ISSUE_DATE"] = entity.PassporIssueDate.HasValue ? (object) entity.PassporIssueDate  : System.DBNull.Value;
							
				
					row["SPECIAL_NEED_FLG"] = entity.SpecialNeedFlg.HasValue ? (object) entity.SpecialNeedFlg  : System.DBNull.Value;
							
				
					row["IDENT_ISSUE_DATE"] = entity.IdentIssueDate.HasValue ? (object) entity.IdentIssueDate  : System.DBNull.Value;
							
				
					row["IDENT_EXPIRE_DATE"] = entity.IdentExpireDate.HasValue ? (object) entity.IdentExpireDate  : System.DBNull.Value;
							
				
					row["IDENT_ISSUE_PLC"] = entity.IdentIssuePlc;
							
				
					row["VISA_NUMBER"] = entity.VisaNumber;
							
				
					row["VISA_ISSUE_DATE"] = entity.VisaIssueDate.HasValue ? (object) entity.VisaIssueDate  : System.DBNull.Value;
							
				
					row["VISA_EXPIRE_DATE"] = entity.VisaExpireDate.HasValue ? (object) entity.VisaExpireDate  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["ED_CDE_SOCIAL_AFFAIR_ID"] = entity.EdCdeSocialAffairId.HasValue ? (object) entity.EdCdeSocialAffairId  : System.DBNull.Value;
							
				
					row["PUC_FLG"] = entity.PucFlg.HasValue ? (object) entity.PucFlg  : System.DBNull.Value;
							
				
					row["NO_CHILD"] = entity.NoChild.HasValue ? (object) entity.NoChild  : System.DBNull.Value;
							
				
					row["HIGH_QUAL_FLG"] = entity.HighQualFlg.HasValue ? (object) entity.HighQualFlg  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.AdmApplicant entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.AdmApplicant object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmApplicant object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmApplicant object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmApplicant entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@AdmAppCode", DbType.String, entity.AdmAppCode );
			database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, entity.Username );
			database.AddInParameter(commandWrapper, "@PasswordSalt", DbType.String, entity.PasswordSalt );
			database.AddInParameter(commandWrapper, "@PasswordHash", DbType.String, entity.PasswordHash );
			database.AddInParameter(commandWrapper, "@SecurityQs", DbType.String, entity.SecurityQs );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsSalt", DbType.String, entity.SecurityQsAnsSalt );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsHash", DbType.String, entity.SecurityQsAnsHash );
			database.AddInParameter(commandWrapper, "@ActivationCode", DbType.String, entity.ActivationCode );
			database.AddInParameter(commandWrapper, "@ActivationFlg", DbType.Decimal, (entity.ActivationFlg.HasValue ? (object) entity.ActivationFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RegDate", DbType.DateTime, (entity.RegDate.HasValue ? (object) entity.RegDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FnameAr", DbType.String, entity.FnameAr );
			database.AddInParameter(commandWrapper, "@FnameEn", DbType.String, entity.FnameEn );
			database.AddInParameter(commandWrapper, "@MnameAr", DbType.String, entity.MnameAr );
			database.AddInParameter(commandWrapper, "@MnameEn", DbType.String, entity.MnameEn );
			database.AddInParameter(commandWrapper, "@LnameAr", DbType.String, entity.LnameAr );
			database.AddInParameter(commandWrapper, "@LnameEn", DbType.String, entity.LnameEn );
			database.AddInParameter(commandWrapper, "@FamilyAr", DbType.String, entity.FamilyAr );
			database.AddInParameter(commandWrapper, "@FamilyEn", DbType.String, entity.FamilyEn );
			database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, (entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Cpr", DbType.String, entity.Cpr );
			database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, entity.PassporNo );
			database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, (entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Birthdate", DbType.Date, (entity.Birthdate.HasValue ? (object) entity.Birthdate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PhotoPath", DbType.String, entity.PhotoPath );
			database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, (entity.GsCdeMaritalStatusId.HasValue ? (object) entity.GsCdeMaritalStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WorkFlg", DbType.Decimal, (entity.WorkFlg.HasValue ? (object) entity.WorkFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, entity.FullNameAr );
			database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, entity.FullNameEn );
			database.AddInParameter(commandWrapper, "@ResidentId", DbType.String, entity.ResidentId );
			database.AddInParameter(commandWrapper, "@ResidentExpireDate", DbType.Date, (entity.ResidentExpireDate.HasValue ? (object) entity.ResidentExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, (entity.GsBirthCountryNodeId.HasValue ? (object) entity.GsBirthCountryNodeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, (entity.EdStudId.HasValue ? (object) entity.EdStudId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LoyaltyFlg", DbType.Decimal, (entity.LoyaltyFlg.HasValue ? (object) entity.LoyaltyFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PassporIssueDate", DbType.Date, (entity.PassporIssueDate.HasValue ? (object) entity.PassporIssueDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SpecialNeedFlg", DbType.Boolean, (entity.SpecialNeedFlg.HasValue ? (object) entity.SpecialNeedFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdentIssueDate", DbType.Date, (entity.IdentIssueDate.HasValue ? (object) entity.IdentIssueDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdentExpireDate", DbType.Date, (entity.IdentExpireDate.HasValue ? (object) entity.IdentExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdentIssuePlc", DbType.String, entity.IdentIssuePlc );
			database.AddInParameter(commandWrapper, "@VisaNumber", DbType.String, entity.VisaNumber );
			database.AddInParameter(commandWrapper, "@VisaIssueDate", DbType.Date, (entity.VisaIssueDate.HasValue ? (object) entity.VisaIssueDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@VisaExpireDate", DbType.Date, (entity.VisaExpireDate.HasValue ? (object) entity.VisaExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeSocialAffairId", DbType.Int32, (entity.EdCdeSocialAffairId.HasValue ? (object) entity.EdCdeSocialAffairId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PucFlg", DbType.Boolean, (entity.PucFlg.HasValue ? (object) entity.PucFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NoChild", DbType.Int32, (entity.NoChild.HasValue ? (object) entity.NoChild  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HighQualFlg", DbType.Boolean, (entity.HighQualFlg.HasValue ? (object) entity.HighQualFlg  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _admApplicantId = database.GetParameterValue(commandWrapper, "@AdmApplicantId");
			entity.AdmApplicantId = (System.Decimal)_admApplicantId;
			
			entity.OriginalAdmApplicantId = entity.AdmApplicantId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmApplicant object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.AdmApplicant object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmApplicant entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APPLICANT_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, entity.AdmApplicantId );
			database.AddInParameter(commandWrapper, "@OriginalAdmApplicantId", DbType.Decimal, entity.OriginalAdmApplicantId);
			database.AddInParameter(commandWrapper, "@AdmAppCode", DbType.String, entity.AdmAppCode );
			database.AddInParameter(commandWrapper, "@Username", DbType.AnsiString, entity.Username );
			database.AddInParameter(commandWrapper, "@PasswordSalt", DbType.String, entity.PasswordSalt );
			database.AddInParameter(commandWrapper, "@PasswordHash", DbType.String, entity.PasswordHash );
			database.AddInParameter(commandWrapper, "@SecurityQs", DbType.String, entity.SecurityQs );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsSalt", DbType.String, entity.SecurityQsAnsSalt );
			database.AddInParameter(commandWrapper, "@SecurityQsAnsHash", DbType.String, entity.SecurityQsAnsHash );
			database.AddInParameter(commandWrapper, "@ActivationCode", DbType.String, entity.ActivationCode );
			database.AddInParameter(commandWrapper, "@ActivationFlg", DbType.Decimal, (entity.ActivationFlg.HasValue ? (object) entity.ActivationFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RegDate", DbType.DateTime, (entity.RegDate.HasValue ? (object) entity.RegDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FnameAr", DbType.String, entity.FnameAr );
			database.AddInParameter(commandWrapper, "@FnameEn", DbType.String, entity.FnameEn );
			database.AddInParameter(commandWrapper, "@MnameAr", DbType.String, entity.MnameAr );
			database.AddInParameter(commandWrapper, "@MnameEn", DbType.String, entity.MnameEn );
			database.AddInParameter(commandWrapper, "@LnameAr", DbType.String, entity.LnameAr );
			database.AddInParameter(commandWrapper, "@LnameEn", DbType.String, entity.LnameEn );
			database.AddInParameter(commandWrapper, "@FamilyAr", DbType.String, entity.FamilyAr );
			database.AddInParameter(commandWrapper, "@FamilyEn", DbType.String, entity.FamilyEn );
			database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, (entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Cpr", DbType.String, entity.Cpr );
			database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, entity.PassporNo );
			database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, (entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Birthdate", DbType.Date, (entity.Birthdate.HasValue ? (object) entity.Birthdate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PhotoPath", DbType.String, entity.PhotoPath );
			database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, (entity.GsCdeMaritalStatusId.HasValue ? (object) entity.GsCdeMaritalStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WorkFlg", DbType.Decimal, (entity.WorkFlg.HasValue ? (object) entity.WorkFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, entity.FullNameAr );
			database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, entity.FullNameEn );
			database.AddInParameter(commandWrapper, "@ResidentId", DbType.String, entity.ResidentId );
			database.AddInParameter(commandWrapper, "@ResidentExpireDate", DbType.Date, (entity.ResidentExpireDate.HasValue ? (object) entity.ResidentExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, (entity.GsBirthCountryNodeId.HasValue ? (object) entity.GsBirthCountryNodeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, (entity.EdStudId.HasValue ? (object) entity.EdStudId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LoyaltyFlg", DbType.Decimal, (entity.LoyaltyFlg.HasValue ? (object) entity.LoyaltyFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PassporIssueDate", DbType.Date, (entity.PassporIssueDate.HasValue ? (object) entity.PassporIssueDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SpecialNeedFlg", DbType.Boolean, (entity.SpecialNeedFlg.HasValue ? (object) entity.SpecialNeedFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdentIssueDate", DbType.Date, (entity.IdentIssueDate.HasValue ? (object) entity.IdentIssueDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdentExpireDate", DbType.Date, (entity.IdentExpireDate.HasValue ? (object) entity.IdentExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdentIssuePlc", DbType.String, entity.IdentIssuePlc );
			database.AddInParameter(commandWrapper, "@VisaNumber", DbType.String, entity.VisaNumber );
			database.AddInParameter(commandWrapper, "@VisaIssueDate", DbType.Date, (entity.VisaIssueDate.HasValue ? (object) entity.VisaIssueDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@VisaExpireDate", DbType.Date, (entity.VisaExpireDate.HasValue ? (object) entity.VisaExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeSocialAffairId", DbType.Int32, (entity.EdCdeSocialAffairId.HasValue ? (object) entity.EdCdeSocialAffairId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PucFlg", DbType.Boolean, (entity.PucFlg.HasValue ? (object) entity.PucFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NoChild", DbType.Int32, (entity.NoChild.HasValue ? (object) entity.NoChild : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HighQualFlg", DbType.Boolean, (entity.HighQualFlg.HasValue ? (object) entity.HighQualFlg : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalAdmApplicantId = entity.AdmApplicantId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
