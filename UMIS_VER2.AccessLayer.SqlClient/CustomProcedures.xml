<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <database includeDrop="true">UMIS_VER2</database>

  <procedures>
    <procedure owner="dbo" name="SA_CODE_SC_DEG_Insert">
    </procedure>
    <procedure owner="dbo" name="ADM_APP_PLACEMENT_EXAM_GetByAdmApplicantId">
    </procedure>
    <procedure owner="dbo" name="MIL_CODE_COURSE_Update">
    </procedure>
    <procedure owner="dbo" name="MIL_CODE_COURSE_Insert">
    </procedure>
    <procedure owner="dbo" name="ApplyControlCelemRules_Search">
    </procedure>

    <procedure owner="dbo" name="MDI_STUD_VACC_BULK_SRCH">
    </procedure>

    <procedure owner="dbo" name="CTR_SRVC_CREW_SRCH">
    </procedure>

    <procedure owner="dbo" name="CourseTchngMthd">
    </procedure>
    <procedure owner="dbo" name="ED_CODE_SEM_ACTVITY_Insert">
    </procedure>
    <procedure owner="dbo" name="CTR_MENU_ACT_SRCH">
    </procedure>

    <procedure owner="dbo" name="CTR_STUD_EXP_SRCH">
    </procedure>

    <procedure owner="dbo" name="GetMealItemDetails">
    </procedure>

    <procedure owner="dbo" name="MDI_STUD_VACC_SRCH">
    </procedure>

    <procedure owner="dbo" name="MDI_STUD_RECORD_SRCH">
    </procedure>

    <procedure owner="dbo" name="MDI_STUD_HOSPTL_SRCH">
    </procedure>

    <procedure owner="dbo" name="MDI_STUD_CLNQ_SRCH">
    </procedure>

    <procedure owner="dbo" name="CTR_STUD_OUT_SRCH">
    </procedure>

    <procedure owner="dbo" name="CTR_KTCHN_STF_CRTF_SRCH">
    </procedure>

    <procedure owner="dbo" name="SC_GROUP_INFO_ScheduleSearch">
    </procedure>

    <procedure owner="dbo" name="SC_TCHNG_SLOT_GetSlotes">
    </procedure>

    <procedure owner="dbo" name="SC_STUD_GROUP_StudentsSearchForAdd">
    </procedure>

    <procedure owner="dbo" name="SC_STUD_GROUP_StudsInGroup">
    </procedure>

    <procedure owner="dbo" name="SC_GROUP_INFO_SRCH">
    </procedure>

    <procedure owner="dbo" name="ED_STUD_COURSE_REG_OriginalInsert_GroupReg">
    </procedure>

    <procedure owner="dbo" name="MLT_STUD_INFO_GetForAdd">
    </procedure>

    <procedure owner="dbo" name="MLT_STUD_INFO_SRCH">
    </procedure>

    <procedure owner="dbo" name="SearchCourseCatalog">
    </procedure>

    <procedure owner="dbo" name="ED_STUD_COURSE_REG_GetByEdStudSemesterIdEdCourseIdEdCodeCourseStatusId">

    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_REG_GetByEdStudSemesterIdEdCourseIdEdCdeExamTypeIdEdCodeCourseStatusId">
    </procedure>

    <procedure owner="dbo" name="SE_FORM_GetBySeModuleId_AllForms">
    </procedure>

    <procedure owner="dbo" name="MIG_DEGREE_MAJOR_Insert">
    </procedure>
    <procedure owner="dbo" name="MIG_DEGREE_MAJOR_Update">
    </procedure>
    <procedure owner="dbo" name="GetAdmStatistics">
    </procedure>
    <procedure owner="dbo" name="StudentEarlyCoursesTimeTable2">
    </procedure>
    <procedure owner="dbo" name="SECTION_GROUP_DTL_LOAD">
    </procedure>
    <procedure owner="dbo" name="U_ED_SEM_AGENDA_DTL_Insert">
    </procedure>
    <procedure owner="dbo" name="GetSectionGroupHdrList">
    </procedure>
    <procedure owner="dbo" name="GetBulkBlockCourseSection">
    </procedure>
    <procedure owner="dbo" name="GetStudAcadWarn">
    </procedure>
    <procedure owner="dbo" name="GetStudentEarlyRegisterdCoursesAndSections">
    </procedure>
    <procedure owner="dbo" name="GetCourseSectionsForRegisterEarly">
    </procedure>
    <procedure owner="dbo" name="CreateSectionGroups">
    </procedure>
    <procedure owner="dbo" name="GetStudentsGrad">
    </procedure>
    <procedure owner="dbo" name="GetStudentsHoldForGrad">
    </procedure>
    <procedure owner="dbo" name="ED_OFFERING_COURSE_VIEW">
    </procedure>
    <procedure owner="dbo" name="GetAllGraduationAwards">
    </procedure>

    <procedure owner="dbo" name="GetIntTransAcceptanceList">
    </procedure>

    <procedure owner="dbo" name="GetAppTransAcceptanceList">
    </procedure>

    <procedure owner="dbo" name="GetApplicantAcceptanceData">
    </procedure>

    <procedure owner="dbo" name="GetStudFeeStatus">
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_ADVANCED_Enrollment">
    </procedure>
    <procedure owner="dbo" name="DeleteStudInstallmentRequest">
    </procedure>

    <procedure owner="dbo" name="GetMinNoAvailForGroupHdrLoad">
    </procedure>
    <procedure owner="dbo" name="GetListScScheduleDtlDay">
    </procedure>
    <procedure owner="dbo" name="GetNumberOfStudentsInWaitingList">
    </procedure>

    <procedure owner="dbo" name="GetStudAppData">
    </procedure>

    <procedure owner="dbo" name="LoadApplicantDocFees">
    </procedure>

    <procedure owner="dbo" name="GetApplicantByCode">
    </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_BulkEnrollment">
    </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_CancelBulkEnrollment">
    </procedure>

    <procedure owner="dbo" name="Batch_Copy_Academic_Plan">
    </procedure>
    <procedure owner="dbo" name="GetStudentAndAluminiHistory">

    </procedure>

    <procedure owner="dbo" name="Search_Guard">
    </procedure>

    <procedure owner="dbo" name="GetSystemUsers">
    </procedure>

    <procedure owner="dbo" name="GetOfficerApplicants">
    </procedure>
    <procedure owner="dbo" name="SearchSponser">
    </procedure>

    <procedure owner="dbo" name="SP_Get_IntTransReq">
    </procedure>
    <procedure owner="dbo" name="SP_Get_ExtTransReq">
    </procedure>

    <procedure owner="dbo" name="AdmAppDocApplicants">
    </procedure>

    <procedure owner="dbo" name="AdmAppFeesApplicants">
    </procedure>

    <procedure owner="dbo" name="CHK_STUD_ENROLL_CHANGE">
    </procedure>
    <procedure owner="dbo" name="EXEC_STUD_ENROLL_CHANGE">
    </procedure>

    <procedure owner="dbo" name="GetOrientaionLists">
    </procedure>
    <procedure owner="dbo" name="Get_SeUserAccountIdByUserTypeAndUserTableId">
    </procedure>

    <procedure owner="dbo" name="Search_Existing_Guard">
    </procedure>

    <procedure owner="dbo" name="ApproveCancelStudsCourseResultBySection">
    </procedure>
    <procedure owner="dbo" name="ED_STUD_INT_TRNS_COURSE_FROM_GetByEdStudIntTrnsId">
    </procedure>

    <procedure owner="dbo" name="ED_STUD_SEMESTER_GetByEdStudIdEdAcadYearIdEdCodeSemesterIdEdCdeExamTypeIdAsFacultyInfoId">
    </procedure>
    
    <procedure owner="dbo" name="GetNewApplicantIdsForExam" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ADM_PLACE_EXAM_DATETIME_ID" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @AdmCdePlacementExamId NUMERIC(9,0),
@AdmOpenAcadSemesterId NUMERIC(9,0),
@AutoLoad NUMERIC(1,0)

SELECT @AdmCdePlacementExamId=ADM_PLACE_EXAM_DATETIME.ADM_CDE_PLACEMENT_EXAM_ID,
		@AdmOpenAcadSemesterId=ADM_PLACE_EXAM_DATETIME.ADM_OPEN_ACAD_SEMESTER_ID, 
		@AutoLoad = ADM_CDE_PLACEMENT_EXAM.AUTOLOAD_FLG
FROM dbo.ADM_PLACE_EXAM_DATETIME inner JOIN dbo.ADM_CDE_PLACEMENT_EXAM ON ADM_PLACE_EXAM_DATETIME.ADM_CDE_PLACEMENT_EXAM_ID = dbo.ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID 
WHERE ADM_PLACE_EXAM_DATETIME_ID = @ADM_PLACE_EXAM_DATETIME_ID

IF(@AutoLoad=1)
BEGIN

SELECT    ADM_APPLICANT.ADM_APPLICANT_ID
FROM      ADM_APP_REG_HISTORY INNER JOIN
          ADM_APPLICANT ON ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
          ADM_OPEN_ACAD_SEMESTER ON 
          ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID = ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID
WHERE	(ADM_APP_REG_HISTORY.ADM_CDE_APP_TYPE_ID = 1) 
		AND ADM_APP_REG_HISTORY.CURRENT_FLG = 1
		AND (ADM_OPEN_ACAD_SEMESTER.IS_CURRENT = 1) 
		AND dbo.ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId
		AND NOT EXISTS (SELECT 1 FROM ADM_APP_PLACEMENT_EXAM INNER JOIN dbo.ADM_PLACE_EXAM_DATETIME ON dbo.ADM_APP_PLACEMENT_EXAM.ADM_PLACE_EXAM_DATETIME_ID = dbo.ADM_PLACE_EXAM_DATETIME.ADM_PLACE_EXAM_DATETIME_ID WHERE ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID=ADM_APPLICANT.ADM_APPLICANT_ID AND dbo.ADM_PLACE_EXAM_DATETIME.ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId)
	
END

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SV_USER_MESSAGE_GetByAdmApplicantId" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
			    SELECT     SV_USER_MESSAGE.SV_USER_MESSAGE_ID, 
			               SV_USER_MESSAGE.SE_USER_ID, 
			               SV_USER_MESSAGE.SV_MESSAGE_ID, 
			               SV_USER_MESSAGE.OPENED_FLG, 
                        SV_USER_MESSAGE.ADM_APPLICANT_ID, 
                        SV_USER_MESSAGE.DELETE_FLG
           FROM         SV_USER_MESSAGE INNER JOIN
                        SV_MESSAGE ON SV_USER_MESSAGE.SV_MESSAGE_ID = 
                        SV_MESSAGE.SV_MESSAGE_ID
				   WHERE
					SV_USER_MESSAGE.ADM_APPLICANT_ID = @AdmApplicantId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CHK_ADD_STF_DATETIME" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
			    SELECT     SV_USER_MESSAGE.SV_USER_MESSAGE_ID, 
			               SV_USER_MESSAGE.SE_USER_ID, 
			               SV_USER_MESSAGE.SV_MESSAGE_ID, 
			               SV_USER_MESSAGE.OPENED_FLG, 
                        SV_USER_MESSAGE.ADM_APPLICANT_ID, 
                        SV_USER_MESSAGE.DELETE_FLG
           FROM         SV_USER_MESSAGE INNER JOIN
                        SV_MESSAGE ON SV_USER_MESSAGE.SV_MESSAGE_ID = 
                        SV_MESSAGE.SV_MESSAGE_ID
				   WHERE
					SV_USER_MESSAGE.ADM_APPLICANT_ID = @AdmApplicantId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="GetStaffTeachingDays">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>

      </parameters>
      <body>
        <![CDATA[
        
      
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStaff_LecturesNotes">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>

      </parameters>
      <body>
        <![CDATA[
        
      
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetCourseSectionStudentsAbsence">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsCodeClassDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@SeqNo" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT distinct ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD_FACULTY.STUD_FACULTY_CODE, 
		      ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_SEMESTER.ACCUM_POINT, 
              ED_STUD_SEMESTER.ACCUM_GPA, ED_STUD_SEMESTER.ACCUM_CH,
              ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID, 
              ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN,
              entFac.ENT_DESCR_AR Fac_Descr_Ar, entFac.ENT_DESCR_EN Fac_Descr_En,
              ED_STUD_COURSE_REG.ED_COURSE_ID,
		      ED_COURSE.COURSE_CODE,
		      ED_COURSE.COURSE_DESCR_EN,
		      ED_COURSE.COURSE_DESCR_AR,
		      ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
		      isnull(ED_STUD_ABS_FW.SEQ_NO, 0) SEQ_NO
	      FROM ED_STUD_GROUP 
		      INNER JOIN ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
			      AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1)
		      INNER JOIN dbo.ED_COURSE ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID	
		      INNER JOIN ED_STUD_SEMESTER ON ED_STUD_GROUP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
			      AND ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
			      AND ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
			      AND ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId			
		      INNER JOIN ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID 
		      INNER JOIN ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID 
			      AND isnull(ED_STUD_SEMESTER.AS_FACULTY_INFO_ID, 0) = isnull(ED_STUD_FACULTY.AS_FACULTY_INFO_ID, 0)
			      AND ED_STUD_FACULTY.IS_ACTIVE = 1
		      inner join ENTITY_MAIN entFac on isnull(entFac.AS_FACULTY_INFO_ID, 0) = isnull(ED_STUD_FACULTY.AS_FACULTY_INFO_ID, 0)
			      and entFac.ENT_CODE_ENTITY_TYPE_ID = (case when ED_STUD_FACULTY.AS_FACULTY_INFO_ID is null then 1 else 2 end)
		      inner join AS_CODE_DEGREE on AS_CODE_DEGREE.AS_CODE_DEGREE_ID = ED_STUD_FACULTY.AS_CODE_DEGREE_ID
		      INNER JOIN SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID 
		      INNER JOIN SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID 
		      INNER JOIN ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID 
		      INNER JOIN ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
		      left outer join (ED_STUD_STATE 
			      INNER JOIN ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
				      and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5
				      and ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1
		      ) on ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
		      left outer join SC_SCHEDULE_DTL_EXT_STF on SC_SCHEDULE_DTL_EXT_STF.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
		      LEFT OUTER JOIN ED_STUD_ABS_FW ON ED_STUD_ABS_FW.ED_STUD_ID = ED_STUD.ED_STUD_ID
			      AND ED_STUD_ABS_FW.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
			      AND ED_STUD_ABS_FW.ED_CODE_SEMESTER_ID =  ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
			      AND ISNULL(ED_STUD_ABS_FW.AS_FACULTY_INFO_ID, 0) = ISNULL(ED_STUD_SEMESTER.AS_FACULTY_INFO_ID, 0)
			      AND ED_STUD_ABS_FW.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID
	      WHERE (@ScScheduleDtlId is null or @ScScheduleDtlId = 0 or ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId) 
		      AND (@EdCourseId is null or @EdCourseId = 0 or ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId)
		      and (@AsCodeClassDegreeId is null or @AsCodeClassDegreeId = 0 or AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID = @AsCodeClassDegreeId)			
		      and (@EntityMainId is null or @EntityMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntityMainId)
		      and (@SaStfMemberId is null or @SaStfMemberId = 0 or SC_SCHEDULE_DTL_EXT_STF.SA_STF_MAMBER_ID = @SaStfMemberId)
		      and (@SeqNo is null or @SeqNo = 0 or isnull(ED_STUD_ABS_FW.SEQ_NO, 0) = @SeqNo)
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetCourseSectionStudents">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsCodeClassDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT distinct ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_SEMESTER.ACCUM_POINT, 
              ED_STUD_SEMESTER.ACCUM_GPA, ED_STUD_SEMESTER.ACCUM_CH, ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN
	      FROM ED_STUD_GROUP 
		      INNER JOIN ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
			      AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1)	
		      INNER JOIN ED_STUD_SEMESTER ON ED_STUD_GROUP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
			      AND ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
			      AND ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
			      AND ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId			
		      INNER JOIN ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID 
		      INNER JOIN ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID 
			      AND isnull(ED_STUD_SEMESTER.AS_FACULTY_INFO_ID, 0) = isnull(ED_STUD_FACULTY.AS_FACULTY_INFO_ID, 0)
			      AND ED_STUD_FACULTY.IS_ACTIVE = 1
		      inner join AS_CODE_DEGREE on AS_CODE_DEGREE.AS_CODE_DEGREE_ID = ED_STUD_FACULTY.AS_CODE_DEGREE_ID
		      INNER JOIN SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID 
		      INNER JOIN SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID 
		      INNER JOIN ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID 
		      INNER JOIN ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
		      left outer join (ED_STUD_STATE 
			      INNER JOIN ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
				      and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5
				      and ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1
		      ) on ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
		      left outer join SC_SCHEDULE_DTL_EXT_STF on SC_SCHEDULE_DTL_EXT_STF.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
	      WHERE (@ScScheduleDtlId is null or @ScScheduleDtlId = 0 or ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId) 
		      AND (@EdCourseId is null or @EdCourseId = 0 or ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId)
		      and (@AsCodeClassDegreeId is null or @AsCodeClassDegreeId = 0 or AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID = @AsCodeClassDegreeId)			
		      and (@EntityMainId is null or @EntityMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntityMainId)
		      and (@SaStfMemberId is null or @SaStfMemberId = 0 or SC_SCHEDULE_DTL_EXT_STF.SA_STF_MAMBER_ID = @SaStfMemberId)
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="Get_Agenda_Activity">
    </procedure>
    <procedure owner="dbo" name="CheckForSubmit">
    </procedure>

    <procedure owner="dbo" name="GetAppProgramAndFaculty">
    </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_AutoEnrollment">
    </procedure>


    <procedure owner="dbo" name="ADM_APPLICANT_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Output" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AdmAppCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
        <parameter name="@Username" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@PasswordSalt" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@PasswordHash" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@SecurityQs" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@SecurityQsAnsSalt" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@SecurityQsAnsHash" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@ActivationCode" type="nvarchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
        <parameter name="@ActivationFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@FnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@MnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@MnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@LnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@LnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@Cpr" type="numeric" direction="Input" size="9" precision="10" scale="0" param="(10, 0)" nulldefault=""/>
        <parameter name="@PassporNo" type="numeric" direction="Input" size="9" precision="18" scale="0" param="(18, 0)" nulldefault=""/>
        <parameter name="@PassporExpireDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@Birthdate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@PhotoPath" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@GsCdeMaritalStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@WorkFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@FullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_AdmApplicantId numeric(7, 0)
				SELECT @V_AdmApplicantId = ISNULL(MAX(ADM_APPLICANT_ID), 0) + 1 FROM [dbo].[ADM_APPLICANT];
				
				INSERT INTO [dbo].[ADM_APPLICANT]
					(
					[ADM_APPLICANT_ID]
					,[ADM_APP_CODE]
					,[USERNAME]
					,[PASSWORD_SALT]
					,[PASSWORD_HASH]
					,[SECURITY_QS]
					,[SECURITY_QS_ANS_SALT]
					,[SECURITY_QS_ANS_HASH]
					,[ACTIVATION_CODE]
					,[ACTIVATION_FLG]
					,[REG_DATE]
					,[FNAME_AR]
					,[FNAME_EN]
					,[MNAME_AR]
					,[MNAME_EN]
					,[LNAME_AR]
					,[LNAME_EN]
					,[FAMILY_AR]
					,[FAMILY_EN]
					,[GS_CODE_RELIGION_ID]
					,[CPR]
					,[PASSPOR_NO]
					,[PASSPOR_EXPIRE_DATE]
					,[BIRTHDATE]
					,[PHOTO_PATH]
					,[GS_CDE_MARITAL_STATUS_ID]
					,[GS_CODE_GENDER_ID]
					,[WORK_FLG]
					,[GS_COUNTRY_NODE_ID]
					,[FULL_NAME_AR]
					,[FULL_NAME_EN]
					)
				VALUES
					(
					@V_AdmApplicantId
					,@AdmAppCode
					,@Username
					,@PasswordSalt
					,@PasswordHash
					,@SecurityQs
					,@SecurityQsAnsSalt
					,@SecurityQsAnsHash
					,@ActivationCode
					,@ActivationFlg
					,@RegDate
					,@FnameAr
					,@FnameEn
					,@MnameAr
					,@MnameEn
					,@LnameAr
					,@LnameEn
					,@FamilyAr
					,@FamilyEn
					,@GsCodeReligionId
					,@Cpr
					,@PassporNo
					,@PassporExpireDate
					,@Birthdate
					,@PhotoPath
					,@GsCdeMaritalStatusId
					,@GsCodeGenderId
					,@WorkFlg
					,@GsCountryNodeId
					,@FullNameAr
					,@FullNameEn
					)
          
          set @AdmApplicantId = @V_AdmApplicantId;
				
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="GetAppAcceptanceCriteria">
    </procedure>

    <procedure owner="dbo" name="ApplyAcceptanceCriteria">
    </procedure>

    <procedure owner="dbo" name="ChangeStudsEnrollUnofficial">
    </procedure>

    <procedure owner="dbo" name="GetAdmCodeSemestersForAcadYear">
    </procedure>

    <procedure owner="dbo" name="GetAdmAcadYears">
    </procedure>

    <procedure owner="dbo" name="CHK_ADD_HALL_TO_Section">
    </procedure>

    <procedure owner="dbo" name="FilterStudSectionsData">
    </procedure>

    <procedure owner="dbo" name="CHK_ADD_STF_TO_SECTION">
    </procedure>

    <procedure owner="dbo" name="LoadFeeOnApplicant">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeFeeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        declare @Max_ADM_APP_FEES_ID numeric(7, 0), @AsCodeDegreeClassId numeric(7, 0), @AsCodeDegreeId numeric(7, 0);
	
	      select @Max_ADM_APP_FEES_ID = isnull(max(ADM_APP_FEES_ID), 0)
	      from dbo.ADM_APP_FEES
	
	      select @AsCodeDegreeClassId = AS_CODE_DEGREE_CLASS_ID,
		      @AsCodeDegreeId = AS_CODE_DEGREE_ID
	      from ADM_CDE_FEE
	      where ADM_CDE_FEE_ID = @AdmCdeFeeId;

	      insert into dbo.ADM_APP_FEES(ADM_APP_FEES_ID, ADM_CDE_FEE_ID, ADM_APPLICANT_ID, IS_PAYED, ADM_OPEN_ACAD_SEMESTER_ID)
	      select @Max_ADM_APP_FEES_ID + ROW_NUMBER() over(order by ADM_APPLICANT.ADM_APPLICANT_ID) rowNumber, @AdmCdeFeeId,
		      ADM_APP_REG_HISTORY.ADM_APPLICANT_ID, 0, ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
	      from ADM_APPLICANT 
		      INNER JOIN ADM_APP_REG_HISTORY on ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
		      inner join ADM_OPEN_ACAD_SEMESTER on ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
			      AND ADM_OPEN_ACAD_SEMESTER.IS_CURRENT = 1
		      left outer join ADM_APP_FEES on ADM_APP_FEES.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
			      and ADM_APP_FEES.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
			      and ADM_APP_FEES.ADM_CDE_FEE_ID = @AdmCdeFeeId
	      WHERE ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId
		      and ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId
		      and ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId
		      And ADM_APP_FEES.ADM_CDE_FEE_ID IS NULL;
        
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="LoadReqDocOnApplicants">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmReqDocId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        declare @MaxAdmAppDocID numeric(7, 0), 
            @AsCodeDegreeClassId numeric(7, 0), 
            @AsCodeDegreeId numeric(7, 0),
            @EntMainID numeric(5, 0),
		    @TransApplFlg numeric(1, 0);
	
	select @MaxAdmAppDocID = isnull(max(ADM_APP_DOC_ID), 0)
	from dbo.ADM_APP_DOC
	
	  SELECT   @TransApplFlg = TRANS_APP_FLG, 
	           @AsCodeDegreeClassId = AS_CODE_DEGREE_CLASS_ID, 
	           @AsCodeDegreeId =   AS_CODE_DEGREE_ID, 
	           @EntMainID =   ENT_MAIN_ID
      FROM         ADM_REQ_DOC
      WHERE     (ADM_REQ_DOC_ID = @AdmReqDocId)
	

	INSERT INTO ADM_APP_DOC(ADM_APP_DOC_ID, ADM_APPLICANT_ID, ADM_REQ_DOC_ID, SUBMIT_DATE,  ED_STUD_ID)
	select @MaxAdmAppDocID,ADM_APP_REG_HISTORY.ADM_APPLICANT_ID, @AdmReqDocId,GETDATE(),ADM_APP_CODE
	FROM         ADM_APPLICANT INNER JOIN
                      ADM_APP_REG_HISTORY ON ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ADM_OPEN_ACAD_SEMESTER ON 
                      ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID AND 
                      ADM_OPEN_ACAD_SEMESTER.IS_CURRENT = 1
	WHERE ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId
		and ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId
		and ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId
		and ADM_APP_REG_HISTORY.ADM_CDE_APP_TYPE_ID = case when @TransApplFlg = 1 then 2 else 1 end
		

        
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SearchApplicantsDoc">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmReqDocId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntMainID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@TransApplFlg" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        SELECT DISTINCT 
                      ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_APP_CODE, ADM_APPLICANT.USERNAME, ADM_APPLICANT.PASSWORD_SALT, 
                      ADM_APPLICANT.PASSWORD_HASH, ADM_APPLICANT.SECURITY_QS, ADM_APPLICANT.SECURITY_QS_ANS_SALT, ADM_APPLICANT.SECURITY_QS_ANS_HASH, 
                      ADM_APPLICANT.ACTIVATION_CODE, ADM_APPLICANT.ACTIVATION_FLG, ADM_APPLICANT.REG_DATE, ADM_APPLICANT.FNAME_AR, ADM_APPLICANT.FNAME_EN, 
                      ADM_APPLICANT.MNAME_AR, ADM_APPLICANT.MNAME_EN, ADM_APPLICANT.LNAME_AR, ADM_APPLICANT.LNAME_EN, ADM_APPLICANT.FAMILY_AR, 
                      ADM_APPLICANT.FAMILY_EN, ADM_APPLICANT.GS_CODE_RELIGION_ID, ADM_APPLICANT.CPR, ADM_APPLICANT.PASSPOR_NO, 
                      ADM_APPLICANT.PASSPOR_EXPIRE_DATE, ADM_APPLICANT.BIRTHDATE, ADM_APPLICANT.PHOTO_PATH, ADM_APPLICANT.GS_CDE_MARITAL_STATUS_ID, 
                      ADM_APPLICANT.GS_CODE_GENDER_ID, ADM_APPLICANT.WORK_FLG, ADM_APPLICANT.GS_COUNTRY_NODE_ID, ADM_APPLICANT.FULL_NAME_AR, 
                      ADM_APPLICANT.FULL_NAME_EN
FROM         ADM_APPLICANT INNER JOIN
                      ADM_APP_REG_HISTORY ON ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ADM_OPEN_ACAD_SEMESTER ON 
                      ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID AND 
                      ADM_OPEN_ACAD_SEMESTER.IS_CURRENT = 1
WHERE     (ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId) AND (ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId) 
                      AND (ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId) AND 
                        (NOT EXISTS
                          (SELECT     1 AS Expr1
                             FROM         ADM_APP_DOC
                             WHERE     (ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID) 
                             AND (ADM_REQ_DOC_ID = @AdmReqDocId)))
END
        
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_TransferDataToStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeFeeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        declare @Max_ADM_APP_FEES_ID numeric(7, 0), @AsCodeDegreeClassId numeric(7, 0), @AsCodeDegreeId numeric(7, 0);
	
	      select @Max_ADM_APP_FEES_ID = isnull(max(ADM_APP_FEES_ID), 0)
	      from dbo.ADM_APP_FEES
	
	      select @AsCodeDegreeClassId = AS_CODE_DEGREE_CLASS_ID,
		      @AsCodeDegreeId = AS_CODE_DEGREE_ID
	      from ADM_CDE_FEE
	      where ADM_CDE_FEE_ID = @AdmCdeFeeId;

	      insert into dbo.ADM_APP_FEES(ADM_APP_FEES_ID, ADM_CDE_FEE_ID, ADM_APPLICANT_ID, IS_PAYED, ADM_OPEN_ACAD_SEMESTER_ID)
	      select @Max_ADM_APP_FEES_ID + ROW_NUMBER() over(order by ADM_APPLICANT.ADM_APPLICANT_ID) rowNumber, @AdmCdeFeeId,
		      ADM_APP_REG_HISTORY.ADM_APPLICANT_ID, 0, ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
	      from ADM_APPLICANT 
		      INNER JOIN ADM_APP_REG_HISTORY on ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
		      inner join ADM_OPEN_ACAD_SEMESTER on ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
			      AND ADM_OPEN_ACAD_SEMESTER.IS_CURRENT = 1
		      left outer join ADM_APP_FEES on ADM_APP_FEES.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
			      and ADM_APP_FEES.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
			      and ADM_APP_FEES.ADM_CDE_FEE_ID = @AdmCdeFeeId
	      WHERE ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId
		      and ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId
		      and ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId
		      And ADM_APP_FEES.ADM_CDE_FEE_ID IS NULL;
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_ManualEnrollment">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeFeeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        declare @Max_ADM_APP_FEES_ID numeric(7, 0), @AsCodeDegreeClassId numeric(7, 0), @AsCodeDegreeId numeric(7, 0);
	
	      select @Max_ADM_APP_FEES_ID = isnull(max(ADM_APP_FEES_ID), 0)
	      from dbo.ADM_APP_FEES
	
	      select @AsCodeDegreeClassId = AS_CODE_DEGREE_CLASS_ID,
		      @AsCodeDegreeId = AS_CODE_DEGREE_ID
	      from ADM_CDE_FEE
	      where ADM_CDE_FEE_ID = @AdmCdeFeeId;

	      insert into dbo.ADM_APP_FEES(ADM_APP_FEES_ID, ADM_CDE_FEE_ID, ADM_APPLICANT_ID, IS_PAYED, ADM_OPEN_ACAD_SEMESTER_ID)
	      select @Max_ADM_APP_FEES_ID + ROW_NUMBER() over(order by ADM_APPLICANT.ADM_APPLICANT_ID) rowNumber, @AdmCdeFeeId,
		      ADM_APP_REG_HISTORY.ADM_APPLICANT_ID, 0, ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
	      from ADM_APPLICANT 
		      INNER JOIN ADM_APP_REG_HISTORY on ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
		      inner join ADM_OPEN_ACAD_SEMESTER on ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
			      AND ADM_OPEN_ACAD_SEMESTER.IS_CURRENT = 1
		      left outer join ADM_APP_FEES on ADM_APP_FEES.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
			      and ADM_APP_FEES.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
			      and ADM_APP_FEES.ADM_CDE_FEE_ID = @AdmCdeFeeId
	      WHERE ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId
		      and ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId
		      and ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId
		      And ADM_APP_FEES.ADM_CDE_FEE_ID IS NULL;
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ApplicantSearch">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SearchText" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(100)" nulldefault="" />
        <parameter name="@CPR" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(50)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Age" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AgeOperator" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(10)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCoutryNodeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmCdeAppTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT distinct ADM_APPLICANT.*
	      FROM ADM_APPLICANT 
		      INNER JOIN ADM_APP_REG_HISTORY on ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
		      inner join ADM_OPEN_ACAD_SEMESTER on ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
	      where (@EdAcadYearId is null or @EdAcadYearId = 0 or ADM_OPEN_ACAD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId)
		      and (@EdCodeSemesterId is null or @EdCodeSemesterId = 0 or ADM_OPEN_ACAD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
		      and (@SearchText is null or ADM_APPLICANT.FULL_NAME_EN like '%' + @SearchText + '%' or ADM_APPLICANT.ADM_APP_CODE like '%' + @SearchText + '%')
		      and (@GsCodeGenderId is null or @GsCodeGenderId = 0 or ADM_APPLICANT.GS_CODE_GENDER_ID = @GsCodeGenderId) -- Gender
		      and ((@AgeOperator is null and @Age is null) or (@AgeOperator = '=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) = @Age)    -- Age = @Age
													       or (@AgeOperator = '>=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) >= @Age)  -- Age >= @Age
													       or (@AgeOperator = '<=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) <= @Age)  -- Age <= @Age
													       or (@AgeOperator = '!=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) <> @Age)) -- Age != @Age
		      and (@GsCoutryNodeId is null or @GsCoutryNodeId = 0 or ADM_APPLICANT.GS_COUNTRY_NODE_ID = @GsCoutryNodeId)
		      and (@CPR is null or ADM_APPLICANT.CPR like @CPR + '%') -- IDENTITY Number
		      and (@AdmCdeAppTypeId is null or @AdmCdeAppTypeId = 0 or ADM_APP_REG_HISTORY.ADM_CDE_APP_TYPE_ID = @AdmCdeAppTypeId) -- ADM Status
		      and (@AsCodeDegreeClassId is null or @AsCodeDegreeClassId = 0 or ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)
		      and (@AsCodeDegreeId is null or @AsCodeDegreeId = 0 or ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId)
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_CancelTransferDataToStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SearchText" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(100)" nulldefault="" />
        <parameter name="@CPR" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(50)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Age" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AgeOperator" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(10)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCoutryNodeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmCdeAppTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT distinct ADM_APPLICANT.*
	      FROM ADM_APPLICANT 
		      INNER JOIN ADM_APP_REG_HISTORY on ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
		      inner join ADM_OPEN_ACAD_SEMESTER on ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
	      where (@EdAcadYearId is null or @EdAcadYearId = 0 or ADM_OPEN_ACAD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId)
		      and (@EdCodeSemesterId is null or @EdCodeSemesterId = 0 or ADM_OPEN_ACAD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
		      and (@SearchText is null or ADM_APPLICANT.FULL_NAME_EN like '%' + @SearchText + '%' or ADM_APPLICANT.ADM_APP_CODE like '%' + @SearchText + '%')
		      and (@GsCodeGenderId is null or @GsCodeGenderId = 0 or ADM_APPLICANT.GS_CODE_GENDER_ID = @GsCodeGenderId) -- Gender
		      and ((@AgeOperator is null and @Age is null) or (@AgeOperator = '=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) = @Age)    -- Age = @Age
													       or (@AgeOperator = '>=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) >= @Age)  -- Age >= @Age
													       or (@AgeOperator = '<=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) <= @Age)  -- Age <= @Age
													       or (@AgeOperator = '!=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) <> @Age)) -- Age != @Age
		      and (@GsCoutryNodeId is null or @GsCoutryNodeId = 0 or ADM_APPLICANT.GS_COUNTRY_NODE_ID = @GsCoutryNodeId)
		      and (@CPR is null or ADM_APPLICANT.CPR like @CPR + '%') -- IDENTITY Number
		      and (@AdmCdeAppTypeId is null or @AdmCdeAppTypeId = 0 or ADM_APP_REG_HISTORY.ADM_CDE_APP_TYPE_ID = @AdmCdeAppTypeId) -- ADM Status
		      and (@AsCodeDegreeClassId is null or @AsCodeDegreeClassId = 0 or ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)
		      and (@AsCodeDegreeId is null or @AsCodeDegreeId = 0 or ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId)
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_CancelManualEnrollment">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SearchText" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(100)" nulldefault="" />
        <parameter name="@CPR" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(50)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Age" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AgeOperator" type="nvarchar" direction="Input" size="5" precision="5" scale="0" param="(10)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCoutryNodeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmCdeAppTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT distinct ADM_APPLICANT.*
	      FROM ADM_APPLICANT 
		      INNER JOIN ADM_APP_REG_HISTORY on ADM_APP_REG_HISTORY.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
		      inner join ADM_OPEN_ACAD_SEMESTER on ADM_OPEN_ACAD_SEMESTER.ADM_OPEN_ACAD_SEMESTER_ID = ADM_APP_REG_HISTORY.ADM_OPEN_ACAD_SEMESTER_ID
	      where (@EdAcadYearId is null or @EdAcadYearId = 0 or ADM_OPEN_ACAD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId)
		      and (@EdCodeSemesterId is null or @EdCodeSemesterId = 0 or ADM_OPEN_ACAD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
		      and (@SearchText is null or ADM_APPLICANT.FULL_NAME_EN like '%' + @SearchText + '%' or ADM_APPLICANT.ADM_APP_CODE like '%' + @SearchText + '%')
		      and (@GsCodeGenderId is null or @GsCodeGenderId = 0 or ADM_APPLICANT.GS_CODE_GENDER_ID = @GsCodeGenderId) -- Gender
		      and ((@AgeOperator is null and @Age is null) or (@AgeOperator = '=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) = @Age)    -- Age = @Age
													       or (@AgeOperator = '>=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) >= @Age)  -- Age >= @Age
													       or (@AgeOperator = '<=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) <= @Age)  -- Age <= @Age
													       or (@AgeOperator = '!=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTHDATE, GETDATE()) <> @Age)) -- Age != @Age
		      and (@GsCoutryNodeId is null or @GsCoutryNodeId = 0 or ADM_APPLICANT.GS_COUNTRY_NODE_ID = @GsCoutryNodeId)
		      and (@CPR is null or ADM_APPLICANT.CPR like @CPR + '%') -- IDENTITY Number
		      and (@AdmCdeAppTypeId is null or @AdmCdeAppTypeId = 0 or ADM_APP_REG_HISTORY.ADM_CDE_APP_TYPE_ID = @AdmCdeAppTypeId) -- ADM Status
		      and (@AsCodeDegreeClassId is null or @AsCodeDegreeClassId = 0 or ADM_APP_REG_HISTORY.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)
		      and (@AsCodeDegreeId is null or @AsCodeDegreeId = 0 or ADM_APP_REG_HISTORY.AS_CODE_DEGREE_ID = @AsCodeDegreeId)
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ChangeStateToH">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Selected_StudSemester" type="xml" direction="Input" size="5" precision="3" scale="0" param="(5000)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
--Set @Selected_StudSemester = '<Studs xmlns="http://www.w3.org/2005/Atom">
-- <Stud> 
--  <EdStudId>1692</EdStudId> 
--  <EdStudSemesterId>2048</EdStudSemesterId> 
-- </Stud>
--  <Stud> 
--  <EdStudId>2637</EdStudId> 
--  <EdStudSemesterId>2856</EdStudSemesterId> 
-- </Stud> 
--</Studs>'
	
DECLARE @SelectedStuds TABLE(EdStudId NUMERIC(9,0),EdStudSemesterId numeric(9,0))

;with xmlnamespaces (default 'http://www.w3.org/2005/Atom') 
INSERT INTO @SelectedStuds
select x.Record.value('EdStudId[1]', 'numeric(9,0)') as sEdStudId
	, x.Record.value('EdStudSemesterId[1]', 'numeric(9,0)') as sEdStudSemesterId
from @Selected_StudSemester.nodes('//Studs/Stud') as x (Record)

IF EXISTS (SELECT 1 FROM dbo.ED_STUD_SEMESTER INNER JOIN @SelectedStuds AS SS
			ON SS.EdStudSemesterId = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
			WHERE dbo.ED_STUD_SEMESTER.IS_CLOSED = 0)
BEGIN
RAISERROR('CLOSE_ALL_RECORDS_FIRST',16,-1);
RETURN;
END

DECLARE @EdStudId NUMERIC(9,0),@EdStudSemesterId numeric(9,0);
DECLARE curr_studs CURSOR FOR
SELECT t.EdStudId,t.EdStudSemesterId FROM @SelectedStuds AS t
OPEN curr_studs
FETCH NEXT FROM curr_studs INTO @EdStudId,@EdStudSemesterId
WHILE @@FETCH_STATUS = 0
BEGIN
	DECLARE @AsFacultyInfoId NUMERIC, @EdAcadYearId NUMERIC, @EntMainId NUMERIC
	SELECT @AsFacultyInfoId=AS_FACULTY_INFO_ID,@EdAcadYearId=ed_acad_year_id FROM dbo.ED_STUD_SEMESTER WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId 
	
	DECLARE @flgAll INT, @flgFull INT
	SELECT @flgAll=COUNT(*), @flgFull=ISNULL(SUM(CASE WHEN ISNULL(dbo.CheckFullFillForStudent(@EdStudId,@AsFacultyInfoId,dbo.ED_STUD_STATE.ENT_MAIN_ID,@EdAcadYearId),'T')= 'T' THEN 1 ELSE 0 end),0) 
	FROM dbo.ED_STUD_STATE WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId 
	
	IF(@flgAll = @flgFull)
	BEGIN
		UPDATE ed_stud_semester 
		SET HOLD_FOR_GRAD=1
		WHERE ed_stud_semester_id = @EdStudSemesterId 
	END
	
	FETCH NEXT FROM curr_studs INTO @EdStudId,@EdStudSemesterId
END
CLOSE curr_studs
DEALLOCATE curr_studs
        
			]]>
      </body>
    </procedure>










    <procedure owner="dbo" name="SearchStudCourseChange">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>

      <body>
        <![CDATA[
        
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="CalcAcadWarn">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
DECLARE @AcadWarnMinCGPA NUMERIC(5,2) = 2;

declare @Acum_GPA numeric(5,2) = 0,@Acum_CH numeric(5,2) = 0,@Acum_Passed_CH numeric(5,2) = 0, @Acum_POINT numeric(5,2) = 0;

SELECT @Acum_GPA=t.Acum_GPA,@Acum_CH=Acum_CH ,@Acum_Passed_CH=Acum_Passed_CH ,@Acum_POINT=Acum_POINT
FROM dbo.CalcAccumGPA(@EdStudSemesterId) AS t
		
IF(@Acum_GPA < @AcadWarnMinCGPA)
BEGIN
	SELECT isnull(max(SEQ_NO),0)+1 AS SEQ_NO FROM dbo.ED_STUD_ACAD_WARN WHERE CNCL_FLG = 0 AND ED_STUD_ID = (SELECT ed_stud_id FROM dbo.ED_STUD_SEMESTER WHERE ED_STUD_SEMESTER_ID= @EdStudSemesterId)
END
ELSE
BEGIN
	SELECT 0 AS SEQ_NO
END
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetFullfilmentEntities">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
DECLARE @nodePath NVARCHAR(50);
SELECT @nodePath=NODE_PATH FROM dbo.ENTITY_MAIN WHERE ENT_MAIN_ID = @EntMainId

SELECT DISTINCT ENTITY_MAIN.ENT_MAIN_ID, ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN,ENT_FULLFILL_MD_DATA.ED_ACAD_YEAR_ID,dbo.ED_ACAD_YEAR.DESCR_AR,dbo.ED_ACAD_YEAR.DESCR_EN
FROM ENT_FULLFILL_MD_DATA INNER JOIN
     ENTITY_MAIN ON ENT_FULLFILL_MD_DATA.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN dbo.ED_ACAD_YEAR
     ON dbo.ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ENT_FULLFILL_MD_DATA.ED_ACAD_YEAR_ID
WHERE (@AsCodeDegreeId =0 or ENTITY_MAIN.AS_CODE_DEGREE_ID = @AsCodeDegreeId)
And (@EdAcadYearId=0 or ENT_FULLFILL_MD_DATA.ED_ACAD_YEAR_ID=@EdAcadYearId)
AND (@AsFacultyInfoId =0 or ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
AND (@nodePath IS NULL OR dbo.ENTITY_MAIN.NODE_PATH LIKE @nodePath+'%')
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetCoursePkgOfStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT ED_STUD_STATE.ENT_MAIN_ID, ED_STUD_STATE.ED_ACAD_YEAR_ID, ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID
	      FROM dbo.ENT_COURSE_PKG_HDR
		      INNER JOIN dbo.ENT_COURSE_PKG_DTL ON ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID
		      INNER JOIN ED_STUD_STATE ON ED_STUD_STATE.ED_ACAD_YEAR_ID = ENT_COURSE_PKG_HDR.ED_ACAD_YEAR_ID
			      AND ED_STUD_STATE.ENT_MAIN_ID = ENT_COURSE_PKG_HDR.ENT_MAIN_ID
			      AND dbo.ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId
	      WHERE ED_COURSE_ID = @EdCourseId
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="WaitingListDestroy">

    </procedure>

    <procedure owner="dbo" name="CrsRegisterFindSections">

    </procedure>
    <procedure owner="dbo" name="GetCourseSectionsForRegister">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@USER_TYPE" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ActionType" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        
	        --============select all course sections======================-
	        --1-Section No- capacity max,capacity-count(active stud)-wait capacity-count(wait stud)
	        ---get top 1 section Time conflict from current student schedule
	        ---get top 1 section exam Time conflict from current student schedule
	        --Filter sections for all gender(=null) or for gender=Stud Gender
	        --Filter Sections For student to be opened is_closed=0 &online_flg=1 & Internal_flg=0
	        --Filter Sections For Reg Admin for all status of sections
	        Declare @ED_ACAD_YEAR_ID NUMERIC(5, 0), @ED_CODE_SEMESTER_ID NUMERIC(5, 0),
		        @EdStudId NUMERIC(9, 0), @EXP_FOR_GRAD NUMERIC(1, 0),
		        @EXM_CONF_ED_EXAM_SCHDL_ID NUMERIC(9, 0);
		
	        SELECT @ED_ACAD_YEAR_ID = ED_ACAD_YEAR_ID,
		        @ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER_ID,
		        @EdStudId = ED_STUD_ID, 
		        @EXP_FOR_GRAD = EXP_FOR_GRAD
	        FROM dbo.ED_STUD_SEMESTER
	        WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId;
	
	        IF @ActionType = 1 OR @ActionType = 2
		        EXEC C_CHK_ED_STUD_COURSE_REG_INSERT @ED_ACAD_YEAR_ID, @ED_CODE_SEMESTER_ID, @USER_TYPE,
			        @EXP_FOR_GRAD, @EdStudSemesterId, @EdCourseId, @EdStudId;
		
	        SELECT @EXM_CONF_ED_EXAM_SCHDL_ID = dbo.CHK_STUD_EXAM_CONFLICT(@ED_ACAD_YEAR_ID, @ED_CODE_SEMESTER_ID, @EdStudSemesterId, @EdCourseId);

	        SELECT SC_SCHEDULE_DTL.GROUP_ORDER, 
	         SC_SCHEDULE_DTL.NO_STUDENTS,
	         (SELECT Count(ED_STUD_GROUP.ED_STUD_GROUP_ID) 
		        FROM ED_STUD_GROUP 
			        INNER JOIN SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
		        WHERE (ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID) 
			        AND (ED_STUD_GROUP.WAIT_NO = 0  or ED_STUD_GROUP.WAIT_NO is null))  Reg_Stud_Count,
	         SC_SCHEDULE_DTL.NO_STUD_WAIT,
	         (SELECT Count(ED_STUD_GROUP.ED_STUD_GROUP_ID) 
		        FROM ED_STUD_GROUP 
			        INNER JOIN SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
		        WHERE(ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID) 
			        AND (ED_STUD_GROUP.WAIT_NO >0))Wait_Stud_Count,
	         SC_SCHEDULE_DTL.NO_STUD_MAX, 
	         SC_SCHEDULE_DTL.INTERNAL_FLG, 
	         SC_SCHEDULE_DTL.IS_CLOSED, 
	         SC_SCHEDULE_DTL.NOTES,
	         dbo.CHK_STUD_SECTION_CONFLICT(@EdStudSemesterId,SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID) SEC_CONF_SC_SCHEDULE_DTL_ID,
	         @EXM_CONF_ED_EXAM_SCHDL_ID EXM_CONF_ED_EXAM_SCHDL_ID
	        FROM ED_OFFERING_COURSE 
		        INNER JOIN SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID 
		        INNER JOIN ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID 
		        INNER JOIN SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID
	        WHERE (ED_OFFERING.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID) 
		        AND (ED_OFFERING.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID) 
		        AND (ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId) 
		        AND (SC_SCHEDULE_DTL.GS_CODE_GENDER_ID is null 
			        OR SC_SCHEDULE_DTL.GS_CODE_GENDER_ID =(Select ED_STUD.GS_CODE_GENDER_ID From ED_STUD Where ED_STUD_ID = @EdStudId))
		        AND (ED_OFFERING.IS_APPROVED=1 ) --Get Approved schedule only
		        AND ((@USER_TYPE=1 and SC_SCHEDULE_DTL.IS_CLOSED=0) or @USER_TYPE=2) 
		        AND ((@USER_TYPE=1 and SC_SCHEDULE_DTL.ONLINE_FLG=0) or @USER_TYPE=2) 
		        AND ((@USER_TYPE=1 and SC_SCHEDULE_DTL.INTERNAL_FLG=0) or @USER_TYPE=2)
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CalculateCGPAandMajorCGPA">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@Selected_StudSemester" type="xml" direction="Input" size="5" precision="3" scale="0" param="(5000)" nulldefault="" />
        <parameter name="@GPA_Flg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@CGPA_Flg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@MajorCGPA_Flg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@Close_Flg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
              
	---- Declare some xml
	--Set @Selected_StudSemester = '<Studs xmlns="http://www.w3.org/2005/Atom">
	-- <Stud> 
	--  <EdStudId>14</EdStudId> 
	--  <EdStudSemesterId>42</EdStudSemesterId> 
	-- </Stud> 
	--</Studs>'
	
	DECLARE @SelectedStuds TABLE(EdStudId NUMERIC(9,0),EdStudSemesterId numeric(9,0))
	
	;with xmlnamespaces (default 'http://www.w3.org/2005/Atom') 
	INSERT INTO @SelectedStuds
	select x.Record.value('EdStudId[1]', 'numeric(9,0)') as sEdStudId
		, x.Record.value('EdStudSemesterId[1]', 'numeric(9,0)') as sEdStudSemesterId
	from @Selected_StudSemester.nodes('//Studs/Stud') as x (Record)

	declare @RepCalc int /*1 - for Last Time, 2 - for Max Time*/,
	@EdStudId int, @currentEdStudId int;
	
	declare @Sem_GPA numeric(5,2) = 0,@Sem_CH numeric(5,2) = 0,@Sem_Passed_CH numeric(5,2) = 0,@Sem_POINT numeric(5,2) = 0;
	declare @Acum_GPA numeric(5,2) = 0,@Acum_CH numeric(5,2) = 0,@Acum_Passed_CH numeric(5,2) = 0,@Acum_Passed_CH_R numeric(5,2) = 0, @Acum_Failed_CH numeric(5,2) = 0, @Acum_POINT numeric(5,2) = 0, @Acum_Passed_POINT numeric(5,2) = 0, @Acum_Passed_POINT_R numeric(5,2) = 0;
	declare @Sem_Maj_GPA numeric(5,2) = 0,@Sem_Maj_CH numeric(5,2) = 0,@Sem_Maj_POINT numeric(5,2) = 0;
	declare @Acum_Maj_GPA numeric(5,2) = 0,@Acum_Maj_CH numeric(5,2) = 0,@Acum_Passed_Maj_CH numeric(5,2) = 0,@Acum_Passed_Maj_CH_R numeric(5,2) = 0, @Acum_Failed_Maj_CH numeric(5,2) = 0, @Acum_Maj_POINT numeric(5,2) = 0, @Acum_Passed_Maj_POINT numeric(5,2) = 0, @Acum_Passed_Maj_POINT_R numeric(5,2) = 0;
	
	declare @SEM_EdAcadYearId numeric, @SEM_EdCodeSemesterId numeric, @SemesterOrder int, @YearOrder int, @EdStudSemesterId numeric, @ed_Code_Level_Id numeric(5,0) = 1;
	declare @CountCoursesNotHaveGrade int, @CountCoursesReg int;
	
	SELECT  @RepCalc = ENT_POLICY_COURSE_REPEAT.ED_CODE_REPEAT_RULE_ID
	FROM    ENT_POLICY_COURSE_REPEAT INNER JOIN
			ED_BYLAW ON ENT_POLICY_COURSE_REPEAT.ED_BYLAW_ID = ED_BYLAW.ED_BYLAW_ID INNER JOIN
			AS_FACULTY_INFO ON ED_BYLAW.AS_FACULTY_INFO_ID = AS_FACULTY_INFO.AS_FACULTY_INFO_ID
	WHERE   (ENT_POLICY_COURSE_REPEAT.REPEAT_FLG = 0) AND dbo.AS_FACULTY_INFO.AS_FACULTY_INFO_ID = @AsFacultyInfoId AND dbo.ED_BYLAW.ED_ACAD_YEAR_ID = @EdAcadYearId

	if(@RepCalc is null or @RepCalc not in (1,2))
  set @RepCalc = 2;
 
	declare Students cursor for    -- Get all students in the given faculty, academic year, semester
	SELECT distinct   ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID,
		   ED_ACAD_YEAR.YEAR_ORDER, ED_CODE_SEMESTER.SEMESTER_ORDER,
		   ED_STUD_SEMESTER.ED_ACAD_YEAR_ID, ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID 
	FROM ED_STUD_SEMESTER
		 inner join ED_STUD_FACULTY on ED_STUD_FACULTY.AS_FACULTY_INFO_ID =  ED_STUD_SEMESTER.AS_FACULTY_INFO_ID AND IS_ACTIVE = 1
		 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID 
		 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
		 INNER JOIN @SelectedStuds AS SS ON SS.EdStudId = ED_STUD_SEMESTER.ED_STUD_ID AND SS.EdStudSemesterId = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
	WHERE (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) 
    order by ED_STUD_SEMESTER.ED_STUD_ID, ED_ACAD_YEAR.YEAR_ORDER asc,ED_CODE_SEMESTER.SEMESTER_ORDER asc;
	
	OPEN Students;
	FETCH NEXT FROM Students INTO @EdStudId, @EdStudSemesterId, @YearOrder, @SemesterOrder, @SEM_EdAcadYearId, @SEM_EdCodeSemesterId;

	WHILE(@@FETCH_STATUS <> -1)
	BEGIN

		if isnull(@currentEdStudId, 0) <> @EdStudId
		begin
			select @ed_Code_Level_Id = 1, @currentEdStudId = @EdStudId;			
		end
		
		select @CountCoursesNotHaveGrade = 0, @CountCoursesReg = 0;
	
        select @CountCoursesNotHaveGrade = isnull(sum(case when ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is null then 1 else 0 end), 0), 
		@CountCoursesReg = COUNT(*)from ED_STUD_COURSE_REG 
		where ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @EdStudSemesterId;
        
        if(@CountCoursesNotHaveGrade <> @CountCoursesReg)
        BEGIN
			-- GPA Flg
			IF @GPA_Flg = 1
			BEGIN

				select @Sem_GPA = 0, @Sem_CH = 0, @Sem_Passed_CH = 0, @Sem_POINT = 0;

				--get semester Sem Passed CH, get semester Sem Passed points
				SELECT  @Sem_Passed_CH = ISNULL(SUM(ED_COURSE.CREDIT_HOURS),0)
				FROM ED_STUD_COURSE_REG 
					 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
					 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
					 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
					 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
				and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
				and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
				AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
				AND ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId

				--get semester Sem CH, get semester Sem points
				SELECT  @Sem_CH =ISNULL(SUM(ED_COURSE.CREDIT_HOURS),0),
				@Sem_POINT = ISNULL(SUM(ED_COURSE.CREDIT_HOURS * ISNULL(ED_STUD_COURSE_REG.COURSE_POINT,0)),0)
				FROM ED_STUD_COURSE_REG 
					 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
					 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
					 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
					 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
				and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
				and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
				AND ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId

				IF(ISNULL(@Sem_CH,0) >0)
					SET @Sem_GPA = isnull(@Sem_POINT,0) / ISNULL(@Sem_CH,0);
				ELSE
					SET @Sem_GPA = 0;
				
			END
			
			-- CGPA Flg
			IF @CGPA_Flg = 1
			BEGIN

				select @Acum_GPA = 0, @Acum_CH = 0,@Acum_Passed_CH = 0,@Acum_Passed_CH_R = 0,
				@Acum_Failed_CH = 0, @Acum_POINT = 0, @Acum_Passed_POINT = 0, @Acum_Passed_POINT_R = 0;

				--get semester Accum Passed CH, get semester Accum Passed points
				SELECT  @Acum_Passed_CH = SUM(ED_COURSE.CREDIT_HOURS),
				@Acum_Passed_POINT = SUM(ED_COURSE.CREDIT_HOURS * ISNULL(ED_STUD_COURSE_REG.COURSE_POINT,0))
				FROM ED_STUD_COURSE_REG 
					 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
					 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
					 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
					 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
				and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
				and (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
				and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
				AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
				and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder));

				--get semester Accum CH for repeated courses, get semester Accum point for repeated courses
				SELECT @Acum_Passed_CH_R = sum(ED_COURSE.CREDIT_HOURS),
				@Acum_Passed_POINT_R = SUM(ED_COURSE.CREDIT_HOURS * ISNULL(ED_STUD_COURSE_REG.COURSE_POINT,0))
				FROM ED_STUD_COURSE_REG 
					 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
					 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
					 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
					 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
				and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
				and ED_STUD_COURSE_REG.REPEAT_FLG = 1
				and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
				AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
				and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
				and 
				(
					(
						@RepCalc = 1 
						and ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID in 
						(
							SELECT MAX(ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID)
							FROM ED_STUD_COURSE_REG 
								 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
								 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
								 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
								 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
							WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
							and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
							and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
							and ED_STUD_COURSE_REG.REPEAT_FLG = 1
							and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
							AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
							and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
							group by ED_COURSE.COURSE_CODE
						)
					)
					or 
					(
						@RepCalc = 2 
						and ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID in 
						(
							SELECT t1.course_reg_id FROM 
							(
								SELECT  * FROM
								(
									Select ED_STUD_SEMESTER.ed_stud_id, ED_STUD_COURSE_REG.ed_course_id,ED_COURSE.COURSE_CODE,
										ED_STUD_COURSE_REG.COURSE_POINT,
										(
											select top 1 c.ed_stud_course_reg_ID 
											from ed_stud_course_reg c 
												 inner join ed_stud_semester d on c.ed_stud_semester_id=d.ed_stud_semester_id
											where c.ed_course_ID=ED_STUD_COURSE_REG.ed_course_id
											and d.ed_stud_id=ED_STUD_SEMESTER.ed_stud_id
											and c.COURSE_POINT= ED_STUD_COURSE_REG.COURSE_POINT
										) course_reg_id
									FROM ED_STUD_COURSE_REG 
										 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
										 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
										 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
										 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
									WHERE 
									ED_STUD_COURSE_REG.COURSE_POINT = 
									(
										select max(a.COURSE_POINT) 
										from ED_STUD_COURSE_REG a 
											 inner join ed_stud_semester b on a.ed_stud_semester_id = b.ed_stud_semester_id and b.ed_stud_id = ED_STUD_SEMESTER.ed_stud_id
											 and a.ed_course_id = ED_STUD_COURSE_REG.ed_course_id
										WHERE b.ed_stud_id = @EdStudId
										and a.ED_CODE_COURSE_STATUS_ID = 1
										and a.ED_CODE_GRADING_ID is not null
										and a.REPEAT_FLG = 1
										and a.ADD_GPA_FLG = 1
										AND a.GS_CODE_PASS_FAIL_ID = 1
									)
									and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
									Group by ED_STUD_SEMESTER.ed_stud_id, ED_STUD_COURSE_REG.ed_course_id,ED_COURSE.COURSE_CODE,ED_STUD_COURSE_REG.COURSE_POINT
								) AS t
							) AS t1	
						)
					)
				);

				--get semester Accum Failed CH
				SELECT  @Acum_Failed_CH = SUM(CREDIT_HOURS) 
				FROM 
				(
					SELECT distinct ED_COURSE.COURSE_CODE, ED_COURSE.CREDIT_HOURS
					FROM ED_STUD_COURSE_REG 
						 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
						 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
						 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
						 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
					WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
					and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
					and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
					and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
					AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 2
					and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
				) AS t;                    

				SET @Acum_CH = ISNULL( @Acum_Passed_CH,0) + ISNULL( @Acum_Passed_CH_R,0) + ISNULL( @Acum_Failed_CH,0);
				SET @Acum_POINT = ISNULL( @Acum_Passed_POINT,0) + ISNULL( @Acum_Passed_POINT_R,0);                                      

				IF(@Acum_CH >0)
					SET @Acum_GPA = isnull(@Acum_POINT,0) / @Acum_CH;
				ELSE
					SET @Acum_GPA = 0;
				
			END
			
			-- Major CGPA Flg
			IF @MajorCGPA_Flg = 1
			BEGIN

				select @Acum_Maj_GPA = 0, @Acum_Maj_CH = 0,@Acum_Passed_Maj_CH = 0,@Acum_Passed_Maj_CH_R = 0,
				@Acum_Failed_Maj_CH = 0, @Acum_Maj_POINT = 0, @Acum_Passed_Maj_POINT = 0, @Acum_Passed_Maj_POINT_R = 0,
				@Sem_Maj_CH = 0, @Sem_Maj_POINT=0, @Sem_Maj_GPA=0;

				--get semester Sem Major CH, get semester Sem Major points
				SELECT  @Sem_Maj_CH = ISNULL(SUM(ED_COURSE.CREDIT_HOURS),0),
				@Sem_Maj_POINT = ISNULL(SUM(ED_COURSE.CREDIT_HOURS * ISNULL(ED_STUD_COURSE_REG.COURSE_POINT,0)),0)
				FROM ED_STUD_COURSE_REG 
					 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
					 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
					 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
					 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
				and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
				and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
				AND ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId
				AND exists (SELECT 1
				FROM  ENT_COURSE_PKG_DTL INNER JOIN
							  ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
							  ED_STUD_STATE ON ENT_COURSE_PKG_HDR.ED_ACAD_YEAR_ID = ED_STUD_STATE.ED_ACAD_YEAR_ID AND 
							  ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
							  ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
				 WHERE (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5) AND 
					   (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND 
					   (ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1) AND      
					   (ENT_COURSE_PKG_DTL.ADD_MJRGPA_FLG = 1)  --Get only courses included in student major package and addedd to majorGPA
					AND	(ENT_COURSE_PKG_DTL.ADD_GPA_FLG = 1)  AND
					   (ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID)) 

				IF(ISNULL(@Sem_Maj_CH,0) >0)
					SET @Sem_Maj_GPA = isnull(@Sem_Maj_POINT,0) / ISNULL(@Sem_Maj_CH,0);
				ELSE
					SET @Sem_Maj_GPA = 0;

				--get semester Accum Passed Major CH, get semester Accum Passed Major points
				SELECT  @Acum_Passed_Maj_CH = SUM(ED_COURSE.CREDIT_HOURS),
				@Acum_Passed_Maj_POINT = SUM(ED_COURSE.CREDIT_HOURS * ISNULL(ED_STUD_COURSE_REG.COURSE_POINT,0))
				FROM ED_STUD_COURSE_REG 
					 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
					 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
					 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
					 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
				and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
				and (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
				and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
				AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
				and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
				AND exists (SELECT 1
				FROM  ENT_COURSE_PKG_DTL INNER JOIN
							  ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
							  ED_STUD_STATE ON ENT_COURSE_PKG_HDR.ED_ACAD_YEAR_ID = ED_STUD_STATE.ED_ACAD_YEAR_ID AND 
							  ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
							  ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
				 WHERE (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5) AND 
					   (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND 
					   (ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1) AND      
					   (ENT_COURSE_PKG_DTL.ADD_MJRGPA_FLG = 1)  --Get only courses included in student major package and addedd to majorGPA
					AND	(ENT_COURSE_PKG_DTL.ADD_GPA_FLG = 1)  AND
					   (ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID)) 
				 
				--get semester Accum Major CH for repeated courses, get semester Accum Major point for repeated courses
				SELECT @Acum_Passed_Maj_CH_R = sum(ED_COURSE.CREDIT_HOURS),
				@Acum_Passed_Maj_POINT_R = SUM(ED_COURSE.CREDIT_HOURS * ISNULL(ED_STUD_COURSE_REG.COURSE_POINT,0))
				FROM ED_STUD_COURSE_REG 
					 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
					 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
					 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
					 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
				and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
				and ED_STUD_COURSE_REG.REPEAT_FLG = 1
				and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
				AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
				and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
				AND exists (SELECT 1
				FROM  ENT_COURSE_PKG_DTL INNER JOIN
							  ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
							  ED_STUD_STATE ON ENT_COURSE_PKG_HDR.ED_ACAD_YEAR_ID = ED_STUD_STATE.ED_ACAD_YEAR_ID AND 
							  ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
							  ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
				 WHERE (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5) AND 
					   (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND 
					   (ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1) AND      
					   (ENT_COURSE_PKG_DTL.ADD_MJRGPA_FLG = 1)  --Get only courses included in student major package and addedd to majorGPA
					AND	(ENT_COURSE_PKG_DTL.ADD_GPA_FLG = 1)  AND
					   (ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID)) 
				and 
				(
					(
						@RepCalc = 1 
						and ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID in 
						(
							SELECT MAX(ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID)
							FROM ED_STUD_COURSE_REG 
								 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
								 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
								 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
								 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
							WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
							and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
							and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
							and ED_STUD_COURSE_REG.REPEAT_FLG = 1
							and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
							AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
							and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
							AND exists (SELECT 1
							FROM  ENT_COURSE_PKG_DTL INNER JOIN
										  ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
										  ED_STUD_STATE ON ENT_COURSE_PKG_HDR.ED_ACAD_YEAR_ID = ED_STUD_STATE.ED_ACAD_YEAR_ID AND 
										  ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
										  ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
							 WHERE (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5) AND 
								   (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND 
								   (ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1) AND      
								   (ENT_COURSE_PKG_DTL.ADD_MJRGPA_FLG = 1)  --Get only courses included in student major package and addedd to majorGPA
								AND	(ENT_COURSE_PKG_DTL.ADD_GPA_FLG = 1)  AND
								   (ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID)) 
							group by ED_COURSE.COURSE_CODE
						)
					)
					or 
					(
						@RepCalc = 2 
						and ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID in 
						(
							SELECT t1.course_reg_id FROM 
							(
								SELECT  * FROM
								(
									Select ED_STUD_SEMESTER.ed_stud_id, ED_STUD_COURSE_REG.ed_course_id,ED_COURSE.COURSE_CODE,
										ED_STUD_COURSE_REG.COURSE_POINT,
										(
											select top 1 c.ed_stud_course_reg_ID 
											from ed_stud_course_reg c 
												 inner join ed_stud_semester d on c.ed_stud_semester_id=d.ed_stud_semester_id
											where c.ed_course_ID=ED_STUD_COURSE_REG.ed_course_id
											and d.ed_stud_id=ED_STUD_SEMESTER.ed_stud_id
											and c.COURSE_POINT= ED_STUD_COURSE_REG.COURSE_POINT
										) course_reg_id
									FROM ED_STUD_COURSE_REG 
										 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
										 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
										 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
										 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
									WHERE 
									ED_STUD_COURSE_REG.COURSE_POINT = 
									(
										select max(a.COURSE_POINT) 
										from ED_STUD_COURSE_REG a 
											 inner join ed_stud_semester b on a.ed_stud_semester_id = b.ed_stud_semester_id and b.ed_stud_id = ED_STUD_SEMESTER.ed_stud_id
											 and a.ed_course_id = ED_STUD_COURSE_REG.ed_course_id
										WHERE b.ed_stud_id = @EdStudId
										and a.ED_CODE_COURSE_STATUS_ID = 1
										and a.ED_CODE_GRADING_ID is not null
										and a.REPEAT_FLG = 1
										and a.ADD_GPA_FLG = 1
										AND a.GS_CODE_PASS_FAIL_ID = 1
									)
									and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
									AND exists (SELECT 1
									FROM  ENT_COURSE_PKG_DTL INNER JOIN
												  ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
												  ED_STUD_STATE ON ENT_COURSE_PKG_HDR.ED_ACAD_YEAR_ID = ED_STUD_STATE.ED_ACAD_YEAR_ID AND 
												  ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
												  ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
									 WHERE (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5) AND 
										   (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND 
										   (ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1) AND      
										   (ENT_COURSE_PKG_DTL.ADD_MJRGPA_FLG = 1)  --Get only courses included in student major package and addedd to majorGPA
										AND	(ENT_COURSE_PKG_DTL.ADD_GPA_FLG = 1)  AND
										   (ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID)) 
									Group by ED_STUD_SEMESTER.ed_stud_id, ED_STUD_COURSE_REG.ed_course_id,ED_COURSE.COURSE_CODE,ED_STUD_COURSE_REG.COURSE_POINT
								) AS t
							) AS t1	
						)
					)
				);

				--get semester Accum Failed Major CH
				SELECT  @Acum_Failed_Maj_CH = SUM(CREDIT_HOURS) 
				FROM 
				(
					SELECT distinct ED_COURSE.COURSE_CODE, ED_COURSE.CREDIT_HOURS
					FROM ED_STUD_COURSE_REG 
						 INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
						 INNER JOIN ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
						 INNER JOIN ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID 
						 INNER JOIN ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
					WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
					and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
					and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is not null
					and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
					AND ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 2
					and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
					AND exists (SELECT 1
					FROM  ENT_COURSE_PKG_DTL INNER JOIN
								  ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
								  ED_STUD_STATE ON ENT_COURSE_PKG_HDR.ED_ACAD_YEAR_ID = ED_STUD_STATE.ED_ACAD_YEAR_ID AND 
								  ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
								  ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
					 WHERE (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5) AND 
						   (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND 
						   (ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1) AND      
						   (ENT_COURSE_PKG_DTL.ADD_MJRGPA_FLG = 1)  --Get only courses included in student major package and addedd to majorGPA
						AND	(ENT_COURSE_PKG_DTL.ADD_GPA_FLG = 1)  AND
						   (ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID)) 
				) AS t;                    

				SET @Acum_Maj_CH = ISNULL( @Acum_Passed_Maj_CH,0) + ISNULL( @Acum_Passed_Maj_CH_R,0) + ISNULL( @Acum_Failed_Maj_CH,0);
				SET @Acum_Maj_POINT = ISNULL( @Acum_Passed_Maj_POINT,0) + ISNULL( @Acum_Passed_Maj_POINT_R,0);                                      

				IF(@Acum_Maj_CH >0)
					SET @Acum_Maj_GPA = isnull(@Acum_Maj_POINT,0) / @Acum_Maj_CH;
				ELSE
					SET @Acum_Maj_GPA = 0;
				
			END
        end

		--print 'Stud_ID = ' + convert(nvarchar,@EdStudId);
		--print 'Semester_ID = ' + convert(nvarchar,@EdStudSemesterId);
		--print 'ed_Code_Level_Id = ' + CONVERT(NVARCHAR,@ed_Code_Level_Id);
		--print '-- Sem';
		--print 'Sem_CH = ' + convert(nvarchar,@Sem_CH);
		--print 'Sem_Passed_CH = ' + convert(nvarchar,@Sem_Passed_CH);
		--print 'Sem_POINT = ' + convert(nvarchar,@Sem_POINT);
		--print 'Sem_GPA = ' + convert(nvarchar,@Sem_GPA);
		--print '-- Accum';
		--print 'ACCUM_CH = ' + convert(nvarchar,@Acum_CH);
		--print 'ACCUM_PASSED_CH = '+convert(nvarchar,(ISNULL( @Acum_Passed_CH,0) + ISNULL( @Acum_Passed_CH_R,0)));
		--print 'Acum_POINT = ' + convert(nvarchar,@Acum_POINT);
		--print 'Acum_GPA = ' + convert(nvarchar,@Acum_GPA); 
		--print '-- Major';
		--print 'Sem_Maj_CH = ' + convert(nvarchar,@Sem_Maj_CH);  
		--print 'Sem_Maj_POINT = ' + convert(nvarchar,@Sem_Maj_POINT);  
		--print 'Sem_Maj_GPA = ' + convert(nvarchar,@Sem_Maj_GPA);  
		--print 'Acum_Maj_GPA = ' + convert(nvarchar,@Acum_Maj_GPA);
		--print '-------------------------------------';
                               
        update ED_STUD_SEMESTER 
        set	Sem_GPA = @Sem_GPA ,
            Sem_POINT = @Sem_POINT,
            Sem_CH = @Sem_Passed_CH,
			ACCUM_GPA = @Acum_GPA ,
            ACCUM_POINT = @Acum_POINT,
            ACCUM_CH = ISNULL(@Acum_Passed_CH,0) + ISNULL(@Acum_Passed_CH_R,0),
            MAJOR_GPA = @Sem_Maj_GPA,
            MAJOR_CGPA = @Acum_Maj_GPA,
            ED_CODE_LEVEL_ID = @ed_Code_Level_Id,
            IS_CLOSED = @Close_Flg
        where ED_STUD_SEMESTER_ID = @EdStudSemesterId;
        
        SELECT @ed_Code_Level_Id = t.ED_CODE_LEVEL_ID FROM dbo.GetStudLevel(@EdStudId,@SEM_EdAcadYearId,@SEM_EdCodeSemesterId ,0) AS t;
                    
		FETCH NEXT FROM Students INTO @EdStudId, @EdStudSemesterId, @YearOrder, @SemesterOrder, @SEM_EdAcadYearId, @SEM_EdCodeSemesterId;
	end
	
	CLOSE Students;
	DEALLOCATE Students;
    
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStudsForCalculateCGPA">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@DeptEntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@MajorEntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
DECLARE @nodePath NVARCHAR(100);
IF(@DeptEntMainId IS NOT NULL AND @DeptEntMainId <> 0)
BEGIN
	SELECT @nodePath=node_path FROM dbo.ENTITY_MAIN WHERE ENT_MAIN_ID = @DeptEntMainId	
END

SELECT  DISTINCT  ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID,ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD_FACULTY.STUD_FACULTY_CODE,ED_STUD.FULL_NAME_AR,ED_STUD.FULL_NAME_EN,
		dbo.FN_GetStudStatesByType(dbo.ED_STUD_SEMESTER.ED_STUD_ID,dbo.ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,dbo.ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,dbo.ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,5,1) AS MAJOR_DESCR_AR,
		dbo.FN_GetStudStatesByType(dbo.ED_STUD_SEMESTER.ED_STUD_ID,dbo.ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,dbo.ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,dbo.ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,5,1) AS MAJOR_DESCR_EN,
		ED_STUD_SEMESTER.SEM_CH,ED_STUD_SEMESTER.ACCUM_CH,ED_STUD_SEMESTER.SEM_GPA,ED_STUD_SEMESTER.ACCUM_GPA,ED_STUD_SEMESTER.MAJOR_GPA,ED_STUD_SEMESTER.MAJOR_CGPA,
		ED_STUD_SEMESTER.IS_CLOSED,
		(SELECT TOP 1 SEQ_NO FROM (
		SELECT     ED_STUD_ACAD_WARN.SEQ_NO, ROW_NUMBER()OVER (ORDER BY dbo.ED_ACAD_YEAR.YEAR_ORDER , dbo.ED_CODE_SEMESTER.SEMESTER_ORDER) AS SN
		FROM         ED_STUD_ACAD_WARN INNER JOIN
							  ED_CODE_SEMESTER ON ED_STUD_ACAD_WARN.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
							  ED_ACAD_YEAR ON ED_STUD_ACAD_WARN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
		WHERE     (ED_STUD_ACAD_WARN.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID) AND (ED_STUD_ACAD_WARN.CNCL_FLG = 0)
		) AS t
    ORDER BY t.SN DESC) AS ACAD_WARN_SEQ_NO
FROM      ED_STUD_SEMESTER INNER JOIN
          ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
          ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND (ED_STUD_FACULTY.IS_ACTIVE = 1) INNER JOIN
          dbo.AS_CODE_DEGREE ON dbo.ED_STUD_FACULTY.AS_CODE_DEGREE_ID = dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_ID
WHERE dbo.ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
AND dbo.ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
AND dbo.ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
AND (@EdCodeEnrollTypeId=0 or dbo.ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = @EdCodeEnrollTypeId)
AND (@AsCodeDegreeClassId=0 or dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)
AND (@nodePath IS NULL OR EXISTS(SELECT 1 FROM dbo.ED_STUD_STATE INNER JOIN dbo.ENTITY_MAIN ON dbo.ED_STUD_STATE.ENT_MAIN_ID = dbo.ENTITY_MAIN.ENT_MAIN_ID WHERE dbo.ED_STUD_STATE.ED_STUD_SEMESTER_ID = dbo.ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND dbo.ENTITY_MAIN.NODE_PATH LIKE @nodePath+'%'))
AND (@MajorEntMainId = 0 OR EXISTS(SELECT 1 FROM dbo.ED_STUD_STATE WHERE dbo.ED_STUD_STATE.ED_STUD_SEMESTER_ID = dbo.ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND dbo.ED_STUD_STATE.ENT_MAIN_ID = @MajorEntMainId))

			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="InsertBlockStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_STUD_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, 
                      ED_STUD.FULL_NAME_AR AS StudFullNameAr, 
                      ED_STUD.FULL_NAME_EN AS StudFullNameEn, 
                      ED_STUD.ED_STUD_ID AS EdStudId, 
                      ED_STUD_FACULTY.CGPA,
                      ED_STUD_FACULTY.ACCUM_CREDIT,ED_STUD_SEMESTER.FREEZE_FLG,SE_BLOCK_TRANS.SE_BLOCK_TRANS_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID inner join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID left outer join  AS_CODE_DEGREE on ED_STUD_FACULTY.AS_CODE_DEGREE_ID=AS_CODE_DEGREE.AS_CODE_DEGREE_ID left outer join AS_CODE_DEGREE_CLASS on
                      AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID =AS_CODE_DEGREE_CLASS.AS_CODE_DEGREE_CLASS_ID left outer join SE_BLOCK_TRANS on SE_BLOCK_TRANS.ED_STUD_ID=ED_STUD.ED_STUD_ID
WHERE    (@AsFacultyInfoId=0 OR @AsFacultyInfoId is null or ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId) AND  

(@EdCodeSemesterId=0 OR ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
(@EdAcadYearId=0 OR ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = 1) AND 
(ED_STUD_FACULTY.IS_ACTIVE = 1) AND(@EntMainId=0 OR ED_STUD_STATE.ENT_MAIN_ID=@EntMainId) OR (@StudCode = '0' OR @StudCode is null OR ED_STUD_FACULTY.STUD_FACULTY_CODE=@StudCode) AND (@AsCodeDegreeClassId=0 OR AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID=@AsCodeDegreeClassId) AND (@FlagFreez=0 OR ED_STUD_SEMESTER.FREEZE_FLG=@FlagFreez) and SE_BLOCK_TRANS.SE_CDE_BLOCK_TYPE_ID=1

order by StudFullNameAr,StudFullNameEn
        
				SELECT @@ROWCOUNT
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetBlockCourseSection">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@DeptEntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@MajorEntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
DECLARE @nodePath NVARCHAR(100);
IF(@DeptEntMainId IS NOT NULL AND @DeptEntMainId <> 0)
BEGIN
	SELECT @nodePath=node_path FROM dbo.ENTITY_MAIN WHERE ENT_MAIN_ID = @DeptEntMainId	
END

SELECT  DISTINCT  ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID,ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD_FACULTY.STUD_FACULTY_CODE,ED_STUD.FULL_NAME_AR,ED_STUD.FULL_NAME_EN,
		dbo.FN_GetStudStatesByType(dbo.ED_STUD_SEMESTER.ED_STUD_ID,dbo.ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,dbo.ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,dbo.ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,5,1) AS MAJOR_DESCR_AR,
		dbo.FN_GetStudStatesByType(dbo.ED_STUD_SEMESTER.ED_STUD_ID,dbo.ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,dbo.ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,dbo.ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,5,1) AS MAJOR_DESCR_EN,
		ED_STUD_SEMESTER.SEM_CH,ED_STUD_SEMESTER.ACCUM_CH,ED_STUD_SEMESTER.SEM_GPA,ED_STUD_SEMESTER.ACCUM_GPA,ED_STUD_SEMESTER.MAJOR_GPA,ED_STUD_SEMESTER.MAJOR_CGPA,
		ED_STUD_SEMESTER.IS_CLOSED,
		(SELECT TOP 1 SEQ_NO FROM (
		SELECT     ED_STUD_ACAD_WARN.SEQ_NO, ROW_NUMBER()OVER (ORDER BY dbo.ED_ACAD_YEAR.YEAR_ORDER , dbo.ED_CODE_SEMESTER.SEMESTER_ORDER) AS SN
		FROM         ED_STUD_ACAD_WARN INNER JOIN
							  ED_CODE_SEMESTER ON ED_STUD_ACAD_WARN.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
							  ED_ACAD_YEAR ON ED_STUD_ACAD_WARN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
		WHERE     (ED_STUD_ACAD_WARN.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID) AND (ED_STUD_ACAD_WARN.CNCL_FLG = 0)
		) AS t
    ORDER BY t.SN DESC) AS ACAD_WARN_SEQ_NO
FROM      ED_STUD_SEMESTER INNER JOIN
          ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
          ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND (ED_STUD_FACULTY.IS_ACTIVE = 1) INNER JOIN
          dbo.AS_CODE_DEGREE ON dbo.ED_STUD_FACULTY.AS_CODE_DEGREE_ID = dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_ID
WHERE dbo.ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
AND dbo.ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
AND dbo.ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
AND (@EdCodeEnrollTypeId=0 or dbo.ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = @EdCodeEnrollTypeId)
AND (@AsCodeDegreeClassId=0 or dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)
AND (@nodePath IS NULL OR EXISTS(SELECT 1 FROM dbo.ED_STUD_STATE INNER JOIN dbo.ENTITY_MAIN ON dbo.ED_STUD_STATE.ENT_MAIN_ID = dbo.ENTITY_MAIN.ENT_MAIN_ID WHERE dbo.ED_STUD_STATE.ED_STUD_SEMESTER_ID = dbo.ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND dbo.ENTITY_MAIN.NODE_PATH LIKE @nodePath+'%'))
AND (@MajorEntMainId = 0 OR EXISTS(SELECT 1 FROM dbo.ED_STUD_STATE WHERE dbo.ED_STUD_STATE.ED_STUD_SEMESTER_ID = dbo.ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND dbo.ED_STUD_STATE.ENT_MAIN_ID = @MajorEntMainId))

			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="deleteBlockStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_STUD_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, 
                      ED_STUD.FULL_NAME_AR AS StudFullNameAr, 
                      ED_STUD.FULL_NAME_EN AS StudFullNameEn, 
                      ED_STUD.ED_STUD_ID AS EdStudId, 
                      ED_STUD_FACULTY.CGPA,
                      ED_STUD_FACULTY.ACCUM_CREDIT,ED_STUD_SEMESTER.FREEZE_FLG,SE_BLOCK_TRANS.SE_BLOCK_TRANS_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID inner join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID left outer join  AS_CODE_DEGREE on ED_STUD_FACULTY.AS_CODE_DEGREE_ID=AS_CODE_DEGREE.AS_CODE_DEGREE_ID left outer join AS_CODE_DEGREE_CLASS on
                      AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID =AS_CODE_DEGREE_CLASS.AS_CODE_DEGREE_CLASS_ID left outer join SE_BLOCK_TRANS on SE_BLOCK_TRANS.ED_STUD_ID=ED_STUD.ED_STUD_ID
WHERE    (@AsFacultyInfoId=0 OR @AsFacultyInfoId is null or ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId) AND  

(@EdCodeSemesterId=0 OR ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
(@EdAcadYearId=0 OR ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = 1) AND 
(ED_STUD_FACULTY.IS_ACTIVE = 1) AND(@EntMainId=0 OR ED_STUD_STATE.ENT_MAIN_ID=@EntMainId) OR (@StudCode = '0' OR @StudCode is null OR ED_STUD_FACULTY.STUD_FACULTY_CODE=@StudCode) AND (@AsCodeDegreeClassId=0 OR AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID=@AsCodeDegreeClassId) AND (@FlagFreez=0 OR ED_STUD_SEMESTER.FREEZE_FLG=@FlagFreez) and SE_BLOCK_TRANS.SE_CDE_BLOCK_TYPE_ID=1

order by StudFullNameAr,StudFullNameEn
        
				SELECT @@ROWCOUNT
			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetBlockStudents">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_STUD_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, 
                      ED_STUD.FULL_NAME_AR AS StudFullNameAr, 
                      ED_STUD.FULL_NAME_EN AS StudFullNameEn, 
                      ED_STUD.ED_STUD_ID AS EdStudId, 
                      ED_STUD_FACULTY.CGPA,
                      ED_STUD_FACULTY.ACCUM_CREDIT,ED_STUD_SEMESTER.FREEZE_FLG,SE_BLOCK_TRANS.SE_BLOCK_TRANS_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID inner join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID left outer join  AS_CODE_DEGREE on ED_STUD_FACULTY.AS_CODE_DEGREE_ID=AS_CODE_DEGREE.AS_CODE_DEGREE_ID left outer join AS_CODE_DEGREE_CLASS on
                      AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID =AS_CODE_DEGREE_CLASS.AS_CODE_DEGREE_CLASS_ID left outer join SE_BLOCK_TRANS on SE_BLOCK_TRANS.ED_STUD_ID=ED_STUD.ED_STUD_ID
WHERE    (@AsFacultyInfoId=0 OR @AsFacultyInfoId is null or ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId) AND  

(@EdCodeSemesterId=0 OR ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
(@EdAcadYearId=0 OR ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = 1) AND 
(ED_STUD_FACULTY.IS_ACTIVE = 1) AND(@EntMainId=0 OR ED_STUD_STATE.ENT_MAIN_ID=@EntMainId) OR (@StudCode = '0' OR @StudCode is null OR ED_STUD_FACULTY.STUD_FACULTY_CODE=@StudCode) AND (@AsCodeDegreeClassId=0 OR AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID=@AsCodeDegreeClassId) AND (@FlagFreez=0 OR ED_STUD_SEMESTER.FREEZE_FLG=@FlagFreez) and SE_BLOCK_TRANS.SE_CDE_BLOCK_TYPE_ID=1

order by StudFullNameAr,StudFullNameEn
        
				SELECT @@ROWCOUNT
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStudentRegisterdCoursesAndSections">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_STUD_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			  SELECT ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID, 
		        ED_COURSE.CREDIT_HOURS, ED_STUD_COURSE_REG.REPEAT_NO, ED_STUD_COURSE_REG.PAY_FLG,                 
		        ED_STUD_COURSE_REG.PAY_AMOUNT, SC_SCHEDULE_DTL.NOTES,
		        ED_STUD_GROUP.WAIT_NO, ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID, 
		        ED_CODE_COURSE_STATUS.SYMBOL, SC_SCHEDULE_DTL.GROUP_ORDER
	      FROM ED_STUD_COURSE_REG 
		      INNER JOIN ED_STUD_GROUP ON ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID = ED_STUD_GROUP.ED_STUD_COURSE_REG_ID 
		      INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID 
		      INNER JOIN SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID 
		      INNER JOIN ED_CODE_COURSE_STATUS ON ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = ED_CODE_COURSE_STATUS.ED_CODE_COURSE_STATUS_ID
	      WHERE (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @ED_STUD_SEMESTER_ID)
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStudentsOnAcadPlan">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadPlanId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
DECLARE @PlanEntMainId NUMERIC,@PlanEdAcadYearId NUMERIC;
SELECT @PlanEntMainId=ENT_MAIN_ID,@PlanEdAcadYearId=ED_ACAD_YEAR_ID FROM ED_ACAD_PLAN WHERE ED_ACAD_PLAN_ID = @EdAcadPlanId

SELECT    ED_STUD_SEMESTER.ED_STUD_ID,ED_STUD_FACULTY.stud_faculty_code,ED_STUD.FULL_NAME_AR,ED_STUD.FULL_NAME_EN,ED_STUD_SEMESTER.ACCUM_CH
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN dbo.ED_STUD_FACULTY
                      ON dbo.ED_STUD.ED_STUD_ID = dbo.ED_STUD_FACULTY.ed_stud_id AND dbo.ED_STUD_FACULTY.is_active = 1
WHERE     (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
AND ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = 1
AND (@GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID = @GsCodeGenderId) 
AND (@EdCodeLevelId =0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @EdCodeLevelId) 
AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
AND (@PlanEntMainId IS NOT NULL AND @PlanEdAcadYearId IS NOT NULL AND exists (select 1 from ED_STUD_STATE where ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
AND ED_STUD_STATE.ENT_MAIN_ID=@PlanEntMainId
AND ED_STUD_STATE.ED_ACAD_YEAR_ID=@PlanEdAcadYearId))
AND NOT EXISTS (SELECT 1 FROM ED_STUD_COURSE_REG WHERE ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID =ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID)


			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetAcadPlanMajors">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@currentFlg" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
DECLARE @NodePath NVARCHAR(50);
SELECT @NodePath=node_path FROM entity_main WHERE ent_main_id = @EntMainId

SELECT  distinct  ENTITY_MAIN.ent_main_id,ED_ACAD_PLAN.ED_ACAD_PLAN_ID, ENTITY_MAIN.ENT_DESCR_EN, ENTITY_MAIN.ENT_DESCR_AR, ED_ACAD_YEAR.DESCR_AR, ED_ACAD_YEAR.DESCR_EN,ED_ACAD_YEAR.YEAR_ORDER
FROM         ENTITY_MAIN INNER JOIN
                      ED_ACAD_PLAN ON ENTITY_MAIN.ENT_MAIN_ID = ED_ACAD_PLAN.ENT_MAIN_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_ACAD_PLAN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN dbo.AS_CODE_DEGREE
                      ON dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_ID = dbo.ENTITY_MAIN.AS_CODE_DEGREE_ID
WHERE     (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @EntCodeEntityTypeId) 
AND (@currentFlg=0 or ED_ACAD_PLAN.CURRENT_FLG = 1)  -- مؤشر خطة حالية
AND ((@AsFacultyInfoId = 0 AND ENTITY_MAIN.AS_FACULTY_INFO_ID IS NULL) or ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId) 
AND (@EntMainId = 0 or ENTITY_MAIN.Node_path like @NodePath+'%')
AND (@AsCodeDegreeClassId=0 OR dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId) 
ORDER BY ED_ACAD_YEAR.YEAR_ORDER DESC

			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="LoadOrientaionCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScSectionGroupHdrId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@StudSemesters" type="nvarchar" direction="Input" size="5" precision="3" scale="0" param="(10000)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
BEGIN TRANSACTION T1
BEGIN TRY

DECLARE @tblStud TABLE
(ED_STUD_SEMESTER_ID NUMERIC,
AS_Faculty_Info_ID NUMERIC)

IF(@StudSemesters='')
BEGIN
	INSERT INTO @tblStud
	SELECT ED_STUD_SEMESTER_ID,AS_FACULTY_INFO_ID FROM dbo.ED_STUD_SEMESTER 
	WHERE ED_ACAD_YEAR_ID = @EdAcadYearId
	AND (@EdCodeSemesterId=0 or ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
	AND ORIENT_FLG = 1
	AND ED_STUD_SEMESTER.IS_LAST = 1
	AND ED_STUD_SEMESTER.IS_CLOSED = 0
END
ELSE
BEGIN
	INSERT INTO @tblStud
	SELECT ED_STUD_SEMESTER_ID,AS_FACULTY_INFO_ID FROM dbo.ED_STUD_SEMESTER 
	WHERE Ed_stud_semester_id IN ( SELECT CONVERT(NUMERIC(9,0),item) FROM dbo.Split(@StudSemesters) )
END
 
DECLARE @EdStudSemesterId NUMERIC,@AsFacultyInfoId NUMERIC;
DECLARE Curr_OrientStudSem CURSOR for
SELECT ED_STUD_SEMESTER_ID,AS_Faculty_Info_ID FROM @tblStud
OPEN Curr_OrientStudSem
FETCH NEXT FROM Curr_OrientStudSem INTO @EdStudSemesterId,@AsFacultyInfoId
WHILE @@FETCH_STATUS = 0
BEGIN
	-- Insert into EdStudCourseReg
	DECLARE @maxEdStudCourseRegId NUMERIC;
	SELECT @maxEdStudCourseRegId = ISNULL(MAX(ED_STUD_COURSE_REG_ID),0) + 1  from dbo.ED_STUD_COURSE_REG

	INSERT INTO dbo.ED_STUD_COURSE_REG (
		ED_STUD_COURSE_REG_ID,
		ED_COURSE_ID,
		AUDIT_FLG,
		REPEAT_FLG,
		IS_LAST,
		AS_FACULTY_INFO_ID,
		ED_CODE_COURSE_STATUS_ID,
		ENT_POLICY_GRADING_HDR_ID,
		ED_STUD_SEMESTER_ID,
		ADD_GPA_FLG,
		ENT_POLICY_ASSESS_HDR_ID,
		INCOMP_FLG,
		HIDE_FLG		
	)
	SELECT @maxEdStudCourseRegId + (ROW_NUMBER()OVER (ORDER BY dbo.SC_SECTION_GROUP_DTL.ED_COURSE_ID))
	,SC_SECTION_GROUP_DTL.ED_COURSE_ID,0,0,1,@AsFacultyInfoId,1,
	dbo.FN_GetCourseGradingHdrId(@EdStudSemesterId,SC_SECTION_GROUP_DTL.ED_COURSE_ID),
	@EdStudSemesterId,1,
	dbo.FN_GetCourseAssessHdrId(@EdStudSemesterId,SC_SECTION_GROUP_DTL.ED_COURSE_ID),
	0,0
	FROM dbo.SC_SECTION_GROUP_DTL WHERE dbo.SC_SECTION_GROUP_DTL.SC_SECTION_GROUP_HDR_ID = @ScSectionGroupHdrId
	AND dbo.SC_SECTION_GROUP_DTL.ED_COURSE_ID NOT IN (
	SELECT ED_COURSE_ID FROM dbo.ED_STUD_COURSE_REG WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId
	)
	
	-- Insert into EdStudGroup
	DECLARE @maxEdStudGroupId NUMERIC;
	SELECT @maxEdStudGroupId = ISNULL(MAX(ED_STUD_GROUP_ID),0) + 1  from dbo.ED_STUD_GROUP

	INSERT INTO dbo.ED_STUD_GROUP (
		ED_STUD_GROUP_ID,
		SC_SCHEDULE_DTL_ID,
		AS_FACULTY_INFO_ID,
		ED_STUD_SEMESTER_ID,
		ED_STUD_COURSE_REG_ID
	) 
	SELECT @maxEdStudGroupId + (ROW_NUMBER()OVER (ORDER BY dbo.ED_STUD_COURSE_REG.ED_COURSE_ID)),
	SC_SECTION_GROUP_DTL.SC_SCHEDULE_DTL_ID,@AsFacultyInfoId,@EdStudSemesterId, ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
	FROM dbo.ED_STUD_COURSE_REG INNER JOIN dbo.SC_SECTION_GROUP_DTL 
	ON SC_SECTION_GROUP_DTL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID
	AND dbo.SC_SECTION_GROUP_DTL.SC_SECTION_GROUP_HDR_ID = @ScSectionGroupHdrId
	WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId
	AND dbo.ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID NOT IN (
	SELECT     ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
	FROM       ED_STUD_GROUP INNER JOIN
               ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID INNER JOIN
               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
    WHERE dbo.ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId)
	
	-- Update EdStudSemester
	UPDATE dbo.ED_STUD_SEMESTER
	SET IS_COURSE_APPROVED = 1
	WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId
	
	FETCH NEXT FROM Curr_OrientStudSem INTO @EdStudSemesterId,@AsFacultyInfoId	
END
CLOSE Curr_OrientStudSem
DEALLOCATE Curr_OrientStudSem

COMMIT TRANSACTION T1
END TRY
BEGIN CATCH

ROLLBACK TRANSACTION T1
DECLARE @error NVARCHAR(max);
SELECT @error = ERROR_MESSAGE()
RAISERROR(@error,16,-1);

END CATCH
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_SECTION_GROUP_DTL_GetOrientStudCount">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
SELECT COUNT(*) AS OrientStudCount FROM dbo.ED_STUD_SEMESTER WHERE ORIENT_FLG = 1
and (@EdAcadYearId IS NULL OR @EdAcadYearId = 0 OR ED_ACAD_YEAR_ID = @EdAcadYearId)
and (@EdCodeSemesterId IS NULL OR @EdCodeSemesterId = 0 OR ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and (@AsFacultyInfoId IS NULL OR @AsFacultyInfoId = 0 OR AS_FACULTY_INFO_ID = @AsFacultyInfoId)
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ExecuteStudViol">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudViolId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			  DECLARE @GS_CDE_PENALTY_ID NUMERIC(9, 0),
		      @PENALTY_RELATED_FLG NUMERIC(1, 0), @AppealFlg NUMERIC(1, 0),
		      @EdStudId NUMERIC(9, 0), @ED_CODE_SEMESTER_STOP_FROM_ID NUMERIC(9, 0),
		      @ED_ACAD_YEAR_STOP_FROM_ID NUMERIC(9, 0), @ED_CODE_SEMESTER_STOP_TO_ID NUMERIC(9, 0),
		      @ED_ACAD_YEAR_STOP_TO_ID NUMERIC(9, 0), @EdStudSemesterId NUMERIC(9, 0),
		      @ED_CODE_ENROLL_TYPE_ID NUMERIC(9, 0), @MaxED_STUD_ENROLL_CHANGE_ID NUMERIC(9, 0),
		      @CurrentEdAcadYearId NUMERIC(7, 0), @CurrentEdCodeSemesterId NUMERIC(5, 0),
		      @DROP_PERIOD_MNTH NUMERIC(5, 0);
		
	      SELECT @GS_CDE_PENALTY_ID = ED_STUD_VIOL.GS_CDE_PENALTY_ID,
		      @PENALTY_RELATED_FLG = GS_CDE_PENALTY.PENALTY_RELATED_FLG,
		      @AppealFlg = APPEAL_FLG,
		      @EdStudId = ED_STUD_ID,
		      @ED_CODE_SEMESTER_STOP_FROM_ID = ED_CODE_SEMESTER_STOP_FROM_ID,
		      @ED_ACAD_YEAR_STOP_FROM_ID = ED_ACAD_YEAR_STOP_FROM_ID,
		      @ED_CODE_SEMESTER_STOP_TO_ID = ED_CODE_SEMESTER_STOP_TO_ID,
		      @ED_ACAD_YEAR_STOP_TO_ID = ED_ACAD_YEAR_STOP_TO_ID,
		      @CurrentEdAcadYearId = ED_ACAD_YEAR_ID,
		      @CurrentEdCodeSemesterId = ED_CODE_SEMESTER_ID,
		      @DROP_PERIOD_MNTH = GS_CDE_PENALTY.DROP_PERIOD_MNTH
	      FROM dbo.ED_STUD_VIOL
		      INNER JOIN dbo.GS_CDE_PENALTY ON GS_CDE_PENALTY.GS_CDE_PENALTY_ID = ED_STUD_VIOL.GS_CDE_PENALTY_ID
	      WHERE ED_STUD_VIOL_ID = @EdStudViolId;
	
	      IF @AppealFlg = 1
		      SELECT @GS_CDE_PENALTY_ID = ED_STUD_VIOL_APPEAL.GS_CDE_PENALTY_ID,
			      @PENALTY_RELATED_FLG = GS_CDE_PENALTY.PENALTY_RELATED_FLG,
			      @DROP_PERIOD_MNTH = GS_CDE_PENALTY.DROP_PERIOD_MNTH
		      FROM dbo.ED_STUD_VIOL_APPEAL
			      INNER JOIN dbo.GS_CDE_PENALTY ON GS_CDE_PENALTY.GS_CDE_PENALTY_ID = ED_STUD_VIOL_APPEAL.GS_CDE_PENALTY_ID
		      WHERE ED_STUD_VIOL_ID = @EdStudViolId;
	
	      IF @PENALTY_RELATED_FLG = 1 --فى حالة ارتباط الجزاء بمقررات 
	      BEGIN
	
		      -- عندما يكون الجزاء اعتبار الطالب راسب فى المقرر   
		      -- FAIL_FLG = 1 
              --يتم وضع تقدير 
              -- "F"  
              --لهذا المقرر       
	
		      UPDATE ED_STUD_COURSE_REG 
		      SET GS_CODE_PASS_FAIL_ID = 2 
		      where ED_STUD_COURSE_REG_ID in (
			      select ED_STUD_COURSE_REG_ID from ED_STUD_PNLTY_COURSE 
			      where ED_STUD_PNLTY_COURSE.FAIL_FLAG = 1 
				      and ED_STUD_VIOL_ID = @EdStudViolId
		      )
		
		      --عندما يكون الجزاء الغاء تسجيل المقرر  للطالب
		      --CAN_REG_FLG = 1
		      --يتم وضع تقدير
		      --"CR"
		      --لهذا المقرر  للدلالة على الغاء التسجيل
		
		      UPDATE ED_STUD_COURSE_REG 
		      SET  ED_CODE_COURSE_STATUS_ID = 5 
		      where ED_STUD_COURSE_REG_ID IN (
			      select ED_STUD_COURSE_REG_ID from ED_STUD_PNLTY_COURSE 
			      where ED_STUD_PNLTY_COURSE.CANCEL_REGISTERATION_FLAG = 1  
				      and ED_STUD_VIOL_ID = @EdStudViolId
		      )


	
	      END
	      ELSE
		      IF @PENALTY_RELATED_FLG = 2 --فى حالة ارتباط الجزاء بفصل مؤقت (ايقاف دراسة)
		      BEGIN
			
			      SELECT @EdStudSemesterId = ED_STUD_SEMESTER_ID,
				      @ED_CODE_ENROLL_TYPE_ID = ED_CODE_ENROLL_TYPE_ID
			      FROM dbo.ED_STUD_SEMESTER
			      WHERE IS_LAST = 1 
				      AND ED_STUD_ID = @EdStudId
				      AND ED_ACAD_YEAR_ID = @CurrentEdAcadYearId
				      AND ED_CODE_SEMESTER_ID = @CurrentEdCodeSemesterId;
			
			      SELECT @MaxED_STUD_ENROLL_CHANGE_ID = ISNULL(MAX(ED_STUD_ENROLL_CHANGE_ID), 0)
			      FROM ED_STUD_ENROLL_CHANGE
			
			      INSERT INTO dbo.ED_STUD_ENROLL_CHANGE
			              ( ED_STUD_ENROLL_CHANGE_ID ,
			                ED_STUD_SEMESTER_ID ,
			                CHANGE_DATE ,
			                ED_CODE_ENROLL_TYPE_OLD_ID ,
			                ED_CODE_ENROLL_TYPE_NEW_ID ,
			                LAST_DATE ,
			                ED_ACAD_YEAR_FROM_ID ,
			                ED_CODE_SEMESTER_FROM_ID ,
			                ED_ACAD_YEAR_TO_ID ,
			                ED_CODE_SEMESTER_TO_ID ,
			                IS_LAST
			                --, APPROVE_FLG
			              )
			      VALUES  ( 
						      @MaxED_STUD_ENROLL_CHANGE_ID + 1,
						      @EdStudSemesterId,
						      GETDATE(),
						      @ED_CODE_ENROLL_TYPE_ID,
						      5,
						      GETDATE(),
						      @ED_ACAD_YEAR_STOP_FROM_ID,
						      @ED_CODE_SEMESTER_STOP_FROM_ID,
						      @ED_ACAD_YEAR_STOP_TO_ID,
						      @ED_CODE_SEMESTER_STOP_TO_ID,
						      1
						      --, 1
			              )
			        
			      IF @ED_ACAD_YEAR_STOP_FROM_ID = @CurrentEdAcadYearId AND @ED_CODE_SEMESTER_STOP_FROM_ID = @CurrentEdCodeSemesterId
				      UPDATE ED_STUD_SEMESTER SET ED_CODE_ENROLL_TYPE_ID = 5 WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId;
		
		      END
		      --ELSE
			      --IF @PENALTY_RELATED_FLG = 4 --فى حالة ارتباط الجزاء بالانذارات 
			      --BEGIN
				
				
			
			      --END
			      ELSE
				      IF @PENALTY_RELATED_FLG = 5 --فى حالة ارتباط الجزاء بالفصل النهائى 
				      BEGIN
					
					      SELECT @EdStudSemesterId = ED_STUD_SEMESTER_ID
					      FROM dbo.ED_STUD_SEMESTER
					      WHERE IS_LAST = 1 
						      AND ED_STUD_ID = @EdStudId
						      AND ED_ACAD_YEAR_ID = @CurrentEdAcadYearId
						      AND ED_CODE_SEMESTER_ID = @CurrentEdCodeSemesterId;
						
					      UPDATE ED_STUD_SEMESTER SET ED_CODE_ENROLL_TYPE_ID = 6 WHERE ED_STUD_SEMESTER_ID = @EdStudSemesterId;
				
				      END
				
		
		
	      Update ED_STUD_VIOL set 
		      PNLTY_DATE = GetDate(),
		      DROP_DATE = (CASE WHEN @DROP_PERIOD_MNTH IS NOT NULL THEN DATEADD(MONTH, @DROP_PERIOD_MNTH, GETDATE()) ELSE NULL END) 		
	      WHERE ED_STUD_VIOL_ID = @EdStudViolId
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_SECTION_GROUP_DTL_GetForShow">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScSectionGroupHdrId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
SELECT     SC_SECTION_GROUP_DTL.SC_SECTION_GROUP_DTL_ID, SC_SECTION_GROUP_DTL.SC_SECTION_GROUP_HDR_ID, SC_SECTION_GROUP_DTL.ED_COURSE_ID, 
                      SC_SECTION_GROUP_DTL.SC_SCHEDULE_DTL_ID, SC_SCHEDULE_DTL.GROUP_DESCR_AR, SC_SCHEDULE_DTL.GROUP_DESCR_EN, 
                      ED_CDE_TCHNG_MTHD.DESCR_AR, ED_CDE_TCHNG_MTHD.DESCR_EN
FROM         SC_SECTION_GROUP_DTL INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SECTION_GROUP_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      ED_CDE_TCHNG_MTHD ON ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
WHERE dbo.SC_SECTION_GROUP_DTL.SC_SECTION_GROUP_HDR_ID = @ScSectionGroupHdrId
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_ACAD_PLAN_GetAcadYears">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@asFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@entMainId" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
SELECT     ED_ACAD_YEAR.*
FROM         ED_ACAD_PLAN INNER JOIN
                      ED_ACAD_YEAR ON ED_ACAD_PLAN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ENTITY_MAIN ON ED_ACAD_PLAN.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE (@asFacultyInfoId IS NULL or @asFacultyInfoId = 0 OR dbo.ENTITY_MAIN.AS_FACULTY_INFO_ID = @asFacultyInfoId)
	AND (@entMainId IS NULL OR @entMainId = 0 OR dbo.ED_ACAD_PLAN.ENT_MAIN_ID = @entMainId)
ORDER BY dbo.ED_ACAD_YEAR.YEAR_ORDER desc
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetFullfillValueForEntityMain">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntCodeFullfillId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
SELECT     ENT_FULLFILL_MD_DATA.*
FROM         ENT_FULLFILL_MD_DATA INNER JOIN
                      ENT_FULLFILL_METADATA ON ENT_FULLFILL_MD_DATA.ENT_FULLFILL_MD_ID = ENT_FULLFILL_METADATA.ENT_FULLFILL_MD_ID
WHERE   (ENT_FULLFILL_MD_DATA.ENT_MAIN_ID = @EntMainId) AND 
		(ENT_FULLFILL_MD_DATA.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
        (ENT_FULLFILL_METADATA.ENT_CODE_FULLFILL_MD_ID = @EntCodeFullfillId)
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStudentViolations" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_VIOL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@studCode" type="nvarchar" direction="Input" size="30" precision="1" scale="0" nulldefault=""/>
        <parameter name="@NationalityCPR" type="nvarchar" direction="Input" size="150" precision="1" scale="0" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@FromDate" type="date" direction="Input" size="5" precision="1" scale="0"  nulldefault=""/>
        <parameter name="@ToDate" type="date" direction="Input" size="5" precision="1" scale="0"  nulldefault=""/>
        <parameter name="@GsCdeViolCatId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@GsCdeViolId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@PenaltyRelatedFlg" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCdePenaltyId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@ExecFlg" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault=""/>


      </parameters>
      <body>
        <![CDATA[
				SELECT ED_STUD_VIOL.ED_STUD_VIOL_ID, CONVERT(NVARCHAR(10), ED_STUD_VIOL.VIOL_DATE, 103) VIOL_DATE,
		      ED_STUD_VIOL.GS_CDE_VIOL_ID, ED_STUD_VIOL.GS_CDE_PENALTY_ID, ED_STUD_VIOL_APPEAL.ED_STUD_VIOL_APPEAL_ID,
		      ED_STUD_VIOL.EXEC_FLG,
		      ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD.ED_STUD_ID,
		      GS_CDE_VIOL.DESCR_AR ViolDescAr, GS_CDE_VIOL.DESCR_EN ViolDescrEn,
		      CASE WHEN AppealPenalty.GS_CDE_PENALTY_ID IS NOT NULL THEN AppealPenalty.DESCR_AR
		      ELSE GS_CDE_PENALTY.DESCR_AR END PenaltyDescAr,
		      CASE WHEN AppealPenalty.GS_CDE_PENALTY_ID IS NOT NULL THEN AppealPenalty.DESCR_EN
		      ELSE GS_CDE_PENALTY.DESCR_EN END PenaltyDescEn,
		      CONVERT(NVARCHAR(10), ED_STUD_VIOL.PNLTY_DATE, 103) PNLTY_DATE,
		      ED_STUD_FACULTY.STUD_FACULTY_CODE		
	      FROM dbo.ED_STUD_VIOL
		      INNER JOIN dbo.ED_STUD ON ED_STUD.ED_STUD_ID = ED_STUD_VIOL.ED_STUD_ID
		      INNER JOIN dbo.ED_STUD_SEMESTER ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
			      AND ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_STUD_VIOL.ED_ACAD_YEAR_ID
			      AND ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_VIOL.ED_CODE_SEMESTER_ID
		      INNER JOIN dbo.ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID
			      AND ISNULL(ED_STUD_FACULTY.AS_FACULTY_INFO_ID, 0) = ISNULL(ED_STUD_SEMESTER.AS_FACULTY_INFO_ID, 0)
		      INNER JOIN dbo.GS_CDE_VIOL ON GS_CDE_VIOL.GS_CDE_VIOL_ID = ED_STUD_VIOL.GS_CDE_VIOL_ID
		      LEFT OUTER JOIN GS_CDE_PENALTY ON GS_CDE_PENALTY.GS_CDE_PENALTY_ID = ED_STUD_VIOL.GS_CDE_PENALTY_ID
		      LEFT OUTER JOIN dbo.ED_STUD_VIOL_APPEAL ON ED_STUD_VIOL_APPEAL.ED_STUD_VIOL_ID = ED_STUD_VIOL.ED_STUD_VIOL_ID
		      LEFT OUTER JOIN dbo.GS_CDE_PENALTY AppealPenalty ON AppealPenalty.GS_CDE_PENALTY_ID = ED_STUD_VIOL_APPEAL.GS_CDE_PENALTY_ID
	      WHERE ISNULL(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE, '') LIKE '%' + @studCode + '%'
		      AND (@NationalityCPR IS NULL OR ED_STUD.NATIONAL_NUMBER LIKE @NationalityCPR + '%')
		      AND (@EdAcadYearId IS NULL OR @EdAcadYearId = 0 OR ED_STUD_VIOL.ED_ACAD_YEAR_ID = @EdAcadYearId)
		      AND (@EdCodeSemesterId IS NULL OR @EdCodeSemesterId = 0 OR ED_STUD_VIOL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
		      AND (@GsCdeViolCatId IS NULL OR @GsCdeViolCatId = 0 OR ED_STUD_VIOL.GS_CDE_VIOL_CAT_ID = @GsCdeViolCatId)
		      AND (@GsCdeViolId IS NULL OR @GsCdeViolId = 0 OR ED_STUD_VIOL.GS_CDE_VIOL_ID = @GsCdeViolId)
		      AND (@GsCdePenaltyId IS NULL OR @GsCdePenaltyId = 0 OR ED_STUD_VIOL.GS_CDE_PENALTY_ID = @GsCdePenaltyId)
		      AND (@PenaltyRelatedFlg IS NULL OR @PenaltyRelatedFlg = 0 OR ED_STUD_VIOL.PENALTY_RELATED_FLG = @PenaltyRelatedFlg)
		      AND (@FromDate IS NULL OR dbo.ED_STUD_VIOL.VIOL_DATE >= @FromDate)
		      AND (@ToDate IS NULL OR dbo.ED_STUD_VIOL.VIOL_DATE <= @ToDate)
		      AND (@ExecFlg IS NULL OR ISNULL(dbo.ED_STUD_VIOL.EXEC_FLG, 0) = @ExecFlg)
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_OFFERING_COURSE_GetByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
SELECT     ED_OFFERING_COURSE.*
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
WHERE     (ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId) AND 
			(ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
			(ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
			
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="SC_SCHEDULE_HDR_GetByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
SELECT     SC_SCHEDULE_HDR.*
FROM         SC_SCHEDULE_HDR INNER JOIN
             ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
             ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
WHERE     (@EdCodeCourseTeachingId = 0 or SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = @EdCodeCourseTeachingId) AND 
			(ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId) AND 
			(ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
            (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
			
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="CHK_ADD_HALL_TO_Section">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ED_COURSE_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@GS_CDE_CAMPUS_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SC_CDE_HALL_TYPE_ID" type="nvarchar" direction="Input" size="250" precision="3" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DATES_TIMES" type="xml" direction="Input" size="5" precision="3" scale="0" param="(250)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
            SELECT     distinct  SC_BUILDING.SC_BUILDING_ID, SC_BUILDING.BUILD_CODE, SC_BUILDING.DESCR_AR AS BuildingAr, SC_BUILDING.DESCR_EN AS BuildingEn, 
                                  SC_HALL.SC_HALL_ID, 
                                  SC_HALL.HALL_CODE, SC_HALL.DESCR_AR AS HallAr, SC_HALL.CAPACITY, SC_HALL.IS_SHARED, SC_HALL.IS_ACTIVE, SC_HALL.DESCR_EN AS HallEn, 
                                  SC_HALL.EXM_CAPCITY, SC_HALL.CAPACITY_MAX
            FROM         ED_OFFERING INNER JOIN
                                  ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID AND 
                                   (ED_OFFERING.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID)
                                   AND (@ED_COURSE_ID=0 OR @ED_COURSE_ID IS NULL or ED_OFFERING_COURSE.ED_COURSE_ID = @ED_COURSE_ID) INNER JOIN
                                  SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID INNER JOIN
                                  SC_SCHEDULE_DTL INNER JOIN
                                  SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                                  SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID 
                                  AND (@GS_CDE_CAMPUS_ID=0 or @GS_CDE_CAMPUS_ID is null or SC_BUILDING.GS_CDE_CAMPUS_ID=@GS_CDE_CAMPUS_ID)  INNER JOIN
                                  SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID  
                                  AND (@SC_CDE_HALL_TYPE_ID=0 or @SC_CDE_HALL_TYPE_ID is null or SC_HALL.SC_CDE_HALL_TYPE_ID=@SC_CDE_HALL_TYPE_ID) ON 
                                  SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID
             inner join 
             (
             select x.Record.value('Day[1]', 'int') as GS_CODE_WEEK_DAY_ID
                , x.Record.value('StartTime[1]', 'time') as FROM_TIME
                , x.Record.value('EndTime[1]', 'time') as TO_TIME
              from @DATES_TIMES.nodes('//Dates/Date') as x (Record)
             ) VS_DAYS_TIMES --Virtual Section Days Times
             on  SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID= VS_DAYS_TIMES.GS_CODE_WEEK_DAY_ID 
                 AND (CONVERT(time,VS_DAYS_TIMES.FROM_TIME)>= CONVERT(time,SC_SCHEDULE_DTL_DAY.TO_TIME) or   CONVERT(time,VS_DAYS_TIMES.TO_TIME)<= CONVERT(time,SC_SCHEDULE_DTL_DAY.FROM_TIME))
 

			
			]]>
      </body>
    </procedure>




    <procedure owner="dbo" name="CHK_ADD_HALL_TO_VS">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ED_COURSE_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@GS_CDE_CAMPUS_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SC_CDE_HALL_TYPE_ID" type="nvarchar" direction="Input" size="250" precision="3" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DATES_TIMES" type="xml" direction="Input" size="5" precision="3" scale="0" param="(250)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
            SELECT     distinct  SC_BUILDING.SC_BUILDING_ID, SC_BUILDING.BUILD_CODE, SC_BUILDING.DESCR_AR AS BuildingAr, SC_BUILDING.DESCR_EN AS BuildingEn, 
                                  SC_HALL.SC_HALL_ID, 
                                  SC_HALL.HALL_CODE, SC_HALL.DESCR_AR AS HallAr, SC_HALL.CAPACITY, SC_HALL.IS_SHARED, SC_HALL.IS_ACTIVE, SC_HALL.DESCR_EN AS HallEn, 
                                  SC_HALL.EXM_CAPCITY, SC_HALL.CAPACITY_MAX
            FROM         ED_OFFERING INNER JOIN
                                  ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID AND 
                                   (ED_OFFERING.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID)
                                   AND (@ED_COURSE_ID=0 OR @ED_COURSE_ID IS NULL or ED_OFFERING_COURSE.ED_COURSE_ID = @ED_COURSE_ID) INNER JOIN
                                  SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID INNER JOIN
                                  SC_SCHEDULE_DTL INNER JOIN
                                  SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                                  SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID 
                                  AND (@GS_CDE_CAMPUS_ID=0 or @GS_CDE_CAMPUS_ID is null or SC_BUILDING.GS_CDE_CAMPUS_ID=@GS_CDE_CAMPUS_ID)  INNER JOIN
                                  SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID  
                                  AND (@SC_CDE_HALL_TYPE_ID=0 or @SC_CDE_HALL_TYPE_ID is null or SC_HALL.SC_CDE_HALL_TYPE_ID=@SC_CDE_HALL_TYPE_ID) ON 
                                  SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID
             inner join 
             (
             select x.Record.value('Day[1]', 'int') as GS_CODE_WEEK_DAY_ID
                , x.Record.value('StartTime[1]', 'time') as FROM_TIME
                , x.Record.value('EndTime[1]', 'time') as TO_TIME
              from @DATES_TIMES.nodes('//Dates/Date') as x (Record)
             ) VS_DAYS_TIMES --Virtual Section Days Times
             on  SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID= VS_DAYS_TIMES.GS_CODE_WEEK_DAY_ID 
                 AND (CONVERT(time,VS_DAYS_TIMES.FROM_TIME)>= CONVERT(time,SC_SCHEDULE_DTL_DAY.TO_TIME) or   CONVERT(time,VS_DAYS_TIMES.TO_TIME)<= CONVERT(time,SC_SCHEDULE_DTL_DAY.FROM_TIME))
 

			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CHK_ADD_WAIT_STUD_TO_VS">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ED_COURSE_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@DATES_TIMES" type="xml" direction="Input" size="5" precision="3" scale="0" param="(250)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
                SELECT   distinct   ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID,ED_STUD_SEMESTER.ED_STUD_ID,ED_STUD_FACULTY.STUD_FACULTY_CODE,ED_STUD.FULL_NAME_AR,ED_STUD.FULL_NAME_EN,dbo.ED_CODE_LEVEL.DESCR_AR,dbo.ED_CODE_LEVEL.DESCR_EN
                FROM         ED_STUD_COURSE_WAIT INNER JOIN
                             ED_STUD_SEMESTER ON ED_STUD_COURSE_WAIT.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID AND 
                             ED_STUD_COURSE_WAIT.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID AND 
                             ED_STUD_COURSE_WAIT.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID AND 
                             (ED_STUD_COURSE_WAIT.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID) AND 
			                 (ED_STUD_COURSE_WAIT.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID) AND 
			                 (ED_STUD_COURSE_WAIT.ED_COURSE_ID = @ED_COURSE_ID)  INNER JOIN
                              ED_STUD_GROUP ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_GROUP.ED_STUD_SEMESTER_ID INNER JOIN
                              SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                              SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN 
                              dbo.ED_STUD ON dbo.ED_STUD_SEMESTER.ED_STUD_ID = dbo.ED_STUD.ED_STUD_ID INNER JOIN
                              dbo.ED_STUD_FACULTY ON dbo.ED_STUD.ED_STUD_ID = dbo.ED_STUD_FACULTY.ED_STUD_ID AND dbo.ED_STUD_FACULTY.IS_ACTIVE = 1 INNER JOIN
                              dbo.ED_CODE_LEVEL ON dbo.ED_CODE_LEVEL.ED_CODE_LEVEL_ID = dbo.ED_STUD_SEMESTER.ED_CODE_LEVEL_ID  
   
                 inner join 
                 (
                 select x.Record.value('Day[1]', 'int') as GS_CODE_WEEK_DAY_ID
                    , x.Record.value('StartTime[1]', 'time') as FROM_TIME
                    , x.Record.value('EndTime[1]', 'time') as TO_TIME
                  from @DATES_TIMES.nodes('//clientesxml/Dates/Date') as x (Record)
                 ) VS_DAYS_TIMES --Virtual Section Days Times
                 on  SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID= VS_DAYS_TIMES.GS_CODE_WEEK_DAY_ID 
                     AND (CONVERT(time,VS_DAYS_TIMES.FROM_TIME)>= CONVERT(time,SC_SCHEDULE_DTL_DAY.TO_TIME) or   CONVERT(time,VS_DAYS_TIMES.TO_TIME)<= CONVERT(time,SC_SCHEDULE_DTL_DAY.FROM_TIME))

 			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetAdmissionRatingMajors">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmOpenAcadSemId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT ADM_RATING_PARAMETERS_MAJORS.*,
		      ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN,
		      AS_CODE_DEGREE.DEGREE_DESCR_AR, AS_CODE_DEGREE.DEGREE_DESCR_EN,
		      CASE WHEN ENTITY_MAIN.AS_FACULTY_INFO_ID IS NULL THEN (SELECT e.ENT_DESCR_AR from dbo.ENTITY_MAIN e WHERE e.AS_FACULTY_INFO_ID IS NULL AND e.ENT_CODE_ENTITY_TYPE_ID = 1) 
			      ELSE AS_FACULTY_INFO.FACULTY_DESCR_AR END FACULTY_DESCR_AR,
		      CASE WHEN ENTITY_MAIN.AS_FACULTY_INFO_ID IS NULL THEN (SELECT e.ENT_DESCR_EN from dbo.ENTITY_MAIN e WHERE e.AS_FACULTY_INFO_ID IS NULL AND e.ENT_CODE_ENTITY_TYPE_ID = 1) 
			      ELSE AS_FACULTY_INFO.FACULTY_DESCR_EN END FACULTY_DESCR_EN
	      FROM dbo.ADM_RATING_PARAMETERS_MAJORS
		      INNER JOIN dbo.ENTITY_MAIN ON ENTITY_MAIN.ENT_MAIN_ID = ADM_RATING_PARAMETERS_MAJORS.ENT_MAIN_ID
			      AND ENTITY_MAIN.AS_CODE_DEGREE_ID = ADM_RATING_PARAMETERS_MAJORS.AS_CODE_DEGREE_ID
		      INNER JOIN dbo.AS_CODE_DEGREE ON AS_CODE_DEGREE.AS_CODE_DEGREE_ID = ADM_RATING_PARAMETERS_MAJORS.AS_CODE_DEGREE_ID
		      LEFT OUTER JOIN dbo.AS_FACULTY_INFO ON AS_FACULTY_INFO.AS_FACULTY_INFO_ID = ENTITY_MAIN.AS_FACULTY_INFO_ID
	      WHERE ADM_RATING_PARAMETERS_MAJORS.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemId
		      AND (@EntityMainId IS NULL OR @EntityMainId = 0 OR ADM_RATING_PARAMETERS_MAJORS.ENT_MAIN_ID = @EntityMainId)
		      AND (@AsCodeDegreeClassId IS NULL OR @AsCodeDegreeClassId = 0 OR ADM_RATING_PARAMETERS_MAJORS.AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)
		      AND (@AsCodeDegreeId IS NULL OR @AsCodeDegreeId = 0 OR ADM_RATING_PARAMETERS_MAJORS.AS_CODE_DEGREE_ID = @AsCodeDegreeId)
		      AND (@AsFacultyInfoId = -1 OR ISNULL(ENTITY_MAIN.AS_FACULTY_INFO_ID, 0) = ISNULL(@AsFacultyInfoId, 0))
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetAdmissionBands">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmOpenAcadSemId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT ADM_ADMISSION_BAND.*, ADM_RATING_PARAMETERS.ADM_OPEN_ACAD_SEMESTER_ID,
		      ADM_RATING_PARAMETERS.ADM_RATING_PARAMETERS_ID, ISNULL(ADM_RATING_PARAMETERS.REQUIRED_NUMBERS, 0) REQUIRED_NUMBERS,
		      ISNULL(ADM_RATING_PARAMETERS.CURRENT_NUMBERS, 0) CURRENT_NUMBERS, ISNULL(ADM_RATING_PARAMETERS.ACCEPTED_NUMBERS, 0) ACCEPTED_NUMBERS
	      FROM dbo.ADM_ADMISSION_BAND
		      LEFT OUTER JOIN dbo.ADM_RATING_PARAMETERS ON ADM_RATING_PARAMETERS.ADM_ADMISSION_BAND_ID = ADM_ADMISSION_BAND.ADM_ADMISSION_BAND_ID
			      AND (ADM_RATING_PARAMETERS.ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemId)
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStudentProjects">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeSemsetr" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdProjectId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="250" precision="3" scale="0" param="(50)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="5" precision="3" scale="0" param="(250)" nulldefault="" />
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        SELECT ED_PROJECT.*
	      FROM dbo.ED_PROJECT
		      INNER JOIN dbo.ED_PROJ_STUD ON ED_PROJ_STUD.ED_PROJECT_ID = ED_PROJECT.ED_PROJECT_ID
		      INNER JOIN dbo.ED_STUD ON ED_STUD.ED_STUD_ID = ED_PROJ_STUD.ED_STUD_ID
		      INNER JOIN dbo.ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID
	      WHERE (@EdAcadYearId IS NULL OR @EdAcadYearId = 0 or ED_PROJECT.ED_ACAD_YEAR_ID = @EdAcadYearId)
		      AND (@EdCodeSemsetr IS NULL OR @EdCodeSemsetr = 0 or ED_PROJECT.ED_CODE_SEMESTER_ID = @EdCodeSemsetr)
		      AND (@EdProjectId IS NULL OR @EdProjectId = 0 or ED_PROJECT.ED_PROJECT_ID = @EdProjectId)
		      AND dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE LIKE '%' + @StudCode + '%'
		      AND CASE WHEN @lang = 1 THEN ed_stud.FULL_NAME_EN ELSE ed_stud.FULL_NAME_AR END LIKE '%' + @StudName + '%';
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStudentsToBeSponsored">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdStudName" type="nvarchar" direction="Input" size="250" precision="3" scale="0" param="(250)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudFacultyCode" type="nvarchar" direction="Input" size="5" precision="3" scale="0" param="(50)" nulldefault="" />
        <parameter name="@CGPAFrom" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CGPATo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EarnedCrFrom" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EarnedCrTo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeIds" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemester" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@spoSponsorId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@LastSemesterFlg" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

          if @LastSemesterFlg is null or @LastSemesterFlg = 0
		        select ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN,
			        ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_STUD_SEMESTER.ED_ACAD_YEAR_ID, ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,
			        ED_STUD_SEMESTER.ACCUM_GPA, ED_STUD_SEMESTER.ACCUM_CH, ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID, ENTITY_MAIN.ENT_DESCR_EN,
			        ENTITY_MAIN.ENT_DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_EN, ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID,
			        @EdAcadYearId ActiveAcadYearId, @EdCodeSemester ActiveEdCodeSemester
		        from ED_STUD
			        inner join ED_STUD_SEMESTER on (ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
				        and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemester and ED_STUD_SEMESTER.IS_LAST = 1 and ED_STUD_SEMESTER.IS_CLOSED = 0)
			        inner join ED_CODE_ENROLL_TYPE on ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID = ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID
			        inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID and ED_STUD_FACULTY.IS_ACTIVE = 1)
			        left outer join ED_STUD_STATE on (ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID and ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1)
			        left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID
		        where isnull(ED_STUD_SEMESTER.HAVE_SPONSOR, 0) = 0
		        and (
				        @EdStudName is null 
				        or (case when isnull(@lang, 1) = 1 then ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end) like
				        (case when ISNULL(@NamePolicy, 1) = 1 then '%' + @EdStudName + '%' else @EdStudName + '%' end)
				        or @StudFacultyCode is null
				        or ED_STUD_FACULTY.STUD_FACULTY_CODE like @StudFacultyCode
			        )
		        and (@CGPAFrom is null or ED_STUD_SEMESTER.ACCUM_GPA >= @CGPAFrom)
		        and (@CGPATo is null or ED_STUD_SEMESTER.ACCUM_GPA <= @CGPATo)
		        and (@EarnedCrFrom is null or ED_STUD_SEMESTER.ACCUM_CH >= @EarnedCrFrom)
		        and (@EarnedCrTo is null or ED_STUD_SEMESTER.ACCUM_CH <= @EarnedCrTo)
		        and (@EdCodeEnrollTypeIds is null or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID in (SELECT item FROM dbo.Split(@EdCodeEnrollTypeIds)))
	        else
		        select ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN,
			        ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_STUD_SEMESTER.ED_ACAD_YEAR_ID, ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,
			        ED_STUD_SEMESTER.ACCUM_GPA, ED_STUD_SEMESTER.ACCUM_CH, ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID, ENTITY_MAIN.ENT_DESCR_EN,
			        ENTITY_MAIN.ENT_DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_EN, ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID,
			        (select EdStudSem.ED_ACAD_YEAR_ID from ED_STUD_SEMESTER EdStudSem where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID and EdStudSem.IS_LAST = 1 and EdStudSem.IS_CLOSED = 0 and isnull(EdStudSem.HAVE_SPONSOR, 0) = 0) ActiveAcadYearId,
			        (select EdStudSem.ED_CODE_SEMESTER_ID from ED_STUD_SEMESTER EdStudSem where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID and EdStudSem.IS_LAST = 1 and EdStudSem.IS_CLOSED = 0 and isnull(EdStudSem.HAVE_SPONSOR, 0) = 0) ActiveEdCodeSemester						
		        from SPO_SPONSOR_STUD
			        inner join ED_STUD on ED_STUD.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID
			        inner join ED_STUD_SEMESTER on (ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_SEMESTER.IS_LAST = 0
				        and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = SPO_SPONSOR_STUD.ED_ACAD_YEAR_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = SPO_SPONSOR_STUD.ED_CODE_SEMESTER_ID)			
			        inner join ED_CODE_ENROLL_TYPE on ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID = ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID
			        inner join ED_ACAD_YEAR on ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
			        inner join ED_CODE_SEMESTER on ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
			        inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID and ED_STUD_FACULTY.IS_ACTIVE = 1)
			        left outer join ED_STUD_STATE on (ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID and ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1)
			        left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID		
		        where SPO_SPONSOR_STUD.SPO_SPONSOR_ID = @spoSponsorId
		        and Exists(select '' from ED_STUD_SEMESTER EdStudSem where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID and EdStudSem.IS_LAST = 1 and EdStudSem.IS_CLOSED = 0 and isnull(EdStudSem.HAVE_SPONSOR, 0) = 0)
		        and (
				        @EdStudName is null or 
				        (case when isnull(@lang, 1) = 1 then ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end) like
				        (case when ISNULL(@NamePolicy, 1) = 1 then '%' + @EdStudName + '%' else @EdStudName + '%' end)
				        or @StudFacultyCode is null
				        or ED_STUD_FACULTY.STUD_FACULTY_CODE like @StudFacultyCode
			        )
		        and (@CGPAFrom is null or ED_STUD_SEMESTER.ACCUM_GPA >= @CGPAFrom)
		        and (@CGPATo is null or ED_STUD_SEMESTER.ACCUM_GPA <= @CGPATo)
		        and (@EarnedCrFrom is null or ED_STUD_SEMESTER.ACCUM_CH >= @EarnedCrFrom)
		        and (@EarnedCrTo is null or ED_STUD_SEMESTER.ACCUM_CH <= @EarnedCrTo)
		        and (@EdCodeEnrollTypeIds is null or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID in (SELECT item FROM dbo.Split(@EdCodeEnrollTypeIds)))
		        and not Exists(
						        select ''
						        from ED_STUD_SEMESTER EdStudSem
							        inner join ED_ACAD_YEAR EdAcadYear on EdAcadYear.ED_ACAD_YEAR_ID = EdStudSem.ED_ACAD_YEAR_ID
							        inner join ED_CODE_SEMESTER EdCodeSem on EdCodeSem.ED_CODE_SEMESTER_ID = EdStudSem.ED_CODE_SEMESTER_ID
						        where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID
						        and EdStudSem.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
						        and EdStudSem.IS_LAST = 0
						        and (EdAcadYear.YEAR_ORDER > ED_ACAD_YEAR.YEAR_ORDER
						        or (EdAcadYear.YEAR_ORDER = ED_ACAD_YEAR.YEAR_ORDER and EdCodeSem.SEMESTER_ORDER > ED_CODE_SEMESTER.SEMESTER_ORDER))						
					          )
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetStudentSponsered">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdStudName" type="nvarchar" direction="Input" size="250" precision="3" scale="0" param="(250)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="50" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudFacultyCode" type="nvarchar" direction="Input" size="5" precision="3" scale="0" param="(50)" nulldefault="" />
        <parameter name="@CGPAFrom" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CGPATo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EarnedCrFrom" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EarnedCrTo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeIds" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemester" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@spoSponsorId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@LastSemesterFlg" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

          if @LastSemesterFlg is null or @LastSemesterFlg = 0
		        select ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN,
			        ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_STUD_SEMESTER.ED_ACAD_YEAR_ID, ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,
			        ED_STUD_SEMESTER.ACCUM_GPA, ED_STUD_SEMESTER.ACCUM_CH, ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID, ENTITY_MAIN.ENT_DESCR_EN,
			        ENTITY_MAIN.ENT_DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_EN, ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID,
			        @EdAcadYearId ActiveAcadYearId, @EdCodeSemester ActiveEdCodeSemester
		        from ED_STUD
			        inner join ED_STUD_SEMESTER on (ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
				        and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemester and ED_STUD_SEMESTER.IS_LAST = 1 and ED_STUD_SEMESTER.IS_CLOSED = 0)
			        inner join ED_CODE_ENROLL_TYPE on ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID = ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID
			        inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID and ED_STUD_FACULTY.IS_ACTIVE = 1)
			        left outer join ED_STUD_STATE on (ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID and ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1)
			        left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID
		        where isnull(ED_STUD_SEMESTER.HAVE_SPONSOR, 0) = 0
		        and (
				        @EdStudName is null 
				        or (case when isnull(@lang, 1) = 1 then ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end) like
				        (case when ISNULL(@NamePolicy, 1) = 1 then '%' + @EdStudName + '%' else @EdStudName + '%' end)
				        or @StudFacultyCode is null
				        or ED_STUD_FACULTY.STUD_FACULTY_CODE like @StudFacultyCode
			        )
		        and (@CGPAFrom is null or ED_STUD_SEMESTER.ACCUM_GPA >= @CGPAFrom)
		        and (@CGPATo is null or ED_STUD_SEMESTER.ACCUM_GPA <= @CGPATo)
		        and (@EarnedCrFrom is null or ED_STUD_SEMESTER.ACCUM_CH >= @EarnedCrFrom)
		        and (@EarnedCrTo is null or ED_STUD_SEMESTER.ACCUM_CH <= @EarnedCrTo)
		        and (@EdCodeEnrollTypeIds is null or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID in (SELECT item FROM dbo.Split(@EdCodeEnrollTypeIds)))
	        else
		        select ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN,
			        ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_STUD_SEMESTER.ED_ACAD_YEAR_ID, ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,
			        ED_STUD_SEMESTER.ACCUM_GPA, ED_STUD_SEMESTER.ACCUM_CH, ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID, ENTITY_MAIN.ENT_DESCR_EN,
			        ENTITY_MAIN.ENT_DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_AR, ED_CODE_ENROLL_TYPE.DESCR_EN, ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID,
			        (select EdStudSem.ED_ACAD_YEAR_ID from ED_STUD_SEMESTER EdStudSem where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID and EdStudSem.IS_LAST = 1 and EdStudSem.IS_CLOSED = 0 and isnull(EdStudSem.HAVE_SPONSOR, 0) = 0) ActiveAcadYearId,
			        (select EdStudSem.ED_CODE_SEMESTER_ID from ED_STUD_SEMESTER EdStudSem where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID and EdStudSem.IS_LAST = 1 and EdStudSem.IS_CLOSED = 0 and isnull(EdStudSem.HAVE_SPONSOR, 0) = 0) ActiveEdCodeSemester						
		        from SPO_SPONSOR_STUD
			        inner join ED_STUD on ED_STUD.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID
			        inner join ED_STUD_SEMESTER on (ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_SEMESTER.IS_LAST = 0
				        and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = SPO_SPONSOR_STUD.ED_ACAD_YEAR_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = SPO_SPONSOR_STUD.ED_CODE_SEMESTER_ID)			
			        inner join ED_CODE_ENROLL_TYPE on ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID = ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID
			        inner join ED_ACAD_YEAR on ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
			        inner join ED_CODE_SEMESTER on ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
			        inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID and ED_STUD_FACULTY.IS_ACTIVE = 1)
			        left outer join ED_STUD_STATE on (ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID and ED_STUD_STATE.ED_CODE_STATE_STATUS_ID = 1)
			        left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID		
		        where SPO_SPONSOR_STUD.SPO_SPONSOR_ID = @spoSponsorId
		        and Exists(select '' from ED_STUD_SEMESTER EdStudSem where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID and EdStudSem.IS_LAST = 1 and EdStudSem.IS_CLOSED = 0 and isnull(EdStudSem.HAVE_SPONSOR, 0) = 0)
		        and (
				        @EdStudName is null or 
				        (case when isnull(@lang, 1) = 1 then ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end) like
				        (case when ISNULL(@NamePolicy, 1) = 1 then '%' + @EdStudName + '%' else @EdStudName + '%' end)
				        or @StudFacultyCode is null
				        or ED_STUD_FACULTY.STUD_FACULTY_CODE like @StudFacultyCode
			        )
		        and (@CGPAFrom is null or ED_STUD_SEMESTER.ACCUM_GPA >= @CGPAFrom)
		        and (@CGPATo is null or ED_STUD_SEMESTER.ACCUM_GPA <= @CGPATo)
		        and (@EarnedCrFrom is null or ED_STUD_SEMESTER.ACCUM_CH >= @EarnedCrFrom)
		        and (@EarnedCrTo is null or ED_STUD_SEMESTER.ACCUM_CH <= @EarnedCrTo)
		        and (@EdCodeEnrollTypeIds is null or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID in (SELECT item FROM dbo.Split(@EdCodeEnrollTypeIds)))
		        and not Exists(
						        select ''
						        from ED_STUD_SEMESTER EdStudSem
							        inner join ED_ACAD_YEAR EdAcadYear on EdAcadYear.ED_ACAD_YEAR_ID = EdStudSem.ED_ACAD_YEAR_ID
							        inner join ED_CODE_SEMESTER EdCodeSem on EdCodeSem.ED_CODE_SEMESTER_ID = EdStudSem.ED_CODE_SEMESTER_ID
						        where EdStudSem.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID
						        and EdStudSem.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
						        and EdStudSem.IS_LAST = 0
						        and (EdAcadYear.YEAR_ORDER > ED_ACAD_YEAR.YEAR_ORDER
						        or (EdAcadYear.YEAR_ORDER = ED_ACAD_YEAR.YEAR_ORDER and EdCodeSem.SEMESTER_ORDER > ED_CODE_SEMESTER.SEMESTER_ORDER))						
					          )
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetSponsorStudents">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, 27/2/2012

-- Created By:  (emohamed)
-- Purpose: Select records from the SC_SCHEDULE_DTL_DAY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SpoSponsorId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
      
        declare @CurrentEdAcadYearId numeric(9, 0);
	      select @CurrentEdAcadYearId = ED_ACAD_YEAR_ID from dbo.ED_ACAD_YEAR where CURRENT_YEAR = 1;
	
	      select SPO_SPONSOR_STUD.SPO_SPONSOR_ID, SPO_SPONSOR_STUD.SPO_SPONSOR_STUD_ID,
		      SPO_SPONSOR_STUD.ED_STUD_ID, SPO_SPONSOR_STUD.PERCENTAGE, SPO_SPONSOR_STUD.IS_APPROVED,
		      SPO_SPONSOR_STUD.ED_ACAD_YEAR_ID, SPO_SPONSOR_STUD.ED_CODE_SEMESTER_ID, SPO_SPONSOR_STUD.AMOUNT,
		      ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE
	      from SPO_SPONSOR_STUD
		      inner join ED_STUD on ED_STUD.ED_STUD_ID = SPO_SPONSOR_STUD.ED_STUD_ID
		      inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID
		      and ED_STUD_FACULTY.ED_ACAD_YEAR_ID = @CurrentEdAcadYearId and ED_STUD_FACULTY.IS_ACTIVE = 1)
		      inner join ED_STUD_SEMESTER on (ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = ED_STUD_FACULTY.AS_FACULTY_INFO_ID
		      and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @CurrentEdAcadYearId and ED_STUD_SEMESTER.IS_LAST = 1)
		      inner join ED_SEMESTER_OPEN on (ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = @CurrentEdAcadYearId
		      and ED_SEMESTER_OPEN.ENT_MAIN_ID in (select ENTITY_MAIN.ENT_MAIN_ID from ENTITY_MAIN where ENTITY_MAIN.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 2)
		      and ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID)
	      where SPO_SPONSOR_STUD.SPO_SPONSOR_ID = @SpoSponsorId
	      and ED_SEMESTER_OPEN.IS_CLOSED = 0 and ED_SEMESTER_OPEN.IS_CURRENT = 1;
      
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_FACULTY_INSTALLMENT_LoadInstallments" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Ahmed Ali)
-- Purpose: Get Academic Status information corresponding to current applicant
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@Load" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
                DECLARE @ErrorMsg NVARCHAR(max)='';
	DECLARE @successNum INT=0,@FailedNum INT=0;
	
	DECLARE @tblStud TABLE( 
	EdStudId NUMERIC(9,0),
	StudFacultyCode NVARCHAR(50)
	)
	INSERT INTO @tblStud 
	SELECT DISTINCT  ED_STUD_FACULTY.ED_STUD_ID,ED_STUD_FACULTY.STUD_FACULTY_CODE
	FROM  ED_STUD_SEMESTER 
		INNER JOIN ED_CODE_ENROLL_TYPE ON ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID 
		RIGHT OUTER JOIN ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID 
		INNER JOIN ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID  					
		LEFT OUTER JOIN dbo.AS_CODE_DEGREE ON dbo.ED_STUD_FACULTY.AS_CODE_DEGREE_ID = dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_ID 
		LEFT OUTER JOIN dbo.ENTITY_MAIN ON dbo.ENTITY_MAIN.AS_CODE_DEGREE_ID = AS_CODE_DEGREE.AS_CODE_DEGREE_ID 
		LEFT OUTER JOIN dbo.AS_CODE_DEGREE_CLASS ON dbo.AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID = dbo.AS_CODE_DEGREE_CLASS.AS_CODE_DEGREE_CLASS_ID 
		LEFT OUTER JOIN ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID 
		LEFT OUTER JOIN GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID 
		left outer join GS_COUNTRY_NODE on GS_COUNTRY_NODE.GS_COUNTRY_NODE_ID = GS_COUNTRY_INFO.GS_COUNTRY_NODE_ID
		LEFT OUTER JOIN GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID 
		LEFT OUTER JOIN	GS_CODE_RELIGION ON ED_STUD.GS_CODE_RELIGION_ID = GS_CODE_RELIGION.GS_CODE_RELIGION_ID
	WHERE ED_STUD_FACULTY.IS_ACTIVE=1
	AND isnull(ED_STUD_SEMESTER.AS_FACULTY_INFO_ID, 0) = isnull(@AsFacultyInfoId, 0)
	AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
	AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId)
	AND isnull(ED_STUD_FACULTY.AS_FACULTY_INFO_ID, 0) = isnull(@AsFacultyInfoId, 0)
	and (@AsCodeDegreeId is null or @AsCodeDegreeId = 0 or ED_STUD_FACULTY.AS_CODE_DEGREE_ID = @AsCodeDegreeId)

	DECLARE @edStudId NUMERIC,
			@StudCode NVARCHAR(50);
	
	DECLARE curr_Studs CURSOR for
	SELECT * FROM @tblStud
	
	OPEN curr_Studs
	FETCH NEXT FROM curr_Studs INTO @edStudId,@StudCode
	WHILE @@FETCH_STATUS=0
	BEGIN
	
		BEGIN try
		
			EXEC StudentFeesInstallments @EdAcadYearId,@EdCodeSemesterId,@EntMainId,@AsFacultyInfoId,@edStudId,@AsCodeDegreeId,@Load,@lang
			SET @successNum = @successNum+1;
			
		END TRY
		BEGIN CATCH
			
			SET @FailedNum = @FailedNum+1;
			
			DECLARE @error NVARCHAR(max);
			select @error=ERROR_MESSAGE();
			
			SET @ErrorMsg = @ErrorMsg +'<br>'+ @StudCode + ' : ' + @error;
			
		END CATCH
				
		FETCH NEXT FROM curr_Studs INTO @edStudId,@StudCode	
	END
	CLOSE curr_Studs
	DEALLOCATE curr_Studs
	
	SET @ErrorMsg = 'Success Stud.('+CONVERT(NVARCHAR,@successNum)+'), Faild Stud.('+CONVERT(NVARCHAR,@FailedNum)+')<br>'+@ErrorMsg
	RAISERROR(@ErrorMsg,16,-1);
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_ACAD_PLAN_Search" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Ahmed Ali)
-- Purpose: Get Academic Status information corresponding to current applicant
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@CodeDegreeClassId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsClosed" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
                SELECT     ED_ACAD_PLAN.ED_ACAD_PLAN_ID, AS_FACULTY_INFO.AS_FACULTY_INFO_ID, ENTITY_MAIN.ENT_MAIN_ID, AS_FACULTY_INFO.FACULTY_DESCR_AR, 
                          AS_FACULTY_INFO.FACULTY_DESCR_EN, AS_CODE_DEGREE_CLASS.CLASS_CODE, ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN, 
                          ED_ACAD_YEAR.DESCR_AR, ED_ACAD_YEAR.DESCR_EN, ED_ACAD_PLAN.CURRENT_FLG, ISNULL(ED_ACAD_PLAN.CLOSED_FLG,0) CLOSED_FLG
                FROM         ED_ACAD_PLAN INNER JOIN
                                      ENTITY_MAIN ON ED_ACAD_PLAN.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID LEFT outer JOIN
                                      AS_FACULTY_INFO ON ISNULL(ENTITY_MAIN.AS_FACULTY_INFO_ID,0) = ISNULL(AS_FACULTY_INFO.AS_FACULTY_INFO_ID,0) INNER JOIN
                                      ED_ACAD_YEAR ON ED_ACAD_PLAN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                                      AS_CODE_DEGREE ON ENTITY_MAIN.AS_CODE_DEGREE_ID = AS_CODE_DEGREE.AS_CODE_DEGREE_ID INNER JOIN
                                      AS_CODE_DEGREE_CLASS ON AS_CODE_DEGREE.AS_CODE_DEGREE_CLASS_ID = AS_CODE_DEGREE_CLASS.AS_CODE_DEGREE_CLASS_ID
                WHERE (@AsFacultyInfoId IS NULL OR @AsFacultyInfoId=0 OR ISNULL(ENTITY_MAIN.AS_FACULTY_INFO_ID,0) = ISNULL(@AsFacultyInfoId,0)) AND
		                (@EntMainId IS NULL OR @EntMainId =0 OR dbo.ED_ACAD_PLAN.ent_main_id = @EntMainId) AND
		                (@EdAcadYearId IS NULL OR @EdAcadYearId=0 OR dbo.ED_ACAD_PLAN.ed_acad_year_id = @EdAcadYearId) AND
		                (@CodeDegreeClassId IS NULL OR @CodeDegreeClassId = 0 OR dbo.AS_CODE_DEGREE_CLASS.AS_CODE_DEGREE_CLASS_ID = @CodeDegreeClassId) AND
		                (@IsClosed IS NULL OR @IsClosed =-1 OR dbo.ED_ACAD_PLAN.CLOSED_FLG = @IsClosed)
                 ORDER BY ISNULL(AS_FACULTY_INFO.AS_FACULTY_INFO_ID,0) asc,ENTITY_MAIN.Node_Path asc,ED_ACAD_YEAR.YEAR_ORDER desc
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetApplicantAcademicStatus" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Ahmed Ali)
-- Purpose: Get Academic Status information corresponding to current applicant
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ApplicantID" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				select ADM_APP_PLACEMENT_EXAM.MARK,
ADM_APP_PLACEMENT_EXAM.PASS_FLG,
ADM_PLACE_EXAM_DATETIME.EXAM_DATETIME,
ADM_CDE_PLACEMENT_EXAM.DESCR_AR,
ADM_CDE_PLACEMENT_EXAM.DESCR_EN,
SC_HALL.DESCR_AR as[exam_location_Ar],
SC_HALL.DESCR_EN as[exam_location_En]

from ADM_CDE_PLACEMENT_EXAM inner join ADM_PLACE_EXAM_DATETIME
on ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID=ADM_PLACE_EXAM_DATETIME.ADM_CDE_PLACEMENT_EXAM_ID

inner join ADM_APP_PLACEMENT_EXAM   
on ADM_PLACE_EXAM_DATETIME.ADM_PLACE_EXAM_DATETIME_ID=
 ADM_APP_PLACEMENT_EXAM.ADM_PLACE_EXAM_DATETIME_ID
 
 inner join SC_HALL on ADM_PLACE_EXAM_DATETIME.SC_HALL_ID
 =SC_HALL.SC_HALL_ID
 
where ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID=@ApplicantID
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_SEMESTER_Update_Original" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_SEMESTER table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@OriginalEdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdCodeLoadTypeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@EdCodeEnrollTypeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@AccumCh" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@AccumGpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@IsCourseApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AccumPoint" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@SemCh" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@SemGpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@SemPoint" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@IsClosed" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@MajorCgpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@MajorGpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@AcdPlnLoadFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@OnlineFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_SEMESTER]
				SET
					[ED_STUD_SEMESTER_ID] = @EdStudSemesterId
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[ED_STUD_ID] = @EdStudId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[ED_CODE_LEVEL_ID] = @EdCodeLevelId
					,[IS_LAST] = @IsLast
					,[ED_CODE_LOAD_TYPE_ID] = @EdCodeLoadTypeId
					,[ED_CODE_ENROLL_TYPE_ID] = @EdCodeEnrollTypeId
					,[ACCUM_CH] = @AccumCh
					,[ACCUM_GPA] = @AccumGpa
					,[IS_COURSE_APPROVED] = @IsCourseApproved
					,[ACCUM_POINT] = @AccumPoint
					,[SEM_CH] = @SemCh
					,[SEM_GPA] = @SemGpa
					,[SEM_POINT] = @SemPoint
					,[ED_SEMESTER_OPEN_ID] = @EdSemesterOpenId
					,[IS_CLOSED] = @IsClosed
					,[MAJOR_CGPA] = @MajorCgpa
					,[MAJOR_GPA] = @MajorGpa
					,[ACD_PLN_LOAD_FLG] = @AcdPlnLoadFlg
					,[ONLINE_FLG] = @OnlineFlg
				WHERE
[ED_STUD_SEMESTER_ID] = @EdStudSemesterId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="Get_Empty_Hall_S" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (dalia to insert into two table in registration)
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>

        <parameter name="@CourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@entMainId" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
        <parameter name="@MaxCapacity" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@BuildingId" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@hallTypeId" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@fromTime" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@toTime" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@weekId" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
				SELECT     SC_BUILDING.SC_BUILDING_ID, SC_BUILDING.BUILD_CODE, SC_BUILDING.DESCR_AR AS BuildingAr, SC_BUILDING.DESCR_EN AS BuildingEn, 
                      GS_CDE_CAMPUS.GS_CDE_CAMPUS_ID, GS_CDE_CAMPUS.DESCR_AR AS CampusAr, GS_CDE_CAMPUS.DESCR_EN AS CampusEn, SC_HALL.SC_HALL_ID, 
                      SC_HALL.HALL_CODE, SC_HALL.DESCR_AR AS HallAr, SC_HALL.CAPACITY, SC_HALL.IS_SHARED, SC_HALL.IS_ACTIVE, SC_HALL.DESCR_EN AS HallEn, 
                      SC_HALL.EXM_CAPCITY, SC_HALL.CAPACITY_MAX, SC_HALL.FLOOR, SC_HALL.SC_CDE_HALL_TYPE_ID, SC_HALL_RSRV.SC_HALL_RSRV_ID, 
                      SC_HALL_RSRV.ED_COURSE_ID, SC_HALL_RSRV.ENT_MAIN_ID, SC_BUILDING.AS_FACULTY_INFO_ID, SC_SCHEDULE_DTL_DAY.FROM_TIME, 
                      SC_SCHEDULE_DTL_DAY.TO_TIME, GS_CODE_WEEK_DAY.SYMBOL
FROM         SC_BUILDING INNER JOIN
                      SC_HALL ON SC_BUILDING.SC_BUILDING_ID = SC_HALL.SC_BUILDING_ID LEFT OUTER JOIN
                      SC_HALL_RSRV ON SC_HALL.SC_HALL_ID = SC_HALL_RSRV.SC_HALL_ID INNER JOIN
                      GS_CDE_CAMPUS ON SC_BUILDING.GS_CDE_CAMPUS_ID = GS_CDE_CAMPUS.GS_CDE_CAMPUS_ID LEFT OUTER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_BUILDING.SC_BUILDING_ID = SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID AND 
                      SC_HALL.SC_HALL_ID = SC_SCHEDULE_DTL_DAY.SC_HALL_ID LEFT OUTER JOIN
                      GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID
WHERE		 (SC_HALL_RSRV.ED_COURSE_ID = @CourseId)
			 OR (SC_HALL_RSRV.ENT_MAIN_ID = @entMainId) 
             OR (SC_HALL_RSRV.SC_HALL_RSRV_ID IS NULL)
             AND (@MaxCapacity=0 or SC_HALL.CAPACITY_MAX is null or SC_HALL.CAPACITY_MAX >= @MaxCapacity)
             and (@BuildingId=0 or SC_BUILDING.SC_BUILDING_ID is null or SC_BUILDING.SC_BUILDING_ID=@BuildingId)
             and (@hallTypeId=0 or  SC_HALL.SC_CDE_HALL_TYPE_ID is null or SC_HALL.SC_CDE_HALL_TYPE_ID=@hallTypeId)
             and   (@fromTime is null or @toTime is null or   ((@fromTime>=SC_SCHEDULE_DTL_DAY.FROM_TIME and  @fromTime<=SC_SCHEDULE_DTL_DAY.TO_TIME)
             or(@toTime>=SC_SCHEDULE_DTL_DAY.FROM_TIME and  @toTime<=SC_SCHEDULE_DTL_DAY.TO_TIME)))
             and (@weekId =0 or GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID is null or GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID in (@weekId))
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_History_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (dalia to insert into two table in registration)
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AdmAppCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
        <parameter name="@Username" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@PasswordSalt" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@PasswordHash" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@SecurityQs" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@SecurityQsAnsSalt" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@SecurityQsAnsHash" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@ActivationCode" type="nvarchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
        <parameter name="@ActivationFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@FnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@MnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@MnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@LnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@LnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@Cpr" type="numeric" direction="Input" size="9" precision="10" scale="0" param="(10, 0)" nulldefault=""/>
        <parameter name="@PassporNo" type="numeric" direction="Input" size="9" precision="18" scale="0" param="(18, 0)" nulldefault=""/>
        <parameter name="@PassporExpireDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@Birthdate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@GsBirthCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@PhotoPath" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@GsCdeMaritalStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@WorkFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@AdmAppMessageId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AdmCdeStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AcadYear" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@SemId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
					BEGIN TRANSACTION [Tran1] 
	BEGIN TRY

	if (@AdmApplicantId =0)
	  Begin
    
		DECLARE @V_AdmApplicantId numeric(7, 0)
		SELECT @V_AdmApplicantId = ISNULL(MAX(ADM_APPLICANT_ID), 0) + 1 FROM [dbo].[ADM_APPLICANT];		
	   INSERT INTO [dbo].[ADM_APPLICANT]
							(
							[ADM_APPLICANT_ID]
							,[ADM_APP_CODE]
							,[USERNAME]
							,[PASSWORD_SALT]
							,[PASSWORD_HASH]
							,[SECURITY_QS]
							,[SECURITY_QS_ANS_SALT]
							,[SECURITY_QS_ANS_HASH]
							,[ACTIVATION_CODE]
							,[ACTIVATION_FLG]
							,[REG_DATE]
							,[FNAME_AR]
							,[FNAME_EN]
							,[MNAME_AR]
							,[MNAME_EN]
							,[LNAME_AR]
							,[LNAME_EN]
							,[FAMILY_AR]
							,[FAMILY_EN]
							,[GS_CODE_RELIGION_ID]
							,[CPR]
							,[PASSPOR_NO]
							,[PASSPOR_EXPIRE_DATE]
							,[BIRTHDATE]
							,[GS_BIRTH_COUNTRY_NODE_ID]
							,[PHOTO_PATH]
							,[GS_CDE_MARITAL_STATUS_ID]
							,[GS_CODE_GENDER_ID]
							,[WORK_FLG]
							,[GS_COUNTRY_NODE_ID]
							,[ADM_APP_MESSAGE_ID]
							)
						VALUES
							(
							@V_AdmApplicantId
							,@AdmAppCode
							,@Username
							,@PasswordSalt
							,@PasswordHash
							,@SecurityQs
							,@SecurityQsAnsSalt
							,@SecurityQsAnsHash
							,@ActivationCode
							,@ActivationFlg
							,@RegDate
							,@FnameAr
							,@FnameEn
							,@MnameAr
							,@MnameEn
							,@LnameAr
							,@LnameEn
							,@FamilyAr
							,@FamilyEn
							,@GsCodeReligionId
							,@Cpr
							,@PassporNo
							,@PassporExpireDate
							,@Birthdate
							,@GsBirthCountryNodeId
							,@PhotoPath
							,@GsCdeMaritalStatusId
							,@GsCodeGenderId
							,@WorkFlg
							,@GsCountryNodeId
							,@AdmAppMessageId
							)
						
		DECLARE @V_AdmAppRegHistoryId numeric(18, 0)
		SELECT @V_AdmAppRegHistoryId = ISNULL(MAX(ADM_APP_REG_HISTORY_ID), 0) + 1 FROM [dbo].[ADM_APP_REG_HISTORY];			
		 INSERT INTO [dbo].[ADM_APP_REG_HISTORY]
							(
								 ADM_APP_REG_HISTORY_ID,
							 ADM_APPLICANT_ID, 
							 APP_DATE,
							 ED_ACAD_YEAR_ID,
							 ED_CODE_SEMESTER_ID,
							 CURRENT_FLG, 
							 AS_CODE_DEGREE_CLASS_ID)
						VALUES
							(
							@V_AdmAppRegHistoryId
							,@AdmApplicantId
							,getdate()
							,@AcadYear
							,@SemId
							,1
							,@AsCodeDegreeClassId)
					
					
			DECLARE @V_AdmAppRegStausHistoryId numeric(18, 0)
		SELECT @V_AdmAppRegStausHistoryId = ISNULL(MAX(ADM_APP_REG_STATUS_HISTORY_ID), 0) + 1 FROM [dbo].[ADM_APP_REG_STATUS_HISTORY];			
		  INSERT INTO [dbo].[ADM_APP_REG_STATUS_HISTORY]
						  (ADM_APP_REG_STATUS_HISTORY_ID,
						   ADM_APP_REG_HISTORY_ID, 
						   ADM_CDE_STATUS_ID,
						   SE_USER_ID,
						   ACTION_DATE,
						  CURRENT_FLG)
                      
			VALUES      
					 ( @V_AdmAppRegStausHistoryId,
					   @V_AdmAppRegHistoryId,
					   @AdmCdeStatusId,
					   @SeUserId,
					   GETDATE(),
					   1)
	 							
					
		DECLARE @V_AdmAppProcStepsId numeric(18, 0)
		SELECT @V_AdmAppProcStepsId = ISNULL(MAX(ADM_APP_PROC_STEPS_ID), 0) + 1 FROM [dbo].[ADM_APP_PROC_STEPS];	     
	   INSERT INTO ADM_APP_PROC_STEPS
	SELECT    @V_AdmAppProcStepsId+ROW_NUMBER() over(order by APP_TYPE_REG_STEPS_ID) ,@V_AdmApplicantId,APP_TYPE_REG_STEPS_ID,1,GETDATE()
	FROM         APP_TYPE_REG_STEPS
	WHERE     (AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)	


	 END	
	ELSE 
	  Begin
	DECLARE @V_OldAdmAppRegHistoryId numeric(18, 0)
		SELECT @V_OldAdmAppRegHistoryId = ADM_APP_REG_HISTORY_ID FROM [dbo].[ADM_APP_REG_HISTORY]  where ADM_APPLICANT_ID=@AdmApplicantId;	

		UPDATE    [dbo].[ADM_APP_REG_HISTORY]
		  SET         CURRENT_FLG =0
		  where ADM_APPLICANT_ID=@AdmApplicantId AND ADM_APP_REG_HISTORY_ID=@V_OldAdmAppRegHistoryId
	  
		UPDATE    [dbo].[ADM_APP_REG_STATUS_HISTORY]
			SET              CURRENT_FLG =0
			where ADM_APP_REG_HISTORY_ID=@V_OldAdmAppRegHistoryId  

		DECLARE @V_UpdateAdmAppRegHistoryId numeric(18, 0)
		 SELECT @V_UpdateAdmAppRegHistoryId = ISNULL(MAX(ADM_APP_REG_HISTORY_ID), 0) + 1 FROM [dbo].[ADM_APP_REG_HISTORY];			
		 INSERT INTO [dbo].[ADM_APP_REG_HISTORY]
							(
							 ADM_APP_REG_HISTORY_ID,
							 ADM_APPLICANT_ID, 
							 APP_DATE,
							 ED_ACAD_YEAR_ID,
							 ED_CODE_SEMESTER_ID,
							 CURRENT_FLG, 
							 AS_CODE_DEGREE_CLASS_ID)
						VALUES
							(
							@V_UpdateAdmAppRegHistoryId
							,@AdmApplicantId
							,getdate()
							,@AcadYear
							,@SemId
							,1
							,@AsCodeDegreeClassId)
			
		DECLARE @V_UpdateAdmAppRegStausHistoryId numeric(18, 0)
		 SELECT @V_UpdateAdmAppRegStausHistoryId = ISNULL(MAX(ADM_APP_REG_STATUS_HISTORY_ID), 0) + 1 FROM [dbo].[ADM_APP_REG_STATUS_HISTORY];			
		 INSERT INTO [dbo].[ADM_APP_REG_STATUS_HISTORY]
						  (ADM_APP_REG_STATUS_HISTORY_ID,
						   ADM_APP_REG_HISTORY_ID, 
						   ADM_CDE_STATUS_ID,
						   SE_USER_ID,
						   ACTION_DATE,
						  CURRENT_FLG)
                      
			VALUES      
					 ( @V_UpdateAdmAppRegStausHistoryId,
					   @V_UpdateAdmAppRegHistoryId,
					   @AdmCdeStatusId,
					   @SeUserId,
					   GETDATE(),
					   1)
	END
	
									
	COMMIT TRANSACTION [Tran1]
	END TRY

	BEGIN CATCH
	  ROLLBACK TRANSACTION [Tran1]
	END CATCH  
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="O_ED_OFFERING_COURSE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@OriginalEdOfferingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@OnlineFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@MinAttendNo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AllowAllFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <!--<parameter name="@IsResultApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>-->
        <parameter name="@AllSessionNo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@MaxStudCount" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_OFFERING_COURSE]
				SET
					[ED_OFFERING_COURSE_ID] = @EdOfferingCourseId
					,[ED_COURSE_ID] = @EdCourseId
					,[ED_OFFERING_ID] = @EdOfferingId
					,[AUDIT_FLG] = @AuditFlg
					,[ONLINE_FLG] = @OnlineFlg
					,[MIN_ATTEND_NO] = @MinAttendNo
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[IS_APPROVED] = @IsApproved
					,[ALLOW_ALL_FLG] = @AllowAllFlg
					--,[IS_RESULT_APPROVED] = @IsResultApproved
					,[ALL_SESSION_NO] = @AllSessionNo
					,[MAX_STUD_COUNT] = @MaxStudCount
					,[LAST_DATE] = @LastDate
					,[SE_FORM_ID] = @SeFormId
					,[SE_USER_ID] = @SeUserId
				WHERE
[ED_OFFERING_COURSE_ID] = @EdOfferingCourseId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_TRAIN_STUD_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_TRAIN_STUD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdTrainStudId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdTrainingId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SupComment" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
								
				if not exists(select '' from ED_TRAIN_STUD where ED_TRAIN_STUD.ED_STUD_ID = @EdStudId and ED_TRAIN_STUD.ED_TRAINING_ID = @EdTrainingId)
        begin

	        DECLARE @V_EdTrainStudId numeric(7, 0), @acadYearId numeric(9, 0), @EdCodeSemesterId numeric(9, 0), @Ed_Course_Id numeric(9, 0);
	        SELECT @V_EdTrainStudId = ISNULL(MAX(ED_TRAIN_STUD_ID), 0) + 1 FROM [dbo].[ED_TRAIN_STUD];

          SELECT @acadYearId = ED_ACAD_YEAR_ID, @EdCodeSemesterId = ED_CODE_SEMESTER_ID FROM dbo.ED_TRAINING
          WHERE ED_TRAINING.ED_TRAINING_ID = @EdTrainingId;
            
          SELECT @Ed_Course_Id = ED_COURSE.ED_COURSE_ID
          FROM ED_STUD_COURSE_REG INNER JOIN
               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
          WHERE (ED_COURSE.ED_CODE_COURSE_ID = 1) 
          AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
          AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @acadYearId) 
          AND (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)

	        INSERT INTO [dbo].[ED_TRAIN_STUD]
		        (
		        [ED_TRAIN_STUD_ID]
		        ,[ED_TRAINING_ID]
		        ,[ED_STUD_ID]
		        ,[ED_COURSE_ID]
		        ,[SUP_COMMENT]
		        )
	        VALUES
		        (
		        @V_EdTrainStudId
		        ,@EdTrainingId
		        ,@EdStudId
		        ,@Ed_Course_Id
		        ,@SupComment
		        )
        		
        end
        else
        BEGIN
            RAISERROR('Data-Repeated', 16, -1);
        END					
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_TRAINING_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_TRAINING table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdTrainingId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsCdeTrainSite" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@MaxStudNo" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@StartDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@PeriodMonth" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@PeriodDay" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
        if not exists(select '' from ED_TRAINING where ED_TRAINING.ED_ACAD_YEAR_ID = @EdAcadYearId and 
            ED_TRAINING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and ED_TRAINING.GS_CDE_TRAIN_SITE = @GsCdeTrainSite)
        begin
        
				  DECLARE @V_EdTrainingId numeric(9, 0)
				  SELECT @V_EdTrainingId = ISNULL(MAX(ED_TRAINING_ID), 0) + 1 FROM [dbo].[ED_TRAINING];
  				
				  INSERT INTO [dbo].[ED_TRAINING]
					  (
					  [ED_TRAINING_ID]
					  ,[ED_ACAD_YEAR_ID]
					  ,[ED_CODE_SEMESTER_ID]
					  ,[GS_CDE_TRAIN_SITE]
					  ,[MAX_STUD_NO]
					  ,[START_DATE]
					  ,[PERIOD_MONTH]
					  ,[PERIOD_DAY]
					  )
				  VALUES
					  (
					  @V_EdTrainingId
					  ,@EdAcadYearId
					  ,@EdCodeSemesterId
					  ,@GsCdeTrainSite
					  ,@MaxStudNo
					  ,@StartDate
					  ,@PeriodMonth
					  ,@PeriodDay
					  );
            
            set @EdTrainingId = @V_EdTrainingId;
          end
          else
            raiserror('Data-Repeated', 16, -1);
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_TRAINING_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_TRAINING table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdTrainingId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				if Not Exists(select '' from ED_TRAIN_STUD where ED_TRAIN_STUD.ED_TRAINING_ID = @EdTrainingId)
        begin
	        delete from ED_TRAIN_SUPERVISOR where [ED_TRAINING_ID] = @EdTrainingId;
        	
	        DELETE FROM [dbo].[ED_TRAINING] WITH (ROWLOCK) 
	        WHERE
	        [ED_TRAINING_ID] = @EdTrainingId;	
        end
        else
	        raiserror('Some Students Still Related To This Training', 16, -1);
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_PROJ_SUPERVISOR_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_PROJ_SUPERVISOR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdProjSupervisorId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdProjectId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				IF NOT EXISTS(SELECT '' FROM ED_PROJ_SUPERVISOR WHERE ED_PROJ_SUPERVISOR.ED_PROJECT_ID = @EdProjectId AND SA_STF_MEMBER_ID = @SaStfMemberId)
        BEGIN
	        DECLARE @V_EdProjSupervisorId numeric(9, 0)
	        SELECT @V_EdProjSupervisorId = ISNULL(MAX(ED_PROJ_SUPERVISOR_ID), 0) + 1 FROM [dbo].[ED_PROJ_SUPERVISOR];

	        INSERT INTO [dbo].[ED_PROJ_SUPERVISOR]
		        (
		        [ED_PROJ_SUPERVISOR_ID]
		        ,[ED_PROJECT_ID]
		        ,[SA_STF_MEMBER_ID]
		        )
	        VALUES
		        (
		        @V_EdProjSupervisorId
		        ,@EdProjectId
		        ,@SaStfMemberId
		        )
        END
        ELSE
        BEGIN
	        RAISERROR('Data_Repeated', 16, -1);
        END
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_PROJ_STUD_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_PROJ_STUD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdProjStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdProjectId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @acadYearId numeric(9, 0), @EdCodeSemesterId numeric(9, 0), @Ed_Course_Id numeric(9, 0);

        SELECT @acadYearId = ED_ACAD_YEAR_ID, @EdCodeSemesterId = ED_CODE_SEMESTER_ID FROM dbo.ED_PROJECT
        WHERE dbo.ED_PROJECT.ED_PROJECT_ID = @EdProjectId;

        IF NOT EXISTS(SELECT '' FROM ED_PROJECT JOIN ED_PROJ_STUD ON ED_PROJECT.ED_PROJECT_ID = ED_PROJ_STUD.ED_PROJECT_ID WHERE 
        ED_ACAD_YEAR_ID = @acadYearId AND ED_CODE_SEMESTER_ID = @EdCodeSemesterId AND ED_STUD_ID = @EdStudId)
        BEGIN
        	
	        DECLARE @V_EdProjStudId numeric(9, 0)
	        SELECT @V_EdProjStudId = ISNULL(MAX(ED_PROJ_STUD_ID), 0) + 1 FROM [dbo].[ED_PROJ_STUD];

	        SELECT @Ed_Course_Id = ED_COURSE.ED_COURSE_ID
	        FROM ED_STUD_COURSE_REG INNER JOIN
		         ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
		         ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
	        WHERE (ED_COURSE.ED_CODE_COURSE_ID = 2) 
	        AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
	        AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @acadYearId) 
	        AND (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)


	        INSERT INTO [dbo].[ED_PROJ_STUD]
		        (
		        [ED_PROJ_STUD_ID]
		        ,[ED_PROJECT_ID]
		        ,[ED_STUD_ID]
		        ,[ED_COURSE_ID]
		        )
	        VALUES
		        (
		        @V_EdProjStudId
		        ,@EdProjectId
		        ,@EdStudId
		        ,@Ed_Course_Id
		        )
        	
        END
        ELSE
        BEGIN
	        RAISERROR('Data-Repeated', 16, -1);
        END
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_PROJECT_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_PROJECT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdProjectId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
				IF NOT EXISTS(SELECT '' FROM ED_PROJECT WHERE (DESCR_AR = @DescrAr OR DESCR_EN = @DescrEn) AND ED_ACAD_YEAR_ID = @EdAcadYearId AND ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
        BEGIN
	        DECLARE @V_EdProjectId numeric(9, 0);
	        SELECT @V_EdProjectId = ISNULL(MAX(ED_PROJECT_ID), 0) + 1 FROM [dbo].[ED_PROJECT];

	        INSERT INTO [dbo].[ED_PROJECT]
		        (
		        [ED_PROJECT_ID]
		        ,[ENT_MAIN_ID]
		        ,[ED_ACAD_YEAR_ID]
		        ,[ED_CODE_SEMESTER_ID]
		        ,[DESCR_AR]
		        ,[DESCR_EN]
		        )
	        VALUES
		        (
		        @V_EdProjectId
		        ,@EntMainId
		        ,@EdAcadYearId
		        ,@EdCodeSemesterId
		        ,@DescrAr
		        ,@DescrEn
		        );
        END
        ELSE
        BEGIN
	        RAISERROR('Ed_Project_Repeat',16,-1)
        END
							
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_PROJECT_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_PROJECT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdProjectId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalEdProjectId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				IF NOT EXISTS(SELECT '' FROM ED_PROJECT WHERE ED_PROJECT_ID != @EdProjectId AND (DESCR_AR = @DescrAr OR DESCR_EN = @DescrEn) AND ED_ACAD_YEAR_ID = @EdAcadYearId AND ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
        BEGIN
	        -- Modify the updatable columns
	        UPDATE
		        [dbo].[ED_PROJECT]
	        SET
		        [ED_PROJECT_ID] = @EdProjectId
		        ,[ENT_MAIN_ID] = @EntMainId
		        ,[ED_ACAD_YEAR_ID] = @EdAcadYearId
		        ,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
		        ,[DESCR_AR] = @DescrAr
		        ,[DESCR_EN] = @DescrEn
	        WHERE
	        [ED_PROJECT_ID] = @EdProjectId 
        END
        ELSE
        BEGIN
	        RAISERROR('Ed_Project_Repeat',16,-1)
        END
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_CDE_TCHNG_MTHD_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CDE_TCHNG_MTHD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCdeTchngMthdId" type="numeric" direction="Input" size="4" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdCdeTchngMthdId numeric(4, 0)
				SELECT @V_EdCdeTchngMthdId = ISNULL(MAX(ED_CDE_TCHNG_MTHD_ID), 0) + 1 FROM [dbo].[ED_CDE_TCHNG_MTHD];
				
				INSERT INTO [dbo].[ED_CDE_TCHNG_MTHD]
					(
					[ED_CDE_TCHNG_MTHD_ID]
					,[DESCR_EN]
					,[DESCR_AR]
					)
				VALUES
					(
					@V_EdCdeTchngMthdId
					,@DescrEn
					,@DescrAr
					)
				
					SET @EdCdeTchngMthdId	= @V_EdCdeTchngMthdId
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_GetByAsFacultyInfoId" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SELECT
					*
				FROM
					[dbo].[ED_COURSE]
				WHERE
					(@AsFacultyInfoId=0 and [AS_FACULTY_INFO_ID] is NULL) or [AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				SELECT @@ROWCOUNT
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="U_SC_BUILDING_Find" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SC_BUILDING table passing nullable parameters
-- Table Comment: جدول مبانى الكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@BuildCode" type="nvarchar" direction="Input" size="9" precision="0" scale="0" param="(9)" nulldefault="null"/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@GsCdeCampusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
				
IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SC_BUILDING_ID]
	, [BUILD_CODE]
	, [DESCR_AR]
	, [DESCR_EN]
	, [AS_FACULTY_INFO_ID]
	, [GS_CDE_CAMPUS_ID]
    FROM
	[dbo].[SC_BUILDING]
    WHERE 
	 ([SC_BUILDING_ID] = @ScBuildingId OR @ScBuildingId IS NULL)
	AND ([BUILD_CODE] = @BuildCode OR @BuildCode IS NULL)
	AND ([DESCR_AR] = @DescrAr OR @DescrAr IS NULL)
	AND ([DESCR_EN] = @DescrEn OR @DescrEn IS NULL)
	AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR ((@AsFacultyInfoId IS NULL or @AsFacultyInfoId=0)and [AS_FACULTY_INFO_ID] IS NULL))
	AND ([GS_CDE_CAMPUS_ID] = @GsCdeCampusId OR @GsCdeCampusId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SC_BUILDING_ID]
	, [BUILD_CODE]
	, [DESCR_AR]
	, [DESCR_EN]
	, [AS_FACULTY_INFO_ID]
	, [GS_CDE_CAMPUS_ID]
    FROM
	[dbo].[SC_BUILDING]
    WHERE 
	 ([SC_BUILDING_ID] = @ScBuildingId AND @ScBuildingId is not null)
	OR ([BUILD_CODE] = @BuildCode AND @BuildCode is not null)
	OR ([DESCR_AR] = @DescrAr AND @DescrAr is not null)
	OR ([DESCR_EN] = @DescrEn AND @DescrEn is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR ((@AsFacultyInfoId IS NULL or @AsFacultyInfoId=0)and [AS_FACULTY_INFO_ID] IS NULL))
	OR ([GS_CDE_CAMPUS_ID] = @GsCdeCampusId AND @GsCdeCampusId is not null)
	SELECT @@ROWCOUNT			
  END
			
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_EQUIV_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina Mostafa)
-- Purpose: Inserts a record into the ED_COURSE_EQUIV table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseEquivId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@EdEquivCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdCourseEquivId numeric(4, 0)
				SELECT @V_EdCourseEquivId = ISNULL(MAX(ED_COURSE_EQUIV_ID), 0) + 1 FROM [dbo].[ED_COURSE_EQUIV];
				
          if not exists (select * from [dbo].[ED_COURSE_EQUIV] where ED_EQUIV_COURSE_ID=@EdEquivCourseId
         and ED_COURSE_ID=@EdCourseId )
           begin
				INSERT INTO [dbo].[ED_COURSE_EQUIV]
					(
					[ED_COURSE_EQUIV_ID]
					,[ED_EQUIV_COURSE_ID]
					,[ED_COURSE_ID]
					)
				VALUES
					(
					@V_EdCourseEquivId
					,@EdEquivCourseId
					,@EdCourseId
					)
				end
        else 
           begin
             RAISERROR('ERR_Course_REPEAT',16,-1)
              RETURN 
           end
        
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_STUD_QUAL_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_QUAL table
-- Table Comment: جدول البيانات الرئيسية لمؤهلات الطلاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudQualId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalEdStudQualId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SchoolName" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
        <parameter name="@QualDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@TotalDegree" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@TotalPercent" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StudSeatNum" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdCdeQualBrnId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@GsCdeSchoolId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				if (@QualDate ='01/01/1800')
        set @QualDate=null;
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_QUAL]
				SET
					[ED_STUD_QUAL_ID] = @EdStudQualId
					,[ED_STUD_ID] = @EdStudId
					,[ED_CODE_QUAL_ID] = @EdCodeQualId
					,[SCHOOL_NAME] = @SchoolName
					,[QUAL_DATE] = @QualDate
					,[TOTAL_DEGREE] = @TotalDegree
					,[TOTAL_PERCENT] = @TotalPercent
					,[GS_COUNTRY_NODE_ID] = @GsCountryNodeId
					,[STUD_SEAT_NUM] = @StudSeatNum
					,[ADM_APPLICANT_ID] = @AdmApplicantId
					,[ED_CDE_QUAL_BRN_ID] = @EdCdeQualBrnId
					,[GS_CDE_SCHOOL_ID] = @GsCdeSchoolId
				WHERE
[ED_STUD_QUAL_ID] = @EdStudQualId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_STUD_QUAL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_QUAL table
-- Table Comment: جدول البيانات الرئيسية لمؤهلات الطلاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudQualId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SchoolName" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
        <parameter name="@QualDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@TotalDegree" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@TotalPercent" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StudSeatNum" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdCdeQualBrnId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@GsCdeSchoolId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdStudQualId numeric(9, 0)
				SELECT @V_EdStudQualId = ISNULL(MAX(ED_STUD_QUAL_ID), 0) + 1 FROM [dbo].[ED_STUD_QUAL];
					if (@QualDate ='01/01/1800')
        set @QualDate=null;
        
				INSERT INTO [dbo].[ED_STUD_QUAL]
					(
					[ED_STUD_QUAL_ID]
					,[ED_STUD_ID]
					,[ED_CODE_QUAL_ID]
					,[SCHOOL_NAME]
					,[QUAL_DATE]
					,[TOTAL_DEGREE]
					,[TOTAL_PERCENT]
					,[GS_COUNTRY_NODE_ID]
					,[STUD_SEAT_NUM]
					,[ADM_APPLICANT_ID]
					,[ED_CDE_QUAL_BRN_ID]
					,[GS_CDE_SCHOOL_ID]
					)
				VALUES
					(
					@V_EdStudQualId
					,@EdStudId
					,@EdCodeQualId
					,@SchoolName
					,@QualDate
					,@TotalDegree
					,@TotalPercent
					,@GsCountryNodeId
					,@StudSeatNum
					,@AdmApplicantId
					,@EdCdeQualBrnId
					,@GsCdeSchoolId
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_Find" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE table passing nullable parameters
-- Table Comment: جدول المواد الدراسية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="null"/>
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null"/>
        <parameter name="@CourseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null"/>
        <parameter name="@CreditHours" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null"/>
        <parameter name="@CourseContentsAr" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault="null"/>
        <parameter name="@CourseContentsEn" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault="null"/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@AllPrereqFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null"/>
        <parameter name="@NoPrereq" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null"/>
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null"/>
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@PrereqCodeExp" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="null"/>
        <parameter name="@PrereqIdExp" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="null"/>
        <parameter name="@GsCourseElectTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null"/>
        <parameter name="@ElectFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
		if(	@AsFacultyInfoId =0)
set @AsFacultyInfoId =null

if(@EntMainId=-1)
set @EntMainId=null

  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_COURSE_ID]
	, [ED_CODE_COURSE_ID]
	, [COURSE_CODE]
	, [COURSE_DESCR_AR]
	, [COURSE_DESCR_EN]
	, [CREDIT_HOURS]
	, [COURSE_CONTENTS_AR]
	, [COURSE_CONTENTS_EN]
	, [ENT_MAIN_ID]
	, [ALL_PREREQ_FLG]
	, [NO_PREREQ]
	, [GS_CODE_LANGUAGE_ID]
	, [AS_FACULTY_INFO_ID]
	, [IS_ACTIVE]
	, [ED_CODE_COURSE_CASE_ID]
	, [ED_BYLAW_ID]
	, [PREREQ_CODE_EXP]
	, [PREREQ_ID_EXP]
	, [GS_COURSE_ELECT_TYPE_ID]
	, [ELECT_FLG]
    FROM
	[dbo].[ED_COURSE]
    WHERE 
	 ([ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
	AND ([ED_CODE_COURSE_ID] = @EdCodeCourseId OR @EdCodeCourseId IS NULL)
	AND ([COURSE_CODE] like @CourseCode OR @CourseCode IS NULL)
	AND ([COURSE_DESCR_AR] like @CourseDescrAr OR @CourseDescrAr IS NULL)
	AND ([COURSE_DESCR_EN] like @CourseDescrEn OR @CourseDescrEn IS NULL)
	AND ([CREDIT_HOURS] = @CreditHours OR @CreditHours IS NULL)
	AND ([COURSE_CONTENTS_AR] = @CourseContentsAr OR @CourseContentsAr IS NULL)
	AND ([COURSE_CONTENTS_EN] = @CourseContentsEn OR @CourseContentsEn IS NULL)
	AND ([ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
	AND ([ALL_PREREQ_FLG] = @AllPrereqFlg OR @AllPrereqFlg IS NULL)
	AND ([NO_PREREQ] = @NoPrereq OR @NoPrereq IS NULL)
	AND ([GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId OR @GsCodeLanguageId IS NULL)
	AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
	AND ([IS_ACTIVE] = @IsActive OR @IsActive IS NULL)
	AND ([ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId OR @EdCodeCourseCaseId IS NULL)
	AND ([ED_BYLAW_ID] = @EdBylawId OR @EdBylawId IS NULL)
	AND ([PREREQ_CODE_EXP] = @PrereqCodeExp OR @PrereqCodeExp IS NULL)
	AND ([PREREQ_ID_EXP] = @PrereqIdExp OR @PrereqIdExp IS NULL)
	AND ([GS_COURSE_ELECT_TYPE_ID] = @GsCourseElectTypeId OR @GsCourseElectTypeId IS NULL)
	AND ([ELECT_FLG] = @ElectFlg OR @ElectFlg IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_COURSE_ID]
	, [ED_CODE_COURSE_ID]
	, [COURSE_CODE]
	, [COURSE_DESCR_AR]
	, [COURSE_DESCR_EN]
	, [CREDIT_HOURS]
	, [COURSE_CONTENTS_AR]
	, [COURSE_CONTENTS_EN]
	, [ENT_MAIN_ID]
	, [ALL_PREREQ_FLG]
	, [NO_PREREQ]
	, [GS_CODE_LANGUAGE_ID]
	, [AS_FACULTY_INFO_ID]
	, [IS_ACTIVE]
	, [ED_CODE_COURSE_CASE_ID]
	, [ED_BYLAW_ID]
	, [PREREQ_CODE_EXP]
	, [PREREQ_ID_EXP]
	, [GS_COURSE_ELECT_TYPE_ID]
	, [ELECT_FLG]
    FROM
	[dbo].[ED_COURSE]
    WHERE 
	 ([ED_COURSE_ID] = @EdCourseId AND @EdCourseId is not null)
	OR ([ED_CODE_COURSE_ID] = @EdCodeCourseId AND @EdCodeCourseId is not null)
	OR ([COURSE_CODE] = @CourseCode AND @CourseCode is not null)
	OR ([COURSE_DESCR_AR] = @CourseDescrAr AND @CourseDescrAr is not null)
	OR ([COURSE_DESCR_EN] = @CourseDescrEn AND @CourseDescrEn is not null)
	OR ([CREDIT_HOURS] = @CreditHours AND @CreditHours is not null)
	OR ([COURSE_CONTENTS_AR] = @CourseContentsAr AND @CourseContentsAr is not null)
	OR ([COURSE_CONTENTS_EN] = @CourseContentsEn AND @CourseContentsEn is not null)
	OR ([ENT_MAIN_ID] = @EntMainId AND @EntMainId is not null)
	OR ([ALL_PREREQ_FLG] = @AllPrereqFlg AND @AllPrereqFlg is not null)
	OR ([NO_PREREQ] = @NoPrereq AND @NoPrereq is not null)
	OR ([GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId AND @GsCodeLanguageId is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	OR ([IS_ACTIVE] = @IsActive AND @IsActive is not null)
	OR ([ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId AND @EdCodeCourseCaseId is not null)
	OR ([ED_BYLAW_ID] = @EdBylawId AND @EdBylawId is not null)
	OR ([PREREQ_CODE_EXP] = @PrereqCodeExp AND @PrereqCodeExp is not null)
	OR ([PREREQ_ID_EXP] = @PrereqIdExp AND @PrereqIdExp is not null)
	OR ([GS_COURSE_ELECT_TYPE_ID] = @GsCourseElectTypeId AND @GsCourseElectTypeId is not null)
	OR ([ELECT_FLG] = @ElectFlg AND @ElectFlg is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_SC_HALL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SC_HALL table
-- Table Comment: جدول بيانات القاعات الدراسية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@HallCode" type="nvarchar" direction="Input" size="9" precision="0" scale="0" param="(9)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@Capacity" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@IsShared" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@ExmCapcity" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_ScHallId numeric(5, 0)
				SELECT @V_ScHallId = ISNULL(MAX(SC_HALL_ID), 0) + 1 FROM [dbo].[SC_HALL];
				
        declare @AsFacultyInfoId numeric
				select @AsFacultyInfoId= AS_FACULTY_INFO_ID from SC_BUILDING where SC_BUILDING.SC_BUILDING_ID=@ScBuildingId;
				
        if not exists (select 1 from SC_HALL , SC_BUILDING where SC_HALL.SC_BUILDING_ID=SC_BUILDING.SC_BUILDING_ID
        and (SC_BUILDING.AS_FACULTY_INFO_ID=@AsFacultyInfoId or (SC_BUILDING.AS_FACULTY_INFO_ID is null)) and HALL_CODE = @HallCode and SC_BUILDING.SC_BUILDING_ID=@ScBuildingId)
        begin
        
				INSERT INTO [dbo].[SC_HALL]
					(
					[SC_HALL_ID]
					,[SC_BUILDING_ID]
					,[HALL_CODE]
					,[DESCR_AR]
					,[CAPACITY]
					,[IS_SHARED]
					,[IS_ACTIVE]
					,[DESCR_EN]
					,[EXM_CAPCITY]
					)
				VALUES
					(
					@V_ScHallId
					,@ScBuildingId
					,@HallCode
					,@DescrAr
					,@Capacity
					,@IsShared
					,@IsActive
					,@DescrEn
					,@ExmCapcity
					)
				end
        else
        begin
				
         RAISERROR('Don not repeate Hall Code',16,-1)
         RETURN 
            
        end
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_SC_HALL_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SC_HALL table
-- Table Comment: جدول بيانات القاعات الدراسية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@OriginalScHallId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@HallCode" type="nvarchar" direction="Input" size="9" precision="0" scale="0" param="(9)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@Capacity" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@IsShared" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@ExmCapcity" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
        if not exists (select 1 from SC_HALL where HALL_CODE = @HallCode and SC_HALL_ID <> @ScHallId)
        begin
        
				-- Modify the updatable columns
				UPDATE
					[dbo].[SC_HALL]
				SET
					[SC_HALL_ID] = @ScHallId
					,[SC_BUILDING_ID] = @ScBuildingId
					,[HALL_CODE] = @HallCode
					,[DESCR_AR] = @DescrAr
					,[CAPACITY] = @Capacity
					,[IS_SHARED] = @IsShared
					,[IS_ACTIVE] = @IsActive
					,[DESCR_EN] = @DescrEn
					,[EXM_CAPCITY] = @ExmCapcity
				WHERE
[SC_HALL_ID] = @ScHallId 
				
        end
        else
        begin
				
         RAISERROR('Don not repeate Hall Code',16,-1)
         RETURN 
            
        end
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ADM_APP_DOC_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_DOC table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppDocId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AdmReqDocId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@SubmitDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@AppDocPath" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_AdmAppDocId numeric(7, 0)
				SELECT @V_AdmAppDocId = ISNULL(MAX(ADM_APP_DOC_ID), 0) + 1 FROM [dbo].[ADM_APP_DOC];
				
				if not exists(select * from [ADM_APP_DOC]  where [ADM_APPLICANT_ID]=@AdmApplicantId
and ADM_REQ_DOC_ID=@AdmReqDocId)
begin
				
				INSERT INTO [dbo].[ADM_APP_DOC]
					(
					[ADM_APP_DOC_ID]
					,[ADM_APPLICANT_ID]
					,[ADM_REQ_DOC_ID]
					,[SUBMIT_DATE]
					,[APP_DOC_PATH]
					)
				VALUES
					(
					@V_AdmAppDocId
					,@AdmApplicantId
					,@AdmReqDocId
					,@SubmitDate
					,@AppDocPath
					)
				end	
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ADM_APP_DOC_GetByAdmApplicantId" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (dalia farouk)
-- Purpose: Select records from the ADM_APP_DOC table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ADM_APP_DOC].[ADM_APP_DOC_ID],
					[ADM_APP_DOC].[ADM_APPLICANT_ID],
					[ADM_APP_DOC].[ADM_REQ_DOC_ID],
					[ADM_APP_DOC].[SUBMIT_DATE],
					[ADM_APP_DOC].[APP_DOC_PATH],
					ADM_REQ_DOC.DESCR_AR,ADM_REQ_DOC.DESCR_EN
					
          
				FROM
					[dbo].[ADM_APP_DOC] inner join dbo.ADM_REQ_DOC 
					on ADM_APP_DOC.ADM_REQ_DOC_ID=ADM_REQ_DOC.ADM_REQ_DOC_ID
				WHERE
					[ADM_APPLICANT_ID] = @AdmApplicantId
				SELECT @@ROWCOUNT
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="U_SA_STF_MEMBER_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SA_STF_MEMBER table
-- Table Comment: البيانات الشخصية لعضو هيئة التدريس والهيئة المعاونة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@StfCode" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@StfFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StfFullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@AsNodeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SaCodeJobStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SaCodeScDegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@StfNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StfClNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfLnameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@StfClLnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfFnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfLnameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@StfIsAzhary" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@FileNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StfStatusNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StfNationalIdNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@StfDob" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@StfRegNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StfRegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@StfMname" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@StfPermAdd" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
        <parameter name="@StfCurrAdd" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
        <parameter name="@StfEmpDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsCodeMaritalStateId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId2" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId3" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsContactMethodHId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@StfPhoto" type="nvarchar" direction="Input" size="300" precision="0" scale="0" param="(300)" nulldefault=""/>
        <parameter name="@BasicSalary" type="numeric" direction="Input" size="5" precision="6" scale="2" param="(6, 2)" nulldefault=""/>
        <parameter name="@PgThesisGeneralSpecId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@PgThesisDetailedSpecId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DelFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RetirmentAge" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@OldStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EmailPassword" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
        <parameter name="@TelNum" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@MobNum" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GsCodeIdentTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_SaStfMemberId numeric(6, 0)
				SELECT @V_SaStfMemberId = ISNULL(MAX(SA_STF_MEMBER_ID), 0) + 1 FROM [dbo].[SA_STF_MEMBER];
        
        declare @BirthDate datetime = '2000-01-01' 
        if(@StfDob is not null)
          set @BirthDate=@StfDob;
        declare @YearPart  varchar(5)
        set @YearPart=year(@BirthDate)
        
        if(@StfNationalIdNum=0)
set @StfNationalIdNum=null

if(@GsCodeReligionId=0)
set @GsCodeReligionId=null
if(@GsCodeGenderId=0)
set @GsCodeGenderId=null
if(@GsContactMethodHId=0)
set
@GsContactMethodHId=null

if(@PgThesisGeneralSpecId=0)
set
@PgThesisGeneralSpecId=null
if(@PgThesisDetailedSpecId=0)
set
@PgThesisDetailedSpecId=null
if(@GsCodeIdentTypeId=0)
set
@GsCodeIdentTypeId=null

if(@AsFacultyInfoId = 0)
begin
set @AsFacultyInfoId=null
SELECT @AsNodeId=ent_main_id FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID=1
end

if(@AsFacultyInfoId is not null and @AsNodeId = 0)
begin
SELECT @AsNodeId=ent_main_id FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID=2 and AS_FACULTY_INFO_ID = @AsFacultyInfoId
end

				exec [dbo].[sp_Generate_Staff_Code] @StfCode output,@AsFacultyInfoId,@YearPart
				INSERT INTO [dbo].[SA_STF_MEMBER]
					(
					[SA_STF_MEMBER_ID]
					,[STF_CODE]
					,[STF_FULL_NAME_AR]
					,[STF_FULL_NAME_EN]
					,[AS_NODE_ID]
					,[AS_FACULTY_INFO_ID]
					,[SA_CODE_JOB_STATUS_ID]
					,[SA_CODE_SC_DEG_ID]
					,[STF_NAME_AR]
					,[STF_CL_FULL_NAME_AR]
					,[STF_CL_NAME_AR]
					,[STF_LNAME_AR]
					,[STF_CL_LNAME_AR]
					,[STF_FNAME_EN]
					,[STF_LNAME_EN]
					,[STF_IS_AZHARY]
					,[FILE_NUM]
					,[STF_STATUS_NUM]
					,[STF_NATIONAL_ID_NUM]
					,[STF_DOB]
					,[STF_REG_NUM]
					,[STF_REG_DATE]
					,[STF_MNAME]
					,[STF_PERM_ADD]
					,[STF_CURR_ADD]
					,[STF_EMP_DATE]
					,[GS_CODE_GENDER_ID]
					,[GS_CODE_RELIGION_ID]
					,[GS_CODE_MARITAL_STATE_ID]
					,[GS_COUNTRY_INFO_ID]
					,[GS_COUNTRY_INFO_ID2]
					,[GS_COUNTRY_NODE_ID]
					,[GS_COUNTRY_NODE_ID2]
					,[GS_COUNTRY_NODE_ID3]
					,[GS_CONTACT_METHOD_H_ID]
					,[STF_PHOTO]
					,[BASIC_SALARY]
					,[PG_THESIS_GENERAL_SPEC_ID]
					,[PG_THESIS_DETAILED_SPEC_ID]
					,[DEL_FLAG]
					,[RETIRMENT_AGE]
					,[OLD_STF_MEMBER_ID]
					,[EMAIL_PASSWORD]
					,[TEL_NUM]
					,[MOB_NUM]
					,[E_MAIL]
					,[GS_CODE_IDENT_TYPE_ID]
					)
				VALUES
					(
					@V_SaStfMemberId
					,@StfCode
					,@StfFullNameAr
					,@StfFullNameEn
					,@AsNodeId
					,@AsFacultyInfoId
					,@SaCodeJobStatusId
					,@SaCodeScDegId
					,@StfNameAr
					,@StfClFullNameAr
					,@StfClNameAr
					,@StfLnameAr
					,@StfClLnameAr
					,@StfFnameEn
					,@StfLnameEn
					,@StfIsAzhary
					,@FileNum
					,@StfStatusNum
					,@StfNationalIdNum
					,@StfDob
					,@StfRegNum
					,@StfRegDate
					,@StfMname
					,@StfPermAdd
					,@StfCurrAdd
					,@StfEmpDate
					,@GsCodeGenderId
					,@GsCodeReligionId
					,@GsCodeMaritalStateId
					,@GsCountryInfoId
					,@GsCountryInfoId2
					,@GsCountryNodeId
					,@GsCountryNodeId2
					,@GsCountryNodeId3
					,@GsContactMethodHId
					,@StfPhoto
					,@BasicSalary
					,@PgThesisGeneralSpecId
					,@PgThesisDetailedSpecId
					,@DelFlag
					,@RetirmentAge
					,@OldStfMemberId
					,@EmailPassword
					,@TelNum
					,@MobNum
					,@EMail
					,@GsCodeIdentTypeId
					)
				
							set @SaStfMemberId = @V_SaStfMemberId;
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_SA_STF_MEMBER_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SA_STF_MEMBER table
-- Table Comment: البيانات الشخصية لعضو هيئة التدريس والهيئة المعاونة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@OriginalSaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@StfCode" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@StfFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StfFullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@AsNodeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SaCodeJobStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SaCodeScDegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@StfNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StfClNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfLnameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@StfClLnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfFnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@StfLnameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@StfIsAzhary" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@FileNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StfStatusNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StfNationalIdNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@StfDob" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@StfRegNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StfRegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@StfMname" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@StfPermAdd" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
        <parameter name="@StfCurrAdd" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
        <parameter name="@StfEmpDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsCodeMaritalStateId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId2" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId3" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsContactMethodHId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@StfPhoto" type="nvarchar" direction="Input" size="300" precision="0" scale="0" param="(300)" nulldefault=""/>
        <parameter name="@BasicSalary" type="numeric" direction="Input" size="5" precision="6" scale="2" param="(6, 2)" nulldefault=""/>
        <parameter name="@PgThesisGeneralSpecId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@PgThesisDetailedSpecId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DelFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RetirmentAge" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@OldStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EmailPassword" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
        <parameter name="@TelNum" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@MobNum" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GsCodeIdentTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				if(@AsFacultyInfoId = 0)
begin
set @AsFacultyInfoId=null
end
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SA_STF_MEMBER]
				SET
					[SA_STF_MEMBER_ID] = @SaStfMemberId
					,[STF_CODE] = @StfCode
					,[STF_FULL_NAME_AR] = @StfFullNameAr
					,[STF_FULL_NAME_EN] = @StfFullNameEn
					,[AS_NODE_ID] = @AsNodeId
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[SA_CODE_JOB_STATUS_ID] = @SaCodeJobStatusId
					,[SA_CODE_SC_DEG_ID] = @SaCodeScDegId
					,[STF_NAME_AR] = @StfNameAr
					,[STF_CL_FULL_NAME_AR] = @StfClFullNameAr
					,[STF_CL_NAME_AR] = @StfClNameAr
					,[STF_LNAME_AR] = @StfLnameAr
					,[STF_CL_LNAME_AR] = @StfClLnameAr
					,[STF_FNAME_EN] = @StfFnameEn
					,[STF_LNAME_EN] = @StfLnameEn
					,[STF_IS_AZHARY] = @StfIsAzhary
					,[FILE_NUM] = @FileNum
					,[STF_STATUS_NUM] = @StfStatusNum
					,[STF_NATIONAL_ID_NUM] = @StfNationalIdNum
					,[STF_DOB] = @StfDob
					,[STF_REG_NUM] = @StfRegNum
					,[STF_REG_DATE] = @StfRegDate
					,[STF_MNAME] = @StfMname
					,[STF_PERM_ADD] = @StfPermAdd
					,[STF_CURR_ADD] = @StfCurrAdd
					,[STF_EMP_DATE] = @StfEmpDate
					,[GS_CODE_GENDER_ID] = @GsCodeGenderId
					,[GS_CODE_RELIGION_ID] = @GsCodeReligionId
					,[GS_CODE_MARITAL_STATE_ID] = @GsCodeMaritalStateId
					,[GS_COUNTRY_INFO_ID] = @GsCountryInfoId
					,[GS_COUNTRY_INFO_ID2] = @GsCountryInfoId2
					,[GS_COUNTRY_NODE_ID] = @GsCountryNodeId
					,[GS_COUNTRY_NODE_ID2] = @GsCountryNodeId2
					,[GS_COUNTRY_NODE_ID3] = @GsCountryNodeId3
					,[GS_CONTACT_METHOD_H_ID] = @GsContactMethodHId
					,[STF_PHOTO] = @StfPhoto
					,[BASIC_SALARY] = @BasicSalary
					,[PG_THESIS_GENERAL_SPEC_ID] = @PgThesisGeneralSpecId
					,[PG_THESIS_DETAILED_SPEC_ID] = @PgThesisDetailedSpecId
					,[DEL_FLAG] = @DelFlag
					,[RETIRMENT_AGE] = @RetirmentAge
					,[OLD_STF_MEMBER_ID] = @OldStfMemberId
					,[EMAIL_PASSWORD] = @EmailPassword
					,[TEL_NUM] = @TelNum
					,[MOB_NUM] = @MobNum
					,[E_MAIL] = @EMail
					,[GS_CODE_IDENT_TYPE_ID] = @GsCodeIdentTypeId
				WHERE
[SA_STF_MEMBER_ID] = @SaStfMemberId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_CODE_GRADING_Get_List" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ED_CODE_GRADING table
-- Table Comment: جدول أكواد التقديرات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters/>
      <body>
        <![CDATA[
				
				SELECT
					[ED_CODE_GRADING_ID],
					[DESCR_AR],
					[DESCR_EN],
					[SYMBOL_AR],
					[SYMBOL_EN],
					[GRAD_ORDER],
					[GRAD_CODE]
				FROM
					[dbo].[ED_CODE_GRADING]
        order by [GRAD_ORDER]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_INTRODUC_METADATA_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_INTRODUC_METADATA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCodeIntroMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntIntroducMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@ObligFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EntIntroducMdId numeric(3, 0)
				SELECT @V_EntIntroducMdId = ISNULL(MAX(ENT_INTRODUC_MD_ID), 0) + 1 FROM [dbo].[ENT_INTRODUC_METADATA];
				
				INSERT INTO [dbo].[ENT_INTRODUC_METADATA]
					(
					[ENT_CODE_INTRO_MD_ID]
					,[ENT_CODE_ENTITY_TYPE_ID]
					,[ENT_INTRODUC_MD_ID]
					,[OBLIG_FLG]
					)
				VALUES
					(
					@EntCodeIntroMdId
					,@EntCodeEntityTypeId
					,@V_EntIntroducMdId
					,@ObligFlg
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_PRECOND_METADATA_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_PRECOND_METADATA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCodePrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntPrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@ObligFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EntPrecondMdId numeric(3, 0)
				SELECT @V_EntPrecondMdId = ISNULL(MAX(ENT_PRECOND_MD_ID), 0) + 1 FROM [dbo].[ENT_PRECOND_METADATA];
				
				INSERT INTO [dbo].[ENT_PRECOND_METADATA]
					(
					[ENT_CODE_PRECOND_MD_ID]
					,[ENT_CODE_ENTITY_TYPE_ID]
					,[ENT_PRECOND_MD_ID]
					,[OBLIG_FLG]
					)
				VALUES
					(
					@EntCodePrecondMdId
					,@EntCodeEntityTypeId
					,@V_EntPrecondMdId
					,@ObligFlg
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_FULLFILL_METADATA_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_FULLFILL_METADATA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCodeFullfillMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntFullfillMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@ObligFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EntFullfillMdId numeric(3, 0)
				SELECT @V_EntFullfillMdId = ISNULL(MAX(ENT_FULLFILL_MD_ID), 0) + 1 FROM [dbo].[ENT_FULLFILL_METADATA];
				
				INSERT INTO [dbo].[ENT_FULLFILL_METADATA]
					(
					[ENT_CODE_FULLFILL_MD_ID]
					,[ENT_CODE_ENTITY_TYPE_ID]
					,[ENT_FULLFILL_MD_ID]
					,[OBLIG_FLG]
					)
				VALUES
					(
					@EntCodeFullfillMdId
					,@EntCodeEntityTypeId
					,@V_EntFullfillMdId
					,@ObligFlg
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_SE_FORM_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SE_FORM table
-- Table Comment: صفح النظام
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        delete from SE_USERPRIVILLAGES
        where SE_USERPRIVILLAGES.SE_FORMID = @SeFormId;

				DELETE FROM [dbo].[SE_FORM]
				WHERE
					[SE_FORM_ID] = @SeFormId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENTITY_MAIN_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ENTITY_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@StateNotation" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@EntParentId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@IsStateFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@NodeChildCount" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@NodePath" type="nvarchar" direction="Input" size="90" precision="0" scale="0" param="(90)" nulldefault=""/>
        <parameter name="@NodeOrder" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@NodeLevel" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudyMethodId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsInfoFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsHomeFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@StateDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StateDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@IsVisible" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        declare @MaxEntMainId numeric,@Current_ParentID numeric
        select  @MaxEntMainId =max(ENT_MAIN_ID)from ENTITY_MAIN;
         if( @MaxEntMainId is null)
            set  @MaxEntMainId=0;
          set  @MaxEntMainId= @MaxEntMainId+1;  
          
          if(@EntParentId is not null)
          set @Current_ParentID=@EntParentId
          
				if(@EntCodeEntityTypeId=1)
            set @Current_ParentID=@MaxEntMainId;
            
        declare @v_nodelevel numeric,@v_nodeorder numeric,@v_nodepath nvarchar(90)

            SELECT @v_nodelevel = node_level
               FROM ENTITY_MAIN
                   WHERE ENT_PARENT_ID = @Current_ParentID;

             IF @v_nodelevel IS NULL
               SET @v_nodelevel = 0;
            SET @v_nodelevel = @v_nodelevel + 1;
            
            
     
                   IF @v_nodelevel = 1
                        BEGIN
                           SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
                             FROM (SELECT node_order
                                     FROM ENTITY_MAIN
                                    WHERE node_level = 1) dst
                                  RIGHT OUTER JOIN
                                  (SELECT gs_sys_pivot_id
                                     FROM gs_sys_pivot
                                    WHERE gs_sys_pivot_id <= (SELECT COUNT (node_order) + 1
                                                                FROM ENTITY_MAIN
                                                               WHERE node_level = 1)) src
                                  ON (dst.node_order = src.gs_sys_pivot_id)
                            WHERE dst.node_order IS NULL;
                        END
                        ELSE
                        BEGIN
                           SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
                             FROM (SELECT node_order
                                     FROM ENTITY_MAIN
                                    WHERE ENT_PARENT_ID = @Current_ParentID
                                      AND ENT_MAIN_ID <> ENT_PARENT_ID) dst
                                  RIGHT OUTER JOIN
                                  (SELECT gs_sys_pivot_id
                                     FROM gs_sys_pivot
                                    WHERE gs_sys_pivot_id <=
                                             (SELECT COUNT (node_order) + 1
                                                FROM ENTITY_MAIN
                                               WHERE ENT_PARENT_ID = @Current_ParentID
                                                 AND ENT_MAIN_ID <> ENT_PARENT_ID)) src
                                  ON (dst.node_order = src.gs_sys_pivot_id)
                            WHERE dst.node_order IS NULL;
                        END;

            
            
                  SET @v_nodepath = NULL;
                              SELECT @v_nodepath = SUBSTRING(node_path, 1, CAST(node_level * 3 AS Integer))
                  FROM ENTITY_MAIN
                   WHERE ENT_MAIN_ID = @Current_ParentID;

                 IF @v_nodepath IS NULL
                        SET @v_nodepath = '';
                        
						IF EXISTS ( SELECT 1 FROM dbo.ENTITY_MAIN WHERE ENT_PARENT_ID = @Current_ParentID AND NODE_ORDER = @v_nodeorder)
BEGIN
	SELECT @v_nodeorder = ISNULL(MAX(NODE_ORDER),0) + 1 FROM dbo.ENTITY_MAIN WHERE ENT_PARENT_ID = @Current_ParentID
END
						
             SET @v_nodepath = @v_nodepath + REVERSE(SUBSTRING(REVERSE(N'00' + CONVERT(NVARCHAR(90), @v_nodeorder)), 1, 3));

      DECLARE @TEMP_AS_FACULTY_INFO_ID NUMERIC,@Max_ASFACULTY_INFO_Id numeric
          -- INSERT INTO AS_FACULTY_INFO_ID 
          IF(@EntCodeEntityTypeId =2)
           BEGIN
              SELECT TOP 1 @TEMP_AS_FACULTY_INFO_ID=AS_FACULTY_INFO_ID FROM AS_FACULTY_INFO
              WHERE (FACULTY_DESCR_AR=@EntDescrAr) OR (FACULTY_DESCR_EN=@EntDescrEn)
              
              IF(@TEMP_AS_FACULTY_INFO_ID IS NULL)
                 BEGIN
                        select  @Max_ASFACULTY_INFO_Id =max(AS_FACULTY_INFO_ID)from AS_FACULTY_INFO;
                         if( @Max_ASFACULTY_INFO_Id is null)
                            set  @Max_ASFACULTY_INFO_Id=0;
                          set  @Max_ASFACULTY_INFO_Id= @Max_ASFACULTY_INFO_Id+1; 
                                    
                    
                    INSERT INTO AS_FACULTY_INFO
                       (AS_FACULTY_INFO_ID,FACULTY_DESCR_AR,FACULTY_DESCR_EN)
                    values
                        (@Max_ASFACULTY_INFO_Id,@EntDescrAr,@EntDescrEn)
                        
                    declare @acadYearId numeric,@YearCalender numeric;
                    select @acadYearId=ED_ACAD_YEAR.ED_ACAD_YEAR_ID,@YearCalender=ED_ACAD_YEAR.YEAR_CALENDER from ED_ACAD_YEAR where CURRENT_YEAR = 1;
                    if(@acadYearId is not null)
                    begin
                      
                      declare @ED_ACAD_YEAR_FACULTY_ID numeric;
                      select  @ED_ACAD_YEAR_FACULTY_ID = isnull(max(ED_ACAD_YEAR_FACULTY_ID),0)+1 from ED_ACAD_YEAR_FACULTY;
                      insert into ED_ACAD_YEAR_FACULTY 
                      values (@ED_ACAD_YEAR_FACULTY_ID,@TEMP_AS_FACULTY_INFO_ID,@acadYearId,convert(nvarchar,@YearCalender)+'-07-01',convert(nvarchar,(@YearCalender+1))+'-09-01');
                 
                    end
                      
                     set @TEMP_AS_FACULTY_INFO_ID=@Max_ASFACULTY_INFO_Id
                 END
                 
           END
          ELSE
          BEGIN
               declare @ParentTypeid numeric
                     select @ParentTypeid =ENT_CODE_ENTITY_TYPE_ID from  ENTITY_MAIN where ENT_MAIN_ID=@EntParentId
                     
              IF(@EntCodeEntityTypeId =14 and @ParentTypeid=1)
                   BEGIN
                          SELECT TOP 1 @TEMP_AS_FACULTY_INFO_ID=AS_FACULTY_INFO_ID FROM AS_FACULTY_INFO
                          WHERE (FACULTY_DESCR_AR=@EntDescrAr and FACULTY_DESCR_AR is not null) OR 
                          (FACULTY_DESCR_EN=@EntDescrEn and FACULTY_DESCR_EN is not null)
                          
                          IF(@TEMP_AS_FACULTY_INFO_ID IS NULL)
                             BEGIN
                                    select  @Max_ASFACULTY_INFO_Id =max(AS_FACULTY_INFO_ID)from AS_FACULTY_INFO;
                                     if( @Max_ASFACULTY_INFO_Id is null)
                                        set  @Max_ASFACULTY_INFO_Id=0;
                                      set  @Max_ASFACULTY_INFO_Id= @Max_ASFACULTY_INFO_Id+1; 
                                                
                                INSERT INTO AS_FACULTY_INFO
                                   (AS_FACULTY_INFO_ID,FACULTY_DESCR_AR,FACULTY_DESCR_EN)
                                values
                                    (@Max_ASFACULTY_INFO_Id,@EntDescrAr,@EntDescrEn)
                                  
                                 set @TEMP_AS_FACULTY_INFO_ID=@Max_ASFACULTY_INFO_Id
                             END
                               
                   END
                   
                ELSE
                     SELECT @TEMP_AS_FACULTY_INFO_ID =AS_FACULTY_INFO_ID FROM ENTITY_MAIN WHERE ENT_MAIN_ID=@Current_ParentID;
          END
           
          --get bylaw from the parent if exists
          declare @Parent_ByLaw_ID numeric
             if(@EdBylawId is null or @EdBylawId=0)
              begin
                select @Parent_ByLaw_ID=ED_BYLAW_ID from [dbo].[ENTITY_MAIN] where [ENT_MAIN_ID]=@Current_ParentID;
                if(@Parent_ByLaw_ID is not null)
                   set @EdBylawId=@Parent_ByLaw_ID
              end
            
        -- declare @ParentTypeValId numeric(3,0)
       -- if(@EntCodeEntityTypeId =7)--of type level
       -- begin
         --select @ParentTypeValId=ENT_CODE_ENTITY_TYPE_ID from [dbo].[ENTITY_MAIN] where ENT_MAIN_ID=@Current_ParentID
         --if(@ParentTypeValId!=2 and @ParentTypeValId!=14)--parent not faculty nor program
          -- begin
             -- RAISERROR('ERR_LEVEL_PARENT',16,-1)
             -- RETURN 
          -- end
       -- end
            
        if(@EntCodeEntityTypeId =7)--of type level
        begin
         if exists (select * from [dbo].[ENTITY_MAIN] where ENT_PARENT_ID=@Current_ParentID
         and ENT_CODE_ENTITY_TYPE_ID=7 and ED_CODE_LEVEL_ID=@EdCodeLevelId)
           begin
              RAISERROR('ERR_LEVEL_REPEAT',16,-1)
              RETURN 
           end
        end     
            
            
        --يجب الاعتماد على جدول ent_avail_parent    
            declare @Parent_EntCodeEntityType numeric(3,0)
            select @Parent_EntCodeEntityType=ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENT_MAIN_ID=@Current_ParentID
            if exists(select 'a' from ENT_AVAIL_PRNT_TYPE where
               ENT_CODE_ENTITY_TYPE_ID=@EntCodeEntityTypeId and ENT_CODE_ENTITY_TYPE_PRNT_ID=@Parent_EntCodeEntityType
               or @Parent_EntCodeEntityType is null
            )
              Begin
--				        INSERT INTO [dbo].[ENTITY_MAIN]
--					        (
--					          [ENT_MAIN_ID],[ENT_DESCR_AR],[ENT_CODE_ENTITY_TYPE_ID],[STATE_NOTATION],[ENT_PARENT_ID]
--					          ,[ENT_DESCR_EN],[ED_BYLAW_ID],[IS_STATE_FLG],NODE_PATH,NODE_ORDER,NODE_LEVEL,NODE_CHILD_COUNT,
 --                   IS_INFO_FLG,IS_HOME_FLG,AS_FACULTY_INFO_ID,STATE_DESCR_AR,STATE_DESCR_EN,ED_CODE_LEVEL_ID,AS_CODE_DEGREE_CLASS_ID,
	--				is_Visible,is_active
	--				        )
	--			        VALUES
	--				        (
	--				          @MaxEntMainId,@EntDescrAr,@EntCodeEntityTypeId,@StateNotation,@Current_ParentID,@EntDescrEn
	--				          ,@EdBylawId,@IsStateFlg,@v_nodepath,@v_nodeorder,@v_nodelevel,0,@IsInfoFlg,@IsHomeFlg
   --                 ,@TEMP_AS_FACULTY_INFO_ID,@StateDescrAr,@StateDescrEn,@EdCodeLevelId,@AsCodeDegreeClassId,
		--			@IsVisible,@IsActive
		--			        )
    
                  INSERT INTO [dbo].[ENTITY_MAIN]
					(
					[ENT_MAIN_ID]
					,[ENT_DESCR_AR]
					,[ENT_CODE_ENTITY_TYPE_ID]
					,[STATE_NOTATION]
					,[ENT_PARENT_ID]
					,[ENT_DESCR_EN]
					,[ED_BYLAW_ID]
					,[IS_STATE_FLG]
					,[NODE_CHILD_COUNT]
					,[NODE_PATH]
					,[NODE_ORDER]
					,[NODE_LEVEL]
					,[ED_STUDY_METHOD_ID]
					,[IS_INFO_FLG]
					,[IS_HOME_FLG]
					,[AS_FACULTY_INFO_ID]
					,[STATE_DESCR_AR]
					,[STATE_DESCR_EN]
					,[ED_CODE_LEVEL_ID]
					,[IS_VISIBLE]
					,[IS_ACTIVE]
					,[AS_CODE_DEGREE_ID]
					)
				VALUES
					(
					@MaxEntMainId
					,@EntDescrAr
					,@EntCodeEntityTypeId
					,@StateNotation
					,@Current_ParentID
					,@EntDescrEn
					,@EdBylawId
					,@IsStateFlg
					,@NodeChildCount
					,@v_nodepath
					,@v_nodeorder
					,@v_nodelevel
					,0
					,@IsInfoFlg
					,@IsHomeFlg
					,@TEMP_AS_FACULTY_INFO_ID
					,@StateDescrAr
					,@StateDescrEn
					,@EdCodeLevelId
					,@IsVisible
					,@IsActive
					,@AsCodeDegreeId
					)
                  
              End
            Else
              Begin
                 RAISERROR('ENT_AVAIL_PRNT_TYPE',16,-1)
                 RETURN 
              End
				
				
          
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENTITY_MAIN_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ENTITY_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@OriginalEntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@StateNotation" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@EntParentId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>

        <parameter name="@IsStateFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@NodeChildCount" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@NodePath" type="nvarchar" direction="Input" size="90" precision="0" scale="0" param="(90)" nulldefault=""/>
        <parameter name="@NodeOrder" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@NodeLevel" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudyMethodId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsInfoFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsHomeFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@StateDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StateDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@IsVisible" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        
        --declare @ParentTypeValId numeric(3,0)
        --if(@EntCodeEntityTypeId =7)--of type level
       -- begin
        -- select @ParentTypeValId=ENT_CODE_ENTITY_TYPE_ID from [dbo].[ENTITY_MAIN] where ENT_MAIN_ID=@EntParentId
        -- if(@ParentTypeValId!=2 and @ParentTypeValId!=14)--parent not faculty nor program
         --  begin
            --  RAISERROR('ERR_LEVEL_PARENT',16,-1)
            --  RETURN 
          -- end
       -- end
        
        if(@EntCodeEntityTypeId =7)--of type level
        begin
         if exists (select * from [dbo].[ENTITY_MAIN] where ENT_PARENT_ID=@EntParentId
         and ENT_CODE_ENTITY_TYPE_ID=7 and ED_CODE_LEVEL_ID=@EdCodeLevelId and ENT_MAIN_ID!=@EntMainId)
           begin
              RAISERROR('ERR_LEVEL_REPEAT',16,-1)
              RETURN 
           end
        end  
        
        --declare @AsfacultyInfoId numeric
        --select @AsfacultyInfoId=as_faculty_info_id from entity_main where ent_main_id=@OriginalEntMainId 
        --if(@AsfacultyInfoId is null)
        --    select @AsfacultyInfoId=as_faculty_info_id from entity_main where ent_main_id=@EntParentId 
        
        declare @ParentENT_CODE_ENTITY_TYPE_ID numeric(3,0)
        select @ParentENT_CODE_ENTITY_TYPE_ID = ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ent_main_id=@EntParentId 
        if(@ParentENT_CODE_ENTITY_TYPE_ID <> 1)
        begin
        select @AsfacultyInfoId=as_faculty_info_id from entity_main where ent_main_id=@EntParentId 
        end
        else
        begin
        select @AsfacultyInfoId=as_faculty_info_id from entity_main where ent_main_id=@EntMainId
        end
                
        
            --يجب الاعتماد على جدول ent_avail_parent    
            declare @Parent_EntCodeEntityType numeric(3,0)
            select @Parent_EntCodeEntityType=ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENT_MAIN_ID=@EntParentId
          --  if exists(select 'a' from ENT_AVAIL_PRNT_TYPE where
             --   ENT_CODE_ENTITY_TYPE_ID=@EntCodeEntityTypeId and ENT_CODE_ENTITY_TYPE_PRNT_ID=@Parent_EntCodeEntityType
              --  or @Parent_EntCodeEntityType is null
          --  ) 
            --   BEGIN
		--		            UPDATE
		--			            [dbo].[ENTITY_MAIN]
		--		            SET
		--			            [ENT_MAIN_ID] = @EntMainId
		--			            ,[ENT_DESCR_AR] = @EntDescrAr
		--			            ,[ENT_CODE_ENTITY_TYPE_ID] = @EntCodeEntityTypeId
		--			            ,[STATE_NOTATION] = @StateNotation
		--			            ,[ENT_PARENT_ID] = @EntParentId
		--			            ,[ENT_DESCR_EN] = @EntDescrEn
		--			            ,[ED_BYLAW_ID] = @EdBylawId
		--			            ,[IS_STATE_FLG] = @IsStateFlg
     --                 ,IS_INFO_FLG=@IsInfoFlg
      --                ,IS_HOME_FLG=@IsHomeFlg
       --               ,STATE_DESCR_AR=@StateDescrAr
       --               ,STATE_DESCR_EN=@StateDescrEn
       --               ,ED_CODE_LEVEL_ID=@EdCodeLevelId
      --                ,[AS_FACULTY_INFO_ID]=@AsfacultyInfoId
		--			  ,AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId
		--			  ,is_Visible = @IsVisible
		--			  ,is_active = @IsActive
		--		            WHERE
     --                        [ENT_MAIN_ID] = @EntMainId 
                             
                             
        UPDATE
					[dbo].[ENTITY_MAIN]
				SET
					[ENT_MAIN_ID] = @EntMainId
					,[ENT_DESCR_AR] = @EntDescrAr
					,[ENT_CODE_ENTITY_TYPE_ID] = @EntCodeEntityTypeId
					,[STATE_NOTATION] = @StateNotation
					,[ENT_PARENT_ID] = @EntParentId
					,[ENT_DESCR_EN] = @EntDescrEn
					,[ED_BYLAW_ID] = @EdBylawId
					,[IS_STATE_FLG] = @IsStateFlg
					,[NODE_CHILD_COUNT] = @NodeChildCount
					,[NODE_PATH] = @NodePath
					,[NODE_ORDER] = @NodeOrder
					,[NODE_LEVEL] = @NodeLevel
					,[ED_STUDY_METHOD_ID] = @EdStudyMethodId
					,[IS_INFO_FLG] = @IsInfoFlg
					,[IS_HOME_FLG] = @IsHomeFlg
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[STATE_DESCR_AR] = @StateDescrAr
					,[STATE_DESCR_EN] = @StateDescrEn
					,[ED_CODE_LEVEL_ID] = @EdCodeLevelId
					,[IS_VISIBLE] = @IsVisible
					,[IS_ACTIVE] = @IsActive
					,[AS_CODE_DEGREE_ID] = @AsCodeDegreeId
				WHERE
[ENT_MAIN_ID] = @EntMainId                
                             
                             
				     --  END
          --Else
           --   Begin
               --  RAISERROR('ENT_AVAIL_PRNT_TYPE',16,-1)
                -- RETURN 
             -- End
        -------------update courses that under entity main to be with the same as_faculty_info_id
             update ed_Course set AS_FACULTY_INFO_ID=@AsfacultyInfoId where
             ent_main_id= @OriginalEntMainId 
  
  
  if(@EntCodeEntityTypeId = 2 or @EntCodeEntityTypeId = 14)
  begin
  
    update AS_FACULTY_INFO
set FACULTY_DESCR_AR=@EntDescrAr,
	FACULTY_DESCR_EN=@EntDescrEn
where AS_FACULTY_INFO_ID = @AsfacultyInfoId
  
  end          
               
        
        	DECLARE @v_ENT_MAIN_id NUMERIC(9, 0)
	DECLARE @v_node_parent_id NUMERIC(9, 0)
	DECLARE @v_node_order NUMERIC(9, 0)
	DECLARE @v_parent_node_path NVARCHAR(90)
	DECLARE @v_parent_node_level NUMERIC(9, 0)
	DECLARE @v_parent_study_method NUMERIC(9, 0)
	DECLARE @v_tmp NUMERIC(9, 0)
	DECLARE @v_ed_phase_node_nature_id NUMERIC(9, 0)
  DECLARE @v_oldnodeorder NUMERIC(3, 0),
  @v_nodelevel numeric(3,0),
  @v_nodeparentid numeric(5,0),
  @entity_rec_ent_main_id numeric(5,0),
  @node_rec_node_order  numeric(3,0)



  SELECT	@v_oldnodeorder = node_order,
            @v_nodelevel = node_level,
            @v_nodeparentid = ENT_PARENT_ID
     FROM ENTITY_MAIN
    WHERE ent_main_id = @EntMainId;

  
  IF @v_oldnodeorder <> @nodeorder
   BEGIN
      -- Test if there is a brother node with same node_parent_id and same node_order as the updated node
      BEGIN
         IF @v_nodelevel = 1
         BEGIN
            SELECT @v_tmp = ent_main_id
              FROM ENTITY_MAIN
             WHERE node_order = @nodeorder AND node_level = 1;
         END
         ELSE
         BEGIN
            SELECT @v_tmp = ent_main_id
              FROM ENTITY_MAIN
             WHERE ENT_PARENT_ID = @v_nodeparentid
               AND node_order = @nodeorder
               AND node_level = @v_nodelevel;
         END;
      END;

      IF NOT (@v_tmp IS NULL)
      BEGIN
         -- Move updated node and all of its children to last place among brothers
         EXEC ent_main_node_chng_order @EntMainId, 99;

         -- Loop in a cursor that return all brother nodes with node_order >= updated node node_order
         -- and try to make room for the newly updated node
         IF @v_nodelevel = 1
         BEGIN
			DECLARE ent_main_crsr_1 CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
             SELECT ent_main_id, node_order + 1
               FROM entity_main
              WHERE node_level = 1 AND node_order >= @nodeorder
           ORDER BY node_order DESC;

			OPEN ent_main_crsr_1;

			FETCH NEXT FROM ent_main_crsr_1 INTO @entity_rec_ent_main_id, @node_rec_node_order;
			WHILE @@FETCH_STATUS = 0
			BEGIN
               -- Move current brother node in cursor, and all of its children to following place among brothers
               EXEC ent_main_node_chng_order @entity_rec_ent_main_id, @node_rec_node_order;

               FETCH NEXT FROM ent_main_crsr_1 INTO @entity_rec_ent_main_id, @node_rec_node_order;
			END;

			CLOSE ent_main_crsr_1;

			DEALLOCATE ent_main_crsr_1;
         END
         ELSE
         BEGIN
			DECLARE ent_main_crsr CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
             SELECT ent_main_id, node_order + 1
               FROM entity_main
              WHERE ENT_PARENT_ID = @v_nodeparentid
                AND ENT_PARENT_ID <> ent_main_id
                AND node_order >= @nodeorder
           ORDER BY node_order DESC;

			OPEN ent_main_crsr;

			FETCH NEXT FROM ent_main_crsr INTO @entity_rec_ent_main_id, @node_rec_node_order;
			WHILE @@FETCH_STATUS = 0
			BEGIN
               -- Move current brother node in cursor, and all of its children to following place among brothers
               EXEC ent_main_node_chng_order @entity_rec_ent_main_id, @node_rec_node_order;

               FETCH NEXT FROM ent_main_crsr INTO @entity_rec_ent_main_id, @node_rec_node_order;
			END;

			CLOSE ent_main_crsr;

			DEALLOCATE ent_main_crsr;
         END;
      END;

      -- Move updated node and all of its children to desired place among brothers
      EXEC ent_main_node_chng_order @EntMainId, @nodeorder;
   END;
  

	--This table is used as a stack for processing node tree in a depth-first style
	DECLARE @NODE_STACK TABLE
	(
		NODE_STACK_ID			numeric(9, 0) IDENTITY,
		ENT_MAIN_ID		numeric(9, 0) PRIMARY KEY
	)

	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE ENTITY_MAIN SET NODE_PATH = N'AAA' + NODE_PATH

		--Maintain root nodes
		SET @v_node_order = 0;

		DECLARE csr_roots CURSOR FAST_FORWARD READ_ONLY FOR
			SELECT	ENTITY_MAIN.ENT_MAIN_ID
			FROM	ENTITY_MAIN
			WHERE	ENTITY_MAIN.ENT_MAIN_ID = ENTITY_MAIN.ENT_PARENT_ID
			ORDER BY ENTITY_MAIN.NODE_ORDER, ENTITY_MAIN.ENT_MAIN_ID

		OPEN csr_roots;

		FETCH NEXT FROM csr_roots INTO @v_ENT_MAIN_id;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @v_node_order = @v_node_order + 1

			UPDATE	ENTITY_MAIN
			SET		
					NODE_PATH = REVERSE(SUBSTRING(REVERSE(N'00' + CONVERT(NVARCHAR(90), @v_node_order)), 1, 3)),
					NODE_ORDER = @v_node_order,
					NODE_LEVEL = 1,
					ENT_CODE_ENTITY_TYPE_ID = 1
			WHERE	ENT_MAIN_ID = @v_ENT_MAIN_id

			--initially fill the processing stack with all root nodes
			INSERT INTO @NODE_STACK(ENT_MAIN_ID) VALUES (@v_ENT_MAIN_id);
			
			PRINT N'Precessing root node complete: ID = ' + CONVERT(NVARCHAR(90), @v_ENT_MAIN_id)

			FETCH NEXT FROM csr_roots INTO @v_ENT_MAIN_id;
		END;

		CLOSE csr_roots;

		DEALLOCATE csr_roots;


		--While processing stack is not empty do:
		SET @v_node_parent_id = NULL
		SELECT	TOP 1 @v_node_parent_id = ENT_MAIN_ID
		FROM	@NODE_STACK
		ORDER BY NODE_STACK_ID DESC
		WHILE (@v_node_parent_id IS NOT NULL)
		BEGIN
			SET @v_node_order = 0;
			
			PRINT N'Precessing parent node starting: ID = ' + CONVERT(NVARCHAR(90), @v_node_parent_id)

			--Remove parent node from stack
			DELETE FROM @NODE_STACK WHERE ENT_MAIN_ID = @v_node_parent_id

			--Get information of parent node
			SELECT	@v_parent_node_path = ENTITY_MAIN.NODE_PATH,
					@v_parent_node_level = ENTITY_MAIN.NODE_LEVEL,
					@v_parent_study_method = ENTITY_MAIN.ED_STUDY_METHOD_ID,
					@v_tmp = (
						SELECT	COUNT(T1.ENT_MAIN_ID) 
						FROM	ENTITY_MAIN AS T1 
						WHERE	T1.ENT_PARENT_ID = @v_node_parent_id AND
								T1.ENT_PARENT_ID <> T1.ENT_MAIN_ID
					)
			FROM	ENTITY_MAIN 
			WHERE	ENTITY_MAIN.ENT_MAIN_ID = @v_node_parent_id

			IF @v_tmp > 0
			BEGIN
				--Find all direct child nodes of current parent
				DECLARE csr_nodes CURSOR FAST_FORWARD READ_ONLY FOR
					SELECT	ENTITY_MAIN.ENT_MAIN_ID,
							ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID
					FROM	ENTITY_MAIN
					WHERE	ENTITY_MAIN.ENT_MAIN_ID <> ENTITY_MAIN.ENT_PARENT_ID AND 
							ENTITY_MAIN.ENT_PARENT_ID = @v_node_parent_id
					ORDER BY ENTITY_MAIN.NODE_ORDER, ENTITY_MAIN.ENT_MAIN_ID

				OPEN csr_nodes;

				FETCH NEXT FROM csr_nodes INTO @v_ENT_MAIN_id, @v_ed_phase_node_nature_id;
				WHILE @@FETCH_STATUS = 0
				BEGIN
					SET @v_node_order = @v_node_order + 1

					UPDATE	ENTITY_MAIN
					SET		--ED_CODE_PHASE_ID = NULL,
							--ED_CODE_SEMESTER_ID = NULL,
							NODE_PATH = @v_parent_node_path + REVERSE(SUBSTRING(REVERSE(N'00' + CONVERT(NVARCHAR(90), @v_node_order)), 1, 3)),
							NODE_ORDER = @v_node_order,
							NODE_LEVEL = @v_parent_node_level + 1,
							ED_STUDY_METHOD_ID = @v_parent_study_method
					WHERE	ENT_MAIN_ID = @v_ENT_MAIN_id
					
			

					--Add child node to stack to be processed later as a parent node
					INSERT INTO @NODE_STACK(ENT_MAIN_ID) VALUES (@v_ENT_MAIN_id);
					
					PRINT N'   Precessing child node complete: ID = ' + CONVERT(NVARCHAR(90), @v_ENT_MAIN_id)

					FETCH NEXT FROM csr_nodes INTO @v_ENT_MAIN_id, @v_ed_phase_node_nature_id;
				END;

				CLOSE csr_nodes;

				DEALLOCATE csr_nodes;
			END

			PRINT N'Precessing parent node finished: ID = ' + CONVERT(NVARCHAR(90), @v_node_parent_id)

			--Test if stack is empty
			SET @v_node_parent_id = NULL
			SELECT	TOP 1 @v_node_parent_id = ENT_MAIN_ID
			FROM	@NODE_STACK
			ORDER BY NODE_STACK_ID DESC

			SET @v_tmp = (SELECT COUNT(ENT_MAIN_ID) FROM @NODE_STACK)
			PRINT N'Nodes remaining in stack: ' + CONVERT(NVARCHAR(90), @v_tmp)
		END
		
		--Update NODE_CHILD_COUNT for the whole tree
		UPDATE	ENTITY_MAIN
		SET		NODE_CHILD_COUNT = (
					SELECT	COUNT(T1.ENT_MAIN_ID)
					FROM	ENTITY_MAIN AS T1
					WHERE	T1.ENT_PARENT_ID = ENTITY_MAIN.ENT_MAIN_ID AND
							T1.ENT_PARENT_ID <> T1.ENT_MAIN_ID
				)

		COMMIT;
	END TRY	
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		
			ROLLBACK
          CLOSE csr_roots;
	    	DEALLOCATE csr_roots;

		-- Raise an error with the details of the exception
		DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
		SELECT	@ErrMsg = ERROR_MESSAGE(),
				@ErrSeverity = ERROR_SEVERITY()

		RAISERROR(@ErrMsg, @ErrSeverity, 1)
	END CATCH	

        
        
        
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENTITY_MAIN_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ENTITY_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
declare @Errorr_Message nvarchar(max)
begin transaction

begin try
delete from SE_USER_ACCNT where SE_USER_ID in (select SE_USER_ID FROM [dbo].[SE_USER] 
				WHERE
					[AS_NODE_ID] = @EntMainId)
              
              DELETE FROM [dbo].[SE_USER] 
				WHERE
					[AS_NODE_ID] = @EntMainId

            CREATE TABLE #Tables_Columns(Table_Name nvarchar(150),Column_Name nvarchar(150))
            CREATE TABLE #Fired_Tables_Columns(Table_Name nvarchar(150))

            insert into #Tables_Columns(Table_Name,Column_Name)
            SELECT  o2.name[childTable],
            sc.name
             FROM sys.sysobjects o
            INNER JOIN sys.sysforeignkeys fk ON fk.rkeyid = o.id
            INNER JOIN sys.sysobjects o2 ON o2.id = fk.fkeyid AND o2.id <> o.id
            inner join sys.columns SC on SC.object_id = fk.fkeyid and sc.column_id = fk.fkey
            inner join sys.columns SC1 on SC1.object_id = fk.rkeyid and sc1.column_id = fk.rkey
            WHERE o.name = 'ENTITY_MAIN'

            declare  @Table_Name nvarchar(150),@Column_Name nvarchar(150)
                            DECLARE	  Tables_Cursor CURSOR FOR
				            SELECT Table_Name,Column_Name FROM #Tables_Columns
				            OPEN Tables_Cursor
				            FETCH NEXT FROM Tables_Cursor INTO @Table_Name,@Column_Name
				            WHILE(@@FETCH_STATUS <> -1)
				            BEGIN 
				              declare @QueryString nvarchar(max);
				             -- if exists (select 'a' from ENT_POLICY_OBSERVED where ENT_MAIN_ID=1) insert into #Fired_Tables_Columns(Table_Name)values('ENT_POLICY_OBSERVED')
            				  
            				  if(@Table_Name<>'ENT_FULLFILL_MD_DATA' and @Table_Name<>'ENT_PRECOND_MD_DATA')
            				     Begin
				                     set  @QueryString='if exists (select ''a'' from '+@Table_Name+' where '+@Column_Name+'='+convert(nvarchar,@EntMainId)+') insert into #Fired_Tables_Columns(Table_Name) values('''+@Table_Name+''')'
				                    exec (@QueryString)
				               End 
            		
				            FETCH NEXT FROM Tables_Cursor INTO @Table_Name,@Column_Name
				            end
				            CLOSE Tables_Cursor
				            DEALLOCATE Tables_Cursor
            				

            
            set @Errorr_Message='';
            if exists(select 'a' from ENTITY_MAIN where ENT_PARENT_ID=@EntMainId and ENT_MAIN_ID <> @EntMainId)
                       set @Errorr_Message=@Errorr_Message+'ENTITY_MAIN<br/>'
              DECLARE	    Fired_Tables_Columns_Cursor CURSOR FOR
				            SELECT Table_Name FROM #Fired_Tables_Columns
				            OPEN Fired_Tables_Columns_Cursor
				            FETCH NEXT FROM Fired_Tables_Columns_Cursor INTO @Table_Name
				            WHILE(@@FETCH_STATUS <> -1)
				              BEGIN 
				                  set @Errorr_Message=@Errorr_Message+@Table_Name+'<br/>';
				                  FETCH NEXT FROM Fired_Tables_Columns_Cursor INTO @Table_Name
				              end
				            CLOSE Fired_Tables_Columns_Cursor
				            DEALLOCATE Fired_Tables_Columns_Cursor

            drop table  #Tables_Columns
            drop table  #Fired_Tables_Columns
       
        if(@Errorr_Message <>'')
           Begin
                set @Errorr_Message='Relational_Tables'+@Errorr_Message;
                 RAISERROR(@Errorr_Message,16,-1)
           End
               else
               begin
               
               delete from [dbo].[ENT_FULLFILL_MD_DATA] where ENT_MAIN_ID=@EntMainId;
               delete from [dbo].[ENT_PRECOND_MD_DATA] where ENT_MAIN_ID=@EntMainId;
           
        
            declare @EntCodeEntityTypeId numeric,@AsFacultyInfoId numeric
            select @EntCodeEntityTypeId=ENT_CODE_ENTITY_TYPE_ID,
            @AsFacultyInfoId=AS_FACULTY_INFO_ID
              from entity_main where 
            	[ENT_MAIN_ID] = @EntMainId
              
              
			DELETE FROM [dbo].[ENTITY_MAIN] WITH (ROWLOCK) 
				WHERE
					[ENT_MAIN_ID] = @EntMainId
          
     -- delete from as_faculty_info if entity main is faculty or program
      if(@EntCodeEntityTypeId=2 or @EntCodeEntityTypeId=14)
                Begin
				DELETE FROM dbo.ED_OFFERING_COURSE  WHERE AS_FACULTY_INFO_ID = @AsFacultyInfoId
                
                DELETE FROM dbo.ED_OFFERING WHERE AS_FACULTY_INFO_ID = @AsFacultyInfoId
					
                  delete from ED_ACAD_YEAR_FACULTY where AS_FACULTY_INFO_ID=@AsFacultyInfoId
                
                  delete from AS_FACULTY_INFO where AS_FACULTY_INFO_ID=@AsFacultyInfoId
                End
                end
commit transaction
end try
begin catch
if(@Errorr_Message <> '')
RAISERROR(@Errorr_Message,16,-1)

rollback transaction
end catch

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENTITY_MAIN_GetByEntParentId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the ENTITY_MAIN table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntParentId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				      SELECT
					      *
				      FROM
					      [dbo].[ENTITY_MAIN]
				      WHERE
					       (([ENT_PARENT_ID] = @EntParentId) or (@EntParentId =0 and [ENT_PARENT_ID] is null))
             order by NODE_PATH

				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE table
-- Table Comment: جدول المواد الدراسية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CourseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CourseContentsAr" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
        <parameter name="@CourseContentsEn" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
        <parameter name="@MaxDegree" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinDegree" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@CreditHours" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@AllPrereqFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@NoPrereq" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@PrereqCodeExp" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
        <parameter name="@PrereqIdExp" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
    
        declare @TempEdCourseId numeric(9,0)                                                 -- conditions for hashesh cairo institute                          
        select @TempEdCourseId=(ED_COURSE_ID)from ED_COURSE  where [COURSE_CODE]=@CourseCode and AS_FACULTY_INFO_ID = @AsFacultyInfoId and ENT_MAIN_ID = @EntMainId
        
        if(@TempEdCourseId is null)
          Begin
                   declare @maxEdCourseId numeric(9,0);
                select @maxEdCourseId=max(ED_COURSE_ID)from ED_COURSE 
                    if(@maxEdCourseId is null)
                      set  @maxEdCourseId=0;
                    set  @maxEdCourseId= @maxEdCourseId+1;
                    
                if(@AsFacultyInfoId=0)
                     Begin
                            INSERT INTO [dbo].[ED_COURSE]
					                  (
			 		                     [ED_COURSE_ID],[COURSE_CODE],[COURSE_DESCR_AR],[COURSE_DESCR_EN]
					                    ,[GS_CODE_LANGUAGE_ID],[ED_CODE_COURSE_CASE_ID],[COURSE_CONTENTS_AR],[COURSE_CONTENTS_EN]
					                    ,[CREDIT_HOURS],[ENT_MAIN_ID],[IS_ACTIVE],[ALL_PREREQ_FLG]
					                    ,[NO_PREREQ],[ED_BYLAW_ID],[PREREQ_CODE_EXP],[PREREQ_ID_EXP]
					                  )
				                  VALUES
					                  (
					                    @maxEdCourseId,@CourseCode,@CourseDescrAr,@CourseDescrEn,1,1,@CourseDescrAr
					                    ,@CourseDescrEn,@CreditHours
					                    ,@EntMainId,@IsActive,@AllPrereqFlg,@NoPrereq,@EdBylawId,@PrereqCodeExp,@PrereqIdExp
					                  )
                     End
                else
                    Begin
                        INSERT INTO [dbo].[ED_COURSE]
					              (
			 		                 [ED_COURSE_ID],[COURSE_CODE],[COURSE_DESCR_AR],[COURSE_DESCR_EN]
					                ,[GS_CODE_LANGUAGE_ID],[ED_CODE_COURSE_CASE_ID],[COURSE_CONTENTS_AR],[COURSE_CONTENTS_EN]
					                ,[CREDIT_HOURS],[AS_FACULTY_INFO_ID],[ENT_MAIN_ID],[IS_ACTIVE],[ALL_PREREQ_FLG]
					                ,[NO_PREREQ],[ED_BYLAW_ID],[PREREQ_CODE_EXP],[PREREQ_ID_EXP]
					              )
				              VALUES
					              (
					                @maxEdCourseId,@CourseCode,@CourseDescrAr,@CourseDescrEn,1,1,@CourseDescrAr
					                ,@CourseDescrEn,@CreditHours,@AsFacultyInfoId
					                ,@EntMainId,@IsActive,@AllPrereqFlg,@NoPrereq,@EdBylawId,@PrereqCodeExp,@PrereqIdExp
					              )
                    End
				        
          End
        else
         Begin
            if(@EntMainId!=0 AND @EntMainId is not null)
           	    UPDATE
					        [dbo].[ED_COURSE]
				          SET
					          [COURSE_DESCR_AR] = @CourseDescrAr
					          ,[COURSE_DESCR_EN] = @CourseDescrEn
					          ,[CREDIT_HOURS] = @CreditHours
                    ,[ENT_MAIN_ID] = @EntMainId
				          WHERE
                    [ED_COURSE_ID] = @TempEdCourseId
             else
                 UPDATE
					        [dbo].[ED_COURSE]
				          SET
					          [COURSE_DESCR_AR] = @CourseDescrAr
					          ,[COURSE_DESCR_EN] = @CourseDescrEn
					          ,[CREDIT_HOURS] = @CreditHours
				          WHERE
                    [ED_COURSE_ID] = @TempEdCourseId
         End
        
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_COURSE table
-- Table Comment: جدول المواد الدراسية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalEdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@CourseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@CreditHours" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@CourseContentsAr" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
        <parameter name="@CourseContentsEn" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AllPrereqFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@NoPrereq" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@PrereqCodeExp" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@PrereqIdExp" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@GsCourseElectTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@ElectFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_COURSE]
				SET
					[ED_COURSE_ID] = @EdCourseId
					,[ED_CODE_COURSE_ID] = @EdCodeCourseId
					,[COURSE_CODE] = @CourseCode
					,[COURSE_DESCR_AR] = @CourseDescrAr
					,[COURSE_DESCR_EN] = @CourseDescrEn
					,[CREDIT_HOURS] = @CreditHours
					,[COURSE_CONTENTS_AR] = @CourseContentsAr
					,[COURSE_CONTENTS_EN] = @CourseContentsEn
					,[ENT_MAIN_ID] = @EntMainId
					,[ALL_PREREQ_FLG] = @AllPrereqFlg
					,[NO_PREREQ] = @NoPrereq
					,[GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[IS_ACTIVE] = @IsActive
					,[ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId
					,[ED_BYLAW_ID] = @EdBylawId
					,[PREREQ_CODE_EXP] = @PrereqCodeExp
					,[PREREQ_ID_EXP] = @PrereqIdExp
					,[GS_COURSE_ELECT_TYPE_ID] = @GsCourseElectTypeId
					,[ELECT_FLG] = @ElectFlg
				WHERE
[ED_COURSE_ID] = @EdCourseId 
				
				EXEC UPDATE_CoursePreReqCode @EdCourseId;
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_COURSE table
-- Table Comment: جدول المواد الدراسية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        declare @ContainsCoursesMessage nvarchar(max)
        select @ContainsCoursesMessage=[dbo].[CourseExistAsPreRequeset](@EdCourseId)
        if(@ContainsCoursesMessage!='')
          Begin
             set @ContainsCoursesMessage='Course_Is_PreReq'+@ContainsCoursesMessage;
             RAISERROR(@ContainsCoursesMessage,16,-1)
            return
          End
       begin transaction;        
              delete from ED_COURSE_TCHNG where ed_course_id=@EdCourseId
				      DELETE FROM [dbo].[ED_COURSE] WITH (ROWLOCK) 
				      WHERE
					      [ED_COURSE_ID] = @EdCourseId
          
          IF @@ERROR <> 0
         BEGIN
            ROLLBACK

            RETURN
         END
        commit transaction;			
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_CODE_COURSE_TEACHING_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_COURSE_TEACHING table
-- Table Comment: جدول أكواد طرق تدريس مقرر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@MethodOrder" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdCdeTchngMthdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdCodeCourseTeachingId numeric(4, 0)
				SELECT @V_EdCodeCourseTeachingId = ISNULL(MAX(ED_CODE_COURSE_TEACHING_ID), 0) + 1 FROM [dbo].[ED_CODE_COURSE_TEACHING];

				DECLARE @V_MethodOrder numeric(4, 0)
				SELECT @V_MethodOrder = ISNULL(MAX(METHOD_ORDER), 0) + 1 FROM [dbo].[ED_CODE_COURSE_TEACHING] WHERE ISNULL(AS_FACULTY_INFO_ID, 0) = ISNULL(@AsFacultyInfoId, 0);

				INSERT INTO [dbo].[ED_CODE_COURSE_TEACHING]
					(
					[ED_CODE_COURSE_TEACHING_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[METHOD_ORDER]
					,[AS_FACULTY_INFO_ID]
          ,[ED_CDE_TCHNG_MTHD_ID]
					)
				VALUES
					(
					@V_EdCodeCourseTeachingId
					,@DescrAr
					,@DescrEn
					,@V_MethodOrder
					,CASE WHEN @AsFacultyInfoId = 0 THEN NULL ELSE @AsFacultyInfoId END
          ,@EdCdeTchngMthdId
					)
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_CODE_COURSE_TEACHING_GetByAsFacultyInfoId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_TEACHING table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SELECT
					*
				FROM
					[dbo].[ED_CODE_COURSE_TEACHING]
				WHERE
					ISNULL([AS_FACULTY_INFO_ID], 0) = ISNULL(@AsFacultyInfoId, 0)
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_COREQ_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE_COREQ table
-- Table Comment: جدول مجموعة مواد متزامنة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseConId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseGroup" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@IsMain" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        
        if exists(select 'a' from [dbo].[ED_COURSE_COREQ] where ED_COURSE_GROUP=@EdCourseGroup and
        ED_COURSE_ID=@EdCourseId)
         Begin
            RAISERROR('COS_ED_COURSE_COREQ_EXIST',16,-1)
              RETURN 
         End
        
 
         declare @maxEdCourseCoreqId numeric(9,0);
        select @maxEdCourseCoreqId=max(ED_COURSE_COREQ_ID)from [dbo].[ED_COURSE_COREQ]
        if(@maxEdCourseCoreqId is null)
          set  @maxEdCourseCoreqId=0;
          
        set  @maxEdCourseCoreqId= @maxEdCourseCoreqId+1;  
				
				INSERT INTO [dbo].[ED_COURSE_COREQ]
					(
					[ED_COURSE_COREQ_ID]
					,[ED_COURSE_GROUP]
					,[ED_COURSE_ID]
					,[IS_MAIN]
					)
				VALUES
					(
					@maxEdCourseCoreqId
					,@EdCourseGroup
					,@EdCourseId
					,@IsMain
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_COREQ_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_COURSE_COREQ table
-- Table Comment: جدول مجموعة مواد متزامنة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseCoreqId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
declare @ismain numeric = 0,@grop numeric;
select @ismain=IS_MAIN,@grop = ED_COURSE_GROUP from [ED_COURSE_COREQ] where [ED_COURSE_COREQ_ID] = @EdCourseCoreqId;

if(@ismain = 0)
begin
DELETE FROM [dbo].[ED_COURSE_COREQ] WITH (ROWLOCK) 
				WHERE
					[ED_COURSE_COREQ_ID] = @EdCourseCoreqId
end
else
begin
DELETE FROM [dbo].[ED_COURSE_COREQ] WITH (ROWLOCK) 
				WHERE
					ED_COURSE_GROUP = @grop
end
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_COREQ_GetByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_COREQ table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
				 [dbo].[ED_COURSE_COREQ].[ED_COURSE_COREQ_ID]
	      , [dbo].[ED_COURSE_COREQ].[ED_COURSE_GROUP]
	      , [dbo].[ED_COURSE_COREQ].[ED_COURSE_ID]
	      , [dbo].[ED_COURSE_COREQ].[IS_MAIN]
        ,[dbo].[ED_COURSE].COURSE_CODE
        ,[dbo].[ED_COURSE].COURSE_DESCR_AR
				FROM
				[dbo].[ED_COURSE_COREQ] INNER JOIN [dbo].[ED_COURSE]
        ON [dbo].[ED_COURSE].ED_COURSE_ID=[dbo].[ED_COURSE_COREQ].ED_COURSE_ID
				WHERE
					[dbo].[ED_COURSE_COREQ].[ED_COURSE_ID] = @EdCourseId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_BARRED_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE_BARRED table
-- Table Comment: جدول المواد المتعارضة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseBarredId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdBarredCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				if exists(select 'a' from [dbo].[ED_COURSE_BARRED] where ED_COURSE_ID=@EdCourseId and
        ED_BARRED_COURSE_ID=@EdBarredCourseId)
         Begin
            RAISERROR('COS_ED_COURSE_BARRED_EXIST',16,-1)
              RETURN 
         End
         
         declare @Max_ED_COURSE_BARREDId numeric(9,0)
                   select @Max_ED_COURSE_BARREDId=max(ED_COURSE_BARRED_ID)from 
                   ED_COURSE_BARRED
                   if(@Max_ED_COURSE_BARREDId is null)
                      set @Max_ED_COURSE_BARREDId=0;
                  set @Max_ED_COURSE_BARREDId=@Max_ED_COURSE_BARREDId+1;
				INSERT INTO [dbo].[ED_COURSE_BARRED]
					(
					[ED_COURSE_BARRED_ID]
					,[ED_COURSE_ID]
					,[ED_BARRED_COURSE_ID]
					)
				VALUES
					(
					@Max_ED_COURSE_BARREDId
					,@EdCourseId
					,@EdBarredCourseId
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_COURSE_BARRED_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE_BARRED table passing nullable parameters
-- Table Comment: جدول المواد المتعارضة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdCourseBarredId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdBarredCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [dbo].[ED_COURSE_BARRED].[ED_COURSE_BARRED_ID]
	, [dbo].[ED_COURSE_BARRED].[ED_COURSE_ID]
	, [dbo].[ED_COURSE_BARRED].[ED_BARRED_COURSE_ID]
  ,[dbo].[ED_COURSE].COURSE_CODE
  ,[dbo].[ED_COURSE].COURSE_DESCR_AR
  ,[dbo].[ED_COURSE].COURSE_DESCR_EN
  ,[dbo].[ED_COURSE].CREDIT_HOURS
    FROM
	[dbo].[ED_COURSE_BARRED] inner join ed_Course on ed_Course.ed_Course_id=ED_COURSE_BARRED.ED_BARRED_COURSE_ID
    WHERE 
	 ([dbo].[ED_COURSE_BARRED].[ED_COURSE_BARRED_ID] = @EdCourseBarredId OR @EdCourseBarredId IS NULL)
	AND ([dbo].[ED_COURSE_BARRED].[ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
	AND ([dbo].[ED_COURSE_BARRED].[ED_BARRED_COURSE_ID] = @EdBarredCourseId OR @EdBarredCourseId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [dbo].[ED_COURSE_BARRED].[ED_COURSE_BARRED_ID]
	, [dbo].[ED_COURSE_BARRED].[ED_COURSE_ID]
	, [dbo].[ED_COURSE_BARRED].[ED_BARRED_COURSE_ID]
  ,[dbo].[ED_COURSE].COURSE_CODE
  ,[dbo].[ED_COURSE].COURSE_DESCR_AR
  ,[dbo].[ED_COURSE].COURSE_DESCR_EN
  ,[dbo].[ED_COURSE].CREDIT_HOURS
    FROM
	[dbo].[ED_COURSE_BARRED]inner join ed_Course on ed_Course.ed_Course_id=ED_COURSE_BARRED.ED_BARRED_COURSE_ID
    WHERE 
	 ([dbo].[ED_COURSE_BARRED].[ED_COURSE_BARRED_ID] = @EdCourseBarredId AND @EdCourseBarredId is not null)
	OR ([dbo].[ED_COURSE_BARRED].[ED_COURSE_ID] = @EdCourseId AND @EdCourseId is not null)
	OR ([dbo].[ED_COURSE_BARRED].[ED_BARRED_COURSE_ID] = @EdBarredCourseId AND @EdBarredCourseId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_FULLFILL_MD_DATA_GetByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_FULLFILL_MD_DATA table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ENT_FULLFILL_MD_DATA].[ENT_FULLFILL_MD_DATA_ID],
					[dbo].[ENT_FULLFILL_MD_DATA].[ENT_FULLFILL_MD_ID],
					[dbo].[ENT_FULLFILL_MD_DATA].[ENT_MAIN_ID],
					[dbo].[ENT_FULLFILL_MD_DATA].[MD_VALUE_1],
					[dbo].[ENT_FULLFILL_MD_DATA].[MD_VALUE_2],
          [ENT_FULLFILL_METADATA].ENT_CODE_FULLFILL_MD_ID
				FROM
					[dbo].[ENT_FULLFILL_MD_DATA] inner join [ENT_FULLFILL_METADATA] on [dbo].[ENT_FULLFILL_MD_DATA].[ENT_FULLFILL_MD_ID]=[ENT_FULLFILL_METADATA].ENT_FULLFILL_MD_ID
				WHERE
					[ENT_MAIN_ID] = @EntMainId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_COURSE_PKG_HDR_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, May 04, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_COURSE_PKG_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@MinTotCh" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(5, 0)" nulldefault=""/>
        <!--<parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>-->
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <!--<parameter name="@EntMainRltdId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>-->
        <parameter name="@EntCdePkgTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
        if exists(select 'a' from ENT_COURSE_PKG_HDR where DESCR_AR=@DescrAr and [ENT_MAIN_ID] = @EntMainId and ED_ACAD_YEAR_ID = @EdAcadYearId)
          Begin
             RAISERROR('Repeat_COURSE_PKG_HDR_Descr_Ar',16,-1)
              RETURN 
          End
          
          if exists(select 'a' from ENT_COURSE_PKG_HDR where DESCR_EN=@DescrEn and [ENT_MAIN_ID] = @EntMainId and ED_ACAD_YEAR_ID = @EdAcadYearId)
          Begin
             RAISERROR('Repeat_COURSE_PKG_HDR_Descr_En',16,-1)
              RETURN 
          End
				
        declare @MaxENT_COURSE_PKG_HDR_ID numeric(6,0)
        select @MaxENT_COURSE_PKG_HDR_ID=max(ENT_COURSE_PKG_HDR_ID) from  ENT_COURSE_PKG_HDR
        if(@MaxENT_COURSE_PKG_HDR_ID is null)
          set @MaxENT_COURSE_PKG_HDR_ID=0;
          set @MaxENT_COURSE_PKG_HDR_ID =@MaxENT_COURSE_PKG_HDR_ID+1
        
        
        
				INSERT INTO [dbo].[ENT_COURSE_PKG_HDR]
					(
					[ENT_COURSE_PKG_HDR_ID]
					,[ENT_MAIN_ID]
					,[MIN_TOT_CH]
					,ED_ACAD_YEAR_ID
					--,[ED_BYLAW_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					--,[ENT_MAIN_RLTD_ID]
					,[ENT_CDE_PKG_TYPE_ID]
					)
				VALUES
					(
					@MaxENT_COURSE_PKG_HDR_ID
					,@EntMainId
					,@MinTotCh
					,@EdAcadYearId
				--	,@EdBylawId
					,@DescrAr
					,@DescrEn
				--	,@EntMainRltdId
					,@EntCdePkgTypeId
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_COURSE_PKG_HDR_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, May 04, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ENT_COURSE_PKG_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@OriginalEntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@MinTotCh" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(5, 0)" nulldefault=""/>
        <!--<parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>-->
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <!--<parameter name="@EntMainRltdId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>-->
        <parameter name="@EntCdePkgTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
        if exists(select 'a' from ENT_COURSE_PKG_HDR where DESCR_AR=@DescrAr and [ENT_MAIN_ID] = @EntMainId and ED_ACAD_YEAR_ID = @EdAcadYearId and [ENT_COURSE_PKG_HDR_ID] != @OriginalEntCoursePkgHdrId)
          Begin
             RAISERROR('Repeat_COURSE_PKG_HDR_Descr_Ar',16,-1)
              RETURN 
          End
          
          if exists(select 'a' from ENT_COURSE_PKG_HDR where DESCR_EN=@DescrEn and [ENT_MAIN_ID] = @EntMainId and ED_ACAD_YEAR_ID = @EdAcadYearId and [ENT_COURSE_PKG_HDR_ID] != @OriginalEntCoursePkgHdrId)
          Begin
             RAISERROR('Repeat_COURSE_PKG_HDR_Descr_En',16,-1)
              RETURN 
          End
        
        
        
				-- Modify the updatable columns
				UPDATE
					[dbo].[ENT_COURSE_PKG_HDR]
				SET
					[ENT_COURSE_PKG_HDR_ID] = @EntCoursePkgHdrId
					,[ENT_MAIN_ID] = @EntMainId
					,[MIN_TOT_CH] = @MinTotCh
					,[ED_ACAD_YEAR_ID] =@EdAcadYearId
					--,[ED_BYLAW_ID] = @EdBylawId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					--,[ENT_MAIN_RLTD_ID] = @EntMainRltdId
					,[ENT_CDE_PKG_TYPE_ID] = @EntCdePkgTypeId
				WHERE
        [ENT_COURSE_PKG_HDR_ID] = @OriginalEntCoursePkgHdrId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_COURSE_PKG_DTL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, May 04, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_COURSE_PKG_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCoursePkgDtlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AddGpaFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AddMjrgpaFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
        
        declare @MaxENT_COURSE_PKG_DTL_ID numeric(6,0)
        select @MaxENT_COURSE_PKG_DTL_ID=max(ENT_COURSE_PKG_DTL_ID) from  ENT_COURSE_PKG_DTL
        if(@MaxENT_COURSE_PKG_DTL_ID is null)
          set @MaxENT_COURSE_PKG_DTL_ID=0;
        set @MaxENT_COURSE_PKG_DTL_ID =@MaxENT_COURSE_PKG_DTL_ID+1
        
        if not exists(select 'a' from ENT_COURSE_PKG_DTL where ENT_COURSE_PKG_HDR_ID=@EntCoursePkgHdrId and
        ED_COURSE_ID=@EdCourseId)
        begin
				    INSERT INTO [dbo].[ENT_COURSE_PKG_DTL]
					    (
					    [ENT_COURSE_PKG_DTL_ID]
					    ,[ED_COURSE_ID]
					    ,[ENT_COURSE_PKG_HDR_ID]
              ,[ADD_GPA_FLG]
              ,[ADD_MJRGPA_FLG]
					    )
				    VALUES
					    (
					    @MaxENT_COURSE_PKG_DTL_ID
					    ,@EdCourseId
					    ,@EntCoursePkgHdrId
              ,@AddGpaFlg
              ,@AddMjrgpaFlg
					    )
				end
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_COURSE_MD_DATA_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_COURSE_MD_DATA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCourseMdDataId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EntCodePrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntCodeFullfillMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
         declare @MaxEntCourseMdDataId numeric(9,0);
                select @MaxEntCourseMdDataId=max(ENT_COURSE_MD_DATA_ID)from ENT_COURSE_MD_DATA 
                if(@MaxEntCourseMdDataId is null)
                  set  @MaxEntCourseMdDataId=0;
                set  @MaxEntCourseMdDataId= @MaxEntCourseMdDataId+1;
        
        
        if(@EntCodePrecondMdId is not null)--courses for precondition
        begin
         if exists(select 'd' from [dbo].[ENT_COURSE_MD_DATA] where [ENT_MAIN_ID]=@EntMainId and [ED_COURSE_ID]=@EdCourseId and [ENT_CODE_PRECOND_MD_ID] is not null)
            begin
              RAISERROR('COS_ENT_COURSE_MD',16,-1)
              RETURN 
            end              
        end
        
        if(@EntCodeFullfillMdId is not null)--courses for fullfil
        begin
         if exists(select 'd' from [dbo].[ENT_COURSE_MD_DATA] where [ENT_MAIN_ID]=@EntMainId and [ED_COURSE_ID]=@EdCourseId and [ENT_CODE_FULLFILL_MD_ID] is not null)
            begin
              RAISERROR('COS_ENT_COURSE_MD',16,-1)
              RETURN 
            end              
        end
        
        
        
				INSERT INTO [dbo].[ENT_COURSE_MD_DATA]
					(
					[ENT_COURSE_MD_DATA_ID]
					,[ENT_MAIN_ID]
					,[ED_COURSE_ID]
					,[ED_CODE_GRADING_ID]
					,[ENT_CODE_PRECOND_MD_ID]
					,[ENT_CODE_FULLFILL_MD_ID]
					)
				VALUES
					(
					@MaxEntCourseMdDataId
					,@EntMainId
					,@EdCourseId
					,@EdCodeGradingId
					,@EntCodePrecondMdId
					,@EntCodeFullfillMdId
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ENT_COURSE_MD_DATA_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ENT_COURSE_MD_DATA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCourseMdDataId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@OriginalEntCourseMdDataId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EntCodePrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntCodeFullfillMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				if(@EntCodePrecondMdId is not null)--courses for precondition
        begin
         if exists(select 'd' from [dbo].[ENT_COURSE_MD_DATA] where [ENT_MAIN_ID]=@EntMainId and [ED_COURSE_ID]=@EdCourseId and [ENT_CODE_PRECOND_MD_ID] is not null
         and [ENT_COURSE_MD_DATA_ID] != @EntCourseMdDataId )
            begin
              RAISERROR('COS_ENT_COURSE_MD',16,-1)
              RETURN 
            end              
        end
        
        if(@EntCodeFullfillMdId is not null)--courses for fullfil
        begin
         if exists(select 'd' from [dbo].[ENT_COURSE_MD_DATA] where [ENT_MAIN_ID]=@EntMainId and [ED_COURSE_ID]=@EdCourseId and [ENT_CODE_FULLFILL_MD_ID] is not null
         and [ENT_COURSE_MD_DATA_ID] != @EntCourseMdDataId)
            begin
              RAISERROR('COS_ENT_COURSE_MD',16,-1)
              RETURN 
            end              
        end
				-- Modify the updatable columns
				UPDATE
					[dbo].[ENT_COURSE_MD_DATA]
				SET
					[ENT_MAIN_ID] = @EntMainId
					,[ED_COURSE_ID] = @EdCourseId
					,[ED_CODE_GRADING_ID] = @EdCodeGradingId
					,[ENT_CODE_PRECOND_MD_ID] = @EntCodePrecondMdId
					,[ENT_CODE_FULLFILL_MD_ID] = @EntCodeFullfillMdId
				WHERE
[ENT_COURSE_MD_DATA_ID] = @EntCourseMdDataId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_CODE_GRADING_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_GRADING table
-- Table Comment: جدول أكواد التقديرات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@SymbolAr" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
        <parameter name="@SymbolEn" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
        <parameter name="@GradOrder" type="nvarchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault="" />
        <parameter name="@GradCode" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			     
        
           declare @MaxEdCodeGradingId numeric(5,0)
        select  @MaxEdCodeGradingId =max(ED_CODE_GRADING_ID)from ED_CODE_GRADING;
         if( @MaxEdCodeGradingId is null)
            set  @MaxEdCodeGradingId=0;
            
          set  @MaxEdCodeGradingId= @MaxEdCodeGradingId+1;  
          

        if(@GradOrder is not null)
        begin
         if exists (select 'd' from ED_CODE_GRADING where GRAD_ORDER=@GradOrder)
           begin
              RAISERROR('COS_GRADE_ORDER',16,-1)
              RETURN 
           end
        end


        
				INSERT INTO [dbo].[ED_CODE_GRADING]
					(
					[ED_CODE_GRADING_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[SYMBOL_AR]
					,[SYMBOL_EN]
					,[GRAD_ORDER]
					,[GRAD_CODE]
					)
				VALUES
					(
					@MaxEdCodeGradingId
					,@DescrAr
					,@DescrEn
					,@SymbolAr
					,@SymbolEn
					,@GradOrder
					,@GradCode
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ED_CODE_GRADING_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_CODE_GRADING table
-- Table Comment: جدول أكواد التقديرات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@OriginalEdCodeGradingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@SymbolAr" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
        <parameter name="@SymbolEn" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
        <parameter name="@GradOrder" type="nvarchar" direction="Input" size="2" precision="0" scale="0" param="(2)" nulldefault="" />
        <parameter name="@GradCode" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
                if(@GradOrder is not null)
        begin
         if exists (select 'd' from ED_CODE_GRADING where GRAD_ORDER=@GradOrder and ED_CODE_GRADING_ID!=@EdCodeGradingId)
           begin
              RAISERROR('COS_GRADE_ORDER',16,-1)
              RETURN 
           end
        end

        
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_CODE_GRADING]
				SET
					[ED_CODE_GRADING_ID] = @EdCodeGradingId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[SYMBOL_AR] = @SymbolAr
					,[SYMBOL_EN] = @SymbolEn
					,[GRAD_ORDER] = @GradOrder
					,[GRAD_CODE] = @GradCode
				WHERE
[ED_CODE_GRADING_ID] = @OriginalEdCodeGradingId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_VIOL_GetByViolatDate_VioID" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_VIOL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT DISTINCT 
					
					               ED_STUD_VIOL.ED_ACAD_YEAR_ID, ED_STUD_VIOL.ED_CODE_SEMESTER_ID, ED_STUD_VIOL.VIOL_DATE, ED_STUD_VIOL.GS_CDE_VIOL_ID, 
                      ED_STUD_VIOL.GROUP_ID, ED_STUD_VIOL.VIOL_SERIAL, ED_STUD_VIOL.GS_CDE_CAMPUS_ID, ED_STUD_VIOL.SC_BUILDING_ID, 
                      ED_STUD_VIOL.ERP_ORG_TREE_FROM_ID, ED_STUD_VIOL.ERP_ORG_TREE_TO_ID, ED_STUD_VIOL.GS_CDE_PENALTY_ID, ED_STUD_VIOL.PNLTY_DATE, 
                      ED_STUD_VIOL.NOTES, ED_STUD_VIOL.EXPEL_FLG, ED_STUD_VIOL.ED_CODE_SEMESTER_STOP_ID, ED_STUD_VIOL.ED_ACAD_YEAR_STOP_ID, 
                      ED_STUD_VIOL.BAN_FEE, ED_STUD_VIOL.EXEC_GLG, ED_STUD_VIOL.DROP_FLG, GS_CDE_VIOL.DESCR_EN, GS_CDE_VIOL.DESCR_AR,GS_CDE_VIOL.GS_CDE_VIOL_CAT_ID
				FROM  ED_STUD_VIOL INNER JOIN
                      GS_CDE_VIOL ON ED_STUD_VIOL.GS_CDE_VIOL_ID = GS_CDE_VIOL.GS_CDE_VIOL_ID
								
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ed_stud_problem_Students" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_VIOL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@StudFacultyCode" type="nvarchar" direction="Input" size="30" precision="1" scale="0" nulldefault=""/>
        <parameter name="@GsCdeViolCatId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@GsCdeViolId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@ViolFromDate" type="date" direction="Input" size="5" precision="1" scale="0"  nulldefault=""/>
        <parameter name="@ViolToDate" type="date" direction="Input" size="5" precision="1" scale="0"  nulldefault=""/>
        <parameter name="@StudentName" type="nvarchar" direction="Input" size="150" precision="1" scale="0" nulldefault=""/>
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@IsEnglish" type="bit" direction="Input" size="5" precision="6" scale="0" nulldefault=""/>


      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
        SELECT  ed_stud_problem.ED_ACAD_YEAR_ID, ed_stud_problem.ED_CODE_SEMESTER_ID, ed_stud_problem.PROB_DATE, ed_stud_problem.GS_CDE_VIOL_ID, 
		       
		        ed_stud_problem.GS_CODE_UNIV_ORG_ID_FRM, ed_stud_problem.GS_CODE_UNIV_ORG_ID_TO, 
		        ed_stud_problem.DECISION, ed_stud_problem.ED_CODE_SEMESTER_ID, ed_stud_problem.ED_ACAD_YEAR_ID, GS_CDE_VIOL.DESCR_EN, GS_CDE_VIOL.DESCR_AR, 
		        ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN,   
		        ed_stud_problem.ed_stud_problem_ID, ed_stud_problem.ED_STUD_ID, GS_CDE_VIOL.GS_CDE_VIOL_CAT_ID, GS_CDE_VIOL_CAT.DESCR_AR AS CDESCRAR, 
		        GS_CDE_VIOL_CAT.DESCR_EN AS CDESCREN 
       FROM         ed_stud_problem INNER JOIN
                      GS_CDE_VIOL ON ed_stud_problem.GS_CDE_VIOL_ID = GS_CDE_VIOL.GS_CDE_VIOL_ID INNER JOIN
                      ED_STUD ON ed_stud_problem.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID AND (ED_STUD_FACULTY.IS_ACTIVE = 1 OR
                      ED_STUD_FACULTY.GRADUATES_FLAG = 1)  LEFT OUTER JOIN
                      GS_CDE_VIOL_CAT ON GS_CDE_VIOL.GS_CDE_VIOL_CAT_ID = GS_CDE_VIOL_CAT.GS_CDE_VIOL_CAT_ID
                      
        where (@AcadYearId is null or @AcadYearId = 0 or ed_stud_problem.ED_ACAD_YEAR_ID = @AcadYearId)
        and (@EdCodeSemesterId is null or @EdCodeSemesterId = 0 or ed_stud_problem.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
        and (@AsFacultyInfoId is null or @AsFacultyInfoId = 0 or ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
        and (@StudFacultyCode is null or @StudFacultyCode = 0 or ED_STUD_FACULTY.STUD_FACULTY_CODE = @StudFacultyCode)
        and (@GsCdeViolCatId is null or @GsCdeViolCatId = 0 or GS_CDE_VIOL_CAT.GS_CDE_VIOL_CAT_ID = @GsCdeViolCatId)
        and (@GsCdeViolId is null or @GsCdeViolId = 0 or dbo.ed_stud_problem.GS_CDE_VIOL_ID = @GsCdeViolId)
        and (@ViolFromDate is null or ed_stud_problem.PROB_DATE >= @ViolFromDate)
        and (@ViolToDate is null or ed_stud_problem.PROB_DATE <= @ViolToDate)

        and (@StudentName is null or ( 
								        case when @IsEnglish = 1 then  ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end
								        like case when @NamePolicy = 1 then '%' + @StudentName + '%'
										          when @NamePolicy = 2 then @StudentName + '%'
										          else @StudentName end
							          )
	        );

        SELECT @@ROWCOUNT
        SET ANSI_NULLS ON

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_VIOL_Students" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_VIOL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@StudFacultyCode" type="nvarchar" direction="Input" size="30" precision="1" scale="0" nulldefault=""/>
        <parameter name="@GsCdeViolCatId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@GsCdeViolId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@ViolFromDate" type="date" direction="Input" size="5" precision="1" scale="0"  nulldefault=""/>
        <parameter name="@ViolToDate" type="date" direction="Input" size="5" precision="1" scale="0"  nulldefault=""/>
        <parameter name="@StudentName" type="nvarchar" direction="Input" size="150" precision="1" scale="0" nulldefault=""/>
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@IsEnglish" type="bit" direction="Input" size="5" precision="6" scale="0" nulldefault=""/>
        <parameter name="@Exec_Glg" type="bit" direction="Input" size="5" precision="6" scale="0" nulldefault=""/>
        <parameter name="@GsCdePenaltyId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
        SELECT  ED_STUD_VIOL.ED_ACAD_YEAR_ID, ED_STUD_VIOL.ED_CODE_SEMESTER_ID, ED_STUD_VIOL.VIOL_DATE, ED_STUD_VIOL.GS_CDE_VIOL_ID, 
		        ED_STUD_VIOL.GROUP_ID, ED_STUD_VIOL.VIOL_SERIAL, ED_STUD_VIOL.GS_CDE_CAMPUS_ID, ED_STUD_VIOL.SC_BUILDING_ID, 
		        ED_STUD_VIOL.ERP_ORG_TREE_FROM_ID, ED_STUD_VIOL.ERP_ORG_TREE_TO_ID, ED_STUD_VIOL.GS_CDE_PENALTY_ID, ED_STUD_VIOL.PNLTY_DATE, 
		        ED_STUD_VIOL.NOTES, ED_STUD_VIOL.EXPEL_FLG, ED_STUD_VIOL.ED_CODE_SEMESTER_STOP_ID, ED_STUD_VIOL.ED_ACAD_YEAR_STOP_ID, 
		        ED_STUD_VIOL.BAN_FEE, ED_STUD_VIOL.EXEC_GLG, ED_STUD_VIOL.DROP_FLG, GS_CDE_VIOL.DESCR_EN, GS_CDE_VIOL.DESCR_AR, 
		        ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, GS_CDE_PENALTY.DESCR_AR AS Expr1, GS_CDE_PENALTY.DESCR_EN AS Expr2, 
		        ED_STUD_VIOL.ED_STUD_VIOL_ID, ED_STUD_VIOL.ED_STUD_ID, GS_CDE_VIOL.GS_CDE_VIOL_CAT_ID, GS_CDE_VIOL_CAT.DESCR_AR AS CDESCRAR, 
		        GS_CDE_VIOL_CAT.DESCR_EN AS CDESCREN, SC_BUILDING.DESCR_AR AS Expr3, SC_BUILDING.DESCR_EN AS Expr4
       FROM         ED_STUD_VIOL INNER JOIN
                      GS_CDE_VIOL ON ED_STUD_VIOL.GS_CDE_VIOL_ID = GS_CDE_VIOL.GS_CDE_VIOL_ID INNER JOIN
                      ED_STUD ON ED_STUD_VIOL.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID AND (ED_STUD_FACULTY.IS_ACTIVE = 1 OR
                      ED_STUD_FACULTY.GRADUATES_FLAG = 1) LEFT OUTER JOIN
                      SC_BUILDING ON ED_STUD_VIOL.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID LEFT OUTER JOIN
                      GS_CDE_VIOL_CAT ON GS_CDE_VIOL.GS_CDE_VIOL_CAT_ID = GS_CDE_VIOL_CAT.GS_CDE_VIOL_CAT_ID LEFT OUTER JOIN
                      GS_CDE_PENALTY ON ED_STUD_VIOL.GS_CDE_PENALTY_ID = GS_CDE_PENALTY.GS_CDE_PENALTY_ID
        where (@AcadYearId is null or @AcadYearId = 0 or ED_STUD_VIOL.ED_ACAD_YEAR_ID = @AcadYearId)
        and (@EdCodeSemesterId is null or @EdCodeSemesterId = 0 or ED_STUD_VIOL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
        and (@AsFacultyInfoId is null or @AsFacultyInfoId = 0 or ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
        and (@StudFacultyCode is null or @StudFacultyCode = 0 or ED_STUD_FACULTY.STUD_FACULTY_CODE = @StudFacultyCode)
        and (@GsCdeViolCatId is null or @GsCdeViolCatId = 0 or GS_CDE_VIOL_CAT.GS_CDE_VIOL_CAT_ID = @GsCdeViolCatId)
        and (@GsCdeViolId is null or @GsCdeViolId = 0 or GS_CDE_VIOL.GS_CDE_VIOL_ID = @GsCdeViolId)
        and (@ViolFromDate is null or ED_STUD_VIOL.VIOL_DATE >= @ViolFromDate)
        and (@ViolToDate is null or ED_STUD_VIOL.VIOL_DATE <= @ViolToDate)
        and (@Exec_Glg=0 or EXEC_GLG=@Exec_Glg)
        and (@GsCdePenaltyId=0 or ED_STUD_VIOL.GS_CDE_PENALTY_ID= @GsCdePenaltyId)
        and (@StudentName is null or ( 
								        case when @IsEnglish = 1 then  ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end
								        like case when @NamePolicy = 1 then '%' + @StudentName + '%'
										          when @NamePolicy = 2 then @StudentName + '%'
										          else @StudentName end
							          )
	        );

        SELECT @@ROWCOUNT
        SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetMaxGroupID" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Hadeer Saied)
-- Purpose: GetmaxGroup ID for violation  students bulk
----------------------------------------------------------------------------------------------------
*/
]]>


      </comment>
      <body>
        <![CDATA[
		select ISNULL( MAX(GROUP_ID)+ 1,0) + 1   from dbo.ED_STUD_VIOL					
			]]>
      </body>

    </procedure>


    <procedure owner="dbo" name="SP_UpdateSetCurrentSem" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose:  UpdateSetCurrentSem
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ACD_YEAR" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@ent_main_id" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
	

declare @AS_FACULTY_INFO_ID numeric
select @AS_FACULTY_INFO_ID=AS_FACULTY_INFO_ID from entity_main where ent_main_id=@ent_main_id
declare @SEMESTER_ORDER numeric 
select @SEMESTER_ORDER=SEMESTER_ORDER from ED_CODE_SEMESTER  where ED_CODE_SEMESTER_ID=@ED_CODE_SEMESTER_ID

if exists (select 1 from ed_semester_OPEN ,ED_CODE_SEMESTER WHERE ed_semester_OPEN.ED_CODE_SEMESTER_ID=ED_CODE_SEMESTER.ED_CODE_SEMESTER_id
AND dbo.ED_SEMESTER_OPEN.ENT_MAIN_ID = @ent_main_id  AND  IS_CLOSED=0 AND 
			(
					(ed_acad_year_id=@ACD_YEAR and ED_CODE_SEMESTER.SEMESTER_ORDER< @SEMESTER_ORDER)
					or 
						ed_acad_year_id<@ACD_YEAR)
			)
			begin
				 RAISERROR('ThereAreSemStillOpen',16,-1)
			     RETURN
			end
if exists ( select 1 from ed_stud_semester,ED_CODE_SEMESTER ,ed_semester_open
WHERE ed_stud_semester.ED_CODE_SEMESTER_ID=ED_CODE_SEMESTER.ED_CODE_SEMESTER_id
and ed_semester_open.ed_semester_open_id=ed_stud_semester.ed_semester_open_id
and   
ed_stud_semester.AS_FACULTY_INFO_ID=@AS_FACULTY_INFO_ID and(
			(ed_stud_semester.ed_acad_year_id=@ACD_YEAR and ED_CODE_SEMESTER.SEMESTER_ORDER> @SEMESTER_ORDER)
or 
ed_stud_semester.ed_acad_year_id>@ACD_YEAR)and ed_semester_open.is_current=1)

begin
RAISERROR('ThereAreSemOpenAtLaterAcadymicYear',16,-1)
              RETURN
end
--to update all semester opend in same faculty to has is_current=0 
update ed_semester_OPEN set  is_current=0
where  ent_main_id=@ent_main_id


--to update all semester opend in same faculty to has is_current=1 and is_closed=0
update ed_semester_OPEN set is_closed=0 , is_current=1
where ed_acad_year_id=@ACD_YEAR
and ED_CODE_SEMESTER_ID=@ED_CODE_SEMESTER_ID
and ent_main_id=@ent_main_id
			]]>
      </body>

    </procedure>


    <procedure owner="dbo" name="SP_UpdateUserAccountDate" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Update UserAccountDate
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FROM_DATE" type="DateTime" direction="Input" size="5" precision="6" scale="0" nulldefault=""/>
        <parameter name="@TO_DATE" type="DateTime" direction="Input" size="5" precision="6" scale="0" nulldefault=""/>
        <parameter name="@SE_USER_ACCNT_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
			update dbo.SE_USER_ACCNT
set FROM_DATE=@FROM_DATE
,TO_DATE=@TO_DATE
where SE_USER_ACCNT_ID=@SE_USER_ACCNT_ID
					
			]]>
      </body>

    </procedure>


    <procedure owner="dbo" name="SP_UpdateEdCourseWhenDeleteGsCourseFlg" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Update EdCourse When Delete GsCourseCodeFlg
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GS_COURSE_ELECT_TYPE_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
			  update ed_course set 
        GS_COURSE_ELECT_TYPE_ID=null,
        elect_flg=null
    where GS_COURSE_ELECT_TYPE_ID=@GS_COURSE_ELECT_TYPE_ID
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="SP_GetGroupByTchngMethd" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Select records from ED_CODE_COURSE_TEACHING accourding to course id
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_CODE_COURSE_TEACHING_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
select SC_SCHEDULE_DTL.* from  SC_SCHEDULE_DTL,SC_SCHEDULE_HDR,ED_CODE_COURSE_TEACHING
where SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID=SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID
and ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID=SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID
and ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID=@ED_CODE_COURSE_TEACHING_ID
			]]>
      </body>

    </procedure>



    <procedure owner="dbo" name="SP_GetCODE_COURSE_TEACHINGBy_courseID" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Select records from ED_CODE_COURSE_TEACHING accourding to course id
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
        -- changed by Elsayed Mohamed Hosny
select ED_CODE_COURSE_TEACHING.* from ED_CODE_COURSE_TEACHING join ED_CDE_TCHNG_MTHD on
ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID 
join ed_course_tchng on ed_course_tchng.ED_CODE_COURSE_TEACHING_ID=ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID
where ed_course_tchng.ed_course_id=@EdCourseId
					
			]]>
      </body>

    </procedure>




    <procedure owner="dbo" name="SP_GetStffCoursePref" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Select records from function to get sympole of Days
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@STF_MEMBER_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
		select ED_STAFF_COURSE_PREF.* ,ed_course.COURSE_CODE,ed_course.COURSE_DESCR_AR,ed_course.COURSE_DESCR_EN
    from ED_STAFF_COURSE_PREF inner join ed_course
    on ED_STAFF_COURSE_PREF.ed_course_id=ed_course.ed_course_id
    and ED_ACAD_YEAR_ID=@ACAD_YEAR_ID
    and ED_CODE_SEMESTER_ID=@CODE_SEMESTER_ID
    and SA_STF_MEMBER_ID=@STF_MEMBER_ID
					
			]]>
      </body>

    </procedure>


    <procedure owner="dbo" name="SP_GetScheduleDtlDayes" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Select records from function to get sympole of Days
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@SC_TCHNG_SLOT_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@SC_BUILDING_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@SC_HALL_ID" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
			select dbo.GetScheduleDtlDayes(@ScScheduleDtlId,@SC_TCHNG_SLOT_ID,@SC_BUILDING_ID,@SC_HALL_ID)
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="FilterStudDataForMails">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

declare @nodePath nvarchar(50);
  if(@EntityMainId is not null)
  select @nodePath=node_path from ENTITY_MAIN where ENT_MAIN_ID = @EntityMainId;

if(@AsFacultyInfoId is null )
    SELECT ED_STUD.*,                                           null as STUD_FACULTY_CODE,
                                          0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn

FROM  ED_STUD 
               LEFT OUTER JOIN
               GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
               GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
               GS_CODE_RELIGION ON ED_STUD.GS_CODE_RELIGION_ID = GS_CODE_RELIGION.GS_CODE_RELIGION_ID
where (@AsFacultyInfoId is null and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID]))
and(
                    (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%') and
                    (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId) and
              (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId) and
                    
           (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
        )

 else
SELECT ED_STUD.*,  ED_STUD_FACULTY.STUD_FACULTY_CODE as STUD_FACULTY_CODE, ED_STUD_FACULTY.AS_FACULTY_INFO_ID as AS_FACULTY_INFO_ID,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_Ar else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_Ar,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end  as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_Ar else GS_COUNTRY_INFO.DESCR_EN end as DESCR_Ar,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,--[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1)
                      '' as GetStudStatesEn,--[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) 
                      case when @LangNum=1 then ED_CODE_LEVEL.DESCR_AR else ED_CODE_LEVEL.DESCR_EN end as CurrLevelDescr

FROM  ED_STUD_SEMESTER INNER JOIN
      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID 
              and(ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId  and 
                    (@AsFacultyInfoId=0 or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)   and
                    --ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
                    (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4) and
                    (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%') and
                    (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId) and
              (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId) and
             (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                ) INNER JOIN
       ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID  and
                     (ED_STUD_FACULTY.IS_ACTIVE=1 and
                      (@AsFacultyInfoId=0 or ED_STUD_FACULTY.AS_FACULTY_INFO_ID =@AsFacultyInfoId))INNER JOIN
       ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID and
       ((@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId))  LEFT OUTER JOIN
               GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
               GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
               GS_CODE_RELIGION ON ED_STUD.GS_CODE_RELIGION_ID = GS_CODE_RELIGION.GS_CODE_RELIGION_ID
WHERE  (@nodePath is null or @nodePath='' or EXISTS (SELECT 1 FROM ED_STUD_STATE INNER JOIN ENTITY_MAIN ON ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID  and ED_STUD_STATE.ENT_MAIN_ID= ENTITY_MAIN.ENT_MAIN_ID AND ENTITY_MAIN.NODE_PATH like @nodePath+'%' ))
and  ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%'

			
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="SP_GetMaxChgCode" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Select records from function to get sympole of Days
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>

      <body>
        <![CDATA[
			select max(ED_STUD_CODE_CHNG_ID) from ED_STUD_CODE_CHNG
where ED_STUD_ID=@EdStudId
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GenerateStudCodewithoutUpdate" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Table Comment: filter characters for search
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[	

       
 declare @BuildStudCode numeric(1, 0)
          select @BuildStudCode=BUILD_STUD_CODE
          from SYSTEM_PARAM

          declare @EdAcadCode nvarchar(30)
          select @EdAcadCode=ED_ACAD_YEAR.YEAR_CODE
          from ED_ACAD_YEAR
          where ED_ACAD_YEAR.ED_ACAD_YEAR_ID=@EdAcadYearId

          declare @EntityPath nvarchar(90)
          declare @StateNotation nvarchar(20)
          declare @StateNotationFac nvarchar(20)

SELECT @StateNotationFac=t.STATE_NOTATION FROM (
SELECT  TOP 1   STATE_NOTATION
FROM         ENTITY_MAIN WHERE AS_FACULTY_INFO_ID = @AsFacultyInfoId
AND ENT_CODE_ENTITY_TYPE_ID = 2
) AS t

SELECT @StateNotation=t.STATE_NOTATION FROM (
SELECT  TOP 1   STATE_NOTATION
FROM dbo.ENTITY_MAIN WHERE NODE_PATH = (SELECT SUBSTRING( NODE_PATH,1,3) FROM ENTITY_MAIN WHERE AS_FACULTY_INFO_ID = @AsFacultyInfoId
AND ENT_CODE_ENTITY_TYPE_ID = 2  )
) AS t

             declare @Temp_Student_Code   varchar(30)
 if(@BuildStudCode=1)--univacad
          begin
          			
            select @Temp_Student_Code =max(isnull(substring(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE,(len(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE)-4),5),0))
			FROM         ED_STUD INNER JOIN
						 ED_STUD_FACULTY ON 
			ED_STUD_FACULTY.AS_FACULTY_INFO_ID =@AsFacultyInfoId and ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID 
   
            
             if(@Temp_Student_Code is null)
			   begin
				   set @Temp_Student_Code='00001';
			   end
				else
				 begin
         		if( SUBSTRING(@Temp_Student_Code,1,2) = 'e+')
				 set @Temp_Student_Code = SUBSTRING(@Temp_Student_Code,3,3);
					 set @Temp_Student_Code=convert(numeric(5,0), @Temp_Student_Code)+1;
					if(len (@Temp_Student_Code)<5)
					 begin
					  set @Temp_Student_Code= REPLICATE(0,5-len (@Temp_Student_Code))+@Temp_Student_Code
					 end  
				 end
                       
            select @StateNotation+@EdAcadCode+@Temp_Student_Code
            
          end


          else--univfacacad
          begin
          
			  if(@BuildStudCode=2)--univfacacad
			  begin
			  
			  declare @StudSerial numeric(9,0)

				select @Temp_Student_Code =max(isnull(substring(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE,(len(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE)-4),5),0))

				FROM         ED_STUD INNER JOIN
							 ED_STUD_FACULTY ON 
				ED_STUD_FACULTY.AS_FACULTY_INFO_ID =@AsFacultyInfoId and ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID 
	   
	            
				 if(@Temp_Student_Code is null)
				   begin
					   set @Temp_Student_Code='00001';
				   end
					else
					 begin
			 if( SUBSTRING(@Temp_Student_Code,1,2) = 'e+')
					 set @Temp_Student_Code = SUBSTRING(@Temp_Student_Code,3,3);
						 set @Temp_Student_Code=convert(numeric(5,0), @Temp_Student_Code)+1;
						if(len (@Temp_Student_Code)<5)
						 begin
						  set @Temp_Student_Code= REPLICATE(0,5-len (@Temp_Student_Code))+@Temp_Student_Code
						 end  
					 end
					 
						
				select @StateNotation+@StateNotationFac+@EdAcadCode+@Temp_Student_Code

			  end
			  else
			  begin
			  
			  if(@BuildStudCode=3)
			  begin
			  
				Declare @v_Serial_Count int =4,
				@New_Code nvarchar(4),
				@Stud_Code nvarchar(8),
				@v_Stud_Enroll_AcadYear varchar(4) --=2012
				;

				--@v_Stud_Enroll_AcadYear
				select @v_Stud_Enroll_AcadYear=ED_ACAD_YEAR.YEAR_CODE from ED_ACAD_YEAR where ED_ACAD_YEAR.ED_ACAD_YEAR_ID = @EdAcadYearId;

				select  @New_Code=convert(nvarchar,max(right(STUD_FACULTY_CODE,@v_Serial_Count))+1)
				From ed_stud_faculty 
			where ISNUMERIC(right(STUD_FACULTY_CODE,@v_Serial_Count))=1
			AND LEN(right(STUD_FACULTY_CODE,@v_Serial_Count))>=@v_Serial_Count;

				if @New_Code is null 
				set @New_Code='0001'
							
              if(len(@New_Code)=1)
				set @New_Code = '000'+@New_Code;
				else if(len(@New_Code)=2)
				set @New_Code = '00'+@New_Code;
				else if(len(@New_Code)=3)
				set @New_Code = '0'+@New_Code;
              
				set @Stud_Code= @v_Stud_Enroll_AcadYear+ @New_Code;

				--print @Stud_Code
	                    						
				select @Stud_Code
			  end
          ELSE
          begin
       	  if(@BuildStudCode=4)
			  begin
			  			  
			  DECLARE @Stud_Code2 nvarchar(15);
			  SET @v_Serial_Count =4;
				
				--@v_Stud_Enroll_AcadYear
				select @v_Stud_Enroll_AcadYear=ED_ACAD_YEAR.YEAR_CODE from ED_ACAD_YEAR where ED_ACAD_YEAR.ED_ACAD_YEAR_ID = @EdAcadYearId;

				select  @New_Code=convert(nvarchar,max(right(STUD_FACULTY_CODE,@v_Serial_Count))+1)
				From ed_stud_faculty 
			where ISNUMERIC(right(STUD_FACULTY_CODE,@v_Serial_Count))=1
			AND LEN(right(STUD_FACULTY_CODE,@v_Serial_Count))>=@v_Serial_Count;

				if @New_Code is null 
				set @New_Code='0001'
							
              if(len(@New_Code)=1)
				set @New_Code = '000'+@New_Code;
				else if(len(@New_Code)=2)
				set @New_Code = '00'+@New_Code;
				else if(len(@New_Code)=3)
				set @New_Code = '0'+@New_Code;
              
				set @Stud_Code2= @v_Stud_Enroll_AcadYear+@StateNotationFac+@New_Code;

				--print @Stud_Code
				select @Stud_Code2
			  END
			  END
			END
			END
          
          
          
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_CODE_CHNG_InsertNewCode" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Select records from function to insert changed code
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@NewStudCode" type="nvarchar" direction="Input" size="50" precision="6" scale="0" nulldefault=""/>
        <parameter name="@ChangDate" type="datetime" direction="Input" size="50" precision="6" scale="0" nulldefault=""/>
        <parameter name="@NOTES" type="nvarchar" direction="Input" size="250" precision="6" scale="0" nulldefault=""/>
        <parameter name="@OldStudCode" type="nvarchar" direction="Input" size="50" precision="6" scale="0" nulldefault=""/>
        <parameter name="@as_faculty_info_id" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
		declare   @ED_STUD_CODE_CHNG_ID int
    select @ED_STUD_CODE_CHNG_ID = max(ED_STUD_CODE_CHNG_ID) from  dbo.ED_STUD_CODE_CHNG
         if(@ED_STUD_CODE_CHNG_ID is null)
             set @ED_STUD_CODE_CHNG_ID=1
         set @ED_STUD_CODE_CHNG_ID = @ED_STUD_CODE_CHNG_ID+1
insert into ED_STUD_CODE_CHNG (ED_STUD_CODE_CHNG_ID,ED_STUD_ID,OLD_STUD_CODE,NEW_STUD_CODE,CHNG_DATE,IS_LAST,NOTES)
values(@ED_STUD_CODE_CHNG_ID,@EdStudId,@OldStudCode,@NewStudCode,@ChangDate,1,@NOTES)
update ed_stud_faculty set stud_faculty_code=@NewStudCode where ed_stud_id=@EdStudId and Is_active=1 and as_faculty_info_id=@as_faculty_info_id
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="ED_STUD_CODE_CHNG_UpdateNewCode" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk)
-- Purpose: Select records from function to insert changed code
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@NewStudCode" type="nvarchar" direction="Input" size="50" precision="6" scale="0"  nulldefault=""/>
        <parameter name="@ChangDate" type="datetime" direction="Input" size="50" precision="6" scale="0"  nulldefault=""/>
        <parameter name="@NOTES" type="nvarchar" direction="Input" size="250" precision="6" scale="0" nulldefault=""/>
        <parameter name="@OldStudCode" type="nvarchar" direction="Input" size="50" precision="6" scale="0" nulldefault=""/>
        <parameter name="@ED_STUD_CODE_CHNG_ID" type="int" direction="Input" size="50" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
update ED_STUD_CODE_CHNG set 
OLD_STUD_CODE=@OldStudCode,NEW_STUD_CODE=@NewStudCode,CHNG_DATE=@ChangDate,IS_LAST=1,NOTES=@NOTES
where ED_STUD_CODE_CHNG_ID=@ED_STUD_CODE_CHNG_ID
update ed_stud_faculty set stud_faculty_code=@NewStudCode where ed_stud_id=@EdStudId and Is_active=1
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetAcadymicYearGrThanCurrentYear" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia Farouk to get the data of specific student which change the year)
-- Purpose: Select records from the ED_STUD_CODE_CHNG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@as_faculty_info_id" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
		   select ED_ACAD_YEAR.DESCR_AR,ED_ACAD_YEAR.DESCR_EN,ED_ACAD_YEAR.ED_ACAD_YEAR_ID
    from dbo.ED_ACAD_YEAR
    where ED_ACAD_YEAR_ID > (select distinct ED_ACAD_YEAR_JOIN_ID from ed_stud_faculty where ed_stud_id=@EdStudId and is_active=1 and as_faculty_info_id=@as_faculty_info_id)
    
				SELECT @@ROWCOUNT
					
			]]>
      </body>

    </procedure>
    <procedure owner="dbo" name="SP_STUD_CODE_CHNG" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia Farouk to get the data of specific student which change the year)
-- Purpose: Select records from the ED_STUD_CODE_CHNG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
		select ED_STUD_CODE_CHNG.ED_STUD_CODE_CHNG_ID,dbo.ED_STUD_CODE_CHNG.ED_STUD_ID,
dbo.ED_STUD_CODE_CHNG.OLD_STUD_CODE,
dbo.ED_STUD_CODE_CHNG.NEW_STUD_CODE
,convert(varchar, CHNG_DATE, 103),REASON,IS_LAST,NOTES
,ed_Stud.FULL_NAME_AR,ed_Stud.FULL_NAME_EN
        
        from dbo.ED_STUD_CODE_CHNG inner join ED_STUD 
        on ED_STUD_CODE_CHNG.ED_STUD_ID=dbo.ED_STUD.ED_STUD_ID
        where ED_STUD_CODE_CHNG.ED_STUD_ID=@EdStudId
          order by ED_STUD_CODE_CHNG.ED_STUD_ID
				SELECT @@ROWCOUNT
					
			]]>
      </body>

    </procedure>


    <procedure owner="dbo" name="ED_OFFERING_COURSE_GetByEdOfferingId" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_OFFERING_COURSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SELECT
	  ED_OFFERING_COURSE.*
    FROM
	ED_OFFERING_COURSE inner join ED_COURSE
  on ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID
				WHERE
					[ED_OFFERING_ID] = @EdOfferingId
          order by ED_COURSE.course_code
				SELECT @@ROWCOUNT
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="ED_OFFERING_COURSE_GetForOffering" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@Flg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[

declare @maxEdOfferingId numeric;
declare @EntMainIdCourse NUMERIC;
SET @EntMainIdCourse = @EntMainId;
if(@EntMainId <>0)
BEGIN

if not exists(select 'a' from ED_OFFERING 
where ((@AsFacultyInfoId = 0 and ED_OFFERING.AS_FACULTY_INFO_ID is null)or ED_OFFERING.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_OFFERING.ENT_MAIN_ID = @EntMainId)
begin

declare @EdOfferingId numeric;
select @EdOfferingId=ISNULL( MAX(ED_OFFERING_ID),0) +1 from ED_OFFERING;

IF(@EntMainId = 0 AND @AsFacultyInfoId = 0)
	begin
		SET @AsFacultyInfoId = NULL
		insert into ED_OFFERING
		values(@EdOfferingId,@AsFacultyInfoId,@EdCodeSemesterId,@EdAcadYearId,@EntMainId,null,0);
	END
	ELSE
	BEGIN
		
		if not exists(select 'a' from ED_OFFERING 
		where  ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
		and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
		AND ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
		and ED_OFFERING.ENT_MAIN_ID = @EntMainId)
		begin

		select @maxEdOfferingId=ISNULL( MAX(ED_OFFERING_ID),0) +1 from ED_OFFERING;

		insert into ED_OFFERING
		values(@maxEdOfferingId,@AsFacultyInfoId,@EdCodeSemesterId,@EdAcadYearId,@EntMainId,null,0);

		end
	END
end
END
ELSE
BEGIN

	IF(@EntMainId = 0 AND @AsFacultyInfoId = 0)
	BEGIN
		SET @AsFacultyInfoId = NULL;
		SELECT @EntMainId=t.ent_main_id FROM (
		SELECT TOP 1 ent_main_id FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID=1)AS t
		SET @EntMainIdCourse = NULL;
		if not exists(select 'a' from ED_OFFERING 
		where  ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
		and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
		and ED_OFFERING.ENT_MAIN_ID = @EntMainId)
		begin

		
		select @maxEdOfferingId=ISNULL( MAX(ED_OFFERING_ID),0) +1 from ED_OFFERING;

		insert into ED_OFFERING
		values(@maxEdOfferingId,@AsFacultyInfoId,@EdCodeSemesterId,@EdAcadYearId,@EntMainId,null,0);

		end
	END
	ELSE
	BEGIN
		
		if not exists(select 'a' from ED_OFFERING 
		where  ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
		and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
		AND ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
		and ED_OFFERING.ENT_MAIN_ID = @EntMainId)
		begin

		select @maxEdOfferingId=ISNULL( MAX(ED_OFFERING_ID),0) +1 from ED_OFFERING;

		insert into ED_OFFERING
		values(@maxEdOfferingId,@AsFacultyInfoId,@EdCodeSemesterId,@EdAcadYearId,@EntMainId,null,0);

		end
	END
	
END

if(@Flg = 0)
begin
SELECT     ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID, 
			ED_OFFERING_COURSE.ED_OFFERING_ID, 
			ED_OFFERING_COURSE.ED_COURSE_ID, 
            ED_COURSE.COURSE_CODE, 
            ED_COURSE.COURSE_DESCR_AR, 
            ED_COURSE.COURSE_DESCR_EN, 
            ED_OFFERING_COURSE.MAX_STUD_COUNT,
            ED_OFFERING_COURSE.MIN_ATTEND_NO,
            ED_OFFERING_COURSE.ONLINE_FLG,
            ED_OFFERING_COURSE.SA_STF_MEMBER_ID
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where ((@AsFacultyInfoId is null and ED_OFFERING.AS_FACULTY_INFO_ID IS NULL) or ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (@EntMainId is null or @EntMainId=0 or ED_OFFERING.ENT_MAIN_ID = @EntMainId)
and ((@EntMainIdCourse is null and ED_COURSE.ENT_MAIN_ID IS NULL)OR (@EntMainId is null or @EntMainId=0 or ED_COURSE.ENT_MAIN_ID = @EntMainId))
order by ED_COURSE.COURSE_CODE
end
else
begin

Select   NULL , (select ed_offering_id from ed_offering where ((@AsFacultyInfoId is null and ED_OFFERING.AS_FACULTY_INFO_ID is null) or  ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId) and ed_acad_year_id= @EdAcadYearId and ed_code_semester_id=@EdCodeSemesterId and ent_main_id=@EntMainId) ED_OFFERING_ID, ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, 
                      ED_COURSE.COURSE_DESCR_EN, NULL,NULL

from ED_COURSE  where  
not exists (SELECT 1  
FROM         ED_OFFERING INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID
WHERE     (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
AND ((@AsFacultyInfoId is null and ED_OFFERING.AS_FACULTY_INFO_ID IS NULL ) or ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId)  and ED_OFFERING_COURSE.ED_COURSE_ID=ED_COURSE.ED_COURSE_ID)
and ((@EntMainIdCourse is null and ED_COURSE.ENT_MAIN_ID IS NULL)OR (@EntMainId is null or @EntMainId=0 or ED_COURSE.ENT_MAIN_ID = @EntMainId))
order by COURSE_CODE

end


				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GET_AUD_SE_FORM" >
      <parameters />
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (dalia farouk 14-6-2012)
-- Purpose: Finds forms which we make audit for it
-- Table Comment: se_Form and dbo_ED_STUD_COURSE_REG_ASSESS_CT
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>

      <body>
        <![CDATA[

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   Select distinct tbl.SE_FORM_ID,se_form.DESC_AR,se_form.DESC_EN
From (select distinct SE_FORM_ID
from cdc.dbo_ED_STUD_COURSE_REG_CT
union
select distinct SE_FORM_ID
from cdc.dbo_ED_STUD_COURSE_REG_ASSESS_CT
union
select distinct SE_FORM_ID
from cdc.dbo_ED_STUD_COURSE_CHNG_CT
) tbl inner join se_form on tbl.SE_FORM_ID=se_form.se_form_id


END

				]]>
      </body>
    </procedure>




    <procedure owner="dbo" name="SC_SCHEDULE_DTL_SearchForMaintain" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[

select distinct t1.*,t2.FROM_TIME,t2.TO_TIME,
t2.Dayes,
t2.BUILDING_DESCR_AR,t2.SC_BUILDING_ID,t2.BUILDING_DESCR_EN,t2.SC_HALL_ID,t2.HALL_DESCR_AR,t2.HALL_DESCR_EN ,
CONVERT(TIME, SUBSTRING(CONVERT(NVARCHAR,t2.FROM_TIME),12,LEN(CONVERT(NVARCHAR,t2.FROM_TIME))-10)) FromTime
from (
SELECT    SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID,SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID,SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID, 
			ED_OFFERING_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, 
                      --changed by Elsayed Mohamed
                      ED_CDE_TCHNG_MTHD.DESCR_AR, ED_CDE_TCHNG_MTHD.DESCR_EN, SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
                      SC_SCHEDULE_DTL.GROUP_DESCR_EN,SA_STF_MEMBER.SA_STF_MEMBER_ID,
                      --SA_STF_MEMBER_1.SA_STF_MEMBER_ID as SA_STF_ASS_MEMBER_ID, 
                      SA_STF_MEMBER.STF_FULL_NAME_AR, 
                      SA_STF_MEMBER.STF_FULL_NAME_EN, 
                      --SA_STF_MEMBER_1.STF_FULL_NAME_AR AS STF_ASS_FULL_NAME_AR, 
                      --SA_STF_MEMBER_1.STF_FULL_NAME_EN AS STF_ASS_FULL_NAME_EN,
                      SC_SCHEDULE_DTL.NO_STUDENTS
FROM         SC_SCHEDULE_HDR INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID inner join
                      -- added by elsayed
                      ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                      LEFT OUTER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID --LEFT OUTER JOIN
                      --dbo.SC_SCHEDULE_DTL_EXT_STF ON dbo.SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = dbo.SC_SCHEDULE_DTL_EXT_STF.SC_SCHEDULE_DTL_ID LEFT OUTER join
                      --SA_STF_MEMBER AS SA_STF_MEMBER_1 ON SC_SCHEDULE_DTL_EXT_STF.SA_STF_MAMBER_ID = SA_STF_MEMBER_1.SA_STF_MEMBER_ID
WHERE     (@EdCourseId = 0 or ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId) 
AND 
(
(@AsFacultyInfoId = 0 and ED_OFFERING.AS_FACULTY_INFO_ID IS NULL)or 
(ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId AND (@EntMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntMainId))
) AND 
                      (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) 
                      
) as t1
left outer join
(
select ED_OFFERING_COURSE.ED_COURSE_ID, SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID, SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
,SC_BUILDING.SC_BUILDING_ID,SC_BUILDING.DESCR_AR as BUILDING_DESCR_AR,SC_BUILDING.DESCR_EN as BUILDING_DESCR_EN,SC_HALL.SC_HALL_ID,SC_HALL.DESCR_AR as HALL_DESCR_AR,SC_HALL.DESCR_EN as HALL_DESCR_EN
,SC_SCHEDULE_DTL_DAY.FROM_TIME, SC_SCHEDULE_DTL_DAY.TO_TIME,
[dbo].[GetScheduleDtlDays](SC_SCHEDULE_DTL.[SC_SCHEDULE_DTL_ID],[SC_SCHEDULE_DTL_dAY].fROM_TIME,[SC_SCHEDULE_DTL_dAY].TO_TIME,[SC_SCHEDULE_DTL_dAY].SC_BUILDING_ID,[SC_SCHEDULE_DTL_dAY].SC_HALL_ID) as Dayes
FROM         SC_SCHEDULE_DTL INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID left outer join
                      SC_BUILDING on SC_BUILDING.SC_BUILDING_ID = SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID left outer join
                      SC_HALL on SC_HALL.SC_HALL_ID = SC_SCHEDULE_DTL_DAY.SC_HALL_ID
WHERE     (@EdCourseId = 0 or ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId) AND 

(
(@AsFacultyInfoId = 0 and ED_OFFERING.AS_FACULTY_INFO_ID IS NULL)or 
(ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId AND (@EntMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntMainId))
) AND 
                      (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) 
group by ED_OFFERING_COURSE.ED_COURSE_ID, SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID, SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID,SC_SCHEDULE_DTL_DAY.FROM_TIME, SC_SCHEDULE_DTL_DAY.TO_TIME,SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID,SC_SCHEDULE_DTL_DAY.SC_HALL_ID
,SC_BUILDING.SC_BUILDING_ID,SC_BUILDING.DESCR_AR ,SC_BUILDING.DESCR_EN,SC_HALL.SC_HALL_ID,SC_HALL.DESCR_AR,SC_HALL.DESCR_EN
) as t2
on t1.SC_SCHEDULE_DTL_ID = t2.SC_SCHEDULE_DTL_ID
and t1.ED_COURSE_ID = t2.ED_COURSE_ID
and t1.ED_CODE_COURSE_TEACHING_ID = t2.ED_CODE_COURSE_TEACHING_ID
where(@ScScheduleDtlId=0 or t1.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)

ORDER BY CONVERT(TIME, SUBSTRING(CONVERT(NVARCHAR,t2.FROM_TIME),12,LEN(CONVERT(NVARCHAR,t2.FROM_TIME))-10)),
t1.COURSE_CODE,t1.ED_CODE_COURSE_TEACHING_ID
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CO_STUD_CHEAT_GetCheatIncedints" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CoControlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
-------- Control Cheat Incedint -----------------------------

SELECT     CO_STUD_CHEAT.CO_STUD_CHEAT_ID, ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, 
                      ED_EXAM_SCHDL.EXAM_DATE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, ED_COURSE.COURSE_CODE, 
                      CO_STUD_CHEAT.CHEAT_DTL
FROM         ED_EXAM_SCHDL INNER JOIN
                      ED_COURSE ON ED_EXAM_SCHDL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      CO_STUD_CHEAT INNER JOIN
                      ED_STUD_SEMESTER ON CO_STUD_CHEAT.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      CO_EXAM_SCHDL_PLACE ON CO_STUD_CHEAT.CO_EXAM_SCHDL_PLACE_ID = CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID ON 
                      ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID
where CO_STUD_CHEAT.CO_CONTROL_ID = @CoControlId
and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CO_STUD_CHEAT_GetControlExams" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CoControlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
-------- Control Exams -----------------------------

SELECT   distinct  ED_COURSE.ED_COURSE_ID, ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, 
                      ED_COURSE.COURSE_CODE
FROM         CO_EXAM_SCHDL_PLACE INNER JOIN
                      ED_EXAM_SCHDL ON CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID INNER JOIN
                      SC_BUILDING ON CO_EXAM_SCHDL_PLACE.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      CO_EXAM_COMMITTEE ON SC_BUILDING.SC_BUILDING_ID = CO_EXAM_COMMITTEE.SC_BUILDING_ID INNER JOIN
                      SC_HALL ON CO_EXAM_SCHDL_PLACE.SC_HALL_ID = SC_HALL.SC_HALL_ID AND SC_BUILDING.SC_BUILDING_ID = SC_HALL.SC_BUILDING_ID AND 
                      CO_EXAM_COMMITTEE.SC_HALL_ID = SC_HALL.SC_HALL_ID INNER JOIN
                      ED_COURSE ON ED_EXAM_SCHDL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where CO_EXAM_COMMITTEE.CO_CONTROL_ID = @CoControlId
and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CO_STUD_CHEAT_GetControlExamCommittees" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CoControlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdExamSchdlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null"/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
-------- Control Exams Committee -----------------------------

SELECT   distinct  CO_EXAM_COMMITTEE.CO_EXAM_COMMITTEE_ID, CO_EXAM_COMMITTEE.COMM_NAME_EN
FROM         CO_EXAM_SCHDL_PLACE INNER JOIN
                      ED_EXAM_SCHDL ON CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID INNER JOIN
                      SC_BUILDING ON CO_EXAM_SCHDL_PLACE.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      CO_EXAM_COMMITTEE ON SC_BUILDING.SC_BUILDING_ID = CO_EXAM_COMMITTEE.SC_BUILDING_ID INNER JOIN
                      SC_HALL ON CO_EXAM_SCHDL_PLACE.SC_HALL_ID = SC_HALL.SC_HALL_ID AND SC_BUILDING.SC_BUILDING_ID = SC_HALL.SC_BUILDING_ID AND 
                      CO_EXAM_COMMITTEE.SC_HALL_ID = SC_HALL.SC_HALL_ID
where CO_EXAM_COMMITTEE.CO_CONTROL_ID = @CoControlId
and ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID=@EdExamSchdlId
and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CO_STUD_CHEAT_GetControlExamCommitteeMembers" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CoControlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdExamSchdlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null"/>
        <parameter name="@CoExamCommitteeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null"/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
-------- Control Exams Committee Members and Head-----------------------------

SELECT     CO_EXAM_COMM_SUPERVISOR.HEAD_FLAG, CO_CONTROL_MEMBER.CO_CONTROL_MEMBERS_ID, SA_CODE_SC_DEG.SC_DEG_DESCR_AR, 
                      SA_CODE_SC_DEG.SC_DEG_DESCR_EN, CO_CONTROL_MEMBER.MEMBER_NAME_AR, CO_CONTROL_MEMBER.MEMBER_NAME_EN
FROM         SC_HALL INNER JOIN
                      CO_EXAM_SCHDL_PLACE INNER JOIN
                      ED_EXAM_SCHDL ON CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID INNER JOIN
                      SC_BUILDING ON CO_EXAM_SCHDL_PLACE.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      CO_EXAM_COMMITTEE ON SC_BUILDING.SC_BUILDING_ID = CO_EXAM_COMMITTEE.SC_BUILDING_ID ON 
                      SC_HALL.SC_HALL_ID = CO_EXAM_SCHDL_PLACE.SC_HALL_ID AND SC_HALL.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID AND 
                      SC_HALL.SC_HALL_ID = CO_EXAM_COMMITTEE.SC_HALL_ID INNER JOIN
                      CO_CONTROL_MEMBER INNER JOIN
                      CO_EXAM_COMM_SUPERVISOR ON 
                      CO_CONTROL_MEMBER.CO_CONTROL_MEMBERS_ID = CO_EXAM_COMM_SUPERVISOR.CO_CONTROL_MEMBERS_ID ON 
                      CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = CO_EXAM_COMM_SUPERVISOR.CO_EXAM_SCHDL_PLACE_ID LEFT OUTER JOIN
                      SA_CODE_SC_DEG ON CO_CONTROL_MEMBER.SA_CODE_SC_DEG_ID = SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
WHERE     (CO_EXAM_COMMITTEE.CO_CONTROL_ID = @CoControlId) 
AND (CO_EXAM_COMMITTEE.CO_EXAM_COMMITTEE_ID = @CoExamCommitteeId) 
AND (ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = @EdExamSchdlId)
AND ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
AND ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CO_STUD_CHEAT_GetControlExamCommitteeStudents" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CoControlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@EdExamSchdlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null"/>
        <parameter name="@CoExamCommitteeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null"/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[

-------- Control Exams Committee Students-----------------------------

SELECT     ED_STUD.ED_STUD_ID, ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      CO_EXAM_PLACE_STUD ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = CO_EXAM_PLACE_STUD.ED_STUD_SEMESTER_ID INNER JOIN
                      CO_EXAM_SCHDL_PLACE INNER JOIN
                      ED_EXAM_SCHDL ON CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID INNER JOIN
                      SC_BUILDING ON CO_EXAM_SCHDL_PLACE.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      CO_EXAM_COMMITTEE ON SC_BUILDING.SC_BUILDING_ID = CO_EXAM_COMMITTEE.SC_BUILDING_ID INNER JOIN
                      SC_HALL ON CO_EXAM_SCHDL_PLACE.SC_HALL_ID = SC_HALL.SC_HALL_ID AND SC_BUILDING.SC_BUILDING_ID = SC_HALL.SC_BUILDING_ID AND 
                      CO_EXAM_COMMITTEE.SC_HALL_ID = SC_HALL.SC_HALL_ID ON 
                      CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID = CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID

WHERE     (CO_EXAM_COMMITTEE.CO_CONTROL_ID = @CoControlId) AND (CO_EXAM_COMMITTEE.CO_EXAM_COMMITTEE_ID = @CoExamCommitteeId) AND 
                      (ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = @EdExamSchdlId)
                      and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
                      and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
And ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID not in (
SELECT     CO_STUD_CHEAT.ED_STUD_SEMESTER_ID
FROM         ED_EXAM_SCHDL INNER JOIN
                      ED_COURSE ON ED_EXAM_SCHDL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      CO_EXAM_SCHDL_PLACE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID INNER JOIN
                      CO_STUD_CHEAT ON CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = CO_STUD_CHEAT.CO_EXAM_SCHDL_PLACE_ID
WHERE     (CO_STUD_CHEAT.CO_CONTROL_ID = @CoControlId) AND 
                      (ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = @EdExamSchdlId)
                      and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
                      and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CO_STUD_CHEAT_GetControlExamDetails" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdExamSchdlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
-------- Control Exams Details-----------------------------
SELECT     ED_COURSE_ID, EXAM_DATE, FROM_TIME, TO_TIME
FROM         ED_EXAM_SCHDL
where ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = @EdExamSchdlId
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetEntityMainsFromPkgHdr">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Gets all records from the AS_FACULTY_INFO table
-- Table Comment: جدول بيانات الكليات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT    distinct ENTITY_MAIN.ENT_MAIN_ID,ENTITY_MAIN.NODE_PATH
FROM         ENT_COURSE_PKG_HDR INNER JOIN
                      ENTITY_MAIN ON ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
order by ENTITY_MAIN.NODE_PATH

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetEntityMainsFromPloicyGradingHdr">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Gets all records from the AS_FACULTY_INFO table
-- Table Comment: جدول بيانات الكليات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT    distinct ENTITY_MAIN.ENT_MAIN_ID,ENTITY_MAIN.NODE_PATH
FROM         ENT_POLICY_GRADING_HDR INNER JOIN
                      ENTITY_MAIN ON ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
order by ENTITY_MAIN.NODE_PATH

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_COURSE_REG_OriginalInsert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_COURSE_REG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RepeatFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@ApproveDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdCodeCourseStatusId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CourseDegree" type="numeric" direction="Input" size="5" precision="6" scale="3" param="(6, 3)" nulldefault=""/>
        <parameter name="@CoursePoint" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@GsCodePassFailId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AddGpaFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@IncompFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@HideFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@HideReason" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdStudCourseRegId numeric(9, 0)
				SELECT @V_EdStudCourseRegId = ISNULL(MAX(ED_STUD_COURSE_REG_ID), 0) + 1 FROM [dbo].[ED_STUD_COURSE_REG];
				
        set @EntPolicyAssessHdrId = [dbo].fn_GetCourseAssessHdrId(@EdStudSemesterId,@EdCourseId);
        set @EntPolicyGradingHdrId = [dbo].fn_GetCourseGradingHdrId(@EdStudSemesterId,@EdCourseId);
         
        
        if not exists (select 1 from ED_STUD_COURSE_REG where ED_STUD_SEMESTER_ID = @EdStudSemesterId and ED_COURSE_ID = @EdCourseId)
        begin
				INSERT INTO [dbo].[ED_STUD_COURSE_REG]
					(
					[ED_STUD_COURSE_REG_ID]
					,[ED_COURSE_ID]
					,[REG_DATE]
					,[AUDIT_FLG]
					,[REPEAT_FLG]
					,[IS_LAST]
					,[IS_APPROVED]
					,[APPROVE_DATE]
					,[AS_FACULTY_INFO_ID]
					,[ED_CODE_COURSE_STATUS_ID]
					,[ED_CODE_GRADING_ID]
					,[COURSE_DEGREE]
					,[COURSE_POINT]
					,[ENT_POLICY_GRADING_HDR_ID]
					,[GS_CODE_PASS_FAIL_ID]
					,[ED_STUD_SEMESTER_ID]
					,[ADD_GPA_FLG]
					,[ENT_POLICY_ASSESS_HDR_ID]
					,[INCOMP_FLG]
          ,[SE_USER_ID]
          ,[SE_FORM_ID]
          ,[LAST_DATE]
					)
				VALUES
					(
					@V_EdStudCourseRegId
					,@EdCourseId
					,@RegDate
					,@AuditFlg
					,@RepeatFlg
					,@IsLast
					,@IsApproved
					,@ApproveDate
					,@AsFacultyInfoId
					,@EdCodeCourseStatusId
					,@EdCodeGradingId
					,@CourseDegree
					,@CoursePoint
					,@EntPolicyGradingHdrId
					,@GsCodePassFailId
					,@EdStudSemesterId
					,@AddGpaFlg
					,@EntPolicyAssessHdrId
					,@IncompFlg
          ,@SeUserId
          ,@SeFormId
          ,@LastDate
					)
		
    -- to insert agenda fees on student   
    declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
     select @FeeEdStudId= ED_STUD_ID,
            @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
            @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
            @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
     FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@EdStudSemesterId
    exec  [dbo].[LoadAgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,2,0
    -- to maintain is_last flag and repeat flag
    exec [dbo].[Sp_Maint_StudCourseReg] @FeeEdStudId,@EdCourseId 
    
end    
else
	RAISERROR('Do not repeat data.',16,-1)	
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_COURSE_REG_Insert_Check" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_COURSE_REG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@RepeatFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ApproveDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />

        <parameter name="@CoursePoint" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseDegree" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodePassFailId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />

        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AddGpaFlg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@IncompFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[

        declare @ErrorTxt nvarchar(1000)='';
        
       declare @AsFacultyInfoIdP numeric,@EdCodeSemesterIdP numeric,@EdStudId numeric,@EdCodeSemesterId numeric,@EdAcadYearId numeric
       
       select @EdStudId= ED_STUD_SEMESTER.ED_STUD_ID , @EdAcadYearId= ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,@EdCodeSemesterId= ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID from ED_STUD_SEMESTER where ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId;
       
				if(@AsFacultyInfoId is null or @AsFacultyInfoId=0 or @AsFacultyInfoId=0.0)
        begin
            select @AsFacultyInfoIdP=AS_FACULTY_INFO_ID from ED_STUD_FACULTY where ED_STUD_ID=@EdStudId and IS_ACTIVE=1
        end
        else
          set  @AsFacultyInfoIdP= @AsFacultyInfoId
        
        
        if(@EdCodeSemesterId is null or @EdCodeSemesterId=0 or @EdCodeSemesterId=0.0)
        begin
           SELECT top 1 @EdCodeSemesterIdP=ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID
                FROM         ED_SEMESTER_OPEN INNER JOIN
                             ENTITY_MAIN ON ED_SEMESTER_OPEN.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
                WHERE        (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoIdP) AND
                             (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 2 or ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=14) AND
                             (ED_SEMESTER_OPEN.IS_CURRENT = 1) AND 
                             (ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = @EdAcadYearId)
          
        end
        else
           set @EdCodeSemesterIdP=@EdCodeSemesterId;   
        
        
       DECLARE @ED_STUD_SEMESTER_ID numeric,@MaxED_STUD_SEMESTER_ID NUMERIC,
                @ED_STUD_STATE_ID NUMERIC,@MaxED_STUD_STATE_ID NUMERIC,
                @ED_STUD_COURSE_REG_ID NUMERIC,@MaxED_STUD_COURSE_REG_ID NUMERIC
                                
                      
        select @ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER WHERE ED_STUD_ID=@EdStudId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterIdP AND
                    ED_ACAD_YEAR_ID=@EdAcadYearId AND AS_FACULTY_INFO_ID=@AsFacultyInfoIdP
                    
         IF(@EdStudSemesterId IS NOT NULL and @EdStudSemesterId!=0)
             SET @ED_STUD_SEMESTER_ID=@EdStudSemesterId
            
                    
         IF(@ED_STUD_SEMESTER_ID IS NULL)
          BEGIN
          
                     --RAISERROR('(No_Stud_Semester)',16,-1)
					 set @ErrorTxt = @ErrorTxt + 'No_Stud_Semester;';
                     
          END
          

     SELECT @ED_STUD_COURSE_REG_ID=ED_STUD_COURSE_REG_ID FROM ED_STUD_COURSE_REG
     where ED_COURSE_ID=@EdCourseId AND ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID
     
     IF(@ED_STUD_COURSE_REG_ID IS NULL)
       BEGIN
          declare @MaxEdStudCourseRegId numeric
          select @MaxEdStudCourseRegId =max(ED_STUD_COURSE_REG_ID)from ED_STUD_COURSE_REG
          if(@MaxEdStudCourseRegId is null)
           set @MaxEdStudCourseRegId =0;
           
           set @MaxEdStudCourseRegId =@MaxEdStudCourseRegId +1;
           
           
            -- check on Equiv subjects  المقررات المتعارضة
                      if exists( select 'a' from ED_COURSE_EQUIV where 
					              ED_COURSE_ID=@EdCourseId and exists
					               (
						              select 'b' from [dbo].[ED_STUD_COURSE_REG] 
                          where
						              [dbo].[ED_STUD_COURSE_REG].ED_COURSE_ID =ED_COURSE_EQUIV.ED_EQUIV_COURSE_ID
						              and [dbo].[ED_STUD_COURSE_REG].[ED_STUD_SEMESTER_ID]=@ED_STUD_SEMESTER_ID
					                )
					              )
                        BEGIN
                        
                           --RAISERROR('(ED_COURSE_EQUIV)',16,-1)
					       set @ErrorTxt = @ErrorTxt + 'ED_COURSE_EQUIV;';
                        END
                        
                         if exists( select 'a' from ED_COURSE_EQUIV where 
					              ED_EQUIV_COURSE_ID=@EdCourseId and exists
					               (
						              select 'b' from [dbo].[ED_STUD_COURSE_REG] 
                                     where
						              [dbo].[ED_STUD_COURSE_REG].ED_COURSE_ID =ED_COURSE_EQUIV.ED_COURSE_ID
						              and [dbo].[ED_STUD_COURSE_REG].[ED_STUD_SEMESTER_ID]=@ED_STUD_SEMESTER_ID
					                )
					              )
                        BEGIN
                        
                           --RAISERROR('(ED_COURSE_EQUIV)',16,-1)
					       set @ErrorTxt = @ErrorTxt + 'ED_COURSE_EQUIV;';             
                        END
                        
                        
            --check on academic load       
                  -- التحقق من شروط العبء الدراسى
                      declare @MIN_LOAD numeric(8,3),@MAX_LOAD numeric(8,3),@EXCESS_LOAD numeric(8,3),@ADDED_LOAD numeric(8,3) 
                       declare @Sum_Subjects_Hours numeric(11,3),@TOTAL_MAX_LOAD numeric(9,3),@ED_CODE_LOAD_TYPE_ID numeric,
                       @ED_CODE_SEMESTER_TYPE_ID numeric;
                       
                       select @ED_CODE_SEMESTER_TYPE_ID=ED_CODE_SEMESTER_TYPE_ID from ED_CODE_SEMESTER 
                       where ED_CODE_SEMESTER_ID=@EdCodeSemesterIdP;
                       

                      select @MIN_LOAD=MIN_CH,
                      @MAX_LOAD=MAX_CH from
                      [dbo].[ComputeAcademicLoad](@ED_STUD_SEMESTER_ID)
                      
 
                        
                       if(@MIN_LOAD is null or @MAX_LOAD is null)
                           begin
                           
                              --RAISERROR('(No_Policy_Load_For_Student)',16,-1)
                              set @ErrorTxt = @ErrorTxt + 'No_Policy_Load_For_Student;';     
                              
                           end

                        set @TOTAL_MAX_LOAD=@MAX_LOAD;

                        select @Sum_Subjects_Hours =SUM(ED_COURSE.CREDIT_HOURS)
                             FROM    
                                      ED_STUD_COURSE_REG  INNER JOIN
                                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                             WHERE    (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @ED_STUD_SEMESTER_ID)AND
                                      (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID=1)
                             
                         if(@TOTAL_MAX_LOAD is null)
                          set @TOTAL_MAX_LOAD=0;
           
                        
                       --get curent course credit hours
                          declare @CourseCreditHours numeric(8,3),@CoReqCourseCreditHours numeric(8,3)
                          Select @CourseCreditHours=CREDIT_HOURS from ED_COURSE where
                          ED_COURSE_ID=@EdCourseId
                       
                          
                             select @CoReqCourseCreditHours=sum(ed_course.CREDIT_HOURS)
                              from ED_COURSE_COREQ T1
					                     inner join ED_COURSE_COREQ T2 on T1.ED_COURSE_GROUP=T2.ED_COURSE_GROUP
                               inner join ed_course on T2.ED_COURSE_ID=ed_course.ED_COURSE_ID
					                    where T1.ED_COURSE_ID=@EdCourseId and T1.IS_MAIN=1
                               and T2.IS_MAIN=0
					                    and not exists(select 'a' from [dbo].[ED_STUD_COURSE_REG]
                              where ED_COURSE_ID=T2.ED_COURSE_ID
					                    and ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID)
                              
                             set @Sum_Subjects_Hours=isnull(@Sum_Subjects_Hours,0)+isnull(@CourseCreditHours,0)+isnull(@CoReqCourseCreditHours,0);  

						if(@IsApproved = 1)
						begin
						
						declare @CH_Add int = 0;
						declare @CH_Delete int = 0;
						
						if exists(SELECT   ED_COURSE.CREDIT_HOURS, ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID
							FROM         ED_STUD_COURSE_CHNG INNER JOIN
												  ED_COURSE ON ED_STUD_COURSE_CHNG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
							WHERE     (ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = @ED_STUD_SEMESTER_ID) and (ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID in (1,2)))
							begin
							
							select @CH_Add=t.addColumn,@CH_Delete=t.DeleteColumn from (
							SELECT SUM(case ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID when 1 then ED_COURSE.CREDIT_HOURS else 0 end) as addColumn,
									SUM(case ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID when 2 then ED_COURSE.CREDIT_HOURS else 0 end) as DeleteColumn
							FROM         ED_STUD_COURSE_CHNG INNER JOIN
												  ED_COURSE ON ED_STUD_COURSE_CHNG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
							WHERE     (ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = @ED_STUD_SEMESTER_ID) and (ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID in (1,2)) and ED_STUD_COURSE_CHNG.APPROVE_FLG <> 1
							) as t
							
							set @Sum_Subjects_Hours = @Sum_Subjects_Hours + @CH_Add - @CH_Delete;
							
							end
						end
               
                        if(@Sum_Subjects_Hours>@TOTAL_MAX_LOAD)
                               begin
                               
                                   --RAISERROR('(MAX_LOAD)',16,-1)
                                   set @ErrorTxt = @ErrorTxt + 'MAX_LOAD;';     
                                end
                             
                          
                      -- نهاية التحقق من شروط العبء الدراسى    
            
            
                   declare @count int
                      SELECT  @count = COUNT(ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID)
                      FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                      where ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                      and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID=1
                      and ED_STUD_COURSE_REG.ED_COURSE_ID=@EdCourseId
                      and CONVERT(int, ED_CODE_GRADING.GRAD_ORDER)<= 8;  -- (C) grade order
                      
                        if(@count>0)
                               begin
                               
                                  -- RAISERROR('(Passed befor with Grade >= C)',16,-1)
                                  set @ErrorTxt = @ErrorTxt + '(Passed befor with Grade >= C);';
                                end         
                      
				END		

if(@ErrorTxt<>'')
RAISERROR(@ErrorTxt,16,-1);
			
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="NextAcadYear">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Gets all records from the AS_FACULTY_INFO table
-- Table Comment: جدول بيانات الكليات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT     ED_ACAD_YEAR_ID, DESCR_AR, DESCR_EN, YEAR_CODE, YEAR_ORDER, YEAR_CALENDER, CURRENT_YEAR
				FROM         ED_ACAD_YEAR
				WHERE     (YEAR_ORDER >
									  (SELECT     YEAR_ORDER
										 FROM         ED_ACAD_YEAR AS ED_ACAD_YEAR_1
										 WHERE     (CURRENT_YEAR = 1)))
        order by YEAR_ORDER
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_ACAD_YEAR_Insert_Custom" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 10, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_ACAD_YEAR table
-- Table Comment: جدول الأعوام الأكاديمية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Output" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@YearCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@YearOrder" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@YearCalender" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CurrentYear" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FacultiesStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@FacultiesEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        
        
        if exists(select 'a' from ED_ACAD_YEAR where YEAR_CODE=@YearCode)
           begin
              RAISERROR('COS_YEAR_CODE',16,-1)
              RETURN 
           end
           
          if exists(select 'a' from ED_ACAD_YEAR_FACULTY where 
             (@FacultiesStartDate>=ED_ACAD_YEAR_FACULTY.START_DATE and  @FacultiesStartDate<=ED_ACAD_YEAR_FACULTY.END_DATE)
              or(@FacultiesEndDate>=ED_ACAD_YEAR_FACULTY.START_DATE and  @FacultiesEndDate<=ED_ACAD_YEAR_FACULTY.END_DATE))
          Begin
            RAISERROR('Acad_Year_Intersection',16,-1)
              RETURN 
          End
           
        begin transaction;
        declare @MaxEdAcadYearID numeric,@MaxYearOrder  numeric(9,0)
        select @MaxEdAcadYearID=max(ED_ACAD_YEAR_ID) from ED_ACAD_YEAR
        if(@MaxEdAcadYearID is null)
         set @MaxEdAcadYearID=0;
         set @MaxEdAcadYearID=@MaxEdAcadYearID+1;
         
         --select @MaxYearOrder=max(YEAR_ORDER) from ED_ACAD_YEAR
        --if(@MaxYearOrder is null)
        --- set @MaxYearOrder=0;
        -- set @MaxYearOrder=@MaxYearOrder+1;
        
				
				INSERT INTO [dbo].[ED_ACAD_YEAR]
					(
				     [ED_ACAD_YEAR_ID],[DESCR_AR],[DESCR_EN],[YEAR_CODE]
				  	,[YEAR_ORDER],[YEAR_CALENDER],[CURRENT_YEAR]
					)
				VALUES
					(
					   @MaxEdAcadYearID,@DescrAr,@DescrEn,@YearCode
				  	,@YearOrder,@YearCalender,@CurrentYear
					)
          
          set @EdAcadYearId = @MaxEdAcadYearID;
          
          --if this acad year is current set all as not current
              if(@CurrentYear=1)
                  update [dbo].[ED_ACAD_YEAR] set CURRENT_YEAR=0 where ED_ACAD_YEAR_ID<>@MaxEdAcadYearID
          
          -- insert into ed_acad_year_faculty
          declare  @ED_Acad_Year_Faculty_ID numeric(7,0)
          select @ED_Acad_Year_Faculty_ID=max(ED_ACAD_YEAR_FACULTY_ID) from ED_ACAD_YEAR_FACULTY
          if(@ED_Acad_Year_Faculty_ID is null)
            set @ED_Acad_Year_Faculty_ID=0;
          if(@FacultiesStartDate is not null and @FacultiesEndDate is not null)
            Begin
              INSERT INTO [dbo].[ED_ACAD_YEAR_FACULTY]
               ([ED_ACAD_YEAR_FACULTY_ID]
               ,[AS_FACULTY_INFO_ID]
               ,[ED_ACAD_YEAR_ID]
               ,[START_DATE]
               ,[END_DATE])
               
  	          SELECT @ED_Acad_Year_Faculty_ID+ROW_NUMBER() over(order by (dbo.[AS_FACULTY_INFO].[AS_FACULTY_INFO_ID]))  as rownum ,
  	          AS_FACULTY_INFO_ID,@MaxEdAcadYearID,@FacultiesStartDate,@FacultiesEndDate
  	          from AS_FACULTY_INFO
            End
          IF @@ERROR <> 0
       BEGIN
          ROLLBACK

          RETURN
       END
      commit transaction;   
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_ACAD_YEAR_Update_Custom" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 10, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_ACAD_YEAR table
-- Table Comment: جدول الأعوام الأكاديمية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@OriginalEdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@YearCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@YearOrder" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@YearCalender" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CurrentYear" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsClosed" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FacultiesStartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@FacultiesEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        



         if exists(select 'a' from ED_ACAD_YEAR_FACULTY where 
             ((@FacultiesStartDate>=ED_ACAD_YEAR_FACULTY.START_DATE and  @FacultiesStartDate<=ED_ACAD_YEAR_FACULTY.END_DATE)
              or(@FacultiesEndDate>=ED_ACAD_YEAR_FACULTY.START_DATE and  @FacultiesEndDate<=ED_ACAD_YEAR_FACULTY.END_DATE))
              and ED_ACAD_YEAR_FACULTY.ED_ACAD_YEAR_ID<>@EdAcadYearId 
              )
          Begin
            RAISERROR('Acad_Year_Intersection',16,-1)
              RETURN 
          End
        
        begin transaction;
				      UPDATE
					      [dbo].[ED_ACAD_YEAR]
				      SET
					      [ED_ACAD_YEAR_ID] = @EdAcadYearId
					      ,[DESCR_AR] = @DescrAr
					      ,[DESCR_EN] = @DescrEn
					      ,[YEAR_CODE] = @YearCode
					      ,[YEAR_ORDER] = @YearOrder
					      ,[YEAR_CALENDER] = @YearCalender
					      ,[CURRENT_YEAR] = @CurrentYear
                ,[IS_CLOSED]=@IsClosed
				      WHERE
             [ED_ACAD_YEAR_ID] = @EdAcadYearId 

              declare @TempCurrentYear numeric

              select @TempCurrentYear=CURRENT_YEAR from [dbo].[ED_ACAD_YEAR] where [ED_ACAD_YEAR_ID] = @EdAcadYearId 

               --if this acad year is current set all as not current
                            if(@TempCurrentYear=1)
                                update [dbo].[ED_ACAD_YEAR] set CURRENT_YEAR=0 where ED_ACAD_YEAR_ID<>@EdAcadYearId

                -- insert into ed_acad_year_faculty
                declare  @ED_Acad_Year_Faculty_ID numeric(7,0)
                select @ED_Acad_Year_Faculty_ID=max(ED_ACAD_YEAR_FACULTY_ID) from ED_ACAD_YEAR_FACULTY
                if(@ED_Acad_Year_Faculty_ID is null)
                  set @ED_Acad_Year_Faculty_ID=0;
                if(@FacultiesStartDate is not null and @FacultiesEndDate is not null)
                  Begin
                    INSERT INTO [dbo].[ED_ACAD_YEAR_FACULTY]
                     ([ED_ACAD_YEAR_FACULTY_ID]
                     ,[AS_FACULTY_INFO_ID]
                     ,[ED_ACAD_YEAR_ID]
                     ,[START_DATE]
                     ,[END_DATE])
                     
  	                SELECT @ED_Acad_Year_Faculty_ID+ROW_NUMBER() over(order by (dbo.[AS_FACULTY_INFO].[AS_FACULTY_INFO_ID]))  as rownum ,
  	                AS_FACULTY_INFO_ID,@EdAcadYearId,@FacultiesStartDate,@FacultiesEndDate
  	                from AS_FACULTY_INFO where not exists(select 'a' from ED_ACAD_YEAR_FACULTY 
                    where ED_ACAD_YEAR_ID=@EdAcadYearId and ED_ACAD_YEAR_FACULTY.AS_FACULTY_INFO_ID=AS_FACULTY_INFO.AS_FACULTY_INFO_ID)
                  End


           update [dbo].[ED_ACAD_YEAR_FACULTY] set 
             [START_DATE]=@FacultiesStartDate,
             [END_DATE]=@FacultiesEndDate
             where
             [ED_ACAD_YEAR_ID]= @EdAcadYearId;
   IF @@ERROR <> 0
       BEGIN
          ROLLBACK

          RETURN
       END
      commit transaction;
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="AS_FACULTY_INFO_GetByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the AS_FACULTY_INFO table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[AS_FACULTY_INFO_ID],
					[ENT_MAIN_ID],
					[GS_COUNTRY_NODE_ID],
					[FACULTY_ADDRESS],
					[FACULTY_DESCR_AR],
					[FACULTY_DESCR_EN],
					[CON_DATE],
					[GS_CONTACT_METHOD_H_ID],
					[FACULTY_LOGO]
				FROM
					[dbo].[AS_FACULTY_INFO]
				WHERE
					[ENT_MAIN_ID] = @EntMainId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetAsFacultyInfo_for_User">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the AS_FACULTY_INFO table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT     ISNULL(ENTITY_MAIN.AS_FACULTY_INFO_ID,0) AS_FACULTY_INFO_ID
FROM         ENTITY_MAIN INNER JOIN
                      SE_USER ON ENTITY_MAIN.ENT_MAIN_ID = SE_USER.AS_NODE_ID
where SE_USER.SE_USER_ID = @SeUserId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetByHomeFlgAndFacultyInfo">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the ENTITY_MAIN table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@HomeFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FacultyInfoId" type="varchar" direction="Input" size="50" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ENT_MAIN_ID],
					[dbo].fn_Entity_Main_Full_Path([dbo].[ENTITY_MAIN].[ENT_MAIN_ID],1,2),
					[ENT_CODE_ENTITY_TYPE_ID],
					[STATE_NOTATION],
					[ENT_PARENT_ID],
					[dbo].fn_Entity_Main_Full_Path([dbo].[ENTITY_MAIN].[ENT_MAIN_ID],2,2),
					[ED_BYLAW_ID],
					[IS_STATE_FLG]
				FROM
					[dbo].[ENTITY_MAIN]
				WHERE
					[IS_HOME_FLG] = @HomeFlg and (@FacultyInfoId is null or AS_FACULTY_INFO_ID= @FacultyInfoId )
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENTITY_MAIN_FULL_PATH">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ENTITY_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntityMinID" type="varchar" direction="Input" size="50" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" param="(3, 0)" nulldefault="" />
        <parameter name="@DisplayText" type="numeric" direction="Input" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        declare @EntityNodePath nvarchar(90)
        select @EntityNodePath=NODE_PATH from [dbo].[ENTITY_MAIN] where [ENT_MAIN_ID]=@EntityMinID;
        
          declare @FullPath nvarchar(1000);
        
        
      if(@DisplayText=1)
        begin
            
              if(@Lang=1)
                select @FullPath=ISNULL(@FullPath + '/ ', '') +ISNULL(ENT_DESCR_AR,'')
                from [dbo].[ENTITY_MAIN]
                where @EntityNodePath like NODE_PATH +'%' 
                 ORDER BY NODE_PATH ASC;
              else
                 select @FullPath=ISNULL(@FullPath + '/ ', '') +ISNULL(ENT_DESCR_EN,'')
                from [dbo].[ENTITY_MAIN]
                where @EntityNodePath like NODE_PATH +'%' 
                 ORDER BY NODE_PATH ASC;
        end
       else if(@DisplayText=2)
           begin
             
                    if(@Lang=1)
                      select @FullPath=ISNULL(@FullPath + '/ ', '') +ISNULL(STATE_DESCR_AR,'')
                      from [dbo].[ENTITY_MAIN]
                      where @EntityNodePath like NODE_PATH +'%' 
                       ORDER BY NODE_PATH ASC;
                    else
                       select @FullPath=ISNULL(@FullPath + '/ ', '') +ISNULL(STATE_DESCR_EN,'')
                      from [dbo].[ENTITY_MAIN]
                      where @EntityNodePath like NODE_PATH +'%' 
                       ORDER BY NODE_PATH ASC;
           end
           if(@FullPath is null)
              set @FullPath='';
              
        select @FullPath;
         
			
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENTITY_MAIN_GetNextSipling">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ENTITY_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@NodePath" type="varchar" direction="Input" size="250" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				SELECT     ENT_MAIN_ID
				FROM       ENTITY_MAIN
				WHERE     (NODE_PATH LIKE @NodePath + '_')
        
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENTITY_MAIN_InsertWithOutEntMainId" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ENTITY_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Output" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="3" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StateNotation" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
        <parameter name="@EntParentId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@IsStateFlg" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsInfoFlg" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsHomeFlg" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@StateDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@StateDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@IsVisible" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        declare @MaxEntMainId numeric,@Current_ParentID numeric
        select  @MaxEntMainId =max(ENT_MAIN_ID)from ENTITY_MAIN;
         if( @MaxEntMainId is null)
            set  @MaxEntMainId=0;
          set  @MaxEntMainId= @MaxEntMainId+1;  
          
          if(@EntParentId is not null)
          set @Current_ParentID=@EntParentId
          
				if(@EntCodeEntityTypeId=1)
            set @Current_ParentID=@MaxEntMainId;
            
        declare @v_nodelevel numeric,@v_nodeorder numeric,@v_nodepath nvarchar(90)

            SELECT @v_nodelevel = node_level
               FROM ENTITY_MAIN
                   WHERE ENT_PARENT_ID = @Current_ParentID;

             IF @v_nodelevel IS NULL
               SET @v_nodelevel = 0;
            SET @v_nodelevel = @v_nodelevel + 1;
            
            
     
                   IF @v_nodelevel = 1
                        BEGIN
                           SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
                             FROM (SELECT node_order
                                     FROM ENTITY_MAIN
                                    WHERE node_level = 1) dst
                                  RIGHT OUTER JOIN
                                  (SELECT gs_sys_pivot_id
                                     FROM gs_sys_pivot
                                    WHERE gs_sys_pivot_id <= (SELECT COUNT (node_order) + 1
                                                                FROM ENTITY_MAIN
                                                               WHERE node_level = 1)) src
                                  ON (dst.node_order = src.gs_sys_pivot_id)
                            WHERE dst.node_order IS NULL;
                        END
                        ELSE
                        BEGIN
                           SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
                             FROM (SELECT node_order
                                     FROM ENTITY_MAIN
                                    WHERE ENT_PARENT_ID = @Current_ParentID
                                      AND ENT_MAIN_ID <> ENT_PARENT_ID) dst
                                  RIGHT OUTER JOIN
                                  (SELECT gs_sys_pivot_id
                                     FROM gs_sys_pivot
                                    WHERE gs_sys_pivot_id <=
                                             (SELECT COUNT (node_order) + 1
                                                FROM ENTITY_MAIN
                                               WHERE ENT_PARENT_ID = @Current_ParentID
                                                 AND ENT_MAIN_ID <> ENT_PARENT_ID)) src
                                  ON (dst.node_order = src.gs_sys_pivot_id)
                            WHERE dst.node_order IS NULL;
                        END;

            
            
                  SET @v_nodepath = NULL;
                              SELECT @v_nodepath = SUBSTRING(node_path, 1, CAST(node_level * 3 AS Integer))
                  FROM ENTITY_MAIN
                   WHERE ENT_MAIN_ID = @Current_ParentID;

                 IF @v_nodepath IS NULL
                        SET @v_nodepath = '';
                        
             SET @v_nodepath = @v_nodepath + REVERSE(SUBSTRING(REVERSE(N'00' + CONVERT(NVARCHAR(90), @v_nodeorder)), 1, 3));

      DECLARE @TEMP_AS_FACULTY_INFO_ID NUMERIC,@Max_ASFACULTY_INFO_Id numeric
          -- INSERT INTO AS_FACULTY_INFO_ID 
          IF(@EntCodeEntityTypeId =2)
           BEGIN
              SELECT TOP 1 @TEMP_AS_FACULTY_INFO_ID=AS_FACULTY_INFO_ID FROM AS_FACULTY_INFO
              WHERE (FACULTY_DESCR_AR=@EntDescrAr) OR (FACULTY_DESCR_EN=@EntDescrEn)
              
              IF(@TEMP_AS_FACULTY_INFO_ID IS NULL)
                 BEGIN
                        select  @Max_ASFACULTY_INFO_Id =max(AS_FACULTY_INFO_ID)from AS_FACULTY_INFO;
                         if( @Max_ASFACULTY_INFO_Id is null)
                            set  @Max_ASFACULTY_INFO_Id=0;
                          set  @Max_ASFACULTY_INFO_Id= @Max_ASFACULTY_INFO_Id+1; 
                                    
                    
                    INSERT INTO AS_FACULTY_INFO
                       (AS_FACULTY_INFO_ID,FACULTY_DESCR_AR,FACULTY_DESCR_EN)
                    values
                        (@Max_ASFACULTY_INFO_Id,@EntDescrAr,@EntDescrEn)
                      
                     set @TEMP_AS_FACULTY_INFO_ID=@Max_ASFACULTY_INFO_Id
                 END
           END
          ELSE
          BEGIN
               declare @ParentTypeid numeric
                     select @ParentTypeid =ENT_CODE_ENTITY_TYPE_ID from  ENTITY_MAIN where ENT_MAIN_ID=@EntParentId
                     
              IF(@EntCodeEntityTypeId =14 and @ParentTypeid=1)
                   BEGIN
                          SELECT TOP 1 @TEMP_AS_FACULTY_INFO_ID=AS_FACULTY_INFO_ID FROM AS_FACULTY_INFO
                          WHERE (FACULTY_DESCR_AR=@EntDescrAr and FACULTY_DESCR_AR is not null) OR 
                          (FACULTY_DESCR_EN=@EntDescrEn and FACULTY_DESCR_EN is not null)
                          
                          IF(@TEMP_AS_FACULTY_INFO_ID IS NULL)
                             BEGIN
                                    select  @Max_ASFACULTY_INFO_Id =max(AS_FACULTY_INFO_ID)from AS_FACULTY_INFO;
                                     if( @Max_ASFACULTY_INFO_Id is null)
                                        set  @Max_ASFACULTY_INFO_Id=0;
                                      set  @Max_ASFACULTY_INFO_Id= @Max_ASFACULTY_INFO_Id+1; 
                                                
                                INSERT INTO AS_FACULTY_INFO
                                   (AS_FACULTY_INFO_ID,FACULTY_DESCR_AR,FACULTY_DESCR_EN)
                                values
                                    (@Max_ASFACULTY_INFO_Id,@EntDescrAr,@EntDescrEn)
                                  
                                 set @TEMP_AS_FACULTY_INFO_ID=@Max_ASFACULTY_INFO_Id
                             END
                               
                   END
                   
                ELSE
                     SELECT @TEMP_AS_FACULTY_INFO_ID =AS_FACULTY_INFO_ID FROM ENTITY_MAIN WHERE ENT_MAIN_ID=@Current_ParentID;
          END
           
          --get bylaw from the parent if exists
          declare @Parent_ByLaw_ID numeric
             if(@EdBylawId is null or @EdBylawId=0)
              begin
                select @Parent_ByLaw_ID=ED_BYLAW_ID from [dbo].[ENTITY_MAIN] where [ENT_MAIN_ID]=@Current_ParentID;
                if(@Parent_ByLaw_ID is not null)
                   set @EdBylawId=@Parent_ByLaw_ID
              end
            
        -- declare @ParentTypeValId numeric(3,0)
       -- if(@EntCodeEntityTypeId =7)--of type level
       -- begin
         --select @ParentTypeValId=ENT_CODE_ENTITY_TYPE_ID from [dbo].[ENTITY_MAIN] where ENT_MAIN_ID=@Current_ParentID
         --if(@ParentTypeValId!=2 and @ParentTypeValId!=14)--parent not faculty nor program
          -- begin
             -- RAISERROR('ERR_LEVEL_PARENT',16,-1)
             -- RETURN 
          -- end
       -- end
            
        if(@EntCodeEntityTypeId =7)--of type level
        begin
         if exists (select * from [dbo].[ENTITY_MAIN] where ENT_PARENT_ID=@Current_ParentID
         and ENT_CODE_ENTITY_TYPE_ID=7 and ED_CODE_LEVEL_ID=@EdCodeLevelId)
           begin
              RAISERROR('ERR_LEVEL_REPEAT',16,-1)
              RETURN 
           end
        end     
            
            
        --يجب الاعتماد على جدول ent_avail_parent    
            declare @Parent_EntCodeEntityType numeric(3,0)
            select @Parent_EntCodeEntityType=ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENT_MAIN_ID=@Current_ParentID
            if exists(select 'a' from ENT_AVAIL_PRNT_TYPE where
               ENT_CODE_ENTITY_TYPE_ID=@EntCodeEntityTypeId and ENT_CODE_ENTITY_TYPE_PRNT_ID=@Parent_EntCodeEntityType
               or @Parent_EntCodeEntityType is null
            )
              Begin
				        INSERT INTO [dbo].[ENTITY_MAIN]
					        (
					          [ENT_MAIN_ID],[ENT_DESCR_AR],[ENT_CODE_ENTITY_TYPE_ID],[STATE_NOTATION],[ENT_PARENT_ID]
					          ,[ENT_DESCR_EN],[ED_BYLAW_ID],[IS_STATE_FLG],NODE_PATH,NODE_ORDER,NODE_LEVEL,NODE_CHILD_COUNT,
                    IS_INFO_FLG,IS_HOME_FLG,AS_FACULTY_INFO_ID,STATE_DESCR_AR,STATE_DESCR_EN,ED_CODE_LEVEL_ID
					        )
				        VALUES
					        (
					          @MaxEntMainId,@EntDescrAr,@EntCodeEntityTypeId,@StateNotation,@Current_ParentID,@EntDescrEn
					          ,@EdBylawId,@IsStateFlg,@v_nodepath,@v_nodeorder,@v_nodelevel,0,@IsInfoFlg,@IsHomeFlg
                    ,@TEMP_AS_FACULTY_INFO_ID,@StateDescrAr,@StateDescrEn,@EdCodeLevelId
					        )
                  
              End
            Else
              Begin
                 RAISERROR('ENT_AVAIL_PRNT_TYPE',16,-1)
                 RETURN 
              End
				
				
          set @EntMainId=@MaxEntMainId
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENTITY_MAIN_GetByNodePathAndEntType">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the ENTITY_MAIN table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@NodePath" type="varchar" direction="Input" size="50" nulldefault="" />
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					*
				FROM
					[dbo].[ENTITY_MAIN]
				WHERE
					[ENT_CODE_ENTITY_TYPE_ID] = @EntCodeEntityTypeId
          AND @NodePath like [NODE_PATH]+'%'
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetChildByNodePathAndEntType">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the ENTITY_MAIN table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@NodePath" type="varchar" direction="Input" size="50" nulldefault="" />
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					*
				FROM
					[dbo].[ENTITY_MAIN]
				WHERE
					[ENT_CODE_ENTITY_TYPE_ID] = @EntCodeEntityTypeId
          AND [NODE_PATH] like @NodePath+'%'
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetHomeStates">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the ENTITY_MAIN table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FacProgEntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
			
				select ENTITY_MAIN.ENT_MAIN_ID as NodeEntMainId
				,Parent.ENT_MAIN_ID as ParentEntMainId,
				[dbo].[fn_ASNODE_PATH](ENTITY_MAIN.ENT_MAIN_ID,0) as NodePathAr,
				[dbo].[fn_ASNODE_PATH_En](ENTITY_MAIN.ENT_MAIN_ID,0) as NodePathEn
				
				from ENTITY_MAIN inner join ENTITY_MAIN Parent on ENTITY_MAIN.ENT_PARENT_ID=Parent.ENT_MAIN_ID
				
				where Parent.ENT_CODE_ENTITY_TYPE_ID in (2,14,3)
				and ENTITY_MAIN.IS_HOME_FLG=1
				and (@FacProgEntMainId is null or Parent.ENT_MAIN_ID =@FacProgEntMainId)
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetFacultiesAndHomePrograms">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ( updated by dalia to display university)
-- Purpose: Select records from the ENTITY_MAIN table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@NodePath" type="varchar" direction="Input" size="50" nulldefault="" />
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				SELECT
					[dbo].[ENTITY_MAIN].*
				FROM
					[dbo].[ENTITY_MAIN] inner join [dbo].[ENTITY_MAIN] Parent on
          [dbo].[ENTITY_MAIN].ENT_PARENT_ID=Parent.ENT_MAIN_ID
				WHERE
					(([dbo].[ENTITY_MAIN].[ENT_CODE_ENTITY_TYPE_ID] =2) or
          ([dbo].[ENTITY_MAIN].[ENT_CODE_ENTITY_TYPE_ID] =14))
          --or ([dbo].[ENTITY_MAIN].[ENT_CODE_ENTITY_TYPE_ID] =1)
          AND Parent.ENT_CODE_ENTITY_TYPE_ID=1
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetGrantDegreesForFacultiesPrograms">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Select records from the ENTITY_MAIN table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				declare @FacultyNodePath nvarchar(50);
				select @FacultyNodePath=ENTITY_MAIN.NODE_PATH from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

				SELECT     ENT_MAIN_ID, ENT_DESCR_AR, ENT_DESCR_EN
				FROM         ENTITY_MAIN
				WHERE     (ENT_CODE_ENTITY_TYPE_ID = 15) AND (NODE_PATH LIKE @FacultyNodePath + '%') -- + '___') -- Updated by Hsabry 11-11-2012
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENTITY_MAIN_Advanced_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Finds records in the ENTITY_MAIN table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EntDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@StateNotation" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null" />
        <parameter name="@EntParentId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EntDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@IsStateFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@NodeChildCount" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@NodePath" type="nvarchar" direction="Input" size="90" precision="0" scale="0" param="(90)" nulldefault="null" />
        <parameter name="@NodeOrder" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@NodeLevel" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdStudyMethodId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@IsInfoFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@IsHomeFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@ascodedegreeid" type="numeric" direction="Input" size="9" precision="1" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

                SELECT
	              *
                FROM
	            [dbo].[ENTITY_MAIN]
                WHERE 
	             ([ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
	            AND ([ENT_DESCR_AR] = @EntDescrAr OR @EntDescrAr IS NULL)
	            AND ([ENT_CODE_ENTITY_TYPE_ID] = @EntCodeEntityTypeId OR @EntCodeEntityTypeId IS NULL)
	            AND ([STATE_NOTATION] like '%'+@StateNotation +'%'
                    OR [ENT_DESCR_AR] like '%'+@StateNotation +'%'
                    OR  [ENT_DESCR_EN] like '%'+@StateNotation +'%'
                    OR  STATE_DESCR_AR like '%'+@StateNotation +'%'
                    OR  STATE_DESCR_EN like '%'+@StateNotation +'%'
                    OR @StateNotation IS NULL)
	            AND ([ENT_PARENT_ID] = @EntParentId OR @EntParentId IS NULL)
               AND ([AS_CODE_DEGREE_ID] = @ascodedegreeid OR @ascodedegreeid IS NULL)
	            AND ([ENT_DESCR_EN] = @EntDescrEn OR @EntDescrEn IS NULL)
	            AND ([ED_BYLAW_ID] = @EdBylawId OR @EdBylawId IS NULL)
	            AND ([IS_STATE_FLG] = @IsStateFlg OR @IsStateFlg IS NULL)
              AND ([NODE_CHILD_COUNT] = @NodeChildCount OR @NodeChildCount IS NULL)
	            AND ([NODE_PATH] = @NodePath OR @NodePath IS NULL)
	            AND ([NODE_ORDER] = @NodeOrder OR @NodeOrder IS NULL)
	            AND ([NODE_LEVEL] = @NodeLevel OR @NodeLevel IS NULL)
	            AND ([ED_STUDY_METHOD_ID] = @EdStudyMethodId OR @EdStudyMethodId IS NULL)
              AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
              AND ([IS_INFO_FLG] = @IsInfoFlg OR @IsInfoFlg IS NULL)
              AND ([IS_HOME_FLG] = @IsHomeFlg OR @IsHomeFlg IS NULL)
              and not exists (select 'a' from  [dbo].[ENTITY_MAIN] T1
                  where [dbo].[ENTITY_MAIN].NODE_PATH  like T1.NODE_PATH+'%'
                  and  T1.ENT_PARENT_ID is null)
						

  
				]]>
      </body>
    </procedure>
    
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_CODE_COURSE_CASE table passing page index and page count parameters
-- Table Comment: جدول أكواد حالات المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_CODE_COURSE_CASE_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_CODE_COURSE_CASE_ID]'
				SET @SQL = @SQL + ', [CASE_DESCR_AR]'
				SET @SQL = @SQL + ', [CASE_DESCR_EN]'
				SET @SQL = @SQL + ', [CASE_CODE]'
				SET @SQL = @SQL + ', [IS_FAILURE]'
				SET @SQL = @SQL + ', [IS_ADDED]'
				SET @SQL = @SQL + ', [AS_FACULTY_INFO_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE_CASE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_CODE_COURSE_CASE_ID],'
				SET @SQL = @SQL + ' [CASE_DESCR_AR],'
				SET @SQL = @SQL + ' [CASE_DESCR_EN],'
				SET @SQL = @SQL + ' [CASE_CODE],'
				SET @SQL = @SQL + ' [IS_FAILURE],'
				SET @SQL = @SQL + ' [IS_ADDED],'
				SET @SQL = @SQL + ' [AS_FACULTY_INFO_ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE_CASE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_COURSE_CASE table
-- Table Comment: جدول أكواد حالات المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CaseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CaseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CaseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@IsFailure" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsAdded" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_CODE_COURSE_CASE]
					(
					[ED_CODE_COURSE_CASE_ID]
					,[CASE_DESCR_AR]
					,[CASE_DESCR_EN]
					,[CASE_CODE]
					,[IS_FAILURE]
					,[IS_ADDED]
					,[AS_FACULTY_INFO_ID]
					)
				VALUES
					(
					@EdCodeCourseCaseId
					,@CaseDescrAr
					,@CaseDescrEn
					,@CaseCode
					,@IsFailure
					,@IsAdded
					,@AsFacultyInfoId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_CODE_COURSE_CASE table
-- Table Comment: جدول أكواد حالات المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CaseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CaseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CaseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@IsFailure" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsAdded" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_CODE_COURSE_CASE]
				SET
					[ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId
					,[CASE_DESCR_AR] = @CaseDescrAr
					,[CASE_DESCR_EN] = @CaseDescrEn
					,[CASE_CODE] = @CaseCode
					,[IS_FAILURE] = @IsFailure
					,[IS_ADDED] = @IsAdded
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				WHERE
[ED_CODE_COURSE_CASE_ID] = @OriginalEdCodeCourseCaseId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_CODE_COURSE_CASE table
-- Table Comment: جدول أكواد حالات المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_CODE_COURSE_CASE] WITH (ROWLOCK) 
				WHERE
					[ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_GetByAsFacultyInfoId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_CASE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_CODE_COURSE_CASE_ID],
					[CASE_DESCR_AR],
					[CASE_DESCR_EN],
					[CASE_CODE],
					[IS_FAILURE],
					[IS_ADDED],
					[AS_FACULTY_INFO_ID]
				FROM
					[dbo].[ED_CODE_COURSE_CASE]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_GetByAsFacultyInfoIdCaseDescrAr">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_CASE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CaseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_CODE_COURSE_CASE_ID],
					[CASE_DESCR_AR],
					[CASE_DESCR_EN],
					[CASE_CODE],
					[IS_FAILURE],
					[IS_ADDED],
					[AS_FACULTY_INFO_ID]
				FROM
					[dbo].[ED_CODE_COURSE_CASE]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					AND [CASE_DESCR_AR] = @CaseDescrAr
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_GetByEdCodeCourseCaseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_CASE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_CODE_COURSE_CASE_ID],
					[CASE_DESCR_AR],
					[CASE_DESCR_EN],
					[CASE_CODE],
					[IS_FAILURE],
					[IS_ADDED],
					[AS_FACULTY_INFO_ID]
				FROM
					[dbo].[ED_CODE_COURSE_CASE]
				WHERE
					[ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_CODE_COURSE_CASE table passing nullable parameters
-- Table Comment: جدول أكواد حالات المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdCodeCourseCaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@CaseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@CaseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@CaseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@IsFailure" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@IsAdded" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_CODE_COURSE_CASE_ID]
	, [CASE_DESCR_AR]
	, [CASE_DESCR_EN]
	, [CASE_CODE]
	, [IS_FAILURE]
	, [IS_ADDED]
	, [AS_FACULTY_INFO_ID]
    FROM
	[dbo].[ED_CODE_COURSE_CASE]
    WHERE 
	 ([ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId OR @EdCodeCourseCaseId IS NULL)
	AND ([CASE_DESCR_AR] = @CaseDescrAr OR @CaseDescrAr IS NULL)
	AND ([CASE_DESCR_EN] = @CaseDescrEn OR @CaseDescrEn IS NULL)
	AND ([CASE_CODE] = @CaseCode OR @CaseCode IS NULL)
	AND ([IS_FAILURE] = @IsFailure OR @IsFailure IS NULL)
	AND ([IS_ADDED] = @IsAdded OR @IsAdded IS NULL)
	AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_CODE_COURSE_CASE_ID]
	, [CASE_DESCR_AR]
	, [CASE_DESCR_EN]
	, [CASE_CODE]
	, [IS_FAILURE]
	, [IS_ADDED]
	, [AS_FACULTY_INFO_ID]
    FROM
	[dbo].[ED_CODE_COURSE_CASE]
    WHERE 
	 ([ED_CODE_COURSE_CASE_ID] = @EdCodeCourseCaseId AND @EdCodeCourseCaseId is not null)
	OR ([CASE_DESCR_AR] = @CaseDescrAr AND @CaseDescrAr is not null)
	OR ([CASE_DESCR_EN] = @CaseDescrEn AND @CaseDescrEn is not null)
	OR ([CASE_CODE] = @CaseCode AND @CaseCode is not null)
	OR ([IS_FAILURE] = @IsFailure AND @IsFailure is not null)
	OR ([IS_ADDED] = @IsAdded AND @IsAdded is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_CASE_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_CODE_COURSE_CASE table using a dynamically generated query.
-- Table Comment: جدول أكواد حالات المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ED_CODE_COURSE_CASE_ID]
					, [CASE_DESCR_AR]
					, [CASE_DESCR_EN]
					, [CASE_CODE]
					, [IS_FAILURE]
					, [IS_ADDED]
					, [AS_FACULTY_INFO_ID]
					FROM [dbo].[ED_CODE_COURSE_CASE] {0}
				)
				SELECT
				       [ED_CODE_COURSE_CASE_ID],
				       [CASE_DESCR_AR],
				       [CASE_DESCR_EN],
				       [CASE_CODE],
				       [IS_FAILURE],
				       [IS_ADDED],
				       [AS_FACULTY_INFO_ID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_CODE_COURSE_CASE] {0};
				
				END
			]]>
      </body>
    </procedure>
    <!--<procedure owner="dbo" name="ED_BYLAW_Get_List" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Gets all records from the ED_BYLAW table
 Table Comment: جدول لائحة كلية

*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_BYLAW_ID],
					[BYLAW_DESCR_AR],
					[BYLAW_DESCR_EN],
					[BYLAW_CODE],
					[AS_FACULTY_INFO_ID],
					[ED_ACAD_YEAR_ID],
					[ISSUE_NUMBER],
					[ISSUE_DATE],
					[BYLAW_NOTES],
					[IS_IMMEDIATE],
					[IS_CUR_BYLAW]
				FROM
					[dbo].[ED_BYLAW]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_GetPaged">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Gets records from the ED_BYLAW table passing page index and page count parameters
 Table Comment: جدول لائحة كلية

*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				 Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					 default order by to first column
					SET @OrderBy = '[ED_BYLAW_ID]'
				END

				 SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_BYLAW_ID]'
				SET @SQL = @SQL + ', [BYLAW_DESCR_AR]'
				SET @SQL = @SQL + ', [BYLAW_DESCR_EN]'
				SET @SQL = @SQL + ', [BYLAW_CODE]'
				SET @SQL = @SQL + ', [AS_FACULTY_INFO_ID]'
				SET @SQL = @SQL + ', [ED_ACAD_YEAR_ID]'
				SET @SQL = @SQL + ', [ISSUE_NUMBER]'
				SET @SQL = @SQL + ', [ISSUE_DATE]'
				SET @SQL = @SQL + ', [BYLAW_NOTES]'
				SET @SQL = @SQL + ', [IS_IMMEDIATE]'
				SET @SQL = @SQL + ', [IS_CUR_BYLAW]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_BYLAW]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_BYLAW_ID],'
				SET @SQL = @SQL + ' [BYLAW_DESCR_AR],'
				SET @SQL = @SQL + ' [BYLAW_DESCR_EN],'
				SET @SQL = @SQL + ' [BYLAW_CODE],'
				SET @SQL = @SQL + ' [AS_FACULTY_INFO_ID],'
				SET @SQL = @SQL + ' [ED_ACAD_YEAR_ID],'
				SET @SQL = @SQL + ' [ISSUE_NUMBER],'
				SET @SQL = @SQL + ' [ISSUE_DATE],'
				SET @SQL = @SQL + ' [BYLAW_NOTES],'
				SET @SQL = @SQL + ' [IS_IMMEDIATE],'
				SET @SQL = @SQL + ' [IS_CUR_BYLAW]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				 get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_BYLAW]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_Insert" grant="" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Inserts a record into the ED_BYLAW table
 Table Comment: جدول لائحة كلية

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@BylawDescrAr" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@BylawDescrEn" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@BylawCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@IssueNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@IssueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@BylawNotes" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="" />
        <parameter name="@IsImmediate" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsCurBylaw" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_BYLAW]
					(
					[ED_BYLAW_ID]
					,[BYLAW_DESCR_AR]
					,[BYLAW_DESCR_EN]
					,[BYLAW_CODE]
					,[AS_FACULTY_INFO_ID]
					,[ED_ACAD_YEAR_ID]
					,[ISSUE_NUMBER]
					,[ISSUE_DATE]
					,[BYLAW_NOTES]
					,[IS_IMMEDIATE]
					,[IS_CUR_BYLAW]
					)
				VALUES
					(
					@EdBylawId
					,@BylawDescrAr
					,@BylawDescrEn
					,@BylawCode
					,@AsFacultyInfoId
					,@EdAcadYearId
					,@IssueNumber
					,@IssueDate
					,@BylawNotes
					,@IsImmediate
					,@IsCurBylaw
					)
				
									
							
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_Update" grant="" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Updates a record in the ED_BYLAW table
 Table Comment: جدول لائحة كلية


*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@BylawDescrAr" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@BylawDescrEn" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@BylawCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@IssueNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@IssueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@BylawNotes" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="" />
        <parameter name="@IsImmediate" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsCurBylaw" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				 Modify the updatable columns
				UPDATE
					[dbo].[ED_BYLAW]
				SET
					[ED_BYLAW_ID] = @EdBylawId
					,[BYLAW_DESCR_AR] = @BylawDescrAr
					,[BYLAW_DESCR_EN] = @BylawDescrEn
					,[BYLAW_CODE] = @BylawCode
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[ISSUE_NUMBER] = @IssueNumber
					,[ISSUE_DATE] = @IssueDate
					,[BYLAW_NOTES] = @BylawNotes
					,[IS_IMMEDIATE] = @IsImmediate
					,[IS_CUR_BYLAW] = @IsCurBylaw
				WHERE
[ED_BYLAW_ID] = @OriginalEdBylawId 
				
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_Delete" grant="">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Deletes a record in the ED_BYLAW table
 Table Comment: جدول لائحة كلية

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_BYLAW] WITH (ROWLOCK) 
				WHERE
					[ED_BYLAW_ID] = @EdBylawId
					
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_GetByEdAcadYearId" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Select records from the ED_BYLAW table through a foreign key

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_BYLAW_ID],
					[BYLAW_DESCR_AR],
					[BYLAW_DESCR_EN],
					[BYLAW_CODE],
					[AS_FACULTY_INFO_ID],
					[ED_ACAD_YEAR_ID],
					[ISSUE_NUMBER],
					[ISSUE_DATE],
					[BYLAW_NOTES],
					[IS_IMMEDIATE],
					[IS_CUR_BYLAW]
				FROM
					[dbo].[ED_BYLAW]
				WHERE
					[ED_ACAD_YEAR_ID] = @EdAcadYearId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_GetByAsFacultyInfoId" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Select records from the ED_BYLAW table through a foreign key

*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_BYLAW_ID],
					[BYLAW_DESCR_AR],
					[BYLAW_DESCR_EN],
					[BYLAW_CODE],
					[AS_FACULTY_INFO_ID],
					[ED_ACAD_YEAR_ID],
					[ISSUE_NUMBER],
					[ISSUE_DATE],
					[BYLAW_NOTES],
					[IS_IMMEDIATE],
					[IS_CUR_BYLAW]
				FROM
					[dbo].[ED_BYLAW]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_GetByBylawDescrArAsFacultyInfoId" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Select records from the ED_BYLAW table through an index

*/
]]>
      </comment>
      <parameters>
        <parameter name="@BylawDescrAr" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_BYLAW_ID],
					[BYLAW_DESCR_AR],
					[BYLAW_DESCR_EN],
					[BYLAW_CODE],
					[AS_FACULTY_INFO_ID],
					[ED_ACAD_YEAR_ID],
					[ISSUE_NUMBER],
					[ISSUE_DATE],
					[BYLAW_NOTES],
					[IS_IMMEDIATE],
					[IS_CUR_BYLAW]
				FROM
					[dbo].[ED_BYLAW]
				WHERE
					[BYLAW_DESCR_AR] = @BylawDescrAr
					AND [AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_GetByEdBylawId" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Select records from the ED_BYLAW table through an index

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_BYLAW_ID],
					[BYLAW_DESCR_AR],
					[BYLAW_DESCR_EN],
					[BYLAW_CODE],
					[AS_FACULTY_INFO_ID],
					[ED_ACAD_YEAR_ID],
					[ISSUE_NUMBER],
					[ISSUE_DATE],
					[BYLAW_NOTES],
					[IS_IMMEDIATE],
					[IS_CUR_BYLAW]
				FROM
					[dbo].[ED_BYLAW]
				WHERE
					[ED_BYLAW_ID] = @EdBylawId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ED_BYLAW_Find" skip="true">
      <comment>
        <![CDATA[/*
 Date Created: Thursday, April 22, 2010

 Created By:  ()
 Purpose: Finds records in the ED_BYLAW table passing nullable parameters
 Table Comment: جدول لائحة كلية

*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@BylawDescrAr" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null" />
        <parameter name="@BylawDescrEn" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null" />
        <parameter name="@BylawCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@IssueNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@IssueDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@BylawNotes" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null" />
        <parameter name="@IsImmediate" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@IsCurBylaw" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_BYLAW_ID]
	, [BYLAW_DESCR_AR]
	, [BYLAW_DESCR_EN]
	, [BYLAW_CODE]
	, [AS_FACULTY_INFO_ID]
	, [ED_ACAD_YEAR_ID]
	, [ISSUE_NUMBER]
	, [ISSUE_DATE]
	, [BYLAW_NOTES]
	, [IS_IMMEDIATE]
	, [IS_CUR_BYLAW]
    FROM
	[dbo].[ED_BYLAW]
    WHERE 
	 ([ED_BYLAW_ID] = @EdBylawId OR @EdBylawId IS NULL)
	AND ([BYLAW_DESCR_AR] = @BylawDescrAr OR @BylawDescrAr IS NULL)
	AND ([BYLAW_DESCR_EN] = @BylawDescrEn OR @BylawDescrEn IS NULL)
	AND ([BYLAW_CODE] = @BylawCode OR @BylawCode IS NULL)
	AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
	AND ([ED_ACAD_YEAR_ID] = @EdAcadYearId OR @EdAcadYearId IS NULL)
	AND ([ISSUE_NUMBER] = @IssueNumber OR @IssueNumber IS NULL)
	AND ([ISSUE_DATE] = @IssueDate OR @IssueDate IS NULL)
	AND ([BYLAW_NOTES] = @BylawNotes OR @BylawNotes IS NULL)
	AND ([IS_IMMEDIATE] = @IsImmediate OR @IsImmediate IS NULL)
	AND ([IS_CUR_BYLAW] = @IsCurBylaw OR @IsCurBylaw IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_BYLAW_ID]
	, [BYLAW_DESCR_AR]
	, [BYLAW_DESCR_EN]
	, [BYLAW_CODE]
	, [AS_FACULTY_INFO_ID]
	, [ED_ACAD_YEAR_ID]
	, [ISSUE_NUMBER]
	, [ISSUE_DATE]
	, [BYLAW_NOTES]
	, [IS_IMMEDIATE]
	, [IS_CUR_BYLAW]
    FROM
	[dbo].[ED_BYLAW]
    WHERE 
	 ([ED_BYLAW_ID] = @EdBylawId AND @EdBylawId is not null)
	OR ([BYLAW_DESCR_AR] = @BylawDescrAr AND @BylawDescrAr is not null)
	OR ([BYLAW_DESCR_EN] = @BylawDescrEn AND @BylawDescrEn is not null)
	OR ([BYLAW_CODE] = @BylawCode AND @BylawCode is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	OR ([ED_ACAD_YEAR_ID] = @EdAcadYearId AND @EdAcadYearId is not null)
	OR ([ISSUE_NUMBER] = @IssueNumber AND @IssueNumber is not null)
	OR ([ISSUE_DATE] = @IssueDate AND @IssueDate is not null)
	OR ([BYLAW_NOTES] = @BylawNotes AND @BylawNotes is not null)
	OR ([IS_IMMEDIATE] = @IsImmediate AND @IsImmediate is not null)
	OR ([IS_CUR_BYLAW] = @IsCurBylaw AND @IsCurBylaw is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>-->





    <procedure owner="dbo" name="ED_COURSE_CATALOG_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_COURSE_CATALOG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[COURSE_ID],
					[COURSE_CODE],
					[COURSE_DESCR_AR],
					[COURSE_DESCR_EN]
				FROM
					[dbo].[ED_COURSE_CATALOG]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_CATALOG_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_CATALOG table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[COURSE_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [COURSE_ID]'
				SET @SQL = @SQL + ', [COURSE_CODE]'
				SET @SQL = @SQL + ', [COURSE_DESCR_AR]'
				SET @SQL = @SQL + ', [COURSE_DESCR_EN]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_CATALOG]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [COURSE_ID],'
				SET @SQL = @SQL + ' [COURSE_CODE],'
				SET @SQL = @SQL + ' [COURSE_DESCR_AR],'
				SET @SQL = @SQL + ' [COURSE_DESCR_EN]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_CATALOG]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_CATALOG_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE_CATALOG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CourseId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@CourseCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@CourseDescrAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@CourseDescrEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_COURSE_CATALOG]
					(
					[COURSE_ID]
					,[COURSE_CODE]
					,[COURSE_DESCR_AR]
					,[COURSE_DESCR_EN]
					)
				VALUES
					(
					@CourseId
					,@CourseCode
					,@CourseDescrAr
					,@CourseDescrEn
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_CATALOG_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_COURSE_CATALOG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CourseId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@OriginalCourseId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@CourseCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@CourseDescrAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@CourseDescrEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_COURSE_CATALOG]
				SET
					[COURSE_ID] = @CourseId
					,[COURSE_CODE] = @CourseCode
					,[COURSE_DESCR_AR] = @CourseDescrAr
					,[COURSE_DESCR_EN] = @CourseDescrEn
				WHERE
[COURSE_ID] = @OriginalCourseId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_CATALOG_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_COURSE_CATALOG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CourseId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_COURSE_CATALOG] WITH (ROWLOCK) 
				WHERE
					[COURSE_ID] = @CourseId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_CATALOG_GetByCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_CATALOG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CourseId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[COURSE_ID],
					[COURSE_CODE],
					[COURSE_DESCR_AR],
					[COURSE_DESCR_EN]
				FROM
					[dbo].[ED_COURSE_CATALOG]
				WHERE
					[COURSE_ID] = @CourseId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_CATALOG_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE_CATALOG table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@CourseId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null" />
        <parameter name="@CourseCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@CourseDescrAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@CourseDescrEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [COURSE_ID]
	, [COURSE_CODE]
	, [COURSE_DESCR_AR]
	, [COURSE_DESCR_EN]
    FROM
	[dbo].[ED_COURSE_CATALOG]
    WHERE 
	 ([COURSE_ID] = @CourseId OR @CourseId IS NULL)
	AND ([COURSE_CODE] = @CourseCode OR @CourseCode IS NULL)
	AND ([COURSE_DESCR_AR] = @CourseDescrAr OR @CourseDescrAr IS NULL)
	AND ([COURSE_DESCR_EN] = @CourseDescrEn OR @CourseDescrEn IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [COURSE_ID]
	, [COURSE_CODE]
	, [COURSE_DESCR_AR]
	, [COURSE_DESCR_EN]
    FROM
	[dbo].[ED_COURSE_CATALOG]
    WHERE 
	 ([COURSE_ID] = @CourseId AND @CourseId is not null)
	OR ([COURSE_CODE] = @CourseCode AND @CourseCode is not null)
	OR ([COURSE_DESCR_AR] = @CourseDescrAr AND @CourseDescrAr is not null)
	OR ([COURSE_DESCR_EN] = @CourseDescrEn AND @CourseDescrEn is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_CATALOG_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_CATALOG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [COURSE_ID]
					, [COURSE_CODE]
					, [COURSE_DESCR_AR]
					, [COURSE_DESCR_EN]
					FROM [dbo].[ED_COURSE_CATALOG] {0}
				)
				SELECT
				       [COURSE_ID],
				       [COURSE_CODE],
				       [COURSE_DESCR_AR],
				       [COURSE_DESCR_EN]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_COURSE_CATALOG] {0};
				
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_CODE_COURSE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_CODE_COURSE table passing page index and page count parameters
-- Table Comment: جدول أكواد المواد لكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_CODE_COURSE_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_CODE_COURSE_ID]'
				SET @SQL = @SQL + ', [AS_FACULTY_INFO_ID]'
				SET @SQL = @SQL + ', [COURSE_DESCR_AR]'
				SET @SQL = @SQL + ', [COURSE_DESCR_EN]'
				SET @SQL = @SQL + ', [COURSE_CODE]'
				SET @SQL = @SQL + ', [COURSE_CONTENTS_AR]'
				SET @SQL = @SQL + ', [COURSE_CONTENTS_EN]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_CODE_COURSE_ID],'
				SET @SQL = @SQL + ' [AS_FACULTY_INFO_ID],'
				SET @SQL = @SQL + ' [COURSE_DESCR_AR],'
				SET @SQL = @SQL + ' [COURSE_DESCR_EN],'
				SET @SQL = @SQL + ' [COURSE_CODE],'
				SET @SQL = @SQL + ' [COURSE_CONTENTS_AR],'
				SET @SQL = @SQL + ' [COURSE_CONTENTS_EN]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_Insert" grant="" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_COURSE table
-- Table Comment: جدول أكواد المواد لكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CourseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@CourseContentsAr" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
        <parameter name="@CourseContentsEn" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_CODE_COURSE]
					(
					[ED_CODE_COURSE_ID]
					,[AS_FACULTY_INFO_ID]
					,[COURSE_DESCR_AR]
					,[COURSE_DESCR_EN]
					,[COURSE_CODE]
					,[COURSE_CONTENTS_AR]
					,[COURSE_CONTENTS_EN]
					)
				VALUES
					(
					@EdCodeCourseId
					,@AsFacultyInfoId
					,@CourseDescrAr
					,@CourseDescrEn
					,@CourseCode
					,@CourseContentsAr
					,@CourseContentsEn
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_Update" grant="" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_CODE_COURSE table
-- Table Comment: جدول أكواد المواد لكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdCodeCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CourseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@CourseContentsAr" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
        <parameter name="@CourseContentsEn" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_CODE_COURSE]
				SET
					[ED_CODE_COURSE_ID] = @EdCodeCourseId
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[COURSE_DESCR_AR] = @CourseDescrAr
					,[COURSE_DESCR_EN] = @CourseDescrEn
					,[COURSE_CODE] = @CourseCode
					,[COURSE_CONTENTS_AR] = @CourseContentsAr
					,[COURSE_CONTENTS_EN] = @CourseContentsEn
				WHERE
[ED_CODE_COURSE_ID] = @OriginalEdCodeCourseId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_CODE_COURSE table
-- Table Comment: جدول أكواد المواد لكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_CODE_COURSE] WITH (ROWLOCK) 
				WHERE
					[ED_CODE_COURSE_ID] = @EdCodeCourseId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_GetByAsFacultyInfoId" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_CODE_COURSE_ID],
					[AS_FACULTY_INFO_ID],
					[COURSE_DESCR_AR],
					[COURSE_DESCR_EN],
					[COURSE_CODE],
					[COURSE_CONTENTS_AR],
					[COURSE_CONTENTS_EN]
				FROM
					[dbo].[ED_CODE_COURSE]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_GetByAsFacultyInfoIdCourseCode" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_CODE_COURSE_ID],
					[AS_FACULTY_INFO_ID],
					[COURSE_DESCR_AR],
					[COURSE_DESCR_EN],
					[COURSE_CODE],
					[COURSE_CONTENTS_AR],
					[COURSE_CONTENTS_EN]
				FROM
					[dbo].[ED_CODE_COURSE]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					AND [COURSE_CODE] = @CourseCode
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_GetByAsFacultyInfoIdCourseDescrAr" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_CODE_COURSE_ID],
					[AS_FACULTY_INFO_ID],
					[COURSE_DESCR_AR],
					[COURSE_DESCR_EN],
					[COURSE_CODE],
					[COURSE_CONTENTS_AR],
					[COURSE_CONTENTS_EN]
				FROM
					[dbo].[ED_CODE_COURSE]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					AND [COURSE_DESCR_AR] = @CourseDescrAr
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_CODE_COURSE_Find" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_CODE_COURSE table passing nullable parameters
-- Table Comment: جدول أكواد المواد لكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@CourseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@CourseContentsAr" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="null" />
        <parameter name="@CourseContentsEn" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_CODE_COURSE_ID]
	, [AS_FACULTY_INFO_ID]
	, [COURSE_DESCR_AR]
	, [COURSE_DESCR_EN]
	, [COURSE_CODE]
	, [COURSE_CONTENTS_AR]
	, [COURSE_CONTENTS_EN]
    FROM
	[dbo].[ED_CODE_COURSE]
    WHERE 
	 ([ED_CODE_COURSE_ID] = @EdCodeCourseId OR @EdCodeCourseId IS NULL)
	AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
	AND ([COURSE_DESCR_AR] = @CourseDescrAr OR @CourseDescrAr IS NULL)
	AND ([COURSE_DESCR_EN] = @CourseDescrEn OR @CourseDescrEn IS NULL)
	AND ([COURSE_CODE] = @CourseCode OR @CourseCode IS NULL)
	AND ([COURSE_CONTENTS_AR] = @CourseContentsAr OR @CourseContentsAr IS NULL)
	AND ([COURSE_CONTENTS_EN] = @CourseContentsEn OR @CourseContentsEn IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_CODE_COURSE_ID]
	, [AS_FACULTY_INFO_ID]
	, [COURSE_DESCR_AR]
	, [COURSE_DESCR_EN]
	, [COURSE_CODE]
	, [COURSE_CONTENTS_AR]
	, [COURSE_CONTENTS_EN]
    FROM
	[dbo].[ED_CODE_COURSE]
    WHERE 
	 ([ED_CODE_COURSE_ID] = @EdCodeCourseId AND @EdCodeCourseId is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	OR ([COURSE_DESCR_AR] = @CourseDescrAr AND @CourseDescrAr is not null)
	OR ([COURSE_DESCR_EN] = @CourseDescrEn AND @CourseDescrEn is not null)
	OR ([COURSE_CODE] = @CourseCode AND @CourseCode is not null)
	OR ([COURSE_CONTENTS_AR] = @CourseContentsAr AND @CourseContentsAr is not null)
	OR ([COURSE_CONTENTS_EN] = @CourseContentsEn AND @CourseContentsEn is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_SEMESTER_AGENDA_GetByEdSemesterOpenId_DT" >
      <comment>
        <![CDATA[/*
        
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_SEMESTER_AGENDA table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SELECT     ED_CODE_SEM_ACTVITY.DESCR_AR, ED_CODE_SEM_ACTVITY.DESCR_EN,
 ED_SEMESTER_AGENDA.FROM_DATE, 
 ED_SEMESTER_AGENDA.TO_DATE
FROM         ED_SEMESTER_AGENDA INNER JOIN
                      ED_CODE_SEM_ACTVITY ON ED_SEMESTER_AGENDA.ED_CODE_SEM_ACTVITY_ID = ED_CODE_SEM_ACTVITY.ED_CODE_SEM_ACTVITY_ID
				WHERE
					[ED_SEMESTER_OPEN_ID] = @EdSemesterOpenId
					
			]]>
      </body>

    </procedure>
    <procedure owner="dbo" name="GetStfMemAcademicLoad">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					DISTINCT	 SC_SCHEDULE_DTL.SA_STF_MAMBER_ID, [ED_COURSE].*
				
					FROM        ED_OFFERING INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID AND 
                      ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID LEFT OUTER JOIN SC_SCHEDULE_DTL_EXT_STF
                      ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_EXT_STF.SC_SCHEDULE_DTL_ID
                      
                      --INNER JOIN
                      --ENTITY_MAIN ON ED_COURSE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID

			    WHERE       (@SaStfMemberId=0 or SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @SaStfMemberId OR
			     SC_SCHEDULE_DTL_EXT_STF.SA_STF_MAMBER_ID = @SaStfMemberId) AND 
                (@AsFacultyInfoId = -1 or ((@AsFacultyInfoId = 0 and ED_OFFERING.AS_FACULTY_INFO_ID is null) or ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId)) AND 
                      (@EdCodeSemesterId = 0 OR @EdCodeSemesterId IS NULL OR ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND
                      (@EdAcadYearId = 0 OR @EdAcadYearId IS NULL OR ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId)
		order by [ED_COURSE].[COURSE_CODE]
				
			]]>
      </body>
    </procedure>




    <procedure owner="dbo" name="GetStfMemAcademicLoadHours">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
SELECT     ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, ED_CDE_TCHNG_MTHD.DESCR_EN, 
                      ED_CDE_TCHNG_MTHD.DESCR_AR, SUM(CAST(CAST(DATEDIFF(HH, SC_SCHEDULE_DTL_DAY.FROM_TIME, SC_SCHEDULE_DTL_DAY.TO_TIME) AS numeric(5, 2)) 
                      + CAST(DATEDIFF(MINUTE, SC_SCHEDULE_DTL_DAY.FROM_TIME, SC_SCHEDULE_DTL_DAY.TO_TIME) AS numeric(5, 2)) % 60 / 100 AS numeric(5, 2))) AS Hours, 
                      ED_COURSE.ENT_MAIN_ID
FROM         SC_SCHEDULE_HDR INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      ED_CDE_TCHNG_MTHD ON ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID INNER JOIN
                      ED_COURSE_TCHNG ON ED_COURSE.ED_COURSE_ID = ED_COURSE_TCHNG.ED_COURSE_ID AND 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_COURSE_TCHNG.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID
WHERE     (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @SaStfMemberId)
GROUP BY ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, ED_CDE_TCHNG_MTHD.DESCR_EN, 
                      ED_CDE_TCHNG_MTHD.DESCR_AR, ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID, ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID, 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID, ED_COURSE_TCHNG.ED_CODE_COURSE_TEACHING_ID, ED_COURSE_TCHNG.ED_COURSE_ID, 
                      ED_COURSE.ENT_MAIN_ID
ORDER BY ED_COURSE.COURSE_CODE
				
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="GetStfMemAcademicLoadHoursAll">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
SELECT     ED_CDE_TCHNG_MTHD.DESCR_EN, ED_CDE_TCHNG_MTHD.DESCR_AR, SUM(CAST(CAST(DATEDIFF(HH, SC_SCHEDULE_DTL_DAY.FROM_TIME, 
                      SC_SCHEDULE_DTL_DAY.TO_TIME) AS numeric(5, 2)) + CAST(DATEDIFF(MINUTE, SC_SCHEDULE_DTL_DAY.FROM_TIME, SC_SCHEDULE_DTL_DAY.TO_TIME) 
                      AS numeric(5, 2)) % 60 / 100 AS numeric(5, 2))) AS Hours, SA_CDE_ACAD_LOAD.ACD_LOAD
FROM         SC_SCHEDULE_HDR INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      ED_CDE_TCHNG_MTHD ON ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID INNER JOIN
                      ED_COURSE_TCHNG ON ED_COURSE.ED_COURSE_ID = ED_COURSE_TCHNG.ED_COURSE_ID AND 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_COURSE_TCHNG.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      SA_CDE_ACAD_LOAD ON SA_STF_MEMBER.SA_CODE_SC_DEG_ID = SA_CDE_ACAD_LOAD.SA_CODE_SC_DEG_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID
WHERE     (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @SaStfMemberId)
GROUP BY ED_CDE_TCHNG_MTHD.DESCR_EN, ED_CDE_TCHNG_MTHD.DESCR_AR, ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID, 
                      ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID, SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID, 
                      ED_COURSE_TCHNG.ED_CODE_COURSE_TEACHING_ID, SA_CDE_ACAD_LOAD.ACD_LOAD
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_COURSE_GetRegisteredCoursesInEntityMain">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				SELECT   distinct  ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN,ED_COURSE.COURSE_CODE
				FROM         ED_STUD_COURSE_REG INNER JOIN
									  ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
									  ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID INNER JOIN
									  ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
				where ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId
				and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
				and ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
				and ED_OFFERING.ENT_MAIN_ID = @EntMainId
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_GetDeptCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
					IF(@AsFacultyInfoId <>0 AND @EntMainId <> 0)
BEGIN
SELECT   distinct  ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN,ED_COURSE.COURSE_CODE
				FROM               ED_COURSE INNER JOIN
									  ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID INNER JOIN
									  ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
				where ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId
				and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
				and ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
				and ED_OFFERING.ENT_MAIN_ID = @EntMainId
        order by ED_COURSE.COURSE_CODE
        END
      IF(@AsFacultyInfoId <>0 AND @EntMainId = 0)
      begin
       BEGIN
			
			SELECT   distinct  ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN,ED_COURSE.COURSE_CODE
				FROM               ED_COURSE INNER JOIN
									  ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID INNER JOIN
									  ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
				where ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId
				and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
				and ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
        order by ED_COURSE.COURSE_CODE
			
		END 
      end
      else
        BEGIN
			
			SELECT   distinct  ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN,ED_COURSE.COURSE_CODE
				FROM               ED_COURSE INNER JOIN
									  ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID INNER JOIN
									  ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
				where ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId
				and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
				and ED_OFFERING.AS_FACULTY_INFO_ID IS null
        order by ED_COURSE.COURSE_CODE
			
		END
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SV_COURSE_EVAL_RATING">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SvCodeEvalItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
select t1.SV_CODE_RATING_SCHM_DTL_ID,t1.DESCR_AR,t1.DESCR_EN,ISNULL(t2.EvalItemCount,0) as EvalItemCount

from

(SELECT     SV_CODE_RATING_SCHM_DTL.*
FROM         SV_CODE_RATING_SCHM_DTL INNER JOIN
                      SV_CODE_RATING_SCHM ON 
                      SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_ID = SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID INNER JOIN
                      SV_COURSE_EVAL ON SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID = SV_COURSE_EVAL.SV_CODE_RATING_SCHM_ID
where SV_COURSE_EVAL.ED_COURSE_ID = @EdCourseId)as t1

left outer join

(SELECT    SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_DTL_ID,COUNT(SV_STUD_COURSE_EVAL.SV_STUD_COURSE_EVAL_ID) AS EvalItemCount
FROM         SV_STUD_COURSE_EVAL INNER JOIN
                      SV_COURSE_EVAL_ITEM ON 
                      SV_STUD_COURSE_EVAL.SV_COURSE_EVAL_ITEM_ID = SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ITEM_ID INNER JOIN
                      SV_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = SV_COURSE_EVAL.SV_COURSE_EVAL_ID INNER JOIN
                      SV_CODE_EVAL_ITEM ON SV_COURSE_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID = SV_CODE_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID INNER JOIN
                      SV_CODE_RATING_SCHM ON SV_COURSE_EVAL.SV_CODE_RATING_SCHM_ID = SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID INNER JOIN
                      SV_CODE_RATING_SCHM_DTL ON 
                      SV_STUD_COURSE_EVAL.SV_CODE_RATING_SCHM_DTL_ID = SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_DTL_ID AND 
                      SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID = SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_ID
where SV_COURSE_EVAL.ED_COURSE_ID = @EdCourseId
and SV_CODE_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID=@SvCodeEvalItemId
group by SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_DTL_ID)as t2

on t1.SV_CODE_RATING_SCHM_DTL_ID = t2.SV_CODE_RATING_SCHM_DTL_ID
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="Entity_Main_GetEvaluation">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SvCodeEvalItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@saStfMemberId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
declare @NodePath nvarchar(50);
SELECT   @NodePath =  ENTITY_MAIN.NODE_PATH
FROM         SV_STAFF_EVL INNER JOIN
                      ENTITY_MAIN ON SV_STAFF_EVL.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where SV_STAFF_EVL.SV_STAFF_EVL_ID = @EntMainId

select distinct  t2.SV_CODE_RATING_SCHM_DTL_ID,t2.DESCR_AR,t2.DESCR_EN,t2.EvalItemCount,t1.STF_FULL_NAME_AR,t1.STF_FULL_NAME_EN,t3.StaffCount
from(
SELECT     SA_STF_MEMBER.SA_STF_MEMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN
FROM         SA_STF_MEMBER INNER JOIN
                      ENTITY_MAIN ON SA_STF_MEMBER.AS_NODE_ID = ENTITY_MAIN.ENT_MAIN_ID
where ENTITY_MAIN.NODE_PATH like @NodePath+'%'
) as t1
left outer join
(

select t1.SV_CODE_RATING_SCHM_DTL_ID,t1.SA_STF_MEMBER_ID,t1.DESCR_AR,t1.DESCR_EN,ISNULL(t2.EvalItemCount,0) as EvalItemCount

from

(SELECT  distinct   SV_CODE_RATING_SCHM_DTL.*, SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID,SV_STAFF_EVL.ENT_MAIN_ID,SV_STAFF_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID
FROM         SV_CODE_RATING_SCHM_DTL INNER JOIN
                      SV_CODE_RATING_SCHM ON SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_ID = SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID INNER JOIN
                      SV_STAFF_EVL ON SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID = SV_STAFF_EVL.SV_CODE_RATING_SCHM_ID LEFT OUTER JOIN
                      SV_STAFF_EVAL_ITEM ON SV_STAFF_EVL.SV_STAFF_EVL_ID = SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID left outer JOIN
                      SV_STUD_STAFF_EVAL ON SV_STAFF_EVAL_ITEM.SV_STAFF_EVAL_ITEM_ID = SV_STUD_STAFF_EVAL.SV_STAFF_EVAL_ITEM_ID
WHERE     (SV_STAFF_EVL.SV_STAFF_EVL_ID = @EntMainId)
and SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID = @saStfMemberId
and SV_STAFF_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID = @SvCodeEvalItemId
)as t1

left outer join

(SELECT    SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_DTL_ID,SV_STAFF_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID,SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID,COUNT(SV_STUD_STAFF_EVAL.SV_STUD_STAFF_EVAL_ID) AS EvalItemCount
FROM         SV_STUD_STAFF_EVAL INNER JOIN
                      SV_STAFF_EVAL_ITEM ON 
                      SV_STUD_STAFF_EVAL.SV_STAFF_EVAL_ITEM_ID = SV_STAFF_EVAL_ITEM.SV_STAFF_EVAL_ITEM_ID INNER JOIN
                      SV_STAFF_EVL ON SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID = SV_STAFF_EVL.SV_STAFF_EVL_ID INNER JOIN
                      SV_CODE_EVAL_ITEM ON SV_STAFF_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID = SV_CODE_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID INNER JOIN
                      SV_CODE_RATING_SCHM ON SV_STAFF_EVL.SV_CODE_RATING_SCHM_ID = SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID INNER JOIN
                      SV_CODE_RATING_SCHM_DTL ON 
                      SV_STUD_STAFF_EVAL.SV_CODE_RATING_SCHM_DTL_ID = SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_DTL_ID AND 
                      SV_CODE_RATING_SCHM.SV_CODE_RATING_SCHM_ID = SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_ID
where SV_STAFF_EVL.SV_STAFF_EVL_ID = @EntMainId
and SV_CODE_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID=@SvCodeEvalItemId
group by SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_DTL_ID,SV_STAFF_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID,SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID
)as t2

on t1.SV_CODE_RATING_SCHM_DTL_ID = t2.SV_CODE_RATING_SCHM_DTL_ID
and t1.SA_STF_MEMBER_ID = t2.SA_STF_MEMBER_ID
and t1.SV_CODE_EVAL_ITEM_ID = t2.SV_CODE_EVAL_ITEM_ID

) as t2
on t1.SA_STF_MEMBER_ID = t2.SA_STF_MEMBER_ID
left outer join
(
SELECT     SA_STF_MEMBER_ID , COUNT (*) as StaffCount
FROM         SV_STUD_STAFF_EVAL
group by SA_STF_MEMBER_ID
) as t3
on t1.SA_STF_MEMBER_ID = t3.SA_STF_MEMBER_ID
where (t2.SA_STF_MEMBER_ID is not null and (@saStfMemberId = 0 or t2.SA_STF_MEMBER_ID = @saStfMemberId))


			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_DeleteBySearch">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE table passing nullable parameters
-- Table Comment: جدول المواد الدراسية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@CourseName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@FromCh" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@ToCh" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

      declare @VarErrorrMessage nvarchar(max),@TempCourseId numeric,@TempCourseDescrAr nvarchar(150),@TempCourseDescrEn nvarchar(150);
      set @VarErrorrMessage='';
      DECLARE		Courses_CURSOR CURSOR FOR
				      SELECT [dbo].[ED_COURSE].[ED_COURSE_ID],[dbo].[ED_COURSE].[COURSE_DESCR_AR],[dbo].[ED_COURSE].[COURSE_DESCR_EN]
				      FROM
	                    [dbo].[ED_COURSE] left outer join entity_main on entity_main.ent_main_id =[dbo].[ED_COURSE].ent_main_id
                        left outer JOIN
                                ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID 
                        WHERE 
	                    ([dbo].[ED_COURSE].[COURSE_CODE] like '%'+ @CourseCode +'%' OR @CourseCode IS NULL)
	                    AND(
	                         ([dbo].[ED_COURSE].[COURSE_DESCR_AR] like '%'+ @CourseName +'%' )
	                        OR ([dbo].[ED_COURSE].[COURSE_DESCR_En] like '%'+ @CourseName +'%') 
	                        OR (@CourseName IS NULL)
	                    )
	                    AND ([dbo].[ED_COURSE].[AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
	                    AND ([dbo].[ED_COURSE].[ENT_MAIN_ID] = @EntMainId OR @EntMainId =0)
	                    AND([dbo].[ED_COURSE].CREDIT_HOURS>=@FromCh or @FromCh=-1)
                        AND([dbo].[ED_COURSE].CREDIT_HOURS<@ToCh or @ToCh=-1)
      				
				     OPEN Courses_CURSOR
				      FETCH NEXT FROM Courses_CURSOR INTO @TempCourseId,@TempCourseDescrAr,@TempCourseDescrEn
				      WHILE(@@FETCH_STATUS <> -1)
				      BEGIN  
              
                   begin transaction;
                       begin try
                          
                             delete from ED_COURSE_TCHNG where ED_COURSE_ID=@TempCourseId;
				             delete from ED_COURSE where ED_COURSE_ID=@TempCourseId;
				              commit transaction;  
				         end try 
				         begin catch
				         
                         IF @@ERROR != 0 --check @@ERROR variable after each DML statements..
							        BEGIN

									   if(@lang=1)
												set  @VarErrorrMessage=@VarErrorrMessage+'<br>&nbsp;&nbsp;&nbsp;&nbsp;&#9830;&nbsp;'+@TempCourseDescrEn;
										else  
											set  @VarErrorrMessage=@VarErrorrMessage+'<br>&nbsp;&nbsp;&nbsp;&nbsp;&#9830;&nbsp;'+@TempCourseDescrAr;
                               
							             ROLLBACK TRANSACTION --RollBack Transaction if Error..
							          END

                         end catch     

				      FETCH NEXT FROM Courses_CURSOR INTO @TempCourseId,@TempCourseDescrAr,@TempCourseDescrEn
				      end
				      CLOSE Courses_CURSOR
				      DEALLOCATE Courses_CURSOR

            if(@VarErrorrMessage !='')
              Begin
              set  @VarErrorrMessage='ForignKeyErrorr'+ @VarErrorrMessage
               RAISERROR(@VarErrorrMessage,16,-1)
                    RETURN 
              End
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_TEACHING_GetByUniversity">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_CODE_COURSE_TEACHING table
-- Table Comment: جدول أكواد طرق تدريس مقرر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					*
				FROM
					[dbo].[ED_CODE_COURSE_TEACHING]
          where AS_FACULTY_INFO_ID is null
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_TEACHING_GetByAsFacultyInfoIdMethodDescrAr">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_TEACHING table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@MethodDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					*
				FROM
					[dbo].[ED_CODE_COURSE_TEACHING] join ED_CDE_TCHNG_MTHD on
          ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					AND ED_CDE_TCHNG_MTHD.DESCR_AR = @MethodDescrAr
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_CODE_COURSE_EDIT table
-- Table Comment: جدول أكواد الإجراءات على المواد إضافة حذف انسحاب انسحاب متأخر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_CODE_CR_SUBJ_EDIT_ID],
					[CODE_DESCR_AR],
					[CODE_DESCR_EN]
				FROM
					[dbo].[ED_CODE_COURSE_EDIT]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_CODE_COURSE_EDIT table passing page index and page count parameters
-- Table Comment: جدول أكواد الإجراءات على المواد إضافة حذف انسحاب انسحاب متأخر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_CODE_CR_SUBJ_EDIT_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_CODE_CR_SUBJ_EDIT_ID]'
				SET @SQL = @SQL + ', [CODE_DESCR_AR]'
				SET @SQL = @SQL + ', [CODE_DESCR_EN]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE_EDIT]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_CODE_CR_SUBJ_EDIT_ID],'
				SET @SQL = @SQL + ' [CODE_DESCR_AR],'
				SET @SQL = @SQL + ' [CODE_DESCR_EN]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE_EDIT]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_COURSE_EDIT table
-- Table Comment: جدول أكواد الإجراءات على المواد إضافة حذف انسحاب انسحاب متأخر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCrSubjEditId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CodeDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@CodeDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_CODE_COURSE_EDIT]
					(
					[ED_CODE_CR_SUBJ_EDIT_ID]
					,[CODE_DESCR_AR]
					,[CODE_DESCR_EN]
					)
				VALUES
					(
					@EdCodeCrSubjEditId
					,@CodeDescrAr
					,@CodeDescrEn
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_CODE_COURSE_EDIT table
-- Table Comment: جدول أكواد الإجراءات على المواد إضافة حذف انسحاب انسحاب متأخر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCrSubjEditId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdCodeCrSubjEditId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CodeDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@CodeDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_CODE_COURSE_EDIT]
				SET
					[ED_CODE_CR_SUBJ_EDIT_ID] = @EdCodeCrSubjEditId
					,[CODE_DESCR_AR] = @CodeDescrAr
					,[CODE_DESCR_EN] = @CodeDescrEn
				WHERE
[ED_CODE_CR_SUBJ_EDIT_ID] = @OriginalEdCodeCrSubjEditId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_CODE_COURSE_EDIT table
-- Table Comment: جدول أكواد الإجراءات على المواد إضافة حذف انسحاب انسحاب متأخر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCrSubjEditId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_CODE_COURSE_EDIT] WITH (ROWLOCK) 
				WHERE
					[ED_CODE_CR_SUBJ_EDIT_ID] = @EdCodeCrSubjEditId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_GetByEdCodeCrSubjEditId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_EDIT table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCrSubjEditId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_CODE_CR_SUBJ_EDIT_ID],
					[CODE_DESCR_AR],
					[CODE_DESCR_EN]
				FROM
					[dbo].[ED_CODE_COURSE_EDIT]
				WHERE
					[ED_CODE_CR_SUBJ_EDIT_ID] = @EdCodeCrSubjEditId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_CODE_COURSE_EDIT table passing nullable parameters
-- Table Comment: جدول أكواد الإجراءات على المواد إضافة حذف انسحاب انسحاب متأخر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdCodeCrSubjEditId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@CodeDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@CodeDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_CODE_CR_SUBJ_EDIT_ID]
	, [CODE_DESCR_AR]
	, [CODE_DESCR_EN]
    FROM
	[dbo].[ED_CODE_COURSE_EDIT]
    WHERE 
	 ([ED_CODE_CR_SUBJ_EDIT_ID] = @EdCodeCrSubjEditId OR @EdCodeCrSubjEditId IS NULL)
	AND ([CODE_DESCR_AR] = @CodeDescrAr OR @CodeDescrAr IS NULL)
	AND ([CODE_DESCR_EN] = @CodeDescrEn OR @CodeDescrEn IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_CODE_CR_SUBJ_EDIT_ID]
	, [CODE_DESCR_AR]
	, [CODE_DESCR_EN]
    FROM
	[dbo].[ED_CODE_COURSE_EDIT]
    WHERE 
	 ([ED_CODE_CR_SUBJ_EDIT_ID] = @EdCodeCrSubjEditId AND @EdCodeCrSubjEditId is not null)
	OR ([CODE_DESCR_AR] = @CodeDescrAr AND @CodeDescrAr is not null)
	OR ([CODE_DESCR_EN] = @CodeDescrEn AND @CodeDescrEn is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_EDIT_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_CODE_COURSE_EDIT table using a dynamically generated query.
-- Table Comment: جدول أكواد الإجراءات على المواد إضافة حذف انسحاب انسحاب متأخر
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ED_CODE_CR_SUBJ_EDIT_ID]
					, [CODE_DESCR_AR]
					, [CODE_DESCR_EN]
					FROM [dbo].[ED_CODE_COURSE_EDIT] {0}
				)
				SELECT
				       [ED_CODE_CR_SUBJ_EDIT_ID],
				       [CODE_DESCR_AR],
				       [CODE_DESCR_EN]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_CODE_COURSE_EDIT] {0};
				
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_COREQ_GetByEdCourseConId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_COREQ table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseConId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_COURSE_COREQ_ID],
					[ED_COURSE_GROUP],
					[ED_COURSE_ID],
					[IS_MAIN]
				FROM
					[dbo].[ED_COURSE_COREQ]
				WHERE
					[ED_COURSE_COREQ_ID] = @EdCourseConId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="COURSE_COREQ_Get_MaxGroup">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE_COREQ table passing nullable parameters
-- Table Comment: جدول مجموعة مواد متزامنة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <body>
        <![CDATA[
			
  SELECT TOP 1
	  [ED_COURSE_COREQ_ID]
	,[ED_COURSE_GROUP]
	, [ED_COURSE_ID]
	, [IS_MAIN]
 
    FROM
	[dbo].[ED_COURSE_COREQ] 
	ORDER BY [ED_COURSE_GROUP] DESC
						
 
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_GetByUniversity">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_CODE_COURSE_ASSESS table
-- Table Comment: جدول أكواد طرق تقييم المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_CODE_COURSE_ASSESS_ID],
					[DESCR_AR],
					[DESCR_EN],
					[AS_FACULTY_INFO_ID],
          [CONTROL_FLAG]
				FROM
					[dbo].[ED_CODE_COURSE_ASSESS]
					where (as_faculty_info_id is null)
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_GetByAsFacultyInfoIdMethodDescrAr" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_ASSESS table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@MethodDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_CODE_COURSE_ASSESS_ID],
					[METHOD_DESCR_AR],
					[METHOD_DESCR_EN],
					[AS_FACULTY_INFO_ID],
          [CONTROL_FLAG]
				FROM
					[dbo].[ED_CODE_COURSE_ASSESS]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					AND [METHOD_DESCR_AR] = @MethodDescrAr
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Get_List" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_ASSESS table passing page index and page count parameters
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_SUBJECT_ASSESS_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_SUBJECT_ASSESS_ID]'
				SET @SQL = @SQL + ', [ED_CODE_SUBJECT_ASSESS_ID]'
				SET @SQL = @SQL + ', [ED_COURSE_ID]'
				SET @SQL = @SQL + ', [MAX_GRADE]'
				SET @SQL = @SQL + ', [MIN_GRADE]'
				SET @SQL = @SQL + ', [MIN_RATE]'
				SET @SQL = @SQL + ', [MAX_RATE]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_ASSESS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_SUBJECT_ASSESS_ID],'
				SET @SQL = @SQL + ' [ED_CODE_SUBJECT_ASSESS_ID],'
				SET @SQL = @SQL + ' [ED_COURSE_ID],'
				SET @SQL = @SQL + ' [MAX_GRADE],'
				SET @SQL = @SQL + ' [MIN_GRADE],'
				SET @SQL = @SQL + ' [MIN_RATE],'
				SET @SQL = @SQL + ' [MAX_RATE]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_ASSESS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@MaxGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_COURSE_ASSESS]
					(
					[ED_SUBJECT_ASSESS_ID]
					,[ED_CODE_SUBJECT_ASSESS_ID]
					,[ED_COURSE_ID]
					,[MAX_GRADE]
					,[MIN_GRADE]
					,[MIN_RATE]
					,[MAX_RATE]
					)
				VALUES
					(
					@EdSubjectAssessId
					,@EdCodeSubjectAssessId
					,@EdCourseId
					,@MaxGrade
					,@MinGrade
					,@MinRate
					,@MaxRate
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@MaxGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_COURSE_ASSESS]
				SET
					[ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId
					,[ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId
					,[ED_COURSE_ID] = @EdCourseId
					,[MAX_GRADE] = @MaxGrade
					,[MIN_GRADE] = @MinGrade
					,[MIN_RATE] = @MinRate
					,[MAX_RATE] = @MaxRate
				WHERE
[ED_SUBJECT_ASSESS_ID] = @OriginalEdSubjectAssessId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_COURSE_ASSESS] WITH (ROWLOCK) 
				WHERE
					[ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_COURSE_ID] = @EdCourseId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdCodeSubjectAssessId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdCodeSubjectAssessIdEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId
					AND [ED_COURSE_ID] = @EdCourseId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdSubjectAssessId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE_ASSESS table passing nullable parameters
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@MaxGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
        <parameter name="@MinGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
        <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
        <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_SUBJECT_ASSESS_ID]
	, [ED_CODE_SUBJECT_ASSESS_ID]
	, [ED_COURSE_ID]
	, [MAX_GRADE]
	, [MIN_GRADE]
	, [MIN_RATE]
	, [MAX_RATE]
    FROM
	[dbo].[ED_COURSE_ASSESS]
    WHERE 
	 ([ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId OR @EdSubjectAssessId IS NULL)
	AND ([ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId OR @EdCodeSubjectAssessId IS NULL)
	AND ([ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
	AND ([MAX_GRADE] = @MaxGrade OR @MaxGrade IS NULL)
	AND ([MIN_GRADE] = @MinGrade OR @MinGrade IS NULL)
	AND ([MIN_RATE] = @MinRate OR @MinRate IS NULL)
	AND ([MAX_RATE] = @MaxRate OR @MaxRate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_SUBJECT_ASSESS_ID]
	, [ED_CODE_SUBJECT_ASSESS_ID]
	, [ED_COURSE_ID]
	, [MAX_GRADE]
	, [MIN_GRADE]
	, [MIN_RATE]
	, [MAX_RATE]
    FROM
	[dbo].[ED_COURSE_ASSESS]
    WHERE 
	 ([ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId AND @EdSubjectAssessId is not null)
	OR ([ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId AND @EdCodeSubjectAssessId is not null)
	OR ([ED_COURSE_ID] = @EdCourseId AND @EdCourseId is not null)
	OR ([MAX_GRADE] = @MaxGrade AND @MaxGrade is not null)
	OR ([MIN_GRADE] = @MinGrade AND @MinGrade is not null)
	OR ([MIN_RATE] = @MinRate AND @MinRate is not null)
	OR ([MAX_RATE] = @MaxRate AND @MaxRate is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_ASSESS table using a dynamically generated query.
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ED_SUBJECT_ASSESS_ID]
					, [ED_CODE_SUBJECT_ASSESS_ID]
					, [ED_COURSE_ID]
					, [MAX_GRADE]
					, [MIN_GRADE]
					, [MIN_RATE]
					, [MAX_RATE]
					FROM [dbo].[ED_COURSE_ASSESS] {0}
				)
				SELECT
				       [ED_SUBJECT_ASSESS_ID],
				       [ED_CODE_SUBJECT_ASSESS_ID],
				       [ED_COURSE_ID],
				       [MAX_GRADE],
				       [MIN_GRADE],
				       [MIN_RATE],
				       [MAX_RATE]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_COURSE_ASSESS] {0};
				
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ENT_INTRODUC_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ENT_INTRODUC_MD_DATA_ID],
					[ENT_INTRODUC_MD_ID],
					[MD_VALUE],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_INTRODUC_MD_DATA]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ENT_INTRODUC_MD_DATA_ID table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ENT_INTRODUC_MD_DATA_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ENT_INTRODUC_MD_DATA_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ENT_INTRODUC_MD_DATA_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_INTRODUC_MD_DATA]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ENT_INTRODUC_MD_DATA_ID], O.[ENT_INTRODUC_MD_ID], O.[MD_VALUE], O.[ENT_MAIN_ID]
				FROM
				    [dbo].[ENT_INTRODUC_MD_DATA] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ENT_INTRODUC_MD_DATA_ID] = PageIndex.[ENT_INTRODUC_MD_DATA_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_INTRODUC_MD_DATA]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_INTRODUC_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntIntroducMdDataId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntIntroducMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@MdValue" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
         declare @newEntIntroducMdDataId numeric(3,0)
         select  @newEntIntroducMdDataId =max(ENT_INTRODUC_MD_DATA_ID)from ENT_INTRODUC_MD_DATA;
         if( @newEntIntroducMdDataId is null)
            set  @newEntIntroducMdDataId=0;
            
          set  @newEntIntroducMdDataId= @newEntIntroducMdDataId + 1;  
        
        
				INSERT INTO [dbo].[ENT_INTRODUC_MD_DATA]
					(
					[ENT_INTRODUC_MD_DATA_ID]
					,[ENT_INTRODUC_MD_ID]
					,[MD_VALUE]
					,[ENT_MAIN_ID]
					)
				VALUES
					(
					@newEntIntroducMdDataId
					,@EntIntroducMdId
					,@MdValue
					,@EntMainId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ENT_INTRODUC_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntIntroducMdDataId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEntIntroducMdDataId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntIntroducMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@MdValue" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ENT_INTRODUC_MD_DATA]
				SET
					[ENT_INTRODUC_MD_ID] = @EntIntroducMdId
					,[MD_VALUE] = @MdValue
					,[ENT_MAIN_ID] = @EntMainId
				WHERE
[ENT_INTRODUC_MD_DATA_ID] = @EntIntroducMdDataId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ENT_INTRODUC_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntIntroducMdDataId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ENT_INTRODUC_MD_DATA] WITH (ROWLOCK) 
				WHERE
					[ENT_INTRODUC_MD_DATA_ID] = @EntIntroducMdDataId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetIntroDataByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_INTRODUC_MD_DATA_ID table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				select ENT_INTRODUC_MD_DATA.MD_VALUE as DataValue
        ,ENT_CODE_INTRO_METADATA.DESCR_AR as IntroCodeDescrAr
        ,ENT_CODE_INTRO_METADATA.DESCR_EN as IntroCodeDescrEn
        ,ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID as EntCodeEntityTypeId
        ,ENTITY_MAIN.ENT_MAIN_ID as EntMainId
        ,ENT_CODE_INTRO_METADATA.ENT_CODE_INTRO_MD_ID as EntCodeIntroMdId

        from ENT_INTRODUC_MD_DATA inner join ENT_INTRODUC_METADATA on ENT_INTRODUC_MD_DATA.ENT_INTRODUC_MD_ID=ENT_INTRODUC_METADATA.ENT_INTRODUC_MD_ID
        inner join ENT_CODE_INTRO_METADATA on ENT_INTRODUC_METADATA.ENT_CODE_INTRO_MD_ID=ENT_CODE_INTRO_METADATA.ENT_CODE_INTRO_MD_ID
        inner join ENTITY_MAIN on ENT_INTRODUC_MD_DATA.ENT_MAIN_ID=ENTITY_MAIN.ENT_MAIN_ID

        where ENTITY_MAIN.ENT_MAIN_ID =@EntMainId
        and ENT_CODE_INTRO_METADATA.ENT_CODE_INTRO_MD_ID in (1,12,13,14)--address,TEL.,FAX,E-MAIL
        and (ENT_INTRODUC_MD_DATA.MD_VALUE is not null and ENT_INTRODUC_MD_DATA.MD_VALUE !='')
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetUniFacProgramIntroData">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_INTRODUC_MD_DATA_ID table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
					
				select ENT_INTRODUC_MD_DATA.MD_VALUE as DataValue
        ,ENT_CODE_INTRO_METADATA.DESCR_AR as IntroCodeDescrAr
        ,ENT_CODE_INTRO_METADATA.DESCR_EN as IntroCodeDescrEn
        ,ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID as EntCodeEntityTypeId
        ,ENTITY_MAIN.ENT_MAIN_ID as EntMainId

        from ENT_INTRODUC_MD_DATA inner join ENT_INTRODUC_METADATA on ENT_INTRODUC_MD_DATA.ENT_INTRODUC_MD_ID=ENT_INTRODUC_METADATA.ENT_INTRODUC_MD_ID
        inner join ENT_CODE_INTRO_METADATA on ENT_INTRODUC_METADATA.ENT_CODE_INTRO_MD_ID=ENT_CODE_INTRO_METADATA.ENT_CODE_INTRO_MD_ID
        inner join ENTITY_MAIN on ENT_INTRODUC_MD_DATA.ENT_MAIN_ID=ENTITY_MAIN.ENT_MAIN_ID

        where ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID in (1,2,14)--university,faculty,program
        and ENT_CODE_INTRO_METADATA.ENT_CODE_INTRO_MD_ID in (1,12,13,14)--address,TEL.,FAX,E-MAIL
        and (ENT_INTRODUC_MD_DATA.MD_VALUE is not null and ENT_INTRODUC_MD_DATA.MD_VALUE !='')


        order by ENTITY_MAIN.ENT_MAIN_ID
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_GetByEntIntroducMdId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_INTRODUC_MD_DATA_ID table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntIntroducMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ENT_INTRODUC_MD_DATA_ID],
					[ENT_INTRODUC_MD_ID],
					[MD_VALUE],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_INTRODUC_MD_DATA]
				WHERE
					[ENT_INTRODUC_MD_ID] = @EntIntroducMdId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_GetByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_INTRODUC_MD_DATA_ID table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ENT_INTRODUC_MD_DATA_ID],
					[ENT_INTRODUC_MD_ID],
					[MD_VALUE],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_INTRODUC_MD_DATA]
				WHERE
					[ENT_MAIN_ID] = @EntMainId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_GetByEntIntroducMdDataId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_INTRODUC_MD_DATA_ID table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntIntroducMdDataId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_INTRODUC_MD_DATA_ID],
					[ENT_INTRODUC_MD_ID],
					[MD_VALUE],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_INTRODUC_MD_DATA]
				WHERE
					[ENT_INTRODUC_MD_DATA_ID] = @EntIntroducMdDataId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ENT_INTRODUC_MD_DATA_ID table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EntIntroducMdDataId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EntIntroducMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@MdValue" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ENT_INTRODUC_MD_DATA_ID]
	, [ENT_INTRODUC_MD_ID]
	, [MD_VALUE]
	, [ENT_MAIN_ID]
    FROM
	[dbo].[ENT_INTRODUC_MD_DATA]
    WHERE 
	 ([ENT_INTRODUC_MD_DATA_ID] = @EntIntroducMdDataId OR @EntIntroducMdDataId IS NULL)
	AND ([ENT_INTRODUC_MD_ID] = @EntIntroducMdId OR @EntIntroducMdId IS NULL)
	AND ([MD_VALUE] = @MdValue OR @MdValue IS NULL)
	AND ([ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ENT_INTRODUC_MD_DATA_ID]
	, [ENT_INTRODUC_MD_ID]
	, [MD_VALUE]
	, [ENT_MAIN_ID]
    FROM
	[dbo].[ENT_INTRODUC_MD_DATA]
    WHERE 
	 ([ENT_INTRODUC_MD_DATA_ID] = @EntIntroducMdDataId AND @EntIntroducMdDataId is not null)
	OR ([ENT_INTRODUC_MD_ID] = @EntIntroducMdId AND @EntIntroducMdId is not null)
	OR ([MD_VALUE] = @MdValue AND @MdValue is not null)
	OR ([ENT_MAIN_ID] = @EntMainId AND @EntMainId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_INTRODUC_MD_DATA_ID_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ENT_INTRODUC_MD_DATA_ID table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ENT_INTRODUC_MD_DATA_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ENT_INTRODUC_MD_DATA_ID] )
				SELECT TOP {3} [ENT_INTRODUC_MD_DATA_ID]
				FROM [dbo].[ENT_INTRODUC_MD_DATA] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ENT_INTRODUC_MD_DATA_ID], O.[ENT_INTRODUC_MD_ID], O.[MD_VALUE], O.[ENT_MAIN_ID]
				FROM
				    [dbo].[ENT_INTRODUC_MD_DATA] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ENT_INTRODUC_MD_DATA_ID] = PageIndex.[ENT_INTRODUC_MD_DATA_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ENT_INTRODUC_MD_DATA] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ENT_PRECOND_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ENT_PRECOND_DATA_MD_ID],
					[ENT_PRECOND_MD_ID],
					[MD_VALUE_2],
					[MD_VALUE_1],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_PRECOND_MD_DATA]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ENT_PRECOND_MD_DATA_ID table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ENT_PRECOND_DATA_MD_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ENT_PRECOND_DATA_MD_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ENT_PRECOND_DATA_MD_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_PRECOND_MD_DATA]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ENT_PRECOND_DATA_MD_ID], O.[ENT_PRECOND_MD_ID], O.[MD_VALUE_2], O.[MD_VALUE_1], O.[ENT_MAIN_ID]
				FROM
				    [dbo].[ENT_PRECOND_MD_DATA] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ENT_PRECOND_DATA_MD_ID] = PageIndex.[ENT_PRECOND_DATA_MD_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_PRECOND_MD_DATA]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_PRECOND_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPrecondDataMdId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntPrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@MdValue2" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="" />
        <parameter name="@MdValue1" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
          declare @newEntPrecondDataMdId numeric(3,0)
         select  @newEntPrecondDataMdId =max(ENT_PRECOND_DATA_MD_ID)from ENT_PRECOND_MD_DATA;
         if( @newEntPrecondDataMdId is null)
            set  @newEntPrecondDataMdId=0;
            
          set  @newEntPrecondDataMdId= @newEntPrecondDataMdId + 1;  
        
				INSERT INTO [dbo].[ENT_PRECOND_MD_DATA]
					(
					[ENT_PRECOND_DATA_MD_ID]
					,[ENT_PRECOND_MD_ID]
					,[MD_VALUE_2]
					,[MD_VALUE_1]
					,[ENT_MAIN_ID]
					)
				VALUES
					(
					@newEntPrecondDataMdId
					,@EntPrecondMdId
					,@MdValue2
					,@MdValue1
					,@EntMainId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ENT_PRECOND_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPrecondDataMdId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEntPrecondDataMdId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntPrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@MdValue2" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="" />
        <parameter name="@MdValue1" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ENT_PRECOND_MD_DATA]
				SET
					[ENT_PRECOND_MD_ID] = @EntPrecondMdId
					,[MD_VALUE_2] = @MdValue2
					,[MD_VALUE_1] = @MdValue1
					,[ENT_MAIN_ID] = @EntMainId
				WHERE
[ENT_PRECOND_DATA_MD_ID] = @EntPrecondDataMdId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ENT_PRECOND_MD_DATA_ID table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPrecondDataMdId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ENT_PRECOND_MD_DATA] WITH (ROWLOCK) 
				WHERE
					[ENT_PRECOND_DATA_MD_ID] = @EntPrecondDataMdId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_GetByEntPrecondMdId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_PRECOND_MD_DATA_ID table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ENT_PRECOND_DATA_MD_ID],
					[ENT_PRECOND_MD_ID],
					[MD_VALUE_2],
					[MD_VALUE_1],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_PRECOND_MD_DATA]
				WHERE
					[ENT_PRECOND_MD_ID] = @EntPrecondMdId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_GetByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_PRECOND_MD_DATA_ID table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ENT_PRECOND_MD_DATA].[ENT_PRECOND_DATA_MD_ID],
					[dbo].[ENT_PRECOND_MD_DATA].[ENT_PRECOND_MD_ID],
					[dbo].[ENT_PRECOND_MD_DATA].[MD_VALUE_2],
					[dbo].[ENT_PRECOND_MD_DATA].[MD_VALUE_1],
					[dbo].[ENT_PRECOND_MD_DATA].[ENT_MAIN_ID],
          [ENT_PRECOND_METADATA].ENT_CODE_PRECOND_MD_ID
          
				FROM
					[dbo].[ENT_PRECOND_MD_DATA] inner join [ENT_PRECOND_METADATA] on [dbo].[ENT_PRECOND_MD_DATA].[ENT_PRECOND_MD_ID]=[ENT_PRECOND_METADATA].ENT_PRECOND_MD_ID
				WHERE
					[ENT_MAIN_ID] = @EntMainId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_GetByEntPrecondDataMdId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_PRECOND_MD_DATA_ID table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPrecondDataMdId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_PRECOND_DATA_MD_ID],
					[ENT_PRECOND_MD_ID],
					[MD_VALUE_2],
					[MD_VALUE_1],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_PRECOND_MD_DATA]
				WHERE
					[ENT_PRECOND_DATA_MD_ID] = @EntPrecondDataMdId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ENT_PRECOND_MD_DATA_ID table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EntPrecondDataMdId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EntPrecondMdId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@MdValue2" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="null" />
        <parameter name="@MdValue1" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ENT_PRECOND_DATA_MD_ID]
	, [ENT_PRECOND_MD_ID]
	, [MD_VALUE_2]
	, [MD_VALUE_1]
	, [ENT_MAIN_ID]
    FROM
	[dbo].[ENT_PRECOND_MD_DATA]
    WHERE 
	 ([ENT_PRECOND_DATA_MD_ID] = @EntPrecondDataMdId OR @EntPrecondDataMdId IS NULL)
	AND ([ENT_PRECOND_MD_ID] = @EntPrecondMdId OR @EntPrecondMdId IS NULL)
	AND ([MD_VALUE_2] = @MdValue2 OR @MdValue2 IS NULL)
	AND ([MD_VALUE_1] = @MdValue1 OR @MdValue1 IS NULL)
	AND ([ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ENT_PRECOND_DATA_MD_ID]
	, [ENT_PRECOND_MD_ID]
	, [MD_VALUE_2]
	, [MD_VALUE_1]
	, [ENT_MAIN_ID]
    FROM
	[dbo].[ENT_PRECOND_MD_DATA]
    WHERE 
	 ([ENT_PRECOND_DATA_MD_ID] = @EntPrecondDataMdId AND @EntPrecondDataMdId is not null)
	OR ([ENT_PRECOND_MD_ID] = @EntPrecondMdId AND @EntPrecondMdId is not null)
	OR ([MD_VALUE_2] = @MdValue2 AND @MdValue2 is not null)
	OR ([MD_VALUE_1] = @MdValue1 AND @MdValue1 is not null)
	OR ([ENT_MAIN_ID] = @EntMainId AND @EntMainId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_PRECOND_MD_DATA_ID_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ENT_PRECOND_MD_DATA_ID table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ENT_PRECOND_DATA_MD_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ENT_PRECOND_DATA_MD_ID] )
				SELECT TOP {3} [ENT_PRECOND_DATA_MD_ID]
				FROM [dbo].[ENT_PRECOND_MD_DATA] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ENT_PRECOND_DATA_MD_ID], O.[ENT_PRECOND_MD_ID], O.[MD_VALUE_2], O.[MD_VALUE_1], O.[ENT_MAIN_ID]
				FROM
				    [dbo].[ENT_PRECOND_MD_DATA] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ENT_PRECOND_DATA_MD_ID] = PageIndex.[ENT_PRECOND_DATA_MD_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ENT_PRECOND_MD_DATA] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="COURSE_PKG_DTL_by_Course_StudSem">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  (Updated by dalia to fix the bug of the column of "ADD_MJRGPA_FLG" make select *)
-- Purpose: Finds records in the ENT_POLICY_ASSESS_HDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
       
            If exists
                (    
                   SELECT    *   -- ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_DTL_ID, 
                                -- ENT_COURSE_PKG_DTL.ED_COURSE_ID, 
                                -- ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID,
                               --  ENT_COURSE_PKG_DTL.ADD_GPA_FLG
                    FROM       ED_STUD_STATE INNER JOIN
                               ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                               ENT_COURSE_PKG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_COURSE_PKG_HDR.ENT_MAIN_ID INNER JOIN
                               ENT_COURSE_PKG_DTL ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID
                    WHERE    (ENT_COURSE_PKG_DTL.ED_COURSE_ID = @EdCourseId) AND
                             (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId)
                )
                Begin
                    SELECT      *   -- ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_DTL_ID, 
                                -- ENT_COURSE_PKG_DTL.ED_COURSE_ID, 
                                -- ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID,
                               --  ENT_COURSE_PKG_DTL.ADD_GPA_FLG
                    FROM       ED_STUD_STATE INNER JOIN
                               ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                               ENT_COURSE_PKG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_COURSE_PKG_HDR.ENT_MAIN_ID INNER JOIN
                               ENT_COURSE_PKG_DTL ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID
                    WHERE    (ENT_COURSE_PKG_DTL.ED_COURSE_ID = @EdCourseId) AND
                             (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId)
              End
              
         Else
              Begin
                  declare @AsFacultyInfoId numeric
                  select @AsFacultyInfoId=AS_FACULTY_INFO_ID from ED_STUD_SEMESTER where 
                          ED_STUD_SEMESTER_ID=@EdStudSemesterId;
                          
                          
                   SELECT       *   -- ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_DTL_ID, 
                                -- ENT_COURSE_PKG_DTL.ED_COURSE_ID, 
                                -- ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID,
                               --  ENT_COURSE_PKG_DTL.ADD_GPA_FLG
                  FROM         ENTITY_MAIN INNER JOIN
                               ENT_COURSE_PKG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_COURSE_PKG_HDR.ENT_MAIN_ID INNER JOIN
                               ENT_COURSE_PKG_DTL ON ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID
                  WHERE     (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                            (ENT_COURSE_PKG_DTL.ED_COURSE_ID =@EdCourseId)
              End
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_COURSE_PKG_DTL_OFFERED">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, May 04, 2010

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCoursePkgHdrId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ENT_COURSE_PKG_DTL].[ENT_COURSE_PKG_DTL_ID],
					[dbo].[ENT_COURSE_PKG_DTL].[ED_COURSE_ID],
					[dbo].[ENT_COURSE_PKG_DTL].[ENT_COURSE_PKG_HDR_ID],
           [dbo].[ENT_COURSE_PKG_DTL].[ADD_GPA_FLG],
          [dbo].[ED_COURSE].COURSE_CODE,
          [dbo].[ED_COURSE].COURSE_DESCR_AR,
          [dbo].[ED_COURSE].COURSE_DESCR_EN,
          [dbo].[ED_COURSE].CREDIT_HOURS
				FROM
					[dbo].[ENT_COURSE_PKG_DTL] INNER JOIN [dbo].[ED_COURSE] ON 
          [dbo].[ED_COURSE].ED_COURSE_ID=[dbo].[ENT_COURSE_PKG_DTL].ED_COURSE_ID
          inner join ED_OFFERING_COURSE on ED_OFFERING_COURSE.ED_COURSE_ID=[dbo].[ENT_COURSE_PKG_DTL].ED_COURSE_ID
          inner join ED_OFFERING on ED_OFFERING.ED_OFFERING_ID=ED_OFFERING_COURSE.ED_OFFERING_ID
				WHERE
					[dbo].[ENT_COURSE_PKG_DTL].[ENT_COURSE_PKG_HDR_ID] = @EntCoursePkgHdrId
          and  [dbo].[ED_OFFERING].[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
          and  [dbo].[ED_OFFERING].[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
          and  [dbo].[ED_OFFERING].[ED_ACAD_YEAR_ID] = @EdAcadYearId
          
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetCoursesCanStudentRegister">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, May 04, 2010

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EntMainID" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@CourseCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF

        declare @Ent_Main_Type_ID numeric,@Fac_AsFacInfo_ID numeric
              				
              if(@EntMainID != null)
              
               select @Ent_Main_Type_ID=ENT_CODE_ENTITY_TYPE_ID,
                   @Fac_AsFacInfo_ID=AS_FACULTY_INFO_ID
                from ENTITY_MAIN where ENT_MAIN_ID=@EntMainID



              SELECT distinct
					        [ED_COURSE].*
              FROM         ED_COURSE INNER JOIN
                                    ED_OFFERING INNER JOIN
                                    ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID ON 
                                    ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID LEFT OUTER JOIN
                                    ENT_COURSE_PKG_DTL INNER JOIN
                                    ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID ON 
                                    ED_OFFERING_COURSE.ED_COURSE_ID = ENT_COURSE_PKG_DTL.ED_COURSE_ID 
                WHERE    
                        (@CourseCode='' or @CourseCode is null or ED_COURSE.COURSE_CODE = @CourseCode)AND 
                        (ED_COURSE.ELECT_FLG=1 or ((ED_COURSE.ELECT_FLG=0 or ED_COURSE.ELECT_FLG is null) and (ED_COURSE.GS_COURSE_ELECT_TYPE_ID is null or ED_COURSE.GS_COURSE_ELECT_TYPE_ID = 0) )) and
                        (ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId) AND 
                        (ED_OFFERING.ED_CODE_SEMESTER_ID =@EdCodeSemesterId) AND
                         (
                              (@Ent_Main_Type_ID=1) OR
                              (@Ent_Main_Type_ID=2 and ED_OFFERING.AS_FACULTY_INFO_ID =@Fac_AsFacInfo_ID) OR
                              ( @Ent_Main_Type_ID= 3 and ED_OFFERING.ENT_MAIN_ID = @EntMainID) OR
                              (ENT_COURSE_PKG_HDR.ENT_MAIN_ID=@EntMainID)
                         )
                        --  and not exists(select 'a' from ed_stud_course_reg  inner join ed_stud_semester on 
												--                  ed_stud_semester.ed_stud_semester_id=ed_stud_course_reg.ed_stud_semester_id
											  --               where 
											  --                ed_stud_semester.ed_stud_id=@EdStudId and
											  --                ed_stud_semester.ED_ACAD_YEAR_ID=@EdAcadYearId and
											  ----                ed_stud_semester.ED_CODE_SEMESTER_ID=@EdCodeSemesterId and
											   --               ed_stud_course_reg.ed_course_id=[dbo].[ENT_COURSE_PKG_DTL].[ED_COURSE_ID]
                          --                )
                                          and not exists(SELECT  1 FROM ED_STUD_COURSE_REG INNER JOIN 
                                          ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                                          WHERE (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) AND
                                          (ED_STUD_COURSE_REG.ED_COURSE_ID = ed_course.ed_course_id) AND 
                                          ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1 AND
                                          (ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1 or ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID is null))
                                          
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetCoursesCanStudentRegisterCurrState">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, May 04, 2010

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EntMainID" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@CourseCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" />
      </parameters>
      <body>
        <![CDATA[
						SET ANSI_NULLS OFF

         declare @Ent_Main_Type_ID numeric,@Fac_AsFacInfo_ID numeric
              				
              if(@EntMainID != null)
              
               select @Ent_Main_Type_ID=ENT_CODE_ENTITY_TYPE_ID,
                   @Fac_AsFacInfo_ID=AS_FACULTY_INFO_ID
                from ENTITY_MAIN where ENT_MAIN_ID=@EntMainID

              SELECT distinct
					        [ED_COURSE].*,ENT_COURSE_PKG_HDR.ENT_MAIN_ID
              FROM         ED_COURSE INNER JOIN
                                    ED_OFFERING INNER JOIN
                                    ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID ON 
                                    ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID LEFT OUTER JOIN
                                    ENT_COURSE_PKG_DTL INNER JOIN
                                    ENT_COURSE_PKG_HDR ON ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID ON 
                                    ED_OFFERING_COURSE.ED_COURSE_ID = ENT_COURSE_PKG_DTL.ED_COURSE_ID 
                WHERE    
                        (@CourseCode='' or @CourseCode is null or ED_COURSE.COURSE_CODE = @CourseCode)AND 
                        (ED_COURSE.ELECT_FLG=1 or ((ED_COURSE.ELECT_FLG=0 or ED_COURSE.ELECT_FLG is null) and (ED_COURSE.GS_COURSE_ELECT_TYPE_ID is null or ED_COURSE.GS_COURSE_ELECT_TYPE_ID = 0) )) and
                        (ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId) AND 
                        (ED_OFFERING.ED_CODE_SEMESTER_ID =@EdCodeSemesterId) 
                        AND  ENT_COURSE_PKG_HDR.ENT_MAIN_ID = @EntMainID
                        --commented by dalia to get the courses that offering from course pkg
                       --  and ((@Fac_AsFacInfo_ID is null and ED_OFFERING.AS_FACULTY_INFO_ID is null)or(
                        -- ED_OFFERING.AS_FACULTY_INFO_ID =@Fac_AsFacInfo_ID
                        -- ))
             
                                          and not exists(SELECT  1 FROM ED_STUD_COURSE_REG INNER JOIN 
                                          ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                                          WHERE (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) AND
                                          (ED_STUD_COURSE_REG.ED_COURSE_ID = ed_course.ed_course_id) AND 
                                          ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1 AND
                                          (ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1 or ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID is null))
                                          
				
				         
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetMaxGradeOrder" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_GRADING table
-- Table Comment: جدول أكواد التقديرات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
      </parameters>
      <body>
        <![CDATA[
				
          declare @MaxEdCodeGradingOrder numeric(2,0)
                select @MaxEdCodeGradingOrder=max(GRAD_ORDER) from ED_CODE_GRADING
                select @MaxEdCodeGradingOrder;
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_CODE_LANGUAGE_GetByLanguageDescrAr">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GS_CODE_LANGUAGE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@LanguageDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[GS_CODE_LANGUAGE_ID],
					DESCR_AR as [LANGUAGE_DESCR_AR],
					DESCR_EN as [LANGUAGE_DESCR_EN],
					LANG_CODE as [LANGUAGE_CODE],
					IS_LANG_LOCAL as [IS_LANGUAGE_LOCAL]
				FROM
					[dbo].[GS_CODE_LANGUAGE]
				WHERE
					DESCR_AR = @LanguageDescrAr
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudFeeDiscountFilter">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@FeeDiscEdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
  if(@LangNum=1)--Arabic
  begin
  if(@AsFacultyInfoId is null)
  begin
  
   SELECT 	 ED_STUD.*,
					            null,
					            0,
                      GS_CODE_GENDER.GENDER_DESCR_AR,
                      GS_CODE_RELIGION.RELIGION_DESCR_AR,
                      GS_COUNTRY_INFO.DESCR_AR
	            from   FEE_STUD_DISC inner join ED_STUD on FEE_STUD_DISC.ED_STUD_ID=ED_STUD.ED_STUD_ID left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or 
                (ED_STUD.CL_FULL_NAME_AR like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                      and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                      (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                      (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                      (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId)
                order by FULL_NAME_AR
  
  end
  
  else if(@AsFacultyInfoId=0)
  begin
     SELECT 	 ED_STUD.*,
					            null,
					            0,
					            
                      GS_CODE_GENDER.GENDER_DESCR_AR,
                      GS_CODE_RELIGION.RELIGION_DESCR_AR,
                      GS_COUNTRY_INFO.DESCR_AR
	            from   FEE_STUD_DISC inner join ED_STUD on FEE_STUD_DISC.ED_STUD_ID=ED_STUD.ED_STUD_ID left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or 
                (ED_STUD.CL_FULL_NAME_AR like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                      (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                      (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                      (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId)
                order by FULL_NAME_AR
  end
  
  else
  begin
  
	            SELECT 	distinct ED_STUD.*,
					            ED_STUD_FACULTY.STUD_FACULTY_CODE,
					            
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					            
                      GS_CODE_GENDER.GENDER_DESCR_Ar,
                      GS_CODE_RELIGION.RELIGION_DESCR_AR,
                      GS_COUNTRY_INFO.DESCR_Ar
	            from   FEE_STUD_DISC inner join ED_STUD on FEE_STUD_DISC.ED_STUD_ID=ED_STUD.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     left outer join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                   left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                                  
                where (@StudClFullName is null or 
                (ED_STUD.CL_FULL_NAME_AR like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                      and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                      (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                      (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                      (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId)
                order by FULL_NAME_AR

  end
  end
  else--english
  begin
  
  if(@AsFacultyInfoId is null)
  begin
   SELECT   distinct ED_STUD.*,
					      null,
					      0,
					      
                GS_CODE_GENDER.GENDER_DESCR_EN,
                GS_CODE_RELIGION.RELIGION_DESCR_EN,
                GS_COUNTRY_INFO.DESCR_EN
	       from   FEE_STUD_DISC inner join ED_STUD on FEE_STUD_DISC.ED_STUD_ID=ED_STUD.ED_STUD_ID left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
               left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id

          where (@StudClFullName is null or 
          (ED_STUD.FULL_NAME_EN like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId)
                
          order by FULL_NAME_EN
  end
  
  else if(@AsFacultyInfoId=0)
  begin
  SELECT   distinct ED_STUD.*,
					      null,
					      0,
					      
                GS_CODE_GENDER.GENDER_DESCR_EN,
                GS_CODE_RELIGION.RELIGION_DESCR_EN,
                GS_COUNTRY_INFO.DESCR_EN
	       from   FEE_STUD_DISC inner join ED_STUD on FEE_STUD_DISC.ED_STUD_ID=ED_STUD.ED_STUD_ID left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
               left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id

          where (@StudClFullName is null or 
          (ED_STUD.FULL_NAME_EN like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId)
          order by FULL_NAME_EN
  end
  
  else 
  begin
         SELECT   distinct ED_STUD.*,
					      ED_STUD_FACULTY.STUD_FACULTY_CODE,
					      ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					      
                GS_CODE_GENDER.GENDER_DESCR_EN,
                GS_CODE_RELIGION.RELIGION_DESCR_EN,
                GS_COUNTRY_INFO.DESCR_EN
                
	       from   FEE_STUD_DISC inner join ED_STUD on FEE_STUD_DISC.ED_STUD_ID=ED_STUD.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     left outer join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                   left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
    
          where (@StudClFullName is null or 
          (ED_STUD.FULL_NAME_EN like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId)
           order by FULL_NAME_EN
   end            
  end
	
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="StudFeeDiscountFilter2">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StartDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@EndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@FeeDiscEdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FeeCdeDiscTypeId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

 
  if(@LangNum=1)--Arabic
  begin
  if(@AsFacultyInfoId is null)
  begin
  
  SELECT  distinct   FEE_STUD_DISC.FEE_STUD_DISC_ID, 
			FEE_STUD_DISC.DISC_REQ_DATE, 
			FEE_STUD_DISC.ED_STUD_ID, 
            FEE_STUD_DISC.DISC_PERCENT, 
            FEE_STUD_DISC.STOP_FLG, 
            FEE_STUD_DISC.UPDATED_PERCENT, 
            ED_STUD_FACULTY.STUD_FACULTY_CODE, 
            ED_STUD.FULL_NAME_AR,
            ED_STUD.FULL_NAME_EN,
            FEE_CDE_DISC_TYPE.DESCR_AR as DISC_TYPE_DESCR_AR, 
            FEE_CDE_DISC_TYPE.DESCR_EN as DISC_TYPE_DESCR_EN, 
            GS_CODE_REQ_STATUS.DESCR_AR AS REQ_STATUS_DESCR_AR, 
            GS_CODE_REQ_STATUS.DESCR_EN AS REQ_STATUS_DESCR_EN,
            ED_ACAD_YEAR.DESCR_AR as ACAD_YEAR_DESCR_AR,
            ED_ACAD_YEAR.DESCR_EN as ACAD_YEAR_DESCR_EN
FROM         FEE_STUD_DISC INNER JOIN
                      ED_STUD ON FEE_STUD_DISC.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_ACAD_YEAR ON FEE_STUD_DISC.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID INNER JOIN
                      GS_CODE_REQ_STATUS ON FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID = GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID LEFT OUTER JOIN
                      GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
                      GS_CODE_RELIGION ON GS_CODE_RELIGION.GS_CODE_RELIGION_ID = ED_STUD.GS_CODE_RELIGION_ID
                where (@StudClFullName is null or 
                (ED_STUD.CL_FULL_NAME_AR like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                      and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                      (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                      (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                      (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId) and
                      (@FeeCdeDiscTypeId is null or FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID=@FeeCdeDiscTypeId)
                order by FULL_NAME_AR
  
  end
  
  else if(@AsFacultyInfoId=0)
  begin
     SELECT  distinct   FEE_STUD_DISC.FEE_STUD_DISC_ID, 
			FEE_STUD_DISC.DISC_REQ_DATE, 
			FEE_STUD_DISC.ED_STUD_ID, 
            FEE_STUD_DISC.DISC_PERCENT, 
            FEE_STUD_DISC.STOP_FLG, 
            FEE_STUD_DISC.UPDATED_PERCENT, 
            ED_STUD_FACULTY.STUD_FACULTY_CODE,
            ED_STUD.FULL_NAME_AR,
            ED_STUD.FULL_NAME_EN, 
            FEE_CDE_DISC_TYPE.DESCR_AR as DISC_TYPE_DESCR_AR, 
            FEE_CDE_DISC_TYPE.DESCR_EN as DISC_TYPE_DESCR_EN, 
            GS_CODE_REQ_STATUS.DESCR_AR AS REQ_STATUS_DESCR_AR, 
            GS_CODE_REQ_STATUS.DESCR_EN AS REQ_STATUS_DESCR_EN,
            ED_ACAD_YEAR.DESCR_AR as ACAD_YEAR_DESCR_AR,
            ED_ACAD_YEAR.DESCR_EN as ACAD_YEAR_DESCR_EN
FROM         FEE_STUD_DISC INNER JOIN
                      ED_STUD ON FEE_STUD_DISC.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_ACAD_YEAR ON FEE_STUD_DISC.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID INNER JOIN
                      GS_CODE_REQ_STATUS ON FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID = GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID LEFT OUTER JOIN
                      GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
                      GS_CODE_RELIGION ON GS_CODE_RELIGION.GS_CODE_RELIGION_ID = ED_STUD.GS_CODE_RELIGION_ID
                where (@StudClFullName is null or 
                (ED_STUD.CL_FULL_NAME_AR like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                      (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                      (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                      (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId) and
                      (@FeeCdeDiscTypeId is null or FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID=@FeeCdeDiscTypeId)
                order by FULL_NAME_AR
  end
  
  else
  begin
  
	            SELECT   distinct  FEE_STUD_DISC.FEE_STUD_DISC_ID, 
			FEE_STUD_DISC.DISC_REQ_DATE, 
			FEE_STUD_DISC.ED_STUD_ID, 
            FEE_STUD_DISC.DISC_PERCENT, 
            FEE_STUD_DISC.STOP_FLG, 
            FEE_STUD_DISC.UPDATED_PERCENT, 
            ED_STUD_FACULTY.STUD_FACULTY_CODE,
            ED_STUD.FULL_NAME_AR,
            ED_STUD.FULL_NAME_EN, 
            FEE_CDE_DISC_TYPE.DESCR_AR as DISC_TYPE_DESCR_AR, 
            FEE_CDE_DISC_TYPE.DESCR_EN as DISC_TYPE_DESCR_EN, 
            GS_CODE_REQ_STATUS.DESCR_AR AS REQ_STATUS_DESCR_AR, 
            GS_CODE_REQ_STATUS.DESCR_EN AS REQ_STATUS_DESCR_EN,
            ED_ACAD_YEAR.DESCR_AR as ACAD_YEAR_DESCR_AR,
            ED_ACAD_YEAR.DESCR_EN as ACAD_YEAR_DESCR_EN
FROM         FEE_STUD_DISC INNER JOIN
                      ED_STUD ON FEE_STUD_DISC.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId INNER JOIN
                      ED_ACAD_YEAR ON FEE_STUD_DISC.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID INNER JOIN
                      GS_CODE_REQ_STATUS ON FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID = GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID LEFT OUTER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID AND 
                      ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId AND ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId LEFT OUTER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID LEFT OUTER JOIN
                      ED_STUD_STATE ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID LEFT OUTER JOIN
                      GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
                      GS_CODE_RELIGION ON GS_CODE_RELIGION.GS_CODE_RELIGION_ID = ED_STUD.GS_CODE_RELIGION_ID                 
                where (@StudClFullName is null or 
                (ED_STUD.CL_FULL_NAME_AR like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                      and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                      (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                      (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                      (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId) and
                      (@FeeCdeDiscTypeId is null or FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID=@FeeCdeDiscTypeId)
                order by FULL_NAME_AR

  end
  end
  else--english
  begin
  
  if(@AsFacultyInfoId is null)
  begin
SELECT   distinct  FEE_STUD_DISC.FEE_STUD_DISC_ID, 
			FEE_STUD_DISC.DISC_REQ_DATE, 
			FEE_STUD_DISC.ED_STUD_ID, 
            FEE_STUD_DISC.DISC_PERCENT, 
            FEE_STUD_DISC.STOP_FLG, 
            FEE_STUD_DISC.UPDATED_PERCENT, 
            ED_STUD_FACULTY.STUD_FACULTY_CODE, 
            ED_STUD.FULL_NAME_AR,
            ED_STUD.FULL_NAME_EN,
            FEE_CDE_DISC_TYPE.DESCR_AR as DISC_TYPE_DESCR_AR, 
            FEE_CDE_DISC_TYPE.DESCR_EN as DISC_TYPE_DESCR_EN, 
            GS_CODE_REQ_STATUS.DESCR_AR AS REQ_STATUS_DESCR_AR, 
            GS_CODE_REQ_STATUS.DESCR_EN AS REQ_STATUS_DESCR_EN,
            ED_ACAD_YEAR.DESCR_AR as ACAD_YEAR_DESCR_AR,
            ED_ACAD_YEAR.DESCR_EN as ACAD_YEAR_DESCR_EN
FROM         FEE_STUD_DISC INNER JOIN
                      ED_STUD ON FEE_STUD_DISC.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_ACAD_YEAR ON FEE_STUD_DISC.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID INNER JOIN
                      GS_CODE_REQ_STATUS ON FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID = GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID LEFT OUTER JOIN
                      GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
                      GS_CODE_RELIGION ON GS_CODE_RELIGION.GS_CODE_RELIGION_ID = ED_STUD.GS_CODE_RELIGION_ID
          where (@StudClFullName is null or 
          (ED_STUD.FULL_NAME_EN like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId) and
                      (@FeeCdeDiscTypeId is null or FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID=@FeeCdeDiscTypeId)
                
          order by FULL_NAME_EN
  end
  
  else if(@AsFacultyInfoId=0)
  begin
SELECT   distinct  FEE_STUD_DISC.FEE_STUD_DISC_ID, 
			FEE_STUD_DISC.DISC_REQ_DATE, 
			FEE_STUD_DISC.ED_STUD_ID, 
            FEE_STUD_DISC.DISC_PERCENT, 
            FEE_STUD_DISC.STOP_FLG, 
            FEE_STUD_DISC.UPDATED_PERCENT, 
            ED_STUD_FACULTY.STUD_FACULTY_CODE, 
            ED_STUD.FULL_NAME_AR,
            ED_STUD.FULL_NAME_EN,
            FEE_CDE_DISC_TYPE.DESCR_AR as DISC_TYPE_DESCR_AR, 
            FEE_CDE_DISC_TYPE.DESCR_EN as DISC_TYPE_DESCR_EN, 
            GS_CODE_REQ_STATUS.DESCR_AR AS REQ_STATUS_DESCR_AR, 
            GS_CODE_REQ_STATUS.DESCR_EN AS REQ_STATUS_DESCR_EN,
            ED_ACAD_YEAR.DESCR_AR as ACAD_YEAR_DESCR_AR,
            ED_ACAD_YEAR.DESCR_EN as ACAD_YEAR_DESCR_EN
FROM         FEE_STUD_DISC INNER JOIN
                      ED_STUD ON FEE_STUD_DISC.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_ACAD_YEAR ON FEE_STUD_DISC.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID INNER JOIN
                      GS_CODE_REQ_STATUS ON FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID = GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID LEFT OUTER JOIN
                      GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
                      GS_CODE_RELIGION ON GS_CODE_RELIGION.GS_CODE_RELIGION_ID = ED_STUD.GS_CODE_RELIGION_ID
          where (@StudClFullName is null or 
          (ED_STUD.FULL_NAME_EN like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId) and
                      (@FeeCdeDiscTypeId is null or FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID=@FeeCdeDiscTypeId)
          order by FULL_NAME_EN
  end
  
  else 
  begin
SELECT   distinct  FEE_STUD_DISC.FEE_STUD_DISC_ID, 
			FEE_STUD_DISC.DISC_REQ_DATE, 
			FEE_STUD_DISC.ED_STUD_ID, 
            FEE_STUD_DISC.DISC_PERCENT, 
            FEE_STUD_DISC.STOP_FLG, 
            FEE_STUD_DISC.UPDATED_PERCENT, 
            ED_STUD_FACULTY.STUD_FACULTY_CODE, 
            ED_STUD.FULL_NAME_AR,
            ED_STUD.FULL_NAME_EN,
            FEE_CDE_DISC_TYPE.DESCR_AR as DISC_TYPE_DESCR_AR, 
            FEE_CDE_DISC_TYPE.DESCR_EN as DISC_TYPE_DESCR_EN, 
            GS_CODE_REQ_STATUS.DESCR_AR AS REQ_STATUS_DESCR_AR, 
            GS_CODE_REQ_STATUS.DESCR_EN AS REQ_STATUS_DESCR_EN,
            ED_ACAD_YEAR.DESCR_AR as ACAD_YEAR_DESCR_AR,
            ED_ACAD_YEAR.DESCR_EN as ACAD_YEAR_DESCR_EN
FROM         FEE_STUD_DISC INNER JOIN
                      ED_STUD ON FEE_STUD_DISC.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId INNER JOIN
                      ED_ACAD_YEAR ON FEE_STUD_DISC.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID INNER JOIN
                      GS_CODE_REQ_STATUS ON FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID = GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID LEFT OUTER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID AND 
                      ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId AND ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId LEFT OUTER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID LEFT OUTER JOIN
                      ED_STUD_STATE ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID LEFT OUTER JOIN
                      GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
                      GS_CODE_RELIGION ON GS_CODE_RELIGION.GS_CODE_RELIGION_ID = ED_STUD.GS_CODE_RELIGION_ID
          where (@StudClFullName is null or 
          (ED_STUD.FULL_NAME_EN like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                and (@StartDate is null or FEE_STUD_DISC.DISC_REQ_DATE>=@StartDate) and
                (@EndDate is null or FEE_STUD_DISC.DISC_REQ_DATE<=@EndDate) and
                (@FeeDiscEdAcadYearId is null or FEE_STUD_DISC.ED_ACAD_YEAR_ID=@FeeDiscEdAcadYearId) and
                (@GsCodeReqStatusId is null or FEE_STUD_DISC.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId) and
                      (@FeeCdeDiscTypeId is null or FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID=@FeeCdeDiscTypeId)
           order by FULL_NAME_EN
   end            
  end


			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FilterStudData">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

declare @nodePath nvarchar(50);
  if(@EntityMainId is not null)
  select @nodePath=node_path from ENTITY_MAIN where ENT_MAIN_ID = @EntityMainId;

if(@AsFacultyInfoId is null or @AsFacultyInfoId=0)
    SELECT ED_STUD.*
    --,                                           null as STUD_FACULTY_CODE,
                                          --0 as Temp,
                      --case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      --case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      --case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      --null as Temp1,
                      --null as Temp2,
                      --'' as GetStudStatesAr,
                      --'' as GetStudStatesEn

FROM  ED_STUD 
               LEFT OUTER JOIN
               GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
               GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
               GS_CODE_RELIGION ON ED_STUD.GS_CODE_RELIGION_ID = GS_CODE_RELIGION.GS_CODE_RELIGION_ID
where (@AsFacultyInfoId is null and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID]))
and(
                    (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%') and
                    (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId) and
              (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId) and
                    
           (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
        )

 else


SELECT distinct ED_STUD.*
--, 
                                         -- ED_STUD_FACULTY.STUD_FACULTY_CODE as STUD_FACULTY_CODE,
                                          --ED_STUD_FACULTY.AS_FACULTY_INFO_ID as AS_FACULTY_INFO_ID,
                      --case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_Ar else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_Ar,
                      --case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end  as RELIGION_DESCR_AR,
                      --case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_Ar else GS_COUNTRY_INFO.DESCR_EN end as DESCR_Ar,
                      --null as Temp1,
                      --null as Temp2,
                      --'' as GetStudStatesAr,--[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1)
                      --'' as GetStudStatesEn,--[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) 
                      --case when @LangNum=1 then ED_CODE_LEVEL.DESCR_AR else ED_CODE_LEVEL.DESCR_EN end as CurrLevelDescr,
                      --case when @LangNum=1 then isnull(ED_CODE_ENROLL_TYPE.DESCR_AR, 'غير مسجل') else isnull(ED_CODE_ENROLL_TYPE.DESCR_EN, 'Not Registered') end as  ED_CODE_ENROLL_TYPE_Descr
FROM  ED_STUD_SEMESTER INNER JOIN
      ED_CODE_ENROLL_TYPE on ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = ED_CODE_ENROLL_TYPE.ED_CODE_ENROLL_TYPE_ID
	    right outer join
      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID 
              and(ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId  and 
                    (@AsFacultyInfoId=0 or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)   and
                    ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
                    --(ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4) and
                    (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%') and
                    (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId) and
              (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId) and
             (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                ) INNER JOIN
       ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID  and
                     (ED_STUD_FACULTY.IS_ACTIVE=1 and
                      (@AsFacultyInfoId=0 or ED_STUD_FACULTY.AS_FACULTY_INFO_ID =@AsFacultyInfoId) and
                      (@StudCode is null or @StudCode='' or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%' ))left outer JOIN
       ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID and
       ((@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId))  LEFT OUTER JOIN
               GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
               GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
               GS_CODE_RELIGION ON ED_STUD.GS_CODE_RELIGION_ID = GS_CODE_RELIGION.GS_CODE_RELIGION_ID
WHERE  (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%') and  (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end)) and (@nodePath is null or @nodePath='' or EXISTS (SELECT 1 FROM ED_STUD_STATE INNER JOIN ENTITY_MAIN ON ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID  and ED_STUD_STATE.ENT_MAIN_ID= ENTITY_MAIN.ENT_MAIN_ID AND ENTITY_MAIN.NODE_PATH like @nodePath+'%' ))
AND (@EdCodeCourseId IS NULL OR @EdCodeCourseId = 0 OR 
		EXISTS(SELECT '' FROM ED_STUD_COURSE_REG INNER JOIN ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
			AND (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND ED_COURSE.ED_CODE_COURSE_ID = @EdCodeCourseId)))
                   

			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FilterStudData_Qual">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCodeQualId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

declare @nodePath nvarchar(50);
  if(@EntityMainId is not null)
  select @nodePath=node_path from ENTITY_MAIN where ENT_MAIN_ID = @EntityMainId;

if(@AsFacultyInfoId is null or @AsFacultyInfoId=0)
    SELECT ED_STUD.*,                                           null as STUD_FACULTY_CODE,
                                          0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn

FROM  ED_STUD 
               LEFT OUTER JOIN
               GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
               GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
               GS_CODE_RELIGION ON ED_STUD.GS_CODE_RELIGION_ID = GS_CODE_RELIGION.GS_CODE_RELIGION_ID
where (@AsFacultyInfoId is null and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID]))
and(
                    (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%') and
                    (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId) and
              (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId) and
                    
           (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
        )
        AND (@EdCodeQualId IS NULL OR @EdCodeQualId = 0 OR EXISTS(
        SELECT 1 FROM dbo.ED_STUD_QUAL WHERE dbo.ED_STUD_QUAL.ED_STUD_ID = dbo.ED_STUD.ED_STUD_ID AND dbo.ED_STUD_QUAL.ED_CODE_QUAL_ID = @EdCodeQualId
        ))

 else


SELECT ED_STUD.*, 
                                          ED_STUD_FACULTY.STUD_FACULTY_CODE as STUD_FACULTY_CODE,
                                          ED_STUD_FACULTY.AS_FACULTY_INFO_ID as AS_FACULTY_INFO_ID,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_Ar else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_Ar,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end  as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_Ar else GS_COUNTRY_INFO.DESCR_EN end as DESCR_Ar,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,--[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1)
                      '' as GetStudStatesEn,--[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) 
                      case when @LangNum=1 then ED_CODE_LEVEL.DESCR_AR else ED_CODE_LEVEL.DESCR_EN end as CurrLevelDescr
FROM  ED_STUD_SEMESTER INNER JOIN
      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID 
              and(ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId  and 
                    (@AsFacultyInfoId=0 or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)   and
                    ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
                    (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4) and
                    (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%') and
                    (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId) and
              (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId) and
             (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                ) INNER JOIN
       ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID  and
                     (ED_STUD_FACULTY.IS_ACTIVE=1 and
                      (@AsFacultyInfoId=0 or ED_STUD_FACULTY.AS_FACULTY_INFO_ID =@AsFacultyInfoId) and
                      (@StudCode is null or @StudCode='' or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%' ))INNER JOIN
       ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID and
       ((@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId))  LEFT OUTER JOIN
               GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
               GS_CODE_GENDER ON ED_STUD.GS_CODE_GENDER_ID = GS_CODE_GENDER.GS_CODE_GENDER_ID LEFT OUTER JOIN
               GS_CODE_RELIGION ON ED_STUD.GS_CODE_RELIGION_ID = GS_CODE_RELIGION.GS_CODE_RELIGION_ID
WHERE  (@nodePath is null or @nodePath='' or EXISTS (SELECT 1 FROM ED_STUD_STATE INNER JOIN ENTITY_MAIN ON ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID  and ED_STUD_STATE.ENT_MAIN_ID= ENTITY_MAIN.ENT_MAIN_ID AND ENTITY_MAIN.NODE_PATH like @nodePath+'%' ))
AND (@EdCodeQualId IS NULL OR @EdCodeQualId = 0 OR EXISTS(
        SELECT 1 FROM dbo.ED_STUD_QUAL WHERE dbo.ED_STUD_QUAL.ED_STUD_ID = dbo.ED_STUD.ED_STUD_ID AND dbo.ED_STUD_QUAL.ED_CODE_QUAL_ID = @EdCodeQualId
        ))
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FilterStudData_Prefrence">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

	   if(@AsFacultyInfoId is null)
  begin
   SELECT 	 ED_STUD.*,
					            null as STUD_FACULTY_CODE,
					            0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or @GsCodeGenderId = 0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                      and ED_STUD.ED_STUD_ID in (
	                      SELECT ED_STUD_SEMESTER.ED_STUD_ID FROM ED_STUD_BRANCH_PREF INNER JOIN ED_STUD_SEMESTER 
						ON ED_STUD_BRANCH_PREF.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
						where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
						and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
						and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
                      )
                      
     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
  end
  
  else if(@AsFacultyInfoId=0)
  begin
     SELECT 	 ED_STUD.*,
					            null as STUD_FACULTY_CODE,
					            0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and ED_STUD.ED_STUD_ID in (
	                      SELECT ED_STUD_SEMESTER.ED_STUD_ID FROM ED_STUD_BRANCH_PREF INNER JOIN ED_STUD_SEMESTER 
						ON ED_STUD_BRANCH_PREF.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
						where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
						and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
						and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
                      )
                
     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
  end
  
  else
  begin
  
  declare @nodePath nvarchar(50);
  if(@EntityMainId is not null)
  select @nodePath=node_path from ENTITY_MAIN where ENT_MAIN_ID = @EntityMainId;
  
  SELECT 	            *,
					            STUD_FACULTY_CODE,
					            AS_FACULTY_INFO_ID,
                      GENDER_DESCR_Ar,
                      RELIGION_DESCR_AR,
                      DESCR_Ar,
                      Temp1,
                      Temp2,
                      GetStudStatesAr,
                      GetStudStatesEn,
                      CurrLevelDescr
              from (
	            SELECT distinct ED_STUD.*,
					            ED_STUD_FACULTY.STUD_FACULTY_CODE as STUD_FACULTY_CODE,
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID as AS_FACULTY_INFO_ID,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_Ar else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_Ar,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end  as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_Ar else GS_COUNTRY_INFO.DESCR_EN end as DESCR_Ar,
                      null as Temp1,
                      null as Temp2,
                      [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1) as GetStudStatesAr,
                      [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) as GetStudStatesEn,
                      case when @LangNum=1 then ED_CODE_LEVEL.DESCR_AR else ED_CODE_LEVEL.DESCR_EN end as CurrLevelDescr
                      
FROM         ED_STUD_STATE INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID FULL OUTER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID FULL OUTER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID FULL OUTER JOIN
                      GS_CODE_GENDER RIGHT OUTER JOIN
                      ED_STUD INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId ON 
                      GS_CODE_GENDER.GS_CODE_GENDER_ID = ED_STUD.GS_CODE_GENDER_ID LEFT OUTER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID LEFT OUTER JOIN
                      GS_CODE_RELIGION ON GS_CODE_RELIGION.GS_CODE_RELIGION_ID = ED_STUD.GS_CODE_RELIGION_ID ON 
                      ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID AND ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId AND 
                      ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
                                  
                where 
                (ED_STUD_FACULTY.IS_ACTIVE=1)
                and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
                and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
                and (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@StudCode is null or @StudCode='' or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                      and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@nodePath is null or @nodePath='' or ENTITY_MAIN.NODE_PATH like @nodePath+'%')
                      and (@GsCodeGenderId is null or @GsCodeGenderId=0 or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or @GsCountryInfoId=0 or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or @NationalNum='' or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and ED_STUD.ED_STUD_ID in (
	                      SELECT ED_STUD_SEMESTER.ED_STUD_ID FROM ED_STUD_BRANCH_PREF INNER JOIN ED_STUD_SEMESTER 
						ON ED_STUD_BRANCH_PREF.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
						where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
						and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
						and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
                      )
          )v
     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end


  end
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FilterStudDataPagging">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@PageIndex" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@PageSize" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

if(@PageIndex is null)
set @PageIndex = 0;

if(@PageSize is null)
set @PageSize = 20;

declare @MinBound int,@MaxBound int;
set @MinBound = @PageIndex * @PageSize;
set @MaxBound = @MinBound + @PageSize;

	  if(@AsFacultyInfoId is null)
  begin
  select * from
   (SELECT 	ROW_NUMBER() OVER (order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end) as SN, 
						ED_STUD.*,
					            null as STUD_FACULTY_CODE,
					            0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
    )as t
    where t.SN>=@MinBound and t.SN<@MaxBound                  
    -- order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
    select COUNT(*) as AllRowsCount  from
   (SELECT  
						ED_STUD.*
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
    )as t
  end
  
  else if(@AsFacultyInfoId=0)
  begin
  select * from
     (SELECT 	ROW_NUMBER() OVER (order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end) as SN, 
						ED_STUD.*,
					            null as STUD_FACULTY_CODE,
					            0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
      ) as t
      where t.SN>=@MinBound and t.SN<@MaxBound          
    -- order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
    select COUNT(*) as AllRowsCount from
     (SELECT 	
						ED_STUD.*
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
      ) as t
  end
  
  else
  begin
  select * from 
  (SELECT 	 ROW_NUMBER() OVER (order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end) as SN,
					    *
              from (
	            SELECT 	distinct  ED_STUD.*,
					            ED_STUD_FACULTY.STUD_FACULTY_CODE as STUD_FACULTY_CODE,
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID as AS_FACULTY_INFO_ID,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_Ar else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_Ar,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end  as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_Ar else GS_COUNTRY_INFO.DESCR_EN end as DESCR_Ar,
                      null as Temp1,
                      null as Temp2,
                      [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1) as GetStudStatesAr,
                      [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) as GetStudStatesEn,
                      case when @LangNum=1 then ED_CODE_LEVEL.DESCR_AR else ED_CODE_LEVEL.DESCR_EN end as CurrLevelDescr
                      
	            from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     left outer join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                   left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                                  
                where 
                (ED_STUD_FACULTY.IS_ACTIVE=1)
                and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
                and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
                and (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                      and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      
          )as v
   ) as t
   where t.SN>=@MinBound and t.SN<@MaxBound        
   --  order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
   select COUNT(*) AllRowsCount from(
	            SELECT 	distinct  ED_STUD.*
	            from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     left outer join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                   left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                                  
                where 
                (ED_STUD_FACULTY.IS_ACTIVE=1)
                and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
                and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
                and (@StudClFullName is null or (
                case when @LangNum=0 then ISNULL(ED_STUD.FULL_NAME_EN, '') + ISNULL(ED_STUD.FULL_NAME_AR, '') when @LangNum=1 then ED_STUD.FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                      and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
      ) as t
end
			
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FilterGraduatedStudData">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

	  if(@AsFacultyInfoId is null)
  begin
   SELECT 	 ED_STUD.[ED_STUD_ID] as ED_STUD_ID,
					            null as STUD_FACULTY_CODE,
					            [NATIONAL_NUMBER] as NATIONAL_NUMBER,
					            [FULL_NAME_AR] as FULL_NAME_AR,
					            [CL_FULL_NAME_AR] as CL_FULL_NAME_AR,
					            [STUD_NAME_AR] as STUD_NAME_AR,
					            [CL_STUD_NAME_AR] as CL_STUD_NAME_AR,
					            [FATHER_NAME_AR] as FATHER_NAME_AR,
					            [CL_FATHER_NAME_AR] as CL_FATHER_NAME_AR,
					            [GRANDFATHER_NAME_AR] as GRANDFATHER_NAME_AR,
					            [CL_GRANDFATHER_NAME_AR] as CL_GRANDFATHER_NAME_AR,
					            [FAMILY_NAME_AR] as FAMILY_NAME_AR,
					            [CL_FAMILY_NAME_AR] as CL_FAMILY_NAME_AR,
					            [FULL_NAME_EN] as FULL_NAME_EN,
					            [STUD_NAME_EN] as STUD_NAME_EN,
					            [FATHER_NAME_EN] as FATHER_NAME_EN,
					            [GRANDFATHER_NAME_EN] as GRANDFATHER_NAME_EN,
					            [FAMILY_NAME_EN] as FAMILY_NAME_EN,
					            [FATHER_PROFESSION] as FATHER_PROFESSION,
					            [FATHER_NATIONAL_NUMBER] as FATHER_NATIONAL_NUMBER,
					            [MOTHER_NATIONAL_NUMBER] as MOTHER_NATIONAL_NUMBER,
					            MOTHER_NAME_AR as MOTHER_NAME_AR,
					            [CL_MOTHER_NAME_AR] as CL_MOTHER_NAME_AR,
					            MOTHER_NAME_EN as MOTHER_NAME_EN, 
					            ED_STUD.[GS_CODE_GENDER_ID] as GS_CODE_GENDER_ID,
					            ED_STUD.[GS_CODE_RELIGION_ID] as GS_CODE_RELIGION_ID,
					            [BIRTH_REG_NUMBER] as BIRTH_REG_NUMBER,
					            [BIRTH_DATE] as BIRTH_DATE,
					            [GS_BIRTH_COUNTRY_NODE_ID] as GS_BIRTH_COUNTRY_NODE_ID,
					            ED_STUD.[GS_COUNTRY_INFO_ID_1] as GS_COUNTRY_INFO_ID_1,
					            ED_STUD.[GS_COUNTRY_INFO_ID_2] as GS_COUNTRY_INFO_ID_2,
					            0 as Temp,
					            [STUD_PHOTO] as STUD_PHOTO,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn
	            from   ED_STUD inner join ED_STUD_GRANT_DEGREE on ED_STUD_GRANT_DEGREE.ED_STUD_ID = ED_STUD.ED_STUD_ID left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                      
     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
  end
  
  else if(@AsFacultyInfoId=0)
  begin
     SELECT 	 ED_STUD.[ED_STUD_ID] as ED_STUD_ID,
					            null as STUD_FACULTY_CODE,
					            [NATIONAL_NUMBER] as NATIONAL_NUMBER,
					            [FULL_NAME_AR] as FULL_NAME_AR,
					            [CL_FULL_NAME_AR] as CL_FULL_NAME_AR,
					            [STUD_NAME_AR] as STUD_NAME_AR,
					            [CL_STUD_NAME_AR] as CL_STUD_NAME_AR,
					            [FATHER_NAME_AR] as FATHER_NAME_AR,
					            [CL_FATHER_NAME_AR] as CL_FATHER_NAME_AR,
					            [GRANDFATHER_NAME_AR] as GRANDFATHER_NAME_AR,
					            [CL_GRANDFATHER_NAME_AR] as CL_GRANDFATHER_NAME_AR,
					            [FAMILY_NAME_AR] as FAMILY_NAME_AR,
					            [CL_FAMILY_NAME_AR] as CL_FAMILY_NAME_AR,
					            [FULL_NAME_EN] as FULL_NAME_EN,
					            [STUD_NAME_EN] as STUD_NAME_EN,
					            [FATHER_NAME_EN] as FATHER_NAME_EN,
					            [GRANDFATHER_NAME_EN] as GRANDFATHER_NAME_EN,
					            [FAMILY_NAME_EN] as FAMILY_NAME_EN,
					            [FATHER_PROFESSION] as FATHER_PROFESSION,
					            [FATHER_NATIONAL_NUMBER] as FATHER_NATIONAL_NUMBER,
					            [MOTHER_NATIONAL_NUMBER] as MOTHER_NATIONAL_NUMBER,
					            MOTHER_NAME_AR as MOTHER_NAME_AR,
					            [CL_MOTHER_NAME_AR] as CL_MOTHER_NAME_AR,
					            MOTHER_NAME_EN as MOTHER_NAME_EN,
					            ED_STUD.[GS_CODE_GENDER_ID] as GS_CODE_GENDER_ID,
					            ED_STUD.[GS_CODE_RELIGION_ID] as GS_CODE_RELIGION_ID,
					            [BIRTH_REG_NUMBER] as BIRTH_REG_NUMBER,
					            [BIRTH_DATE] as BIRTH_DATE,
					            [GS_BIRTH_COUNTRY_NODE_ID] as GS_BIRTH_COUNTRY_NODE_ID,
					            ED_STUD.[GS_COUNTRY_INFO_ID_1] as GS_COUNTRY_INFO_ID_1,
					            ED_STUD.[GS_COUNTRY_INFO_ID_2] as GS_COUNTRY_INFO_ID_2,
					            0 as Temp,
					            [STUD_PHOTO] as STUD_PHOTO,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR,
                      null as Temp1,
                      null as Temp2,
                      '' as GetStudStatesAr,
                      '' as GetStudStatesEn
	            from   ED_STUD inner join ED_STUD_GRANT_DEGREE on ED_STUD_GRANT_DEGREE.ED_STUD_ID = ED_STUD.ED_STUD_ID left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                
     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
  end
  
  else
  begin
  SELECT 	            ED_STUD_ID,
					            STUD_FACULTY_CODE,
					            NATIONAL_NUMBER,
					            FULL_NAME_AR,
					            CL_FULL_NAME_AR,
					            STUD_NAME_AR,
					            CL_STUD_NAME_AR,
					            FATHER_NAME_AR,
					            CL_FATHER_NAME_AR,
					            GRANDFATHER_NAME_AR,
					            CL_GRANDFATHER_NAME_AR,
					            FAMILY_NAME_AR,
					            CL_FAMILY_NAME_AR,
					            FULL_NAME_EN,
					            STUD_NAME_EN,
					            FATHER_NAME_EN,
					            GRANDFATHER_NAME_EN,
					            FAMILY_NAME_EN,
					            FATHER_PROFESSION,
					            FATHER_NATIONAL_NUMBER,
					            MOTHER_NATIONAL_NUMBER,
					            MOTHER_NAME_AR,
					            CL_MOTHER_NAME_AR,
					            MOTHER_NAME_EN,
					            GS_CODE_GENDER_ID,
					            GS_CODE_RELIGION_ID,
					            BIRTH_REG_NUMBER,
					            BIRTH_DATE,
					            GS_BIRTH_COUNTRY_NODE_ID,
					            GS_COUNTRY_INFO_ID_1,
					            GS_COUNTRY_INFO_ID_2,
					            AS_FACULTY_INFO_ID,
					            STUD_PHOTO,
                      GENDER_DESCR_Ar,
                      RELIGION_DESCR_AR,
                      DESCR_Ar,
                      Temp1,
                      Temp2,
                      GetStudStatesAr,
                      GetStudStatesEn,
                      CurrLevelDescr
              from (
	            SELECT 	distinct ED_STUD.[ED_STUD_ID] as ED_STUD_ID,
					            ED_STUD_FACULTY.STUD_FACULTY_CODE as STUD_FACULTY_CODE,
					            [NATIONAL_NUMBER] as NATIONAL_NUMBER,
					            [FULL_NAME_AR] as FULL_NAME_AR,
					            [CL_FULL_NAME_AR] as CL_FULL_NAME_AR,
					            [STUD_NAME_AR] as STUD_NAME_AR,
					            [CL_STUD_NAME_AR] as CL_STUD_NAME_AR,
					            [FATHER_NAME_AR] as FATHER_NAME_AR,
					            [CL_FATHER_NAME_AR] as CL_FATHER_NAME_AR,
					            [GRANDFATHER_NAME_AR] as GRANDFATHER_NAME_AR,
					            [CL_GRANDFATHER_NAME_AR] as CL_GRANDFATHER_NAME_AR,
					            [FAMILY_NAME_AR] as FAMILY_NAME_AR,
					            [CL_FAMILY_NAME_AR] as CL_FAMILY_NAME_AR,
					            [FULL_NAME_EN] as FULL_NAME_EN,
					            [STUD_NAME_EN] as STUD_NAME_EN,
					            [FATHER_NAME_EN] as FATHER_NAME_EN,
					            [GRANDFATHER_NAME_EN] as GRANDFATHER_NAME_EN,
					            [FAMILY_NAME_EN] as FAMILY_NAME_EN,
					            [FATHER_PROFESSION] as FATHER_PROFESSION,
					            [FATHER_NATIONAL_NUMBER] as FATHER_NATIONAL_NUMBER,
					            [MOTHER_NATIONAL_NUMBER] as MOTHER_NATIONAL_NUMBER,
					            MOTHER_NAME_AR as MOTHER_NAME_AR,
					            [CL_MOTHER_NAME_AR] as CL_MOTHER_NAME_AR,
					            MOTHER_NAME_EN as MOTHER_NAME_EN,
					            ED_STUD.[GS_CODE_GENDER_ID] as GS_CODE_GENDER_ID,
					            ED_STUD.[GS_CODE_RELIGION_ID] as GS_CODE_RELIGION_ID,
					            [BIRTH_REG_NUMBER] as BIRTH_REG_NUMBER,
					            [BIRTH_DATE] as BIRTH_DATE,
					            [GS_BIRTH_COUNTRY_NODE_ID] as GS_BIRTH_COUNTRY_NODE_ID,
					            ED_STUD.[GS_COUNTRY_INFO_ID_1] as GS_COUNTRY_INFO_ID_1,
					            ED_STUD.[GS_COUNTRY_INFO_ID_2] as GS_COUNTRY_INFO_ID_2,
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID as AS_FACULTY_INFO_ID,
					            [STUD_PHOTO] as STUD_PHOTO,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_Ar else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_Ar,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end  as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_Ar else GS_COUNTRY_INFO.DESCR_EN end as DESCR_Ar,
                      null as Temp1,
                      null as Temp2,
                      [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1) as GetStudStatesAr,
                      [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) as GetStudStatesEn,
                      case when @LangNum=1 then ED_CODE_LEVEL.DESCR_AR else ED_CODE_LEVEL.DESCR_EN end as CurrLevelDescr
                      
	            from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner join ED_STUD_GRANT_DEGREE on ED_STUD_GRANT_DEGREE.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_GRANT_DEGREE.AS_FACULTY_INFO_ID = ED_STUD_FACULTY.AS_FACULTY_INFO_ID
                     left outer join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.IS_LAST=1 and ED_STUD_SEMESTER.IS_CLOSED=1)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                   left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                                  
                where 
                (ED_STUD_FACULTY.IS_ACTIVE=0)
                and (@StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
          )v
     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end


  end	
      
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FilterStudDataCnt">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@retcount" type="int" direction="Output" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
	 			
  if(@AsFacultyInfoId is null)
  begin
   SELECT 	 @retcount=count(ED_STUD.ED_STUD_ID) 
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID]) 
  end
  
  else if(@AsFacultyInfoId=0)
  begin

     SELECT 	@retcount=count(ED_STUD.ED_STUD_ID) 
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
  end
  
  else
  begin
	            SELECT 	@retcount=count(distinct ED_STUD.ED_STUD_ID) 
                      
	            from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     left outer join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                   left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                                  
                where 
                (ED_STUD_FACULTY.IS_ACTIVE=1)
                and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
                and (@StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                      and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%')
                      and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
  end	
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudFilterWithStudentType">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StudentType" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@CourseID" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@CourseSubID" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@RegisterInCourse" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@IsCoursApproved" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

  if(@AsFacultyInfoId is null)
  begin
  
             SELECT 	        ED_STUD.*,
					            null as STUD_FACULTY_CODE,
					            0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR
                      
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where @StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                
     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
  
  end
  
  else if(@AsFacultyInfoId=0)
  begin
     SELECT 	 ED_STUD.*,
					            null as STUD_FACULTY_CODE,
					            0 as Temp,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_AR else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_AR,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_AR else GS_COUNTRY_INFO.DESCR_EN end as DESCR_AR
                      
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where @StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')

     order by case when @LangNum=1 then FULL_NAME_AR else FULL_NAME_EN end
  end
  
  else
  begin
  
  select * 
                      
	   from(
	            SELECT 	distinct ED_STUD.*,
					            ED_STUD_FACULTY.STUD_FACULTY_CODE as STUD_FACULTY_CODE,
                      case when @LangNum=1 then GS_CODE_GENDER.GENDER_DESCR_Ar else GS_CODE_GENDER.GENDER_DESCR_EN end as GENDER_DESCR_Ar,
                      case when @LangNum=1 then GS_CODE_RELIGION.RELIGION_DESCR_AR else GS_CODE_RELIGION.RELIGION_DESCR_EN end  as RELIGION_DESCR_AR,
                      case when @LangNum=1 then GS_COUNTRY_INFO.DESCR_Ar else GS_COUNTRY_INFO.DESCR_EN end as DESCR_Ar
                      
	            from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     left outer join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                   left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                                  
                where 
                (ED_STUD_FACULTY.IS_ACTIVE=1)
                and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=2)
                and (@StudClFullName is null or (
                case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like case when @NamePolicy=1 then '%'+@StudClFullName+'%' else @StudClFullName+'%' end))
                
                and(@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like @StudCode+'%' or 
                 (case when @LangNum=1 then ED_STUD.CL_FULL_NAME_AR else ED_STUD.FULL_NAME_EN end like @StudCode+'%') )
                      and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
                      and (@GsCodeGenderId is null or ED_STUD.GS_CODE_GENDER_ID=@GsCodeGenderId)
                      and (@GsCountryInfoId is null or ED_STUD.GS_COUNTRY_INFO_ID_1=@GsCountryInfoId)
                      and (@NationalNum is null or ED_STUD.NATIONAL_NUMBER like '%'+@NationalNum+'%')
                      AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) -- Added by Hsabry 2013-02-12
                     -- and((ED_STUD_FACULTY.TRANSFER_FLG=1 and @StudentType=2) or 
                     -- (@StudentType=1 and ED_STUD_FACULTY.ED_ACAD_YEAR_JOIN_ID=
                     -- (select ED_ACAD_YEAR_ID from ED_ACAD_YEAR where CURRENT_YEAR=1)) or @StudentType=3)

                      and(@IsCoursApproved=3 or 
                        (@IsCoursApproved=0 and (ED_STUD_SEMESTER.IS_COURSE_APPROVED=0 or ED_STUD_SEMESTER.IS_COURSE_APPROVED is null)) or
                       (ED_STUD_SEMESTER.IS_COURSE_APPROVED=@IsCoursApproved)) 
                       
                      and(@CourseID  =0 or(@RegisterInCourse=1 and exists( select 'a' from ED_STUD_COURSE_REG as CourseReg
                       where (CourseReg.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID and
                               CourseReg.ED_COURSE_ID=@CourseID
                               and (@CourseSubID = 0 or CourseReg.ED_COURSE_Sub_ID = @CourseSubID)
                               ))) or
                               (@RegisterInCourse=0 and not exists( select 'a' from ED_STUD_COURSE_REG as CourseReg
                                where (CourseReg.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID and
                               CourseReg.ED_COURSE_ID=@CourseID
                               and (@CourseSubID = 0 or CourseReg.ED_COURSE_Sub_ID = @CourseSubID)
                               )))
                               )
                              
                )      as DerivedTable
                    order by case when @LangNum=1 then DerivedTable.FULL_NAME_AR else DerivedTable.FULL_NAME_EN end

  end
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FilterStudFeeDisc">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@FeeCodeDiscType" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GPALessThan" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@studName" type="nvarchar" direction="Input" size="150" precision="3" scale="0" param="(150)" nulldefault="" />
        <parameter name="@studCode" type="nvarchar" direction="Input" size="30" precision="2" scale="0" param="(30)" nulldefault="" />
        <parameter name="@filter" type="int" direction="Input" size="4" precision="2" scale="0" nulldefault="" />

      </parameters>
      <body>
        <![CDATA[
      SET ANSI_NULLS OFF
 if(@LangNum=1)--Arabic
  begin  
	 if(@filter=0)
		 begin
	            SELECT 	distinct ED_STUD.[ED_STUD_ID],
					            ED_STUD_FACULTY.STUD_FACULTY_CODE,
					            [FULL_NAME_AR],
					            [FULL_NAME_EN],
					            FEE_STUD_DISC.FEE_STUD_DISC_ID as  GsCountryInfoId1,
					            ED_STUD_SEMESTER.ACCUM_GPA as GsCountryInfoId2,
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					            
                       FEE_CDE_DISC_TYPE.DESCR_AR as genderDescr,

                      FEE_STUD_DISC.DISC_PERCENT,
                      FEE_STUD_DISC.UPDATED_PERCENT
	            from   
	                   FEE_STUD_DISC  INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID
	                 inner join ED_STUD  ON ED_STUD.ED_STUD_ID = FEE_STUD_DISC.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     
                     
                where 
                        ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                      and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
                      and (@FeeCodeDiscType =0 or FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID=@FeeCodeDiscType)
                      and (@EdCodeLevelId =0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@GPALessThan =0 or ED_STUD_SEMESTER.ACCUM_GPA<=@GPALessThan)
                      and (@EdStudId is null or ED_STUD.ED_STUD_ID=@EdStudId)
                     and (@studCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@studCode+'%')
                      and (@studName is null or ED_STUD.FULL_NAME_AR like '%'+@studName+'%')
                     
                order by FULL_NAME_AR
		 end
		  if(@filter=1)
		 begin
	            SELECT 	distinct ED_STUD.[ED_STUD_ID],
					            ED_STUD_FACULTY.STUD_FACULTY_CODE,
					            [FULL_NAME_AR],
					            [FULL_NAME_EN],
					            FEE_STUD_DISC.FEE_STUD_DISC_ID as  GsCountryInfoId1,
					            ED_STUD_SEMESTER.ACCUM_GPA as GsCountryInfoId2,
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					            
                       FEE_CDE_DISC_TYPE.DESCR_AR as genderDescr,

                      FEE_STUD_DISC.DISC_PERCENT,
                      FEE_STUD_DISC.UPDATED_PERCENT
	            from   
	                   FEE_STUD_DISC  INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID
	                 inner join ED_STUD  ON ED_STUD.ED_STUD_ID = FEE_STUD_DISC.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     
                     
                where 
                        ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                      and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
                      and (@FeeCodeDiscType =0 or FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID=@FeeCodeDiscType)
                      and (@EdCodeLevelId =0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@GPALessThan =0 or ED_STUD_SEMESTER.ACCUM_GPA<=@GPALessThan)
                      and (@EdStudId is null or ED_STUD.ED_STUD_ID=@EdStudId)
                      and (@studCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@studCode+'%')
                      and (@studName is null or ED_STUD.FULL_NAME_AR like @studName +'%')
                      
                order by FULL_NAME_AR
		 end
		  if(@filter=2)
		 begin
	            SELECT 	distinct ED_STUD.[ED_STUD_ID],
					            ED_STUD_FACULTY.STUD_FACULTY_CODE,
					            [FULL_NAME_AR],
					            [FULL_NAME_EN],
					            FEE_STUD_DISC.FEE_STUD_DISC_ID as  GsCountryInfoId1,
					            ED_STUD_SEMESTER.ACCUM_GPA as GsCountryInfoId2,
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					            
                       FEE_CDE_DISC_TYPE.DESCR_AR as genderDescr,

                      FEE_STUD_DISC.DISC_PERCENT,
                      FEE_STUD_DISC.UPDATED_PERCENT
	            from   
	                   FEE_STUD_DISC  INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID
	                 inner join ED_STUD  ON ED_STUD.ED_STUD_ID = FEE_STUD_DISC.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     
                     
                where 
                        ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                      and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
                      and (@FeeCodeDiscType =0 or FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID=@FeeCodeDiscType)
                      and (@EdCodeLevelId =0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@GPALessThan =0 or ED_STUD_SEMESTER.ACCUM_GPA<=@GPALessThan)
                      and (@EdStudId is null or ED_STUD.ED_STUD_ID=@EdStudId)
                      and (@studCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@studCode+'%')
                      and (@studName is null or ED_STUD.FULL_NAME_AR like  '%'+ @studName)
                      
                order by FULL_NAME_AR
		 end
  end
  else--english
  begin 
   if(@filter=0)  
   begin 
         SELECT   distinct ED_STUD.[ED_STUD_ID],
					      ED_STUD_FACULTY.STUD_FACULTY_CODE,

					      [FULL_NAME_AR],
					      [FULL_NAME_EN],
					      FEE_STUD_DISC.FEE_STUD_DISC_ID as  GsCountryInfoId1,
					       ED_STUD_SEMESTER.ACCUM_GPA as GsCountryInfoId2,
					      ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					      
                FEE_CDE_DISC_TYPE.DESCR_EN as genderDescr,
                
                      FEE_STUD_DISC.DISC_PERCENT,
                      FEE_STUD_DISC.UPDATED_PERCENT
                
	        from   
	                   FEE_STUD_DISC  INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID
	                 inner join ED_STUD  ON ED_STUD.ED_STUD_ID = FEE_STUD_DISC.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     
                     
              where 
                        ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                      and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
                      and (@FeeCodeDiscType =0 or FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID=@FeeCodeDiscType)
                      and (@EdCodeLevelId =0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@GPALessThan =0 or ED_STUD_SEMESTER.ACCUM_GPA<=@GPALessThan)
                      and (@EdStudId is null or ED_STUD.ED_STUD_ID=@EdStudId)
                      and (@studCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@studCode+'%')
                      and (@studName is null or ED_STUD.FULL_NAME_EN like '%'+@studName+'%')
                      
           order by FULL_NAME_EN   
           end   
             if(@filter=1)  
   begin 
         SELECT   distinct ED_STUD.[ED_STUD_ID],
					      ED_STUD_FACULTY.STUD_FACULTY_CODE,

					      [FULL_NAME_AR],
					      [FULL_NAME_EN],
					      FEE_STUD_DISC.FEE_STUD_DISC_ID as  GsCountryInfoId1,
					       ED_STUD_SEMESTER.ACCUM_GPA as GsCountryInfoId2,
					      ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					      
                FEE_CDE_DISC_TYPE.DESCR_EN as genderDescr,
                
                      FEE_STUD_DISC.DISC_PERCENT,
                      FEE_STUD_DISC.UPDATED_PERCENT
                
	        from   
	                   FEE_STUD_DISC  INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID
	                 inner join ED_STUD  ON ED_STUD.ED_STUD_ID = FEE_STUD_DISC.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     
                     
              where 
                        ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                      and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
                      and (@FeeCodeDiscType =0 or FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID=@FeeCodeDiscType)
                      and (@EdCodeLevelId =0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@GPALessThan =0 or ED_STUD_SEMESTER.ACCUM_GPA<=@GPALessThan)
                      and (@EdStudId is null or ED_STUD.ED_STUD_ID=@EdStudId)
                      and (@studCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@studCode+'%')
                      and (@studName is null or ED_STUD.FULL_NAME_EN like @studName +'%')
                      
           order by FULL_NAME_EN   
           end   
             if(@filter=2)  
   begin 
         SELECT   distinct ED_STUD.[ED_STUD_ID],
					      ED_STUD_FACULTY.STUD_FACULTY_CODE,

					      [FULL_NAME_AR],
					      [FULL_NAME_EN],
					      FEE_STUD_DISC.FEE_STUD_DISC_ID as  GsCountryInfoId1,
					       ED_STUD_SEMESTER.ACCUM_GPA as GsCountryInfoId2,
					      ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					      
                FEE_CDE_DISC_TYPE.DESCR_EN as genderDescr,
                
                      FEE_STUD_DISC.DISC_PERCENT,
                      FEE_STUD_DISC.UPDATED_PERCENT
                
	        from   
	                   FEE_STUD_DISC  INNER JOIN
                      FEE_CDE_DISC_TYPE ON FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID = FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID
	                 inner join ED_STUD  ON ED_STUD.ED_STUD_ID = FEE_STUD_DISC.ED_STUD_ID inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     
                     
              where 
                        ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                      and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
                      and (@FeeCodeDiscType =0 or FEE_STUD_DISC.FEE_CDE_DISC_TYPE_ID=@FeeCodeDiscType)
                      and (@EdCodeLevelId =0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      and (@GPALessThan =0 or ED_STUD_SEMESTER.ACCUM_GPA<=@GPALessThan)
                      and (@EdStudId is null or ED_STUD.ED_STUD_ID=@EdStudId)
                      and (@studCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@studCode+'%')
                      and (@studName is null or ED_STUD.FULL_NAME_EN like  '%'+ @studName)
                      
           order by FULL_NAME_EN   
           end      
  end
	
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
	
	
	
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudFilterByAdvising">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

SELECT    ED_STUD_ACADMIC_ADV.ED_STUD_ACADMIC_ADV_ID,ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID,ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID,ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID,ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID, ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN
FROM         ED_STUD_ACADMIC_ADV INNER JOIN
                      ED_STUD ON ED_STUD_ACADMIC_ADV.ED_STUD_ID = ED_STUD.ED_STUD_ID
where (@AsFacultyInfoId = 0 or ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
and (@EdAcadYearId = 0 or ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID = @EdAcadYearId)
and (@EdCodeSemesterId = 0 or ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and (@SaStfMemberId = 0 or ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = @SaStfMemberId)
order by case @Lang when 0 then ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudFilterInAllEntityPath">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ApproveRegister" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="30" scale="0" param="(30)" nulldefault="" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				

	declare @EntityMainPath nvarchar(150)
	select @EntityMainPath=ENTITY_MAIN.NODE_PATH from ENTITY_MAIN where ENT_MAIN_ID=@EntityMainId
				
  if(@LangNum=1)--Arabic
  begin
  if(@AsFacultyInfoId is null)
  begin
  
   SELECT 	 ED_STUD.*,
					            null,
					            0,
					            
                      GS_CODE_GENDER.GENDER_DESCR_AR,
                      GS_CODE_RELIGION.RELIGION_DESCR_AR,
                      GS_COUNTRY_INFO.DESCR_AR
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where
              
                (@EdStudId =0 or @EdStudId=ED_STUD.ED_STUD_ID)
                and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                order by FULL_NAME_AR
  
  end
  
  else if(@AsFacultyInfoId=0)
  begin
     SELECT 	 ED_STUD.*,
					            null,
					            0,
					            
                      GS_CODE_GENDER.GENDER_DESCR_AR,
                      GS_CODE_RELIGION.RELIGION_DESCR_AR,
                      GS_COUNTRY_INFO.DESCR_AR
	            from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@EdStudId =0 or ED_STUD.ED_STUD_ID=@EdStudId)
                order by FULL_NAME_AR
  end
  
  else
  begin
  
	            SELECT 	distinct ED_STUD.*,
					            ED_STUD_FACULTY.STUD_FACULTY_CODE,
					            ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
                      GS_CODE_GENDER.GENDER_DESCR_Ar,
                      GS_CODE_RELIGION.RELIGION_DESCR_AR,
                      GS_COUNTRY_INFO.DESCR_Ar
	            from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner  join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                 left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                     left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID=ED_STUD_STATE.ENT_MAIN_ID
                     left outer join ED_STUD_ACADMIC_ADV on ED_STUD_ACADMIC_ADV.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID
                     and ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
                     and ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
                     and ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
                where 
                      (ED_STUD_FACULTY.IS_ACTIVE=1)
                      AND (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4) 
                      AND (@EdStudId =0 or @EdStudId=ED_STUD.ED_STUD_ID)
                      AND (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId)
                      AND (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%') 
                      and (@EntityMainPath is null or ENTITY_MAIN.NODE_PATH like @EntityMainPath+'%')
                      and (ED_STUD_SEMESTER.IS_COURSE_APPROVED=@ApproveRegister or (@ApproveRegister=0 and ED_STUD_SEMESTER.IS_COURSE_APPROVED is null))
                      and (@SaStfMemberId is null or @SaStfMemberId = 0 or ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = @SaStfMemberId)
                order by FULL_NAME_AR
                
                

  end
  end
  else--english
  begin
  
  if(@AsFacultyInfoId is null)
  begin
   SELECT   distinct ED_STUD.*,
					      null,
					      0,
					      
                GS_CODE_GENDER.GENDER_DESCR_EN,
                GS_CODE_RELIGION.RELIGION_DESCR_EN,
                GS_COUNTRY_INFO.DESCR_EN
	        from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@EdStudId =0 or @EdStudId=ED_STUD.ED_STUD_ID)
                and not exists(select 'd' from ED_STUD_FACULTY where ED_STUD_ID=ED_STUD.[ED_STUD_ID])
                
          order by FULL_NAME_EN
  end
  
  else if(@AsFacultyInfoId=0)
  begin
  SELECT   distinct ED_STUD.*,
					      null,
					      0,
					      
                GS_CODE_GENDER.GENDER_DESCR_EN,
                GS_CODE_RELIGION.RELIGION_DESCR_EN,
                GS_COUNTRY_INFO.DESCR_EN
	       from   ED_STUD left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	            left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
              left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                    
                where (@EdStudId =0 or @EdStudId=ED_STUD.ED_STUD_ID)
          order by FULL_NAME_EN
  end
  
  else 
  begin
         SELECT   distinct ED_STUD.*,
					      ED_STUD_FACULTY.STUD_FACULTY_CODE,
					      ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					      
                GS_CODE_GENDER.GENDER_DESCR_EN,
                GS_CODE_RELIGION.RELIGION_DESCR_EN,
                GS_COUNTRY_INFO.DESCR_EN
                
	       from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                     inner  join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                     and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)
                     left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
                     left outer join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                     left outer join GS_CODE_GENDER on ED_STUD.GS_CODE_GENDER_ID=GS_CODE_GENDER.GS_CODE_GENDER_ID
	                 left outer join GS_COUNTRY_INFO on ED_STUD.GS_COUNTRY_INFO_ID_1=GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
                     left outer join GS_CODE_RELIGION on GS_CODE_RELIGION.GS_CODE_RELIGION_id=ED_STUD.GS_CODE_RELIGION_id
                     left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID=ED_STUD_STATE.ENT_MAIN_ID
					 left outer join ED_STUD_ACADMIC_ADV on ED_STUD_ACADMIC_ADV.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID
                     and ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
                     and ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
                     and ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
                where 
                      (ED_STUD_FACULTY.IS_ACTIVE=1)
                      AND (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4) 
                      AND(@EdStudId =0 or @EdStudId=ED_STUD.ED_STUD_ID)
                      and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 
                      AND (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudCode+'%') 
                      and (@EntityMainPath is null or ENTITY_MAIN.NODE_PATH like @EntityMainPath+'%')
                      and (ED_STUD_SEMESTER.IS_COURSE_APPROVED=@ApproveRegister or (@ApproveRegister=0 and ED_STUD_SEMESTER.IS_COURSE_APPROVED is null))
                      and (@SaStfMemberId is null or @SaStfMemberId = 0 or ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = @SaStfMemberId)
           order by FULL_NAME_EN
   end            
  end

		
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_InsertWithIdOut" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@FullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@ClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@ClStudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@ClFatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@ClGrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@ClFamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StudNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GrandfatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FamilyNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FatherProfession" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@FatherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@MotherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@MotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@ClMotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@MotherNameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@BirthRegNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@GsBirthCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId1" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudPhoto" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault="" />
        <parameter name="@IsPrntStaff" type="numeric" direction="Input" size="1" precision="0" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@SaStfMemberPrntId" type="numeric" direction="Input" size="6" precision="0" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxEdStudId numeric(9,0)
        select  @MaxEdStudId =max(ED_STUD_ID)from ED_STUD;
         if( @MaxEdStudId is null)
            set  @MaxEdStudId=0;
            
          set  @MaxEdStudId= @MaxEdStudId+1;  
          
        
          IF (@NationalNumber  is not null )
          begin
              if exists( SELECT 'h' from ED_STUD --inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where ( ED_STUD.NATIONAL_NUMBER = @NationalNumber --and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId 
              )  )
              begin
             RAISERROR('COS_NATIONAL_NUMBER',16,-1)
              RETURN 
             END 
          END
              
        IF (@FatherNationalNumber  is not null )
          begin
           
           --FATHER_NATIONAL_NUMBER = @FatherNationalNumber or --or NATIONAL_NUMBER=@FatherNationalNumber
              if exists( SELECT 'h' from ED_STUD --inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where  (ED_STUD.FATHER_NATIONAL_NUMBER  =@FatherNationalNumber ) --and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId 
              )
              begin
              RAISERROR('COS_NATIONAL_NUMBER_Father',16,-1)
              RETURN 
             END 
          END
       IF (@MotherNationalNumber  is not null )
          begin
              if exists( SELECT 'h'   from ED_STUD --inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where (ED_STUD.MOTHER_NATIONAL_NUMBER =@MotherNationalNumber )--and  ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId 
              )
              begin
             RAISERROR('COS_NATIONAL_NUMBER_Mother',16,-1)
              RETURN 
             END 
          END
          
          
    begin transaction;       
				INSERT INTO [dbo].[ED_STUD]
					(
					[ED_STUD_ID]
					,[NATIONAL_NUMBER]
					,[FULL_NAME_AR]
					,[CL_FULL_NAME_AR]
					,[STUD_NAME_AR]
					,[CL_STUD_NAME_AR]
					,[FATHER_NAME_AR]
					,[CL_FATHER_NAME_AR]
					,[GRANDFATHER_NAME_AR]
					,[CL_GRANDFATHER_NAME_AR]
					,[FAMILY_NAME_AR]
					,[CL_FAMILY_NAME_AR]
					,[FULL_NAME_EN]
					,[STUD_NAME_EN]
					,[FATHER_NAME_EN]
					,[GRANDFATHER_NAME_EN]
					,[FAMILY_NAME_EN]
					,[FATHER_PROFESSION]
					,[FATHER_NATIONAL_NUMBER]
					,[MOTHER_NATIONAL_NUMBER]
					,[MOTHER_NAME_AR]
					,[CL_MOTHER_NAME_AR]
					,[MOTHER_NAME_EN]
					,[GS_CODE_GENDER_ID]
					,[GS_CODE_RELIGION_ID]
					,[BIRTH_REG_NUMBER]
					,[BIRTH_DATE]
					,[GS_BIRTH_COUNTRY_NODE_ID]
					,[GS_COUNTRY_INFO_ID_1]
					,[GS_COUNTRY_INFO_ID_2]
					,[STUD_PHOTO],
          [IS_PRNT_STAFF],
          [SA_STF_MEMBER_PRNT_ID]
					)
				VALUES
					(
					@MaxEdStudId
					,@NationalNumber
					,@FullNameAr
					,@ClFullNameAr
					,@StudNameAr
					,@ClStudNameAr
					,@FatherNameAr
					,@ClFatherNameAr
					,@GrandfatherNameAr
					,@ClGrandfatherNameAr
					,@FamilyNameAr
					,@ClFamilyNameAr
					,@FullNameEn
					,@StudNameEn
					,@FatherNameEn
					,@GrandfatherNameEn
					,@FamilyNameEn
					,@FatherProfession
					,@FatherNationalNumber
					,@MotherNationalNumber
					,@MotherNameAr
					,@ClMotherNameAr
					,@MotherNameEn
					,@GsCodeGenderId
					,@GsCodeReligionId
					,@BirthRegNumber
					,@BirthDate
					,@GsBirthCountryNodeId
					,@GsCountryInfoId1
					,@GsCountryInfoId2
					,@StudPhoto
          ,@IsPrntStaff
          ,@SaStfMemberPrntId
					)
    set @EdStudId=@MaxEdStudId;  
    
IF @@ERROR <> 0
 BEGIN
    ROLLBACK

    RETURN
 END
commit transaction;		
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_Transcript" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        SELECT     ED_ACAD_YEAR.DESCR_AR AS EdAcadYearDescrAr, ED_ACAD_YEAR.DESCR_EN AS EdAcadYearDescrEn, 
                      ED_CODE_SEMESTER.DESCR_AR AS EdCodeSemesterDescrAr, ED_CODE_SEMESTER.DESCR_EN AS EdCodeSemesterDescrEn, 
                      ED_COURSE.COURSE_CODE AS EdCourseCode, ED_COURSE.COURSE_DESCR_AR AS EdCourseDescrAr, 
                      ED_COURSE.COURSE_DESCR_EN AS EdCourseDescrEn, ED_COURSE.CREDIT_HOURS AS EdCourseCreditHours, 
                      ED_STUD_COURSE_REG.COURSE_DEGREE AS EdStudCourseRegDegree, ED_STUD_COURSE_REG.COURSE_POINT AS EdStudCourseRegPoint, 
                      ED_CODE_GRADING.DESCR_AR AS EdCodeGradingDescrAr, ED_CODE_GRADING.DESCR_EN AS EdCodeGradingDescrEn,
                      ED_CODE_COURSE_STATUS.ED_CODE_COURSE_STATUS_ID,ED_CODE_COURSE_STATUS.SYMBOL,
                      ED_STUD_SEMESTER.ACCUM_GPA, ED_STUD_SEMESTER.SEM_GPA, ED_STUD_SEMESTER.SEM_CH
FROM         ED_COURSE INNER JOIN
                      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER INNER JOIN
                      ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID left outer JOIN
                      ED_CODE_SEMESTER_TYPE ON 
                      ED_CODE_SEMESTER.ED_CODE_SEMESTER_TYPE_ID = ED_CODE_SEMESTER_TYPE.ED_CODE_SEMESTER_TYPE_ID ON 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID LEFT OUTER JOIN
                      ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID left outer join
                      ED_CODE_COURSE_STATUS on ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = ED_CODE_COURSE_STATUS.ED_CODE_COURSE_STATUS_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) 
AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) 
AND (ED_STUD_COURSE_REG.COURSE_DEGREE IS NOT NULL)
ORDER BY ED_ACAD_YEAR.Year_Order, ED_CODE_SEMESTER.Semester_Order, EdCourseCode
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudDetails" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        select ED_STUD.FULL_NAME_AR
        ,ED_STUD.FULL_NAME_EN
        ,ED_CODE_LEVEL.DESCR_AR as LevelDescrAr
        ,ED_CODE_LEVEL.DESCR_EN as LevelDescrEn
        ,ED_STUD_SEMESTER.ACCUM_GPA
        ,dbo.FN_GetStudStates(ED_STUD_SEMESTER.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,
        ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1) as StatesAr
        ,dbo.FN_GetStudStates(ED_STUD_SEMESTER.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,
        ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) as StatesEn

        from ED_STUD left outer join ED_STUD_SEMESTER on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
        left outer join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=ED_STUD_SEMESTER.AS_FACULTY_INFO_ID)
        left outer join ED_STUD_STATE on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
        left outer join ED_CODE_LEVEL on ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=ED_CODE_LEVEL.ED_CODE_LEVEL_ID

        where ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=@EdStudSemId
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetNewSemesterStudentsData" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />

      </parameters>
      <body>
        <![CDATA[
				

-- GET NEW OF (ED_CODE_SEMESTER_ID, ED_ACAD_YEAR_ID, ED_SEMESTER_OPEN_ID) FOR THE NEW STUDENT DATA.
--DECLARE @ED_CODE_SEMESTER_ID INT
--DECLARE @ED_ACAD_YEAR_ID INT
DECLARE @ED_SEMESTER_OPEN_ID INT

SELECT		
--@ED_CODE_SEMESTER_ID = ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID,
		--	@ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID,
			@ED_SEMESTER_OPEN_ID = ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
FROM         ED_SEMESTER_OPEN INNER JOIN
                      ED_ACAD_YEAR ON ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ENTITY_MAIN ON ED_SEMESTER_OPEN.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE     (ED_ACAD_YEAR.CURRENT_YEAR = 1)
AND ED_SEMESTER_OPEN.IS_CURRENT = 1
and ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID=@ED_CODE_SEMESTER_ID
and ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID=@ED_ACAD_YEAR_ID
AND ENTITY_MAIN.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID
AND ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID IN (2,14); 


-- NEW STUDENT SEMESTER DATA.
select t11.ED_CODE_SEMESTER_ID,
		t11.ED_STUD_ID,
		t11.ED_ACAD_YEAR_ID,
		t11.AS_FACULTY_INFO_ID,
		t11.ED_CODE_LEVEL_ID,
		t11.IS_LAST, 
		t11.ED_CODE_LOAD_TYPE_ID,
		t11.ED_CODE_ENROLL_TYPE_ID,
		t12.CCH as ACCUM_CH,
		t12.CGPA as ACCUM_GPA,
		t11.ACCUM_POINT,
		t11.IS_COURSE_APPROVED,
		t11.SEM_CH,
		t11.SEM_GPA,
		t11.SEM_POINT,
		t11.ED_SEMESTER_OPEN_ID,
		t11.ED_STUD_SEMESTER_ID

from 
(SELECT      @ED_CODE_SEMESTER_ID AS ED_CODE_SEMESTER_ID, 
			ED_STUD_SEMESTER.ED_STUD_ID, 
			@ED_ACAD_YEAR_ID AS ED_ACAD_YEAR_ID, 
			@AS_FACULTY_INFO_ID AS AS_FACULTY_INFO_ID, 
			ED_STUD_SEMESTER.ED_CODE_LEVEL_ID AS ED_CODE_LEVEL_ID, 
			1 AS IS_LAST, 
			ED_STUD_SEMESTER.ED_CODE_LOAD_TYPE_ID as ED_CODE_LOAD_TYPE_ID, 
			ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID AS ED_CODE_ENROLL_TYPE_ID, 
			ED_STUD_SEMESTER.ACCUM_CH + ISNULL(ED_STUD_SEMESTER.SEM_CH, 0) AS ACCUM_CH, 
			ED_STUD_SEMESTER.ACCUM_GPA + ISNULL(ED_STUD_SEMESTER.SEM_GPA, 0) AS ACCUM_GPA, 
			ED_STUD_SEMESTER.ACCUM_POINT + ISNULL(ED_STUD_SEMESTER.SEM_POINT, 0) AS ACCUM_POINT, 
			0 AS IS_COURSE_APPROVED, 
      NULL AS SEM_CH, 
			NULL AS SEM_GPA, 
			NULL AS SEM_POINT, 
			@ED_SEMESTER_OPEN_ID AS ED_SEMESTER_OPEN_ID,
			ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
			
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
WHERE     (ED_STUD_SEMESTER.IS_LAST = 1)
		and ED_STUD_FACULTY.GRADUATES_FLAG = 0
		and  ED_STUD_FACULTY.IS_ACTIVE = 1
    and  ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID in (1,2)
		and ED_STUD_SEMESTER.ED_STUD_ID not in (
     SELECT    distinct ED_STUD_ID
     FROM      ED_STUD_EXCUSE
     where ED_STUD_EXCUSE.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID
     and ED_STUD_EXCUSE.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID)
  AND NOT EXISTS(
  SELECT 'a' FROM dbo.ED_STUD_SEMESTER AS ss WHERE ss.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID AND ss.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID
  AND ss.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID
  ))as t11
left outer join 
(
select t1.ED_STUD_ID,t1.CREDIT_HOURS as CCH, (t2.Points / t1.CREDIT_HOURS) as CGPA -- for all closed semester
from
(SELECT     SUM(ED_COURSE.CREDIT_HOURS) AS CREDIT_HOURS, ED_STUD_SEMESTER.ED_STUD_ID
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_SEMESTER_OPEN ON ED_STUD_SEMESTER.ED_SEMESTER_OPEN_ID = ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
WHERE     (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1) AND (ED_STUD_COURSE_REG.IS_LAST = 1) AND (ED_SEMESTER_OPEN.IS_CLOSED = 1) AND 
                      (ED_STUD_COURSE_REG.ADD_GPA_FLG = 1) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID)
GROUP BY ED_STUD_SEMESTER.ED_STUD_ID)as t1
inner join
(SELECT     SUM(ISNULL(ENT_POLICY_GRADING_DTL.POINTS, 0) * ED_COURSE.CREDIT_HOURS) AS Points, ED_STUD_SEMESTER.ED_STUD_ID
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ENT_POLICY_GRADING_HDR ON 
                      ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                      ENT_POLICY_GRADING_DTL ON 
                      ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                      ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID AND 
                      ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
                      ED_SEMESTER_OPEN ON ED_STUD_SEMESTER.ED_SEMESTER_OPEN_ID = ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
WHERE     (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1) AND (ED_STUD_COURSE_REG.IS_LAST = 1) AND (ED_SEMESTER_OPEN.IS_CLOSED = 1) AND 
                      (ED_STUD_COURSE_REG.ADD_GPA_FLG = 1) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID)
GROUP BY ED_STUD_SEMESTER.ED_STUD_ID)as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID
) as t12

on t11.ED_STUD_ID = t12.ED_STUD_ID
order by t11.ED_STUD_ID
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetNewLoadTypeID" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ED_STUD_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
-- GET POLICY OBSERVED "GPA_LESS_THAN","NO_SEMESTER" FOR FACULTY OR PROGRAM

DECLARE @ENT_POLICY_OBSERVED_GPA_LESS_THAN INT
DECLARE @ENT_POLICY_OBSERVED_NO_SEMESTER INT

set @ENT_POLICY_OBSERVED_GPA_LESS_THAN=0
set @ENT_POLICY_OBSERVED_NO_SEMESTER=0

SELECT   @ENT_POLICY_OBSERVED_GPA_LESS_THAN = ENT_POLICY_OBSERVED.GPA_LESS_THAN,@ENT_POLICY_OBSERVED_NO_SEMESTER = ENT_POLICY_OBSERVED.NO_SEMESTER
FROM         ENT_POLICY_OBSERVED INNER JOIN
                      ENTITY_MAIN ON ENT_POLICY_OBSERVED.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ED_STUD_STATE ON ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID) AND (ED_STUD_SEMESTER.ED_STUD_ID = @ED_STUD_ID) AND 
                      (ED_STUD_SEMESTER.IS_LAST = 1);

-- GET STUDENT DATA ACORDING TO THE OBSERVATION

DECLARE @STUD_ACCUM_GPA INT
DECLARE @STUD_SEMESTER_COUNT INT
DECLARE @STUD_OPSERVATION INT

SET @STUD_OPSERVATION = 1;

DECLARE STUD_GPA_S CURSOR FOR SELECT TOP (@ENT_POLICY_OBSERVED_NO_SEMESTER) ED_STUD_SEMESTER.ACCUM_GPA 
FROM ED_STUD_SEMESTER 
WHERE ED_STUD_SEMESTER.ED_STUD_ID=@ED_STUD_ID
ORDER BY ED_STUD_SEMESTER.ED_CODE_LEVEL_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID DESC;

OPEN STUD_GPA_S;

FETCH NEXT FROM STUD_GPA_S INTO @STUD_ACCUM_GPA;

WHILE @@FETCH_STATUS =0
BEGIN

IF(@STUD_ACCUM_GPA <= @ENT_POLICY_OBSERVED_GPA_LESS_THAN)
BEGIN 
	SET @STUD_OPSERVATION = 2;
END

FETCH NEXT FROM STUD_GPA_S INTO @STUD_ACCUM_GPA;
END

SET @STUD_SEMESTER_COUNT = @@CURSOR_ROWS;

CLOSE STUD_GPA_S;
DEALLOCATE STUD_GPA_S;

IF(@STUD_OPSERVATION = 2 AND @STUD_SEMESTER_COUNT = @ENT_POLICY_OBSERVED_NO_SEMESTER)
BEGIN 
	SET @STUD_OPSERVATION = 2;
END
ELSE
BEGIN
	SET @STUD_OPSERVATION = 1;
END

-- PRINT STUDENT ED_CODE_LOAD_TYPE_ID

select @STUD_OPSERVATION as ED_CODE_LOAD_TYPE_ID;
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_CourseChangeTime" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemActivityId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_SEMESTER_AGENDA.FROM_DATE, ED_SEMESTER_AGENDA.TO_DATE
FROM         ED_SEMESTER_AGENDA INNER JOIN
                      ED_SEMESTER_OPEN ON ED_SEMESTER_AGENDA.ED_SEMESTER_OPEN_ID = ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID INNER JOIN
                      ED_CODE_SEM_ACTVITY ON 
                      ED_SEMESTER_AGENDA.ED_CODE_SEM_ACTVITY_ID = ED_CODE_SEM_ACTVITY.ED_CODE_SEM_ACTVITY_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID = ED_STUD_SEMESTER.ED_SEMESTER_OPEN_ID
where ED_CODE_SEM_ACTVITY.ED_CODE_SEM_ACTVITY_ID = @EdCodeSemActivityId
and ED_STUD_SEMESTER.IS_LAST = 1

and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_SummeryGradReq" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
select	t1.DESCR_AR,
		t1.DESCR_EN,
		t1.ENT_COURSE_PKG_HDR_TOT_CH,
		ISNULL(t2.FullFilledCreditHours,0) as FullFilledCreditHours,
		ISNULL(t3.CurrentRegisterdCreditHours,0) as CurrentRegisterdCreditHours

from (
select t.ENT_COURSE_PKG_HDR_ID,t.DESCR_AR,t.DESCR_EN,t.ENT_COURSE_PKG_HDR_TOT_CH,t.NODE_PATH,MAX(t.n) n from
(
SELECT ENTITY_MAIN.NODE_PATH, ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID, ENT_COURSE_PKG_HDR.DESCR_AR, 
                      ENT_COURSE_PKG_HDR.DESCR_EN, ENT_COURSE_PKG_HDR.MIN_TOT_CH AS ENT_COURSE_PKG_HDR_TOT_CH, ROW_NUMBER() over(order by ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID,ED_ACAD_YEAR.YEAR_CODE, ED_CODE_SEMESTER.SEMESTER_ORDER) n
FROM         ENTITY_MAIN INNER JOIN
                      ENT_COURSE_PKG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_COURSE_PKG_HDR.ENT_MAIN_ID INNER JOIN
                      ED_STUD_STATE ON ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)
) as t
group by t.ENT_COURSE_PKG_HDR_ID,t.DESCR_AR,t.DESCR_EN,t.ENT_COURSE_PKG_HDR_TOT_CH,t.NODE_PATH
)as t1 

left outer join 

(SELECT     ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID,SUM(ED_COURSE.CREDIT_HOURS) AS FullFilledCreditHours
FROM         ENT_COURSE_PKG_HDR INNER JOIN
                      ENT_COURSE_PKG_DTL ON 
                      ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
                      ED_COURSE ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where ED_COURSE.ED_COURSE_ID in (
SELECT DISTINCT ED_COURSE.ED_COURSE_ID
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_COURSE INNER JOIN
                      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID ON 
                      ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_COURSE_REG.COURSE_DEGREE IS NOT NULL) AND (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)
)                      
GROUP BY ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID) as t2

on t1.ENT_COURSE_PKG_HDR_ID = t2.ENT_COURSE_PKG_HDR_ID

left outer join 

(SELECT     ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID, SUM(ED_COURSE.CREDIT_HOURS) AS CurrentRegisterdCreditHours
FROM         ED_STUD_SEMESTER INNER JOIN
                      ENT_COURSE_PKG_HDR INNER JOIN
                      ENT_COURSE_PKG_DTL ON 
                      ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
                      ED_COURSE ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID ON 
                      ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                      (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)
GROUP BY ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID) as t3

on t1.ENT_COURSE_PKG_HDR_ID = t3.ENT_COURSE_PKG_HDR_ID
				
order by t1.NODE_PATH

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_SummeryGradAudit" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
      exec STUD_DEGREE_AUDIT @EdStudId;

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_RemainingEvaluations" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
select t.EVAL_TYPE,t.SV_STAFF_EVL_ID as SV_EVAL_ID,t.SA_STF_MAMBER_ID as EVAL_TYPE_ID,t.STF_FULL_NAME_AR as DESCR_AR,t.STF_FULL_NAME_EN as DESCR_EN from (

select t2.* from
(select * from SV_STAFF_EVL 
where SV_STAFF_EVL.ED_ACAD_YEAR_ID = @EdAcadYearId and
SV_STAFF_EVL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
SV_STAFF_EVL.PUB_FLG = 1) as t1
inner join
(
select 1 as EVAL_TYPE,t.SV_STAFF_EVL_ID,t.SA_STF_MAMBER_ID,t.STF_FULL_NAME_AR,t.STF_FULL_NAME_EN from
(
select distinct t4.SV_STAFF_EVL_ID,t1.SA_STF_MAMBER_ID,t1.STF_FULL_NAME_AR,t1.STF_FULL_NAME_EN,t1.AS_NODE_ID,case when ISNULL(t2.SA_STF_MEMBER_ID,0) <> 0  and t2.itemsCount = t3.EvalItemsCount then 1 else 0 end StaffEvalDone
from 
(
SELECT DISTINCT SC_SCHEDULE_DTL.SA_STF_MAMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN,SA_STF_MEMBER.AS_NODE_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      SC_SCHEDULE_DTL ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                      (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                      (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID IS NOT NULL)
) as t1
left outer join
(
SELECT t1.*,t2.SA_STF_MEMBER_ID,t2.itemsCount FROM (
SELECT     SV_STAFF_EVL.SV_STAFF_EVL_ID
FROM         SV_STAFF_EVAL_ITEM INNER JOIN
                      SV_STAFF_EVL ON SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID = SV_STAFF_EVL.SV_STAFF_EVL_ID
WHERE     (SV_STAFF_EVL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (SV_STAFF_EVL.ED_ACAD_YEAR_ID = @EdAcadYearId)
GROUP BY SV_STAFF_EVL.SV_STAFF_EVL_ID
) AS t1 LEFT OUTER JOIN (
SELECT   SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID,SV_STAFF_EVL.SV_STAFF_EVL_ID,COUNT(SV_STUD_STAFF_EVAL.SV_STUD_STAFF_EVAL_ID) as itemsCount
FROM         SV_STUD_STAFF_EVAL INNER JOIN
                      SV_STAFF_EVAL_ITEM ON SV_STUD_STAFF_EVAL.SV_STAFF_EVAL_ITEM_ID = SV_STAFF_EVAL_ITEM.SV_STAFF_EVAL_ITEM_ID INNER JOIN
                      SV_STAFF_EVL ON SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID = SV_STAFF_EVL.SV_STAFF_EVL_ID
where  SV_STUD_STAFF_EVAL.ED_STUD_ID = @EdStudId
and SV_STAFF_EVL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and SV_STAFF_EVL.ED_ACAD_YEAR_ID = @EdAcadYearId 
group by SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID,SV_STAFF_EVL.SV_STAFF_EVL_ID
) AS t2
ON t1.SV_STAFF_EVL_ID = t2.SV_STAFF_EVL_ID
) as t2
on t1.SA_STF_MAMBER_ID = t2.SA_STF_MEMBER_ID
left outer join
(
select SV_COURSE_STF_EVL_ID,COUNT (*) as EvalItemsCount
from SV_STAFF_EVAL_ITEM
group by SV_COURSE_STF_EVL_ID
) as t3
on t2.SV_STAFF_EVL_ID = t3.SV_COURSE_STF_EVL_ID
left outer join
(
SELECT   distinct  SV_STAFF_EVL.SV_STAFF_EVL_ID,ENTITY_MAIN.AS_FACULTY_INFO_ID
FROM         SV_STAFF_EVAL_ITEM INNER JOIN
                      SV_STAFF_EVL ON SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID = SV_STAFF_EVL.SV_STAFF_EVL_ID INNER JOIN
                      ENTITY_MAIN ON SV_STAFF_EVL.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE     (SV_STAFF_EVL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (SV_STAFF_EVL.ED_ACAD_YEAR_ID = @EdAcadYearId)
and ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId
)as t4
on t1.AS_FACULTY_INFO_ID = t4.AS_FACULTY_INFO_ID
) as t
where  t.StaffEvalDone = 0
) as t2
on t1.SV_STAFF_EVL_ID = t2.SV_STAFF_EVL_ID

union

select t2.* from
(select * from SV_COURSE_EVAL 
where SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYearId and
SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
SV_COURSE_EVAL.PUB_FLG = 1) as t1
inner join
(
select 2 as Eval_Type,t.SV_COURSE_EVAL_ID,t.ED_COURSE_ID,t.COURSE_DESCR_AR,t.COURSE_DESCR_EN from
(                        
select distinct t3.SV_COURSE_EVAL_ID,t1.ED_COURSE_ID,t1.COURSE_DESCR_AR,t1.COURSE_DESCR_EN,case when ISNULL(t2.ED_COURSE_ID,0) <> 0  and t2.itemsCount = t3.EvalItemsCount then 1 else 0 end CourseEvalDone
from 
(
SELECT DISTINCT ED_OFFERING_COURSE.ED_COURSE_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_COURSE.COURSE_CODE+' - '+ED_COURSE.COURSE_DESCR_AR as COURSE_DESCR_AR,ED_COURSE.COURSE_CODE+' - '+ED_COURSE.COURSE_DESCR_EN as COURSE_DESCR_EN
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      SC_SCHEDULE_DTL ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                      (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                      (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (ED_OFFERING_COURSE.ED_COURSE_ID IS NOT NULL)
) as t1
left outer join
(
SELECT t1.*,t2.itemsCount FROM (
SELECT     SV_COURSE_EVAL.ED_COURSE_ID, SV_COURSE_EVAL.SV_COURSE_EVAL_ID
FROM         SV_COURSE_EVAL_ITEM INNER JOIN
                      SV_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = SV_COURSE_EVAL.SV_COURSE_EVAL_ID
WHERE     (SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYearId)
GROUP BY SV_COURSE_EVAL.ED_COURSE_ID, SV_COURSE_EVAL.SV_COURSE_EVAL_ID
) t1 LEFT OUTER join
(
SELECT   SV_COURSE_EVAL.ED_COURSE_ID,SV_COURSE_EVAL.SV_COURSE_EVaL_ID,COUNT(SV_STUD_COURSE_EVAL.SV_STUD_COURSE_EVAL_ID) as itemsCount
FROM         SV_STUD_COURSE_EVAL INNER JOIN
                      SV_COURSE_EVAL_ITEM ON SV_STUD_COURSE_EVAL.SV_COURSE_EVAL_ITEM_ID = SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ITEM_ID INNER JOIN
                      SV_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = SV_COURSE_EVaL.SV_COURSE_EVaL_ID
where  SV_STUD_COURSE_EVAL.ED_STUD_ID = @EdStudId
and SV_COURSE_EVaL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and SV_COURSE_EVaL.ED_ACAD_YEAR_ID = @EdAcadYearId 
group by SV_COURSE_EVAL.ED_COURSE_ID,SV_COURSE_EVAL.SV_COURSE_EVAL_ID
) AS t2
ON t1.ED_COURSE_ID = t2.ED_COURSE_ID AND t1.SV_COURSE_EVaL_ID = t2.SV_COURSE_EVaL_ID
) as t2
on t1.ED_COURSE_ID = t2.ED_COURSE_ID
left outer join
(
select SV_COURSE_EVAL_ID,COUNT (*) as EvalItemsCount
from SV_COURSE_EVAL_ITEM
group by SV_COURSE_EVAL_ID
) as t3
on t2.SV_COURSE_EVAL_ID = t3.SV_COURSE_EVAL_ID
) as t
where t.CourseEvalDone = 0
)as t2
on t1.SV_COURSE_EVAL_ID = t2.SV_COURSE_EVAL_ID

)as t

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_AvailableCoursesForEvaluation" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_COURSE_REG.ED_COURSE_ID not in 
(
	SELECT     SV_COURSE_EVAL.ED_COURSE_ID
	FROM         SV_STUD_COURSE_EVAL INNER JOIN
						  SV_COURSE_EVAL_ITEM ON 
						  SV_STUD_COURSE_EVAL.SV_COURSE_EVAL_ITEM_ID = SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ITEM_ID INNER JOIN
						  SV_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = SV_COURSE_EVAL.SV_COURSE_EVAL_ID
	where SV_STUD_COURSE_EVAL.ED_STUD_ID = @EdStudId
	and SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYearId
	and SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
  and SV_COURSE_EVAL.PUB_FLG = 1
)

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_CourseEvaluated" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     SV_COURSE_EVAL_ITEM.SV_CODE_EVAL_ITEM_ID, SV_STUD_COURSE_EVAL.SV_CODE_RATING_SCHM_DTL_ID
FROM         SV_STUD_COURSE_EVAL INNER JOIN
                      SV_COURSE_EVAL_ITEM ON 
                      SV_STUD_COURSE_EVAL.SV_COURSE_EVAL_ITEM_ID = SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ITEM_ID INNER JOIN
                      SV_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = SV_COURSE_EVAL.SV_COURSE_EVAL_ID INNER JOIN
                      SV_CODE_RATING_SCHM_DTL ON 
                      SV_STUD_COURSE_EVAL.SV_CODE_RATING_SCHM_DTL_ID = SV_CODE_RATING_SCHM_DTL.SV_CODE_RATING_SCHM_DTL_ID
WHERE     (SV_STUD_COURSE_EVAL.ED_STUD_ID = @EdStudId) AND (SV_COURSE_EVAL.ED_COURSE_ID = @EdCourseId)

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetForStudentView" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
select  t1.SE_USER_ID, 
		t1.Inbox, -- SV_USER_MESSAGE
		t2.Polls -- SV_STUD_POLL
from

(SELECT    @SeUserId as SE_USER_ID, COUNT(SV_USER_MESSAGE.SV_USER_MESSAGE_ID) as Inbox
FROM         SV_USER_MESSAGE INNER JOIN
                      SV_MESSAGE ON SV_USER_MESSAGE.SV_MESSAGE_ID = SV_MESSAGE.SV_MESSAGE_ID
where SV_MESSAGE.ED_ACAD_YEAR_ID=@EdAcadYearId
and SV_MESSAGE.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
and SV_USER_MESSAGE.SE_USER_ID=@SeUserId
and SV_USER_MESSAGE.OPENED_FLG=0) as t1

inner join

(select @SeUserId as SE_USER_ID ,
(
SELECT     COUNT(SV_POLL_HDR_ID) AS Polls
FROM         SV_POLL_HDR
)
-
(
SELECT     COUNT(SV_POLL_HDR.SV_POLL_HDR_ID) AS UserPolls
FROM         SV_STUD_POLL INNER JOIN
                      SV_POLL_DTL ON SV_STUD_POLL.SV_POLL_DTL_ID = SV_POLL_DTL.SV_POLL_DTL_ID INNER JOIN
                      SV_POLL_HDR ON SV_POLL_DTL.SV_POLL_HDR_ID = SV_POLL_HDR.SV_POLL_HDR_ID INNER JOIN
                      ED_STUD ON SV_STUD_POLL.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID
where SE_USER.SE_USER_ID = @SeUserId
) as Polls) as t2

on t1.SE_USER_ID = t2.SE_USER_ID

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_Destroy" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Var_Students" type="nvarchar" direction="Input" size="4000" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
          exec [dbo].[DestroyStudHistory] @Var_Students
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetByAsFacultyInfoId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ED_STUD].[ED_STUD_ID],
					ED_STUD_FACULTY.STUD_FACULTY_CODE,
					[NATIONAL_NUMBER],
					[FULL_NAME_AR],
					[CL_FULL_NAME_AR],
					[STUD_NAME_AR],
					[CL_STUD_NAME_AR],
					[FATHER_NAME_AR],
					[CL_FATHER_NAME_AR],
					[GRANDFATHER_NAME_AR],
					[CL_GRANDFATHER_NAME_AR],
					[FAMILY_NAME_AR],
					[CL_FAMILY_NAME_AR],
					[FULL_NAME_EN],
					[STUD_NAME_EN],
					[FATHER_NAME_EN],
					[GRANDFATHER_NAME_EN],
					[FAMILY_NAME_EN],
					[FATHER_PROFESSION],
					[FATHER_NATIONAL_NUMBER],
					[MOTHER_NATIONAL_NUMBER],
					[MOTHER_NAME_AR],
					[CL_MOTHER_NAME_AR],
					[MOTHER_NAME_EN],
					[GS_CODE_GENDER_ID],
					[GS_CODE_RELIGION_ID],
					[BIRTH_REG_NUMBER],
					[BIRTH_DATE],
					[GS_BIRTH_COUNTRY_NODE_ID],
					[GS_COUNTRY_INFO_ID_1],
					[GS_COUNTRY_INFO_ID_2],
					ED_STUD_FACULTY.[AS_FACULTY_INFO_ID],
					[STUD_PHOTO]
				FROM
					[dbo].[ED_STUD] inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID)
				WHERE
					ED_STUD_FACULTY.[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="AcademicAdvStudSearch">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="4" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="4" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
			declare @NullableStudClFullName nvarchar(150)
declare @NullableEdCodeLevelId numeric(2,0)
declare @NullableEntityMainId numeric(5,0)

set @NullableEdCodeLevelId=@EdCodeLevelId;
set @NullableEntityMainId=@EntityMainId;
set @NullableStudClFullName=@StudClFullName;

  if(@LangNum=1)--Arabic
  begin
	SELECT 	distinct ED_STUD.*,
					ED_STUD_FACULTY.STUD_FACULTY_CODE,
					ED_STUD_FACULTY.AS_FACULTY_INFO_ID
					
	from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
         left outer join ED_STUD_SEMESTER on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
         inner join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
         inner join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
         left outer join ED_STUD_GROUP on (ED_STUD_GROUP.ED_STUD_ID=ED_STUD.ED_STUD_ID
         and ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_GROUP.ED_STUD_SEMESTER_ID)
    

    where  (ED_STUD_FACULTY.IS_ACTIVE=1)
           and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
           and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
           and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
           and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
          and (@NullableStudClFullName is null or (ED_STUD.FULL_NAME_AR like  case when @NamePolicy=1 then '%'+@NullableStudClFullName+'%' else @NullableStudClFullName+'%' end))
          and (@NullableEdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@NullableEdCodeLevelId) 
          and (@NullableEntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@NullableEntityMainId)
          and (@ScScheduleDtlId is null or ED_STUD_GROUP.SC_SCHEDULE_DTL_ID=@ScScheduleDtlId)
          and (ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
          and  ED_STUD.[ED_STUD_ID] not in (select ED_STUD_ACADMIC_ADV.[ED_STUD_ID] from ED_STUD_ACADMIC_ADV
                                           where ED_ACAD_YEAR_ID=@EdAcadYearId and ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                                           and AS_FACULTY_INFO_ID=@AsFacultyInfoId)
  end
  else--english
  begin
   SELECT   distinct ED_STUD.*,
					ED_STUD_FACULTY.STUD_FACULTY_CODE,
					ED_STUD_FACULTY.AS_FACULTY_INFO_ID
					
	from   ED_STUD inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
         left outer join ED_STUD_SEMESTER on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
         inner join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
         inner join ED_STUD_STATE on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
         left outer join ED_STUD_GROUP on (ED_STUD_GROUP.ED_STUD_ID=ED_STUD.ED_STUD_ID
         and ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_GROUP.ED_STUD_SEMESTER_ID)
    where 
          (ED_STUD_FACULTY.IS_ACTIVE=1)
          and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
          and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
           and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
           and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
          and (@NullableStudClFullName is null or (ED_STUD.FULL_NAME_EN like case when @NamePolicy=1 then '%'+@NullableStudClFullName+'%' else @NullableStudClFullName+'%' end))
          and (@NullableEdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@NullableEdCodeLevelId) 
          and (@NullableEntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@NullableEntityMainId)
          and (@ScScheduleDtlId is null or ED_STUD_GROUP.SC_SCHEDULE_DTL_ID=@ScScheduleDtlId)
          and (ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
          and  ED_STUD.[ED_STUD_ID] not in (select ED_STUD_ACADMIC_ADV.[ED_STUD_ID] from ED_STUD_ACADMIC_ADV
                                           where ED_ACAD_YEAR_ID=@EdAcadYearId and ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                                           and AS_FACULTY_INFO_ID=@AsFacultyInfoId)
  end
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GroupAllocation_StudentSearch">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Lang" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="150" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="4" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="4" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[


if(@EdCodeCourseTeachingId is null or @EdCodeCourseTeachingId = 0)
begin

SELECT   distinct  ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                      ED_CODE_LEVEL.DESCR_AR, ED_CODE_LEVEL.DESCR_EN,ED_STUD_SEMESTER.IS_COURSE_APPROVED
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID left outer JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID
where 

(ED_STUD_FACULTY.IS_ACTIVE=1)
and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
and (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId=0 or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_SEMESTER.IS_COURSE_APPROVED <> 1
and ((@StudName is null or @StudName = '' or (ED_STUD.FULL_NAME_EN like '%'+@StudName+'%' and @Lang = 2 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_AR like '%'+@StudName+'%' and @Lang = 1 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_EN like @StudName+'%' and @Lang = 2 and @NamePolicy=2)
										 or (ED_STUD.FULL_NAME_AR like @StudName+'%' and @Lang = 1 and @NamePolicy=2)) or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudName+'%')
and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @EdCodeLevelId)
and (@EntMainId is null or @EntMainId=0 or ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)
and (@EdCourseId is null or @EdCourseId=0 or ED_STUD_COURSE_REG.ED_COURSE_ID= @EdCourseId)

end
else
begin

SELECT   distinct  ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                      ED_CODE_LEVEL.DESCR_AR, ED_CODE_LEVEL.DESCR_EN,ED_STUD_SEMESTER.IS_COURSE_APPROVED
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID left outer JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID
where 
(ED_STUD_FACULTY.IS_ACTIVE=1)
and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
and (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId=0 or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ED_STUD_COURSE_REG.ED_COURSE_ID= @EdCourseId)
and ED_STUD_SEMESTER.IS_COURSE_APPROVED <> 1
and ((@StudName is null or @StudName = '' or (ED_STUD.FULL_NAME_EN like '%'+@StudName+'%' and @Lang = 2 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_AR like '%'+@StudName+'%' and @Lang = 1 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_EN like @StudName+'%' and @Lang = 2 and @NamePolicy=2)
										 or (ED_STUD.FULL_NAME_AR like @StudName+'%' and @Lang = 1 and @NamePolicy=2)) or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudName+'%')
and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @EdCodeLevelId)
and (@EntMainId is null or @EntMainId=0 or ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)
and ED_STUD.ED_STUD_ID not in
(SELECT     ED_STUD_GROUP.ED_STUD_ID
FROM         ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_GROUP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID AND 
                      ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
where (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId=0 or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId
and SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = @EdCodeCourseTeachingId)

end
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ExamPlaceAllocation_StudentSearch">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Lang" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="150" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="4" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="4" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NamePolicy" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@CoExamSchdlPlaceId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

if(@CoExamSchdlPlaceId is null or @CoExamSchdlPlaceId = 0)
begin

SELECT DISTINCT 
                      ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_CODE_LEVEL.DESCR_AR, 
                      ED_CODE_LEVEL.DESCR_EN, ED_STUD_SEMESTER.IS_COURSE_APPROVED
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID LEFT OUTER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_EXAM_SCHDL ON ED_COURSE.ED_COURSE_ID = ED_EXAM_SCHDL.ED_COURSE_ID
where 

(ED_STUD_FACULTY.IS_ACTIVE=1)
and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_SEMESTER.IS_COURSE_APPROVED = 1
and (@StudName is null or @StudName = '' or (ED_STUD.FULL_NAME_EN like '%'+@StudName+'%' and @Lang = 2 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_AR like '%'+@StudName+'%' and @Lang = 1 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_EN like @StudName+'%' and @Lang = 2 and @NamePolicy=2)
										 or (ED_STUD.FULL_NAME_AR like @StudName+'%' and @Lang = 1 and @NamePolicy=2))
and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @EdCodeLevelId)
and (@EntMainId is null or @EntMainId=0 or ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)
and (@EdCourseId is null or @EdCourseId=0 or ED_STUD_COURSE_REG.ED_COURSE_ID= @EdCourseId)

end
else
begin

SELECT DISTINCT 
                      ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE, ED_CODE_LEVEL.DESCR_AR, 
                      ED_CODE_LEVEL.DESCR_EN, ED_STUD_SEMESTER.IS_COURSE_APPROVED
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID LEFT OUTER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_EXAM_SCHDL ON ED_COURSE.ED_COURSE_ID = ED_EXAM_SCHDL.ED_COURSE_ID INNER JOIN
                      CO_EXAM_SCHDL_PLACE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID
where 
(ED_STUD_FACULTY.IS_ACTIVE=1)
and (ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=1 or ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=4)
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ED_STUD_COURSE_REG.ED_COURSE_ID= @EdCourseId)
and ED_STUD_SEMESTER.IS_COURSE_APPROVED = 1
and (@StudName is null or @StudName = '' or (ED_STUD.FULL_NAME_EN like '%'+@StudName+'%' and @Lang = 2 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_AR like '%'+@StudName+'%' and @Lang = 1 and @NamePolicy=1)
										 or (ED_STUD.FULL_NAME_EN like @StudName+'%' and @Lang = 2 and @NamePolicy=2)
										 or (ED_STUD.FULL_NAME_AR like @StudName+'%' and @Lang = 1 and @NamePolicy=2))
and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @EdCodeLevelId)
and (@EntMainId is null or @EntMainId=0 or ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)
and ED_STUD.ED_STUD_ID  not in
(SELECT     ED_STUD_SEMESTER.ED_STUD_ID
FROM         ED_STUD_SEMESTER INNER JOIN
                      CO_EXAM_PLACE_STUD ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = CO_EXAM_PLACE_STUD.ED_STUD_SEMESTER_ID INNER JOIN
                      CO_EXAM_SCHDL_PLACE ON CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID = CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID
where CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID in(select CO_EXAM_SCHDL_PLACE_ID from  CO_EXAM_SCHDL_PLACE inner join ED_EXAM_SCHDL on CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID=ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID 
where ED_EXAM_SCHDL.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ED_EXAM_SCHDL.ED_COURSE_ID= @EdCourseId)))
end

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStaffsForStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

select distinct * from (
SELECT  distinct   SA_STF_MEMBER.SA_STF_MEMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN
FROM         SC_SCHEDULE_DTL INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_GROUP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_GROUP.ED_STUD_ID = @EdStudId
union
SELECT     SA_STF_MEMBER.SA_STF_MEMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN
FROM         ED_STUD_ACADMIC_ADV INNER JOIN
                      SA_STF_MEMBER ON ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
where ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ACADMIC_ADV.ED_STUD_ID = @EdStudId)as t1

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="CourseChngStudSearch">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@LangNum" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@StudClFullName" type="nvarchar" direction="Input" size="150" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="4" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@ED_COURSE_ID" type="numeric" direction="Input" size="4" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="4" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@CourseChngFlag" type="numeric" direction="Input" size="4" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
if(@CourseChngFlag = 1)
begin
	if(@LangNum = 1)
	begin

	select ED_STUD.* from ED_STUD
	where ED_STUD.ED_STUD_ID not in (SELECT     ED_STUD.ED_STUD_ID
FROM         ED_STUD LEFT OUTER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
	where 
	ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
	and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ED_STUD_COURSE_REG.ED_COURSE_ID = @ED_COURSE_ID
	and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId) 	
	and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
	)
	and (@StudClFullName is null or ED_STUD.CL_FULL_NAME_AR like '%'+@StudClFullName+'%')

	end
	else
	begin
	
	select ED_STUD.* from ED_STUD
	where ED_STUD.ED_STUD_ID not in (SELECT     ED_STUD.ED_STUD_ID
FROM         ED_STUD LEFT OUTER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
	where 
	ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
	and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ED_STUD_COURSE_REG.ED_COURSE_ID = @ED_COURSE_ID
	and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId)
	and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
	)
	and (@StudClFullName is null or ED_STUD.FULL_NAME_EN like '%'+@StudClFullName+'%')

	end

end
else
begin
	
	if(@LangNum = 1)
	begin
	
	select * from ED_STUD
	where ED_STUD_ID in (SELECT     ED_STUD.ED_STUD_ID
FROM         ED_STUD LEFT OUTER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
	where 
	ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
	and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ED_STUD_COURSE_REG.ED_COURSE_ID = @ED_COURSE_ID
	and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId)
	and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
	)
	and (@StudClFullName is null or ED_STUD.CL_FULL_NAME_AR like '%'+@StudClFullName+'%')
	
	end
	else
	begin
	
	select * from ED_STUD
	where ED_STUD_ID in (SELECT     ED_STUD.ED_STUD_ID
FROM         ED_STUD LEFT OUTER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
	where 
	ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
	and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ED_STUD_COURSE_REG.ED_COURSE_ID = @ED_COURSE_ID
	and (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId)
	and (@EntityMainId is null or ED_STUD_STATE.ENT_MAIN_ID=@EntityMainId)
	)
	and (@StudClFullName is null or ED_STUD.FULL_NAME_EN like '%'+@StudClFullName+'%')

	end
end
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetByEdStudIdOnly">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        if (not exists (select 'd' from ED_STUD_FACULTY where ED_STUD_FACULTY.Ed_Stud_Id=@EdStudId))
        begin
				SELECT
					[dbo].[ED_STUD].*,
					null,
					0
				FROM
					[dbo].[ED_STUD] 
				WHERE
					[dbo].[ED_STUD].[ED_STUD_ID] = @EdStudId 
        end
        else
        begin
        declare @StateFacInfoId numeric(7,0)
        
         select @StateFacInfoId=ed_stud_state.As_faculty_info_id
         from ed_stud_state inner join ed_stud_semester on ed_stud_state.ed_stud_semester_id=ed_stud_semester.ed_stud_semester_id
         inner join entity_main on ed_stud_state.ent_main_id=entity_main.ent_main_id
         where ed_stud_semester.Ed_stud_id=@EdStudId and (entity_main.ent_code_entity_type_id=14 or entity_main.ent_code_entity_type_id=2)
               
         
         	SELECT
					[dbo].[ED_STUD].*,
					ED_STUD_FACULTY.STUD_FACULTY_CODE,
					ED_STUD_FACULTY.AS_FACULTY_INFO_ID
					
				FROM
					[dbo].[ED_STUD] inner join ED_STUD_FACULTY on ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID 
				WHERE
					[dbo].[ED_STUD].[ED_STUD_ID] = @EdStudId and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@StateFacInfoId
         
        end
        
          
        
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SearchAllStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD table passing nullable parameters

----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@Lang" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="6" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@MinGPA" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(5, 2)" nulldefault="null" />
        <parameter name="@MaxGPA" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(5, 2)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdRegisterCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@RegCourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@EdAbsCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@CourseTeachId" type="numeric" direction="Input" size="4" precision="4" scale="0" param="(4, 0)" nulldefault="null" />
        <parameter name="@AbsenceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
	
if(@Lang=1)--arabic
begin
select  
   distinct [dbo].[ED_STUD].*
	, ED_STUD_FACULTY.STUD_FACULTY_CODE
	, ED_STUD_SEMESTER.ACCUM_GPA
	,  (select CAST(isnull(count (*),0) as numeric) from ED_STUD_ABSENCE where (ED_STUD.ED_STUD_ID=ED_STUD_ABSENCE.ED_STUD_ID and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID=@EdAcadYearId
      and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID=@EdCodeSemesterId and (@EdAbsCourseId is null or  ED_STUD_ABSENCE.ED_COURSE_ID=@EdAbsCourseId)))
  ,	ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
  , ''
  , ''
  , ''
  , null as Temp1
  , null as Temp2
  ,[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1) as GetStudStatesAr
  ,[dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) as GetStudStatesEn
  , ED_CODE_LEVEL.DESCR_AR
  
 from ED_STUD inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
 and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId)
inner join ED_STUD_STATE on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
 left outer join ED_STUD_COURSE_REG on ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
 left outer join ED_STUD_ABSENCE on (ED_STUD.ED_STUD_ID=ED_STUD_ABSENCE.ED_STUD_ID and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID=@EdAcadYearId
 and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID=@EdCodeSemesterId)
 left outer join ED_COURSE on ED_COURSE.ED_COURSE_ID=ED_STUD_COURSE_REG.ED_COURSE_ID
  left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID

where 

ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
and (@StudName is null or [dbo].[ED_STUD].FULL_NAME_AR like '%'+@StudName+'%' or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudName+'%')
      and (@MinGPA is null or ED_STUD_SEMESTER.ACCUM_GPA >= @MinGPA)
      and (@MaxGPA is null or ED_STUD_SEMESTER.ACCUM_GPA <= @MaxGPA)
      and (@EntMainId is null or ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)
      and (@EdRegisterCourseId is null or ED_STUD_COURSE_REG.ED_COURSE_ID=@EdRegisterCourseId)
      and (@RegCourseCode is null or ED_COURSE.COURSE_CODE like '%'+ @RegCourseCode+'%')
      and (@EdAbsCourseId is null or  ED_STUD_ABSENCE.ED_COURSE_ID=@EdAbsCourseId)
      and (@CourseTeachId is null or ED_STUD_ABSENCE.ED_CODE_COURSE_TEACHING_ID=@CourseTeachId)
      and (@AbsenceDate is null or ED_STUD_ABSENCE.ABS_DATE=@AbsenceDate)
      
end
else
begin
 select  
  distinct [dbo].[ED_STUD].*
	, ED_STUD_FACULTY.STUD_FACULTY_CODE
	, ED_STUD_SEMESTER.ACCUM_GPA
	,  (select CAST(isnull(count (*),0) as numeric) from ED_STUD_ABSENCE where (ED_STUD.ED_STUD_ID=ED_STUD_ABSENCE.ED_STUD_ID and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID=@EdAcadYearId
      and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID=@EdCodeSemesterId and (@EdAbsCourseId is null or  ED_STUD_ABSENCE.ED_COURSE_ID=@EdAbsCourseId)))
  ,	ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
  , '' ,
    '',
    '' ,
    null as Temp1,
    null as Temp2,
    [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,1) as GetStudStatesAr,
    [dbo].[FN_GetStudStates](ED_STUD.ED_STUD_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,2) as GetStudStatesEn,
    ED_CODE_LEVEL.DESCR_EN
  
 from ED_STUD inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
 and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId)
inner join ED_STUD_STATE on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
 left outer join ED_STUD_COURSE_REG on ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
 left outer join ED_STUD_ABSENCE on (ED_STUD.ED_STUD_ID=ED_STUD_ABSENCE.ED_STUD_ID and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID=@EdAcadYearId
 and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID=@EdCodeSemesterId)
 left outer join ED_COURSE on ED_COURSE.ED_COURSE_ID=ED_STUD_COURSE_REG.ED_COURSE_ID
  left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID

where 
ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
and (@StudName is null or [dbo].[ED_STUD].FULL_NAME_EN like '%'+@StudName+'%' or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudName+'%')
      and (@MinGPA is null or ED_STUD_SEMESTER.ACCUM_GPA >= @MinGPA)
      and (@MaxGPA is null or ED_STUD_SEMESTER.ACCUM_GPA <= @MaxGPA)
      and (@EntMainId is null or ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)
      and (@EdRegisterCourseId is null or ED_STUD_COURSE_REG.ED_COURSE_ID=@EdRegisterCourseId)
      and (@RegCourseCode is null or ED_COURSE.COURSE_CODE like '%'+ @RegCourseCode+'%')
      and (@EdAbsCourseId is null or  ED_STUD_ABSENCE.ED_COURSE_ID=@EdAbsCourseId)
      and (@CourseTeachId is null or ED_STUD_ABSENCE.ED_CODE_COURSE_TEACHING_ID=@CourseTeachId)
      and (@AbsenceDate is null or ED_STUD_ABSENCE.ABS_DATE=@AbsenceDate)
     
end
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StaffSearchStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD table passing nullable parameters

----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Lang" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="6" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@MinGPA" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(5, 2)" nulldefault="null" />
        <parameter name="@MaxGPA" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(5, 2)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdRegisterCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@RegCourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@EdAbsCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@CourseTeachId" type="numeric" direction="Input" size="4" precision="4" scale="0" param="(4, 0)" nulldefault="null" />
        <parameter name="@AbsenceDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
	
 select  
  distinct 
[dbo].[ED_STUD].[ED_STUD_ID],
[dbo].[ED_STUD].[NATIONAL_NUMBER],
[dbo].[ED_STUD].[FULL_NAME_AR],
[dbo].[ED_STUD].[CL_FULL_NAME_AR],
[dbo].[ED_STUD].[STUD_NAME_AR],
[dbo].[ED_STUD].[CL_STUD_NAME_AR],
[dbo].[ED_STUD].[FATHER_NAME_AR],
[dbo].[ED_STUD].[CL_FATHER_NAME_AR],
[dbo].[ED_STUD].[GRANDFATHER_NAME_AR],
[dbo].[ED_STUD].[CL_GRANDFATHER_NAME_AR],
[dbo].[ED_STUD].[FAMILY_NAME_AR],
[dbo].[ED_STUD].[CL_FAMILY_NAME_AR],
[dbo].[ED_STUD].[FULL_NAME_EN],
[dbo].[ED_STUD].[STUD_NAME_EN],
[dbo].[ED_STUD].[FATHER_NAME_EN],
[dbo].[ED_STUD].[GRANDFATHER_NAME_EN],
[dbo].[ED_STUD].[FAMILY_NAME_EN],
[dbo].[ED_STUD].[FATHER_PROFESSION],
[dbo].[ED_STUD].[FATHER_NATIONAL_NUMBER],
[dbo].[ED_STUD].[MOTHER_NATIONAL_NUMBER],
[dbo].[ED_STUD].[MOTHER_NAME_AR],
[dbo].[ED_STUD].[CL_MOTHER_NAME_AR],
[dbo].[ED_STUD].[MOTHER_NAME_EN],
[dbo].[ED_STUD].[GS_CODE_GENDER_ID],
[dbo].[ED_STUD].[GS_CODE_RELIGION_ID],
[dbo].[ED_STUD].[BIRTH_REG_NUMBER],
[dbo].[ED_STUD].[BIRTH_DATE],
[dbo].[ED_STUD].[GS_BIRTH_COUNTRY_NODE_ID],
[dbo].[ED_STUD].[GS_COUNTRY_INFO_ID_1],
(select CAST(isnull(count (*),0) as numeric) from ED_STUD_ABSENCE where (ED_STUD.ED_STUD_ID=ED_STUD_ABSENCE.ED_STUD_ID and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID=@EdAcadYearId
      and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID=@EdCodeSemesterId and (@EdAbsCourseId is null or  ED_STUD_ABSENCE.ED_COURSE_ID=@EdAbsCourseId))) as [GS_COUNTRY_INFO_ID_2],
[dbo].[ED_STUD].[STUD_PHOTO],
[dbo].[ED_STUD].[GS_CODE_IDENT_TYPE_ID],
[dbo].[ED_STUD].[IS_PRNT_STAFF],
[dbo].[ED_STUD].[SA_STF_MEMBER_PRNT_ID]
                      
  
 from ED_STUD inner join ED_STUD_SEMESTER on (ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
 and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId)
  left outer join ED_STUD_FACULTY on (ED_STUD_FACULTY.AS_FACULTY_INFO_ID=ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
 and ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID)
 left outer join ED_STUD_STATE on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
 left outer join ED_STUD_COURSE_REG on ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
 left outer join ED_STUD_ABSENCE on (ED_STUD.ED_STUD_ID=ED_STUD_ABSENCE.ED_STUD_ID and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID=@EdAcadYearId
 and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID=@EdCodeSemesterId)
 inner join ED_STUD_GROUP on (ED_STUD.ED_STUD_ID=ED_STUD_GROUP.ED_STUD_ID and ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_GROUP.ED_STUD_SEMESTER_ID)
 inner join SC_SCHEDULE_DTL on (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID=ED_STUD_GROUP.SC_SCHEDULE_DTL_ID)
  left outer join ED_COURSE on ED_COURSE.ED_COURSE_ID=ED_STUD_COURSE_REG.ED_COURSE_ID
  left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
 
where (@StudName is null or 
		((@Lang=2 and [dbo].[ED_STUD].FULL_NAME_EN like '%'+@StudName+'%') OR (@Lang=1 AND [dbo].[ED_STUD].FULL_NAME_AR like '%'+@StudName+'%'))
		or ED_STUD_FACULTY.STUD_FACULTY_CODE like '%'+@StudName+'%')
      and (@MinGPA is null or ED_STUD_SEMESTER.ACCUM_GPA >= @MinGPA)
      and (@MaxGPA is null or ED_STUD_SEMESTER.ACCUM_GPA <= @MaxGPA)
      and (@EntMainId is null or ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)
      and (@EdRegisterCourseId is null or ED_STUD_COURSE_REG.ED_COURSE_ID=@EdRegisterCourseId)
      and (@RegCourseCode is null or ED_COURSE.COURSE_CODE like '%'+ @RegCourseCode+'%')
      and (@EdAbsCourseId is null or  ED_STUD_ABSENCE.ED_COURSE_ID=@EdAbsCourseId)
      and (@CourseTeachId is null or ED_STUD_ABSENCE.ED_CODE_COURSE_TEACHING_ID=@CourseTeachId)
      and (@AbsenceDate is null or ED_STUD_ABSENCE.ABS_DATE=@AbsenceDate)
      and(@SaStfMemberId=0 or SC_SCHEDULE_DTL.SA_STF_MAMBER_ID=@SaStfMemberId)
	  
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ED_STUD_LANGUAGE table
-- Table Comment: جدول اللغات التي يجيدها الطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_STUD_LANGUAGE_ID],
					[GS_CODE_LANGUAGE_ID],
					[ED_STUD_ID],
					[LANGUAGE_ORDER]
				FROM
					[dbo].[ED_STUD_LANGUAGE]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_LANGUAGE table passing page index and page count parameters
-- Table Comment: جدول اللغات التي يجيدها الطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_LANGUAGE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ED_STUD_LANGUAGE_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ED_STUD_LANGUAGE_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_LANGUAGE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ED_STUD_LANGUAGE_ID], O.[GS_CODE_LANGUAGE_ID], O.[ED_STUD_ID], O.[LANGUAGE_ORDER]
				FROM
				    [dbo].[ED_STUD_LANGUAGE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ED_STUD_LANGUAGE_ID] = PageIndex.[ED_STUD_LANGUAGE_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_LANGUAGE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_LANGUAGE table
-- Table Comment: جدول اللغات التي يجيدها الطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@LanguageOrder" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        declare @MaxEdStudLanguageId numeric(9,0)
        select  @MaxEdStudLanguageId =max(ED_STUD_LANGUAGE_ID)from ED_STUD_LANGUAGE;
         if( @MaxEdStudLanguageId is null)
            set  @MaxEdStudLanguageId=0;
            
          set  @MaxEdStudLanguageId= @MaxEdStudLanguageId+1;  
        
				INSERT INTO [dbo].[ED_STUD_LANGUAGE]
					(
					[ED_STUD_LANGUAGE_ID]
					,[GS_CODE_LANGUAGE_ID]
					,[ED_STUD_ID]
					,[LANGUAGE_ORDER]
					)
				VALUES
					(
					@MaxEdStudLanguageId
					,@GsCodeLanguageId
					,@EdStudId
					,@LanguageOrder
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_LANGUAGE table
-- Table Comment: جدول اللغات التي يجيدها الطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdStudLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@LanguageOrder" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_LANGUAGE]
				SET
					[GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId
					,[ED_STUD_ID] = @EdStudId
					,[LANGUAGE_ORDER] = @LanguageOrder
				WHERE
[ED_STUD_LANGUAGE_ID] = @EdStudLanguageId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_STUD_LANGUAGE table
-- Table Comment: جدول اللغات التي يجيدها الطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_STUD_LANGUAGE] WITH (ROWLOCK) 
				WHERE
					[ED_STUD_LANGUAGE_ID] = @EdStudLanguageId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_GetByGsCodeLanguageId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_LANGUAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_STUD_LANGUAGE_ID],
					[GS_CODE_LANGUAGE_ID],
					[ED_STUD_ID],
					[LANGUAGE_ORDER]
				FROM
					[dbo].[ED_STUD_LANGUAGE]
				WHERE
					[GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_GetByEdStudId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_LANGUAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_STUD_LANGUAGE_ID],
					[dbo].[ED_STUD_LANGUAGE].[GS_CODE_LANGUAGE_ID],
					[ED_STUD_ID],
					[LANGUAGE_ORDER],
          GS_CODE_LANGUAGE.LANG_CODE,
          GS_CODE_LANGUAGE.DESCR_AR,
          GS_CODE_LANGUAGE.DESCR_EN

				FROM
					[dbo].[ED_STUD_LANGUAGE] left outer join GS_CODE_LANGUAGE 
          on [dbo].[ED_STUD_LANGUAGE].GS_CODE_LANGUAGE_ID=GS_CODE_LANGUAGE.GS_CODE_LANGUAGE_ID
				WHERE
					[ED_STUD_ID] = @EdStudId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_GetByEdStudLanguageId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_LANGUAGE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_STUD_LANGUAGE_ID],
					[dbo].[ED_STUD_LANGUAGE].[GS_CODE_LANGUAGE_ID],
					[ED_STUD_ID],
					[LANGUAGE_ORDER],
          GS_CODE_LANGUAGE.LANG_CODE as LANG_CODE,
          GS_CODE_LANGUAGE.DESCR_AR as DESCR_AR,
          GS_CODE_LANGUAGE.DESCR_EN as DESCR_EN

				FROM
					[dbo].[ED_STUD_LANGUAGE] left outer join GS_CODE_LANGUAGE 
          on [dbo].[ED_STUD_LANGUAGE].GS_CODE_LANGUAGE_ID=GS_CODE_LANGUAGE.GS_CODE_LANGUAGE_ID
				WHERE
					[ED_STUD_LANGUAGE_ID] = @EdStudLanguageId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_LANGUAGE table passing nullable parameters
-- Table Comment: جدول اللغات التي يجيدها الطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdStudLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@LanguageOrder" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
   	SELECT
					[ED_STUD_LANGUAGE_ID],
					[dbo].[ED_STUD_LANGUAGE].[GS_CODE_LANGUAGE_ID],
					[ED_STUD_ID],
					[LANGUAGE_ORDER],
          GS_CODE_LANGUAGE.LANG_CODE as LANG_CODE,
          GS_CODE_LANGUAGE.DESCR_AR as DESCR_AR,
          GS_CODE_LANGUAGE.DESCR_EN as DESCR_EN

				FROM
					[dbo].[ED_STUD_LANGUAGE] left outer join GS_CODE_LANGUAGE 
          on [dbo].[ED_STUD_LANGUAGE].GS_CODE_LANGUAGE_ID=GS_CODE_LANGUAGE.GS_CODE_LANGUAGE_ID
    WHERE 
	 ([ED_STUD_LANGUAGE_ID] = @EdStudLanguageId OR @EdStudLanguageId IS NULL)
	AND ([dbo].[ED_STUD_LANGUAGE].[GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId OR @GsCodeLanguageId IS NULL)
	AND ([ED_STUD_ID] = @EdStudId OR @EdStudId IS NULL)
	AND ([LANGUAGE_ORDER] = @LanguageOrder OR @LanguageOrder IS NULL)
						
  END
  ELSE
  BEGIN
   	SELECT
					[ED_STUD_LANGUAGE_ID],
					[dbo].[ED_STUD_LANGUAGE].[GS_CODE_LANGUAGE_ID],
					[ED_STUD_ID],
					[LANGUAGE_ORDER],
          GS_CODE_LANGUAGE.LANG_CODE as LANG_CODE,
          GS_CODE_LANGUAGE.DESCR_AR as DESCR_AR,
          GS_CODE_LANGUAGE.DESCR_EN as DESCR_EN

				FROM
					[dbo].[ED_STUD_LANGUAGE] left outer join GS_CODE_LANGUAGE 
          on [dbo].[ED_STUD_LANGUAGE].GS_CODE_LANGUAGE_ID=GS_CODE_LANGUAGE.GS_CODE_LANGUAGE_ID
    WHERE 
	 ([ED_STUD_LANGUAGE_ID] = @EdStudLanguageId AND @EdStudLanguageId is not null)
	OR ([dbo].[ED_STUD_LANGUAGE].[GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId AND @GsCodeLanguageId is not null)
	OR ([ED_STUD_ID] = @EdStudId AND @EdStudId is not null)
	OR ([LANGUAGE_ORDER] = @LanguageOrder AND @LanguageOrder is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_LANGUAGE_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_LANGUAGE table using a dynamically generated query.
-- Table Comment: جدول اللغات التي يجيدها الطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_LANGUAGE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ED_STUD_LANGUAGE_ID] )
				SELECT TOP {3} [ED_STUD_LANGUAGE_ID]
				FROM [dbo].[ED_STUD_LANGUAGE] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ED_STUD_LANGUAGE_ID], O.[GS_CODE_LANGUAGE_ID], O.[ED_STUD_ID], O.[LANGUAGE_ORDER]
				FROM
				    [dbo].[ED_STUD_LANGUAGE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ED_STUD_LANGUAGE_ID] = PageIndex.[ED_STUD_LANGUAGE_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_STUD_LANGUAGE] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="POLICY_ASSESS_HDR_GET_BYCOURSE">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ASSESS_HDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
      
      declare @NODE_PATH nvarchar(90)
      SELECT @NODE_PATH=NODE_PATH FROM ENTITY_MAIN WHERE 
        ENT_MAIN_ID=@EntMainId
      
				if exists
            (
                    SELECT
                    [dbo].[ENT_POLICY_ASSESS_HDR].[ENT_POLICY_ASSESS_HDR_ID]
                  , [dbo].[ENT_POLICY_ASSESS_HDR].[DESCR_AR]
                  , [dbo].[ENT_POLICY_ASSESS_HDR].[DESCR_EN]
                  , [dbo].[ENT_POLICY_ASSESS_HDR].[ENT_MAIN_ID]
                  , [dbo].[ENT_POLICY_ASSESS_HDR].[ED_STUDY_METHOD_ID]
                  , [dbo].[ENT_POLICY_ASSESS_HDR].[IS_GENERAL]
                  , [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MAX_DEG
                  , [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MIN_DEG
                    FROM
                  [dbo].[ENT_POLICY_ASSESS_HDR] inner join ENT_POLICY_ASSESS_COURSE on ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID=
                  [dbo].[ENT_POLICY_ASSESS_HDR].ENT_POLICY_ASSESS_HDR_ID
                    WHERE 
                   (ENT_POLICY_ASSESS_COURSE.[ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
               AND (ENT_POLICY_ASSESS_COURSE.[ENT_COURSE_PKG_HDR_ID] = @EntCoursePkgHdrId OR @EntCoursePkgHdrId IS NULL)
               AND ([dbo].[ENT_POLICY_ASSESS_HDR].[ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
            )
               BEGIN
                       SELECT
                        [dbo].[ENT_POLICY_ASSESS_HDR].[ENT_POLICY_ASSESS_HDR_ID]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[DESCR_AR]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[DESCR_EN]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[ENT_MAIN_ID]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[ED_STUDY_METHOD_ID]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[IS_GENERAL]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MAX_DEG
                      , [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MIN_DEG
                        FROM
                      [dbo].[ENT_POLICY_ASSESS_HDR] inner join ENT_POLICY_ASSESS_COURSE on ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID=
                      [dbo].[ENT_POLICY_ASSESS_HDR].ENT_POLICY_ASSESS_HDR_ID
                        WHERE 
                       (ENT_POLICY_ASSESS_COURSE.[ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
                   AND (ENT_POLICY_ASSESS_COURSE.[ENT_COURSE_PKG_HDR_ID] = @EntCoursePkgHdrId OR @EntCoursePkgHdrId IS NULL)
                   AND ([dbo].[ENT_POLICY_ASSESS_HDR].[ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
               END
               
       ELSE
               BEGIN
                      SELECT TOP 1
                        [dbo].[ENT_POLICY_ASSESS_HDR].[ENT_POLICY_ASSESS_HDR_ID]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[DESCR_AR]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[DESCR_EN]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[ENT_MAIN_ID]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[ED_STUDY_METHOD_ID]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].[IS_GENERAL]
                      , [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MAX_DEG
                      , [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MIN_DEG
                        FROM
                      [dbo].[ENT_POLICY_ASSESS_HDR] 
                      INNER JOIN ENTITY_MAIN ON ENTITY_MAIN.ENT_MAIN_ID= [dbo].[ENT_POLICY_ASSESS_HDR].ENT_MAIN_ID
                        WHERE 
                           [dbo].[ENT_POLICY_ASSESS_HDR].IS_GENERAL=1
                           AND @NODE_PATH LIKE ENTITY_MAIN.NODE_PATH +'%'
                           ORDER BY ENTITY_MAIN.NODE_PATH DESC
               END

				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="PolicyAssess_byStudSem_Course">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ASSESS_HDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
            If exists
                (    
                      SELECT        ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID, 
                                    ENT_POLICY_ASSESS_HDR.DESCR_AR, 
                                    ENT_POLICY_ASSESS_HDR.DESCR_EN, 
                                    ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID, 
                                    ENT_POLICY_ASSESS_HDR.ED_STUDY_METHOD_ID,
                                    ENT_POLICY_ASSESS_HDR.IS_GENERAL, 
                                    ENT_POLICY_ASSESS_HDR.ED_BYLAW_ID,
                                    ENT_POLICY_ASSESS_HDR.COURSE_MAX_DEG,
                                    ENT_POLICY_ASSESS_HDR.COURSE_MIN_DEG
                      FROM       ENT_POLICY_ASSESS_COURSE INNER JOIN
                                    ENT_POLICY_ASSESS_HDR INNER JOIN
                                    ED_STUD_STATE INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                    ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID = ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID
                       WHERE        (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND
                                    (ENT_POLICY_ASSESS_COURSE.ED_COURSE_ID = @EdCourseId)
                )
                Begin
                    SELECT        ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID, 
                                    ENT_POLICY_ASSESS_HDR.DESCR_AR, 
                                    ENT_POLICY_ASSESS_HDR.DESCR_EN, 
                                    ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID, 
                                    ENT_POLICY_ASSESS_HDR.ED_STUDY_METHOD_ID,
                                    ENT_POLICY_ASSESS_HDR.IS_GENERAL, 
                                    ENT_POLICY_ASSESS_HDR.ED_BYLAW_ID,
                                    ENT_POLICY_ASSESS_HDR.COURSE_MAX_DEG,
                                    ENT_POLICY_ASSESS_HDR.COURSE_MIN_DEG
                      FROM       ENT_POLICY_ASSESS_COURSE INNER JOIN
                                    ENT_POLICY_ASSESS_HDR INNER JOIN
                                    ED_STUD_STATE INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                    ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID = ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID
                       WHERE        (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND
                                    (ENT_POLICY_ASSESS_COURSE.ED_COURSE_ID = @EdCourseId)
              End
              
         Else
              Begin
                      declare @AsFacultyInfoId numeric
                      select @AsFacultyInfoId=AS_FACULTY_INFO_ID from ED_STUD_SEMESTER where 
                              ED_STUD_SEMESTER_ID=@EdStudSemesterId;
                              
                       if exists( select 'a'    FROM     ENT_POLICY_ASSESS_COURSE INNER JOIN
                                     ENT_POLICY_ASSESS_HDR INNER JOIN
                                     ENTITY_MAIN ON ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                     ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID = ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID
                                  WHERE     (ENT_POLICY_ASSESS_COURSE.ED_COURSE_ID = @EdCourseId) AND 
                                             (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or ENTITY_MAIN.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId is null)
                       
                              )
                       
                             Begin
                                      SELECT        ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID, 
                                                     ENT_POLICY_ASSESS_HDR.DESCR_AR, 
                                                     ENT_POLICY_ASSESS_HDR.DESCR_EN, 
                                                     ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID, 
                                                     ENT_POLICY_ASSESS_HDR.ED_STUDY_METHOD_ID,
                                                     ENT_POLICY_ASSESS_HDR.IS_GENERAL, 
                                                     ENT_POLICY_ASSESS_HDR.ED_BYLAW_ID,
                                                     ENT_POLICY_ASSESS_HDR.COURSE_MAX_DEG,
                                                     ENT_POLICY_ASSESS_HDR.COURSE_MIN_DEG
                                      
                                      FROM     ENT_POLICY_ASSESS_COURSE INNER JOIN
                                               ENT_POLICY_ASSESS_HDR INNER JOIN
                                               ENTITY_MAIN ON ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                               ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID = ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID
                                               
                                       WHERE     (ENT_POLICY_ASSESS_COURSE.ED_COURSE_ID = @EdCourseId) AND 
                                                       (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or ENTITY_MAIN.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId is null)
                                               
                                      
                                                
                              END
                        Else
                            Begin
                                 
                                -- check for assess on faculity else get university
                                 IF EXISTS (
                                 SELECT  'a' FROM ENT_POLICY_ASSESS_HDR INNER JOIN
                                               ENTITY_MAIN ON ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID 
                                      WHERE (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or @AsFacultyInfoId is null)AND
                                            (ENT_POLICY_ASSESS_HDR.IS_GENERAL=1)
                                 )
                                 BEGIN
								 
									SELECT        ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID, 
                                                     ENT_POLICY_ASSESS_HDR.DESCR_AR, 
                                                     ENT_POLICY_ASSESS_HDR.DESCR_EN, 
                                                     ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID, 
                                                     ENT_POLICY_ASSESS_HDR.ED_STUDY_METHOD_ID,
                                                     ENT_POLICY_ASSESS_HDR.IS_GENERAL, 
                                                     ENT_POLICY_ASSESS_HDR.ED_BYLAW_ID,
                                                     ENT_POLICY_ASSESS_HDR.COURSE_MAX_DEG,
                                                     ENT_POLICY_ASSESS_HDR.COURSE_MIN_DEG
                                      
                                      FROM    
                                               ENT_POLICY_ASSESS_HDR INNER JOIN
                                               ENTITY_MAIN ON ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID 
                                               
                                      WHERE      
                                            (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or @AsFacultyInfoId is null)AND
                                            (ENT_POLICY_ASSESS_HDR.IS_GENERAL=1)
                                 	
								 END
								 ELSE
								 BEGIN
								 	
								 	DECLARE @entMainId NUMERIC;
								 	SELECT @entMainId = ent_main_id FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID = 1;
								 	
								 	SELECT        ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID, 
                                                     ENT_POLICY_ASSESS_HDR.DESCR_AR, 
                                                     ENT_POLICY_ASSESS_HDR.DESCR_EN, 
                                                     ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID, 
                                                     ENT_POLICY_ASSESS_HDR.ED_STUDY_METHOD_ID,
                                                     ENT_POLICY_ASSESS_HDR.IS_GENERAL, 
                                                     ENT_POLICY_ASSESS_HDR.ED_BYLAW_ID,
                                                     ENT_POLICY_ASSESS_HDR.COURSE_MAX_DEG,
                                                     ENT_POLICY_ASSESS_HDR.COURSE_MIN_DEG
                                      
                                      FROM    
                                               ENT_POLICY_ASSESS_HDR INNER JOIN
                                               ENTITY_MAIN ON ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID 
                                               
                                      WHERE      
                                            (ENTITY_MAIN.ENT_MAIN_ID = @entMainId)AND
                                            (ENT_POLICY_ASSESS_HDR.IS_GENERAL=1)
								 	
								 END
                                            
                            End
              End
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="PolicyAssess_bySem_Course_acad">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ASSESS_HDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
             
                          
                  SELECT         DISTINCT ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID, 
                                 ENT_POLICY_ASSESS_HDR.DESCR_AR, 
                                 ENT_POLICY_ASSESS_HDR.DESCR_EN, 
                                 ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID, 
                                 ENT_POLICY_ASSESS_HDR.ED_STUDY_METHOD_ID,
                                 ENT_POLICY_ASSESS_HDR.IS_GENERAL, 
                                 ENT_POLICY_ASSESS_HDR.ED_BYLAW_ID,
                                 ENT_POLICY_ASSESS_HDR.COURSE_MAX_DEG,
                                 ENT_POLICY_ASSESS_HDR.COURSE_MIN_DEG
                  
                  FROM   
                           ENT_POLICY_ASSESS_HDR INNER JOIN
                           ED_STUD_COURSE_REG ON ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID =
                           ED_STUD_COURSE_REG.ENT_POLICY_ASSESS_HDR_ID 
                           INNER JOIN ED_STUD_SEMESTER ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=
                           ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
                            inner join entity_main on entity_main.ent_main_id=ENT_POLICY_ASSESS_HDR.ent_main_id
                           
                  WHERE     (ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId) AND 
                            (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @AcadYearId) AND
                            (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID =@EdCodeSemesterId)
                            -- emohamed comment this code to show ent policy assess of registered course
                            --AND ((@AsFacultyInfoId=0 and entity_main.AS_FACULTY_INFO_ID is null)or entity_main.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
                            
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_TEACHING_GetByEdCodeSubjectTeachingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_TEACHING table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSubjectTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					*
				FROM
					[dbo].[ED_CODE_COURSE_TEACHING]
				WHERE
					[ED_CODE_COURSE_TEACHING_ID] = @EdCodeSubjectTeachingId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Get_List" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_ASSESS table passing page index and page count parameters
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_SUBJECT_ASSESS_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_SUBJECT_ASSESS_ID]'
				SET @SQL = @SQL + ', [ED_CODE_SUBJECT_ASSESS_ID]'
				SET @SQL = @SQL + ', [ED_COURSE_ID]'
				SET @SQL = @SQL + ', [MAX_GRADE]'
				SET @SQL = @SQL + ', [MIN_GRADE]'
				SET @SQL = @SQL + ', [MIN_RATE]'
				SET @SQL = @SQL + ', [MAX_RATE]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_ASSESS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_SUBJECT_ASSESS_ID],'
				SET @SQL = @SQL + ' [ED_CODE_SUBJECT_ASSESS_ID],'
				SET @SQL = @SQL + ' [ED_COURSE_ID],'
				SET @SQL = @SQL + ' [MAX_GRADE],'
				SET @SQL = @SQL + ' [MIN_GRADE],'
				SET @SQL = @SQL + ' [MIN_RATE],'
				SET @SQL = @SQL + ' [MAX_RATE]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_ASSESS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@MaxGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_COURSE_ASSESS]
					(
					[ED_SUBJECT_ASSESS_ID]
					,[ED_CODE_SUBJECT_ASSESS_ID]
					,[ED_COURSE_ID]
					,[MAX_GRADE]
					,[MIN_GRADE]
					,[MIN_RATE]
					,[MAX_RATE]
					)
				VALUES
					(
					@EdSubjectAssessId
					,@EdCodeSubjectAssessId
					,@EdCourseId
					,@MaxGrade
					,@MinGrade
					,@MinRate
					,@MaxRate
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@MaxGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_COURSE_ASSESS]
				SET
					[ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId
					,[ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId
					,[ED_COURSE_ID] = @EdCourseId
					,[MAX_GRADE] = @MaxGrade
					,[MIN_GRADE] = @MinGrade
					,[MIN_RATE] = @MinRate
					,[MAX_RATE] = @MaxRate
				WHERE
[ED_SUBJECT_ASSESS_ID] = @OriginalEdSubjectAssessId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_COURSE_ASSESS table
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_COURSE_ASSESS] WITH (ROWLOCK) 
				WHERE
					[ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_COURSE_ID] = @EdCourseId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdCodeSubjectAssessId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdCodeSubjectAssessIdEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId
					AND [ED_COURSE_ID] = @EdCourseId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_GetByEdSubjectAssessId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_ASSESS table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_SUBJECT_ASSESS_ID],
					[ED_CODE_SUBJECT_ASSESS_ID],
					[ED_COURSE_ID],
					[MAX_GRADE],
					[MIN_GRADE],
					[MIN_RATE],
					[MAX_RATE]
				FROM
					[dbo].[ED_COURSE_ASSESS]
				WHERE
					[ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE_ASSESS table passing nullable parameters
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdSubjectAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSubjectAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@MaxGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
        <parameter name="@MinGrade" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
        <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
        <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_SUBJECT_ASSESS_ID]
	, [ED_CODE_SUBJECT_ASSESS_ID]
	, [ED_COURSE_ID]
	, [MAX_GRADE]
	, [MIN_GRADE]
	, [MIN_RATE]
	, [MAX_RATE]
    FROM
	[dbo].[ED_COURSE_ASSESS]
    WHERE 
	 ([ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId OR @EdSubjectAssessId IS NULL)
	AND ([ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId OR @EdCodeSubjectAssessId IS NULL)
	AND ([ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
	AND ([MAX_GRADE] = @MaxGrade OR @MaxGrade IS NULL)
	AND ([MIN_GRADE] = @MinGrade OR @MinGrade IS NULL)
	AND ([MIN_RATE] = @MinRate OR @MinRate IS NULL)
	AND ([MAX_RATE] = @MaxRate OR @MaxRate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_SUBJECT_ASSESS_ID]
	, [ED_CODE_SUBJECT_ASSESS_ID]
	, [ED_COURSE_ID]
	, [MAX_GRADE]
	, [MIN_GRADE]
	, [MIN_RATE]
	, [MAX_RATE]
    FROM
	[dbo].[ED_COURSE_ASSESS]
    WHERE 
	 ([ED_SUBJECT_ASSESS_ID] = @EdSubjectAssessId AND @EdSubjectAssessId is not null)
	OR ([ED_CODE_SUBJECT_ASSESS_ID] = @EdCodeSubjectAssessId AND @EdCodeSubjectAssessId is not null)
	OR ([ED_COURSE_ID] = @EdCourseId AND @EdCourseId is not null)
	OR ([MAX_GRADE] = @MaxGrade AND @MaxGrade is not null)
	OR ([MIN_GRADE] = @MinGrade AND @MinGrade is not null)
	OR ([MIN_RATE] = @MinRate AND @MinRate is not null)
	OR ([MAX_RATE] = @MaxRate AND @MaxRate is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_ASSESS_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_ASSESS table using a dynamically generated query.
-- Table Comment: جدول بيانات طرق تقييم مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ED_SUBJECT_ASSESS_ID]
					, [ED_CODE_SUBJECT_ASSESS_ID]
					, [ED_COURSE_ID]
					, [MAX_GRADE]
					, [MIN_GRADE]
					, [MIN_RATE]
					, [MAX_RATE]
					FROM [dbo].[ED_COURSE_ASSESS] {0}
				)
				SELECT
				       [ED_SUBJECT_ASSESS_ID],
				       [ED_CODE_SUBJECT_ASSESS_ID],
				       [ED_COURSE_ID],
				       [MAX_GRADE],
				       [MIN_GRADE],
				       [MIN_RATE],
				       [MAX_RATE]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_COURSE_ASSESS] {0};
				
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_COURSE_TEACHING table
-- Table Comment: جدول بيانات طرق تدريس مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_COURSE_TEACHING_ID],
					[ED_COURSE_ID],
					[ED_CODE_COURSE_TEACHING_ID],
					[GROUP_OR_SECTION_FLAG]
				FROM
					[dbo].[ED_COURSE_TEACHING]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_TEACHING table passing page index and page count parameters
-- Table Comment: جدول بيانات طرق تدريس مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_COURSE_TEACHING_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_COURSE_TEACHING_ID]'
				SET @SQL = @SQL + ', [ED_COURSE_ID]'
				SET @SQL = @SQL + ', [ED_CODE_COURSE_TEACHING_ID]'
				SET @SQL = @SQL + ', [GROUP_OR_SECTION_FLAG]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_TEACHING]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_COURSE_TEACHING_ID],'
				SET @SQL = @SQL + ' [ED_COURSE_ID],'
				SET @SQL = @SQL + ' [ED_CODE_COURSE_TEACHING_ID],'
				SET @SQL = @SQL + ' [GROUP_OR_SECTION_FLAG]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE_TEACHING]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE_TEACHING table
-- Table Comment: جدول بيانات طرق تدريس مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseTeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@GroupOrSectionFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				INSERT INTO [dbo].[ED_COURSE_TEACHING]
					(
					[ED_COURSE_TEACHING_ID]
					,[ED_COURSE_ID]
					,[ED_CODE_COURSE_TEACHING_ID]
					,[GROUP_OR_SECTION_FLAG]
					)
				VALUES
					(
					@EdCourseTeachingId
					,@EdCourseId
					,@EdCodeCourseTeachingId
					,@GroupOrSectionFlag
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_COURSE_TEACHING table
-- Table Comment: جدول بيانات طرق تدريس مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseTeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@OriginalEdCourseTeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@GroupOrSectionFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_COURSE_TEACHING]
				SET
					[ED_COURSE_TEACHING_ID] = @EdCourseTeachingId
					,[ED_COURSE_ID] = @EdCourseId
					,[ED_CODE_COURSE_TEACHING_ID] = @EdCodeCourseTeachingId
					,[GROUP_OR_SECTION_FLAG] = @GroupOrSectionFlag
				WHERE
[ED_COURSE_TEACHING_ID] = @OriginalEdCourseTeachingId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_COURSE_TEACHING table
-- Table Comment: جدول بيانات طرق تدريس مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseTeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ED_COURSE_TEACHING] WITH (ROWLOCK) 
				WHERE
					[ED_COURSE_TEACHING_ID] = @EdCourseTeachingId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_GetByEdCodeCourseTeachingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_TEACHING table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_COURSE_TEACHING_ID],
					[ED_COURSE_ID],
					[ED_CODE_COURSE_TEACHING_ID],
					[GROUP_OR_SECTION_FLAG]
				FROM
					[dbo].[ED_COURSE_TEACHING]
				WHERE
					[ED_CODE_COURSE_TEACHING_ID] = @EdCodeCourseTeachingId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_GetByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_TEACHING table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_COURSE_TEACHING_ID],
					[ED_COURSE_ID],
					[ED_CODE_COURSE_TEACHING_ID],
					[GROUP_OR_SECTION_FLAG]
				FROM
					[dbo].[ED_COURSE_TEACHING]
				WHERE
					[ED_COURSE_ID] = @EdCourseId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_GetByEdCourseIdEdCodeCourseTeachingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_TEACHING table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_COURSE_TEACHING_ID],
					[ED_COURSE_ID],
					[ED_CODE_COURSE_TEACHING_ID],
					[GROUP_OR_SECTION_FLAG]
				FROM
					[dbo].[ED_COURSE_TEACHING]
				WHERE
					[ED_COURSE_ID] = @EdCourseId
					AND [ED_CODE_COURSE_TEACHING_ID] = @EdCodeCourseTeachingId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_GetByEdCourseTeachingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_TEACHING table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseTeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_COURSE_TEACHING_ID],
					[ED_COURSE_ID],
					[ED_CODE_COURSE_TEACHING_ID],
					[GROUP_OR_SECTION_FLAG]
				FROM
					[dbo].[ED_COURSE_TEACHING]
				WHERE
					[ED_COURSE_TEACHING_ID] = @EdCourseTeachingId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ED_COURSE_TEACHING table passing nullable parameters
-- Table Comment: جدول بيانات طرق تدريس مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdCourseTeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@GroupOrSectionFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_COURSE_TEACHING_ID]
	, [ED_COURSE_ID]
	, [ED_CODE_COURSE_TEACHING_ID]
	, [GROUP_OR_SECTION_FLAG]
    FROM
	[dbo].[ED_COURSE_TEACHING]
    WHERE 
	 ([ED_COURSE_TEACHING_ID] = @EdCourseTeachingId OR @EdCourseTeachingId IS NULL)
	AND ([ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
	AND ([ED_CODE_COURSE_TEACHING_ID] = @EdCodeCourseTeachingId OR @EdCodeCourseTeachingId IS NULL)
	AND ([GROUP_OR_SECTION_FLAG] = @GroupOrSectionFlag OR @GroupOrSectionFlag IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_COURSE_TEACHING_ID]
	, [ED_COURSE_ID]
	, [ED_CODE_COURSE_TEACHING_ID]
	, [GROUP_OR_SECTION_FLAG]
    FROM
	[dbo].[ED_COURSE_TEACHING]
    WHERE 
	 ([ED_COURSE_TEACHING_ID] = @EdCourseTeachingId AND @EdCourseTeachingId is not null)
	OR ([ED_COURSE_ID] = @EdCourseId AND @EdCourseId is not null)
	OR ([ED_CODE_COURSE_TEACHING_ID] = @EdCodeCourseTeachingId AND @EdCodeCourseTeachingId is not null)
	OR ([GROUP_OR_SECTION_FLAG] = @GroupOrSectionFlag AND @GroupOrSectionFlag is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TEACHING_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE_TEACHING table using a dynamically generated query.
-- Table Comment: جدول بيانات طرق تدريس مادة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ED_COURSE_TEACHING_ID]
					, [ED_COURSE_ID]
					, [ED_CODE_COURSE_TEACHING_ID]
					, [GROUP_OR_SECTION_FLAG]
					FROM [dbo].[ED_COURSE_TEACHING] {0}
				)
				SELECT
				       [ED_COURSE_TEACHING_ID],
				       [ED_COURSE_ID],
				       [ED_CODE_COURSE_TEACHING_ID],
				       [GROUP_OR_SECTION_FLAG]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_COURSE_TEACHING] {0};
				
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudentTotalDisc" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Table Comment: filter characters for search
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoID" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdStudID" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <!--<parameter name="@EdCodeSemId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>-->
      </parameters>
      <body>
        <![CDATA[	
              
              select isnull(sum (UPDATED_PERCENT),0)
              
              from FEE_STUD_DISC

              where AS_FACULTY_INFO_ID=@AsFacultyInfoID
              and ED_STUD_ID=@EdStudID
              and (@EdAcadYearID is null or @EdAcadYearID=0 or ED_ACAD_YEAR_ID=@EdAcadYearID)
              and GS_CODE_REQ_STATUS_ID=2--accepted
              and STOP_FLG!=1

    
        ]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GenerateStudCode" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Table Comment: filter characters for search
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[	

        declare @BuildStudCode numeric(1, 0)
          select @BuildStudCode=BUILD_STUD_CODE
          from SYSTEM_PARAM

          declare @EdAcadCode nvarchar(30)
          select @EdAcadCode=ED_ACAD_YEAR.YEAR_CODE
          from ED_ACAD_YEAR
          where ED_ACAD_YEAR.ED_ACAD_YEAR_ID=@EdAcadYearId

          declare @EntityPath nvarchar(90)
          declare @StateNotation nvarchar(20)
          declare @StateNotationFac nvarchar(20)

             declare @Temp_Student_Code   varchar(30)
 if(@BuildStudCode=1)--univacad
          begin
          if not exists (select *

          from ED_STUD_STATE inner join ED_STUD_SEMESTER on
          ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
          inner join ED_STUD on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
          inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
          and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
          inner join ENTITY_MAIN on ED_STUD_STATE.ENT_MAIN_ID =ENTITY_MAIN.ENT_MAIN_ID

          where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
          and ED_STUD_STATE.IS_DECLARED=1
          and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID>=1--univ or next
          )
          begin
           RAISERROR('ERR_NO_STATES_FOUND',16,-1)
           RETURN 
          end
          else
          begin

            select top 1 @EntityPath=ENTITY_MAIN.NODE_PATH

          from ED_STUD_STATE inner join ED_STUD_SEMESTER on
          ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
          inner join ED_STUD on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
          inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
          and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
          inner join ENTITY_MAIN on ED_STUD_STATE.ENT_MAIN_ID =ENTITY_MAIN.ENT_MAIN_ID

          where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
          and ED_STUD_STATE.IS_DECLARED=1
          and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID >= 1--univ or next
            
            select  @StateNotation=ENTITY_MAIN.STATE_NOTATION
            from ENTITY_MAIN
            where @EntityPath like ENTITY_MAIN.NODE_PATH+'%'
            and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=1
            

            select @Temp_Student_Code =max(isnull(substring(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE,(len(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE)-4),5),0))

			FROM         ED_STUD INNER JOIN
						 ED_STUD_FACULTY ON 
			ED_STUD_FACULTY.AS_FACULTY_INFO_ID =@AsFacultyInfoId and ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID 
   
            
             if(@Temp_Student_Code is null)
			   begin
				   set @Temp_Student_Code='00001';
			   end
				else
				 begin
         		if( SUBSTRING(@Temp_Student_Code,1,2) = 'e+')
				 set @Temp_Student_Code = SUBSTRING(@Temp_Student_Code,3,3);
					 set @Temp_Student_Code=convert(numeric(5,0), @Temp_Student_Code)+1;
					if(len (@Temp_Student_Code)<5)
					 begin
					  set @Temp_Student_Code= REPLICATE(0,5-len (@Temp_Student_Code))+@Temp_Student_Code
					 end  
				 end
           
            update ED_STUD_FACULTY
            set
              [STUD_FACULTY_CODE] =@StateNotation+@EdAcadCode+@Temp_Student_Code
            where
              ED_STUD_ID=@EdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId
            
            --update SE_USER
            --set PASSWORD=@StateNotation+@EdAcadCode+@Temp_Student_Code
            --where SE_USER_TYPE_ID=2 and ED_STUD_ID=@EdStudId
            
            select @StateNotation+@EdAcadCode+@Temp_Student_Code
            
          end
          end


          else--univfacacad
          begin
          
			  if(@BuildStudCode=2)--univfacacad
			  begin
			  if not exists (select *

			  from ED_STUD_STATE inner join ED_STUD_SEMESTER on
			  ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
			  inner join ED_STUD on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
			  inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
			  and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
			  inner join ENTITY_MAIN on ED_STUD_STATE.ENT_MAIN_ID =ENTITY_MAIN.ENT_MAIN_ID

			  where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
			  and ED_STUD_STATE.IS_DECLARED=1
			  and (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=2 or ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=14)--fac or program
			  )
			  begin
				RAISERROR('ERR_NO_STATES_FOUND',16,-1)
				RETURN 
			  end
			  else
			  begin
			  declare @StudSerial numeric(9,0)
				select top 1 @EntityPath=ENTITY_MAIN.NODE_PATH

			  from ED_STUD_STATE inner join ED_STUD_SEMESTER on
			  ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
			  inner join ED_STUD on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
			  inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
			  and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
			  inner join ENTITY_MAIN on ED_STUD_STATE.ENT_MAIN_ID =ENTITY_MAIN.ENT_MAIN_ID

			  where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
			  and ED_STUD_STATE.IS_DECLARED=1
			  and (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=2 or ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=14)--fac or program
	            
				select  @StateNotation=ENTITY_MAIN.STATE_NOTATION
				from ENTITY_MAIN
				where @EntityPath like ENTITY_MAIN.NODE_PATH+'%'
				and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=1--univ
	            
				select  @StateNotationFac=ENTITY_MAIN.STATE_NOTATION
				from ENTITY_MAIN
				where @EntityPath like ENTITY_MAIN.NODE_PATH+'%'
				and (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=2 or ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=14)--fac or program


				select @Temp_Student_Code =max(isnull(substring(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE,(len(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE)-4),5),0))

				FROM         ED_STUD INNER JOIN
							 ED_STUD_FACULTY ON 
				ED_STUD_FACULTY.AS_FACULTY_INFO_ID =@AsFacultyInfoId and ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID 
	   
	            
				 if(@Temp_Student_Code is null)
				   begin
					   set @Temp_Student_Code='00001';
				   end
					else
					 begin
			 if( SUBSTRING(@Temp_Student_Code,1,2) = 'e+')
					 set @Temp_Student_Code = SUBSTRING(@Temp_Student_Code,3,3);
						 set @Temp_Student_Code=convert(numeric(5,0), @Temp_Student_Code)+1;
						if(len (@Temp_Student_Code)<5)
						 begin
						  set @Temp_Student_Code= REPLICATE(0,5-len (@Temp_Student_Code))+@Temp_Student_Code
						 end  
					 end
					 
				update ED_STUD_FACULTY
				set
				  [STUD_FACULTY_CODE] =@StateNotation+@StateNotationFac+@EdAcadCode+@Temp_Student_Code
				where
				  ED_STUD_ID=@EdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId
	                    
				--update SE_USER
				--set PASSWORD=@StateNotation+@StateNotationFac+@EdAcadCode+@Temp_Student_Code
				--where SE_USER_TYPE_ID=2 and ED_STUD_ID=@EdStudId
						
				select @StateNotation+@StateNotationFac+@EdAcadCode+@Temp_Student_Code

			  end
			  end
			  else
			  begin
			  
				Declare @v_Serial_Count int =4,
				@New_Code nvarchar(4),
				@Stud_Code nvarchar(8),
				@v_Stud_Enroll_AcadYear varchar(4) --=2012
				;

				--@v_Stud_Enroll_AcadYear
				select @v_Stud_Enroll_AcadYear=ED_ACAD_YEAR.YEAR_CODE from ED_ACAD_YEAR where ED_ACAD_YEAR.ED_ACAD_YEAR_ID = @EdAcadYearId;

				select  @New_Code=convert(nvarchar,max(right(STUD_FACULTY_CODE,@v_Serial_Count))+1)
				From ed_stud_faculty 
			where ISNUMERIC(right(STUD_FACULTY_CODE,@v_Serial_Count))=1
			AND LEN(right(STUD_FACULTY_CODE,@v_Serial_Count))>=@v_Serial_Count;

				if @New_Code is null 
				set @New_Code='0001'
							
              if(len(@New_Code)=1)
				set @New_Code = '000'+@New_Code;
				else if(len(@New_Code)=2)
				set @New_Code = '00'+@New_Code;
				else if(len(@New_Code)=3)
				set @New_Code = '0'+@New_Code;
              
				set @Stud_Code= @v_Stud_Enroll_AcadYear+ @New_Code;

				--print @Stud_Code

				update ED_STUD_FACULTY
				set
				  [STUD_FACULTY_CODE] =@Stud_Code
				where
				  ED_STUD_ID=@EdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId
	                    
				--update SE_USER
				--set PASSWORD=@Stud_Code
				--where SE_USER_TYPE_ID=2 and ED_STUD_ID=@EdStudId
						
				select @Stud_Code
			  end
          end
       	  if(@BuildStudCode=4)
			  begin
			  
				<!--Declare @v_Serial_Count int =4,
			--Declare 	@New_Code nvarchar(4),
			--	@Stud_Code nvarchar(8),
				--@v_Stud_Enroll_AcadYear varchar(4) --=2012-->
				--;

				--@v_Stud_Enroll_AcadYear
				select @v_Stud_Enroll_AcadYear=ED_ACAD_YEAR.YEAR_CODE from ED_ACAD_YEAR where ED_ACAD_YEAR.ED_ACAD_YEAR_ID = @EdAcadYearId;

				select  @New_Code=convert(nvarchar,max(right(STUD_FACULTY_CODE,@v_Serial_Count))+1)
				From ed_stud_faculty 
			where ISNUMERIC(right(STUD_FACULTY_CODE,@v_Serial_Count))=1
			AND LEN(right(STUD_FACULTY_CODE,@v_Serial_Count))>=@v_Serial_Count;

				if @New_Code is null 
				set @New_Code='0001'
							
              if(len(@New_Code)=1)
				set @New_Code = '000'+@New_Code;
				else if(len(@New_Code)=2)
				set @New_Code = '00'+@New_Code;
				else if(len(@New_Code)=3)
				set @New_Code = '0'+@New_Code;
              
				set @Stud_Code= @v_Stud_Enroll_AcadYear+@StateNotationFac+@New_Code;

				--print @Stud_Code

				update ED_STUD_FACULTY
				set
				  [STUD_FACULTY_CODE] =@Stud_Code
				where
				  ED_STUD_ID=@EdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId
	                    
				--update SE_USER
				--set PASSWORD=@Stud_Code
				--where SE_USER_TYPE_ID=2 and ED_STUD_ID=@EdStudId
						
				select @Stud_Code
			  end
          
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="CONVERT_CHARACTERS" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Table Comment: filter characters for search
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@OriginalString" type="nvarchar" size="200" precision="0" scale="0" param="(200)" direction="Input" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[	
	declare @temp 		nvarchar(20);
	declare @len  		numeric(3);
	declare @ReturnedString 	nvarchar(200);
	DECLARE @i smallint;
 
	set  @len    = LEN(@OriginalString);
	set  @ReturnedString=''
	set  @i=0;
  
While @i<=@len
	begin
		set @temp   = substring(@OriginalString,@i,1);
		if @temp in ('أ','إ','آ') begin
			set @temp = 'ا';
		end;
		--if @temp in ('ت') and substring(@OriginalString,@i+1,1) in (' ') begin
		--	set @temp = 'ه';
		--end;
       

		if @temp in ('ـ','@','#','$','%','&','*','(',')','^','\','+','-','/','|','?','<','>','{','}','[',']','-','           .','''','"')  begin
			set @temp = null;
		end;
		if @temp = ' ' and substring(@OriginalString,@i+1,1) in (' ') begin
			set @temp = null;        
		 end;
	  
--        if @temp = ' ' and substring(@OriginalString,@i+1,1) not in (' ') begin
--			set @temp = '';        
--         end;

		if @temp in ('ي') and substring(@OriginalString,@i+1,1) in (' ') begin
			set @temp = 'ى';
		end;
	   if @temp in ('ؤ') begin
			set @temp = 'و';
		end;
		if @temp in ('ئ') and substring(@OriginalString,@i+1,1) in (' ') begin
			set @temp = 'ى';
		end;

	if substring(@OriginalString,@i-1,1) = ' ' and substring(@OriginalString,@i,1) <> (' ') begin
	  set  @ReturnedString = @ReturnedString+' '+@temp;
	end
	else 
	begin 
		set @ReturnedString =isnull(@ReturnedString,'')+isnull(@temp,'');
	end
	  set @i =@i+1;
end;
	 select @ReturnedString;
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GsCountryNodePath" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GS_COUNTRY_NODE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
      				
--      DECLARE @VAR_NODE_PATH NVARCHAR(90);
--      DECLARE @COUNTRYNODEPATH  NVARCHAR(4000);

--      SELECT @VAR_NODE_PATH=NODE_PATH
--      FROM GS_COUNTRY_NODE
--      WHERE GS_COUNTRY_NODE_ID=@GsCountryNodeId;

--     if(@Lang=1)--arabic
--      begin
--      SELECT @COUNTRYNODEPATH= ISNULL(@COUNTRYNODEPATH + '/ ', '') +  NODE_DESCR_AR  
--      FROM   GS_COUNTRY_NODE
--      WHERE @VAR_NODE_PATH LIKE NODE_PATH + '%' 
--      ORDER BY NODE_PATH  ; --DESC
--     end
--     else --english
--      begin
--      SELECT @COUNTRYNODEPATH= ISNULL(@COUNTRYNODEPATH + '/ ', '') +  NODE_DESCR_EN  
--      FROM   GS_COUNTRY_NODE
--      WHERE @VAR_NODE_PATH LIKE NODE_PATH + '%' 
--      ORDER BY NODE_PATH  ;
--      end
      
--      select @COUNTRYNODEPATH


DECLARE @VAR_NODE_PATH NVARCHAR(90);
  DECLARE @VAR_NODE_ID numeric(5,0);
  DECLARE @VAR_PARENT_NODE_ID numeric(5,0);
  DECLARE @COUNTRYNODEPATH  NVARCHAR(4000)='';
  DECLARE @COUNTRY_DESCRAR  NVARCHAR(100);
  DECLARE @COUNTRY_DESCREN  NVARCHAR(100);

  SELECT @VAR_NODE_PATH=NODE_PATH,
		 @VAR_NODE_ID = GS_COUNTRY_NODE_ID,
		 @VAR_PARENT_NODE_ID = NODE_PARENT_ID,
		 @COUNTRY_DESCRAR = NODE_DESCR_AR,
		 @COUNTRY_DESCREN = NODE_DESCR_EN
  FROM GS_COUNTRY_NODE
  WHERE GS_COUNTRY_NODE_ID=@GsCountryNodeId;

while @VAR_NODE_ID <> @VAR_PARENT_NODE_ID
begin
	if(@Lang=2)
	set @COUNTRYNODEPATH = @COUNTRY_DESCREN + ' / ' + @COUNTRYNODEPATH;
	else
	set @COUNTRYNODEPATH = @COUNTRY_DESCRAR + ' / ' + @COUNTRYNODEPATH;

	SELECT @VAR_NODE_PATH=NODE_PATH,
		 @VAR_NODE_ID = GS_COUNTRY_NODE_ID,
		 @VAR_PARENT_NODE_ID = NODE_PARENT_ID,
		 @COUNTRY_DESCRAR = NODE_DESCR_AR,
		 @COUNTRY_DESCREN = NODE_DESCR_EN
	FROM GS_COUNTRY_NODE
	WHERE GS_COUNTRY_NODE_ID=@VAR_PARENT_NODE_ID;

end

if(@Lang=2)
set @COUNTRYNODEPATH = @COUNTRY_DESCREN + ' / ' + @COUNTRYNODEPATH;
else
set @COUNTRYNODEPATH = @COUNTRY_DESCRAR + ' / ' + @COUNTRYNODEPATH;

SELECT @VAR_NODE_PATH=NODE_PATH,
	 @VAR_NODE_ID = GS_COUNTRY_NODE_ID,
	 @VAR_PARENT_NODE_ID = NODE_PARENT_ID,
	 @COUNTRY_DESCRAR = NODE_DESCR_AR,
	 @COUNTRY_DESCREN = NODE_DESCR_EN
FROM GS_COUNTRY_NODE
WHERE GS_COUNTRY_NODE_ID=@VAR_PARENT_NODE_ID;

select LEFT(@COUNTRYNODEPATH, LEN(@COUNTRYNODEPATH) - 2);
 				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_COUNTRY_NODE_LOCAL_CHILD">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GS_COUNTRY_NODE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@islocal" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@parentID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				UPDATE GS_COUNTRY_NODE
	SET IS_NODE_LOCAL = @islocal
	WHERE NODE_PARENT_ID = @parentID;

				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_COUNTRY_NODE_SET_IS_LOCAL">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GS_COUNTRY_NODE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@islocal" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@nodeID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				UPDATE GS_COUNTRY_NODE
        SET IS_NODE_LOCAL = 0;

        UPDATE GS_COUNTRY_NODE
        SET IS_NODE_LOCAL = @islocal
        WHERE GS_COUNTRY_NODE_ID = @nodeID;

				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_CODE_C_NODE_NATUREGS_COUNTR">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GS_COUNTRY_NODE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCodeCNodeNatureId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					gs_country_node.[GS_COUNTRY_NODE_ID],
					gs_country_node.[NODE_DESCR_AR],
					gs_country_node.[NODE_DESCR_EN],
					gs_country_node.[NODE_PATH],
					gs_country_node.[NODE_ORDER],
					gs_country_node.[NODE_PARENT_ID],
					gs_country_node.[NODE_LEVEL],
					gs_country_node.[NODE_CODE],
					gs_country_node.[NODE_CHILD_COUNT],
					gs_country_node.[GS_CODE_C_NODE_NATURE_ID],
					gs_country_node.[IS_NODE_LOCAL],
					gs_country_node.[IS_NODE_VISIBLE]
          
				  FROM gs_country_node LEFT OUTER JOIN gs_country_node t0
             ON t0.gs_country_node_id = gs_country_node.node_parent_id
             LEFT OUTER JOIN gs_code_c_node_nature t1
             ON t1.gs_code_c_node_nature_id =
                                     gs_country_node.gs_code_c_node_nature_id
       WHERE gs_country_node.gs_code_c_node_nature_id = @gscodecnodenatureid
       
       order by gs_country_node.is_node_local desc,gs_country_node.[NODE_PATH]

				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_COUNTRY_NODEGS_COUNTRY_NODE">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GS_COUNTRY_NODE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@NodeParentId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					gs_country_node.[GS_COUNTRY_NODE_ID],
					gs_country_node.[NODE_DESCR_AR],
					gs_country_node.[NODE_DESCR_EN],
					gs_country_node.[NODE_PATH],
					gs_country_node.[NODE_ORDER],
					gs_country_node.[NODE_PARENT_ID],
					gs_country_node.[NODE_LEVEL],
					gs_country_node.[NODE_CODE],
					gs_country_node.[NODE_CHILD_COUNT],
					gs_country_node.[GS_CODE_C_NODE_NATURE_ID],
					gs_country_node.[IS_NODE_LOCAL],
					gs_country_node.[IS_NODE_VISIBLE],
         -- ,    T0.NODE_DESCR_AR  T0_NodeDescrAr  ,
	        GS_CODE_C_NODE_NATURE.NATURE_DESCR_AR,
          GS_CODE_C_NODE_NATURE.NATURE_DESCR_EN
          
				  FROM GS_COUNTRY_NODE      LEFT OUTER JOIN  GS_COUNTRY_NODE  T0  
	          ON      T0.GS_COUNTRY_NODE_ID = GS_COUNTRY_NODE.NODE_PARENT_ID 
          LEFT OUTER JOIN GS_CODE_C_NODE_NATURE ON GS_CODE_C_NODE_NATURE.GS_CODE_C_NODE_NATURE_ID = GS_COUNTRY_NODE.GS_CODE_C_NODE_NATURE_ID

          WHERE gs_coUNTRY_NODE.NODE_PARENT_id = @nodeparentid
          --where (GS_COUNTRY_NODE.NODE_PATH LIKE @nodepath + '%') and
          --		( GS_COUNTRY_NODE.GS_CODE_C_NODE_NATURE_ID = 5)
          --Order By   GS_COUNTRY_NODE.NODE_PATH

          order by GS_COUNTRY_NODE.NODE_DESCR_AR ,GS_COUNTRY_NODE.NODE_DESCR_EN

				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_FACULTY_GetStudEntities">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_FACULTY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
	select t.ENT_MAIN_ID,t.ENT_CODE_ENTITY_TYPE_ID
from
(select ED_STUD_SEMESTER.ED_STUD_ID,ENTITY_MAIN.ENT_MAIN_ID,ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID
	from ED_STUD_STATE inner join ENTITY_MAIN
	on ED_STUD_STATE.ENT_MAIN_ID=ENTITY_MAIN.ENT_MAIN_ID
	inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
	where ED_STUD_SEMESTER.IS_LAST = 1
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5
union
select ED_STUD_SEMESTER.ED_STUD_ID,parent.ENT_MAIN_ID,parent.ENT_CODE_ENTITY_TYPE_ID
	from ED_STUD_STATE inner join ENTITY_MAIN
	on ED_STUD_STATE.ENT_MAIN_ID=ENTITY_MAIN.ENT_MAIN_ID
	inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
	inner join ENTITY_MAIN as parent on ENTITY_MAIN.ENT_PARENT_ID = parent.ENT_MAIN_ID
	where ED_STUD_SEMESTER.IS_LAST = 1
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID not in (1,2,14,6)
	and parent.ENT_CODE_ENTITY_TYPE_ID=3
	and ED_STUD_SEMESTER.ED_STUD_ID not in 
	(
	select ED_STUD_SEMESTER.ED_STUD_ID
	from ED_STUD_STATE inner join ENTITY_MAIN
	on ED_STUD_STATE.ENT_MAIN_ID=ENTITY_MAIN.ENT_MAIN_ID
	inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
	where ED_STUD_SEMESTER.IS_LAST = 1
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5
	)
union
select ED_STUD_SEMESTER.ED_STUD_ID,ENTITY_MAIN.ENT_MAIN_ID,ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID
	from ED_STUD_STATE inner join ENTITY_MAIN
	on ED_STUD_STATE.ENT_MAIN_ID=ENTITY_MAIN.ENT_MAIN_ID
	inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
	where ED_STUD_SEMESTER.IS_LAST = 1
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 6) as t
where t.ED_STUD_ID = @EdStudId;

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_FACULTY_GetByEdCodeGradingProjId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_FACULTY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeGradingProjId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					*
				FROM
					[dbo].[ED_STUD_FACULTY]
				WHERE
					[ED_CODE_GRADING_PROJ_ID] = @EdCodeGradingProjId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_FACULTY_GetByEdCodePhaseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_FACULTY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodePhaseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					*
				FROM
					[dbo].[ED_STUD_FACULTY]
				WHERE
					[ED_CODE_PHASE_ID] = @EdCodePhaseId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetForAdviseView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SA_STF_MEMBER table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYear" type="numeric" direction="Input" size="4" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSem" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfo" type="numeric" direction="Input" size="6" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        declare @newEdAcadYear numeric(5,0)
        set @newEdAcadYear=@EdAcadYear;
        declare @newEdCodeSem numeric(6,0)
        set @newEdCodeSem=@EdCodeSem;
        declare @newAsFacultyInfo numeric(7,0)
        set @newAsFacultyInfo=@AsFacultyInfo;
        declare @newEntityMainId numeric(5,0)
        set @newEntityMainId=@EntityMainId;
        
        if(@lang = 1)
        begin
				SELECT DISTINCT
        SA_STF_MEMBER.*
				
				FROM
					 ED_STUD_ACADMIC_ADV inner join SA_STF_MEMBER on SA_STF_MEMBER.SA_STF_MEMBER_ID=ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID
           
          where (ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID=@newEdAcadYear)
                and (ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID=@newEdCodeSem )
                and ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID=@newAsFacultyInfo
                and (@newEntityMainId is null or SA_STF_MEMBER.AS_NODE_ID =@newEntityMainId  )
          order by SA_STF_MEMBER.STF_FULL_NAME_EN 
         end
         else
         begin
         SELECT DISTINCT
        SA_STF_MEMBER.*
				
				FROM
					 ED_STUD_ACADMIC_ADV inner join SA_STF_MEMBER on SA_STF_MEMBER.SA_STF_MEMBER_ID=ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID
           
          where (ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID=@newEdAcadYear)
                and (ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID=@newEdCodeSem )
                and ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID=@newAsFacultyInfo
                and (@newEntityMainId is null or SA_STF_MEMBER.AS_NODE_ID =@newEntityMainId  )
          order by SA_STF_MEMBER.STF_FULL_NAME_AR 
         end
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_OFFERING_COURSE_Get_ForView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYear" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSem" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
-- @AsFacultyInfo = -1 all offered courses
-- @AsFacultyInfo = 0 university Offered courses
-- @AsFacultyInfo = 1 faculty Offered courses

SELECT  DISTINCT   ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID, 
                      ED_OFFERING_COURSE.ED_COURSE_ID,ED_COURSE.COURSE_CODE
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where 
 (@AsFacultyInfo = -1 or (@AsFacultyInfo=0 and ED_OFFERING.AS_FACULTY_INFO_ID is null) or ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfo)
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSem 
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYear
order by ED_COURSE.COURSE_CODE

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_OFFERING_COURSE_Get_ForView2">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYear" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSem" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				SELECT     ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID, 
                      ED_OFFERING_COURSE.ED_COURSE_ID,ED_COURSE.COURSE_CODE
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where 
ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfo
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSem
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYear
and ED_OFFERING.ENT_MAIN_ID=@EntMainId
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_COURSE_EVAL_GetCourses_Delete">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
----------------------------------------------------
declare @NoOfVotes int=0;
declare @SvCourseEvalId numeric(6,0)=0;

-- Get @SvCourseEvalId
SELECT  @SvCourseEvalId = SV_COURSE_EVAL.SV_COURSE_EVAL_ID
FROM                  SV_COURSE_EVAL
where SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYearId
and SV_COURSE_EVAL.ED_COURSE_ID = @EdCourseId;

-- Get @NoOfVotes
SELECT  @NoOfVotes = COUNT( distinct SV_STUD_COURSE_EVAL.ED_STUD_ID)
FROM         SV_COURSE_EVAL_ITEM INNER JOIN
                      SV_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = SV_COURSE_EVAL.SV_COURSE_EVAL_ID INNER JOIN
                      SV_STUD_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ITEM_ID = SV_STUD_COURSE_EVAL.SV_COURSE_EVAL_ITEM_ID
where SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYearId
and SV_COURSE_EVAL.ED_COURSE_ID = @EdCourseId;

if( @SvCourseEvalId <> 0 )
begin
	if(@NoOfVotes = 0)
	begin
		
		delete from SV_COURSE_EVAL_ITEM 
		where SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = @SvCourseEvalId;
		
		delete from SV_COURSE_EVAL 
		where SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
		and SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYearId
		and SV_COURSE_EVAL.ED_COURSE_ID = @EdCourseId;
		
	end
end

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_COURSE_EVAL_GetCourses_ForView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYear" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSem" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
select t1.*,ISNULL(t2.NoOfVotes,0) as NoOfVotes
from
(SELECT     ED_OFFERING_COURSE.ED_COURSE_ID,ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      SV_COURSE_EVAL ON ED_COURSE.ED_COURSE_ID = SV_COURSE_EVAL.ED_COURSE_ID
where 
ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfo
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSem
and SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSem
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYear
and SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYear
and ED_OFFERING.ENT_MAIN_ID=@EntMainId) as t1
left outer join
(SELECT   SV_COURSE_EVAL.ED_COURSE_ID,COUNT( distinct SV_STUD_COURSE_EVAL.ED_STUD_ID) as NoOfVotes
FROM         SV_COURSE_EVAL_ITEM INNER JOIN
                      SV_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ID = SV_COURSE_EVAL.SV_COURSE_EVAL_ID INNER JOIN
                      SV_STUD_COURSE_EVAL ON SV_COURSE_EVAL_ITEM.SV_COURSE_EVAL_ITEM_ID = SV_STUD_COURSE_EVAL.SV_COURSE_EVAL_ITEM_ID
where SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSem
and SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYear
group by SV_COURSE_EVAL.ED_COURSE_ID) as t2
on t1.ED_COURSE_ID = t2.ED_COURSE_ID

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_COURSE_EVAL_GetCourses_ForSet">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYear" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeSem" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_OFFERING_COURSE.ED_COURSE_ID,ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where 
ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfo
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSem
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYear
and ED_OFFERING.ENT_MAIN_ID=@EntMainId
and ED_OFFERING_COURSE.ED_COURSE_ID not in (
SELECT  distinct SV_COURSE_EVAL.ED_COURSE_ID
FROM      SV_COURSE_EVAL
where SV_COURSE_EVAL.ED_CODE_SEMESTER_ID = @EdCodeSem
and SV_COURSE_EVAL.ED_ACAD_YEAR_ID = @EdAcadYear);

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetByOfferingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_OFFERING_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
        
		      	declare @EntityMinId numeric

            select @EntityMinId=ENT_MAIN_ID from ED_OFFERING where [ED_OFFERING_ID] = @EdOfferingId
            if(@EntityMinId is not null)
	           SELECT
					            ED_COURSE.[ED_COURSE_ID],[ED_CODE_COURSE_ID],[COURSE_CODE],[COURSE_DESCR_AR],
			              [COURSE_DESCR_EN],[GS_CODE_LANGUAGE_ID], [ED_CODE_COURSE_CASE_ID],
			              [COURSE_CONTENTS_AR],[COURSE_CONTENTS_EN],
			              [CREDIT_HOURS],ED_COURSE.[AS_FACULTY_INFO_ID],[ENT_MAIN_ID],
			              [IS_ACTIVE],[ALL_PREREQ_FLG],[NO_PREREQ],[ED_BYLAW_ID],
                          [PREREQ_CODE_EXP],[PREREQ_ID_EXP],ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID
	                FROM    ED_COURSE left outer JOIN
                          ED_OFFERING_COURSE ON 
                          (ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID  and ([ED_OFFERING_ID] = @EdOfferingId))
                          
		              WHERE
			               ED_COURSE.ENT_MAIN_ID=@EntityMinId
              else
                  SELECT
					          ED_COURSE.[ED_COURSE_ID],[ED_CODE_COURSE_ID],[COURSE_CODE],[COURSE_DESCR_AR],
					          [COURSE_DESCR_EN],[GS_CODE_LANGUAGE_ID], [ED_CODE_COURSE_CASE_ID],
					          [COURSE_CONTENTS_AR],[COURSE_CONTENTS_EN],
					          [CREDIT_HOURS],ED_COURSE.[AS_FACULTY_INFO_ID],[ENT_MAIN_ID],
					          [IS_ACTIVE],[ALL_PREREQ_FLG],[NO_PREREQ],[ED_BYLAW_ID],
							  [PREREQ_CODE_EXP],[PREREQ_ID_EXP]
                    
			            FROM         ED_COURSE 
                  where ED_COURSE.ED_COURSE_id=0
                 
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SaStaffMember_getByOfferingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_OFFERING_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" />
      </parameters>
      <body>
        <![CDATA[
				SELECT  distinct   SA_STF_MEMBER.*
        FROM         ED_OFFERING_COURSE INNER JOIN
                              ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                              SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID INNER JOIN
                              SC_SCHEDULE_DTL ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID AND 
                              SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID INNER JOIN
                              SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
        where ED_OFFERING.ED_OFFERING_ID = @EdOfferingId
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetAllByOfferingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_OFFERING_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
        
		      	declare @EntityMinId numeric

            select @EntityMinId=ENT_MAIN_ID from ED_OFFERING where [ED_OFFERING_ID] = @EdOfferingId
            if(@EntityMinId is not null)
	           SELECT
					          ED_COURSE.[ED_COURSE_ID],[ED_CODE_COURSE_ID],[COURSE_CODE],[COURSE_DESCR_AR],
					          [COURSE_DESCR_EN],[GS_CODE_LANGUAGE_ID], [ED_CODE_COURSE_CASE_ID],
					          [COURSE_CONTENTS_AR],[COURSE_CONTENTS_EN],
					          [CREDIT_HOURS],ED_COURSE.[AS_FACULTY_INFO_ID],[ENT_MAIN_ID],
					          [IS_ACTIVE],[ALL_PREREQ_FLG],[NO_PREREQ],[ED_BYLAW_ID],
                    [PREREQ_CODE_EXP],[PREREQ_ID_EXP],ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID
			            FROM         ED_COURSE INNER JOIN
                              ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID 
				          WHERE
					          (([ED_OFFERING_ID] = @EdOfferingId) or (ED_OFFERING_COURSE.ED_OFFERING_COURSE_id is null))
					          and
					           ED_COURSE.ENT_MAIN_ID=@EntityMinId
                     
              else
                   SELECT
					          ED_COURSE.[ED_COURSE_ID],[ED_CODE_COURSE_ID],[COURSE_CODE],[COURSE_DESCR_AR],
					          [COURSE_DESCR_EN],[GS_CODE_LANGUAGE_ID], [ED_CODE_COURSE_CASE_ID],
					          [COURSE_CONTENTS_AR],[COURSE_CONTENTS_EN],
					          [CREDIT_HOURS],ED_COURSE.[AS_FACULTY_INFO_ID],[ENT_MAIN_ID],
					          [IS_ACTIVE],[ALL_PREREQ_FLG],[NO_PREREQ],[ED_BYLAW_ID],
                    [PREREQ_CODE_EXP],[PREREQ_ID_EXP],ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID
			            FROM         ED_COURSE INNER JOIN
                              ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID 
                  
                 
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetByOfferingId_InnerJoin">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_OFFERING_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" />
        <parameter name="@CourseCode" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
      </parameters>
      <body>
        <![CDATA[
SET ANSI_NULLS OFF
        
		      	declare @EntityMinId numeric

            select @EntityMinId=ENT_MAIN_ID from ED_OFFERING where [ED_OFFERING_ID] = @EdOfferingId
            
            if(@CourseCode ='')
            Begin
                    if(@EntityMinId is not null)
	                   SELECT
					                  ED_COURSE.*
			                    FROM         ED_COURSE inner JOIN
                                      ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID inner join ed_offering
                                      on ed_offering.ed_offering_id=ED_OFFERING_COURSE.ed_offering_id
				                  WHERE
					                  ((ED_OFFERING_COURSE.[ED_OFFERING_ID] = @EdOfferingId))
					                  and
					                  ed_offering.ENT_MAIN_ID=@EntityMinId
                            and (ED_COURSE.ELECT_FLG=1 or ((ED_COURSE.ELECT_FLG=0 or ED_COURSE.ELECT_FLG is null) and (ED_COURSE.GS_COURSE_ELECT_TYPE_ID is null or ED_COURSE.GS_COURSE_ELECT_TYPE_ID = 0))) 
                            order by COURSE_CODE
                             
                      else
                          SELECT
					                  ED_COURSE.*
                            
			                    FROM         ED_COURSE 
                          where ED_COURSE.ED_COURSE_id=0 order by COURSE_CODE
              End
            else
                Begin
                 if(@EntityMinId is not null)
	                   SELECT
					                  ED_COURSE.*
			                    FROM         ED_COURSE inner JOIN
                                      ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID inner join ed_offering
                                      on ed_offering.ed_offering_id=ED_OFFERING_COURSE.ed_offering_id
				                  WHERE
					                  ((ED_OFFERING_COURSE.[ED_OFFERING_ID] = @EdOfferingId) and ED_COURSE.COURSE_CODE=@CourseCode) 
					                  and
					                    ed_offering.ENT_MAIN_ID=@EntityMinId 
                            and (ED_COURSE.ELECT_FLG=1 or ((ED_COURSE.ELECT_FLG=0 or ED_COURSE.ELECT_FLG is null) and (ED_COURSE.GS_COURSE_ELECT_TYPE_ID is null or ED_COURSE.GS_COURSE_ELECT_TYPE_ID = 0))) 
                            order by COURSE_CODE
                             
                      else
                          SELECT
					                  ED_COURSE.*
                            
			                    FROM         ED_COURSE 
                          where ED_COURSE.ED_COURSE_id=0 order by COURSE_CODE
                End
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetSuitableCoursesForStud">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_OFFERING_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" />
      </parameters>
      <body>
        <![CDATA[
				
declare @EntityMinId numeric

            select @EntityMinId=ENT_MAIN_ID from ED_OFFERING where ED_OFFERING.ED_OFFERING_ID = @EdOfferingId
            if(@EntityMinId is not null)
	           SELECT
					          ED_COURSE.*
			      FROM         ED_COURSE inner JOIN
                              ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID inner join
                              ED_OFFERING on ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID

				          WHERE
					         ((ED_OFFERING.As_Faculty_info_id is not null and ED_OFFERING.ED_OFFERING_ID = @EdOfferingId
					          and ED_COURSE.ENT_MAIN_ID=@EntityMinId) or
					          (
					          ED_OFFERING.As_Faculty_info_id is null and ED_OFFERING.ED_OFFERING_ID = @EdOfferingId
					          )
					          )
                     AND NOT EXISTS(SELECT 'A' FROM ED_STUD_COURSE_REG T1  INNER JOIN ED_STUD_SEMESTER ON 
                         ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=T1.ED_STUD_SEMESTER_ID
                         WHERE T1.ED_COURSE_ID=ED_COURSE.[ED_COURSE_ID]
                         AND ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId AND ED_STUD_SEMESTER.IS_LAST=1)
                      order by ED_COURSE.COURSE_CODE
                     
              else
                  SELECT
					          ED_COURSE.*
                    
			            FROM         ED_COURSE 
                  where ED_COURSE.ED_COURSE_id=0
                  order by ED_COURSE.COURSE_CODE
        
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetCoursesLeftOfeeringCourse">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_OFFERING_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_OFFERING_COURSE_ID],
					[ED_COURSE_ID],
					[ED_OFFERING_ID],
					[AUDIT_FLG],
					[ONLINE_FLG],
					[MIN_ATTEND_NO],
					[AS_FACULTY_INFO_ID],
					[IS_APPROVED]
				FROM
					[dbo].[ED_OFFERING_COURSE]
				WHERE
					[ED_OFFERING_ID] = @EdOfferingId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_GetByGsCodeWeekDayId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCodeWeekDayId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SC_SCHEDULE_DTL_ID],
					[ED_OFFERING_ID],
					[SC_SCHEDULE_HDR_ID],
					[SA_STF_MAMBER_ID],
					[GROUP_DESCR_AR],
					[GROUP_DESCR_EN],
					[GROUP_ORDER],
					[GS_CODE_GENDER_ID],
					1,
					1,
					1,
					1,
					[NOTES],
					[IS_APPROVED],
					[MANUAL_FLAG],
					[AS_FACULTY_INFO_ID],
          [dbo].[SC_SCHEDULE_DTL].COURSE_INSTANCE_NAME,
          [dbo].[SC_SCHEDULE_DTL].IS_RESULT_APPROVED
				FROM
					[dbo].[SC_SCHEDULE_DTL]
				WHERE
					[GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_GetByScBuildingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SC_SCHEDULE_DTL_ID],
					[ED_OFFERING_ID],
					[SC_SCHEDULE_HDR_ID],
					[SA_STF_MAMBER_ID],
					[GROUP_DESCR_AR],
					[GROUP_DESCR_EN],
					[GROUP_ORDER],
					[GS_CODE_GENDER_ID],
				  1,
					1,
					1,
					1,
					[NOTES],
					[IS_APPROVED],
					[MANUAL_FLAG],
					[AS_FACULTY_INFO_ID],
           [dbo].[SC_SCHEDULE_DTL].COURSE_INSTANCE_NAME,
          [dbo].[SC_SCHEDULE_DTL].IS_RESULT_APPROVED
				FROM
					[dbo].[SC_SCHEDULE_DTL]
				WHERE
					[SC_BUILDING_ID] = @ScBuildingId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_GetByScHallId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SC_SCHEDULE_DTL_ID],
					[ED_OFFERING_ID],
					[SC_SCHEDULE_HDR_ID],
					[SA_STF_MAMBER_ID],
					[GROUP_DESCR_AR],
					[GROUP_DESCR_EN],
					[GROUP_ORDER],
					[GS_CODE_GENDER_ID],
					1,
					1,
					1,
					1,
					[NOTES],
					[IS_APPROVED],
					[MANUAL_FLAG],
					[AS_FACULTY_INFO_ID],
           [dbo].[SC_SCHEDULE_DTL].COURSE_INSTANCE_NAME,
          [dbo].[SC_SCHEDULE_DTL].IS_RESULT_APPROVED
				FROM
					[dbo].[SC_SCHEDULE_DTL]
				WHERE
					[SC_HALL_ID] = @ScHallId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_GetByScTchngSlotId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScTchngSlotId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SC_SCHEDULE_DTL_ID],
					[ED_OFFERING_ID],
					[SC_SCHEDULE_HDR_ID],
					[SA_STF_MAMBER_ID],
					[GROUP_DESCR_AR],
					[GROUP_DESCR_EN],
					[GROUP_ORDER],
					[GS_CODE_GENDER_ID],
					1,
					1,
					1,
					1,
					[NOTES],
					[IS_APPROVED],
					[MANUAL_FLAG],
					[AS_FACULTY_INFO_ID],
           [dbo].[SC_SCHEDULE_DTL].COURSE_INSTANCE_NAME,
          [dbo].[SC_SCHEDULE_DTL].IS_RESULT_APPROVED
				FROM
					[dbo].[SC_SCHEDULE_DTL]
				WHERE
					[SC_TCHNG_SLOT_ID] = @ScTchngSlotId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="IsGroupValidToAllocate">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@CheckOnNumbers" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@Result" type="nvarchar" direction="Output" size="1000" precision="0" scale="0" param="(50)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
        set @Result='';
        declare @IS_RESULT_APPROVED numeric
        select @IS_RESULT_APPROVED=IS_RESULT_APPROVED from SC_SCHEDULE_DTL where
        SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID=@ScScheduleDtlId;
        if(@IS_RESULT_APPROVED=1)
          Begin
             set @Result='Result_Approve';
             return;
          End
          -- check that it's schedule not approved
           declare @IS_Schedule_APPROVED numeric
           
            SELECT   @IS_Schedule_APPROVED=ED_OFFERING.IS_APPROVED
              FROM         SC_SCHEDULE_DTL INNER JOIN
                                    SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                                    ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                                    ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID AND 
                                    ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
              WHERE     (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
              
              Begin
                if(@IS_Schedule_APPROVED=0)
                Begin
                   set @Result='Schedule_Approve';
                   return;
                End
              End
                     
                     
                     
          if(@CheckOnNumbers=1)
          Begin
             declare @StudAllocateCount numeric,@GroupAllowedNumber numeric
             select @StudAllocateCount= COUNT(*) 
                FROM         ED_STUD_GROUP
                WHERE     (SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
                
                
                SELECT   @GroupAllowedNumber= SC_SCHEDULE_DTL.NO_STUDENTS
                FROM         SC_SCHEDULE_DTL INNER JOIN
                                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID
                WHERE     (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
                
                
              if(@StudAllocateCount>=@GroupAllowedNumber)
                Begin
                    set @Result='Number_Match_In_Group';
                    return;
                End
                
          End
         
         
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetExamAbsentStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
--				SELECT distinct  
--                  ED_STUD_FACULTY.STUD_FACULTY_CODE as StudCode,
--                  ED_STUD.FULL_NAME_AR as StudFullNameAr,
--                   ED_STUD.FULL_NAME_EN as StudFullNameEn, 
--                   ED_STUD.ED_STUD_ID as EdStudId,
--                   ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID as EdExamStudAbsenceId,
--                   case when (ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID is not null)then 1 else 0 end as AbsenceFlag,
--                   ED_EXAM_STUD_ABSENCE.EXECUSE_FLG as ExcuseFlag
--                   
--                   
--        FROM       ED_STUD_GROUP INNER JOIN
--                   SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
--                   ED_OFFERING on ED_OFFERING.ED_OFFERING_ID=ED_OFFERING_COURSE.ED_OFFERING_ID inner join 
--                  SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
--                   ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID
--                   left outer join ED_EXAM_STUD_ABSENCE on (ED_EXAM_STUD_ABSENCE.ED_STUD_ID=ED_STUD.ED_STUD_ID)
--                   left outer join ED_EXAM_SCHDL on (ED_EXAM_SCHDL.ED_ACAD_YEAR_ID=ED_OFFERING.ED_ACAD_YEAR_ID and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID=ED_OFFERING.ED_CODE_SEMESTER_ID)
--                   left outer join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID)
--                   
--        WHERE     (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
--        
--				SELECT @@ROWCOUNT


				SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, ED_STUD.FULL_NAME_AR AS StudFullNameAr, 
                      ED_STUD.FULL_NAME_EN AS StudFullNameEn, ED_STUD.ED_STUD_ID AS EdStudId, 
                      ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID AS EdExamStudAbsenceId, 
                      CASE WHEN (ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID IS NOT NULL) THEN 1 ELSE 0 END AS AbsenceFlag, 
                      ED_EXAM_STUD_ABSENCE.EXECUSE_FLG AS ExcuseFlag
FROM  ED_OFFERING_COURSE INNER JOIN
               ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
               ED_STUD_GROUP INNER JOIN
               SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
               SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
               ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
               ED_STUD_SEMESTER ON ED_STUD_GROUP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
               ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID ON 
               ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID LEFT OUTER JOIN
               ED_EXAM_STUD_ABSENCE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID LEFT OUTER JOIN
               ED_EXAM_SCHDL ON ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = ED_OFFERING.ED_ACAD_YEAR_ID AND 
               ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = ED_OFFERING.ED_CODE_SEMESTER_ID LEFT OUTER JOIN
               ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID
WHERE     (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
        
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetExamAbsentStudsByPlace">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CoExamSchdlPlaceId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

--SELECT  DISTINCT   ED_STUD_FACULTY.STUD_FACULTY_CODE  StudCode, ED_STUD.FULL_NAME_AR StudFullNameAr, 
--			ED_STUD.FULL_NAME_EN StudFullNameEn,ED_STUD_SEMESTER.ED_STUD_ID EdStudId,ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID EdExamStudAbsenceId,
--			CASE WHEN (ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID IS NOT NULL) THEN 1 ELSE 0 END AS AbsenceFlag,
--            ED_EXAM_STUD_ABSENCE.EXECUSE_FLG ExcuseFlag
--FROM         ED_EXAM_SCHDL INNER JOIN
--                      CO_EXAM_SCHDL_PLACE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID INNER JOIN
 --                     CO_EXAM_PLACE_STUD ON CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID left outer JOIN
  --                    ED_EXAM_STUD_ABSENCE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = ED_EXAM_STUD_ABSENCE.ED_EXAM_SCHDL_ID INNER JOIN
   --                   ED_STUD_SEMESTER ON CO_EXAM_PLACE_STUD.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
    --                  ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
     --                 ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
      --                ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
--where ED_EXAM_SCHDL.AS_FACULTY_INFO_ID = @AsFacultyInfoId
--and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
--and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--and ED_EXAM_SCHDL.ED_COURSE_ID = @EdCourseId
--and (@CoExamSchdlPlaceId is null or @CoExamSchdlPlaceId=0 or CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = @CoExamSchdlPlaceId)


select t1.StudCode,t1.StudFullNameAr,t1.StudFullNameEn,t1.EdStudId,t2.ED_EXAM_STUD_ABSENCE_ID as EdExamStudAbsenceId,t2.AbsenceFlag,t2.ExcuseFlag from (
SELECT  DISTINCT   ED_STUD_FACULTY.STUD_FACULTY_CODE  StudCode, ED_STUD.FULL_NAME_AR StudFullNameAr, 
			ED_STUD.FULL_NAME_EN StudFullNameEn,ED_STUD_SEMESTER.ED_STUD_ID EdStudId,ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
			
FROM         ED_EXAM_SCHDL INNER JOIN
                      CO_EXAM_SCHDL_PLACE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID INNER JOIN
                      CO_EXAM_PLACE_STUD ON CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID inner JOIN
                      ED_STUD_SEMESTER ON CO_EXAM_PLACE_STUD.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID  INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
                    where isnull(ED_EXAM_SCHDL.AS_FACULTY_INFO_ID, 0) = @AsFacultyInfoId
and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_EXAM_SCHDL.ED_COURSE_ID = @EdCourseId
and (@CoExamSchdlPlaceId is null or @CoExamSchdlPlaceId=0 or CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = @CoExamSchdlPlaceId)


) as t1                      
left outer join 
(               
SELECT DISTINCT 
                      ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID, ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID, 
                      CASE WHEN (ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID IS NOT NULL) THEN 1 ELSE 0 END AS AbsenceFlag,
                      ED_EXAM_STUD_ABSENCE.EXECUSE_FLG AS ExcuseFlag
FROM         ED_EXAM_SCHDL INNER JOIN
                      CO_EXAM_SCHDL_PLACE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID INNER JOIN
                      CO_EXAM_PLACE_STUD ON CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID inner JOIN
                      ED_EXAM_STUD_ABSENCE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = ED_EXAM_STUD_ABSENCE.ED_EXAM_SCHDL_ID INNER JOIN
                      ED_STUD_SEMESTER ON CO_EXAM_PLACE_STUD.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
                      ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where isnull(ED_EXAM_SCHDL.AS_FACULTY_INFO_ID, 0) = @AsFacultyInfoId
and ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_EXAM_SCHDL.ED_COURSE_ID = @EdCourseId
and (@CoExamSchdlPlaceId is null or @CoExamSchdlPlaceId=0 or CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID = @CoExamSchdlPlaceId)

) as t2
on t1.ED_STUD_SEMESTER_ID = t2.ED_STUD_SEMESTER_ID



			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetGeneralAbsentStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT     distinct
                   ED_STUD_FACULTY.STUD_FACULTY_CODE as StudCode,
                   ED_STUD.FULL_NAME_AR as StudFullNameAr,
                   ED_STUD.FULL_NAME_EN as StudFullNameEn, 
                   ED_STUD.ED_STUD_ID as EdStudId,
                   ED_STUD_ABSENCE.ED_STUD_ABSENCE_ID as EdStudAbsenceId,
                   ED_STUD_ABSENCE.ABSENCE_FLG as AbsenceFlag,
                   ED_STUD_ABSENCE.EXECUSE_FLG as ExcuseFlag
                   
       FROM  ED_STUD_GROUP INNER JOIN
               SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
               SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
               ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
               ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
               ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID LEFT OUTER JOIN
               ED_STUD_ABSENCE ON ED_STUD_ABSENCE.ED_STUD_ID = ED_STUD.ED_STUD_ID AND 
               ED_OFFERING.ED_ACAD_YEAR_ID = ED_STUD_ABSENCE.ED_ACAD_YEAR_ID AND 
               ED_OFFERING.ED_CODE_SEMESTER_ID = ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID LEFT OUTER JOIN
               ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID
			   
                   
        WHERE     (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
        
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetDetailedAbsentStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ScTchngSlotId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AbsDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
declare @tempStuds table(
StudCode nvarchar(50),
StudFullNameAr nvarchar(150),
StudFullNameEn nvarchar(150),
EdStudId numeric(9,0),
EdStudAbsenceId numeric(5,0),
AbsenceFlag numeric(1,0),
ExcuseFlag numeric(1,0)
);
insert into @tempStuds
SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, ED_STUD.FULL_NAME_AR AS StudFullNameAr, ED_STUD.FULL_NAME_EN AS StudFullNameEn, 
                      ED_STUD.ED_STUD_ID AS EdStudId, ED_STUD_ABSENCE.ED_STUD_ABSENCE_ID AS EdStudAbsenceId, ED_STUD_ABSENCE.ABSENCE_FLG AS AbsenceFlag, 
                      ED_STUD_ABSENCE.EXECUSE_FLG AS ExcuseFlag
FROM         ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_OFFERING_COURSE ON 
                      SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID LEFT OUTER JOIN
                      ED_STUD_ABSENCE ON ED_STUD_ABSENCE.ED_STUD_ID = ED_STUD.ED_STUD_ID AND 
                      ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = ED_OFFERING.ED_ACAD_YEAR_ID AND 
                      ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = ED_OFFERING.ED_CODE_SEMESTER_ID 
                      AND ED_STUD_ABSENCE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID
                      LEFT OUTER JOIN
                      ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID

                   
        WHERE     (@ScScheduleDtlId is null or @ScScheduleDtlId=0 or SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId);
  
select DISTINCT 
t2.StudCode,t2.StudFullNameAr,t2.StudFullNameEn,t2.EdStudId,t1.EdStudAbsenceId,t1.AbsenceFlag,t1.ExcuseFlag
 from (      
SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, ED_STUD.FULL_NAME_AR AS StudFullNameAr, ED_STUD.FULL_NAME_EN AS StudFullNameEn, 
                      ED_STUD.ED_STUD_ID AS EdStudId, ED_STUD_ABSENCE.ED_STUD_ABSENCE_ID AS EdStudAbsenceId, ED_STUD_ABSENCE.ABSENCE_FLG AS AbsenceFlag, 
                      ED_STUD_ABSENCE.EXECUSE_FLG AS ExcuseFlag
FROM         ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID  INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_OFFERING_COURSE ON  
                      SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID LEFT OUTER JOIN
                      ED_STUD_ABSENCE ON ED_STUD_ABSENCE.ED_STUD_ID = ED_STUD.ED_STUD_ID AND 
                      ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = ED_OFFERING.ED_ACAD_YEAR_ID AND 
                      ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = ED_OFFERING.ED_CODE_SEMESTER_ID 
                      AND ED_STUD_ABSENCE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID
                      LEFT OUTER JOIN
                      ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID
                      WHERE     (@ScScheduleDtlId is null or @ScScheduleDtlId=0 or SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
        and (@ScTchngSlotId is null or @ScTchngSlotId=0 or SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_DAY_ID = @ScTchngSlotId)
        and (@EdCourseId is null or @EdCourseId=0 or ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId)
        and(@AbsDate is null or @AbsDate = '1900-01-01' or ED_STUD_ABSENCE.ABS_DATE = @AbsDate)) t1
right outer join
@tempStuds t2
on t1.EdStudId = t2.EdStudId
      
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetDetailedAbsentStuds_FromToTime">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FromTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AbsDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
declare @tempStuds table(
StudCode nvarchar(50),
StudFullNameAr nvarchar(150),
StudFullNameEn nvarchar(150),
EdStudId numeric(9,0),
EdStudAbsenceId numeric(5,0),
AbsenceFlag numeric(1,0),
ExcuseFlag numeric(1,0)
);
insert into @tempStuds
SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, ED_STUD.FULL_NAME_AR AS StudFullNameAr, ED_STUD.FULL_NAME_EN AS StudFullNameEn, 
                      ED_STUD.ED_STUD_ID AS EdStudId, ED_STUD_ABSENCE.ED_STUD_ABSENCE_ID AS EdStudAbsenceId, ED_STUD_ABSENCE.ABSENCE_FLG AS AbsenceFlag, 
                      ED_STUD_ABSENCE.EXECUSE_FLG AS ExcuseFlag
FROM         ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID AND 
                      SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID LEFT OUTER JOIN
                      ED_STUD_ABSENCE ON ED_STUD_ABSENCE.ED_STUD_ID = ED_STUD.ED_STUD_ID AND 
                      ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = ED_OFFERING.ED_ACAD_YEAR_ID AND 
                      ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = ED_OFFERING.ED_CODE_SEMESTER_ID LEFT OUTER JOIN
                      ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID

                   
        WHERE     (@ScScheduleDtlId is null or @ScScheduleDtlId=0 or SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId);
  
select DISTINCT 
t2.StudCode,t2.StudFullNameAr,t2.StudFullNameEn,t2.EdStudId,t1.EdStudAbsenceId,t1.AbsenceFlag,t1.ExcuseFlag
 from (      
SELECT DISTINCT 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE AS StudCode, ED_STUD.FULL_NAME_AR AS StudFullNameAr, ED_STUD.FULL_NAME_EN AS StudFullNameEn, 
                      ED_STUD.ED_STUD_ID AS EdStudId, ED_STUD_ABSENCE.ED_STUD_ABSENCE_ID AS EdStudAbsenceId, ED_STUD_ABSENCE.ABSENCE_FLG AS AbsenceFlag, 
                      ED_STUD_ABSENCE.EXECUSE_FLG AS ExcuseFlag
FROM         ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID AND 
                      SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID LEFT OUTER JOIN
                      ED_STUD_ABSENCE ON ED_STUD_ABSENCE.ED_STUD_ID = ED_STUD.ED_STUD_ID AND 
                      ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = ED_OFFERING.ED_ACAD_YEAR_ID AND 
                      ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = ED_OFFERING.ED_CODE_SEMESTER_ID LEFT OUTER JOIN
                      ED_STUD_FACULTY ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID
                      WHERE     (@ScScheduleDtlId is null or @ScScheduleDtlId=0 or SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
        and (@FromTime is null or @FromTime='1900-01-01' or (SC_SCHEDULE_DTL_DAY.FROM_TIME = @FromTime and SC_SCHEDULE_DTL_DAY.TO_TIME = @ToTime))
        and (@EdCourseId is null or @EdCourseId=0 or ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId)
        and(@AbsDate is null or @AbsDate = '1900-01-01' or ED_STUD_ABSENCE.ABS_DATE = @AbsDate)) t1
right outer join
@tempStuds t2
on t1.EdStudId = t2.EdStudId
      
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_SearchForReport">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Finds records in the SC_SCHEDULE_DTL table passing nullable parameters
-- Table Comment: جدول بيانات الجدول الدراسي لعام اكاديمي
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID, SC_SCHEDULE_DTL.GROUP_DESCR_AR, SC_SCHEDULE_DTL.GROUP_DESCR_EN
FROM         SC_SCHEDULE_DTL INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID
where ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (@EntMainId is null or @EntMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntMainId)
and (@EdCourseId is null or @EdCourseId = 0 or ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId)

				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_LEVEL_GetNextOne">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_LEVEL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
if(@EdCodeLevelId >= 1)
begin

SELECT     ENT_MAIN_ID, ED_CODE_LEVEL_ID
FROM         ENTITY_MAIN
where ED_CODE_LEVEL_ID = (
	SELECT     TOP (1) ED_CODE_LEVEL_ID
	FROM         ED_CODE_LEVEL
	WHERE     (LEVEL_ORDER >
							  (SELECT     LEVEL_ORDER
								 FROM         ED_CODE_LEVEL AS ED_CODE_LEVEL_1
								 WHERE     (ED_CODE_LEVEL_ID = @EdCodeLevelId)))
	ORDER BY LEVEL_ORDER, ED_CODE_LEVEL_ID)
	
end
else
begin

SELECT     ENT_MAIN_ID, ED_CODE_LEVEL_ID
FROM         ENTITY_MAIN
where ED_CODE_LEVEL_ID = (
	SELECT     TOP (1) ED_CODE_LEVEL_ID
	FROM         ED_CODE_LEVEL
	WHERE     (LEVEL_ORDER = (SELECT     LEVEL_ORDER
								 FROM         ED_CODE_LEVEL AS ED_CODE_LEVEL_1
								 WHERE     (ED_CODE_LEVEL_ID = 1)))
	ORDER BY LEVEL_ORDER, ED_CODE_LEVEL_ID)
  
end	
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="Gathering_GPA">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_SEMESTER table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Selected_EdStudId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

EXEC BATCH_UPDATE_ED_STUD_SEMESTER @Selected_EdStudId,@AsFacultyInfoId

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetCGPA">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_SEMESTER table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Selected_EdStudId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

--select @Selected_EdStudId = ed_stud_id from ED_STUD_FACULTY where STUD_FACULTY_CODE = '92026';
--------------------------------------------------------------------------------
declare @EdStudId int;   
declare Students cursor for    -- Get all students in the given faculty, academic year, semester
SELECT  distinct   ED_STUD_ID
FROM         ED_STUD_SEMESTER
WHERE     (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) 
            AND (@Selected_EdStudId is null or @Selected_EdStudId = 0 or ED_STUD_SEMESTER.ED_STUD_ID=@Selected_EdStudId)
            AND (@AcadYearId IS NULL OR @AcadYearId = 0 or ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @AcadYearId) 
            AND (@EdCodeSemesterId IS NULL OR @EdCodeSemesterId = 0 or ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId);

OPEN Students
FETCH NEXT FROM Students INTO @EdStudId
WHILE(@@FETCH_STATUS <> -1)
BEGIN 

      declare @Acum_GPA numeric(8,2) = 0,@Acum_CH numeric(8,2) = 0,@Acum_Passed_CH numeric(8,2) = 0, @Acum_POINT numeric(8,2) = 0;
      
      declare @EdStudSemesterId numeric
      DECLARE       Stud_Semester_Cursor CURSOR FOR    -- Get All semesters for the student by order.
      SELECT     ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
      FROM         ED_STUD_SEMESTER INNER JOIN
                                      ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                                      ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
      WHERE     (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) and  (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)
                  AND (@AcadYearId IS NULL OR @AcadYearId = 0 or ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @AcadYearId) 
                  AND (@EdCodeSemesterId IS NULL OR @EdCodeSemesterId = 0 or ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
      order by convert(numeric,ED_ACAD_YEAR.YEAR_CODE) asc,ED_CODE_SEMESTER.SEMESTER_ORDER asc;

      OPEN Stud_Semester_Cursor
      FETCH NEXT FROM Stud_Semester_Cursor INTO @EdStudSemesterId
      WHILE(@@FETCH_STATUS <> -1)
      BEGIN 
            declare @SEM_CH numeric(8,2) = 0, @SEM_Passed_CH numeric(8,2) = 0,@SEM_POINTS numeric(8,2) = 0,@SEM_GPA numeric(8,2)= 0;

            declare @SemesterOrder int,@YearOrder int;
            SELECT     @YearOrder=ED_ACAD_YEAR.YEAR_ORDER, 
                           @SemesterOrder=ED_CODE_SEMESTER.SEMESTER_ORDER
            FROM         ED_STUD_SEMESTER INNER JOIN
                                            ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                                            ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
            WHERE     (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId);
            
            declare @CountCoursesNotHaveGrade int,@CountCoursesReg int;
            select @CountCoursesNotHaveGrade = COUNT(*) from ED_STUD_COURSE_REG where 
            ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @EdStudSemesterId
            and ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is null
            
            select @CountCoursesReg = COUNT(*) from ED_STUD_COURSE_REG where 
            ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @EdStudSemesterId
            
            if(@CountCoursesNotHaveGrade <> @CountCoursesReg)
            begin
                        --get semester CH
                  
                        SELECT   @SEM_CH=sum(ED_COURSE.CREDIT_HOURS) 
                        FROM    ED_STUD_COURSE_REG INNER JOIN
                                          ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                        WHERE     (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID =@EdStudSemesterId)
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and(
                        (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
                        or (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 1) 
                        or (ED_STUD_COURSE_REG.IS_LAST = 0 and ED_STUD_COURSE_REG.REPEAT_FLG = 1)
                        )
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1;
                        
                        --get semester Passed CH
                        SELECT   @SEM_Passed_CH=sum(ED_COURSE.CREDIT_HOURS) 
                        FROM    ED_STUD_COURSE_REG INNER JOIN
                                          ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                        WHERE     (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID =@EdStudSemesterId)
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
                        and(
                        (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
                        or (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 1) 
                        or (ED_STUD_COURSE_REG.IS_LAST = 0 and ED_STUD_COURSE_REG.REPEAT_FLG = 1)
                        )
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1;

						declare @Acum_CH_R numeric(8,2) = 0;
                        --get semester Accum CH
                        SELECT  @Acum_CH = SUM(ED_COURSE.CREDIT_HOURS)
                        FROM    ED_STUD_COURSE_REG INNER JOIN
                                          ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                                          ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                          ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                                          ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE   ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and 
                        (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder));
                        
						--get semester Accum CH for repeated courses
						SELECT @Acum_CH_R = sum(ED_COURSE.CREDIT_HOURS)
                        FROM     ED_STUD_COURSE_REG INNER JOIN
                               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                               ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                               ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and ED_STUD_COURSE_REG.REPEAT_FLG = 1
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
                        and ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID in 
                        (
                        SELECT MAX(ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID)
                        FROM     ED_STUD_COURSE_REG INNER JOIN
                               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                               ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                               ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and ED_STUD_COURSE_REG.REPEAT_FLG = 1
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
                        group by ED_COURSE.COURSE_CODE
                        )
                        
                        set @Acum_CH = @Acum_CH + ISNULL(@Acum_CH_R,0);
                        
                        --get semester Accum Passed CH
                        SELECT  @Acum_Passed_CH = SUM(ED_COURSE.CREDIT_HOURS)
                        FROM    ED_STUD_COURSE_REG INNER JOIN
                                          ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                                          ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                          ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                                          ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE   ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
                        and 
                        (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder));

						--get semester Accum Passed CH for repeated courses
						declare @Acum_Passed_CH_R numeric(8,2) = 0;
						SELECT @Acum_Passed_CH_R = sum(ED_COURSE.CREDIT_HOURS)
                        FROM     ED_STUD_COURSE_REG INNER JOIN
                               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                               ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                               ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
                        and ED_STUD_COURSE_REG.REPEAT_FLG = 1
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
                        and ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID in 
                        (
                        SELECT MAX(ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID)
                        FROM     ED_STUD_COURSE_REG INNER JOIN
                               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                               ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                               ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1
                        and ED_STUD_COURSE_REG.REPEAT_FLG = 1
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
                        group by ED_COURSE.COURSE_CODE
                        )
                        
                        set @Acum_Passed_CH = @Acum_Passed_CH + ISNULL(@Acum_Passed_CH_R,0);
                        
                        --get semester Points

                        SELECT   @SEM_POINTS=sum(ED_STUD_COURSE_REG.COURSE_POINT) 
                        FROM       ED_STUD_COURSE_REG 
                        WHERE     (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID =@EdStudSemesterId);
                  
                        --get semester Acum Points
                  
                        SELECT   @Acum_POINT=SUM(ED_STUD_COURSE_REG.COURSE_POINT)
                        FROM    ED_STUD_COURSE_REG INNER JOIN
                                          ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                          ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                                          ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE   ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder));

                        --get semester GPA

                        declare @ActulaCoursepoints numeric(8,2)
                        SELECT   @ActulaCoursepoints = SUM(ED_COURSE.CREDIT_HOURS * ENT_POLICY_GRADING_DTL.POINTS)
                        FROM     ED_STUD_COURSE_REG INNER JOIN
                               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                               ENT_POLICY_GRADING_HDR ON 
                               ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                               ENT_POLICY_GRADING_DTL ON 
                               ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                               ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID AND 
                               ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID
                        WHERE    (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID =@EdStudSemesterId)
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and(
                        (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
                        or (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 1) 
                        or (ED_STUD_COURSE_REG.IS_LAST = 0 and ED_STUD_COURSE_REG.REPEAT_FLG = 1)
                        )
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1;

                        set   @SEM_GPA=@ActulaCoursepoints/@SEM_CH;
                  
                        --get semester Accum GPA
                        declare @AccumActulaCoursepoints numeric(8,2) = 0;
                        SELECT   @AccumActulaCoursepoints=SUM(ED_COURSE.CREDIT_HOURS * ENT_POLICY_GRADING_DTL.POINTS)
                        FROM     ED_STUD_COURSE_REG INNER JOIN
                               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                               ENT_POLICY_GRADING_HDR ON 
                               ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                               ENT_POLICY_GRADING_DTL ON 
                               ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                               ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID AND 
                               ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
                               ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                               ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and 
                        (ED_STUD_COURSE_REG.IS_LAST = 1 and ED_STUD_COURSE_REG.REPEAT_FLG = 0)
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder));
                        
                        --get semester Accum GPA for repeated courses
                        declare @AccumActulaCoursepoints_R numeric(8,2);
                        SELECT @AccumActulaCoursepoints_R=SUM(ED_COURSE.CREDIT_HOURS * ENT_POLICY_GRADING_DTL.POINTS)
                        FROM     ED_STUD_COURSE_REG INNER JOIN
                               ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                               ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                               ENT_POLICY_GRADING_HDR ON 
                               ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                               ENT_POLICY_GRADING_DTL ON 
                               ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                               ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID AND 
                               ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
                               ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                               ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                        WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                        and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
                        and ED_STUD_COURSE_REG.REPEAT_FLG = 1
                        and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
                        and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
                        and ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID in 
                        (
	                    select t1.ED_STUD_COURSE_REG_ID from
						(SELECT ROW_NUMBER()over (ORDER BY ED_ACAD_YEAR.YEAR_ORDER,ED_CODE_SEMESTER.SEMESTER_ORDER) as sn,ED_COURSE.COURSE_CODE,ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
												FROM     ED_STUD_COURSE_REG INNER JOIN
													   ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
													   ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
													   ENT_POLICY_GRADING_HDR ON 
													   ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
													   ENT_POLICY_GRADING_DTL ON 
													   ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
													   ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID AND 
													   ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
													   ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
													   ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
												WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
												and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
												and ED_STUD_COURSE_REG.REPEAT_FLG = 1
												and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
												and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))
						) as t1
						inner join
						(select MAX(t.sn) as sn,t.COURSE_CODE from 
						(SELECT ROW_NUMBER()over (ORDER BY ED_ACAD_YEAR.YEAR_ORDER,ED_CODE_SEMESTER.SEMESTER_ORDER) as sn,ED_COURSE.COURSE_CODE,ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
												FROM     ED_STUD_COURSE_REG INNER JOIN
													   ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
													   ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
													   ENT_POLICY_GRADING_HDR ON 
													   ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
													   ENT_POLICY_GRADING_DTL ON 
													   ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
													   ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID AND 
													   ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
													   ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
													   ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
												WHERE    ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
												and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
												and ED_STUD_COURSE_REG.REPEAT_FLG = 1
												and ED_STUD_COURSE_REG.ADD_GPA_FLG = 1
												and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder or ( ED_ACAD_YEAR.YEAR_ORDER = @YearOrder and ED_CODE_SEMESTER.SEMESTER_ORDER <= @SemesterOrder))) as t
												group by t.COURSE_CODE) as t2
						on t1.COURSE_CODE = t2.COURSE_CODE
						and t1.sn = t2.sn
                        )

						set @AccumActulaCoursepoints = @AccumActulaCoursepoints+isnull(@AccumActulaCoursepoints_R,0);
                        set   @Acum_GPA=@AccumActulaCoursepoints/@Acum_CH;
                  end
                  
            -- update semester Data
                  declare @U_Acum_GPA numeric(5,2) = @Acum_GPA,
                  @U_Acum_CH numeric(5,2) = @Acum_CH,
                  @U_Acum_Passed_CH numeric(5,2) = @Acum_Passed_CH, 
                  @U_Acum_POINT numeric(5,2) = @Acum_POINT,
                  @U_SEM_CH numeric(5,2) = @SEM_CH,
                  @U_SEM_Passed_CH numeric(5,2) = @SEM_Passed_CH,
                  @U_SEM_POINTS numeric(5,2) = @SEM_POINTS,
                  @U_SEM_GPA numeric(5,2) = @SEM_GPA;
                  
            update ED_STUD_SEMESTER 
            set	SEM_CH= @U_SEM_Passed_CH,--@U_SEM_CH,
                  SEM_GPA=@U_SEM_GPA,
                  SEM_POINT=@U_SEM_POINTS,
                  ACCUM_GPA=@U_Acum_GPA ,
                  ACCUM_CH = @U_Acum_Passed_CH,--@U_Acum_CH,
                  ACCUM_POINT = @U_Acum_POINT
            where ED_STUD_SEMESTER_ID=@EdStudSemesterId;
            
            FETCH NEXT FROM Stud_Semester_Cursor INTO @EdStudSemesterId;
      end
      CLOSE Stud_Semester_Cursor
      DEALLOCATE Stud_Semester_Cursor

      FETCH NEXT FROM Students INTO @EdStudId
end
CLOSE Students
DEALLOCATE Students



select t1.ED_STUD_ID,t1.CREDIT_HOURS as CCH, (t2.Points / t1.CREDIT_HOURS) as CGPA, ((t2.TotStudentPoints/t2.TotCoursePoints)*100) as CPrecent -- for all closed semester
from
(SELECT     SUM(ED_COURSE.CREDIT_HOURS) AS CREDIT_HOURS, ED_STUD_SEMESTER.ED_STUD_ID
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_SEMESTER_OPEN ON ED_STUD_SEMESTER.ED_SEMESTER_OPEN_ID = ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
WHERE     (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1) AND (ED_STUD_COURSE_REG.IS_LAST = 1) AND (ED_SEMESTER_OPEN.IS_CLOSED = 1) AND 
                      (ED_STUD_COURSE_REG.ADD_GPA_FLG = 1) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) 
                      AND (@Selected_EdStudId is null or @Selected_EdStudId=0 or ED_STUD_SEMESTER.ED_STUD_ID = @Selected_EdStudId)
GROUP BY ED_STUD_SEMESTER.ED_STUD_ID)as t1
inner join
(SELECT     SUM(ISNULL(ENT_POLICY_GRADING_DTL.POINTS, 0) * ED_COURSE.CREDIT_HOURS) AS Points, ED_STUD_SEMESTER.ED_STUD_ID,SUM(ENT_POLICY_GRADING_DTL.POINTS) as TotCoursePoints,sum(ISNULL(ED_STUD_COURSE_REG.COURSE_POINT,0)) as TotStudentPoints
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ENT_POLICY_GRADING_HDR ON 
                      ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                      ENT_POLICY_GRADING_DTL ON 
                      ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                      ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID AND 
                      ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
                      ED_SEMESTER_OPEN ON ED_STUD_SEMESTER.ED_SEMESTER_OPEN_ID = ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
WHERE     (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1) AND (ED_STUD_COURSE_REG.IS_LAST = 1) AND (ED_SEMESTER_OPEN.IS_CLOSED = 1) AND 
                      (ED_STUD_COURSE_REG.ADD_GPA_FLG = 1) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
                      AND (@Selected_EdStudId is null or @Selected_EdStudId=0 or ED_STUD_SEMESTER.ED_STUD_ID = @Selected_EdStudId)
GROUP BY ED_STUD_SEMESTER.ED_STUD_ID)as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="DeleteAllStudRelatedRecords" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_STATE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
             begin transaction

              delete from SE_USER_ACCNT
              where SE_USER_ACCNT.SE_USER_ID in (
              select SE_USER.SE_USER_ID from SE_USER
              where SE_USER.ED_STUD_ID=@EdStudId
              )

              delete from SE_USER
              where SE_USER.ED_STUD_ID=@EdStudId

              delete from ED_STUD_STATE_TEMP where ED_STUD_ID=@EdStudId
				
				      delete from ED_STUD_COURSE_REG_TEMP where ED_STUD_ID=@EdStudId
  delete  from SV_USER_MESSAGE where SE_USER_ID in (
                          select SE_USER_ID from SE_USER where ed_stud_id=@EdStudId
                          )
                           delete  from FEE_STUD_FEE_ITEM where  ED_STUD_ID=@EdStudId  
              delete from ED_STUD_STATE where ED_STUD_STATE.ED_STUD_SEMESTER_ID in(select ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER
              where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId)


delete from ED_STUD_COURSE_REG where ED_STUD_SEMESTER_ID in (select ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER where ED_STUD_ID = @EdStudId)
update ADM_APPLICANT set ED_STUD_ID = null,TRANSFER_FLG = 0 where ED_STUD_ID = @EdStudId

              delete from ED_STUD_SEMESTER
              where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId


              delete from ED_STUD_FACULTY
              where ED_STUD_FACULTY.ED_STUD_ID=@EdStudId

              delete from ED_STUD_CONTACT_METHOD
              where ED_STUD_ID=@EdStudId
              
              delete from ED_STUD_MILITARY_INFO
              where ED_STUD_ID=@EdStudId
              
              delete from ED_STUD_QUAL
              where ED_STUD_ID=@EdStudId
              
              delete from ED_STUD
              where ED_STUD_ID=@EdStudId
               IF @@ERROR <> 0
                 BEGIN
                    ROLLBACK

                    RETURN
                 END
                commit transaction;
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="LoadAgendaFeesOnStudent" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_STATE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ActivityId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

          declare @Amount numeric(5,2),@FeeCodeItemId numeric
          SELECT     @Amount=FEE_SEMESTER_AGENDA.AMOUNT,@FeeCodeItemId=FEE_CODE_ITEM_ID
          FROM         FEE_SEMESTER_AGENDA INNER JOIN
                                ED_SEMESTER_AGENDA ON 
                                FEE_SEMESTER_AGENDA.ED_SEMESTER_AGENDA_ID = ED_SEMESTER_AGENDA.ED_SEMESTER_AGENDA_ID INNER JOIN
                                ED_SEMESTER_OPEN ON ED_SEMESTER_AGENDA.ED_SEMESTER_OPEN_ID = ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
                                INNER JOIN ENTITY_MAIN ON ENTITY_MAIN.ENT_MAIN_ID=ED_SEMESTER_OPEN.ENT_MAIN_ID
          WHERE                 (ED_SEMESTER_AGENDA.ED_CODE_SEM_ACTVITY_ID = @ActivityId) AND 
                                (ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                                (ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND
                                (ED_SEMESTER_OPEN.IS_CURRENT = 1)AND
                                (ENTITY_MAIN.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
                                              
          declare @MaxFeeStudFeeItemId numeric
          select @MaxFeeStudFeeItemId=MAX(FEE_STUD_FEE_ITEM_ID) from [dbo].[FEE_STUD_FEE_ITEM] 
          if(@MaxFeeStudFeeItemId is null)
             set @MaxFeeStudFeeItemId=0;
          set @MaxFeeStudFeeItemId=@MaxFeeStudFeeItemId+1; 

          declare @GsCodeCurrencyId numeric
          select top 1 @GsCodeCurrencyId=GS_CODE_CURRENCY_ID from GS_CODE_CURRENCY where IS_CURRENCY_LOCAL=1;

          INSERT INTO [dbo].[FEE_STUD_FEE_ITEM]
                     (
                         [FEE_STUD_FEE_ITEM_ID]
                         ,[AS_FACULTY_INFO_ID]
                         ,[ED_ACAD_YEAR_ID]
                         ,[ED_CODE_SEMESTER_ID]
                         ,[ED_STUD_ID]
                         ,[FEE_CODE_TYPE_ID]
                         ,[FEE_FACULTY_ITEM_ID]
                         ,[FEE_ITEM_VALUE]
                         ,[REMAIN_AMOUNT]
                         ,[GS_CODE_CURRENCY_ID]
                         ,[DISC_AMOUNT]
                         ,[FEE_CODE_ITEM_ID]
                     )
               
                   values
                   ( 
				               @MaxFeeStudFeeItemId,
				               @AsFacultyInfoId,
				               @EdAcadYearId,
				               @EdCodeSemesterId,
				               @EdStudId,
				               2,
				               null,
				               0,
				               @Amount,
				               @GsCodeCurrencyId,
				               0,
				               @FeeCodeItemId
		                )
             
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="UpdateStudState" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
updated by dalia farouk to add flag that check if i want to create user for these students or not
-- Purpose: Inserts a record into the ED_STUD_STATE table
--Updated by dalia to add the fields that added to ed_stud_faculty 13-12-2012
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@UserId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@StudFacCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@EdCodeSemester" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@CreateUserFlag" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Flage" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AS_CODE_DEGREE_ID" type="numeric" direction="Input" size="30" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@ED_CDE_QUAL_PHASE" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ENROLL_DATE" type="datetime" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ADM_CDE_APP_TYPE_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ED_STUD_QUAL_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />

      </parameters>
      <body>
        <![CDATA[
				
              
                declare @EdStudStateId numeric(9,0)
                declare @EdSemesterOpenId numeric(5,0)
                declare @UnivEntMainId numeric(5,0)
                declare @Count int
                declare @ExpireDate datetime
                declare @TodayDate datetime
                declare @FacProgEntMainId numeric(5,0)
                declare @EdCodeSemesterId numeric(5,0)
                declare @FacEntMainId numeric(5,0)
 declare @CreatorUserId numeric(5,0)
          declare @EdStudName nvarchar(150)
          
                select @UnivEntMainId=ENTITY_MAIN.ENT_MAIN_ID
                from  ENTITY_MAIN
                where ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=1

declare @path nvarchar(7);
select @path = SUBSTRING(ENTITY_MAIN.NODE_PATH,0,7) from ENTITY_MAIN 
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;
select @FacProgEntMainId=ENTITY_MAIN.ENT_MAIN_ID from ENTITY_MAIN where ENTITY_MAIN.NODE_PATH = @path;
--updated by dalia to get the entitymain of faculty get the entitymain of faculty or program

 select @FacEntMainId=ENTITY_MAIN.ENT_MAIN_ID
          from ENTITY_MAIN
          where ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID in (2,14)
          and as_faculty_info_id in (
          select as_faculty_info_id from ENTITY_MAIN where ent_main_id=@EntMainId
          )


                select @EdSemesterOpenId=ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
                ,@EdCodeSemesterId=ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID
                from ED_SEMESTER_OPEN
                where ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID=@EdAcadYearId
                and ED_SEMESTER_OPEN.ENT_MAIN_ID=@FacEntMainId
                and ED_SEMESTER_OPEN.IS_CURRENT=1
                and ED_SEMESTER_OPEN.IS_CLOSED=0
           
                if(@EdSemesterOpenId is null)
                  Begin
                  if(@EdCodeSemester is null)
                  Begin
                    RAISERROR('ERR_NO_OPENED_SEM',16,-1)
                   RETURN
                  
                  End
                  else 
                  begin
                 set  @EdCodeSemesterId=@EdCodeSemester;
                   end
                  End
                
               
                set @EdStudStateId=0;

                SELECT @Count=isnull(count(*),0)
                 from ED_STUD_STATE inner join ED_STUD_SEMESTER on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                 inner join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID=ED_STUD_STATE.ENT_MAIN_ID
                where 
                 ED_STUD_STATE.ED_CODE_STATE_STATUS_ID=1
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId 
                and ENTITY_MAIN.IS_HOME_FLG=1
                and ED_STUD_STATE.IS_DECLARED=1

                begin transaction
                declare @countFacCode numeric;
                select @countFacCode = isnull( count(*),0) from ed_stud_faculty where ed_stud_id = @EdStudId and As_Faculty_Info_ID =  @AsFacultyInfoId and ED_ACAD_YEAR_JOIN_ID = @EdAcadYearId
                      
                if(@Count=0 or @countFacCode = 0)
            
                begin
                
                declare @IS_ACTIVE numeric(1,0)
                declare @GRADUATES_FLAG numeric(1,0)
                set @IS_ACTIVE=1
                set @GRADUATES_FLAG=0
                declare @MaxEdStudFacultyId numeric(9,0)
	              select @MaxEdStudFacultyId = max(ED_STUD_FACULTY_ID) from  dbo.[ED_STUD_FACULTY]
		             if(@MaxEdStudFacultyId is null)
			             set @MaxEdStudFacultyId=0
		             set @MaxEdStudFacultyId = @MaxEdStudFacultyId+1
		               INSERT INTO dbo.[ED_STUD_FACULTY]
	             (
		               [ED_STUD_FACULTY_ID] , 
		               [AS_FACULTY_INFO_ID] , 
		               [ED_STUD_ID] , 
                  [STUD_FACULTY_CODE] ,
                   [GRADUATES_FLAG],
                   [IS_ACTIVE] ,
                   ED_ACAD_YEAR_JOIN_ID,
                   AS_CODE_DEGREE_ID,
                   ED_CDE_QUAL_PHASE,
                   ENROLL_DATE,
                   ADM_CDE_APP_TYPE_ID,
                   ED_STUD_QUAL_ID
                   
	            )
	             VALUES 
	             (
		             @MaxEdStudFacultyId ,
		             @AsFacultyInfoId ,
		             @EdStudId ,
                 @StudFacCode,
                 @GRADUATES_FLAG,
                 @IS_ACTIVE ,
                 @EdAcadYearId,
                  @AS_CODE_DEGREE_ID,
                   @ED_CDE_QUAL_PHASE,
                   @ENROLL_DATE,
                   @ADM_CDE_APP_TYPE_ID,
                   @ED_STUD_QUAL_ID
	            )
              if(@Flage=1)
              begin
           if(@Lang=1)--arabic
          begin
           select @EdStudName=ED_STUD.FULL_NAME_AR from ED_STUD where ED_STUD.ED_STUD_ID=@EdStudId
          end
          else
          begin
           select @EdStudName=ED_STUD.FULL_NAME_EN from ED_STUD where ED_STUD.ED_STUD_ID=@EdStudId
          end

          select @ExpireDate=Dateadd(year ,3, Getdate());
          select @TodayDate=Getdate();
set @CreatorUserId=@EdStudId

          exec [dbo].[SE_USER_I] 1,'',null,@FacProgEntMainId,2,null,null,@EdStudName,@EdStudName,@StudFacCode,@StudFacCode
          ,@ExpireDate ,'What is your name?',@EdStudName,@CreatorUserId,@TodayDate,1,0,null,null,null,null,null,null,null,null,
          @TodayDate,null,@EdStudId,null

          end 
            end        
                  declare @MaxEdStudSemId numeric(9,0)
                  
                  IF NOT EXISTS (SELECT ED_STUD_SEMESTER_ID FROM dbo.ED_STUD_SEMESTER WHERE ED_CODE_SEMESTER_ID = @EdCodeSemesterId AND ED_ACAD_YEAR_ID = @EdAcadYearId
                  AND ED_STUD_ID = @EdStudId AND AS_FACULTY_INFO_ID = @AsFacultyInfoId AND ED_SEMESTER_OPEN_ID = @EdSemesterOpenId)
                  begin
					  select @MaxEdStudSemId=isnull(MAX(ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID),0) from ED_STUD_SEMESTER 
						  if(@MaxEdStudSemId=0)
						   set @MaxEdStudSemId=1;
						  else
						   set @MaxEdStudSemId=@MaxEdStudSemId+1;

					   insert into ED_STUD_SEMESTER 
					   (ED_STUD_SEMESTER_ID,ED_CODE_SEMESTER_ID,ED_STUD_ID,ED_ACAD_YEAR_ID,AS_FACULTY_INFO_ID,ED_CODE_LEVEL_ID,IS_LAST
					   ,ED_CODE_LOAD_TYPE_ID,ED_CODE_ENROLL_TYPE_ID,ACCUM_CH,ACCUM_GPA,IS_COURSE_APPROVED,ACCUM_POINT,SEM_CH,SEM_GPA
					   ,SEM_POINT,ED_SEMESTER_OPEN_ID,IS_CLOSED)
					   values
					   (@MaxEdStudSemId,@EdCodeSemesterId,@EdStudId,@EdAcadYearId,@AsFacultyInfoId,1,1
					   ,1,1,null,null,0,null,null,null,
					   null,@EdSemesterOpenId,0)
				   END
				   ELSE
				   BEGIN
						SELECT @MaxEdStudSemId = ED_STUD_SEMESTER_ID FROM dbo.ED_STUD_SEMESTER WHERE ED_CODE_SEMESTER_ID = @EdCodeSemesterId AND ED_ACAD_YEAR_ID = @EdAcadYearId
						AND ED_STUD_ID = @EdStudId AND AS_FACULTY_INFO_ID = @AsFacultyInfoId AND ED_SEMESTER_OPEN_ID = @EdSemesterOpenId
				   END
           
           declare @MaxEdStudStateSemId numeric(9,0)
          

			IF NOT EXISTS( SELECT dbo.ED_STUD_STATE.ED_STUD_STATE_ID FROM dbo.ED_STUD_STATE WHERE ED_STUD_SEMESTER_ID = @MaxEdStudSemId
			AND ENT_MAIN_ID = @UnivEntMainId)
			BEGIN
			
				select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateSemId=0)
	           set @MaxEdStudStateSemId=1;
	          else
	           set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;
				
			  insert into ED_STUD_STATE--insert university state
			  (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
			  values
			  (@MaxEdStudStateSemId,@MaxEdStudSemId,@UnivEntMainId,null,null,1,@AsFacultyInfoId,1)

			 select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
				  if(@MaxEdStudStateSemId=0)
				   set @MaxEdStudStateSemId=1;
				  else
				   set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;
			END

			IF NOT EXISTS( SELECT dbo.ED_STUD_STATE.ED_STUD_STATE_ID FROM dbo.ED_STUD_STATE WHERE ED_STUD_SEMESTER_ID = @MaxEdStudSemId
			AND ENT_MAIN_ID = @FacProgEntMainId)
			BEGIN
			
				select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateSemId=0)
	           set @MaxEdStudStateSemId=1;
	          else
	           set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;
	           
			  insert into ED_STUD_STATE--insert faculty/program state
			  (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
			  values
			  (@MaxEdStudStateSemId,@MaxEdStudSemId,@FacProgEntMainId,null,null,1,@AsFacultyInfoId,1)
           end
           
            

		IF NOT EXISTS (SELECT 1 FROM dbo.ED_STUD_STATE WHERE ED_STUD_SEMESTER_ID = @MaxEdStudSemId AND ENT_MAIN_ID = @EntMainId)
		BEGIN
			
			select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateSemId=0)
	           set @MaxEdStudStateSemId=1;
	          else
	           set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;
		
          insert into ED_STUD_STATE--insert selected home state
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateSemId,@MaxEdStudSemId,@EntMainId,null,null,1,@AsFacultyInfoId,1)
          end
             
                
                else
                begin
                
                declare @OldAsFacultyInfoId numeric(7,0)
                
                select @OldAsFacultyInfoId=ED_STUD_STATE.[AS_FACULTY_INFO_ID]
                from ED_STUD_STATE inner join ED_STUD_SEMESTER on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                inner join entity_main on entity_main.ent_main_id=ED_STUD_STATE.ent_main_id
                where ED_STUD_STATE.ED_CODE_STATE_STATUS_ID=1
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
                and entity_main.IS_HOME_FLG=1
                and ED_STUD_STATE.IS_DECLARED=1
                
                update dbo.[ED_STUD_FACULTY]
                set [AS_FACULTY_INFO_ID]=@AsFacultyInfoId
                ,STUD_FACULTY_CODE=@StudFacCode
                where dbo.[ED_STUD_FACULTY].[ED_STUD_ID]=@EdStudId
                and [AS_FACULTY_INFO_ID]=@OldAsFacultyInfoId
                 
                
                
                update ED_STUD_SEMESTER
                set ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
                 where ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID in
                (select ED_STUD_SEMESTER.ED_STUD_SEMESTER_id from ED_STUD_SEMESTER 
                inner join ed_stud_state on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                inner join entity_main on entity_main.ent_main_id=ED_STUD_STATE.ent_main_id
                where ED_STUD_STATE.ED_CODE_STATE_STATUS_ID=1
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
                and entity_main.IS_HOME_FLG=1
                and ED_STUD_STATE.IS_DECLARED=1)
                
                select @MaxEdStudSemId=ED_STUD_SEMESTER.ED_STUD_SEMESTER_id from ED_STUD_SEMESTER 
                inner join ed_stud_state on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                inner join entity_main on entity_main.ent_main_id=ED_STUD_STATE.ent_main_id
                where ED_STUD_STATE.ED_CODE_STATE_STATUS_ID=1
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
                and entity_main.IS_HOME_FLG=1
                and ED_STUD_STATE.IS_DECLARED=1
                
                 delete from ED_STUD_STATE
                 from  ed_stud_state
                inner join ED_STUD_SEMESTER on ED_STUD_STATE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                inner join entity_main on entity_main.ent_main_id=ED_STUD_STATE.ent_main_id
                where ED_STUD_STATE.ED_CODE_STATE_STATUS_ID=1
                and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
                and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
                and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
                and entity_main.IS_HOME_FLG=1
                and ED_STUD_STATE.IS_DECLARED=1
                
                IF NOT EXISTS (SELECT 1 FROM dbo.ED_STUD_STATE WHERE ED_STUD_SEMESTER_ID = @MaxEdStudSemId AND ENT_MAIN_ID = @UnivEntMainId)
		begin
          select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateSemId=0)
	           set @MaxEdStudStateSemId=1;
	          else
	           set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;

                 insert into ED_STUD_STATE--insert university state
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateSemId,@MaxEdStudSemId,@UnivEntMainId,null,null,1,@AsFacultyInfoId,1)
END

    IF NOT EXISTS (SELECT 1 FROM dbo.ED_STUD_STATE WHERE ED_STUD_SEMESTER_ID = @MaxEdStudSemId AND ENT_MAIN_ID = @FacProgEntMainId)
		begin
          select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateSemId=0)
	           set @MaxEdStudStateSemId=1;
	          else
	           set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;

          insert into ED_STUD_STATE--insert faculty/program state
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateSemId,@MaxEdStudSemId,@FacProgEntMainId,null,null,1,@AsFacultyInfoId,1)
           END
           
            
IF NOT EXISTS (SELECT 1 FROM dbo.ED_STUD_STATE WHERE ED_STUD_SEMESTER_ID = @MaxEdStudSemId AND ENT_MAIN_ID = @EntMainId)
		BEGIN
		select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateSemId=0)
	           set @MaxEdStudStateSemId=1;
	          else
	           set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;
		
          insert into ED_STUD_STATE--insert selected home state
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateSemId,@MaxEdStudSemId,@EntMainId,null,null,1,@AsFacultyInfoId,1)
                end

                end

                 IF @@ERROR <> 0
                   BEGIN
                      ROLLBACK

                      RETURN
                   END
                  commit transaction;
			
			
			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="InsertStudSemStateUser" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_STATE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@CreatorUserId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        begin transaction
          declare @EdSemesterOpenId numeric(5,0)
          declare @ExpireDate datetime
          declare @TodayDate datetime
          declare @EdStudName nvarchar(150)
          declare @UnivEntMainId numeric(5,0)


          select @UnivEntMainId=ENTITY_MAIN.ENT_MAIN_ID
          from ENTITY_MAIN
          where ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=1

          select @EdSemesterOpenId=ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
          from ED_SEMESTER_OPEN
          where ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID=@EdAcadYearId
          and ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
          and ED_SEMESTER_OPEN.ENT_MAIN_ID=@EntityMainId
          and ED_SEMESTER_OPEN.IS_CURRENT=1
          and ED_SEMESTER_OPEN.IS_CLOSED=0

          if(@EdSemesterOpenId is null)
                  Begin
                    RAISERROR('ERR_NO_OPENED_SEM',16,-1)
                    RETURN
                  End
                  
         declare @IS_ACTIVE numeric(1,0)
          declare @GRADUATES_FLAG numeric(1,0)
          set @IS_ACTIVE=1
          set @GRADUATES_FLAG=0
          declare @MaxEdStudFacultyId numeric(9,0)
	        select @MaxEdStudFacultyId = max(ED_STUD_FACULTY_ID) from  dbo.[ED_STUD_FACULTY]
		       if(@MaxEdStudFacultyId is null)
			       set @MaxEdStudFacultyId=0
		       set @MaxEdStudFacultyId = @MaxEdStudFacultyId+1
           
		       INSERT INTO dbo.[ED_STUD_FACULTY]
	       (
		         [ED_STUD_FACULTY_ID] , 
		         [AS_FACULTY_INFO_ID] , 
		         [ED_STUD_ID] ,            
             [GRADUATES_FLAG],
             [IS_ACTIVE] ,
             ED_ACAD_YEAR_JOIN_ID
	      )
	       VALUES 
	       (
		       @MaxEdStudFacultyId ,
		       @AsFacultyInfoId ,
		       @EdStudId ,
           @GRADUATES_FLAG,
           @IS_ACTIVE ,
           @EdAcadYearId
	      )

          if exists
          (select 'd'
          from ED_STUD_SEMESTER
          where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
          and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
          and ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=1 and ED_STUD_SEMESTER.IS_LAST=1
          )
          begin--insert states

          declare @EdStudSemId numeric(7,0)
          select @EdStudSemId=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
          from ED_STUD_SEMESTER
          where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
          and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
          and ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=1 and ED_STUD_SEMESTER.IS_LAST=1

          declare @MaxEdStudStateId numeric(9,0)
          select @MaxEdStudStateId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateId=0)
	           set @MaxEdStudStateId=1;
	          else
	           set @MaxEdStudStateId=@MaxEdStudStateId+1;


          insert into ED_STUD_STATE
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateId,@EdStudSemId,@UnivEntMainId,null,null,1,@AsFacultyInfoId,1)

          set @MaxEdStudStateId=@MaxEdStudStateId+1;

          insert into ED_STUD_STATE
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateId,@EdStudSemId,@EntityMainId,null,null,1,@AsFacultyInfoId,1)

          if(@Lang=1)--arabic
          begin
           select @EdStudName=ED_STUD.FULL_NAME_AR from ED_STUD where ED_STUD.ED_STUD_ID=@EdStudId
          end
          else
          begin
           select @EdStudName=ED_STUD.FULL_NAME_EN from ED_STUD where ED_STUD.ED_STUD_ID=@EdStudId
          end

          select @ExpireDate=Dateadd(year ,3, Getdate());
          select @TodayDate=Getdate();

          exec [dbo].[SE_USER_I] 1,'',null,@EntityMainId,2,null,null,@EdStudName,@EdStudName,@EdStudName,@EdStudName
          ,@ExpireDate ,'What is your name?',@EdStudName,@CreatorUserId,@TodayDate,1,0,null,null,null,null,null,null,null,null,
          @TodayDate,null,@EdStudId,null

          end
          else--add new stud semester
          begin

          declare @MaxEdStudSemId numeric(9,0)
          select @MaxEdStudSemId=isnull(MAX(ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID),0) from ED_STUD_SEMESTER 
	          if(@MaxEdStudSemId=0)
	           set @MaxEdStudSemId=1;
	          else
	           set @MaxEdStudSemId=@MaxEdStudSemId+1;

           insert into ED_STUD_SEMESTER 
           (ED_STUD_SEMESTER_ID,ED_CODE_SEMESTER_ID,ED_STUD_ID,ED_ACAD_YEAR_ID,AS_FACULTY_INFO_ID,ED_CODE_LEVEL_ID,IS_LAST
           ,ED_CODE_LOAD_TYPE_ID,ED_CODE_ENROLL_TYPE_ID,ACCUM_CH,ACCUM_GPA,IS_COURSE_APPROVED,ACCUM_POINT,SEM_CH,SEM_GPA
           ,SEM_POINT,ED_SEMESTER_OPEN_ID,IS_CLOSED)
           values
           (@MaxEdStudSemId,@EdCodeSemesterId,@EdStudId,@EdAcadYearId,@AsFacultyInfoId,1,1
           ,1,1,null,null,0,null,null,null,
           null,@EdSemesterOpenId,0)
           
           declare @MaxEdStudStateSemId numeric(9,0)
          select @MaxEdStudStateSemId=isnull(MAX(ED_STUD_STATE.ED_STUD_STATE_ID),0) from ED_STUD_STATE 
	          if(@MaxEdStudStateSemId=0)
	           set @MaxEdStudStateSemId=1;
	          else
	           set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;

          insert into ED_STUD_STATE
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateSemId,@MaxEdStudSemId,@UnivEntMainId,null,null,1,@AsFacultyInfoId,1)

          set @MaxEdStudStateSemId=@MaxEdStudStateSemId+1;

          insert into ED_STUD_STATE
          (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,TOT_CH,FULLFILLED_CH,ED_CODE_STATE_STATUS_ID,AS_FACULTY_INFO_ID,IS_DECLARED)
          values
          (@MaxEdStudStateSemId,@MaxEdStudSemId,@EntityMainId,null,null,1,@AsFacultyInfoId,1)
           
          if(@Lang=1)--arabic
          begin
           select @EdStudName=ED_STUD.FULL_NAME_AR from ED_STUD where ED_STUD.ED_STUD_ID=@EdStudId
          end
          else
          begin
           select @EdStudName=ED_STUD.FULL_NAME_EN from ED_STUD where ED_STUD.ED_STUD_ID=@EdStudId
          end

          select @ExpireDate=Dateadd(year ,3, Getdate());
          select @TodayDate=Getdate();

          exec [dbo].[SE_USER_I] 1,'',null,@EntityMainId,2,null,null,@EdStudName,@EdStudName,@EdStudName,@EdStudName
          ,@ExpireDate ,'What is your name?',@EdStudName,@CreatorUserId,@TodayDate,1,0,null,null,null,null,null,null,null,null,
          @TodayDate,null,@EdStudId,null
           
          end
					
           IF @@ERROR <> 0
           BEGIN
              ROLLBACK

              RETURN
           END
          commit transaction;
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="BatchCourseDeclaration" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_STATE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@StateCode" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@YearCalendar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@SemesterDescrEn" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@TOT_CH" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@FULLFILLED_CH" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ED_CODE_STATE_STATUS_Descer" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
         declare @EdStudId numeric,@ErrStudCode nvarchar(150),@EdCourseId numeric,@EdAcadYearId numeric,@ErrAcadYear nvarchar(150),
        @ErrCourseCode nvarchar(150),@AsFacultyInfoId numeric,@EdCodeSemesterId numeric,@ErrSemester nvarchar(150),
        @EntityMainId numeric,@ErrStateCode nvarchar(150),@EdCodeStateStatusId numeric,@ErrStateStatueDescr nvarchar(150)
        
        
        
        
        
        
        
        select @EdStudId=ED_STUD_ID ,
               @AsFacultyInfoId=AS_FACULTY_INFO_ID
        from ED_STUD_FACULTY where ED_STUD_FACULTY.STUD_FACULTY_CODE =@StudCode;
        if(@EdStudId is null)
          Begin
            set @ErrStudCode='Stud_Code='+@StudCode
            RAISERROR(@ErrStudCode,16,-1)
            RETURN
          End
        
        
        
        
         -- check on Semester Descr existing
        select @EntityMainId=ENT_MAIN_ID from ENTITY_MAIN where STATE_NOTATION=@StateCode
        if(@EntityMainId is null)
          Begin
            set @ErrStateCode='State_Code='+@StateCode
            RAISERROR(@ErrStateCode,16,-1)
            RETURN
          End
        
        
        
         -- check on Semester Descr existing
        select @EdCodeSemesterId=ED_CODE_SEMESTER_ID from ED_CODE_SEMESTER where DESCR_EN=@SemesterDescrEn
        if(@EdCodeSemesterId is null)
          Begin
            set @ErrSemester='Semester_Code='+@SemesterDescrEn
            RAISERROR(@ErrSemester,16,-1)
            RETURN
          End
        
        
        
          -- check on AcadYearExist
        select @EdAcadYearId=ED_ACAD_YEAR_ID from ED_ACAD_YEAR where YEAR_CALENDER=@YearCalendar
        if(@EdAcadYearId is null)
          Begin
            set @ErrAcadYear='AcademicYear='+@YearCalendar
            RAISERROR(@ErrAcadYear,16,-1)
            RETURN
          End
          
          
          
            -- check on StateStatusSymbol
        select @EdCodeStateStatusId=ED_CODE_STATE_STATUS_ID from ED_CODE_STATE_STATUS where DESCR_EN=@ED_CODE_STATE_STATUS_Descer
        if(@EdCodeStateStatusId is null)
          Begin
            set @ErrStateStatueDescr='StateStatusError='
            RAISERROR(@ErrStateStatueDescr,16,-1)
            RETURN
          End  
          
          
        
        
        declare @ED_STUD_SEMESTER_ID numeric
      select @ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER WHERE
                      ED_STUD_ID=@EdStudId AND 
                      ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND
                      ED_ACAD_YEAR_ID=@EdAcadYearId AND 
                      AS_FACULTY_INFO_ID=@AsFacultyInfoId  
                      
                      
                      
                      
                      
             if(@ED_STUD_SEMESTER_ID is null)
             Begin
             declare @MaxED_STUD_SEMESTER_ID numeric
               select @MaxED_STUD_SEMESTER_ID =max(ED_STUD_SEMESTER_ID)from ED_STUD_SEMESTER
                      if(@MaxED_STUD_SEMESTER_ID is null)
                         set @MaxED_STUD_SEMESTER_ID =0;
                       set @MaxED_STUD_SEMESTER_ID =@MaxED_STUD_SEMESTER_ID +1;
              
         	         INSERT INTO [dbo].[ED_STUD_SEMESTER]
				            (
				              [ED_STUD_SEMESTER_ID],[ED_CODE_SEMESTER_ID],[ED_STUD_ID],[ED_ACAD_YEAR_ID]
				              ,[AS_FACULTY_INFO_ID],[IS_LAST]
				            )
			              VALUES
				            (
				               @MaxED_STUD_SEMESTER_ID,@EdCodeSemesterId,@EdStudId,@EdAcadYearId
				            ,@AsFacultyInfoId,1
				           )
                  SET @ED_STUD_SEMESTER_ID=@MaxED_STUD_SEMESTER_ID;         
             End
             
        
        
        
        
				
           declare @MaxEdStudStateId numeric(9,0)
        select  @MaxEdStudStateId =max(ED_STUD_STATE_ID)from ED_STUD_STATE;
         if( @MaxEdStudStateId is null)
            set  @MaxEdStudStateId=0;
            
          set  @MaxEdStudStateId= @MaxEdStudStateId+1;  
          

        if not exists(Select 'a' from ED_STUD_STATE where ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID and 
        ENT_MAIN_ID=@EntityMainId and AS_FACULTY_INFO_ID=@AsFacultyInfoId)
        
				      INSERT INTO [dbo].[ED_STUD_STATE]
					      (
					       [ED_STUD_STATE_ID]
					      ,[ED_STUD_SEMESTER_ID]
					      ,[ENT_MAIN_ID]
					      ,[AS_FACULTY_INFO_ID]
                ,TOT_CH
                ,FULLFILLED_CH
                ,ED_CODE_STATE_STATUS_ID
					      )
				      VALUES
					      (
				 	      @MaxEdStudStateId
					      ,@ED_STUD_SEMESTER_ID
					      ,@EntityMainId
					      ,@AsFacultyInfoId
                ,@TOT_CH
                ,@FULLFILLED_CH
                ,@EdCodeStateStatusId
					      )
				else
           Begin
               RAISERROR('StudState_Exist',16,-1)
            RETURN
           End
        
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_STATE_GetRegisteredCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_STATE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				SELECT     ED_STUD_COURSE_REG.ED_COURSE_ID
				FROM         ED_STUD_STATE INNER JOIN
									  ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
									  ENT_COURSE_PKG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_COURSE_PKG_HDR.ENT_MAIN_ID INNER JOIN
									  ENT_COURSE_PKG_DTL ON 
									  ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
									  ED_COURSE ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
									  ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID
				WHERE     (ED_STUD_STATE.ED_STUD_SEMESTER_ID = @EdStudSemesterId) 
				AND (ED_STUD_STATE.ENT_MAIN_ID = @EntMainId) AND 
				(ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @EdStudSemesterId)
				
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="PolicyLoadGetByStudSemesterID">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_LOAD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@StudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
        
       	SELECT
					[ENT_POLICY_LOAD_ID],
					[ED_CODE_SEMESTER_TYPE_ID],
					[SR_NO],
					[LOAD_DESCR_AR],
					[LOAD_DESCR_EN],
					[GPA_FROM],
					[GPA_TO],
					[NO_PRV_SEM],
					[CONT_FLG],
					[REMAIN_CH],
					[MIN_CH],
					[MAX_CH],
					[ENT_MAIN_ID],
					[ED_CODE_STUDY_METHOD_ID],
					[ED_BYLAW_ID],
          [ED_CODE_LEVEL_ID],
          [FLG_ACAD_WARN]
				FROM [dbo].[ComputeAcademicLoad](@StudSemesterId)
				
          
        
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="Sa_Stf_Mem_InsertWithIdOut" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 24, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the SA_STF_MEMBER table
-- Table Comment: البيانات الشخصية لعضو هيئة التدريس والهيئة المعاونة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Output" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@StfCode" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="" />
        <parameter name="@StfFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StfFullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@AsNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SaCodeJobStatusId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SaCodeScDegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@StfNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@StfClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@StfClNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@StfLnameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@StfClLnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@StfFnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@StfLnameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@StfIsAzhary" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FileNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@StfStatusNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@StfNationalIdNum" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="" />
        <parameter name="@StfDob" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@StfRegNum" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@StfRegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@StfMname" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@StfPermAdd" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@StfCurrAdd" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@StfEmpDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeMaritalStateId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCountryNodeId2" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCountryNodeId3" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsContactMethodHId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@StfPhoto" type="nvarchar" direction="Input" size="300" precision="0" scale="0" param="(300)" nulldefault="" />
        <parameter name="@BasicSalary" type="numeric" direction="Input" size="5" precision="6" scale="2" param="(6, 2)" nulldefault="" />
        <parameter name="@PgThesisGeneralSpecId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@PgThesisDetailedSpecId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@DelFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@RetirmentAge" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@OldStfMemberId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EmailPassword" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxSaStfMemberId numeric(9,0)
        select  @MaxSaStfMemberId =max(SA_STF_MEMBER_ID)from SA_STF_MEMBER;
         if( @MaxSaStfMemberId is null)
            set  @MaxSaStfMemberId=0;
            
          set  @MaxSaStfMemberId= @MaxSaStfMemberId+1;    
        
        declare @BirthDate datetime = '2000-01-01' 
        if(@StfDob is not null)
          set @BirthDate=@StfDob;
        declare @YearPart  varchar(5)
        set @YearPart=year(@BirthDate)
        
				exec [dbo].[sp_Generate_Staff_Code] @StfCode output,@AsFacultyInfoId,@YearPart
        
				INSERT INTO [dbo].[SA_STF_MEMBER]
					(
					[SA_STF_MEMBER_ID]
					,[STF_CODE]
					,[STF_FULL_NAME_AR]
					,[STF_FULL_NAME_EN]
					,[AS_NODE_ID]
					,[AS_FACULTY_INFO_ID]
					,[SA_CODE_JOB_STATUS_ID]
					,[SA_CODE_SC_DEG_ID]
					,[STF_NAME_AR]
					,[STF_CL_FULL_NAME_AR]
					,[STF_CL_NAME_AR]
					,[STF_LNAME_AR]
					,[STF_CL_LNAME_AR]
					,[STF_FNAME_EN]
					,[STF_LNAME_EN]
					,[STF_IS_AZHARY]
					,[FILE_NUM]
					,[STF_STATUS_NUM]
					,[STF_NATIONAL_ID_NUM]
					,[STF_DOB]
					,[STF_REG_NUM]
					,[STF_REG_DATE]
					,[STF_MNAME]
					,[STF_PERM_ADD]
					,[STF_CURR_ADD]
					,[STF_EMP_DATE]
					,[GS_CODE_GENDER_ID]
					,[GS_CODE_RELIGION_ID]
					,[GS_CODE_MARITAL_STATE_ID]
					,[GS_COUNTRY_INFO_ID]
					,[GS_COUNTRY_INFO_ID2]
					,[GS_COUNTRY_NODE_ID]
					,[GS_COUNTRY_NODE_ID2]
					,[GS_COUNTRY_NODE_ID3]
					,[GS_CONTACT_METHOD_H_ID]
					,[STF_PHOTO]
					,[BASIC_SALARY]
					,[PG_THESIS_GENERAL_SPEC_ID]
					,[PG_THESIS_DETAILED_SPEC_ID]
					,[DEL_FLAG]
					,[RETIRMENT_AGE]
					,[OLD_STF_MEMBER_ID]
					,[EMAIL_PASSWORD]
					)
				VALUES
					(
					@MaxSaStfMemberId
					,@StfCode
					,@StfFullNameAr
					,@StfFullNameEn
					,@AsNodeId
					,@AsFacultyInfoId
					,@SaCodeJobStatusId
					,@SaCodeScDegId
					,@StfNameAr
					,@StfClFullNameAr
					,@StfClNameAr
					,@StfLnameAr
					,@StfClLnameAr
					,@StfFnameEn
					,@StfLnameEn
					,@StfIsAzhary
					,@FileNum
					,@StfStatusNum
					,@StfNationalIdNum
					,@StfDob
					,@StfRegNum
					,@StfRegDate
					,@StfMname
					,@StfPermAdd
					,@StfCurrAdd
					,@StfEmpDate
					,@GsCodeGenderId
					,@GsCodeReligionId
					,@GsCodeMaritalStateId
					,@GsCountryInfoId
					,@GsCountryInfoId2
					,@GsCountryNodeId
					,@GsCountryNodeId2
					,@GsCountryNodeId3
					,@GsContactMethodHId
					,@StfPhoto
					,@BasicSalary
					,@PgThesisGeneralSpecId
					,@PgThesisDetailedSpecId
					,@DelFlag
					,@RetirmentAge
					,@OldStfMemberId
					,@EmailPassword
					)
				set @SaStfMemberId=@MaxSaStfMemberId;
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetDepartmentStaff">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@DeptEntMainId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Lang" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
				SET ANSI_NULLS OFF
				
        declare @DeptPath nvarchar(90)
        
        select @DeptPath=ENTITY_MAIN.NODE_PATH
        from   ENTITY_MAIN 
        where  ENTITY_MAIN.ENT_MAIN_ID=@DeptEntMainId
        
        
				SELECT
					SA_STF_MEMBER.*,
          SA_CODE_JOB_STATUS.JOB_STATUS_DESCR,
          SA_CODE_SC_DEG.SC_DEG_DESCR_AR,
          SA_CODE_SC_DEG.SC_DEG_DESCR_EN,
          ENTITY_MAIN.ENT_DESCR_AR,
          ENTITY_MAIN.ENT_DESCR_EN
          
          from   SA_STF_MEMBER inner join ENTITY_MAIN on SA_STF_MEMBER.AS_NODE_ID=ENTITY_MAIN.ENT_MAIN_ID
                 left outer join SA_CODE_JOB_STATUS on SA_STF_MEMBER.SA_CODE_JOB_STATUS_ID=SA_CODE_JOB_STATUS.SA_CODE_JOB_STATUS_ID
                 left outer join SA_CODE_SC_DEG on SA_STF_MEMBER.SA_CODE_SC_DEG_ID=SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
          where  ENTITY_MAIN.NODE_PATH like @DeptPath+'%'
          
          order by case when @Lang='English' then SA_STF_MEMBER.[STF_FULL_NAME_EN] else SA_STF_MEMBER.[STF_FULL_NAME_AR] end
          				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudentInstructor">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT distinct
					SA_STF_MEMBER.*
			from ED_STUD_GROUP inner join SC_SCHEDULE_DTL on SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID=ED_STUD_GROUP.SC_SCHEDULE_DTL_ID
           inner join ED_STUD_SEMESTER on ED_STUD_GROUP.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
           inner join SA_STF_MEMBER on SA_STF_MEMBER.SA_STF_MEMBER_ID=SC_SCHEDULE_DTL.SA_STF_MAMBER_ID

      where ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
            and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
          				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SA_STF_MEMBER_GetByAsFacultyInfoIdAndEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 24, 2010

-- Created By:  ()
-- Purpose: Select records from the SA_STF_MEMBER table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				declare @newEntityMainId numeric(5,0)
				set @newEntityMainId=@EntMainId;
				if @EntMainId=0
				begin
				set @newEntityMainId=null;
				end
		
				SELECT
					SA_STF_MEMBER.*
          
				FROM
					[dbo].[SA_STF_MEMBER] left outer join SA_CODE_JOB_STATUS on [dbo].[SA_STF_MEMBER].SA_CODE_JOB_STATUS_ID=SA_CODE_JOB_STATUS.SA_CODE_JOB_STATUS_ID
          left outer join SA_CODE_SC_DEG on [dbo].[SA_STF_MEMBER].SA_CODE_SC_DEG_ID=SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					and (@newEntityMainId is null or AS_NODE_ID =@newEntityMainId)
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetForAdviseCourseChngView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SA_STF_MEMBER table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYear" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSem" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfo" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        SELECT      ED_CODE_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID,ED_CODE_COURSE_CHNG.DESCR_Ar,ED_CODE_COURSE_CHNG.DESCR_En,
isnull(count(ED_STUD.ED_STUD_ID),0) as ED_STUD_Count,
isnull(count(ED_STUD_COURSE_CHNG.ED_STUD_COURSE_CHNG_ID),0) as ED_Chng_Count

FROM                    ED_CODE_COURSE_CHNG left outer JOIN
                      ED_STUD_COURSE_CHNG ON ED_CODE_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID = ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID left outer JOIN
                      ED_STUD_STATE ON ED_STUD_COURSE_CHNG.ED_STUD_STATE_ID = ED_STUD_STATE.ED_STUD_STATE_ID left outer JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID left outer JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
where (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSem  or ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID is null)
and (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYear or  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID is null)
and (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfo or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID is null )
group by ED_CODE_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID,ED_CODE_COURSE_CHNG.DESCR_Ar,ED_CODE_COURSE_CHNG.DESCR_En,ED_STUD.ED_STUD_ID,ED_STUD_COURSE_CHNG.ED_STUD_COURSE_CHNG_ID
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_COURSE_CHNG_GetByEdBylawIdEdCodeCourseChngId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_COURSE_CHNG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_POLICY_COURSE_CHNG_ID],
					[ED_BYLAW_ID],
					[ENT_MAIN_ID],
					[ED_CODE_COURSE_CHNG_ID],
					[COURSE_NO],
					[MAX_WEEKS],
					[ABSENCE],
					[EXCUSE_REQUIRED],
					[ED_STUDY_METHOD_ID]
				FROM
					[dbo].[ENT_POLICY_COURSE_CHNG]
				WHERE
					[ED_BYLAW_ID] = @EdBylawId
					AND [ED_CODE_COURSE_CHNG_ID] = @EdCodeCourseChngId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="CourseScheduleSearch">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  (udated by dalia at 17-10-2012 to add parameter criteria course_pkg which added in screen of studRegistercourse_section)
-- the method that use that procedure i make overload on it 
-- the current method send course packg--> @PKG =0
-- the new method send it with the value sent from screen
-- Purpose: Select records from the SC_SCHEDULE_DTL_DAY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scStaffId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scScheduleDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scDayId" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@scTchngSlotId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scBuildingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@OrderById" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@LanguageId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@PkgID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />

      </parameters>
      <body>
        <![CDATA[

declare @asFacultyInfoId numeric
SELECT @asFacultyInfoId = as_faculty_info_id FROM dbo.ENTITY_MAIN WHERE ENT_main_ID = @EntMainID
		
IF(@EntMainID = 0)
BEGIN
	SELECT @EntMainID = ent_main_id FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID = @EntMainID
END

DECLARE @nodePath NVARCHAR(150);
SELECT @nodePath=node_path FROM dbo.ENTITY_MAIN WHERE ENT_MAIN_ID = @EntMainID;
print @nodePath
SELECT *
            from
            (
                    SELECT distinct  SC_SCHEDULE_DTL.[SC_SCHEDULE_DTL_ID],
                    case when @LanguageId = 1 then ED_COURSE.COURSE_DESCR_AR else ED_COURSE.COURSE_DESCR_EN end as COURSE_DESCR,
                     ED_COURSE.COURSE_CODE, ED_COURSE.ed_course_id,
                    case when @LanguageId = 1 then SA_STF_MEMBER.STF_FULL_NAME_AR else SA_STF_MEMBER.STF_FULL_NAME_EN end as STF_FULL_NAME,
                    case when @LanguageId = 1 then SC_SCHEDULE_DTL.GROUP_DESCR_AR else SC_SCHEDULE_DTL.GROUP_DESCR_EN end as GROUP_DESCR,
                    [dbo].[GetScheduleDtlDays](SC_SCHEDULE_DTL.[SC_SCHEDULE_DTL_ID],SC_SCHEDULE_DTL_DAY.FROM_TIME,SC_SCHEDULE_DTL_DAY.TO_TIME,SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID,SC_SCHEDULE_DTL_DAY.SC_HALL_ID) as dayes,
                    case when @LanguageId = 1 then SC_TCHNG_SLOT.DESCR_AR else SC_TCHNG_SLOT.DESCR_EN end as SlotDescr,
                    case when @LanguageId = 1 then SC_BUILDING.DESCR_AR else SC_BUILDING.DESCR_EN end as BuildingDescr,
                    case when @LanguageId = 1 then SC_HALL.DESCR_AR else SC_HALL.DESCR_EN end as HallDescr,
                    case when @LanguageId = 1 then ENTITY_MAIN.ENT_DESCR_AR else ENTITY_MAIN.ENT_DESCR_EN end as Ent_DESCR,
                    --Changed By Elsayed Mohamed
                    case when @LanguageId = 1 then ED_CDE_TCHNG_MTHD.DESCR_AR else ED_CDE_TCHNG_MTHD.DESCR_EN end as TeachingDescr,
                    convert(nvarchar,SC_SCHEDULE_DTL.NO_STUDENTS-(SELECT COUNT(ED_STUD_GROUP_ID) from ED_STUD_GROUP where SC_SCHEDULE_DTL_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID))+'/'+convert(nvarchar,SC_SCHEDULE_DTL.NO_STUDENTS) as NoSeats,
                                CONVERT(time, SC_SCHEDULE_DTL_DAY.FROM_TIME) as FROM_TIME,CONVERT(time, SC_SCHEDULE_DTL_DAY.TO_TIME) as TO_TIME
                    
                        FROM         SA_STF_MEMBER INNER JOIN
                      SC_SCHEDULE_DTL ON SA_STF_MEMBER.SA_STF_MEMBER_ID = SC_SCHEDULE_DTL.SA_STF_MAMBER_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID AND 
                      ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ENTITY_MAIN ON ENTITY_MAIN.ENT_MAIN_ID = ED_OFFERING.ENT_MAIN_ID LEFT OUTER JOIN
                      SC_SCHEDULE_DTL_DAY left outer JOIN
                      SC_TCHNG_SLOT ON SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID = SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID INNER JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID INNER JOIN
                      GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID ON 
                      SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID LEFT OUTER JOIN
                      ED_CODE_COURSE_TEACHING ON ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID = SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                    left outer join ENT_COURSE_PKG_DTL  ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
              WHERE 
              
                      (@EdAcadYearId =0 or ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (@EdCodeSemesterId =0 or ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      ((@asFacultyInfoId is null and ED_OFFERING.as_faculty_info_id is null ) or ED_OFFERING.as_faculty_info_id = @asFacultyInfoId) AND
                      (@scBuildingId =0 or SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = @scBuildingId) AND 
                     (@ScHallId =0 or SC_SCHEDULE_DTL_DAY.SC_HALL_ID = @ScHallId) AND
                      (@scDayId ='' or SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID in ( 
                      select convert(numeric,Item) from dbo.Split(@scDayId)
                      )) AND 
                     (@EdCourseId =0 or ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId) AND
                     (@scStaffId =0 or SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @scStaffId) AND 
                      (@scScheduleDtlId =0 or SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = @scScheduleDtlId) AND
                      (entity_main.NODE_PATH LIKE @nodePath+'%' ) AND
                      (@CourseCode is null or ED_COURSE.COURSE_CODE like '%'+@CourseCode+'%')AND
                      (@PkgID =0 or ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = @PkgID)
             )as x         
                  order by    CASE WHEN @OrderById = 1  THEN x.Ent_DESCR  END ,
                              CASE WHEN @OrderById = 2 THEN x.COURSE_DESCR  END,
                                                                              CASE WHEN @OrderById =3  THEN x.STF_FULL_NAME  end ,
                                                                              CASE WHEN @OrderById =4     THEN x.GROUP_DESCR end,
                        CASE WHEN @OrderById =6     THEN x.FROM_TIME end,
                       CASE WHEN @OrderById =7     THEN x.BuildingDescr end,
                       CASE WHEN @OrderById =8    THEN x.HallDescr  end
     
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="CourseScheduleSearchWithOutCourseReg">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  (udated by dalia at 17-10-2012 to add parameter criteria course_pkg which added in screen of studRegistercourse_section)
-- the method that use that procedure i make overload on it 
-- the current method send course packg--> @PKG =0
-- the new method send it with the value sent from screen
-- Purpose: Select records from the SC_SCHEDULE_DTL_DAY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scStaffId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scScheduleDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scDayId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scTchngSlotId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@scBuildingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@OrderById" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@LanguageId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@PkgID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@StudSemesterID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />

      </parameters>
      <body>
        <![CDATA[

declare @asFacultyInfoId numeric
SELECT @asFacultyInfoId = as_faculty_info_id FROM dbo.ENTITY_MAIN WHERE ENT_main_ID = @EntMainID
		
IF(@EntMainID = 0)
BEGIN
	SELECT @EntMainID = ent_main_id FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID = @EntMainID
END

DECLARE @nodePath NVARCHAR(150);
SELECT @nodePath=node_path FROM dbo.ENTITY_MAIN WHERE ENT_MAIN_ID = @EntMainID;
print @nodePath
SELECT *
            from
            (
                    SELECT distinct  SC_SCHEDULE_DTL.[SC_SCHEDULE_DTL_ID],
                    case when @LanguageId = 1 then ED_COURSE.COURSE_DESCR_AR else ED_COURSE.COURSE_DESCR_EN end as COURSE_DESCR,
                     ED_COURSE.COURSE_CODE, ED_COURSE.ed_course_id,
                    case when @LanguageId = 1 then SA_STF_MEMBER.STF_FULL_NAME_AR else SA_STF_MEMBER.STF_FULL_NAME_EN end as STF_FULL_NAME,
                    case when @LanguageId = 1 then SC_SCHEDULE_DTL.GROUP_DESCR_AR else SC_SCHEDULE_DTL.GROUP_DESCR_EN end as GROUP_DESCR,
                    [dbo].[GetScheduleDtlDays](SC_SCHEDULE_DTL.[SC_SCHEDULE_DTL_ID],SC_SCHEDULE_DTL_DAY.FROM_TIME,SC_SCHEDULE_DTL_DAY.TO_TIME,SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID,SC_SCHEDULE_DTL_DAY.SC_HALL_ID) as dayes,
                    case when @LanguageId = 1 then SC_TCHNG_SLOT.DESCR_AR else SC_TCHNG_SLOT.DESCR_EN end as SlotDescr,
                    case when @LanguageId = 1 then SC_BUILDING.DESCR_AR else SC_BUILDING.DESCR_EN end as BuildingDescr,
                    case when @LanguageId = 1 then SC_HALL.DESCR_AR else SC_HALL.DESCR_EN end as HallDescr,
                    case when @LanguageId = 1 then ENTITY_MAIN.ENT_DESCR_AR else ENTITY_MAIN.ENT_DESCR_EN end as Ent_DESCR,
                    --Changed By Elsayed Mohamed
                    case when @LanguageId = 1 then ED_CDE_TCHNG_MTHD.DESCR_AR else ED_CDE_TCHNG_MTHD.DESCR_EN end as TeachingDescr,
                    convert(nvarchar,SC_SCHEDULE_DTL.NO_STUDENTS-(SELECT COUNT(ED_STUD_GROUP_ID) from ED_STUD_GROUP where SC_SCHEDULE_DTL_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID))+'/'+convert(nvarchar,SC_SCHEDULE_DTL.NO_STUDENTS) as NoSeats,
                                CONVERT(time, SC_SCHEDULE_DTL_DAY.FROM_TIME) as FROM_TIME,CONVERT(time, SC_SCHEDULE_DTL_DAY.TO_TIME) as TO_TIME
                    
                        FROM         SA_STF_MEMBER INNER JOIN
                      SC_SCHEDULE_DTL ON SA_STF_MEMBER.SA_STF_MEMBER_ID = SC_SCHEDULE_DTL.SA_STF_MAMBER_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID AND 
                      ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ENTITY_MAIN ON ENTITY_MAIN.ENT_MAIN_ID = ED_OFFERING.ENT_MAIN_ID LEFT OUTER JOIN
                      SC_SCHEDULE_DTL_DAY left outer JOIN
                      SC_TCHNG_SLOT ON SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID = SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID INNER JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID INNER JOIN
                      GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID ON 
                      SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID LEFT OUTER JOIN
                      ED_CODE_COURSE_TEACHING ON ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID = SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                    left outer join ENT_COURSE_PKG_DTL  ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
              WHERE 
              
                      (@EdAcadYearId =0 or ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (@EdCodeSemesterId =0 or ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      ((@asFacultyInfoId is null and ED_OFFERING.as_faculty_info_id is null ) or ED_OFFERING.as_faculty_info_id = @asFacultyInfoId) AND
                      (@scBuildingId =0 or SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = @scBuildingId) AND 
                     (@ScHallId =0 or SC_SCHEDULE_DTL_DAY.SC_HALL_ID = @ScHallId) AND
                      (@scDayId =0 or SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = @scDayId) AND 
                     (@EdCourseId =0 or ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId) AND
                     (@scStaffId =0 or SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @scStaffId) AND 
                      (@scScheduleDtlId =0 or SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = @scScheduleDtlId) AND
                      (entity_main.NODE_PATH LIKE @nodePath+'%' ) AND
                      (@CourseCode is null or ED_COURSE.COURSE_CODE like '%'+@CourseCode+'%')AND
                      (@PkgID =0 or ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = @PkgID)
             )as x 
             where x.ed_course_id not in (select ED_COURSE_ID from ed_stud_course_reg where ed_stud_semester_id=@StudSemesterID )        
                  order by    CASE WHEN @OrderById = 1  THEN x.Ent_DESCR  END ,
                              CASE WHEN @OrderById = 2 THEN x.COURSE_DESCR  END,
                                                                              CASE WHEN @OrderById =3  THEN x.STF_FULL_NAME  end ,
                                                                              CASE WHEN @OrderById =4     THEN x.GROUP_DESCR end,
                        CASE WHEN @OrderById =6     THEN x.FROM_TIME end,
                       CASE WHEN @OrderById =7     THEN x.BuildingDescr end,
                       CASE WHEN @OrderById =8    THEN x.HallDescr  end
     
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_GetByCourseCodeAndFaculty" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					*
				FROM
					[dbo].[ED_COURSE]
				WHERE
					[COURSE_CODE] = @CourseCode
          and (@AsFacultyInfoId =0 or  [AS_FACULTY_INFO_ID] = @AsFacultyInfoId)
					
			]]>
      </body>

    </procedure>
    <procedure owner="dbo" name="CourseGroups">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL_DAY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT  distinct   SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
			SC_SCHEDULE_DTL.GROUP_DESCR_EN, 
			ED_CDE_TCHNG_MTHD.DESCR_AR, 
            ED_CDE_TCHNG_MTHD.DESCR_EN,
            ED_OFFERING_COURSE.ED_COURSE_ID,
            SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID,
            SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID,
            convert(nvarchar,SC_SCHEDULE_DTL.NO_STUDENTS-(SELECT COUNT(ED_STUD_GROUP_ID) from ED_STUD_GROUP where SC_SCHEDULE_DTL_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID))+'/'+convert(nvarchar,SC_SCHEDULE_DTL.NO_STUDENTS) as NoSeats
                      
FROM         SC_SCHEDULE_DTL INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID 
                      -- Elsayed Mohamed Hosny
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID 
                      INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID AND 
                      ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID  left outer JOIN
                      ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID
                      
where ((@AsFacultyInfoId=0 and ED_OFFERING.AS_FACULTY_INFO_ID is null) or ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
--ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudsInCourseGroups">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL_DAY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT  distinct ED_STUD_GROUP.ED_STUD_ID
            
FROM         SC_SCHEDULE_DTL INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID AND 
                      ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
where (@AsFacultyInfoId is null or @AsFacultyInfoId=0 or ED_OFFERING.AS_FACULTY_INFO_ID=@AsFacultyInfoId)


and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId
and ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID = @EdCodeCourseTeachingId
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudGroups">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL_DAY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT   distinct  ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                      ED_STUD_GROUP.ED_STUD_GROUP_ID, ED_STUD_SEMESTER.IS_COURSE_APPROVED
FROM         ED_STUD_GROUP INNER JOIN
                      ED_STUD ON ED_STUD_GROUP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_GROUP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
                      ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID
where ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudExamPlace">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_SCHEDULE_DTL_DAY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CoExamSchdlPlaceId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT 
                      ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                      ED_STUD_SEMESTER.IS_COURSE_APPROVED,ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID,CO_EXAM_PLACE_STUD.CO_EXAM_PLACE_STUD_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      CO_EXAM_PLACE_STUD ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = CO_EXAM_PLACE_STUD.ED_STUD_SEMESTER_ID
where CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID = @CoExamSchdlPlaceId
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_GetAllForApprove">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_COURSE_CHNG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null" />
        <parameter name="@ApproveFlg" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
if(@Lang=0)
begin
set @Lang = null;
end

if(@EdCodeCourseChngId=0)
begin
set @EdCodeCourseChngId = null;
end

if(@EdCourseId=0)
begin
set @EdCourseId = null;
end

if(@StudName = '')
begin
set @StudName = null;
end

if(@CourseCode = '')
begin
set @CourseCode = null;
end

if(@FromDate = '1/1/2211')
begin
set @FromDate = null;
end

if(@ToDate = '1/1/2211')
begin
set @ToDate = null;
end

SELECT     ED_STUD_COURSE_CHNG.ED_STUD_COURSE_CHNG_ID, ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID, ED_STUD_COURSE_CHNG.ED_COURSE_ID, 
                      ED_STUD_COURSE_CHNG.REQ_DATE, ED_STUD.FULL_NAME_EN, ED_STUD.FULL_NAME_AR, ED_CODE_COURSE_CHNG.DESCR_AR AS CHNG_DESCR_AR, 
                      ED_CODE_COURSE_CHNG.DESCR_EN AS CHNG_DESCR_EN, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, ED_COURSE.COURSE_CODE, 
                      ED_STUD.ED_STUD_ID
FROM         ED_STUD_COURSE_CHNG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_CODE_COURSE_CHNG ON ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID = ED_CODE_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_CHNG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
					  
where ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_COURSE_CHNG.APPROVE_FLG = @ApproveFlg
and 
(
(@EdCodeCourseChngId is null or ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID = @EdCodeCourseChngId)
and (@EdCourseId is null or ED_STUD_COURSE_CHNG.ED_COURSE_ID = @EdCourseId)
and (@CourseCode is null or ED_COURSE.COURSE_CODE = @CourseCode)
--and 
--(
--((@Lang is null and @StudName is null) or (@Lang = 2 and ED_STUD.FULL_NAME_EN like '%'+@StudName+'%')) -- english student name
--or ((@Lang is null and @StudName is null) or (@Lang = 1 and ED_STUD.FULL_NAME_AR like '%'+@StudName+'%')) -- arabic student name
--)
and (@StudName is null or ED_STUD_FACULTY.STUD_FACULTY_CODE like @StudName+'%')
)
and ((@FromDate is null and @ToDate is null) or ED_STUD_COURSE_CHNG.REQ_DATE between @FromDate and @ToDate)
order by ED_STUD_COURSE_CHNG.REQ_DATE,ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_SearchStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_COURSE_CHNG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, 
                ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                ED_STUD.FULL_NAME_AR, 
                ED_STUD.FULL_NAME_EN, 
                ED_CODE_LEVEL.DESCR_AR AS LEVEL_DESCR_AR, 
                ED_CODE_LEVEL.DESCR_EN AS LEVEL_DESCR_EN,
                dbo.FN_GetStudStatesWithoutUni(ed_stud_semester.ED_STUD_ID,ed_stud_semester.AS_FACULTY_INFO_ID,ed_stud_semester.ED_ACAD_YEAR_ID,ed_stud_semester.ED_CODE_SEMESTER_ID,1) AS STUD_STATES_AR,
                dbo.FN_GetStudStatesWithoutUni(ed_stud_semester.ED_STUD_ID,ed_stud_semester.AS_FACULTY_INFO_ID,ed_stud_semester.ED_ACAD_YEAR_ID,ed_stud_semester.ED_CODE_SEMESTER_ID,2) AS STUD_STATES_EN,
                LEN(ED_STUD_FACULTY.STUD_FACULTY_CODE) AS LenCode
FROM         ED_STUD_COURSE_CHNG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID
WHERE     (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
AND (@StudCode = '' OR dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE LIKE '%'+@StudCode+'%')
ORDER BY LEN(dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE), dbo.ED_STUD_FACULTY.STUD_FACULTY_CODE
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_REG_SetIncomplete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_COURSE_REG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_COURSE_REG]
				SET
					[INCOMP_FLG] = 1
          ,[SE_USER_ID] = @SeUserId
					,[SE_FORM_ID] = @SeFormId
					,[LAST_DATE] = @LastDate
				WHERE
				[ED_STUD_COURSE_REG_ID] = @EdStudCourseRegId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudRegisteredCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

--purpose:get all the courses registered for a certain student
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					ED_STUD_COURSE_REG.*,
          ENT_POLICY_GRADING_HDR_ID,
          ED_STUD.ED_STUD_ID,
          ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID,
          ED_ACAD_YEAR.ED_ACAD_YEAR_ID,
          ED_STUD.FULL_NAME_AR,
          ED_STUD.FULL_NAME_EN,
                    
          ED_ACAD_YEAR.DESCR_AR,
          ED_ACAD_YEAR.DESCR_EN,
          ED_CODE_SEMESTER.DESCR_AR,
          ED_CODE_SEMESTER.DESCR_EN,
          ED_COURSE.COURSE_CODE,
          ED_COURSE.COURSE_DESCR_AR,
          ED_COURSE.COURSE_DESCR_EN,
          ED_CODE_LEVEL.DESCR_AR,
          ED_CODE_LEVEL.DESCR_EN,
         
          ED_CODE_GRADING.DESCR_AR,
          ED_CODE_GRADING.DESCR_EN
          
		from  ED_STUD_COURSE_REG 
          inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
          inner join ED_ACAD_YEAR on ED_ACAD_YEAR.ED_ACAD_YEAR_ID=ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
          inner join ED_CODE_SEMESTER on ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID=ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
          inner join ED_COURSE on ED_COURSE.ED_COURSE_ID=ED_STUD_COURSE_REG.ED_COURSE_ID
          left outer join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
          left outer join ED_CODE_GRADING on ED_CODE_GRADING.ED_CODE_GRADING_ID=ED_STUD_COURSE_REG.ED_CODE_GRADING_ID
          inner join ED_STUD on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
          inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID
          and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
          
    where ED_STUD.ED_STUD_ID=@EdStudId
    order by ED_ACAD_YEAR.Year_Order,ED_CODE_SEMESTER.Semester_Order
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="BatchCourseRegistration">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

--purpose:get all the courses registered for a certain student
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@YearCalendar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@SemesterDescrEn" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@IsRepeated" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@CourseStatus" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@Grading" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@CourseDegree" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@Coursepoints" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
        
        
        declare @EdStudId numeric,@ErrStudCode nvarchar(150),@EdCourseId numeric,@EdAcadYearId numeric,@ErrAcadYear nvarchar(150),
        @ErrCourseCode nvarchar(150),@AsFacultyInfoId numeric,@EdCodeSemesterId numeric,@ErrSemester nvarchar(150),
        @EdCodeCourseStatusId numeric,@ErrCourseStatus nvarchar(150),@EdCodeGradingId numeric,@ErrGrading nvarchar(150)
        
        
        
        
        select @EdStudId=ED_STUD_ID ,
               @AsFacultyInfoId=AS_FACULTY_INFO_ID
        from ED_STUD_FACULTY where ED_STUD_FACULTY.STUD_FACULTY_CODE =@StudCode;
        if(@EdStudId is null)
          Begin
            set @ErrStudCode='Stud_Code='+@StudCode
            RAISERROR(@ErrStudCode,16,-1)
            RETURN
          End
        
        
        -- check on course code existing
        select @EdCourseId=ed_course_id from ed_course where COURSE_CODE=@CourseCode
        if(@EdCourseId is null)
          Begin
            set @ErrCourseCode='Course_Code='+@CourseCode
            RAISERROR(@ErrCourseCode,16,-1)
            RETURN
          End
        
        
         -- check on Semester Descr existing
        select @EdCodeSemesterId=ED_CODE_SEMESTER_ID from ED_CODE_SEMESTER where DESCR_EN=@SemesterDescrEn
        if(@EdCodeSemesterId is null)
          Begin
            set @ErrSemester='Semester_Code='+@SemesterDescrEn
            RAISERROR(@ErrSemester,16,-1)
            RETURN
          End
        
        
        
          -- check on AcadYearExist
        select @EdAcadYearId=ED_ACAD_YEAR_ID from ED_ACAD_YEAR where YEAR_CALENDER=@YearCalendar
        if(@EdAcadYearId is null)
          Begin
            set @ErrAcadYear='AcademicYear='+@YearCalendar
            RAISERROR(@ErrAcadYear,16,-1)
            RETURN
          End
        
        
         if(@CourseStatus!='')
          Begin
                      -- check on CourseStatus
                  select @EdCodeCourseStatusId=ED_CODE_COURSE_STATUS_ID from ED_CODE_COURSE_STATUS where DESCR_EN=@CourseStatus
                  if(@EdCodeCourseStatusId is null)
                    Begin
                      set @ErrCourseStatus='ErrorrCourseStatus'
                      RAISERROR(@ErrCourseStatus,16,-1)
                      RETURN
                    End
         End   
          
          if(@Grading!='')
          Begin
                    -- check on Grading
              select @EdCodeGradingId=ED_CODE_GRADING_ID from ED_CODE_GRADING where DESCR_EN=@Grading
              if(@EdCodeGradingId is null)
                Begin
                set @ErrGrading='ErrorrGrading'
                  RAISERROR(@ErrGrading,16,-1)
                  RETURN
                End
          End
        
        
        
        
        
        
        
        
        
        
        declare @ED_STUD_SEMESTER_ID numeric
      select @ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER WHERE
                      ED_STUD_ID=@EdStudId AND 
                      ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND
                      ED_ACAD_YEAR_ID=@EdAcadYearId AND 
                      AS_FACULTY_INFO_ID=@AsFacultyInfoId  
                      
                      
                      
                      
                      
             if(@ED_STUD_SEMESTER_ID is null)
             Begin
             declare @MaxED_STUD_SEMESTER_ID numeric
               select @MaxED_STUD_SEMESTER_ID =max(ED_STUD_SEMESTER_ID)from ED_STUD_SEMESTER
                      if(@MaxED_STUD_SEMESTER_ID is null)
                         set @MaxED_STUD_SEMESTER_ID =0;
                       set @MaxED_STUD_SEMESTER_ID =@MaxED_STUD_SEMESTER_ID +1;
              
         	         INSERT INTO [dbo].[ED_STUD_SEMESTER]
				            (
				              [ED_STUD_SEMESTER_ID],[ED_CODE_SEMESTER_ID],[ED_STUD_ID],[ED_ACAD_YEAR_ID]
				              ,[AS_FACULTY_INFO_ID],[IS_LAST]
				            )
			              VALUES
				            (
				               @MaxED_STUD_SEMESTER_ID,@EdCodeSemesterId,@EdStudId,@EdAcadYearId
				            ,@AsFacultyInfoId,1
				           )
                  SET @ED_STUD_SEMESTER_ID=@MaxED_STUD_SEMESTER_ID;         
             End
                      
            
        
        
        
         --insert subject itself
         
          declare @MaxEdStudCourseRegId numeric
          select @MaxEdStudCourseRegId =max(ED_STUD_COURSE_REG_ID)from ED_STUD_COURSE_REG
          if(@MaxEdStudCourseRegId is null)
           set @MaxEdStudCourseRegId =0;
           
           set @MaxEdStudCourseRegId =@MaxEdStudCourseRegId +1;
         
           if not exists(select 'a' from ED_STUD_COURSE_REG where ED_COURSE_ID=@EdCourseId and AS_FACULTY_INFO_ID=@AsFacultyInfoId and
           ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID)
         
                INSERT INTO [dbo].[ED_STUD_COURSE_REG]
	                (
  	                 [ED_STUD_COURSE_REG_ID],[ED_COURSE_ID],[AS_FACULTY_INFO_ID],
  	                 ED_STUD_SEMESTER_ID,ED_CODE_COURSE_STATUS_ID,ED_CODE_GRADING_ID,COURSE_DEGREE,COURSE_POINT,
                     [SE_USER_ID],[SE_FORM_ID],[LAST_DATE],[REG_DATE]
	                )
                VALUES
	                (
 	                   @MaxEdStudCourseRegId,@EdCourseId,
	                   @AsFacultyInfoId,@ED_STUD_SEMESTER_ID,@EdCodeCourseStatusId,@EdCodeGradingId,
                     @CourseDegree,@Coursepoints,@SeUserId,@SeFormId,@LastDate,@LastDate
	                )
            else
           Begin
               RAISERROR('CourseReg_Exist',16,-1)
            RETURN
           End
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetCourseForGrading">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_COURSE_REG table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeCourseStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@Sort" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@pageIndex" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@PageSize" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
	
IF(@ScScheduleDtlId is not null and @ScScheduleDtlId <> 0)
    BEGIN
			WITH paging (
					ED_STUD_COURSE_REG_ID, 
                      ED_STUD_SEMESTER_ID, 
                      ED_COURSE_ID, 
                      REG_DATE, 
                      AUDIT_FLG, 
                      REPEAT_FLG, 
                      IS_LAST, 
                      IS_APPROVED, 
                      APPROVE_DATE, 
                      AS_FACULTY_INFO_ID, 
                      ED_CODE_COURSE_STATUS_ID, 
                      ED_CODE_GRADING_ID, 
                      COURSE_DEGREE, 
                      COURSE_POINT, 
                      ENT_POLICY_GRADING_HDR_ID, 
                      GS_CODE_PASS_FAIL_ID, 
                      ADD_GPA_FLG, 
                      ENT_POLICY_ASSESS_HDR_ID, 
                      ED_STUD_ID, 
                      ED_CODE_SEMESTER_ID, 
                      ED_ACAD_YEAR_ID, 
                      FULL_NAME_AR, 
                      FULL_NAME_EN, 
                      DESCR_AR, 
                      DESCR_EN, 
                      SEMESTER_DESCR_AR, 
                      SEMESTER_DESCR_EN, 
                      COURSE_CODE,
                      COURSE_DESCR_AR, 
                      COURSE_DESCR_EN, 
                      LEVEL_DESCR_AR, 
                      LEVEL_DESCR_EN,
                      ED_CODE_LEVEL_ID, 
                      GRADING_DESCR_AR, 
                      GRADING_DESCR_EN, 
                      SYMBOL, 
                      ED_EXAM_STUD_ABSENCE_ID, 
                      STUD_FACULTY_CODE,
                      sn
	) AS
	(
           SELECT DISTINCT 
                      ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID, 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID, 
                      ED_STUD_COURSE_REG.ED_COURSE_ID, 
                      ED_STUD_COURSE_REG.REG_DATE, 
                      ED_STUD_COURSE_REG.AUDIT_FLG, 
                      ED_STUD_COURSE_REG.REPEAT_FLG, 
                      ED_STUD_COURSE_REG.IS_LAST, 
                      ED_STUD_COURSE_REG.IS_APPROVED, 
                      ED_STUD_COURSE_REG.APPROVE_DATE, 
                      ED_STUD_COURSE_REG.AS_FACULTY_INFO_ID, 
                      ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID, 
                      ED_STUD_COURSE_REG.ED_CODE_GRADING_ID, 
                      ED_STUD_COURSE_REG.COURSE_DEGREE, 
                      ED_STUD_COURSE_REG.COURSE_POINT, 
                      ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID, 
                      ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID, 
                      ED_STUD_COURSE_REG.ADD_GPA_FLG, 
                      ED_STUD_COURSE_REG.ENT_POLICY_ASSESS_HDR_ID, 
                      ED_STUD.ED_STUD_ID, 
                      ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID, 
                      ED_ACAD_YEAR.ED_ACAD_YEAR_ID, 
                      ED_STUD.FULL_NAME_AR, 
                      ED_STUD.FULL_NAME_EN, 
                      ED_ACAD_YEAR.DESCR_AR, 
                      ED_ACAD_YEAR.DESCR_EN, 
                      ED_CODE_SEMESTER.DESCR_AR AS SEMESTER_DESCR_AR, 
                      ED_CODE_SEMESTER.DESCR_EN AS SEMESTER_DESCR_EN, 
                      ED_COURSE.COURSE_CODE,
                       ED_COURSE.COURSE_DESCR_AR, 
                       ED_COURSE.COURSE_DESCR_EN, 
                       ED_CODE_LEVEL.DESCR_AR AS LEVEL_DESCR_AR, 
                      ED_CODE_LEVEL.DESCR_EN AS LEVEL_DESCR_EN,
                      ED_CODE_LEVEL.ED_CODE_LEVEL_ID, 
                      ED_CODE_GRADING.DESCR_AR AS GRADING_DESCR_AR, 
                      ED_CODE_GRADING.DESCR_EN AS GRADING_DESCR_EN, 
                      ED_CODE_COURSE_STATUS.SYMBOL, 
                      ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID, 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE,
                      ROW_NUMBER() OVER (order by case when @Sort = 1 then ED_STUD_FACULTY.STUD_FACULTY_CODE end,
                                case when @Sort = 2 and @Lang = 1 then ED_STUD.FULL_NAME_EN end,
                                case when @Sort = 2 and @Lang = 2 then ED_STUD.FULL_NAME_AR end) AS sn 
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      ED_STUD_GROUP ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID LEFT OUTER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID LEFT OUTER JOIN
                      ED_CODE_GRADING ON ED_CODE_GRADING.ED_CODE_GRADING_ID = ED_STUD_COURSE_REG.ED_CODE_GRADING_ID INNER JOIN
                      ED_STUD ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID LEFT OUTER JOIN
                      ED_EXAM_STUD_ABSENCE ON 
                      ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID LEFT OUTER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND 
                      ED_STUD_FACULTY.is_active = 1 LEFT OUTER JOIN
                      ED_CODE_COURSE_STATUS ON 
                      ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = ED_CODE_COURSE_STATUS.ED_CODE_COURSE_STATUS_ID                       
WHERE     (@EdStudId IS NULL OR @EdStudId = 0 OR dbo.ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) and
					(ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId OR
					--commented according to amr el kholy required
                    --  @EdCourseId IS NULL) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID IN (1, 3)) AND 
                    @EdCourseId IS NULL) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID =@EdCodeCourseStatusId) AND 
                      (ED_STUD_COURSE_REG.ENT_POLICY_ASSESS_HDR_ID = @EntPolicyAssessHdrId OR
                      @EntPolicyAssessHdrId IS NULL) AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId OR
                      @EdCodeSemesterId IS NULL) AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId OR
                      @EdAcadYearId IS NULL) AND (ED_STUD_SEMESTER.IS_COURSE_APPROVED = 1) AND 
                      (ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId OR
                      @ScScheduleDtlId IS NULL or @ScScheduleDtlId = 0)
                      -- Excuse AcadYear or Semester
                      and ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID not in (
                      select ED_STUD_EXCUSE.ED_STUD_SEMESTER_ID from ED_STUD_EXCUSE
                      where ED_STUD_EXCUSE.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID 
                      and (ED_STUD_EXCUSE.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID or ED_STUD_EXCUSE.ED_CODE_SEMESTER_ID is null)
                      and ED_STUD_EXCUSE.ED_CODE_EXCUSE_TYPE_ID in (1,2)
                      and ED_STUD_EXCUSE.GS_CODE_REQ_STATUS_ID = 2 -- approved
                      )
                      and ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = 1 -- مقيد
                      ---- Exam Absence
                      --and ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID not in (
                      --select ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID from ED_EXAM_STUD_ABSENCE inner join
                      --ED_EXAM_SCHDL ON ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID AND 
                      --ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID AND 
                      --ED_EXAM_SCHDL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID AND 
                      --ED_EXAM_STUD_ABSENCE.ED_EXAM_SCHDL_ID = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID 
                      --)
           ) 
           select  ED_STUD_COURSE_REG_ID, 
                      ED_STUD_SEMESTER_ID, 
                      ED_COURSE_ID, 
                      REG_DATE, 
                      AUDIT_FLG, 
                      REPEAT_FLG, 
                      IS_LAST, 
                      IS_APPROVED, 
                      APPROVE_DATE, 
                      AS_FACULTY_INFO_ID, 
                      ED_CODE_COURSE_STATUS_ID, 
                      ED_CODE_GRADING_ID, 
                      COURSE_DEGREE, 
                      COURSE_POINT, 
                      ENT_POLICY_GRADING_HDR_ID, 
                      GS_CODE_PASS_FAIL_ID, 
                      ADD_GPA_FLG, 
                      ENT_POLICY_ASSESS_HDR_ID, 
                      ED_STUD_ID, 
                      ED_CODE_SEMESTER_ID, 
                      ED_ACAD_YEAR_ID, 
                      FULL_NAME_AR, 
                      FULL_NAME_EN, 
                      DESCR_AR, 
                      DESCR_EN, 
                      SEMESTER_DESCR_AR, 
                      SEMESTER_DESCR_EN, 
                      COURSE_CODE,
                      COURSE_DESCR_AR, 
                      COURSE_DESCR_EN, 
                      LEVEL_DESCR_AR, 
                      LEVEL_DESCR_EN,
                      ED_CODE_LEVEL_ID, 
                      GRADING_DESCR_AR, 
                      GRADING_DESCR_EN, 
                      SYMBOL, 
                      ED_EXAM_STUD_ABSENCE_ID, 
                      STUD_FACULTY_CODE,
                      sn, (select COUNT(*) from Paging) as TotalResults  from Paging
                      WHERE @PageSize = 0 or (@PageSize > 0 AND Paging.sn > (@pageIndex * @PageSize) AND Paging.sn <= (@pageIndex * @PageSize)+ @PageSize)
                      ORDER BY Paging.sn
    END
    Else
      BEGIN
	
	WITH paging (
					ED_STUD_COURSE_REG_ID, 
                      ED_STUD_SEMESTER_ID, 
                      ED_COURSE_ID, 
                      REG_DATE, 
                      AUDIT_FLG, 
                      REPEAT_FLG, 
                      IS_LAST, 
                      IS_APPROVED, 
                      APPROVE_DATE, 
                      AS_FACULTY_INFO_ID, 
                      ED_CODE_COURSE_STATUS_ID, 
                      ED_CODE_GRADING_ID, 
                      COURSE_DEGREE, 
                      COURSE_POINT, 
                      ENT_POLICY_GRADING_HDR_ID, 
                      GS_CODE_PASS_FAIL_ID, 
                      ADD_GPA_FLG, 
                      ENT_POLICY_ASSESS_HDR_ID, 
                      ED_STUD_ID, 
                      ED_CODE_SEMESTER_ID, 
                      ED_ACAD_YEAR_ID, 
                      FULL_NAME_AR, 
                      FULL_NAME_EN, 
                      DESCR_AR, 
                      SEMESTER_DESCR_AR, 
                      SEMESTER_DESCR_EN,
                      COURSE_CODE, 
                      COURSE_DESCR_AR, 
                      COURSE_DESCR_EN, 
                      LEVEL_DESCR_AR, 
                      LEVEL_DESCR_EN,
                      ED_CODE_LEVEL_ID, 
                      GRADING_DESCR_AR, 
                      GRADING_DESCR_EN , 
                      SYMBOL, 
                      ED_EXAM_STUD_ABSENCE_ID,
                      STUD_FACULTY_CODE,
                      sn
	) AS
	(
        SELECT DISTINCT 
                      ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID, 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID, 
                      ED_STUD_COURSE_REG.ED_COURSE_ID, 
                      ED_STUD_COURSE_REG.REG_DATE, 
                      ED_STUD_COURSE_REG.AUDIT_FLG, 
                      ED_STUD_COURSE_REG.REPEAT_FLG, 
                      ED_STUD_COURSE_REG.IS_LAST, 
                      ED_STUD_COURSE_REG.IS_APPROVED, 
                      ED_STUD_COURSE_REG.APPROVE_DATE, 
                      ED_STUD_COURSE_REG.AS_FACULTY_INFO_ID, 
                      ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID, 
                      ED_STUD_COURSE_REG.ED_CODE_GRADING_ID, 
                      ED_STUD_COURSE_REG.COURSE_DEGREE, 
                      ED_STUD_COURSE_REG.COURSE_POINT, 
                      ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID, 
                      ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID, 
                      ED_STUD_COURSE_REG.ADD_GPA_FLG, 
                      ED_STUD_COURSE_REG.ENT_POLICY_ASSESS_HDR_ID, 
                      ED_STUD.ED_STUD_ID, 
                      ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID, 
                      ED_ACAD_YEAR.ED_ACAD_YEAR_ID, 
                      ED_STUD.FULL_NAME_AR, 
                      ED_STUD.FULL_NAME_EN, 
                      ED_ACAD_YEAR.DESCR_AR, 
                      ED_CODE_SEMESTER.DESCR_AR AS SEMESTER_DESCR_AR, 
                      ED_CODE_SEMESTER.DESCR_EN AS SEMESTER_DESCR_EN,
                      ED_COURSE.COURSE_CODE, 
                      ED_COURSE.COURSE_DESCR_AR, 
                      ED_COURSE.COURSE_DESCR_EN, 
                      ED_CODE_LEVEL.DESCR_AR AS LEVEL_DESCR_AR, 
                      ED_CODE_LEVEL.DESCR_EN AS LEVEL_DESCR_EN,
                      ED_CODE_LEVEL.ED_CODE_LEVEL_ID, 
                      ED_CODE_GRADING.DESCR_AR AS GRADING_DESCR_AR, 
                      ED_CODE_GRADING.DESCR_EN AS GRADING_DESCR_EN , 
                      ED_CODE_COURSE_STATUS.SYMBOL, 
                      ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID,
                      ED_STUD_FACULTY.STUD_FACULTY_CODE,
                      ROW_NUMBER() OVER (order by case when @Sort = 1 then ED_STUD_FACULTY.STUD_FACULTY_CODE end,
                                case when @Sort = 2 and @Lang = 1 then ED_STUD.FULL_NAME_EN end,
                                case when @Sort = 2 and @Lang = 2 then ED_STUD.FULL_NAME_AR end) AS sn
                       
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID LEFT OUTER JOIN
                      ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID LEFT OUTER JOIN
                      ED_CODE_GRADING ON ED_CODE_GRADING.ED_CODE_GRADING_ID = ED_STUD_COURSE_REG.ED_CODE_GRADING_ID INNER JOIN
                      ED_STUD ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID LEFT OUTER JOIN
                      ED_EXAM_STUD_ABSENCE ON 
                      ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID LEFT OUTER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND 
                      ED_STUD_FACULTY.is_active = 1 LEFT OUTER JOIN
                      ED_CODE_COURSE_STATUS ON 
                      ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = ED_CODE_COURSE_STATUS.ED_CODE_COURSE_STATUS_ID 
WHERE     (@EdStudId IS NULL OR @EdStudId = 0 OR dbo.ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) and
					(ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId OR
                     --commented according to amr el kholy required
                    --  @EdCourseId IS NULL) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID IN (1, 3)) AND 
                    @EdCourseId IS NULL) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID =@EdCodeCourseStatusId) AND 
                      (ED_STUD_COURSE_REG.ENT_POLICY_ASSESS_HDR_ID = @EntPolicyAssessHdrId OR
                      @EntPolicyAssessHdrId IS NULL) AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId OR
                      @EdCodeSemesterId IS NULL) AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId OR
                      @EdAcadYearId IS NULL) AND (ED_STUD_SEMESTER.IS_COURSE_APPROVED = 1)
                      -- Excuse AcadYear or Semester
                      and ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID not in (
                      select ED_STUD_EXCUSE.ED_STUD_SEMESTER_ID from ED_STUD_EXCUSE
                      where ED_STUD_EXCUSE.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID 
                      and (ED_STUD_EXCUSE.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID or ED_STUD_EXCUSE.ED_CODE_SEMESTER_ID is null)
                      and ED_STUD_EXCUSE.ED_CODE_EXCUSE_TYPE_ID in (1,2)
                      and ED_STUD_EXCUSE.GS_CODE_REQ_STATUS_ID = 2 -- approved
                      )
                      and ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID = 1 -- مقيد
                      ---- Exam Absence
                      --and ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID not in (
                      --select ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID from ED_EXAM_STUD_ABSENCE inner join
                      --ED_EXAM_SCHDL ON ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID AND 
                      --ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID AND 
                      --ED_EXAM_SCHDL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID AND 
                      --ED_EXAM_STUD_ABSENCE.ED_EXAM_SCHDL_ID = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID 
                      --)
                      ) 
                      select  ED_STUD_COURSE_REG_ID, ED_STUD_SEMESTER_ID, ED_COURSE_ID, REG_DATE, AUDIT_FLG, REPEAT_FLG, IS_LAST, IS_APPROVED, APPROVE_DATE, AS_FACULTY_INFO_ID, ED_CODE_COURSE_STATUS_ID, 
                      ED_CODE_GRADING_ID, 
                      COURSE_DEGREE, 
                      COURSE_POINT, 
                      ENT_POLICY_GRADING_HDR_ID, 
                      GS_CODE_PASS_FAIL_ID, 
                      ADD_GPA_FLG, 
                      ENT_POLICY_ASSESS_HDR_ID, 
                      ED_STUD_ID, 
                      ED_CODE_SEMESTER_ID, 
                      ED_ACAD_YEAR_ID, 
                      FULL_NAME_AR, 
                      FULL_NAME_EN, 
                      DESCR_AR, 
                      SEMESTER_DESCR_AR, 
                      SEMESTER_DESCR_EN,
                      COURSE_CODE, 
                      COURSE_DESCR_AR, 
                      COURSE_DESCR_EN, 
                      LEVEL_DESCR_AR, 
                      LEVEL_DESCR_EN,
                      ED_CODE_LEVEL_ID, 
                      GRADING_DESCR_AR, 
                      GRADING_DESCR_EN , 
                      SYMBOL, 
                      ED_EXAM_STUD_ABSENCE_ID,
                      STUD_FACULTY_CODE,
                      sn, (select COUNT(*) from Paging) as TotalResults  from Paging
                      WHERE @PageSize = 0 or (@PageSize > 0 AND Paging.sn > (@pageIndex * @PageSize) AND Paging.sn <= (@pageIndex * @PageSize)+ @PageSize)
                      ORDER BY Paging.sn
                                            
	  End	
 
 
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudCourseForGrading">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_COURSE_REG table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@CoControlRoomId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

declare @edCodeLevelId numeric, @EntMainId numeric;
select @edCodeLevelId = ED_CODE_LEVEL_ID,@EntMainId = ENT_MAIN_ID  from CO_CONTROL_ROOM where CO_CONTROL_ROOM_ID = @CoControlRoomId;

declare @Dept numeric;
select @Dept = ENT_MAIN_ID from Entity_main where ENT_MAIN_ID = @EntMainId and Ent_Code_Entity_type_id = 3;

SELECT DISTINCT 
              ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID, 
              ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID, 
              ED_STUD_COURSE_REG.ED_COURSE_ID, 
              ED_STUD_COURSE_REG.REG_DATE, 
              ED_STUD_COURSE_REG.AUDIT_FLG, 
              ED_STUD_COURSE_REG.REPEAT_FLG, 
              ED_STUD_COURSE_REG.IS_LAST, 
              ED_STUD_COURSE_REG.IS_APPROVED, 
              ED_STUD_COURSE_REG.APPROVE_DATE, 
              ED_STUD_COURSE_REG.AS_FACULTY_INFO_ID, 
              ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID, 
              ED_STUD_COURSE_REG.ED_CODE_GRADING_ID, 
              ED_STUD_COURSE_REG.COURSE_DEGREE, 
              ED_STUD_COURSE_REG.COURSE_POINT, 
              ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID, 
              ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID, 
              ED_STUD_COURSE_REG.ADD_GPA_FLG, 
              ED_STUD_COURSE_REG.ENT_POLICY_ASSESS_HDR_ID, 
              ED_STUD.ED_STUD_ID, 
              ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID, 
              ED_ACAD_YEAR.ED_ACAD_YEAR_ID, 
              ED_STUD.FULL_NAME_AR, 
              ED_STUD.FULL_NAME_EN, 
              ED_ACAD_YEAR.DESCR_AR, 
              ED_CODE_SEMESTER.DESCR_AR AS SEMESTER_DESCR_AR, 
              ED_CODE_SEMESTER.DESCR_EN AS SEMESTER_DESCR_EN,
              ED_COURSE.COURSE_CODE, 
              ED_COURSE.COURSE_DESCR_AR, 
              ED_COURSE.COURSE_DESCR_EN, 
              ED_CODE_LEVEL.DESCR_AR AS LEVEL_DESCR_AR, 
              ED_CODE_LEVEL.DESCR_EN AS LEVEL_DESCR_EN,
              ED_CODE_LEVEL.ED_CODE_LEVEL_ID, 
              ED_CODE_GRADING.DESCR_AR AS GRADING_DESCR_AR, 
              ED_CODE_GRADING.DESCR_EN AS GRADING_DESCR_EN , 
              ED_CODE_COURSE_STATUS.SYMBOL, 
              ED_EXAM_STUD_ABSENCE.ED_EXAM_STUD_ABSENCE_ID,
              ED_STUD_FACULTY.STUD_FACULTY_CODE
FROM         ED_STUD_COURSE_REG INNER JOIN
              ED_STUD_SEMESTER ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
              ED_ACAD_YEAR ON ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID INNER JOIN
              ED_CODE_SEMESTER ON ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
              ED_COURSE ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID LEFT OUTER JOIN
              ED_CODE_LEVEL ON ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID LEFT OUTER JOIN
              ED_CODE_GRADING ON ED_CODE_GRADING.ED_CODE_GRADING_ID = ED_STUD_COURSE_REG.ED_CODE_GRADING_ID INNER JOIN
              ED_STUD ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID LEFT OUTER JOIN
              ED_EXAM_STUD_ABSENCE ON 
              ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_EXAM_STUD_ABSENCE.ED_STUD_SEMESTER_ID LEFT OUTER JOIN
              ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND 
              ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId LEFT OUTER JOIN
              ED_CODE_COURSE_STATUS ON 
              ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = ED_CODE_COURSE_STATUS.ED_CODE_COURSE_STATUS_ID FULL OUTER JOIN
              ED_EXAM_SCHDL ON ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID AND 
              ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID AND 
              ED_EXAM_SCHDL.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID AND 
              ED_EXAM_STUD_ABSENCE.ED_EXAM_SCHDL_ID = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) 
		 AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId ) 
		 AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId ) 
		 AND (ED_STUD_SEMESTER.IS_COURSE_APPROVED = 1)
			and (@edCodeLevelId is null or ( @edCodeLevelId is not null and ED_STUD_COURSE_REG.ED_COURSE_ID in
			(
			select t.ED_COURSE_ID from (
			select ED_COURSE_ID,course_code,SubString(course_code,PATINDEX('%[0-9]%',course_code),Len(course_code)) as course_num,COURSE_DESCR_AR,COURSE_DESCR_EN
			from ED_COURSE
			) as t 
			where (t.course_num like CONVERT(nvarchar,@edCodeLevelId) + '%') or (@edCodeLevelId is null)
			)
			))
			and (@Dept is null or ( @edCodeLevelId is null and @Dept is not null and ED_STUD_COURSE_REG.ED_COURSE_ID in (
			select ED_COURSE_ID from ED_COURSE where ED_COURSE.ENT_MAIN_ID = @EntMainId
			)
			))
			
 
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetByStudAndCourseString_C_Reg">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

--purpose:get all the courses registered for a certain student
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CourseString" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
        
        
        declare @SqlState nvarchar(max)
        
        set @SqlState=
				'SELECT
					ED_STUD_COURSE_REG.*
          
		from  ED_STUD_COURSE_REG 
           inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
    where ED_STUD_SEMESTER.ED_STUD_ID='+convert(nvarchar,@EdStudId)+' and ED_COURSE_ID in('+@CourseString+') and ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID=1 and ED_STUD_COURSE_REG.IS_LAST = 1'
    
    exec  (@SqlState)
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StudentCoursesTimeTable" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_REG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
				select	t1.*,
		t2.COURSE_DESCR_AR,
		t2.COURSE_DESCR_EN,
		t2.ED_CODE_COURSE_TEACHING_DESCR_AR,
		t2.ED_CODE_COURSE_TEACHING_DESCR_EN,
		t2.GROUP_DESCR_AR,
		t2.GROUP_DESCR_EN,
		t2.SC_BUILDING_DESCR_AR,
		t2.SC_BUILDING_DESCR_EN,
		t2.SC_HALL_DESCR_AR,
		t2.SC_HALL_DESCR_EN,
		t2.STF_FULL_NAME_AR,
		t2.STF_FULL_NAME_EN
		
from 
(SELECT     GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID, 
			SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID
FROM         GS_CODE_WEEK_DAY CROSS JOIN
                      SC_TCHNG_SLOT) as t1
left outer join
(
SELECT                
					SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID,
					SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID,
					SC_BUILDING.DESCR_AR AS SC_BUILDING_DESCR_AR,
                    SC_BUILDING.DESCR_EN AS SC_BUILDING_DESCR_EN, 
                    SC_HALL.DESCR_AR AS SC_HALL_DESCR_AR, 
                    SC_HALL.DESCR_EN AS SC_HALL_DESCR_EN, 
                    SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
                    SC_SCHEDULE_DTL.GROUP_DESCR_EN, 
                    SA_STF_MEMBER.STF_FULL_NAME_AR, 
                    SA_STF_MEMBER.STF_FULL_NAME_EN, 
                    ED_CDE_TCHNG_MTHD.DESCR_AR AS ED_CODE_COURSE_TEACHING_DESCR_AR, 
                    ED_CDE_TCHNG_MTHD.DESCR_EN AS ED_CODE_COURSE_TEACHING_DESCR_EN, 
                    ED_COURSE.COURSE_DESCR_AR, 
                    ED_COURSE.COURSE_DESCR_EN
FROM         
ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID 
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                      INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID left outer JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID left outer JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID
					  
WHERE       (ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
			(ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
			(ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
            (ED_STUD_GROUP.ED_STUD_ID = @EdStudID)
)as t2
on t1.GS_CODE_WEEK_DAY_ID = t2.GS_CODE_WEEK_DAY_ID
and t1.SC_TCHNG_SLOT_ID = t2.SC_TCHNG_SLOT_ID
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="StudentCoursesTimeTable2" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_REG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT    SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID, SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID, CONVERT(time, SC_SCHEDULE_DTL_DAY.FROM_TIME) AS FROM_TIME, CONVERT(time, 
                      SC_SCHEDULE_DTL_DAY.TO_TIME) AS TO_TIME, SC_BUILDING.DESCR_AR AS SC_BUILDING_DESCR_AR, SC_BUILDING.DESCR_EN AS SC_BUILDING_DESCR_EN, 
                      SC_HALL.DESCR_AR AS SC_HALL_DESCR_AR, SC_HALL.DESCR_EN AS SC_HALL_DESCR_EN, SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
                      SC_SCHEDULE_DTL.GROUP_DESCR_EN, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN, 
                      ED_CDE_TCHNG_MTHD.DESCR_AR AS ED_CODE_COURSE_TEACHING_DESCR_AR, 
                      ED_CDE_TCHNG_MTHD.DESCR_EN AS ED_CODE_COURSE_TEACHING_DESCR_EN, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, 
                      ED_COURSE.COURSE_CODE, GS_CODE_WEEK_DAY.DAY_ORDER, GS_CODE_WEEK_DAY.SYMBOL
FROM         ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID 
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                      INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID LEFT OUTER JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID LEFT OUTER JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID
WHERE     (ED_STUD_GROUP.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (ED_STUD_GROUP.ED_STUD_ID = @EdStudID)
order by GS_CODE_WEEK_DAY.DAY_ORDER,CONVERT(time, SC_SCHEDULE_DTL_DAY.FROM_TIME)
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="StudentCourses" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_REG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT       ED_COURSE.ED_COURSE_ID,
             ED_COURSE.COURSE_DESCR_AR, 
             ED_COURSE.COURSE_DESCR_EN,
             ED_COURSE.COURSE_CODE,
             ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID,
             ED_COURSE.CREDIT_HOURS,
             ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID,ED_CODE_COURSE_STATUS.DESCR_AR as COURSE_STATUS_AR,ED_CODE_COURSE_STATUS.DESCR_EN as COURSE_STATUS_EN
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                      inner join ED_CODE_COURSE_STATUS on ED_CODE_COURSE_STATUS.ED_CODE_COURSE_STATUS_ID=ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudID)
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and (@EdAcadYearId=0 or ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId)
and (@EdCodeSemesterId=0 or ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
order by ED_COURSE.COURSE_CODE

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StufCoursesTimeTable" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_REG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStufMemberID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
select	t1.*,
		t2.COURSE_DESCR_AR,
		t2.COURSE_DESCR_EN,
		t2.ED_CODE_COURSE_TEACHING_DESCR_AR,
		t2.ED_CODE_COURSE_TEACHING_DESCR_EN,
		t2.GROUP_DESCR_AR,
		t2.GROUP_DESCR_EN,
		t2.SC_BUILDING_DESCR_AR,
		t2.SC_BUILDING_DESCR_EN,
		t2.SC_HALL_DESCR_AR,
		t2.SC_HALL_DESCR_EN,
		t2.STF_FULL_NAME_AR,
		t2.STF_FULL_NAME_EN
		
from 
(SELECT     GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID, 
			SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID
FROM         GS_CODE_WEEK_DAY CROSS JOIN
                      SC_TCHNG_SLOT) as t1
left outer join
(
SELECT                
					SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID,
					SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID,
					SC_BUILDING.DESCR_AR AS SC_BUILDING_DESCR_AR,
                    SC_BUILDING.DESCR_EN AS SC_BUILDING_DESCR_EN, 
                    SC_HALL.DESCR_AR AS SC_HALL_DESCR_AR, 
                    SC_HALL.DESCR_EN AS SC_HALL_DESCR_EN, 
                    SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
                    SC_SCHEDULE_DTL.GROUP_DESCR_EN, 
                    SA_STF_MEMBER.STF_FULL_NAME_AR, 
                    SA_STF_MEMBER.STF_FULL_NAME_EN, 
                    ED_CDE_TCHNG_MTHD.DESCR_AR AS ED_CODE_COURSE_TEACHING_DESCR_AR, 
                    ED_CDE_TCHNG_MTHD.DESCR_EN AS ED_CODE_COURSE_TEACHING_DESCR_EN, 
                    ED_COURSE.COURSE_DESCR_AR, 
                    ED_COURSE.COURSE_DESCR_EN
FROM         
SA_STF_MEMBER INNER JOIN
                      SC_SCHEDULE_DTL ON SA_STF_MEMBER.SA_STF_MEMBER_ID = SC_SCHEDULE_DTL.SA_STF_MAMBER_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID 
                      INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID 
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                      INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID left outer JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID left outer JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID 
WHERE       (ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
			(ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
			(ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
            (SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStufMemberID)
)as t2
on t1.GS_CODE_WEEK_DAY_ID = t2.GS_CODE_WEEK_DAY_ID
and t1.SC_TCHNG_SLOT_ID = t2.SC_TCHNG_SLOT_ID
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StufCoursesTimeTable2" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_REG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStufMemberID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT distinct   SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID, SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID, CONVERT(time, SC_SCHEDULE_DTL_DAY.FROM_TIME) AS FROM_TIME, CONVERT(time, 
                      SC_SCHEDULE_DTL_DAY.TO_TIME) AS TO_TIME, SC_BUILDING.DESCR_AR AS SC_BUILDING_DESCR_AR, SC_BUILDING.DESCR_EN AS SC_BUILDING_DESCR_EN, 
                      SC_HALL.DESCR_AR AS SC_HALL_DESCR_AR, SC_HALL.DESCR_EN AS SC_HALL_DESCR_EN, SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
                      SC_SCHEDULE_DTL.GROUP_DESCR_EN, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN, 
                      ED_CDE_TCHNG_MTHD.DESCR_AR AS ED_CODE_COURSE_TEACHING_DESCR_AR, 
                      ED_CDE_TCHNG_MTHD.DESCR_EN AS ED_CODE_COURSE_TEACHING_DESCR_EN, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, 
                      ED_COURSE.COURSE_CODE, GS_CODE_WEEK_DAY.DAY_ORDER, GS_CODE_WEEK_DAY.SYMBOL
FROM         ED_STUD_GROUP right outer JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID 
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                      INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID LEFT OUTER JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID LEFT OUTER JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID LEFT OUTER JOIN
                      SC_SCHEDULE_DTL_EXT_STF ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_EXT_STF.SC_SCHEDULE_DTL_ID LEFT OUTER JOIN
                      SA_STF_MEMBER as extStf ON extStf.SA_STF_MEMBER_ID = SC_SCHEDULE_DTL_EXT_STF.SA_STF_MAMBER_ID
WHERE     (isnull(ED_OFFERING.AS_FACULTY_INFO_ID, 0) = isnull(@AsFacultyInfoId, 0)) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStufMemberID or extStf.SA_STF_MEMBER_ID = @SaStufMemberID)
order by GS_CODE_WEEK_DAY.DAY_ORDER,CONVERT(time, SC_SCHEDULE_DTL_DAY.FROM_TIME)

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="CourseTimeTable" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_REG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID,
                      SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID, 
                      SC_BUILDING.DESCR_AR AS SC_BUILDING_DESCR_AR,
                      SC_BUILDING.DESCR_EN AS SC_BUILDING_DESCR_EN, 
                      SC_HALL.DESCR_AR AS SC_HALL_DESCR_AR, 
                      SC_HALL.DESCR_EN AS SC_HALL_DESCR_EN, 
                      SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
                      SC_SCHEDULE_DTL.GROUP_DESCR_EN, 
                      SA_STF_MEMBER.STF_FULL_NAME_AR, 
                      SA_STF_MEMBER.STF_FULL_NAME_EN, 
                      ED_CDE_TCHNG_MTHD.DESCR_AR AS ED_CODE_COURSE_TEACHING_DESCR_AR, 
                      ED_CDE_TCHNG_MTHD.DESCR_EN AS ED_CODE_COURSE_TEACHING_DESCR_EN, 
                      ED_COURSE.COURSE_DESCR_AR, 
                      ED_COURSE.COURSE_DESCR_EN,
                      SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID as SC_SCHEDULE_DTL_ID,
                      ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID as EdCodeCourseTeachId,
                      convert(time, SC_SCHEDULE_DTL_DAY.FROM_TIME) as FROM_TIME,
                      convert(time, SC_SCHEDULE_DTL_DAY.TO_TIME) as TO_TIME
FROM         SC_SCHEDULE_DTL INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID LEFT OUTER JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID LEFT OUTER JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID 
                      join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
                      INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
WHERE --((@AsFacultyInfoId=0 and ED_OFFERING.AS_FACULTY_INFO_ID is null )or ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId	) AND 
			(ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
			(ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
			(ED_COURSE.ED_COURSE_ID = @EdCourseID) AND 
			(SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID IS NOT NULL) 
			--AND (SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID IS NOT NULL)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GroupsOnCourse" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_REG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
            SELECT           
                            SC_SCHEDULE_DTL.GROUP_DESCR_AR, 
                            SC_SCHEDULE_DTL.GROUP_DESCR_EN, 
                            ED_CDE_TCHNG_MTHD.DESCR_AR AS ED_CODE_COURSE_TEACHING_DESCR_AR, 
                            ED_CDE_TCHNG_MTHD.DESCR_EN AS ED_CODE_COURSE_TEACHING_DESCR_EN,
                            SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID as SC_SCHEDULE_DTL_ID,
                            ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID as EdCodeCourseTeachId
                        
            FROM         SC_SCHEDULE_DTL INNER JOIN
                                  SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                                  ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                                  ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                                  ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                                  INNER JOIN
                                  ED_CODE_COURSE_TEACHING ON 
                                  SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID
                                  join ED_CDE_TCHNG_MTHD on ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID
            WHERE	    (ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
			            (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
			            (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
			            (ED_COURSE.ED_COURSE_ID = @EdCourseID)  
			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Get_ForStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_COURSE_COMP table passing nullable parameters
-- Table Comment: جدول بيانات المواد التكميلية لمؤهل طالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Lang" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
if @Lang = 'En'
begin

SELECT    ED_STUD_COURSE_CHNG.ED_STUD_COURSE_CHNG_ID EdStudCourseChngId, 
		  '('+ED_COURSE.COURSE_CODE+') '+ ED_COURSE.COURSE_DESCR_EN CourseDescr, 
		  ED_CODE_COURSE_CHNG.DESCR_EN CourseChngDescr, 
		  ED_STUD_COURSE_CHNG.REQ_DATE ReqDate, 
		  ED_STUD_COURSE_CHNG.APPROVE_FLG ApproveFlg,
		  ED_STUD_COURSE_CHNG.ED_COURSE_ID EdCourseId
                      
FROM         ED_STUD_COURSE_CHNG INNER JOIN
                      ED_CODE_COURSE_CHNG ON 
                      ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID = ED_CODE_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_CHNG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where
	ED_STUD.ED_STUD_ID = @EdStudId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

end 
else
begin

SELECT    ED_STUD_COURSE_CHNG.ED_STUD_COURSE_CHNG_ID EdStudCourseChngId, 
		  '('+ED_COURSE.COURSE_CODE+') '+ ED_COURSE.COURSE_DESCR_AR CourseDescr, 
		  ED_CODE_COURSE_CHNG.DESCR_AR CourseChngDescr, 
		  ED_STUD_COURSE_CHNG.REQ_DATE ReqDate, 
		  ED_STUD_COURSE_CHNG.APPROVE_FLG ApproveFlg,
		  ED_STUD_COURSE_CHNG.ED_COURSE_ID EdCourseId
                      
FROM         ED_STUD_COURSE_CHNG INNER JOIN
                      ED_CODE_COURSE_CHNG ON 
                      ED_STUD_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID = ED_CODE_COURSE_CHNG.ED_CODE_COURSE_CHNG_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_CHNG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where
	ED_STUD.ED_STUD_ID = @EdStudId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

end
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Get_ForCourseChng">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ACCUM_HONOR table passing nullable parameters
-- Table Comment: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CourseChngFlag" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
if @CourseChngFlag = 1
begin
	SELECT     ENT_COURSE_PKG_DTL.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN
	FROM         ENT_COURSE_PKG_HDR INNER JOIN
						  ENT_COURSE_PKG_DTL ON 
						  ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
						  ED_COURSE ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID

	where ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = @EntCoursePkgHdrId
	and ED_COURSE.ED_COURSE_ID not in (SELECT     ED_STUD_COURSE_REG.ED_COURSE_ID
										FROM         ED_STUD_SEMESTER INNER JOIN
															  ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
															  ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
										where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
										and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
										and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdStudSemesterId
										and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
										
										union
										
										SELECT     ED_STUD_COURSE_CHNG.ED_COURSE_ID
										FROM         ED_STUD_COURSE_CHNG INNER JOIN
															  ED_STUD_STATE ON ED_STUD_COURSE_CHNG.ED_STUD_STATE_ID = ED_STUD_STATE.ED_STUD_STATE_ID INNER JOIN
															  ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
															  ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
										where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
										and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
										and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdStudSemesterId
										and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
										)
end
else
begin

	SELECT     ENT_COURSE_PKG_DTL.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN
	FROM         ENT_COURSE_PKG_HDR INNER JOIN
						  ENT_COURSE_PKG_DTL ON 
						  ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
						  ED_COURSE ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID

	where ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = @EntCoursePkgHdrId
	and ED_COURSE.ED_COURSE_ID in (SELECT     ED_STUD_COURSE_REG.ED_COURSE_ID
									FROM         ED_STUD_SEMESTER INNER JOIN
														  ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
														  ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
										where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
										and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
										and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdStudSemesterId
										and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
										and ED_STUD_COURSE_REG.ED_COURSE_ID not in (
																					SELECT     ED_STUD_COURSE_CHNG.ED_COURSE_ID
																					FROM         ED_STUD_COURSE_CHNG INNER JOIN
																										  ED_STUD_STATE ON ED_STUD_COURSE_CHNG.ED_STUD_STATE_ID = ED_STUD_STATE.ED_STUD_STATE_ID INNER JOIN
																										  ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
																										  ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
																					where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
																					and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
																					and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdStudSemesterId
																					and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
																					)
										 )

end

				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Get_ForCourseChngByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ACCUM_HONOR table passing nullable parameters
-- Table Comment: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CourseChngFlag" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
if (@CourseChngFlag = 0)
begin

SELECT   distinct  ED_COURSE.ED_COURSE_ID,ED_COURSE.COURSE_DESCR_AR,ED_COURSE.COURSE_DESCR_EN,ED_COURSE.COURSE_CODE
FROM         ED_OFFERING INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID

where @EntMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntMainId
order by ED_COURSE.COURSE_CODE
end
else
begin

	if (@CourseChngFlag = 1)
	begin

	SELECT  distinct   ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN,ED_COURSE.COURSE_CODE
	FROM         ED_OFFERING INNER JOIN
						  ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
						  ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID

	where (@EntMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntMainId)
	and ED_OFFERING_COURSE.ED_COURSE_ID not in 
	(
	SELECT     ED_STUD_COURSE_REG.ED_COURSE_ID
	FROM         ED_STUD_COURSE_REG INNER JOIN
				 ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
	where  ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId 
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
	)
	and ED_OFFERING_COURSE.ED_COURSE_ID not in 
	(
	SELECT    distinct ED_STUD_COURSE_CHNG.ED_COURSE_ID
	FROM         ED_STUD_COURSE_CHNG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
	where ED_STUD_COURSE_CHNG.APPROVE_FLG <> 1
  and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId 
	and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
	)
  order by ED_COURSE.COURSE_CODE

	end
	else
	begin

		SELECT   distinct  ED_COURSE.ED_COURSE_ID, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN,ED_COURSE.COURSE_CODE
		FROM         ED_STUD_COURSE_REG INNER JOIN
					 ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
							  ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID

		where  ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId 
		and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
		and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
		and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
    and (@EntMainId = 0 or ED_COURSE.ENT_MAIN_ID = @EntMainId)
		and ED_STUD_COURSE_REG.ED_COURSE_ID not in 
		(
		SELECT    distinct ED_STUD_COURSE_CHNG.ED_COURSE_ID
		FROM         ED_STUD_COURSE_CHNG INNER JOIN
						  ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
		where ED_STUD_COURSE_CHNG.APPROVE_FLG <> 1
    and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId 
		and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
		and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
		and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
		)
    order by ED_COURSE.COURSE_CODE

	end
end


				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Get_StudentState">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ACCUM_HONOR table passing nullable parameters
-- Table Comment: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_STUD_STATE.ENT_MAIN_ID, ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID

where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId

				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_EXCUSE_GetByEdBylawIdEdCodeExcuseTypeId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Safaa)
-- Purpose: Select records from the ENT_POLICY_EXCUSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeExcuseTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_POLICY_EXCUSE_ID],
					[ED_BYLAW_ID],
					[ED_CODE_EXCUSE_TYPE_ID],
					[MAX_DAYS],
					[MAX_MONTHS],
					[MAX_EXECUSE_STUDY],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_POLICY_EXCUSE]
				WHERE
					[ED_BYLAW_ID] = @EdBylawId
					AND [ED_CODE_EXCUSE_TYPE_ID] = @EdCodeExcuseTypeId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudPolicies">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_GRADING_HDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT distinct
					ENT_POLICY_GRADING_HDR.[ENT_POLICY_GRADING_HDR_ID],
					ENT_POLICY_GRADING_HDR.[DESCR_EN],
					ENT_POLICY_GRADING_HDR.[DESCR_AR],
					ENT_POLICY_GRADING_HDR.[ED_BYLAW_ID],
					ENT_POLICY_GRADING_HDR.[ENT_MAIN_ID],
					ENT_POLICY_GRADING_HDR.[IS_GENERAL],
					ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]
				from ED_STUD_COURSE_REG inner join ENT_POLICY_GRADING_HDR on 
             ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID=ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID
             inner join ED_STUD_SEMESTER on ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
        where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
              and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemId
              and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
              and ED_CODE_GRADING_TYPE_ID=@EdCodeGradingTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudAccumGradingScheme">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_GRADING_HDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
			SELECT   distinct top 1
					ENT_POLICY_GRADING_HDR.[ENT_POLICY_GRADING_HDR_ID],
					ENT_POLICY_GRADING_HDR.[DESCR_EN],
					ENT_POLICY_GRADING_HDR.[DESCR_AR],
					ENT_POLICY_GRADING_HDR.[ED_BYLAW_ID],
					ENT_POLICY_GRADING_HDR.[ENT_MAIN_ID],
					ENT_POLICY_GRADING_HDR.[IS_GENERAL],
					ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID],
          ENTITY_MAIN.NODE_PATH

      FROM         ENT_POLICY_GRADING_HDR inner join 
                   ED_STUD_STATE on ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
                   ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID  
                   inner join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID=ED_STUD_STATE.ENT_MAIN_ID
                            
                            
      where (@EdStudId is null or @EdStudId=0 or ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId)
            and (@AsFacultyInfoId is null or @AsFacultyInfoId=0 or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
            and ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID=@EdCodeGradingTypeId --=1 accum 
              
     order by ENTITY_MAIN.NODE_PATH desc
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="PolicyGrading_byStudSem_Course">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ASSESS_HDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
        
           If exists
                (    
                      SELECT      ENT_POLICY_GRADING_HDR.[ENT_POLICY_GRADING_HDR_ID],
					                        ENT_POLICY_GRADING_HDR.[DESCR_EN],
					                        ENT_POLICY_GRADING_HDR.[DESCR_AR],
					                        ENT_POLICY_GRADING_HDR.[ED_BYLAW_ID],
					                        ENT_POLICY_GRADING_HDR.[ENT_MAIN_ID],
					                        ENT_POLICY_GRADING_HDR.[IS_GENERAL],
					                        ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]
                      FROM       ENT_POLICY_GRADING_COURSE INNER JOIN
                                    ENT_POLICY_GRADING_HDR INNER JOIN
                                    ED_STUD_STATE INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                    ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID
                       WHERE        (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND
                                    (ENT_POLICY_GRADING_COURSE.ED_COURSE_ID = @EdCourseId)AND
                                    ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]=3
                )
                Begin
                    SELECT        ENT_POLICY_GRADING_HDR.[ENT_POLICY_GRADING_HDR_ID],
					                        ENT_POLICY_GRADING_HDR.[DESCR_EN],
					                        ENT_POLICY_GRADING_HDR.[DESCR_AR],
					                        ENT_POLICY_GRADING_HDR.[ED_BYLAW_ID],
					                        ENT_POLICY_GRADING_HDR.[ENT_MAIN_ID],
					                        ENT_POLICY_GRADING_HDR.[IS_GENERAL],
					                        ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]
                      FROM       ENT_POLICY_GRADING_COURSE INNER JOIN
                                    ENT_POLICY_GRADING_HDR INNER JOIN
                                    ED_STUD_STATE INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                    ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID
                       WHERE        (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId) AND
                                    (ENT_POLICY_GRADING_COURSE.ED_COURSE_ID = @EdCourseId) AND
                                     ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]=3
              End
              
         Else
           Begin
                declare @AsFacultyInfoId numeric
                      select @AsFacultyInfoId=AS_FACULTY_INFO_ID from ED_STUD_SEMESTER where 
                              ED_STUD_SEMESTER_ID=@EdStudSemesterId;
                if exists( SELECT         ENT_POLICY_GRADING_HDR.[ENT_POLICY_GRADING_HDR_ID],
					                            ENT_POLICY_GRADING_HDR.[DESCR_EN],
					                            ENT_POLICY_GRADING_HDR.[DESCR_AR],
					                            ENT_POLICY_GRADING_HDR.[ED_BYLAW_ID],
					                            ENT_POLICY_GRADING_HDR.[ENT_MAIN_ID],
					                            ENT_POLICY_GRADING_HDR.[IS_GENERAL],
					                            ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]
                      
                      FROM     ENT_POLICY_GRADING_COURSE INNER JOIN
                               ENT_POLICY_GRADING_HDR INNER JOIN
                               ENTITY_MAIN ON ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                               ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID
                      WHERE     (ENT_POLICY_GRADING_COURSE.ED_COURSE_ID = @EdCourseId) AND 
                                (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or @AsFacultyInfoId is null)AND
                                (ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]=3)
                            )
                            Begin
                                SELECT         ENT_POLICY_GRADING_HDR.[ENT_POLICY_GRADING_HDR_ID],
					                                      ENT_POLICY_GRADING_HDR.[DESCR_EN],
					                                      ENT_POLICY_GRADING_HDR.[DESCR_AR],
					                                      ENT_POLICY_GRADING_HDR.[ED_BYLAW_ID],
					                                      ENT_POLICY_GRADING_HDR.[ENT_MAIN_ID],
					                                      ENT_POLICY_GRADING_HDR.[IS_GENERAL],
					                                      ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]
                                
                                FROM     ENT_POLICY_GRADING_COURSE INNER JOIN
                                         ENT_POLICY_GRADING_HDR INNER JOIN
                                         ENTITY_MAIN ON ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                         ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID
                                         
                                         WHERE     (ENT_POLICY_GRADING_COURSE.ED_COURSE_ID = @EdCourseId) AND 
                                (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or @AsFacultyInfoId is null)AND
                                (ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]=3) 
                            End
                            
                      else
                        Begin
                        --   SELECT         ENT_POLICY_GRADING_HDR.[ENT_POLICY_GRADING_HDR_ID],
					               --                         ENT_POLICY_GRADING_HDR.[DESCR_EN],
					                --                        ENT_POLICY_GRADING_HDR.[DESCR_AR],
					                 --                       ENT_POLICY_GRADING_HDR.[ED_BYLAW_ID],
					                  --                      ENT_POLICY_GRADING_HDR.[ENT_MAIN_ID],
					                   --                     ENT_POLICY_GRADING_HDR.[IS_GENERAL],
					                    --                    ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]
                               --   FROM     
                                --           ENT_POLICY_GRADING_HDR INNER JOIN
                                 --          ENTITY_MAIN ON ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID 
                                  --         
                                 -- WHERE      
                                  --         
                                   --         (ENT_POLICY_GRADING_HDR.IS_GENERAL=1) AND
                                    --        (ENT_POLICY_GRADING_HDR.[ED_CODE_GRADING_TYPE_ID]=3)
                                    
                                    
                                    -- Added @ 22-12-2011 
                                    -- For ED_STUD_COURSE_REG_TEMP (ed_STUD_SEMESTER_ID IS NULL

                                   if exists (
SELECT Top 1 ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID, ENT_POLICY_GRADING_HDR.DESCR_EN, ENT_POLICY_GRADING_HDR.DESCR_AR, 
       ENT_POLICY_GRADING_HDR.ED_BYLAW_ID, ENT_POLICY_GRADING_HDR.ENT_MAIN_ID, ENT_POLICY_GRADING_HDR.IS_GENERAL, 
       ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID
FROM   ENT_POLICY_GRADING_HDR INNER JOIN
       ENT_POLICY_GRADING_COURSE ON 
       ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID=3 and ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID AND ENT_POLICY_GRADING_COURSE.ED_COURSE_ID = @EdCourseId
)
begin
		--Policy Related Course
SELECT Top 1 ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID, ENT_POLICY_GRADING_HDR.DESCR_EN, ENT_POLICY_GRADING_HDR.DESCR_AR, 
       ENT_POLICY_GRADING_HDR.ED_BYLAW_ID, ENT_POLICY_GRADING_HDR.ENT_MAIN_ID, ENT_POLICY_GRADING_HDR.IS_GENERAL, 
       ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID
FROM   ENT_POLICY_GRADING_HDR INNER JOIN
       ENT_POLICY_GRADING_COURSE ON 
       ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID=3 and ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID AND ENT_POLICY_GRADING_COURSE.ED_COURSE_ID = @EdCourseId
       end 
       else
       begin
			declare @CourseAsFacultyInfoId numeric;
			select  @CourseAsFacultyInfoId=AS_FACULTY_INFO_ID from ED_COURSE where ED_COURSE_ID=@EdCourseId;
			  -- Policy General On Faculty  if not exists get university   
			IF EXISTS ( SELECT 'a'
			FROM   ENT_POLICY_GRADING_HDR inner join ENTITY_MAIN on ENT_POLICY_GRADING_HDR.ENT_MAIN_ID =ENTITY_MAIN.ENT_MAIN_ID and ((@CourseAsFacultyInfoId IS NULL AND ENTITY_MAIN.AS_FACULTY_INFO_ID IS null) or(ENTITY_MAIN.AS_FACULTY_INFO_ID=@CourseAsFacultyInfoId and  ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=2))
			WHERE  ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID=3 and ENT_POLICY_GRADING_HDR.IS_GENERAL=1)
			BEGIN
			
				SELECT ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID, ENT_POLICY_GRADING_HDR.DESCR_EN, ENT_POLICY_GRADING_HDR.DESCR_AR, 
					   ENT_POLICY_GRADING_HDR.ED_BYLAW_ID, ENT_POLICY_GRADING_HDR.ENT_MAIN_ID, ENT_POLICY_GRADING_HDR.IS_GENERAL, 
					   ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID
				FROM   ENT_POLICY_GRADING_HDR inner join ENTITY_MAIN on ENT_POLICY_GRADING_HDR.ENT_MAIN_ID =ENTITY_MAIN.ENT_MAIN_ID and ((@CourseAsFacultyInfoId IS NULL AND ENTITY_MAIN.AS_FACULTY_INFO_ID IS null) or(ENTITY_MAIN.AS_FACULTY_INFO_ID=@CourseAsFacultyInfoId and  ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=2))
				WHERE  ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID=3 and ENT_POLICY_GRADING_HDR.IS_GENERAL=1
							
			END
			ELSE
			BEGIN
				
				DECLARE @entMainId NUMERIC;
				SELECT @entMainId = ent_main_id FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID = 1
				
				SELECT ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID, ENT_POLICY_GRADING_HDR.DESCR_EN, ENT_POLICY_GRADING_HDR.DESCR_AR, 
					   ENT_POLICY_GRADING_HDR.ED_BYLAW_ID, ENT_POLICY_GRADING_HDR.ENT_MAIN_ID, ENT_POLICY_GRADING_HDR.IS_GENERAL, 
					   ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID
				FROM   ENT_POLICY_GRADING_HDR inner join ENTITY_MAIN on ENT_POLICY_GRADING_HDR.ENT_MAIN_ID =ENTITY_MAIN.ENT_MAIN_ID 
				and (ENTITY_MAIN.ENT_MAIN_ID=@entMainId)
				WHERE  ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID=3 and ENT_POLICY_GRADING_HDR.IS_GENERAL=1
				
			END
		end

                        End
               END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="POLICY_GRADING_HDR_GET_BYCOURSE">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_GRADING_HDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
        
        declare @NODE_PATH nvarchar(90)
      SELECT @NODE_PATH=NODE_PATH FROM ENTITY_MAIN WHERE 
        ENT_MAIN_ID=@EntMainId
        
        if exists
            (
				            SELECT
					            [dbo].[ENT_POLICY_GRADING_HDR].[ENT_POLICY_GRADING_HDR_ID],
					            [dbo].[ENT_POLICY_GRADING_HDR].[DESCR_EN],
					            [dbo].[ENT_POLICY_GRADING_HDR].[DESCR_AR],
					            [dbo].[ENT_POLICY_GRADING_HDR].[ED_BYLAW_ID],
					            [dbo].[ENT_POLICY_GRADING_HDR].[ENT_MAIN_ID],
					            [dbo].[ENT_POLICY_GRADING_HDR].[IS_GENERAL],
					            [dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID]
				            FROM
					            [dbo].[ENT_POLICY_GRADING_HDR] inner join ENT_POLICY_GRADING_COURSE on ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID=
                      [dbo].[ENT_POLICY_GRADING_HDR].ENT_POLICY_GRADING_HDR_ID
				            WHERE
					            (ENT_POLICY_GRADING_COURSE.[ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
                   AND (ENT_POLICY_GRADING_COURSE.[ENT_COURSE_PKG_HDR_ID] = @EntCoursePkgHdrId OR @EntCoursePkgHdrId IS NULL)
                   AND ([dbo].[ENT_POLICY_GRADING_HDR].[ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
                   and ([dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID] = 3 or [dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID]=4)
                      
               )
               
                BEGIN
                       SELECT
                       [dbo].[ENT_POLICY_GRADING_HDR].[ENT_POLICY_GRADING_HDR_ID],
					            [dbo].[ENT_POLICY_GRADING_HDR].[DESCR_EN],
					            [dbo].[ENT_POLICY_GRADING_HDR].[DESCR_AR],
					            [dbo].[ENT_POLICY_GRADING_HDR].[ED_BYLAW_ID],
					            [dbo].[ENT_POLICY_GRADING_HDR].[ENT_MAIN_ID],
					            [dbo].[ENT_POLICY_GRADING_HDR].[IS_GENERAL],
					            [dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID]
                        FROM
                      [dbo].[ENT_POLICY_GRADING_HDR] inner join ENT_POLICY_GRADING_COURSE on ENT_POLICY_GRADING_COURSE.ENT_POLICY_GRADING_HDR_ID=
                      [dbo].[ENT_POLICY_GRADING_HDR].ENT_POLICY_GRADING_HDR_ID
                        WHERE 
                       (ENT_POLICY_GRADING_COURSE.[ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
                   AND (ENT_POLICY_GRADING_COURSE.[ENT_COURSE_PKG_HDR_ID] = @EntCoursePkgHdrId OR @EntCoursePkgHdrId IS NULL)
                   AND ([dbo].[ENT_POLICY_GRADING_HDR].[ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
                   and ([dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID] = 3 or [dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID]=4)
               END
				
         ELSE
               BEGIN
                      SELECT TOP 1
                        [dbo].[ENT_POLICY_GRADING_HDR].[ENT_POLICY_GRADING_HDR_ID],
					              [dbo].[ENT_POLICY_GRADING_HDR].[DESCR_EN],
					              [dbo].[ENT_POLICY_GRADING_HDR].[DESCR_AR],
					              [dbo].[ENT_POLICY_GRADING_HDR].[ED_BYLAW_ID],
					              [dbo].[ENT_POLICY_GRADING_HDR].[ENT_MAIN_ID],
					              [dbo].[ENT_POLICY_GRADING_HDR].[IS_GENERAL],
					              [dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID]
                        FROM
                      [dbo].[ENT_POLICY_GRADING_HDR] 
                      INNER JOIN ENTITY_MAIN ON ENTITY_MAIN.ENT_MAIN_ID= [dbo].[ENT_POLICY_GRADING_HDR].ENT_MAIN_ID
                        WHERE 
                           [dbo].[ENT_POLICY_GRADING_HDR].IS_GENERAL=1
                           AND @NODE_PATH LIKE ENTITY_MAIN.NODE_PATH +'%'
                           and ([dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID] = 3 or [dbo].[ENT_POLICY_GRADING_HDR].[ED_CODE_GRADING_TYPE_ID]=4)
                           ORDER BY ENTITY_MAIN.NODE_PATH DESC
               END
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_GRADING_MAIN_GetByEntPolicyGradingRulesId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_GRADING_MAIN table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyGradingRulesId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_POLICY_GRADING_RULES_ID],
					[COURSE_MAX_DEG],
					[COURSE_MIN_PRCNT],
					[ENT_MAIN_ID],
					[COURSE_MIN_DEG]
				FROM
					[dbo].[ENT_POLICY_GRADING_MAIN]
				WHERE
					[ENT_POLICY_GRADING_RULES_ID] = @EntPolicyGradingRulesId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudAccumGrading">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_GRADING_DTL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@edStudId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@TotalGpa" type="numeric" direction="Input" size="11" precision="8" scale="3" param="(8, 3)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT    top 1  ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_DTL_ID,
                 ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID, 
                 ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID,
                 ENT_POLICY_GRADING_DTL.DESCR_AR, 
                 ENT_POLICY_GRADING_DTL.DESCR_EN, 
                 ENT_POLICY_GRADING_DTL.SYMBOL_AR,
                 ENT_POLICY_GRADING_DTL.SYMBOL_EN,
                 ENT_POLICY_GRADING_DTL.GRAD_ORDER, 
                 ENT_POLICY_GRADING_DTL.MIN_RATE, 
                 ENT_POLICY_GRADING_DTL.MAX_RATE, 
                 ENT_POLICY_GRADING_DTL.GS_CODE_PASS_FAIL_ID, 
                 ENT_POLICY_GRADING_DTL.POINTS
        FROM         ENT_POLICY_GRADING_DTL INNER JOIN
                              ENT_POLICY_GRADING_HDR ON 
                              ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID INNER JOIN
                              ENTITY_MAIN ON ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                              ED_STUD_STATE ON ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_STATE.ENT_MAIN_ID INNER JOIN
                              ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
        WHERE     (ED_STUD_SEMESTER.ED_STUD_ID =@edStudId) AND
                  (@TotalGpa>=ENT_POLICY_GRADING_DTL.MIN_RATE) AND (@TotalGpa<ENT_POLICY_GRADING_DTL.MAX_RATE)
                  order by ENTITY_MAIN.NODE_PATH desc
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_EXCUSE_GetForApprove" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_EXCUSE table
-- Table Comment: جدول اعتذارت الطالب - طلبات الاضافة / الحذف / الانسحاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeReqStateId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeExcuseTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@STUD_FACULTY_CODE" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
if(@GsCodeReqStateId=0)
begin
set @GsCodeReqStateId = null;
end				

if(@EdCodeExcuseTypeId=0)
begin
set @EdCodeExcuseTypeId = null;
end

if(@FromDate='1/1/2211')
begin
set @FromDate = null;
end

if(@ToDate='1/1/2211')
begin
set @ToDate = null;
end

if(@Lang=0)
begin
set @Lang = null;
end

if(@StudName='')
begin
set @StudName = null;
end

SELECT      ED_STUD_EXCUSE.ED_STUD_EXCUSE_ID, 
			ED_STUD_EXCUSE.ED_CODE_EXCUSE_TYPE_ID, 
			ED_STUD_EXCUSE.GS_CODE_REQ_STATUS_ID, 
			ED_STUD_EXCUSE.REQ_DATE, 
			ED_STUD.FULL_NAME_AR, 
			ED_STUD.FULL_NAME_EN,
			ED_STUD.ED_STUD_ID
			
FROM ED_STUD_EXCUSE INNER JOIN
	 ED_STUD_SEMESTER ON ED_STUD_EXCUSE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
     ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID inner join 
     ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.IS_ACTIVE = 1
where ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId and  ED_STUD_EXCUSE.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and (ED_STUD_EXCUSE.ED_CODE_SEMESTER_ID is null or ED_STUD_EXCUSE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId and ED_STUD_EXCUSE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ((@GsCodeReqStateId is null or ED_STUD_EXCUSE.GS_CODE_REQ_STATUS_ID = @GsCodeReqStateId)
and (@EdCodeExcuseTypeId is null or ED_STUD_EXCUSE.ED_CODE_EXCUSE_TYPE_ID = @EdCodeExcuseTypeId)
and ((@FromDate is null and @ToDate is null) or ED_STUD_EXCUSE.REQ_DATE between @FromDate and @ToDate)
and ((@Lang is null and @StudName is null) or (@Lang=2 and ED_STUD.FULL_NAME_EN like '%'+@StudName+'%') or (@Lang=1 and ED_STUD.FULL_NAME_AR like '%'+@StudName+'%')))
and (@STUD_FACULTY_CODE is null or @STUD_FACULTY_CODE like '%' + STUD_FACULTY_CODE + '%')						
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_EXCUSE_Latest_ID" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_EXCUSE table
-- Table Comment: جدول اعتذارت الطالب - طلبات الاضافة / الحذف / الانسحاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <body>
        <![CDATA[
				
		
			select max(ED_STUD_EXCUSE_ID)from ED_STUD_EXCUSE;
          									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_EXCUSE_GetStudExcuses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_EXCUSE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_STUD_EXCUSE_ID],
					[ED_STUD_SEMESTER_ID],
					[ED_CODE_EXCUSE_TYPE_ID],
					[EXCUSE_NUM],
					[EXCUSE_NOTE],
					[REQ_DATE],
					[GS_CODE_REQ_STATUS_ID],
					[REQ_STATUS_DATE],
					[AS_FACULTY_INFO_ID],
					[ED_STUD_ID],
					[ED_ACAD_YEAR_ID],
					[ED_CODE_SEMESTER_ID]
				FROM
					[dbo].[ED_STUD_EXCUSE]
				WHERE
					[ED_STUD_ID] = @EdStudId
          and [AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					and [ED_ACAD_YEAR_ID] =@EdAcadYearId
					and [ED_CODE_SEMESTER_ID]=@EdCodeSemesterId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetTotalCrForSem">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  select isnull(sum(ED_COURSE.CREDIT_HOURS),0)
      from ED_STUD_COURSE_REG inner join ED_COURSE on ED_STUD_COURSE_REG.ED_COURSE_ID=ED_COURSE.ED_COURSE_ID
          inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
          inner join ED_STUD on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
          inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
      where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
      and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
	AND dbo.ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
	
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="CHK_RATING_LIMITS">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_COURSE_REG_ASSESS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[


DECLARE @MinRate NUMERIC(9,0)
DECLARE @MaxRate NUMERIC(9,0)

SELECT @MaxRate = MAX_RATE FROM ENT_POLICY_GRADING_DTL
								   WHERE Ent_Policy_GRADING_HDR_Id = @EntPolicyGradingHdrId
								   ORDER BY GRAD_ORDER desc
SELECT @MinRate = MIN_RATE FROM ENT_POLICY_GRADING_DTL
								   WHERE Ent_Policy_GRADING_HDR_Id = @EntPolicyGradingHdrId
								   ORDER BY GRAD_ORDER ASC

IF @MaxRate <> 100 OR @MinRate <> 0
BEGIN
RAISERROR('COS_Rate',16,-1) 
RETURN
END

CREATE TABLE #INVALID_RATING32(GradOrder numeric(9,0),Min_Rate numeric(9,0),Max_Rate numeric(9,0))
		DECLARE @GradOrder NUMERIC(9,0)
		DECLARE @MIN NUMERIC(9,0)
		DECLARE @PREMAX NUMERIC(9,0)
		DECLARE @MAX NUMERIC(9,0)
		DECLARE @FOUND NUMERIC(1,0)
		DECLARE @RTYPE NUMERIC(1,0)
		DECLARE @Count NUMERIC(9,0)
		SET @FOUND=0
		SET @Count=1
		
	DECLARE RATINGS_PERCENT CURSOR FOR SELECT MIN_RATE,MAX_RATE,Grad_Order FROM ENT_POLICY_GRADING_DTL
								   WHERE Ent_Policy_GRADING_HDR_Id = @EntPolicyGradingHdrId
								   ORDER BY GRAD_ORDER desc --min_rate desc --
		OPEN RATINGS_PERCENT
		--PRINT '------------------------------------'
		FETCH NEXT FROM RATINGS_PERCENT INTO @MIN,@MAX,@GradOrder
		 IF(@MIN = NULL or @MAX is NULL)
				BEGIN
					GOTO END_RATING_PERCENT
		           
				END
				SELECT @PREMAX=MIN_Rate FROM ENT_POLICY_GRADING_DTL WHERE GRAD_ORDER = @GradOrder  AND Ent_Policy_GRADING_HDR_Id = @EntPolicyGradingHdrId
				PRINT Cast(@MIN as varchar(100)) + ' ' + CAST(@MAX as varchar(100)) + ' ' + cast(@GradOrder as varchar(100))
				PRINT @PREMAX
				
		WHILE(@@FETCH_STATUS <>-1)
		BEGIN
			SELECT @PREMAX=MIN_Rate FROM ENT_POLICY_GRADING_DTL WHERE GRAD_ORDER = @GradOrder AND Ent_Policy_GRADING_HDR_Id = @EntPolicyGradingHdrId
			SELECT @MIN =Max_Rate FROM ENT_POLICY_GRADING_DTL WHERE GRAD_ORDER = @GradOrder -1 AND Ent_Policy_GRADING_HDR_Id = @EntPolicyGradingHdrId
			
			PRINT 'MIN ' + CAST(@MIN as varchar(100)) + ' PREMAX ' + CAST(@PREMAX as varchar(100))
			IF(@MIN <> @PREMAX)
				BEGIN
				    PRINT 'aaaa'
					INSERT INTO #INVALID_RATING32 VALUES(@GradOrder,@MIN,@PREMAX)
					
				END
				
				PRINT 'PREMAX ' +  cast(@PREMAX as varchar(100))
		FETCH NEXT FROM RATINGS_PERCENT INTO @MIN,@MAX,@GradOrder
		END
		
		--BAD_PERCENT_START:
		END_RATING_PERCENT:
		CLOSE RATINGS_PERCENT
		DEALLOCATE RATINGS_PERCENT
		
		SELECT * FROM #INVALID_RATING32
    ]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStaff_TeachingCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMamberId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
--				SELECT     ED_COURSE_ID, COURSE_CODE, COURSE_DESCR_AR, COURSE_DESCR_EN
--				FROM         ED_COURSE
--
--				where ED_COURSE.ED_COURSE_ID in (
--					SELECT DISTINCT ED_STUD_COURSE_REG.ED_COURSE_ID
--					FROM         ED_STUD_GROUP INNER JOIN
--										  SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
--										  ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID INNER JOIN
--										  ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
--					WHERE     (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @SaStfMamberId)
--					and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
--					and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--									)

SELECT     ED_COURSE_ID, COURSE_CODE, COURSE_DESCR_AR, COURSE_DESCR_EN
				FROM         ED_COURSE

				where ED_COURSE.ED_COURSE_ID in (
					SELECT DISTINCT ED_OFFERING_COURSE.ED_COURSE_ID
FROM         SC_SCHEDULE_HDR INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID AND 
                      ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
WHERE     (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @SaStfMamberId)
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
									)
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStaff_CourseGroup">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@SaStfMamberId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
				SELECT     SC_SCHEDULE_DTL_ID, GROUP_DESCR_AR, GROUP_DESCR_EN
				FROM         SC_SCHEDULE_DTL

				where SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID in 
				(
				--	SELECT    distinct ED_STUD_GROUP.SC_SCHEDULE_DTL_ID
				--	FROM         ED_STUD_GROUP INNER JOIN
				--						  ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
				--	WHERE     (ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId)
				
				SELECT DISTINCT SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
				FROM         SC_SCHEDULE_DTL INNER JOIN
									  SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
									  ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID
				where                 ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId
				)
				and SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @SaStfMamberId
				
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_MinTimeSemesterAndLevel">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
			 SELECT     COUNT(*) AS MinTimeSemester, COUNT(DISTINCT ED_STUD_SEMESTER.ED_CODE_LEVEL_ID) AS MinTimeLevels
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
AND ED_CODE_SEMESTER.ED_CODE_SEMESTER_TYPE_ID = 1

				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_NoOfMajorAndMinorDeclared">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     SUM(case when ENT_CODE_ENTITY_TYPE.ENT_CODE_ENTITY_TYPE_ID = 5 then 1 else 0 end) as NoOfMajorDeclared,
			SUM(case when ENT_CODE_ENTITY_TYPE.ENT_CODE_ENTITY_TYPE_ID = 6 then 1 else 0 end) as NoOfMinorDeclared
FROM         ED_STUD_STATE INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ENT_CODE_ENTITY_TYPE ON ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = ENT_CODE_ENTITY_TYPE.ENT_CODE_ENTITY_TYPE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
WHERE	ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
		and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
		and ED_STUD_STATE.ED_CODE_STATE_STATUS_ID=1
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_ReqCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_COURSE.ED_COURSE_ID
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ENT_COURSE_MD_DATA ON ENTITY_MAIN.ENT_MAIN_ID = ENT_COURSE_MD_DATA.ENT_MAIN_ID INNER JOIN
                      ED_COURSE ON ENT_COURSE_MD_DATA.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
where	ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
		and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
		and ENT_COURSE_MD_DATA.ENT_MAIN_ID = @EntMainId
		and ENT_COURSE_MD_DATA.ENT_CODE_PRECOND_MD_ID=9
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_StateTotCh">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				

select  t1.ENT_COURSE_PKG_HDR_ID,
		t1.MIN_TOT_CH,
		isnull(t2.STUD_TOT_CH,0) as STUD_TOT_CH

from

(SELECT     ENT_COURSE_PKG_HDR.MIN_TOT_CH, ENT_COURSE_PKG_HDR.ENT_MAIN_ID, ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID
FROM         ENT_COURSE_PKG_DTL INNER JOIN
                      ENT_COURSE_PKG_HDR ON 
                      ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID INNER JOIN
                      ED_COURSE ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
WHERE     (ENT_COURSE_PKG_HDR.ENT_MAIN_ID = @EntMainId)
GROUP BY ENT_COURSE_PKG_HDR.MIN_TOT_CH, ENT_COURSE_PKG_HDR.ENT_MAIN_ID, ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID) as t1

left outer join

(
SELECT     SUM(ED_COURSE.CREDIT_HOURS) as STUD_TOT_CH,ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID
FROM         ENT_COURSE_PKG_DTL INNER JOIN
                      ED_STUD_COURSE_REG INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID ON 
                      ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ENT_COURSE_PKG_HDR INNER JOIN
                      ENTITY_MAIN ON ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                      ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId
and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 1

group by ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID
) as t2

on t1.ENT_COURSE_PKG_HDR_ID = t2.ENT_COURSE_PKG_HDR_ID
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_StateCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT    distinct ENT_COURSE_PKG_DTL.ED_COURSE_ID
FROM         ENT_COURSE_PKG_DTL INNER JOIN
                      ENT_COURSE_PKG_HDR ON 
                      ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID INNER JOIN
                      ENTITY_MAIN ON ENT_COURSE_PKG_HDR.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE     (ENTITY_MAIN.ENT_MAIN_ID = @EntMainId)
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_PassCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT  distinct   ED_STUD_COURSE_REG.ED_COURSE_ID
FROM         GS_CODE_PASS_FAIL INNER JOIN
                      ED_STUD_COURSE_REG ON GS_CODE_PASS_FAIL.GS_CODE_PASS_FAIL_ID = ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID INNER JOIN
                      ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID ON 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where	ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
		and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
		and GS_CODE_PASS_FAIL.GS_CODE_PASS_FAIL_ID = 1
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_PassCourses2">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_STUD_COURSE_REG.ED_COURSE_ID
FROM         GS_CODE_PASS_FAIL INNER JOIN
                      ED_STUD_COURSE_REG ON GS_CODE_PASS_FAIL.GS_CODE_PASS_FAIL_ID = ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID INNER JOIN
                      ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID ON 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where	ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
		and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
		and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
		and GS_CODE_PASS_FAIL.GS_CODE_PASS_FAIL_ID = 1
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_EntityMains">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ENTITY_MAIN.ENT_MAIN_ID
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
		and ED_STUD_STATE.IS_DECLARED = 1
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_NullDegreeCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdStudStateId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_STUD_COURSE_REG.ED_COURSE_ID
FROM         ED_STUD_STATE INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ENT_COURSE_PKG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_COURSE_PKG_HDR.ENT_MAIN_ID INNER JOIN
                      ENT_COURSE_PKG_DTL ON 
                      ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_ID = ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_ID INNER JOIN
                      ED_COURSE ON ENT_COURSE_PKG_DTL.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID AND 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_COURSE_REG.COURSE_DEGREE IS NULL) 
AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID IN (1, 5))
AND (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) 
AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
AND (ED_STUD_STATE.ED_STUD_STATE_ID = @EdStudStateId)
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_StatusIds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ED_STUD_STATE.ED_STUD_STATE_ID
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) 
AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStud_LecturesNotes">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_SEMESTER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
select t.SV_LEC_NOTE_ID,
		t.NOTE_DATE,
		t.NOTE_MSG,
		t.FILE_PATH

from

(SELECT     SV_LEC_NOTE.SV_LEC_NOTE_ID, SV_LEC_NOTE.NOTE_MSG, SV_LEC_NOTE.NOTE_DATE, SV_LEC_NOTE.FILE_PATH
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      SV_LEC_NOTE ON ED_COURSE.ED_COURSE_ID = SV_LEC_NOTE.ED_COURSE_ID INNER JOIN
                      ED_STUD_GROUP ON ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID = ED_STUD_GROUP.ED_STUD_COURSE_REG_ID INNER JOIN
                      SC_SCHEDULE_DTL ON SV_LEC_NOTE.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID AND 
                      ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) 
AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
AND (SV_LEC_NOTE.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (SV_LEC_NOTE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
AND (SV_LEC_NOTE.ED_COURSE_ID = @EdCourseId)

union

SELECT     SV_LEC_NOTE.SV_LEC_NOTE_ID, SV_LEC_NOTE.NOTE_MSG, SV_LEC_NOTE.NOTE_DATE, SV_LEC_NOTE.FILE_PATH
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      SV_LEC_NOTE ON ED_COURSE.ED_COURSE_ID = SV_LEC_NOTE.ED_COURSE_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) 
AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
AND (SV_LEC_NOTE.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (SV_LEC_NOTE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
AND (SV_LEC_NOTE.ED_COURSE_ID = @EdCourseId) 
AND SV_LEC_NOTE.SC_SCHEDULE_DTL_ID is null) as t

order by t.NOTE_DATE desc
		
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="StaffAttendanceFilter">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SA_STF_ATTEND table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@ScfEntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@JobDegree" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@JobStatus" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@StaffName" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@StaffCode" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@NationalNum" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@DateFrom" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@DateTo" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
if(@Lang=1)--arabic
begin
	select 	SA_STF_ATTEND.[SA_STF_ATTEND_ID],
					SA_STF_ATTEND.[SA_STF_MEMBER_ID],
					SA_STF_ATTEND.[ATT_DATE],
					SA_STF_ATTEND.[ABSENCE_FLG],
					SA_STF_ATTEND.[EXECUSE_FLG],
					SA_STF_ATTEND.[FROM_TIME],
					SA_STF_ATTEND.[TO_TIME],
          SA_STF_MEMBER.STF_FULL_NAME_AR,
          SA_STF_MEMBER.STF_CODE,
          ENTITY_MAIN.ENT_DESCR_AR,
          SA_CODE_SC_DEG.SC_DEG_DESCR_AR,
          SA_STF_MEMBER.SA_STF_MEMBER_ID
          
          
	from  SA_STF_ATTEND left outer join SA_STF_MEMBER on SA_STF_ATTEND.SA_STF_MEMBER_ID=SA_STF_MEMBER.SA_STF_MEMBER_ID
  left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID=SA_STF_MEMBER.AS_NODE_ID
  left outer join SA_CODE_SC_DEG on SA_STF_MEMBER.SA_CODE_SC_DEG_ID=SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
  
	where (SA_STF_MEMBER.AS_FACULTY_INFO_ID=@AsFacultyId) 
	and (@ScfEntMainId is null or SA_STF_MEMBER.AS_NODE_ID=@ScfEntMainId)
	and(@JobDegree is null or SA_STF_MEMBER.SA_CODE_SC_DEG_ID=@JobDegree)
	and (@JobStatus is null or SA_STF_MEMBER.SA_CODE_JOB_STATUS_ID=@JobStatus)
	and(@StaffName is null or SA_STF_MEMBER.STF_CL_FULL_NAME_AR like '%'+@StaffName+'%')
	and(@StaffCode is null or SA_STF_MEMBER.STF_CODE like '%'+@StaffCode+'%')
	and(@NationalNum is null or SA_STF_MEMBER.STF_NATIONAL_ID_NUM like '%'+@NationalNum+'%')
	and(@DateFrom is null or  SA_STF_ATTEND.ATT_DATE>=@DateFrom )
  and(@DateTo is null or SA_STF_ATTEND.ATT_DATE<=@DateTo)
end
else--english
begin
	select SA_STF_ATTEND.[SA_STF_ATTEND_ID],
					SA_STF_ATTEND.[SA_STF_MEMBER_ID],
					SA_STF_ATTEND.[ATT_DATE],
					SA_STF_ATTEND.[ABSENCE_FLG],
					SA_STF_ATTEND.[EXECUSE_FLG],
					SA_STF_ATTEND.[FROM_TIME],
					SA_STF_ATTEND.[TO_TIME],
          SA_STF_MEMBER.STF_FULL_NAME_EN,
          SA_STF_MEMBER.STF_CODE,
          ENTITY_MAIN.ENT_DESCR_EN,
          SA_CODE_SC_DEG.SC_DEG_DESCR_EN,
          SA_STF_MEMBER.SA_STF_MEMBER_ID
          
	from  SA_STF_ATTEND left outer join SA_STF_MEMBER  on SA_STF_ATTEND.SA_STF_MEMBER_ID=SA_STF_MEMBER.SA_STF_MEMBER_ID
  left outer join ENTITY_MAIN on ENTITY_MAIN.ENT_MAIN_ID=SA_STF_MEMBER.AS_NODE_ID
  left outer join SA_CODE_SC_DEG on SA_STF_MEMBER.SA_CODE_SC_DEG_ID=SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
  
	where (SA_STF_MEMBER.AS_FACULTY_INFO_ID=@AsFacultyId) 
	and (@ScfEntMainId is null or SA_STF_MEMBER.AS_NODE_ID=@ScfEntMainId)
	and(@JobDegree is null or SA_STF_MEMBER.SA_CODE_SC_DEG_ID=@JobDegree)
	and (@JobStatus is null or SA_STF_MEMBER.SA_CODE_JOB_STATUS_ID=@JobStatus)
	and(@StaffName is null or SA_STF_MEMBER.STF_FULL_NAME_EN like '%'+@StaffName+'%')
	and(@StaffCode is null or SA_STF_MEMBER.STF_CODE like '%'+@StaffCode+'%')
	and(@NationalNum is null or SA_STF_MEMBER.STF_NATIONAL_ID_NUM like '%'+@NationalNum+'%')
	and(@DateFrom is null or  SA_STF_ATTEND.ATT_DATE>=@DateFrom )
  and(@DateTo is null or SA_STF_ATTEND.ATT_DATE<=@DateTo)
end
	
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SelectStfAttByDateInterval">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				if(@FromDate is not null and @ToDate is not null)
        begin
			 CREATE TABLE #Attendence 
        ( 
            SaStfAttId numeric(9, 0), 
            SaStfMemId numeric(6, 0),
            AttDate datetime,
            AbsenceFlg numeric(1),
            ExcuseFlg numeric(1,0),
            FromTime datetime,
            ToTime datetime
        )
 declare @DateDiff numeric
 declare @DateCounter datetime 
 declare @IdCounter numeric
 
 set @DateCounter=@FromDate;
 set @IdCounter=-1;

 while (@DateCounter<=@ToDate)
 begin
   if exists(select 'd' from SA_STF_ATTEND where ATT_DATE=@DateCounter)
   begin
   INSERT #Attendence
    SELECT
					    SA_STF_ATTEND_ID,
					    SA_STF_MEMBER_ID,
					    ATT_DATE,
					    ABSENCE_FLG,
					    EXECUSE_FLG,
					    FROM_TIME,
					    TO_TIME
    FROM [dbo].[SA_STF_ATTEND]
    WHERE
      SA_STF_MEMBER_ID=@SaStfMemberId and ATT_DATE=@DateCounter
  end
  else
  begin
     INSERT #Attendence
    SELECT
					    @IdCounter,--id
					    0,--stfmember
					    @DateCounter,--date
					    0,--AbsFlg
					    0,--ExcFlg
					    null,--fromtime
					    null--todate

  end
    set @DateCounter=Dateadd(day,1,@DateCounter);
    set @IdCounter=@IdCounter-1;
end   

select      	SaStfAttId,
					    SaStfMemId,
					    AttDate,
					    AbsenceFlg,
					    ExcuseFlg,
					    FromTime,
					    ToTime
from  #Attendence

DROP TABLE #Attendence  
end
else
begin
 SELECT
					    SA_STF_ATTEND_ID,
					    SA_STF_MEMBER_ID,
					    ATT_DATE,
					    ABSENCE_FLG,
					    EXECUSE_FLG,
					    FROM_TIME,
					    TO_TIME
    FROM [dbo].[SA_STF_ATTEND]
    WHERE
      SA_STF_MEMBER_ID=@SaStfMemberId 
end
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SE_USER_GetPages">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SA_STF_ATTEND table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     SE_FORM.FORM_CODE_NAME
FROM         SE_USER INNER JOIN
                      SE_GROUP_USER ON SE_USER.SE_USER_ID = SE_GROUP_USER.SE_USER_ID INNER JOIN
                      SE_GROUP ON SE_GROUP_USER.SE_GROUP_ID = SE_GROUP.SE_GROUP_ID INNER JOIN
                      SE_GROUP_ACCNT ON SE_GROUP.SE_GROUP_ID = SE_GROUP_ACCNT.SE_GROUP_ID INNER JOIN
                      SE_ACCNT ON SE_GROUP_ACCNT.SE_ACCOUNT_ID = SE_ACCNT.SE_ACCNT_ID INNER JOIN
                      SE_ACCNT_FORM ON SE_ACCNT.SE_ACCNT_ID = SE_ACCNT_FORM.SE_ACCOUNT_ID INNER JOIN
                      SE_FORM ON SE_ACCNT_FORM.SE_FORM_ID = SE_FORM.SE_FORM_ID
where SE_USER.SE_USER_ID = @SeUserId
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_SEM_OPEN_ForIncompScoring">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_SEMESTER_OPEN table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			declare @CurrentOpenSemesterId numeric,@FacultyEnMainId numeric;

SELECT  top 1   @FacultyEnMainId =ENT_MAIN_ID
FROM         ENTITY_MAIN
WHERE     (ENT_CODE_ENTITY_TYPE_ID = 2 or ENT_CODE_ENTITY_TYPE_ID=14) AND 
          (AS_FACULTY_INFO_ID =@AsFacultyInfoId)
          
          
SELECT top 1 @CurrentOpenSemesterId=ED_SEMESTER_OPEN_ID
FROM         ED_SEMESTER_OPEN
WHERE     (ENT_MAIN_ID = @FacultyEnMainId) AND (IS_CURRENT = 1)    
   

  If((select IS_CLOSED  FROM  ED_SEMESTER_OPEN
          WHERE (ED_SEMESTER_OPEN_ID = @CurrentOpenSemesterId))=1)
          Begin
      		SELECT
						[ED_SEMESTER_OPEN_ID],
						[ED_ACAD_YEAR_ID],
						[FROM_DATE],
						[TO_DATE],
						[DESCR_AR],
						[DESCR_EN],
						[ED_CODE_SEMESTER_ID],
						[ED_CODE_SEMESTER_TYPE_ID],
						[ENT_MAIN_ID],
						[IS_CURRENT],
						[IS_CLOSED],
					[IS_AGENDA_CLOSED]
					FROM
						[dbo].[ED_SEMESTER_OPEN]
					WHERE
						[ED_SEMESTER_OPEN_ID] = @CurrentOpenSemesterId
          End
          
  Else
       Begin 
         
          declare @EdAcadYearId numeric,@YearOrder numeric;
          
          select @EdAcadYearId=ED_ACAD_YEAR_ID FROM
						[dbo].[ED_SEMESTER_OPEN]
					WHERE
						[ED_SEMESTER_OPEN_ID] = @CurrentOpenSemesterId
						
						select @YearOrder=YEAR_ORDER from ED_ACAD_YEAR where ED_ACAD_YEAR_ID=@EdAcadYearId;

            SELECT top 1
						ED_SEMESTER_OPEN.[ED_SEMESTER_OPEN_ID],
						ED_SEMESTER_OPEN.[ED_ACAD_YEAR_ID],
						ED_SEMESTER_OPEN.[FROM_DATE],
						ED_SEMESTER_OPEN.[TO_DATE],
						ED_SEMESTER_OPEN.[DESCR_AR],
						ED_SEMESTER_OPEN.[DESCR_EN],
						ED_SEMESTER_OPEN.[ED_CODE_SEMESTER_ID],
						ED_SEMESTER_OPEN.[ED_CODE_SEMESTER_TYPE_ID],
						ED_SEMESTER_OPEN.[ENT_MAIN_ID],
						ED_SEMESTER_OPEN.[IS_CURRENT],
						ED_SEMESTER_OPEN.[IS_CLOSED],
					  ED_SEMESTER_OPEN.[IS_AGENDA_CLOSED]
           FROM         ED_SEMESTER_OPEN INNER JOIN
                      ED_ACAD_YEAR ON ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
           WHERE     (ED_ACAD_YEAR.YEAR_ORDER <=@YearOrder) and 
                     (ED_SEMESTER_OPEN.[ED_SEMESTER_OPEN_ID]<>@CurrentOpenSemesterId) and 
                     (ENT_MAIN_ID = @FacultyEnMainId)
           order by ED_ACAD_YEAR.YEAR_ORDER desc,ED_CODE_SEMESTER.SEMESTER_ORDER desc
          
       End
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="CheckDepartmentsResultApproved">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_SEMESTER_OPEN table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
		
            declare @EntMainId numeric,@Node_Path nvarchar(150),@EdCodeSemesterId numeric,
            @EdAcadYearId numeric,@AsFacultyInfoId numeric

            select @EntMainId=ENT_MAIN_ID,
            @EdCodeSemesterId=ED_CODE_SEMESTER_ID,
            @EdAcadYearId=ED_ACAD_YEAR_ID
            
            FROM         ED_SEMESTER_OPEN
            WHERE     (ED_SEMESTER_OPEN_ID = @EdSemesterOpenId)

            select @Node_Path=NODE_PATH,
            @AsFacultyInfoId=As_Faculty_info_id
            from ENTITY_MAIN where ENT_MAIN_ID=@EntMainId;
            declare @VarErrorrMessage nvarchar(max)
            set @VarErrorrMessage='';
             
IF EXISTS (
SELECT     'A'
                FROM ED_OFFERING_COURSE INNER JOIN
                          ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID 
                WHERE     
                 (ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId)AND
               (ED_OFFERING.ED_CODE_SEMESTER_ID=@EdCodeSemesterId) AND
               ED_OFFERING_COURSE.IS_RESULT_APPROVED = 0 and
               dbo.ED_OFFERING_COURSE.ED_COURSE_ID IN (           
SELECT   distinct  ED_STUD_COURSE_REG.ED_COURSE_ID
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
WHERE 
(ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)AND
               (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId) AND
               (ED_STUD_SEMESTER.As_Faculty_info_id=@AsFacultyInfoId))
)
BEGIN
	
	 set @VarErrorrMessage='Not_Approved_result ';
	 SELECT @VarErrorrMessage= @VarErrorrMessage+ t1.COURSE_CODE+ (CASE WHEN t1.STATE_NOTATION is NOT NULL then ' ('+t1.STATE_NOTATION+'), ' ELSE ' ('+(SELECT ENTITY_MAIN.STATE_NOTATION FROM dbo.ENTITY_MAIN WHERE ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 1)+ '),' END)
	 FROM (
	 SELECT distinct ED_COURSE.COURSE_CODE,ENTITY_MAIN.STATE_NOTATION
                FROM ED_OFFERING_COURSE INNER JOIN
                          ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN 
                          dbo.ED_COURSE ON dbo.ED_OFFERING_COURSE.ED_COURSE_ID = dbo.ED_COURSE.ED_COURSE_ID LEFT outer JOIN
                          dbo.ENTITY_MAIN ON dbo.ED_COURSE.ENT_MAIN_ID = dbo.ENTITY_MAIN.ENT_MAIN_ID
                WHERE     
                 (ED_OFFERING.ED_ACAD_YEAR_ID=@EdAcadYearId)AND
               (ED_OFFERING.ED_CODE_SEMESTER_ID=@EdCodeSemesterId) AND
               ED_OFFERING_COURSE.IS_RESULT_APPROVED = 0 and
               dbo.ED_OFFERING_COURSE.ED_COURSE_ID IN (           
SELECT   distinct  ED_STUD_COURSE_REG.ED_COURSE_ID
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
WHERE 
(ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId)AND
               (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId) AND
               (ED_STUD_SEMESTER.As_Faculty_info_id=@AsFacultyInfoId))
	) AS t1
	ORDER BY t1.COURSE_CODE
	
	RAISERROR(@VarErrorrMessage,16,-1)
	RETURN 
	
END   
        
        	]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_STUD_ASK_ADV_GetAllForView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_STUD_ASK_ADV table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				select	t1.QUEST_DATE ,
		t1.QUEST_DTL,
		ISNULL(t2.NoOfReplies,0) as NoOfReplies,
		--t3.FULL_NAME_AR,
		--t3.FULL_NAME_EN,
		--t3.STF_FULL_NAME_AR,
		--t3.STF_FULL_NAME_EN,
		--t3.RE_DATE,
		t1.SV_STUD_ASK_ADV_ID
from

(SELECT     SV_STUD_ASK_ADV_ID, ED_ACAD_YEAR_ID, ED_CODE_SEMESTER_ID, ED_STUD_ID, QUEST_DATE, QUEST_DTL, AS_FACULTY_INFO_ID
FROM         SV_STUD_ASK_ADV
WHERE     (ED_STUD_ID = @EdStudId))as t1

inner join

(SELECT     SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID, COUNT(SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_RE_ID) AS NoOfReplies
FROM         SV_STUD_ASK_ADV left outer JOIN
                      SV_STUD_ASK_ADV_RE ON SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_ID = SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID
group by SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID
)as t2

on t1.SV_STUD_ASK_ADV_ID = t2.SV_STUD_ASK_ADV_ID

ORDER BY t1.QUEST_DATE DESC
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_STUD_ASK_ADV_GetTopOneAnswer">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_STUD_ASK_ADV table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvStudAskAdvId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     TOP (1) SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_ID, SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_RE_ID, 
                      SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, 
                      SV_STUD_ASK_ADV_RE.RE_DATE
FROM         SV_STUD_ASK_ADV_RE INNER JOIN
                      SV_STUD_ASK_ADV ON SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_ID = SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID left outer JOIN
                      SA_STF_MEMBER ON SV_STUD_ASK_ADV_RE.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID left outer JOIN
                      ED_STUD ON SV_STUD_ASK_ADV_RE.ED_STUD_ID = ED_STUD.ED_STUD_ID
where SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_ID=@SvStudAskAdvId
GROUP BY SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_ID, SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_RE_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, 
                      SA_STF_MEMBER.STF_FULL_NAME_EN, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SV_STUD_ASK_ADV_RE.RE_DATE
ORDER BY SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_RE_ID DESC

			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_STUD_ASK_ADV_GetAllQuestionsForStaff">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_STUD_ASK_ADV table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
select t1.SV_STUD_ASK_ADV_ID,
		t1.QUEST_DATE,
		t1.QUEST_DTL,
		t1.FULL_NAME_AR,
		t1.FULL_NAME_EN,
		t2.NoOfReplies,
		t1.ED_STUD_ID
 
 from
 
(SELECT     SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID,
			SV_STUD_ASK_ADV.QUEST_DATE, 
			SV_STUD_ASK_ADV.QUEST_DTL, 
			ED_STUD.FULL_NAME_AR, 
			ED_STUD.FULL_NAME_EN,
			SV_STUD_ASK_ADV.ED_STUD_ID
			
FROM         SV_STUD_ASK_ADV INNER JOIN
                      ED_STUD ON SV_STUD_ASK_ADV.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_ACADMIC_ADV ON ED_STUD.ED_STUD_ID = ED_STUD_ACADMIC_ADV.ED_STUD_ID
WHERE     (ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = @SaStfMemberId)) as t1

inner join

(SELECT     SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID, COUNT(SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_RE_ID) AS NoOfReplies
FROM         SV_STUD_ASK_ADV left outer JOIN
                      SV_STUD_ASK_ADV_RE ON SV_STUD_ASK_ADV_RE.SV_STUD_ASK_ADV_ID = SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID
group by SV_STUD_ASK_ADV.SV_STUD_ASK_ADV_ID)as t2

on t1.SV_STUD_ASK_ADV_ID = t2.SV_STUD_ASK_ADV_ID

ORDER BY t1.QUEST_DATE DESC
			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_OBSERVED_GetByEdBylawId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_OBSERVED table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_POLICY_OBSERVED_ID],
					[GPA_LESS_THAN],
					[NO_SEMESTER],
					[ED_BYLAW_ID],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_POLICY_OBSERVED]
				WHERE
					[ED_BYLAW_ID] = @EdBylawId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="PolicyCourseRepeat_byStudSem_Course">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_ASSESS_HDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
            If exists
                (    
                      SELECT         ENT_POLICY_COURSE_REPEAT.[ENT_POLICY_COURSE_REPEAT_ID],
			                         ENT_POLICY_COURSE_REPEAT.[MAX_REPEAT_NO],
			                         ENT_POLICY_COURSE_REPEAT. [ED_CODE_REPEAT_RULE_ID],
			                         ENT_POLICY_COURSE_REPEAT.[ENT_MAIN_ID],
			                         ENT_POLICY_COURSE_REPEAT. [ED_BYLAW_ID],
			                         ENT_POLICY_COURSE_REPEAT. [REPEAT_FLG],
			                         ENT_POLICY_COURSE_REPEAT. [ED_CODE_GRADING_ID],
			                         ENT_POLICY_COURSE_REPEAT.[ENT_POLICY_GRADING_HDR_ID],
                               ED_CODE_REPEAT_RULE.DESCR_AR,
                               ED_CODE_REPEAT_RULE.DESCR_EN
                               
                      FROM      
                                    ENT_POLICY_COURSE_REPEAT INNER JOIN
                                    ED_STUD_STATE INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                    ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_COURSE_REPEAT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID  inner join
                                    ED_CODE_REPEAT_RULE on ED_CODE_REPEAT_RULE.ED_CODE_REPEAT_RULE_ID=ENT_POLICY_COURSE_REPEAT.ED_CODE_REPEAT_RULE_ID
                       WHERE        (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId) 
                )
                Begin
                   SELECT         ENT_POLICY_COURSE_REPEAT.[ENT_POLICY_COURSE_REPEAT_ID],
		                          ENT_POLICY_COURSE_REPEAT.[MAX_REPEAT_NO],
		                          ENT_POLICY_COURSE_REPEAT.[ED_CODE_REPEAT_RULE_ID],
		                          ENT_POLICY_COURSE_REPEAT.[ENT_MAIN_ID],
		                          ENT_POLICY_COURSE_REPEAT.[ED_BYLAW_ID],
		                          ENT_POLICY_COURSE_REPEAT.[REPEAT_FLG],
		                          ENT_POLICY_COURSE_REPEAT.[ED_CODE_GRADING_ID],
		                          ENT_POLICY_COURSE_REPEAT.[ENT_POLICY_GRADING_HDR_ID],
                               ED_CODE_REPEAT_RULE.DESCR_AR,
                               ED_CODE_REPEAT_RULE.DESCR_EN
                      FROM      
                                    ENT_POLICY_COURSE_REPEAT INNER JOIN
                                    ED_STUD_STATE INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                    ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID ON 
                                    ENT_POLICY_COURSE_REPEAT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID  inner join
                                    ED_CODE_REPEAT_RULE on ED_CODE_REPEAT_RULE.ED_CODE_REPEAT_RULE_ID=ENT_POLICY_COURSE_REPEAT.ED_CODE_REPEAT_RULE_ID
                       WHERE        (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId) 
              End
              
         Else
              Begin
                      declare @AsFacultyInfoId numeric
                      select @AsFacultyInfoId=AS_FACULTY_INFO_ID from ED_STUD_SEMESTER where 
                              ED_STUD_SEMESTER_ID=@EdStudSemesterId;
                              
                       if exists( select 'a'    FROM   
                                     ENT_POLICY_COURSE_REPEAT INNER JOIN
                                     ENTITY_MAIN ON ENT_POLICY_COURSE_REPEAT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID 
                                  WHERE    
                                             (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or ENTITY_MAIN.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId is null)
                       
                              )
                       
                             Begin
                                 SELECT  [ENT_POLICY_COURSE_REPEAT_ID],
                                            ENT_POLICY_COURSE_REPEAT.[MAX_REPEAT_NO],
                                            ENT_POLICY_COURSE_REPEAT.[ED_CODE_REPEAT_RULE_ID],
                                            ENT_POLICY_COURSE_REPEAT.[ENT_MAIN_ID],
                                            ENT_POLICY_COURSE_REPEAT.[ED_BYLAW_ID],
                                            ENT_POLICY_COURSE_REPEAT.[REPEAT_FLG],
                                            ENT_POLICY_COURSE_REPEAT.[ED_CODE_GRADING_ID],
                                            ENT_POLICY_COURSE_REPEAT.[ENT_POLICY_GRADING_HDR_ID],
                                             ED_CODE_REPEAT_RULE.DESCR_AR,
                                              ED_CODE_REPEAT_RULE.DESCR_EN
                                      
                                      FROM    
                                               ENT_POLICY_COURSE_REPEAT INNER JOIN
                                               ENTITY_MAIN ON ENT_POLICY_COURSE_REPEAT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID 
                                               inner join
                                                ED_CODE_REPEAT_RULE on ED_CODE_REPEAT_RULE.ED_CODE_REPEAT_RULE_ID=ENT_POLICY_COURSE_REPEAT.ED_CODE_REPEAT_RULE_ID
                                       WHERE     
                                             (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or ENTITY_MAIN.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId is null)        
                              END
                        Else
                            Begin
                                 SELECT         ENT_POLICY_COURSE_REPEAT.[ENT_POLICY_COURSE_REPEAT_ID],
	                                            ENT_POLICY_COURSE_REPEAT.[MAX_REPEAT_NO],
	                                            ENT_POLICY_COURSE_REPEAT.[ED_CODE_REPEAT_RULE_ID],
	                                            ENT_POLICY_COURSE_REPEAT.[ENT_MAIN_ID],
	                                            ENT_POLICY_COURSE_REPEAT.[ED_BYLAW_ID],
	                                            ENT_POLICY_COURSE_REPEAT.[REPEAT_FLG],
	                                            ENT_POLICY_COURSE_REPEAT.[ED_CODE_GRADING_ID],
	                                            ENT_POLICY_COURSE_REPEAT.[ENT_POLICY_GRADING_HDR_ID],
                                               ED_CODE_REPEAT_RULE.DESCR_AR,
                                              ED_CODE_REPEAT_RULE.DESCR_EN
                      
                                      FROM    
                                               ENT_POLICY_COURSE_REPEAT INNER JOIN
                                               ENTITY_MAIN ON ENT_POLICY_COURSE_REPEAT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID 
                                               inner join
                                                 ED_CODE_REPEAT_RULE on ED_CODE_REPEAT_RULE.ED_CODE_REPEAT_RULE_ID=ENT_POLICY_COURSE_REPEAT.ED_CODE_REPEAT_RULE_ID
                                      WHERE      
                                            (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId or ENTITY_MAIN.AS_FACULTY_INFO_ID is null or @AsFacultyInfoId is null)
                            End
              End
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_COURSE_REPEAT_GetByEdCodeRepeatRuleIdEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_COURSE_REPEAT table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeRepeatRuleId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_POLICY_COURSE_REPEAT_ID],
					[MAX_REPEAT_NO],
					[ED_CODE_REPEAT_RULE_ID],
					[ENT_MAIN_ID],
					[ED_BYLAW_ID],
					[REPEAT_FLG],
					[ED_CODE_GRADING_ID],
					[ENT_POLICY_GRADING_HDR_ID]
				FROM
					[dbo].[ENT_POLICY_COURSE_REPEAT]
				WHERE
					[ED_CODE_REPEAT_RULE_ID] = @EdCodeRepeatRuleId
					AND [ENT_MAIN_ID] = @EntMainId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="DeleteAllSemesterAgenda" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Created By:  ()
-- Purpose: Deletes a record in the ED_SEMESTER_AGENDA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        -- must not there any declared states
               declare @EntMainId numeric,@EdCodeSemesterId numeric,@EdAcadYearId numeric,@AsFacultyInfoId numeric
          select @EntMainId=ENT_MAIN_ID,
                 @EdCodeSemesterId=ED_CODE_SEMESTER_ID,
                 @EdAcadYearId=ED_ACAD_YEAR_ID 
           from  ED_SEMESTER_OPEN 
           where 
           ED_SEMESTER_OPEN_ID=@EdSemesterOpenId
       
       
       select @AsFacultyInfoId=as_faculty_info_id from entity_main where ent_main_id=@EntMainId
               
        if exists(SELECT  'a'
                  where 'a'='b'
                  --   FROM  ED_STUD_STATE INNER JOIN
                   --  ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                    -- WHERE     (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND
                     --         (ED_STUD_STATE.ENT_MAIN_ID = @EntMainId) AND
                      --        (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                  )
                  
                  Begin
                      RAISERROR('Errorr_Agenda_Found_Stud_Declaration',16,-1)
                      RETURN 
                  End
                  
      -- here i must write code for stud register in current version and course change
                  if exists(SELECT   'a'  
                        FROM         ED_STUD_COURSE_REG INNER JOIN
                                     ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                                 
                        WHERE            (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND
                                         (ED_STUD_SEMESTER.As_Faculty_Info_Id = @AsFacultyInfoId) AND
                                         (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                         )
          
                  Begin
                      RAISERROR('Errorr_CorseReg_Found_Stud_Declaration',16,-1)
                      RETURN 
                  End
                  
                  
                 if exists(SELECT   'a'  
                        FROM         ED_STUD_COURSE_CHNG INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = 
                                    ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                                    
                        WHERE      (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND
                                   (ED_STUD_SEMESTER.As_Faculty_Info_Id = @AsFacultyInfoId) AND
                                   (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                         )
          
                  Begin
                      RAISERROR('Errorr_CorseChng_Found_Stud_Declaration',16,-1)
                      RETURN 
                  End
                  
                  
                  
                  
                  
        
				DELETE FROM [dbo].[ED_SEMESTER_AGENDA] WITH (ROWLOCK) 
				WHERE
					[ED_SEMESTER_OPEN_ID] = @EdSemesterOpenId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ImportFromPreviousAgenda" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Created By:  ()
-- Purpose: Deletes a record in the ED_SEMESTER_AGENDA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@PrevEdSemesterOpen" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
       declare @EntMainId numeric,@EdCodeSemesterId numeric,@EdAcadYearId numeric,
        @AsFacultyInfoId numeric,@SemesterOrder numeric,@YearOrder numeric
          select @EntMainId=ENT_MAIN_ID,
                 @EdCodeSemesterId=ED_CODE_SEMESTER_ID,
                 @EdAcadYearId=ED_ACAD_YEAR_ID 
           from  ED_SEMESTER_OPEN 
           where 
           ED_SEMESTER_OPEN_ID=@EdSemesterOpenId
           
           select @SemesterOrder=SEMESTER_ORDER from ED_CODE_SEMESTER where ED_CODE_SEMESTER_ID= @EdCodeSemesterId;
            select @YearOrder=YEAR_ORDER from ED_ACAD_YEAR where ED_ACAD_YEAR_ID= @EdAcadYearId;

       select @AsFacultyInfoId=as_faculty_info_id from entity_main where ent_main_id=@EntMainId
       
     --لو يوجد فصل مفتوح فى نفس العام ويكون سابق لهذا الفصل
        declare @PrevSemesterOpen numeric
        select  @PrevSemesterOpen=ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
          FROM         ED_SEMESTER_OPEN INNER JOIN
                      ED_CODE_SEMESTER ON ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
          WHERE      (ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                     (ED_SEMESTER_OPEN.ENT_MAIN_ID = @EntMainId) AND 
                     (ED_CODE_SEMESTER.SEMESTER_ORDER <@SemesterOrder)
                     
              -- ناتى بالفصل الدراسى المفتوح فى العام السابق       
      If(@PrevSemesterOpen is null)
      Begin
      
             SELECT  top 1  @PrevSemesterOpen=ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID
             FROM     ED_SEMESTER_OPEN INNER JOIN
                      ED_ACAD_YEAR ON ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
                      inner join ED_CODE_SEMESTER ON ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
            WHERE     (ED_SEMESTER_OPEN.ENT_MAIN_ID = @EntMainId) AND
                      (ED_ACAD_YEAR.YEAR_ORDER <@YearOrder)
                 order by ED_ACAD_YEAR.YEAR_ORDER desc ,ED_CODE_SEMESTER.SEMESTER_ORDER desc
      End
      
      If(@PrevSemesterOpen is null)
        set @PrevEdSemesterOpen=0
      
      else
           set @PrevEdSemesterOpen=@PrevSemesterOpen
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetSuccessGrading" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_CODE_QUAL table using a dynamically generated query.
-- Table Comment: جدول أكواد المؤهلات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				
				SELECT     ENT_POLICY_GRADING_HDR.ENT_MAIN_ID, ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID, ENT_POLICY_GRADING_DTL.DESCR_AR, 
                      ENT_POLICY_GRADING_DTL.DESCR_EN, ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID,
                      ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_Dtl_ID
        FROM         ENT_POLICY_GRADING_HDR INNER JOIN
                      ENT_POLICY_GRADING_DTL ON 
                      ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID
        WHERE     (ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = @EntMainId) AND 
                      (ENT_POLICY_GRADING_HDR.IS_GENERAL = 1) AND (ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID = 3) AND 
                      (ENT_POLICY_GRADING_DTL.GS_CODE_PASS_FAIL_ID = 1)
        ORDER BY ENT_POLICY_GRADING_DTL.GRAD_ORDER

				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_POLL_HDR_GetLastOne" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SV_POLL_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
        select isnull(max(SV_POLL_HDR_ID),0) as maxSvPollHdrId 
		from [dbo].[SV_POLL_HDR]
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_POLL_HDR_DeleteAllRelatedData" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SV_POLL_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvPollHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				-- delete student votes
				delete
				FROM         SV_STUD_POLL
				where SV_POLL_DTL_ID in 
				(
				select SV_POLL_DTL_ID 
				from SV_POLL_DTL 
				where SV_POLL_HDR_ID = @SvPollHdrId
				);

				-- delete poll options
				delete
				from SV_POLL_DTL 
				where SV_POLL_HDR_ID = @SvPollHdrId;

				-- delete poll
				delete
				from SV_POLL_HDR 
				where SV_POLL_HDR_ID = @SvPollHdrId;
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_POLL_HDR_GetForView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_POLL_HDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				SELECT      SV_POLL_HDR.SV_POLL_HDR_ID as SvPollHdrId, 
							SV_POLL_HDR.POLL_TEXT as PollText,  
							SV_POLL_HDR.POLL_DATE as PollDate, 
							COUNT(SV_STUD_POLL.SV_STUD_POLL_ID) AS StudCount
				FROM         SV_POLL_HDR INNER JOIN
									  SV_POLL_DTL ON SV_POLL_HDR.SV_POLL_HDR_ID = SV_POLL_DTL.SV_POLL_HDR_ID LEFT OUTER JOIN
									  SV_STUD_POLL ON SV_POLL_DTL.SV_POLL_DTL_ID = SV_STUD_POLL.SV_POLL_DTL_ID
				where (@SeUserId =0 or SV_POLL_HDR.SE_USER_ID = @SeUserId)
				group by SV_POLL_HDR.SV_POLL_HDR_ID, SV_POLL_HDR.POLL_TEXT, SV_POLL_HDR.POLL_DATE
				order by  SV_POLL_HDR.POLL_DATE desc, SV_POLL_HDR.SV_POLL_HDR_ID desc
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_POLL_HDR_GetForStudView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_POLL_HDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters/>
      <body>
        <![CDATA[
				
	--			SELECT      SV_POLL_HDR.SV_POLL_HDR_ID, SV_POLL_HDR.POLL_TEXT, SV_POLL_HDR.POLL_DATE, SA_STF_MEMBER.STF_FULL_NAME_AR, 
	--						SA_STF_MEMBER.STF_FULL_NAME_EN, SA_CODE_SC_DEG.SC_DEG_DESCR_AR, SA_CODE_SC_DEG.SC_DEG_DESCR_EN
	--			FROM         SV_POLL_HDR INNER JOIN
	--								  SE_USER ON SV_POLL_HDR.SE_USER_ID = SE_USER.SE_USER_ID INNER JOIN
	--								  SA_STF_MEMBER ON SE_USER.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
	--								  SA_CODE_SC_DEG ON SA_STF_MEMBER.SA_CODE_SC_DEG_ID = SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
	--			order by  SV_POLL_HDR.POLL_DATE desc, SV_POLL_HDR.SV_POLL_HDR_ID desc 
  
SELECT      SV_POLL_HDR.SV_POLL_HDR_ID, SV_POLL_HDR.POLL_TEXT, SV_POLL_HDR.POLL_DATE,
			case when SE_USER.SA_STF_MEMBER_ID is null then SE_USER.USER_NAME_AR else SA_STF_MEMBER.STF_FULL_NAME_AR end,
			case when SE_USER.SA_STF_MEMBER_ID is null then SE_USER.[USER_NAME] else SA_STF_MEMBER.STF_FULL_NAME_EN end,
			case when SE_USER.SA_STF_MEMBER_ID is null then null else SA_CODE_SC_DEG.SC_DEG_DESCR_AR end,
			case when SE_USER.SA_STF_MEMBER_ID is null then null else SA_CODE_SC_DEG.SC_DEG_DESCR_EN end

FROM        SV_POLL_HDR INNER JOIN
			SE_USER ON SV_POLL_HDR.SE_USER_ID = SE_USER.SE_USER_ID 
			left outer JOIN
			SA_STF_MEMBER ON SE_USER.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID left outer JOIN
			SA_CODE_SC_DEG ON SA_STF_MEMBER.SA_CODE_SC_DEG_ID = SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
order by  SV_POLL_HDR.POLL_DATE desc, SV_POLL_HDR.SV_POLL_HDR_ID desc
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_POLL_DTL_GetForView">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_POLL_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvPollHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				SELECT      SV_POLL_DTL.SV_POLL_DTL_ID AS SvPollDtlId, 
							SV_POLL_DTL.OPTION_TEXT AS OptionText, 
							SV_POLL_DTL.DISP_ORDER AS DispOrder, 
							COUNT(SV_STUD_POLL.SV_STUD_POLL_ID) AS RepliesCount
				FROM         SV_POLL_DTL LEFT OUTER JOIN
									  SV_STUD_POLL ON SV_POLL_DTL.SV_POLL_DTL_ID = SV_STUD_POLL.SV_POLL_DTL_ID
				where SV_POLL_DTL.SV_POLL_HDR_ID = @SvPollHdrId
				group by SV_POLL_DTL.SV_POLL_DTL_ID, SV_POLL_DTL.OPTION_TEXT, SV_POLL_DTL.DISP_ORDER
				order by SV_POLL_DTL.DISP_ORDER
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_POLL_DTL_GetStudOptionForPoll">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_POLL_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SvPollHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     SV_STUD_POLL.SV_POLL_DTL_ID
FROM         SV_POLL_DTL INNER JOIN
                      SV_STUD_POLL ON SV_POLL_DTL.SV_POLL_DTL_ID = SV_STUD_POLL.SV_POLL_DTL_ID
                      
where SV_STUD_POLL.ED_STUD_ID = @EdStudId
and SV_POLL_DTL.SV_POLL_HDR_ID = @SvPollHdrId
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_STUD_POLL_GetBySvPollHdrIdAndSeUserId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SV_STUD_POLL table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvPollHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     SV_STUD_POLL.SV_STUD_POLL_ID
FROM         SV_STUD_POLL INNER JOIN
                      SV_POLL_DTL ON SV_STUD_POLL.SV_POLL_DTL_ID = SV_POLL_DTL.SV_POLL_DTL_ID INNER JOIN
                      ED_STUD ON SV_STUD_POLL.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID
where SV_POLL_DTL.SV_POLL_HDR_ID = @SvPollHdrId
and SE_USER.SE_USER_ID = @SeUserId

				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_MESSAGE_GetLast" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SV_MESSAGE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
                select max(SV_MESSAGE_ID) from SV_MESSAGE
    						
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_GetUserMessages">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT     SV_USER_MESSAGE.SV_USER_MESSAGE_ID, SV_MESSAGE.SV_MESSAGE_ID, SE_USER.USER_NAME AS USER_NAME_EN, SE_USER.USER_NAME_AR, SV_MESSAGE.MSG_CONTENT, SV_MESSAGE.MSG_DATE, 
                      SV_USER_MESSAGE.OPENED_FLG
FROM         SV_MESSAGE INNER JOIN
                      SV_USER_MESSAGE ON SV_MESSAGE.SV_MESSAGE_ID = SV_USER_MESSAGE.SV_MESSAGE_ID INNER JOIN
                      SE_USER ON SV_MESSAGE.SE_USER_ID = SE_USER.SE_USER_ID

where SV_USER_MESSAGE.SE_USER_ID = @SeUserId
order by SV_MESSAGE.MSG_DATE desc, SV_MESSAGE.SV_MESSAGE_ID desc
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_GetUserNewMessagesCount">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT     COUNT(SV_USER_MESSAGE.SV_USER_MESSAGE_ID) as NewMsgs
FROM         SV_MESSAGE INNER JOIN
                      SV_USER_MESSAGE ON SV_MESSAGE.SV_MESSAGE_ID = SV_USER_MESSAGE.SV_MESSAGE_ID INNER JOIN
                      SE_USER ON SV_MESSAGE.SE_USER_ID = SE_USER.SE_USER_ID

where SV_USER_MESSAGE.SE_USER_ID = @SeUserId
and SV_USER_MESSAGE.OPENED_FLG = 0
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStudentsByName">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@Name" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
--SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
--FROM         ED_STUD INNER JOIN
--                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
--                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
--                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID
--where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
--and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--and ED_STUD_STATE.ENT_MAIN_ID = @EntMainId
--and
--(
--	((@Name is not null) and (ED_STUD.FULL_NAME_EN like '%'+@Name+'%') and (@lang = 2)) -- for english
--	or ((@Name is not null) and (ED_STUD.FULL_NAME_AR like '%'+@Name+'%') and (@lang = 1)) -- for arabic
--)



declare @Path nvarchar(128);

SELECT    @Path = NODE_PATH
FROM         ENTITY_MAIN
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID, ENTITY_MAIN.NODE_PATH
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where  
ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ENTITY_MAIN.NODE_PATH like @Path + '%')
and
(
	((@Name is not null) and (ED_STUD.FULL_NAME_EN like '%'+@Name+'%') and (@lang = 2)) -- for english
	or ((@Name is not null) and (ED_STUD.FULL_NAME_AR like '%'+@Name+'%') and (@lang = 1)) -- for arabic
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_AllStudentsByName">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@Name" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID
where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and
(
	((@Name is not null) and (ED_STUD.FULL_NAME_EN like '%'+@Name+'%') and (@lang = 2)) -- for english
	or ((@Name is not null) and (ED_STUD.FULL_NAME_AR like '%'+@Name+'%') and (@lang = 1)) -- for arabic
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStudentsByNameinEntityMain">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@Name" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
declare @Path nvarchar(128);

SELECT    @Path = NODE_PATH
FROM         ENTITY_MAIN
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID, ENTITY_MAIN.NODE_PATH
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where  
ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ENTITY_MAIN.NODE_PATH like @Path + '%')
and
(
	((@Name is not null) and (ED_STUD.FULL_NAME_EN like '%'+@Name+'%') and (@lang = 2)) -- for english
	or ((@Name is not null) and (ED_STUD.FULL_NAME_AR like '%'+@Name+'%') and (@lang = 1)) -- for arabic
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStaffsByName">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@Name" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT    SA_STF_MEMBER.SA_STF_MEMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, 
                      SA_STF_MEMBER.STF_FULL_NAME_EN,SE_USER.SE_USER_ID
FROM         SE_USER INNER JOIN
                      SA_STF_MEMBER ON SE_USER.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
where  
SA_STF_MEMBER.AS_NODE_ID = @EntMainId
and
(
	((@Name is not null) and (SA_STF_MEMBER.STF_FULL_NAME_EN like '%'+@Name+'%') and (@lang = 2)) -- for english
	or ((@Name is not null) and (SA_STF_MEMBER.STF_FULL_NAME_AR like '%'+@Name+'%') and (@lang = 1)) -- for arabic
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStudentsByGPA">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GPA" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 2)" nulldefault="" />
        <parameter name="@GPA_Flag" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
--SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
--FROM         ED_STUD INNER JOIN
--                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
--                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
--                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID
--where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
--and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--and ED_STUD_STATE.ENT_MAIN_ID = @EntMainId
--and
--(
--	((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '=') and (ED_STUD_SEMESTER.ACCUM_GPA = @GPA)) -- = GPA
--	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '!=') and (ED_STUD_SEMESTER.ACCUM_GPA <> @GPA)) -- != GPA
--	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '>') and (ED_STUD_SEMESTER.ACCUM_GPA > @GPA)) -- > GPA
--	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '<') and (ED_STUD_SEMESTER.ACCUM_GPA < @GPA)) -- < GPA
--	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '<=') and (ED_STUD_SEMESTER.ACCUM_GPA <= @GPA)) -- <= GPA
--	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '>=') and (ED_STUD_SEMESTER.ACCUM_GPA >= @GPA)) -- >= GPA
--)


declare @Path nvarchar(128);

SELECT    @Path = NODE_PATH
FROM         ENTITY_MAIN
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID, ENTITY_MAIN.NODE_PATH
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where  
ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ENTITY_MAIN.NODE_PATH like @Path + '%')
and
(
	((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) = @GPA)) -- = GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '!=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) <> @GPA)) -- != GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '>') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) > @GPA)) -- > GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '<') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) < @GPA)) -- < GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '<=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) <= @GPA)) -- <= GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '>=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) >= @GPA)) -- >= GPA
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_AllStudentsByGPA">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GPA" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 2)" nulldefault="" />
        <parameter name="@GPA_Flag" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID
where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and
(
	((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) = @GPA)) -- = GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '!=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) <> @GPA)) -- != GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '>') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) > @GPA)) -- > GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '<') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) < @GPA)) -- < GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '<=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) <= @GPA)) -- <= GPA
	or ((@GPA is not null) and (@GPA_Flag is not null) and (@GPA_Flag = '>=') and (ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) >= @GPA)) -- >= GPA
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStudentsByLevel">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Level" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
--SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
--FROM         ED_STUD INNER JOIN
--                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
 --                     ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
  --                    SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID 
--where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
--and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--and ED_STUD_STATE.ENT_MAIN_ID = @EntMainId
--and
--(
--	((@Level is not null) and (ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @Level)) -- for Level
--)

		  
	  
	  declare @Path nvarchar(128);

SELECT    @Path = NODE_PATH
FROM         ENTITY_MAIN
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID, ENTITY_MAIN.NODE_PATH
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where  
ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ENTITY_MAIN.NODE_PATH like @Path + '%')
and
(
	((@Level is not null) and (ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @Level)) -- for Level
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_AllStudentsByLevel">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Level" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID 
where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (@AsFacultyInfoId is null or @AsFacultyInfoId = 0 or ED_STUD_SEMESTER.as_faculty_info_id = @AsFacultyInfoId)
and
(
	((@Level is not null) and (ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @Level)) -- for Level
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStudentsByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
--SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
--FROM         ED_STUD INNER JOIN
--                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
--                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
--                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID
--where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
--and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--and
--( 
--((@EntMainId is not null) and (ED_STUD_STATE.ENT_MAIN_ID = @EntMainId)) -- for Entity Main
--)

declare @Path nvarchar(128);

SELECT    @Path = NODE_PATH
FROM         ENTITY_MAIN
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID, ENTITY_MAIN.NODE_PATH
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where  
ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and 
((@EntMainId is not null) and (ENTITY_MAIN.NODE_PATH like @Path + '%')) -- for Entity Main
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStaffsByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT    SA_STF_MEMBER.SA_STF_MEMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, 
                      SA_STF_MEMBER.STF_FULL_NAME_EN,SE_USER.SE_USER_ID
FROM         SE_USER INNER JOIN
                      SA_STF_MEMBER ON SE_USER.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
where  

((@EntMainId is not null) and (SA_STF_MEMBER.AS_NODE_ID = @EntMainId)) -- for Entity Main
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStaffsByDegree">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@SaCodeScDegId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT    SA_STF_MEMBER.SA_STF_MEMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, 
                      SA_STF_MEMBER.STF_FULL_NAME_EN,SE_USER.SE_USER_ID
FROM         SE_USER INNER JOIN
                      SA_STF_MEMBER ON SE_USER.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
where  
SA_STF_MEMBER.AS_NODE_ID = @EntMainId
and
(
	((@SaCodeScDegId is not null) and (SA_STF_MEMBER.SA_CODE_SC_DEG_ID = @SaCodeScDegId)) -- for Deg
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStaffsByJobStatus">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@SaCodeJobStatusId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT    SA_STF_MEMBER.SA_STF_MEMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, 
                      SA_STF_MEMBER.STF_FULL_NAME_EN,SE_USER.SE_USER_ID
FROM         SE_USER INNER JOIN
                      SA_STF_MEMBER ON SE_USER.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
where  
SA_STF_MEMBER.AS_NODE_ID = @EntMainId
and
(
	((@SaCodeJobStatusId is not null) and (SA_STF_MEMBER.SA_CODE_JOB_STATUS_ID = @SaCodeJobStatusId)) -- for Deg
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_AllStudentsByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID LEFT OUTER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and
(
	((@EdCourseId is not null) and (ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId)) -- for Course Reg
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStudentsByEdCourseId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
declare @Path nvarchar(128);

SELECT    @Path = NODE_PATH
FROM         ENTITY_MAIN
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID, ENTITY_MAIN.NODE_PATH
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
where  
ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ENTITY_MAIN.NODE_PATH like @Path + '%')
and
(
	((@EdCourseId is not null) and (ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId)) -- for Course Reg
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_SearchStudentsByAdv">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
--SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
--FROM         ED_STUD INNER JOIN
--                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
  --                    ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
    --                  SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
      --                ED_STUD_ACADMIC_ADV ON ED_STUD.ED_STUD_ID = ED_STUD_ACADMIC_ADV.ED_STUD_ID
--where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
--and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--and ED_STUD_STATE.ENT_MAIN_ID = @EntMainId
--and
--( 
--((@SaStfMemberId is not null) and (ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = @SaStfMemberId)) -- for Staff
--)

		  
	  
	  declare @Path nvarchar(128);

SELECT    @Path = NODE_PATH
FROM         ENTITY_MAIN
where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;

SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID, ENTITY_MAIN.NODE_PATH
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ED_STUD_ACADMIC_ADV ON ED_STUD.ED_STUD_ID = ED_STUD_ACADMIC_ADV.ED_STUD_ID
where  
ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (ENTITY_MAIN.NODE_PATH like @Path + '%')
and
( 
((@SaStfMemberId is not null) and (ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = @SaStfMemberId)) -- for Staff
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_AllStudentsByAdv">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID INNER JOIN
                      ED_STUD_ACADMIC_ADV ON ED_STUD.ED_STUD_ID = ED_STUD_ACADMIC_ADV.ED_STUD_ID
where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and
( 
((@SaStfMemberId is not null) and (ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = @SaStfMemberId)) -- for Staff
)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_USER_MESSAGE_AllStudents">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID 
where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SV_USER_MESSAGE_AllStudentsByFacultyInfoID">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_USER_MESSAGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT DISTINCT ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, SE_USER.SE_USER_ID
FROM         ED_STUD INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID INNER JOIN
                      SE_USER ON ED_STUD.ED_STUD_ID = SE_USER.ED_STUD_ID 
where  ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_SEMESTER.as_faculty_info_id = @AsFacultyInfoId

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ADM_CDE_CERT_TYPE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ADM_CDE_CERT_TYPE_ID],
					[DESCR_AR],
					[DESCR_EN]
				FROM
					[dbo].[ADM_CDE_CERT_TYPE]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_CDE_CERT_TYPE table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_CDE_CERT_TYPE_ID] numeric(3, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ADM_CDE_CERT_TYPE_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ADM_CDE_CERT_TYPE_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_CDE_CERT_TYPE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ADM_CDE_CERT_TYPE_ID], O.[DESCR_AR], O.[DESCR_EN]
				FROM
				    [dbo].[ADM_CDE_CERT_TYPE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ADM_CDE_CERT_TYPE_ID] = PageIndex.[ADM_CDE_CERT_TYPE_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_CDE_CERT_TYPE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_CDE_CERT_TYPE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeCertTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				declare @maxAdmCdeCertTypeId numeric(9,0);
                select @maxAdmCdeCertTypeId=max(ADM_CDE_CERT_TYPE_ID)from ADM_CDE_CERT_TYPE
                    if(@maxAdmCdeCertTypeId is null)
                      set  @maxAdmCdeCertTypeId=0;
                    set  @maxAdmCdeCertTypeId= @maxAdmCdeCertTypeId+1;
				
				INSERT INTO [dbo].[ADM_CDE_CERT_TYPE]
					(
					[ADM_CDE_CERT_TYPE_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					)
				VALUES
					(
					@maxAdmCdeCertTypeId
					,@DescrAr
					,@DescrEn
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_CDE_CERT_TYPE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeCertTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@OriginalAdmCdeCertTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_CDE_CERT_TYPE]
				SET
					[ADM_CDE_CERT_TYPE_ID] = @AdmCdeCertTypeId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
				WHERE
[ADM_CDE_CERT_TYPE_ID] = @AdmCdeCertTypeId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_CDE_CERT_TYPE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeCertTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ADM_CDE_CERT_TYPE] WITH (ROWLOCK) 
				WHERE
					[ADM_CDE_CERT_TYPE_ID] = @AdmCdeCertTypeId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_GetByAdmCdeCertTypeId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_CDE_CERT_TYPE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeCertTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ADM_CDE_CERT_TYPE_ID],
					[DESCR_AR],
					[DESCR_EN]
				FROM
					[dbo].[ADM_CDE_CERT_TYPE]
				WHERE
					[ADM_CDE_CERT_TYPE_ID] = @AdmCdeCertTypeId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_NotInAdmPrecQual">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_CDE_CERT_TYPE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ADM_CDE_CERT_TYPE_ID],
					[DESCR_AR],
					[DESCR_EN]
				FROM
					[dbo].[ADM_CDE_CERT_TYPE]
					WHERE
					not exists(select 'a' from ADM_PRECOND_QUAL where ENT_MAIN_ID=@EntMainId and
          ADM_PRECOND_QUAL.ADM_CDE_CERT_TYPE_ID=[dbo].[ADM_CDE_CERT_TYPE].ADM_CDE_CERT_TYPE_ID)
				SELECT @@ROWCOUNT [ADM_CDE_CERT_TYPE_ID]
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ADM_CDE_CERT_TYPE table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@AdmCdeCertTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ADM_CDE_CERT_TYPE_ID]
	, [DESCR_AR]
	, [DESCR_EN]
    FROM
	[dbo].[ADM_CDE_CERT_TYPE]
    WHERE 
	 ([ADM_CDE_CERT_TYPE_ID] = @AdmCdeCertTypeId OR @AdmCdeCertTypeId IS NULL)
	AND ([DESCR_AR] = @DescrAr OR @DescrAr IS NULL)
	AND ([DESCR_EN] = @DescrEn OR @DescrEn IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ADM_CDE_CERT_TYPE_ID]
	, [DESCR_AR]
	, [DESCR_EN]
    FROM
	[dbo].[ADM_CDE_CERT_TYPE]
    WHERE 
	 ([ADM_CDE_CERT_TYPE_ID] = @AdmCdeCertTypeId AND @AdmCdeCertTypeId is not null)
	OR ([DESCR_AR] = @DescrAr AND @DescrAr is not null)
	OR ([DESCR_EN] = @DescrEn AND @DescrEn is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_CDE_CERT_TYPE_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_CDE_CERT_TYPE table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_CDE_CERT_TYPE_ID] numeric(3, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ADM_CDE_CERT_TYPE_ID] )
				SELECT TOP {3} [ADM_CDE_CERT_TYPE_ID]
				FROM [dbo].[ADM_CDE_CERT_TYPE] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ADM_CDE_CERT_TYPE_ID], O.[DESCR_AR], O.[DESCR_EN]
				FROM
				    [dbo].[ADM_CDE_CERT_TYPE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ADM_CDE_CERT_TYPE_ID] = PageIndex.[ADM_CDE_CERT_TYPE_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ADM_CDE_CERT_TYPE] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ADM_FEES table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ADM_FEES_ID],
					[ENT_MAIN_ID],
					[ED_ACD_YEAR_START_ID],
					[ED_ACD_YEAR_STOP_ID],
					[XXED_CODE_SEMESTER],
					[XXADM_CDE_FEE_ITEM_ID],
					[DESCR_AR],
					[DESCR_EN],
					[FEE_VALUE],
					[GS_CDE_CURRENCY_ID]
				FROM
					[dbo].[ADM_FEES]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_FEES table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_FEES_ID] numeric(8, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ADM_FEES_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ADM_FEES_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_FEES]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ADM_FEES_ID], O.[ENT_MAIN_ID], O.[ED_ACD_YEAR_START_ID], O.[ED_ACD_YEAR_STOP_ID], O.[XXED_CODE_SEMESTER], O.[XXADM_CDE_FEE_ITEM_ID], O.[DESCR_AR], O.[DESCR_EN], O.[FEE_VALUE], O.[GS_CDE_CURRENCY_ID]
				FROM
				    [dbo].[ADM_FEES] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ADM_FEES_ID] = PageIndex.[ADM_FEES_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_FEES]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_FEES table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmFeesId" type="numeric" direction="Input" size="5" precision="8" scale="0" param="(8, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcdYearStartId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdAcdYearStopId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@XxedCodeSemester" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@XxadmCdeFeeItemId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@DescrAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@DescrEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@FeeValue" type="numeric" direction="Input" size="5" precision="7" scale="2" param="(7, 2)" nulldefault="" />
        <parameter name="@GsCdeCurrencyId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				declare @maxAdmFeesId numeric(9,0);
                select @maxAdmFeesId=max(ADM_FEES_ID)from ADM_FEES
                    if(@maxAdmFeesId is null)
                      set  @maxAdmFeesId=0;
                    set  @maxAdmFeesId= @maxAdmFeesId+1;
				
				INSERT INTO [dbo].[ADM_FEES]
					(
					[ADM_FEES_ID]
					,[ENT_MAIN_ID]
					,[ED_ACD_YEAR_START_ID]
					,[ED_ACD_YEAR_STOP_ID]
					,[XXED_CODE_SEMESTER]
					,[XXADM_CDE_FEE_ITEM_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[FEE_VALUE]
					,[GS_CDE_CURRENCY_ID]
					)
				VALUES
					(
					@maxAdmFeesId
					,@EntMainId
					,@EdAcdYearStartId
					,@EdAcdYearStopId
					,@XxedCodeSemester
					,@XxadmCdeFeeItemId
					,@DescrAr
					,@DescrEn
					,@FeeValue
					,@GsCdeCurrencyId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_FEES table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmFeesId" type="numeric" direction="Input" size="5" precision="8" scale="0" param="(8, 0)" nulldefault="" />
        <parameter name="@OriginalAdmFeesId" type="numeric" direction="Input" size="5" precision="8" scale="0" param="(8, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcdYearStartId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@EdAcdYearStopId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@XxedCodeSemester" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@XxadmCdeFeeItemId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@DescrAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@DescrEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@FeeValue" type="numeric" direction="Input" size="5" precision="7" scale="2" param="(7, 2)" nulldefault="" />
        <parameter name="@GsCdeCurrencyId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_FEES]
				SET
					[ADM_FEES_ID] = @AdmFeesId
					,[ENT_MAIN_ID] = @EntMainId
					,[ED_ACD_YEAR_START_ID] = @EdAcdYearStartId
					,[ED_ACD_YEAR_STOP_ID] = @EdAcdYearStopId
					,[XXED_CODE_SEMESTER] = @XxedCodeSemester
					,[XXADM_CDE_FEE_ITEM_ID] = @XxadmCdeFeeItemId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[FEE_VALUE] = @FeeValue
					,[GS_CDE_CURRENCY_ID] = @GsCdeCurrencyId
				WHERE
[ADM_FEES_ID] = @AdmFeesId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_FEES table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmFeesId" type="numeric" direction="Input" size="5" precision="8" scale="0" param="(8, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ADM_FEES] WITH (ROWLOCK) 
				WHERE
					[ADM_FEES_ID] = @AdmFeesId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_GetByGsCdeCurrencyId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_FEES table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCdeCurrencyId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ADM_FEES_ID],
					[ENT_MAIN_ID],
					[ED_ACD_YEAR_START_ID],
					[ED_ACD_YEAR_STOP_ID],
					[XXED_CODE_SEMESTER],
					[XXADM_CDE_FEE_ITEM_ID],
					[DESCR_AR],
					[DESCR_EN],
					[FEE_VALUE],
					[GS_CDE_CURRENCY_ID]
				FROM
					[dbo].[ADM_FEES]
				WHERE
					[GS_CDE_CURRENCY_ID] = @GsCdeCurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_GetByAdmFeesId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_FEES table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmFeesId" type="numeric" direction="Input" size="5" precision="8" scale="0" param="(8, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ADM_FEES_ID],
					[ENT_MAIN_ID],
					[ED_ACD_YEAR_START_ID],
					[ED_ACD_YEAR_STOP_ID],
					[XXED_CODE_SEMESTER],
					[XXADM_CDE_FEE_ITEM_ID],
					[DESCR_AR],
					[DESCR_EN],
					[FEE_VALUE],
					[GS_CDE_CURRENCY_ID]
				FROM
					[dbo].[ADM_FEES]
				WHERE
					[ADM_FEES_ID] = @AdmFeesId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ADM_FEES table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@AdmFeesId" type="numeric" direction="Input" size="5" precision="8" scale="0" param="(8, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdAcdYearStartId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@EdAcdYearStopId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@XxedCodeSemester" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@XxadmCdeFeeItemId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@DescrAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@DescrEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@FeeValue" type="numeric" direction="Input" size="5" precision="7" scale="2" param="(7, 2)" nulldefault="null" />
        <parameter name="@GsCdeCurrencyId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ADM_FEES_ID]
	, [ENT_MAIN_ID]
	, [ED_ACD_YEAR_START_ID]
	, [ED_ACD_YEAR_STOP_ID]
	, [XXED_CODE_SEMESTER]
	, [XXADM_CDE_FEE_ITEM_ID]
	, [DESCR_AR]
	, [DESCR_EN]
	, [FEE_VALUE]
	, [GS_CDE_CURRENCY_ID]
    FROM
	[dbo].[ADM_FEES]
    WHERE 
	 ([ADM_FEES_ID] = @AdmFeesId OR @AdmFeesId IS NULL)
	AND ([ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
	AND ([ED_ACD_YEAR_START_ID] = @EdAcdYearStartId OR @EdAcdYearStartId IS NULL)
	AND ([ED_ACD_YEAR_STOP_ID] = @EdAcdYearStopId OR @EdAcdYearStopId IS NULL)
	AND ([XXED_CODE_SEMESTER] = @XxedCodeSemester OR @XxedCodeSemester IS NULL)
	AND ([XXADM_CDE_FEE_ITEM_ID] = @XxadmCdeFeeItemId OR @XxadmCdeFeeItemId IS NULL)
	AND ([DESCR_AR] = @DescrAr OR @DescrAr IS NULL)
	AND ([DESCR_EN] = @DescrEn OR @DescrEn IS NULL)
	AND ([FEE_VALUE] = @FeeValue OR @FeeValue IS NULL)
	AND ([GS_CDE_CURRENCY_ID] = @GsCdeCurrencyId OR @GsCdeCurrencyId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ADM_FEES_ID]
	, [ENT_MAIN_ID]
	, [ED_ACD_YEAR_START_ID]
	, [ED_ACD_YEAR_STOP_ID]
	, [XXED_CODE_SEMESTER]
	, [XXADM_CDE_FEE_ITEM_ID]
	, [DESCR_AR]
	, [DESCR_EN]
	, [FEE_VALUE]
	, [GS_CDE_CURRENCY_ID]
    FROM
	[dbo].[ADM_FEES]
    WHERE 
	 ([ADM_FEES_ID] = @AdmFeesId AND @AdmFeesId is not null)
	OR ([ENT_MAIN_ID] = @EntMainId AND @EntMainId is not null)
	OR ([ED_ACD_YEAR_START_ID] = @EdAcdYearStartId AND @EdAcdYearStartId is not null)
	OR ([ED_ACD_YEAR_STOP_ID] = @EdAcdYearStopId AND @EdAcdYearStopId is not null)
	OR ([XXED_CODE_SEMESTER] = @XxedCodeSemester AND @XxedCodeSemester is not null)
	OR ([XXADM_CDE_FEE_ITEM_ID] = @XxadmCdeFeeItemId AND @XxadmCdeFeeItemId is not null)
	OR ([DESCR_AR] = @DescrAr AND @DescrAr is not null)
	OR ([DESCR_EN] = @DescrEn AND @DescrEn is not null)
	OR ([FEE_VALUE] = @FeeValue AND @FeeValue is not null)
	OR ([GS_CDE_CURRENCY_ID] = @GsCdeCurrencyId AND @GsCdeCurrencyId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_FEES_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_FEES table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_FEES_ID] numeric(8, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ADM_FEES_ID] )
				SELECT TOP {3} [ADM_FEES_ID]
				FROM [dbo].[ADM_FEES] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ADM_FEES_ID], O.[ENT_MAIN_ID], O.[ED_ACD_YEAR_START_ID], O.[ED_ACD_YEAR_STOP_ID], O.[XXED_CODE_SEMESTER], O.[XXADM_CDE_FEE_ITEM_ID], O.[DESCR_AR], O.[DESCR_EN], O.[FEE_VALUE], O.[GS_CDE_CURRENCY_ID]
				FROM
				    [dbo].[ADM_FEES] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ADM_FEES_ID] = PageIndex.[ADM_FEES_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ADM_FEES] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_TransferStudentData" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

declare @AdmApplicantId numeric
select @AdmApplicantId=ADM_APPLICANT_ID from ADM_APPLICANT where ED_STUD_ID = @EdStudId

--------------------------Contacts------------------------
--insert into ED_STUD_CONTACT_METHOD (ED_STUD_ID,GS_CODE_CONTACT_METHOD_ID,METHOD_DESCR,METHOD_NOTES)
--SELECT     ADM_APPLICANT.ED_STUD_ID, ADM_APP_CONTACT.GS_CODE_CONTACT_METHOD_ID, ADM_APP_CONTACT.METHOD_DESCR, 
--                      ADM_APP_CONTACT.METHOD_NOTES
--FROM         ADM_APPLICANT INNER JOIN
--                      ADM_APP_CONTACT ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_CONTACT.ADM_APPLICANT_ID
--where ADM_APPLICANT.ED_STUD_ID = @EdStudId;

update ED_STUD_CONTACT_METHOD
set ED_STUD_ID = @EdStudId
where ADM_APPLICANT_ID = @AdmApplicantId

------------------------Course Comp-----------------------
insert into ED_STUD_COURSE_COMP (IS_COMPLETED,ED_STUD_ID,AS_FACULTY_INFO_ID,ADM_CDE_COURSE_COMP_ID)
SELECT     0 as IS_COMPLETED, ADM_APPLICANT.ED_STUD_ID, ENTITY_MAIN.AS_FACULTY_INFO_ID, ADM_APP_COURSE_COMP.ADM_CDE_COURSE_COMP_ID
FROM         ADM_APP_COURSE_COMP INNER JOIN
                      ADM_APPLICANT ON ADM_APP_COURSE_COMP.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ACCEPT_ID = ENTITY_MAIN.ENT_MAIN_ID
where ADM_APPLICANT.ED_STUD_ID = @EdStudId;

------------------------Qual-----------------------
--declare @SecondarySchlName nvarchar(100),@AdmCdeCertTypeId int, @CertfDate date,@GsCountryNodeId int,@StudyLanguage nvarchar(20),@CertfDegree nvarchar(20),@CertfPercent nvarchar(20);
--SELECT     @SecondarySchlName = SECONDARY_SCHL_NAME, 
--			@AdmCdeCertTypeId = ADM_CDE_CERT_TYPE_ID , 
--			@CertfDate = CERTF_DATE, 
--			@GsCountryNodeId = GS_COUNTRY_NODE_ID, 
--			@StudyLanguage = STUDY_LANGUAGE, 
--			@CertfDegree = CERTF_DEGREE, 
--			@CertfPercent = CERTF_PERCENT
--FROM         ADM_APPLICANT
--where ED_STUD_ID = @EdStudId;

--if((@SecondarySchlName is not null) 
--and (@AdmCdeCertTypeId is not null) 
--and (@CertfDate is not null) 
--and (@GsCountryNodeId is not null) 
--and (@StudyLanguage is not null) 
--and (@CertfDegree is not null) 
--and (@CertfPercent is not null))
--begin

--	declare @maxEdStudQualId int;
--	select @maxEdStudQualId = MAX (ED_STUD_QUAL_ID) from ED_STUD_QUAL;
--	if(@maxEdStudQualId = 0)
--	set @maxEdStudQualId = 1;
--	else
--	set @maxEdStudQualId = @maxEdStudQualId+1;
	
--	insert into ED_STUD_QUAL (ED_STUD_QUAL_ID,ED_STUD_ID,ED_CODE_QUAL_ID,SCHOOL_NAME,QUAL_DATE,TOTAL_DEGREE,TOTAL_PERCENT,GS_COUNTRY_NODE_ID)
--	values (@maxEdStudQualId,@EdStudId,@AdmCdeCertTypeId,@SecondarySchlName,@CertfDate,@CertfDegree,@CertfPercent,@GsCountryNodeId);
--end


update ED_STUD_QUAL 
set ED_STUD_ID = @EdStudId
where ADM_APPLICANT_ID = @AdmApplicantId

-------------------------Guardian-------------------------
--Get app. contact methods
--declare @maxGsContactMethodDId int;
--declare @Email nvarchar(50),@PhoneNum nvarchar(15),@MobileNum nvarchar(15);

--SELECT  @Email = ADM_APP_GUARDIAN.E_MAIL,
--		@PhoneNum = ADM_APP_GUARDIAN.PHONE_NUM,
--		@MobileNum = ADM_APP_GUARDIAN.MOBILE_NUM
--FROM         ADM_APP_GUARDIAN INNER JOIN
--                      ADM_APPLICANT ON ADM_APP_GUARDIAN.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
--where ADM_APPLICANT.ED_STUD_ID = @EdStudId;
--if(@Email is not null or @PhoneNum is not null or @MobileNum is not null)
--begin
--	--insert stud contact method H

--	declare @maxGsContactMethodHId int;
--	select @maxGsContactMethodHId = MAX (GS_CONTACT_METHOD_H_ID) from GS_CONTACT_METHOD_H;
--	if(@maxGsContactMethodHId = 0)
--	set @maxGsContactMethodHId = 1;
--	else
--	set @maxGsContactMethodHId = @maxGsContactMethodHId+1;
--	insert into GS_CONTACT_METHOD_H (GS_CONTACT_METHOD_H_ID,HEADER_DESCR_AR,HEADER_DESCR_EN)
--	values (@maxGsContactMethodHId,N'بيانات ولي الأمر','Gardian details');

--	-- Email (GS_CODE_CONTACT_METHOD_ID = 1)

--	if(@Email is not null)
--	begin
--		select @maxGsContactMethodDId = MAX (GS_CONTACT_METHOD_D_ID) from GS_CONTACT_METHOD_D;
--		if(@maxGsContactMethodDId is null)
--		set @maxGsContactMethodDId = 1;
--		else
--		set @maxGsContactMethodDId = @maxGsContactMethodDId+1;
--		insert into GS_CONTACT_METHOD_D (GS_CONTACT_METHOD_D_ID,GS_CONTACT_METHOD_H_ID,GS_CODE_CONTACT_METHOD_ID,METHOD_DESCR)
--		values (@maxGsContactMethodDId,@maxGsContactMethodHId,1,@Email);
--	end
--	-- PhoneNum (GS_CODE_CONTACT_METHOD_ID = 3)

--	if(@PhoneNum is not null)
--	begin
--		select @maxGsContactMethodDId = MAX (GS_CONTACT_METHOD_D_ID) from GS_CONTACT_METHOD_D;
--		if(@maxGsContactMethodDId = 0)
--		set @maxGsContactMethodDId = 1;
--		else
--		set @maxGsContactMethodDId = @maxGsContactMethodDId+1;
--		insert into GS_CONTACT_METHOD_D (GS_CONTACT_METHOD_D_ID,GS_CONTACT_METHOD_H_ID,GS_CODE_CONTACT_METHOD_ID,METHOD_DESCR)
--		values (@maxGsContactMethodDId,@maxGsContactMethodHId,3,@PhoneNum);
--	end
--	-- MobileNum (GS_CODE_CONTACT_METHOD_ID = 2)

--	if(@MobileNum is not null)
--	begin
--		select @maxGsContactMethodDId = MAX (GS_CONTACT_METHOD_D_ID) from GS_CONTACT_METHOD_D;
--		if(@maxGsContactMethodDId = 0)
--		set @maxGsContactMethodDId = 1;
--		else
--		set @maxGsContactMethodDId = @maxGsContactMethodDId+1;
--		insert into GS_CONTACT_METHOD_D (GS_CONTACT_METHOD_D_ID,GS_CONTACT_METHOD_H_ID,GS_CODE_CONTACT_METHOD_ID,METHOD_DESCR)
--		values (@maxGsContactMethodDId,@maxGsContactMethodHId,2,@MobileNum);
--	end

--	--insert stud Gardian data

--	declare @maxEdStudGuardianId int;
--	select @maxEdStudGuardianId = MAX (ED_STUD_GUARDIAN_ID) from ED_STUD_GUARDIAN;
--	if(@maxEdStudGuardianId = 0)
--	set @maxEdStudGuardianId = 1;
--	else
--	set @maxEdStudGuardianId = @maxEdStudGuardianId+1;

--	insert into ED_STUD_GUARDIAN (ED_STUD_GUARDIAN_ID,ED_STUD_ID,GUARD_NAME_AR,GUARD_NAME_EN,GUARD_ADDRESS,GUARD_JOB,GS_CODE_RELATION_ID,GS_CONTACT_METHOD_H_ID)
--	SELECT   @maxEdStudGuardianId,
--			 ADM_APPLICANT.ED_STUD_ID, 
--			 ADM_APP_GUARDIAN.FULL_NAME, 
--			 ADM_APP_GUARDIAN.FULL_NAME, 
--			 ADM_APP_GUARDIAN.PERM_ADDR, 
--			 ADM_APP_GUARDIAN.JOB_TITLE, 
--			 ADM_APP_GUARDIAN.GS_CODE_RELATION_ID,
--			 @maxGsContactMethodHId
--	FROM         ADM_APP_GUARDIAN INNER JOIN
--						  ADM_APPLICANT ON ADM_APP_GUARDIAN.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
--	where ADM_APPLICANT.ED_STUD_ID = @EdStudId

--end


update ED_STUD_GUARD
set ED_STUD_ID = @EdStudId
where ADM_APPLICANT_ID = @AdmApplicantId

update GS_ADDRESS_DTL
set ED_STUD_ID = @EdStudId
where ADM_APPLICANT_ID = @AdmApplicantId

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetAllSuccessForApprove">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
if(@EntMainId=0)
begin
set @EntMainId= null;
end

if(@EdCodeSemesterId=0)
begin
set @EdCodeSemesterId= null;
end

if(@EdAcadYearId=0)
begin
set @EdAcadYearId= null;
end

if(@Lang=0)
begin
set @Lang = null;
end

if(@StudName='')
begin
set @StudName = null;
end

select distinct t1.AdmApplicantId,
		t1.IdentNum,
		t1.FullNameAr,
		t1.FullNameEn,
		t1.EntDescrAr,
		t1.EntDescrEn
from

(SELECT     ADM_APPLICANT.ADM_APPLICANT_ID as AdmApplicantId, 
			ADM_APPLICANT.FULL_NAME_AR as FullNameAr,  
			ADM_APPLICANT.FULL_NAME_EN as FullNameEn, 
			ADM_APPLICANT.IDENT_NUM as IdentNum,
			ENTITY_MAIN.ENT_DESCR_AR as EntDescrAr,
			ENTITY_MAIN.ENT_DESCR_EN as EntDescrEn,
			SUM(CASE ADM_APP_PLACEMENT_EXAM.PASS_FLG WHEN 1 THEN 1 ELSE 0 END) AS SuccessCoursesCount, 
			SUM(1) AS CoursesCount,
			ENTITY_MAIN.ENT_MAIN_ID
			
FROM         ADM_APP_PLACEMENT_EXAM INNER JOIN
                      ADM_APPLICANT ON ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where ADM_APPLICANT.ADM_CDE_STATUS_ID = 4
and
(
	(@EdAcadYearId is null or ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
and (@EdCodeSemesterId is null or ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and (@EntMainId is null or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
and ((@Lang is null and @StudName is null) or (@Lang=2 and ADM_APPLICANT.FULL_NAME_EN like '%'+@StudName+'%') or (@Lang=1 and ADM_APPLICANT.FULL_NAME_AR like '%'+@StudName+'%'))
)
group by ADM_APPLICANT.ADM_APPLICANT_ID,ADM_APPLICANT.FULL_NAME_AR,ADM_APPLICANT.FULL_NAME_EN,ADM_APPLICANT.IDENT_NUM,ENTITY_MAIN.ENT_DESCR_AR,ENTITY_MAIN.ENT_DESCR_EN,ENTITY_MAIN.ENT_MAIN_ID
) as t1
inner join 
(SELECT     ENTITY_MAIN.ENT_MAIN_ID, COUNT(ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID) as ExamsCount
FROM         ADM_CDE_PLACEMENT_EXAM INNER JOIN
                      ENTITY_MAIN ON ADM_CDE_PLACEMENT_EXAM.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
group by ENTITY_MAIN.ENT_MAIN_ID
)as t2
on t1.ENT_MAIN_ID = t2.ENT_MAIN_ID
-- Docs
inner join
(SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, 
			ENTITY_MAIN.ENT_MAIN_ID, 
			count(ADM_APP_DOC.ADM_APP_DOC_ID) as AppDocCount
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_APP_DOC ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_DOC.ADM_APPLICANT_ID
WHERE     (ADM_APPLICANT.ADM_CDE_STATUS_ID = 4)
group by ENTITY_MAIN.ENT_MAIN_ID,ADM_APPLICANT.ADM_APPLICANT_ID
) as t3
on t1.AdmApplicantId = t3.ADM_APPLICANT_ID
inner join 
(SELECT     ENTITY_MAIN.ENT_MAIN_ID,COUNT( ADM_REQ_DOC.ADM_REQ_DOC_ID) as ReqDocCount
FROM         ENTITY_MAIN INNER JOIN
                      ADM_REQ_DOC ON ENTITY_MAIN.ENT_MAIN_ID = ADM_REQ_DOC.ENT_MAIN_ID
GROUP BY ENTITY_MAIN.ENT_MAIN_ID
)as t4
on t1.ENT_MAIN_ID = t4.ENT_MAIN_ID

where t1.CoursesCount = t1.SuccessCoursesCount
and t1.SuccessCoursesCount = t2.ExamsCount
and t3.AppDocCount = t4.ReqDocCount
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetAllNewForReject">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
if(@EntMainId=0)
begin
set @EntMainId= null;
end

if(@EdCodeSemesterId=0)
begin
set @EdCodeSemesterId= null;
end

if(@EdAcadYearId=0)
begin
set @EdAcadYearId= null;
end

if(@Lang=0)
begin
set @Lang = null;
end

if(@StudName='')
begin
set @StudName = null;
end

SELECT  distinct   ADM_APPLICANT.ADM_APPLICANT_ID as AdmApplicantId, 
			ADM_APPLICANT.FULL_NAME_AR as FullNameAr,  
			ADM_APPLICANT.FULL_NAME_EN as FullNameEn, 
			ADM_APPLICANT.IDENT_NUM as IdentNum,
			ENTITY_MAIN.ENT_DESCR_AR as EntDescrAr,
			ENTITY_MAIN.ENT_DESCR_EN as EntDescrEn
			
FROM         ADM_APPLICANT  INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
                      
where ADM_APPLICANT.ADM_CDE_STATUS_ID = 4
and
(
	(@EdAcadYearId is null or ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
and (@EdCodeSemesterId is null or ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and (@EntMainId is null or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
and ((@Lang is null and @StudName is null) or (@Lang=2 and ADM_APPLICANT.FULL_NAME_EN like '%'+@StudName+'%') or (@Lang=1 and ADM_APPLICANT.FULL_NAME_AR like '%'+@StudName+'%'))
)

				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetForReject">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AppName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@AppCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@New" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AppType" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
------------------------------------------------------
DECLARE @UnivEntMainId NUMERIC;
IF @EntMainId = 0
BEGIN
	SELECT @UnivEntMainId=ENT_MAIN_ID FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID = 1
END

declare @Fac_Exams_Count int,@Fac_Docs_Count int,@Fac_Trans_Docs_Count int,@Fac_Fees_Count int,@Fac_Trans_Fees_Count int;

SELECT  @Fac_Exams_Count = count(ADM_CDE_PLACEMENT_EXAM_ID)
FROM         ADM_CDE_PLACEMENT_EXAM
WHERE (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1;

SELECT   @Fac_Docs_Count = count(ADM_REQ_DOC_ID)
FROM         ADM_REQ_DOC
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 0;

SELECT   @Fac_Trans_Docs_Count = count(ADM_REQ_DOC_ID)
FROM         ADM_REQ_DOC
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 1;

SELECT   @Fac_Fees_Count = count(ADM_CDE_FEE_ID)
FROM         ADM_CDE_FEE
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 0;

SELECT   @Fac_Trans_Fees_Count = count(ADM_CDE_FEE_ID)
FROM         ADM_CDE_FEE
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 1;
------------------------------------------------------
select t.ADM_APPLICANT_ID,
		t.ADM_APP_CODE,
		(case @Lang when 2 then t.FULL_NAME_EN else t.FULL_NAME_AR end) AS Full_Name,
		t.Docs_Flg,
		t.Exam_Flg,
		t.Fees_Flg, 
    t.REFUSE_NOTES 
from
(select t_App.*,
		t_AppExams.Exam_Flg,(case ISNULL(t_AppExams.Exam_Flg,'Yes') when 'Yes' then 1 else 0 end) as Exam_Num,
		t_AppDocs.Docs_Flg,(case ISNULL(t_AppDocs.Docs_Flg,'Yes') when 'Yes' then 1 else 0 end) as Docs_Num,
		t_AppFees.Fees_Flg,(case ISNULL(t_AppFees.Fees_Flg,'Yes') when 'Yes' then 1 else 0 end) as Fees_Num
from
(SELECT     ADM_APPLICANT_ID, ADM_APP_CODE, FULL_NAME_AR, FULL_NAME_EN, REFUSE_NOTES
FROM         ADM_APPLICANT
where ADM_CDE_STATUS_ID = @New
and ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and((@EntMainId=0 and ENT_MAIN_ID IS NULL) or ENT_MAIN_ID = @EntMainId)
and(@AppType =0 or ADM_CDE_APP_TYPE_ID=@AppType))as t_App
left outer join
(SELECT     ADM_APPLICANT_ID,COUNT(ADM_APP_PLACEMENT_EXAM_ID) Exams_Count, SUM(case PASS_FLG when 1 then 1 else 0 end) Success_Exams, 
	( case when COUNT(ADM_APP_PLACEMENT_EXAM_ID)<@Fac_Exams_Count or (COUNT(ADM_APP_PLACEMENT_EXAM_ID) >= @Fac_Exams_Count AND SUM(case PASS_FLG when 1 then 1 else 0 end)<COUNT(ADM_APP_PLACEMENT_EXAM_ID)) then 'No' else 'Yes' end) as Exam_Flg
FROM         ADM_APP_PLACEMENT_EXAM
group by ADM_APPLICANT_ID) as t_AppExams
on t_App.ADM_APPLICANT_ID = t_AppExams.ADM_APPLICANT_ID
left outer join
(SELECT     ADM_APP_DOC.ADM_APPLICANT_ID, COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) AS Docs_Count, 
			(CASE WHEN (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) < @Fac_Docs_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) OR (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) < (@Fac_Docs_Count + @Fac_Trans_Docs_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2) OR (((COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) >= @Fac_Docs_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) >= (@Fac_Docs_Count + @Fac_Trans_Docs_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)) AND SUM(CASE WHEN ADM_APP_DOC.SUBMIT_DATE IS NOT NULL THEN 1 ELSE 0 END) < COUNT(ADM_APP_DOC.ADM_APP_DOC_ID)) THEN 'No' ELSE 'Yes' END) AS Docs_Flg
FROM         ADM_APP_DOC INNER JOIN
                      ADM_APPLICANT ON ADM_APP_DOC.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
GROUP BY ADM_APP_DOC.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_CDE_APP_TYPE_ID) as t_AppDocs
on t_App.ADM_APPLICANT_ID = t_AppDocs.ADM_APPLICANT_ID
left outer join
(SELECT     ADM_APP_FEES.ADM_APPLICANT_ID, COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) AS Fees_Count, 
                      SUM(CASE ADM_APP_FEES.IS_PAYED WHEN 1 THEN 1 ELSE 0 END) AS Payed_Fees, 
                      (CASE WHEN (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) < @Fac_Fees_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) < (@Fac_Fees_Count + @Fac_Trans_Fees_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)  OR (((COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) >= @Fac_Fees_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) >= (@Fac_Fees_Count+@Fac_Trans_Fees_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)) AND SUM(CASE ADM_APP_FEES.IS_PAYED WHEN 1 THEN 1 ELSE 0 END) < COUNT(ADM_APP_FEES.ADM_APP_FEES_ID)) THEN 'No' ELSE 'Yes' END) AS Fees_Flg
FROM         ADM_APP_FEES INNER JOIN
                      ADM_APPLICANT ON ADM_APP_FEES.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ADM_CDE_FEE ON ADM_APP_FEES.ADM_CDE_FEE_ID = ADM_CDE_FEE.ADM_CDE_FEE_ID
GROUP BY ADM_APP_FEES.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_CDE_APP_TYPE_ID) as t_AppFees
on t_App.ADM_APPLICANT_ID = t_AppFees.ADM_APPLICANT_ID
) as t
where (@New = 3 or (@New = 4 and t.Docs_Num+t.Exam_Num+t.Fees_Num < 3))
and (@AppCode = '' or t.ADM_APP_CODE = @AppCode)
and (@AppName = '' or (t.FULL_NAME_EN like '%'+@AppName+'%' and @Lang=2) or (t.FULL_NAME_AR like '%'+@AppName+'%' and @Lang=1))

				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetForApprove">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AppName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@AppCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@Sort1" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Sort2" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Sort3" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@New" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AppType" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
------------------------------------------------------
DECLARE @UnivEntMainId NUMERIC;
IF @EntMainId = 0
BEGIN
	SELECT @UnivEntMainId=ENT_MAIN_ID FROM dbo.ENTITY_MAIN WHERE ENT_CODE_ENTITY_TYPE_ID = 1
END

declare @Fac_Exams_Count int,@Fac_Docs_Count int,@Fac_Trans_Docs_Count int,@Fac_Fees_Count int,@Fac_Trans_Fees_Count int;

SELECT  @Fac_Exams_Count = count(ADM_CDE_PLACEMENT_EXAM_ID)
FROM         ADM_CDE_PLACEMENT_EXAM
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1;

SELECT   @Fac_Docs_Count = count(ADM_REQ_DOC_ID)
FROM         ADM_REQ_DOC
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 0;

SELECT   @Fac_Trans_Docs_Count = count(ADM_REQ_DOC_ID)
FROM         ADM_REQ_DOC
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 1;

SELECT   @Fac_Fees_Count = count(ADM_CDE_FEE_ID)
FROM         ADM_CDE_FEE
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 0;

SELECT   @Fac_Trans_Fees_Count = count(ADM_CDE_FEE_ID)
FROM         ADM_CDE_FEE
where (@EntMainId = 0 AND ENT_MAIN_ID = @UnivEntMainId) or ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 1;
------------------------------------------------------
select t.ADM_APPLICANT_ID,
		t.ADM_APP_CODE,
		(case @Lang when 2 then t.FULL_NAME_EN else t.FULL_NAME_AR end) AS Full_Name,
		(case @Lang when 2 then t.DESCR_EN else t.DESCR_AR end) AS Nationality_Name,
		t.BIRTH_DATE,
		t.APP_DATE,
		t.CERTF_PERCENT
from
(select t_App.*,
		t_AppExams.Exam_Flg,(case isnull( t_AppExams.Exam_Flg,'Yes') when 'Yes' then 1 else 0 end) as Exam_Num,
		t_AppDocs.Docs_Flg,(case isnull( t_AppDocs.Docs_Flg,'Yes') when 'Yes' then 1 else 0 end) as Docs_Num,
		t_AppFees.Fees_Flg,(case isnull( t_AppFees.Fees_Flg,'Yes') when 'Yes' then 1 else 0 end) as Fees_Num
from
(SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_APP_CODE, ADM_APPLICANT.FULL_NAME_AR, ADM_APPLICANT.FULL_NAME_EN, 
                      ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.APP_DATE, GS_COUNTRY_INFO.DESCR_AR, GS_COUNTRY_INFO.DESCR_EN,ADM_APPLICANT.CERTF_PERCENT
FROM         ADM_APPLICANT INNER JOIN
                      GS_COUNTRY_INFO ON ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
WHERE     (ADM_APPLICANT.ADM_CDE_STATUS_ID = 4) AND (ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND ((@EntMainId=0 and ADM_APPLICANT.ENT_MAIN_ID is null) or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
                      and (@AppType = 0 or ADM_APPLICANT.ADM_CDE_APP_TYPE_ID=@AppType))as t_App
left outer join
(SELECT     ADM_APPLICANT_ID,COUNT(ADM_APP_PLACEMENT_EXAM_ID) Exams_Count, SUM(case PASS_FLG when 1 then 1 else 0 end) Success_Exams, 
	( case when (COUNT(ADM_APP_PLACEMENT_EXAM_ID) >= @Fac_Exams_Count AND SUM(case PASS_FLG when 1 then 1 else 0 end)=COUNT(ADM_APP_PLACEMENT_EXAM_ID)) then 'Yes' else 'No' end) as Exam_Flg
FROM         ADM_APP_PLACEMENT_EXAM
group by ADM_APPLICANT_ID) as t_AppExams
on t_App.ADM_APPLICANT_ID = t_AppExams.ADM_APPLICANT_ID
left outer join
(SELECT     ADM_APP_DOC.ADM_APPLICANT_ID, COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) AS Docs_Count, 
			(CASE WHEN (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) < @Fac_Docs_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) OR (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) < (@Fac_Docs_Count + @Fac_Trans_Docs_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2) OR (((COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) >= @Fac_Docs_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) >= (@Fac_Docs_Count + @Fac_Trans_Docs_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)) AND SUM(CASE WHEN ADM_APP_DOC.SUBMIT_DATE IS NOT NULL THEN 1 ELSE 0 END) < COUNT(ADM_APP_DOC.ADM_APP_DOC_ID)) THEN 'No' ELSE 'Yes' END) AS Docs_Flg
FROM         ADM_APP_DOC INNER JOIN
                      ADM_APPLICANT ON ADM_APP_DOC.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
GROUP BY ADM_APP_DOC.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_CDE_APP_TYPE_ID) as t_AppDocs
on t_App.ADM_APPLICANT_ID = t_AppDocs.ADM_APPLICANT_ID
left outer join
(SELECT     ADM_APP_FEES.ADM_APPLICANT_ID, COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) AS Fees_Count, 
                      SUM(CASE ADM_APP_FEES.IS_PAYED WHEN 1 THEN 1 ELSE 0 END) AS Payed_Fees, 
                      (CASE WHEN (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) < @Fac_Fees_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) < (@Fac_Fees_Count + @Fac_Trans_Fees_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)  OR (((COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) >= @Fac_Fees_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) >= (@Fac_Fees_Count+@Fac_Trans_Fees_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)) AND SUM(CASE ADM_APP_FEES.IS_PAYED WHEN 1 THEN 1 ELSE 0 END) < COUNT(ADM_APP_FEES.ADM_APP_FEES_ID)) THEN 'No' ELSE 'Yes' END) AS Fees_Flg
FROM         ADM_APP_FEES INNER JOIN
                      ADM_APPLICANT ON ADM_APP_FEES.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ADM_CDE_FEE ON ADM_APP_FEES.ADM_CDE_FEE_ID = ADM_CDE_FEE.ADM_CDE_FEE_ID
GROUP BY ADM_APP_FEES.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_CDE_APP_TYPE_ID) as t_AppFees
on t_App.ADM_APPLICANT_ID = t_AppFees.ADM_APPLICANT_ID
) as t

where @New = 2 or (@New = 4 and t.Docs_Num+t.Exam_Num+t.Fees_Num < 3)
and (@AppCode is null or @AppCode = '' or t.ADM_APP_CODE = @AppCode)
and (@AppName is null or @AppName = '' or (t.FULL_NAME_EN like '%'+@AppName+'%' and @Lang=2) or (t.FULL_NAME_AR like '%'+@AppName+'%' and @Lang=1))

order by 
 case when @Sort1=1 then t.BIRTH_DATE end asc,
 case when @Sort1=10 then t.BIRTH_DATE end desc,
case when @Sort2=2 then t.APP_DATE end asc,
case when @Sort2=20 then t.APP_DATE end desc,
case when @Sort3=3 then t.CERTF_PERCENT end asc,
case when @Sort3=30 then t.CERTF_PERCENT end desc

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetApproved">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AppName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@AppCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@Sort1" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Sort2" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Sort3" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@New" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AppType" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
------------------------------------------------------
declare @Fac_Exams_Count int,@Fac_Docs_Count int,@Fac_Trans_Docs_Count int,@Fac_Fees_Count int,@Fac_Trans_Fees_Count int;

SELECT  @Fac_Exams_Count = count(ADM_CDE_PLACEMENT_EXAM_ID)
FROM         ADM_CDE_PLACEMENT_EXAM
where ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1;

SELECT   @Fac_Docs_Count = count(ADM_REQ_DOC_ID)
FROM         ADM_REQ_DOC
where ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 0;

SELECT   @Fac_Trans_Docs_Count = count(ADM_REQ_DOC_ID)
FROM         ADM_REQ_DOC
where ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 1;

SELECT   @Fac_Fees_Count = count(ADM_CDE_FEE_ID)
FROM         ADM_CDE_FEE
where ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 0;

SELECT   @Fac_Trans_Fees_Count = count(ADM_CDE_FEE_ID)
FROM         ADM_CDE_FEE
where ENT_MAIN_ID = @EntMainId
and AUTOLOAD_FLG = 1
and TRANS_APP_FLG = 1;
------------------------------------------------------
select t.ADM_APPLICANT_ID,
		t.ADM_APP_CODE,
		(case @Lang when 2 then t.FULL_NAME_EN else t.FULL_NAME_AR end) AS Full_Name,
		(case @Lang when 2 then t.DESCR_EN else t.DESCR_AR end) AS Nationality_Name,
		t.BIRTH_DATE,
		t.APP_DATE,
		t.CERTF_PERCENT
from
(select t_App.*,
		t_AppExams.Exam_Flg,(case t_AppExams.Exam_Flg when 'Yes' then 1 else 0 end) as Exam_Num,
		t_AppDocs.Docs_Flg,(case t_AppDocs.Docs_Flg when 'Yes' then 1 else 0 end) as Docs_Num,
		t_AppFees.Fees_Flg,(case t_AppFees.Fees_Flg when 'Yes' then 1 else 0 end) as Fees_Num
from
(SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_APP_CODE, ADM_APPLICANT.FULL_NAME_AR, ADM_APPLICANT.FULL_NAME_EN, 
                      ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.APP_DATE, GS_COUNTRY_INFO.DESCR_AR, GS_COUNTRY_INFO.DESCR_EN,ADM_APPLICANT.CERTF_PERCENT
FROM         ADM_APPLICANT INNER JOIN
                      GS_COUNTRY_INFO ON ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
WHERE     (ADM_APPLICANT.ADM_CDE_STATUS_ID = 2) AND (ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (@EntMainId=0 or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
                      and (@AppType = 0 or ADM_APPLICANT.ADM_CDE_APP_TYPE_ID=@AppType))as t_App
left outer join
(SELECT     ADM_APPLICANT_ID,COUNT(ADM_APP_PLACEMENT_EXAM_ID) Exams_Count, SUM(case PASS_FLG when 1 then 1 else 0 end) Success_Exams, 
	( case when (COUNT(ADM_APP_PLACEMENT_EXAM_ID) >= @Fac_Exams_Count AND SUM(case PASS_FLG when 1 then 1 else 0 end)=COUNT(ADM_APP_PLACEMENT_EXAM_ID)) then 'Yes' else 'No' end) as Exam_Flg
FROM         ADM_APP_PLACEMENT_EXAM
group by ADM_APPLICANT_ID) as t_AppExams
on t_App.ADM_APPLICANT_ID = t_AppExams.ADM_APPLICANT_ID
left outer join
(SELECT     ADM_APP_DOC.ADM_APPLICANT_ID, COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) AS Docs_Count, 
			(CASE WHEN (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) < @Fac_Docs_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) OR (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) < (@Fac_Docs_Count + @Fac_Trans_Docs_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2) OR (((COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) >= @Fac_Docs_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_DOC.ADM_APP_DOC_ID) >= (@Fac_Docs_Count + @Fac_Trans_Docs_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)) AND SUM(CASE WHEN ADM_APP_DOC.SUBMIT_DATE IS NOT NULL THEN 1 ELSE 0 END) < COUNT(ADM_APP_DOC.ADM_APP_DOC_ID)) THEN 'No' ELSE 'Yes' END) AS Docs_Flg
FROM         ADM_APP_DOC INNER JOIN
                      ADM_APPLICANT ON ADM_APP_DOC.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
GROUP BY ADM_APP_DOC.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_CDE_APP_TYPE_ID) as t_AppDocs
on t_App.ADM_APPLICANT_ID = t_AppDocs.ADM_APPLICANT_ID
left outer join
(SELECT     ADM_APP_FEES.ADM_APPLICANT_ID, COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) AS Fees_Count, 
                      SUM(CASE ADM_APP_FEES.IS_PAYED WHEN 1 THEN 1 ELSE 0 END) AS Payed_Fees, 
                      (CASE WHEN (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) < @Fac_Fees_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) < (@Fac_Fees_Count + @Fac_Trans_Fees_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)  OR (((COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) >= @Fac_Fees_Count and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 1) or (COUNT(ADM_APP_FEES.ADM_APP_FEES_ID) >= (@Fac_Fees_Count+@Fac_Trans_Fees_Count) and ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = 2)) AND SUM(CASE ADM_APP_FEES.IS_PAYED WHEN 1 THEN 1 ELSE 0 END) < COUNT(ADM_APP_FEES.ADM_APP_FEES_ID)) THEN 'No' ELSE 'Yes' END) AS Fees_Flg
FROM         ADM_APP_FEES INNER JOIN
                      ADM_APPLICANT ON ADM_APP_FEES.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ADM_CDE_FEE ON ADM_APP_FEES.ADM_CDE_FEE_ID = ADM_CDE_FEE.ADM_CDE_FEE_ID
GROUP BY ADM_APP_FEES.ADM_APPLICANT_ID, ADM_APPLICANT.ADM_CDE_APP_TYPE_ID) as t_AppFees
on t_App.ADM_APPLICANT_ID = t_AppFees.ADM_APPLICANT_ID
) as t
where  @New = 2 or (@New = 4 and t.Docs_Num+t.Exam_Num+t.Fees_Num = 3)
and (@AppCode is null or @AppCode = '' or t.ADM_APP_CODE = @AppCode)
and (@AppName is null or @AppName = '' or (t.FULL_NAME_EN like '%'+@AppName+'%' and @Lang=2) or (t.FULL_NAME_AR like '%'+@AppName+'%' and @Lang=1))

order by 
 case when @Sort1=1 then t.BIRTH_DATE end asc,
 case when @Sort1=10 then t.BIRTH_DATE end desc,
case when @Sort2=2 then t.APP_DATE end asc,
case when @Sort2=20 then t.APP_DATE end desc,
case when @Sort3=3 then t.CERTF_PERCENT end asc,
case when @Sort3=30 then t.CERTF_PERCENT end desc

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetAllApproved">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
if(@EntMainId=0)
begin
set @EntMainId= null;
end

if(@EdCodeSemesterId=0)
begin
set @EdCodeSemesterId= null;
end

if(@EdAcadYearId=0)
begin
set @EdAcadYearId= null;
end

if(@Lang=0)
begin
set @Lang = null;
end

if(@StudName='')
begin
set @StudName = null;
end

select distinct t1.AdmApplicantId,
		t1.IdentNum,
		t1.FullNameAr,
		t1.FullNameEn,
		t1.EntDescrAr,
		t1.EntDescrEn
from

(SELECT     ADM_APPLICANT.ADM_APPLICANT_ID as AdmApplicantId, 
			ADM_APPLICANT.FULL_NAME_AR as FullNameAr,  
			ADM_APPLICANT.FULL_NAME_EN as FullNameEn, 
			ADM_APPLICANT.IDENT_NUM as IdentNum,
			ENTITY_MAIN.ENT_DESCR_AR as EntDescrAr,
			ENTITY_MAIN.ENT_DESCR_EN as EntDescrEn,
			SUM(CASE ADM_APP_PLACEMENT_EXAM.PASS_FLG WHEN 1 THEN 1 ELSE 0 END) AS SuccessCoursesCount, 
			SUM(1) AS CoursesCount,
			ENTITY_MAIN.ENT_MAIN_ID
			
FROM         ADM_APP_PLACEMENT_EXAM INNER JOIN
                      ADM_APPLICANT ON ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where ADM_APPLICANT.ADM_CDE_STATUS_ID = 2
and ADM_APPLICANT.ED_STUD_ID is null
and
(
	(@EdAcadYearId is null or ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
and (@EdCodeSemesterId is null or ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and (@EntMainId is null or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
and ((@Lang is null and @StudName is null) or (@Lang=2 and ADM_APPLICANT.FULL_NAME_EN like '%'+@StudName+'%') or (@Lang=1 and ADM_APPLICANT.FULL_NAME_AR like '%'+@StudName+'%'))
)
group by ADM_APPLICANT.ADM_APPLICANT_ID,ADM_APPLICANT.FULL_NAME_AR,ADM_APPLICANT.FULL_NAME_EN,ADM_APPLICANT.IDENT_NUM,ENTITY_MAIN.ENT_DESCR_AR,ENTITY_MAIN.ENT_DESCR_EN,ENTITY_MAIN.ENT_MAIN_ID
) as t1
inner join 
(SELECT     ENTITY_MAIN.ENT_MAIN_ID, COUNT(ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID) as ExamsCount
FROM         ADM_CDE_PLACEMENT_EXAM INNER JOIN
                      ENTITY_MAIN ON ADM_CDE_PLACEMENT_EXAM.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
group by ENTITY_MAIN.ENT_MAIN_ID
)as t2
on t1.ENT_MAIN_ID = t2.ENT_MAIN_ID
-- Docs
inner join
(SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, 
			ENTITY_MAIN.ENT_MAIN_ID, 
			count(ADM_APP_DOC.ADM_APP_DOC_ID) as AppDocCount
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_APP_DOC ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_DOC.ADM_APPLICANT_ID
WHERE     (ADM_APPLICANT.ADM_CDE_STATUS_ID = 2 and ADM_APPLICANT.ED_STUD_ID is null)
group by ENTITY_MAIN.ENT_MAIN_ID,ADM_APPLICANT.ADM_APPLICANT_ID
) as t3
on t1.AdmApplicantId = t3.ADM_APPLICANT_ID
inner join 
(SELECT     ENTITY_MAIN.ENT_MAIN_ID,COUNT( ADM_REQ_DOC.ADM_REQ_DOC_ID) as ReqDocCount
FROM         ENTITY_MAIN INNER JOIN
                      ADM_REQ_DOC ON ENTITY_MAIN.ENT_MAIN_ID = ADM_REQ_DOC.ENT_MAIN_ID
GROUP BY ENTITY_MAIN.ENT_MAIN_ID
)as t4
on t1.ENT_MAIN_ID = t4.ENT_MAIN_ID

where t1.CoursesCount = t1.SuccessCoursesCount
and t1.SuccessCoursesCount = t2.ExamsCount
and t3.AppDocCount = t4.ReqDocCount
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetAllApprovedForTransfer">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AppCode" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@StudName" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@AppType" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, 
			ADM_APPLICANT.FULL_NAME_AR, ADM_APPLICANT.FULL_NAME_EN, 
			ADM_APPLICANT.BIRTH_DATE, 
            ADM_APPLICANT.APP_DATE, 
            ADM_APPLICANT.ADM_APP_CODE, 
            GS_COUNTRY_INFO.DESCR_AR, GS_COUNTRY_INFO.DESCR_EN
FROM         ADM_APPLICANT INNER JOIN
                      GS_COUNTRY_INFO ON ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
where ADM_APPLICANT.ADM_CDE_STATUS_ID = 2
and ADM_APPLICANT.TRANSFER_FLG = 0
and ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId
and ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and(@EntMainId=0 or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
and (@AppType = 0 or ADM_APPLICANT.ADM_CDE_APP_TYPE_ID=@AppType )
and (@AppCode is null or @AppCode='' or ADM_APPLICANT.ADM_APP_CODE = @AppCode)
and (@StudName is null or @StudName='' or (@Lang=2 and ADM_APPLICANT.FULL_NAME_EN like '%'+@StudName+'%') or (@Lang=1 and ADM_APPLICANT.FULL_NAME_AR like '%'+@StudName+'%'))				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetForPlacementExam">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT      ADM_APPLICANT.ADM_APPLICANT_ID,
			ADM_APPLICANT.ADM_CDE_STATUS_ID,
			ADM_APPLICANT.ENT_MAIN_ID,
			ADM_APPLICANT.FULL_NAME_AR,
			ADM_APPLICANT.FULL_NAME_EN
FROM         ADM_APPLICANT
where ADM_APPLICANT.ENT_MAIN_ID = @EntMainId
and ADM_APPLICANT.ADM_APPLICANT_ID 
--not in (SELECT     ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID
in (SELECT     ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID
FROM         ADM_APP_PLACEMENT_EXAM INNER JOIN
                      ADM_APPLICANT ON ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
WHERE     ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId
and ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetForReqDoc">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APPLICANT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AdmReqDocId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT      ADM_APPLICANT.ADM_APPLICANT_ID,
			ADM_APPLICANT.ADM_CDE_STATUS_ID,
			ADM_APPLICANT.ENT_MAIN_ID,
			ADM_APPLICANT.FULL_NAME_AR,
			ADM_APPLICANT.FULL_NAME_EN
FROM         ADM_APPLICANT
where ADM_APPLICANT.ENT_MAIN_ID = @EntMainId
and ADM_APPLICANT.ADM_APPLICANT_ID not in (SELECT     ADM_APP_DOC.ADM_APPLICANT_ID
FROM         ADM_APP_DOC INNER JOIN
                      ADM_APPLICANT ON ADM_APP_DOC.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
WHERE     ADM_APP_DOC.ADM_REQ_DOC_ID = @AdmReqDocId
and ADM_APPLICANT.ENT_MAIN_ID = @EntMainId)
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_PLACEMENT_EXAM_GetAllForViewByAdmCdePlacementExamId" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_PLACEMENT_EXAM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT      ADM_APP_PLACEMENT_EXAM.ADM_APP_PLACEMENT_EXAM_ID, 
			ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID, 
			ADM_APP_PLACEMENT_EXAM.EXAM_DATE, 
			ADM_APP_PLACEMENT_EXAM.MARK, 
			ADM_APP_PLACEMENT_EXAM.PASS_FLG, 
			ADM_CDE_PLACEMENT_EXAM.DESCR_AR, 
			ADM_CDE_PLACEMENT_EXAM.DESCR_EN, 
			ADM_CDE_PLACEMENT_EXAM.EXAM_TYPE_FLG, 
			ADM_CDE_PLACEMENT_EXAM.GS_CDE_OPERATOR, 
			ADM_CDE_PLACEMENT_EXAM.VALUE_1, 
			ADM_APPLICANT.FULL_NAME_AR, 
			ADM_APPLICANT.FULL_NAME_EN
			
FROM         ADM_APP_PLACEMENT_EXAM INNER JOIN
                      ADM_CDE_PLACEMENT_EXAM ON 
                      ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID = ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID INNER JOIN
                      ADM_APPLICANT ON ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
where ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId
and ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_PLACEMENT_EXAM_GetForViewByDate">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_PLACEMENT_EXAM table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@ExamDate" type="nvarchar" direction="Input" size="50" precision="4" scale="0" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT     ADM_APP_PLACEMENT_EXAM.ADM_APP_PLACEMENT_EXAM_ID, ADM_APPLICANT.ADM_APP_CODE, ADM_APPLICANT.FULL_NAME_AR, 
                      ADM_APPLICANT.FULL_NAME_EN, ADM_APPLICANT.APP_DATE, GS_COUNTRY_INFO.DESCR_AR, GS_COUNTRY_INFO.DESCR_EN, 
                      ADM_APPLICANT.BIRTH_DATE,ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID,
                      ADM_APP_PLACEMENT_EXAM.EXAM_DATE,
                      ADM_APP_PLACEMENT_EXAM.MARK,
                      ADM_APP_PLACEMENT_EXAM.PASS_FLG
FROM         ADM_APP_PLACEMENT_EXAM INNER JOIN
                      ADM_APPLICANT ON ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID INNER JOIN
                      GS_COUNTRY_INFO ON ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID
where ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId
and ADM_APP_PLACEMENT_EXAM.EXAM_DATE = @ExamDate
and ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId
and ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_PLACEMENT_EXAM_GetAppExamDates">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_PLACEMENT_EXAM table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT DISTINCT convert(date, ADM_APP_PLACEMENT_EXAM.EXAM_DATE) as EXAM_DATE
FROM         ADM_APP_PLACEMENT_EXAM INNER JOIN
                      ADM_APPLICANT ON ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
WHERE     ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId
and ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId
and ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ADM_AUTO_NOTIFY table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ADM_AUTO_NOTIFY_ID],
					[ADM_APPLICANT_ID],
					[E_MAIL],
					[MOB_NUM],
					[SENT_DATE]
				FROM
					[dbo].[ADM_AUTO_NOTIFY]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_AUTO_NOTIFY table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_AUTO_NOTIFY_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ADM_AUTO_NOTIFY_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ADM_AUTO_NOTIFY_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_AUTO_NOTIFY]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ADM_AUTO_NOTIFY_ID], O.[ADM_APPLICANT_ID], O.[E_MAIL], O.[MOB_NUM], O.[SENT_DATE]
				FROM
				    [dbo].[ADM_AUTO_NOTIFY] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ADM_AUTO_NOTIFY_ID] = PageIndex.[ADM_AUTO_NOTIFY_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_AUTO_NOTIFY]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_AUTO_NOTIFY table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAutoNotifyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EMail" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@MobNum" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@SentDate" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				declare @maxAdmAutoNotifyId numeric(9,0);
                select @maxAdmAutoNotifyId=max(ADM_AUTO_NOTIFY_ID)from ADM_AUTO_NOTIFY
                    if(@maxAdmAutoNotifyId is null)
                      set  @maxAdmAutoNotifyId=0;
                    set  @maxAdmAutoNotifyId= @maxAdmAutoNotifyId+1;
				
				INSERT INTO [dbo].[ADM_AUTO_NOTIFY]
					(
					[ADM_AUTO_NOTIFY_ID]
					,[ADM_APPLICANT_ID]
					,[E_MAIL]
					,[MOB_NUM]
					,[SENT_DATE]
					)
				VALUES
					(
					@maxAdmAutoNotifyId
					,@AdmApplicantId
					,@EMail
					,@MobNum
					,@SentDate
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_AUTO_NOTIFY table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAutoNotifyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalAdmAutoNotifyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EMail" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@MobNum" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
        <parameter name="@SentDate" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_AUTO_NOTIFY]
				SET
					[ADM_AUTO_NOTIFY_ID] = @AdmAutoNotifyId
					,[ADM_APPLICANT_ID] = @AdmApplicantId
					,[E_MAIL] = @EMail
					,[MOB_NUM] = @MobNum
					,[SENT_DATE] = @SentDate
				WHERE
[ADM_AUTO_NOTIFY_ID] = @AdmAutoNotifyId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_AUTO_NOTIFY table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAutoNotifyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ADM_AUTO_NOTIFY] WITH (ROWLOCK) 
				WHERE
					[ADM_AUTO_NOTIFY_ID] = @AdmAutoNotifyId
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_GetByAdmApplicantId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_AUTO_NOTIFY table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ADM_AUTO_NOTIFY_ID],
					[ADM_APPLICANT_ID],
					[E_MAIL],
					[MOB_NUM],
					[SENT_DATE]
				FROM
					[dbo].[ADM_AUTO_NOTIFY]
				WHERE
					[ADM_APPLICANT_ID] = @AdmApplicantId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_GetByAdmAutoNotifyId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_AUTO_NOTIFY table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAutoNotifyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ADM_AUTO_NOTIFY_ID],
					[ADM_APPLICANT_ID],
					[E_MAIL],
					[MOB_NUM],
					[SENT_DATE]
				FROM
					[dbo].[ADM_AUTO_NOTIFY]
				WHERE
					[ADM_AUTO_NOTIFY_ID] = @AdmAutoNotifyId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ADM_AUTO_NOTIFY table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@AdmAutoNotifyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EMail" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@MobNum" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@SentDate" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ADM_AUTO_NOTIFY_ID]
	, [ADM_APPLICANT_ID]
	, [E_MAIL]
	, [MOB_NUM]
	, [SENT_DATE]
    FROM
	[dbo].[ADM_AUTO_NOTIFY]
    WHERE 
	 ([ADM_AUTO_NOTIFY_ID] = @AdmAutoNotifyId OR @AdmAutoNotifyId IS NULL)
	AND ([ADM_APPLICANT_ID] = @AdmApplicantId OR @AdmApplicantId IS NULL)
	AND ([E_MAIL] = @EMail OR @EMail IS NULL)
	AND ([MOB_NUM] = @MobNum OR @MobNum IS NULL)
	AND ([SENT_DATE] = @SentDate OR @SentDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ADM_AUTO_NOTIFY_ID]
	, [ADM_APPLICANT_ID]
	, [E_MAIL]
	, [MOB_NUM]
	, [SENT_DATE]
    FROM
	[dbo].[ADM_AUTO_NOTIFY]
    WHERE 
	 ([ADM_AUTO_NOTIFY_ID] = @AdmAutoNotifyId AND @AdmAutoNotifyId is not null)
	OR ([ADM_APPLICANT_ID] = @AdmApplicantId AND @AdmApplicantId is not null)
	OR ([E_MAIL] = @EMail AND @EMail is not null)
	OR ([MOB_NUM] = @MobNum AND @MobNum is not null)
	OR ([SENT_DATE] = @SentDate AND @SentDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_AUTO_NOTIFY_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_AUTO_NOTIFY table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_AUTO_NOTIFY_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ADM_AUTO_NOTIFY_ID] )
				SELECT TOP {3} [ADM_AUTO_NOTIFY_ID]
				FROM [dbo].[ADM_AUTO_NOTIFY] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ADM_AUTO_NOTIFY_ID], O.[ADM_APPLICANT_ID], O.[E_MAIL], O.[MOB_NUM], O.[SENT_DATE]
				FROM
				    [dbo].[ADM_AUTO_NOTIFY] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ADM_AUTO_NOTIFY_ID] = PageIndex.[ADM_AUTO_NOTIFY_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ADM_AUTO_NOTIFY] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_Statistics" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

SELECT    COUNT(ADM_APPLICANT.ADM_APPLICANT_ID) AppReq
		, ISNULL(sum(case ADM_APPLICANT.ADM_CDE_STATUS_ID when 3 then 1 else 0 end),0) as RejAppReq
		, ISNULL(sum(case ADM_APPLICANT.ADM_CDE_STATUS_ID when 2 then 1 else 0 end),0) as AccepAppReq
		, ISNULL(sum(case ADM_APPLICANT.TRANSFER_FLG when 1 then 1 else 0 end),0) as TransAppReq
    , ISNULL(sum(case ADM_APPLICANT.ADM_CDE_STATUS_ID when 4 then 1 else 0 end),0) as NewAppReq
    , ISNULL(sum(case ADM_APPLICANT.ADM_CDE_STATUS_ID when 1 then 1 else 0 end),0) as BindingAppReq
FROM         ADM_APPLICANT
where ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId
and ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_Search" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SearchText" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@Gender" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Age" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AgeOperator" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@Nationality" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ID" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@AdmStatus" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmCdeAppType" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ASCODEDEGREECLASSID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
 if(@Lang = 2)
 
begin
	SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.FULL_NAME_EN, ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.ED_STUD_ID, 
           ENTITY_MAIN.ENT_DESCR_EN, ADM_CDE_STATUS.DESCR_EN as ADM_STATUS_DESCR_EN, cast(ADM_APPLICANT.IDENT_NUM as nvarchar(16)) as IDENT_NUM, ED_ACAD_YEAR.DESCR_EN AS ACAD_YEAR_DESCR_EN,ADM_APPLICANT.ADM_APP_CODE,ADM_APPLICANT.GS_COUNTRY_INFO_ID_1
	FROM   ADM_APPLICANT left outer JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_CDE_STATUS ON ADM_APPLICANT.ADM_CDE_STATUS_ID = ADM_CDE_STATUS.ADM_CDE_STATUS_ID INNER JOIN
                      ED_ACAD_YEAR ON ADM_APPLICANT.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
	
	WHERE (@EdAcadYearId = 0 OR @EdAcadYearId IS NULL OR ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
	and (@EdCodeSemesterId = 0 OR @EdCodeSemesterId IS NULL OR  ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
   --commented by dalia and will be redesign in the page will remove the part of dropdown of faculty
   --Remove Commented According To Helioples Till We Know what we do With Bahrain 
	and (@EntMainId = 0 OR @EntMainId IS NULL OR  ADM_APPLICANT.ENT_MAIN_ID = @EntMainId) -- Faculty / Program
	and (@SearchText = '' OR @SearchText is null or ADM_APPLICANT.FULL_NAME_EN like '%'+@SearchText+'%'  or ADM_APPLICANT.ADM_APP_CODE like '%'+@SearchText+'%')
	and (@Gender = 0 OR @Gender is null or ADM_APPLICANT.GS_CODE_GENDER_ID = @Gender) -- Gender
	and ((@AgeOperator like 0 OR @AgeOperator is null) and (@Age = 0 OR @Age is null) or (@AgeOperator like '=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) = @Age)    -- Age = @Age
												 or (@AgeOperator like '>=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) >= @Age)  -- Age >= @Age
												 or (@AgeOperator like '<=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <= @Age)  -- Age <= @Age
										 or (@AgeOperator like '!=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <> @Age)) -- Age != @Age
	and (@Nationality = 0 OR @Nationality is null or ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = @Nationality or ADM_APPLICANT.GS_COUNTRY_INFO_ID_2 = @Nationality ) -- Nationality 1,2
	and (@ID = '0' OR @ID is null or cast(ADM_APPLICANT.IDENT_NUM as nvarchar(16)) = @ID) -- IDENTITY Number
	and (@AdmStatus = 0 OR @AdmStatus is null or ADM_APPLICANT.ADM_CDE_STATUS_ID = @AdmStatus) -- ADM Status
    and (@AdmCdeAppType = 0 OR @AdmCdeAppType is null or ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = @AdmCdeAppType) -- ADM Type
   and  (@ASCODEDEGREECLASSID = 0 OR @ASCODEDEGREECLASSID is null or ADM_APPLICANT.AS_CODE_DEGREE_CLASS_ID = @ASCODEDEGREECLASSID) --Code Degree
                                      
end
else
begin
	SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.FULL_NAME_AR, ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.ED_STUD_ID, 
                      ENTITY_MAIN.ENT_DESCR_AR, ADM_CDE_STATUS.DESCR_AR as ADM_STATUS_DESCR_AR, cast(ADM_APPLICANT.IDENT_NUM as nvarchar(16)) as IDENT_NUM, ED_ACAD_YEAR.DESCR_AR AS ACAD_YEAR_DESCR_AR,ADM_APPLICANT.ADM_APP_CODE,ADM_APPLICANT.GS_COUNTRY_INFO_ID_1
	FROM         ADM_APPLICANT left outer JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_CDE_STATUS ON ADM_APPLICANT.ADM_CDE_STATUS_ID = ADM_CDE_STATUS.ADM_CDE_STATUS_ID INNER JOIN
                      ED_ACAD_YEAR ON ADM_APPLICANT.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
	WHERE (@EdAcadYearId = 0 OR @EdAcadYearId IS NULL OR ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
	and (@EdCodeSemesterId = 0 OR @EdCodeSemesterId IS NULL OR  ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
  --commented by dalia and will be redesign in the page will remove the part of dropdown of faculty
  --Remove Commented Because helioblise use faculty till we know what we will do with bahrain
	and (@EntMainId = 0 OR @EntMainId IS NULL OR  ADM_APPLICANT.ENT_MAIN_ID = @EntMainId) -- Faculty / Program
	and (@SearchText = '' OR @SearchText is null  or ADM_APPLICANT.FULL_NAME_AR like '%'+@SearchText+'%' or ADM_APPLICANT.ADM_APP_CODE like '%'+@SearchText+'%')
	and (@Gender = 0 OR @Gender is null or ADM_APPLICANT.GS_CODE_GENDER_ID = @Gender) -- Gender
	and ((@AgeOperator like 0 OR @AgeOperator is null) and (@Age = 0 OR @Age is null) or (@AgeOperator like '=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) = @Age)    -- Age = @Age
										 or (@AgeOperator like '>=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) >= @Age)  -- Age >= @Age
											 or (@AgeOperator like '<=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <= @Age)  -- Age <= @Age
											 or (@AgeOperator like '!=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <> @Age)) -- Age != @Age
	and (@Nationality = 0 OR @Nationality is null or ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = @Nationality or ADM_APPLICANT.GS_COUNTRY_INFO_ID_2 = @Nationality ) -- Nationality 1,2
	and (@ID = '0' OR @ID is null or cast(ADM_APPLICANT.IDENT_NUM as nvarchar(16))  = @ID) -- IDENTITY Number
	and (@AdmStatus = 0 OR @AdmStatus is null or ADM_APPLICANT.ADM_CDE_STATUS_ID = @AdmStatus) -- ADM Status
    and (@AdmCdeAppType = 0 OR @AdmCdeAppType is null or ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = @AdmCdeAppType) -- ADM Type
   and  (@ASCODEDEGREECLASSID = 0 OR @ASCODEDEGREECLASSID is null or ADM_APPLICANT.AS_CODE_DEGREE_CLASS_ID = @ASCODEDEGREECLASSID) --Code Degree
end
						
        ]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ADM_APPLICANT_SearchForExamDate" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SearchText" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@Gender" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Age" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AgeOperator" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@Nationality" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ID" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@AdmStatus" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmCdeAppType" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AppDateFrom" type="datetime" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AppDateTo" type="datetime" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
if(@Lang = 2)
begin
	SELECT   distinct  ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.FULL_NAME_EN, ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.ED_STUD_ID, 
                      ENTITY_MAIN.ENT_DESCR_EN, ADM_CDE_STATUS.DESCR_EN AS ADM_STATUS_DESCR_EN, ADM_APPLICANT.IDENT_NUM, 
                      ED_ACAD_YEAR.DESCR_EN AS ACAD_YEAR_DESCR_EN,ADM_APPLICANT.APP_DATE
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_CDE_STATUS ON ADM_APPLICANT.ADM_CDE_STATUS_ID = ADM_CDE_STATUS.ADM_CDE_STATUS_ID INNER JOIN
                      ED_ACAD_YEAR ON ADM_APPLICANT.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID left outer JOIN
                      ADM_APP_PLACEMENT_EXAM ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID
	where (ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
	and (ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
	and (@AdmCdePlacementExamId is null or (ADM_APP_PLACEMENT_EXAM.EXAM_DATE is null and ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId))
	and (@EntMainId is null or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId) -- Faculty / Program
	and (@SearchText is null or ADM_APPLICANT.FULL_NAME_EN like '%'+@SearchText+'%')
	and (@Gender is null or ADM_APPLICANT.GS_CODE_GENDER_ID = @Gender) -- Gender
	and ((@AgeOperator is null and @Age is null) or (@AgeOperator = '=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) = @Age)    -- Age = @Age
												 or (@AgeOperator = '>=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) >= @Age)  -- Age >= @Age
												 or (@AgeOperator = '<=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <= @Age)  -- Age <= @Age
												 or (@AgeOperator = '!=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <> @Age)) -- Age != @Age
	and (@Nationality is null or ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = @Nationality or ADM_APPLICANT.GS_COUNTRY_INFO_ID_2 = @Nationality ) -- Nationality 1,2
	and (@ID is null or ADM_APPLICANT.IDENT_NUM = @ID) -- IDENTITY Number
	and (@AdmStatus is null or ADM_APPLICANT.ADM_CDE_STATUS_ID = @AdmStatus) -- ADM Status
  and (@AdmCdeAppType is null or ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = @AdmCdeAppType) -- ADM Type
  and ((@AppDateFrom is null and @AppDateTo is null) or (@AppDateFrom = '1/1/1900' and @AppDateTo = '1/1/1900') or (ADM_APPLICANT.APP_DATE >= @AppDateFrom and ADM_APPLICANT.APP_DATE <= @AppDateTo)) -- App Date between from and to dates
  
end
else
begin
	SELECT   distinct  ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.FULL_NAME_AR, ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.ED_STUD_ID, 
                      ENTITY_MAIN.ENT_DESCR_AR, ADM_CDE_STATUS.DESCR_AR AS ADM_STATUS_DESCR_AR, ADM_APPLICANT.IDENT_NUM, 
                      ED_ACAD_YEAR.DESCR_AR AS ACAD_YEAR_DESCR_AR
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_CDE_STATUS ON ADM_APPLICANT.ADM_CDE_STATUS_ID = ADM_CDE_STATUS.ADM_CDE_STATUS_ID INNER JOIN
                      ED_ACAD_YEAR ON ADM_APPLICANT.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID left outer JOIN
                      ADM_APP_PLACEMENT_EXAM ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID
	where (ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
	and (ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
	and (@AdmCdePlacementExamId is null or (ADM_APP_PLACEMENT_EXAM.EXAM_DATE is null and ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId))
	and (@EntMainId is null or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId) -- Faculty / Program
	and (@SearchText is null or ADM_APPLICANT.FULL_NAME_AR like '%'+@SearchText+'%')
	and (@Gender is null or ADM_APPLICANT.GS_CODE_GENDER_ID = @Gender) -- Gender
	and ((@AgeOperator is null and @Age is null) or (@AgeOperator = '=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) = @Age)    -- Age = @Age
												 or (@AgeOperator = '>=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) >= @Age)  -- Age >= @Age
												 or (@AgeOperator = '<=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <= @Age)  -- Age <= @Age
												 or (@AgeOperator = '!=' and DATEDIFF(yyyy, ADM_APPLICANT.BIRTH_DATE, GETDATE()) <> @Age)) -- Age != @Age
	and (@Nationality is null or ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = @Nationality or ADM_APPLICANT.GS_COUNTRY_INFO_ID_2 = @Nationality ) -- Nationality 1,2
	and (@ID is null or ADM_APPLICANT.IDENT_NUM = @ID) -- IDENTITY Number
	and (@AdmStatus is null or ADM_APPLICANT.ADM_CDE_STATUS_ID = @AdmStatus) -- ADM Status
  and (@AdmCdeAppType is null or ADM_APPLICANT.ADM_CDE_APP_TYPE_ID = @AdmCdeAppType) -- ADM Type
  and ((@AppDateFrom is null and @AppDateTo is null) or (@AppDateFrom = '1/1/1900' and @AppDateTo = '1/1/1900') or (ADM_APPLICANT.APP_DATE >= @AppDateFrom and ADM_APPLICANT.APP_DATE <= @AppDateTo)) -- App Date between from and to dates
end
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_WithTranser_Search" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmStatus" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
          if(@Lang = 2)
          begin
	          SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.FULL_NAME_EN, ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.ED_STUD_ID, 
                                ENTITY_MAIN.ENT_DESCR_EN, ADM_CDE_STATUS.DESCR_EN AS ADM_STATUS_DESCR_EN, ADM_APPLICANT.IDENT_NUM, 
                                ED_ACAD_YEAR.DESCR_EN AS ACAD_YEAR_DESCR_EN, ADM_APP_TRANS_REQ.REQ_DATE
           FROM         ADM_APPLICANT INNER JOIN
                                ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                                ADM_CDE_STATUS ON ADM_APPLICANT.ADM_CDE_STATUS_ID = ADM_CDE_STATUS.ADM_CDE_STATUS_ID INNER JOIN
                                ED_ACAD_YEAR ON ADM_APPLICANT.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID LEFT OUTER JOIN
                                ADM_APP_TRANS_REQ ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_TRANS_REQ.ADM_APPLICANT_ID
                                

	          where (ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
	          and (ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
	          and (@EntMainId =0 or @EntMainId is null or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId) -- Faculty / Program
	          and (@AdmStatus =0 or @AdmStatus is null or ADM_APPLICANT.ADM_CDE_STATUS_ID = @AdmStatus) -- ADM Status
             and (ADM_APPLICANT.ADM_CDE_APP_TYPE_ID =2) -- ADM Type
          end
          else
          begin
	          SELECT     ADM_APPLICANT.ADM_APPLICANT_ID, ADM_APPLICANT.FULL_NAME_AR, ADM_APPLICANT.BIRTH_DATE, ADM_APPLICANT.ED_STUD_ID, 
                                ENTITY_MAIN.ENT_DESCR_AR, ADM_CDE_STATUS.DESCR_AR as ADM_STATUS_DESCR_AR,
                                ADM_APPLICANT.IDENT_NUM, ED_ACAD_YEAR.DESCR_AR AS ACAD_YEAR_DESCR_AR,ADM_APP_TRANS_REQ.REQ_DATE
	          FROM         ADM_APPLICANT INNER JOIN
                                ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                                ADM_CDE_STATUS ON ADM_APPLICANT.ADM_CDE_STATUS_ID = ADM_CDE_STATUS.ADM_CDE_STATUS_ID INNER JOIN
                                ED_ACAD_YEAR ON ADM_APPLICANT.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID LEFT OUTER JOIN
                                ADM_APP_TRANS_REQ ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_TRANS_REQ.ADM_APPLICANT_ID
	          where (ADM_APPLICANT.ED_ACAD_YEAR_ID = @EdAcadYearId)
	          and (ADM_APPLICANT.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
	          and (@EntMainId =0 or @EntMainId is null or ADM_APPLICANT.ENT_MAIN_ID = @EntMainId) -- Faculty / Program
          	
	          and (@AdmStatus =0 or @AdmStatus is null or ADM_APPLICANT.ADM_CDE_STATUS_ID = @AdmStatus) -- ADM Status
            and (ADM_APPLICANT.ADM_CDE_APP_TYPE_ID =2) -- ADM Type
          end
          									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetReqDocs" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ADM_REQ_DOC.ADM_REQ_DOC_ID, ADM_REQ_DOC.DESCR_AR, ADM_REQ_DOC.DESCR_EN
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_REQ_DOC ON ENTITY_MAIN.ENT_MAIN_ID = ADM_REQ_DOC.ENT_MAIN_ID
where ADM_APPLICANT.ADM_APPLICANT_ID = @AdmApplicantId
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetPlacementExam" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID, ADM_CDE_PLACEMENT_EXAM.DESCR_AR, ADM_CDE_PLACEMENT_EXAM.DESCR_EN
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_CDE_PLACEMENT_EXAM ON ENTITY_MAIN.ENT_MAIN_ID = ADM_CDE_PLACEMENT_EXAM.ENT_MAIN_ID
where ADM_APPLICANT.ADM_APPLICANT_ID = @AdmApplicantId
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetRemainReqDocs" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ADM_REQ_DOC.ADM_REQ_DOC_ID, ADM_REQ_DOC.DESCR_AR, ADM_REQ_DOC.DESCR_EN
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_REQ_DOC ON ENTITY_MAIN.ENT_MAIN_ID = ADM_REQ_DOC.ENT_MAIN_ID
where ADM_APPLICANT.ADM_APPLICANT_ID = @AdmApplicantId
and ADM_REQ_DOC.ADM_REQ_DOC_ID not in 
(
SELECT     ADM_APP_DOC.ADM_REQ_DOC_ID
FROM         ADM_APPLICANT INNER JOIN
                      ADM_APP_DOC ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_DOC.ADM_APPLICANT_ID
where ADM_APPLICANT.ADM_APPLICANT_ID = @AdmApplicantId
)
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetRemainPlacementExam" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID, ADM_CDE_PLACEMENT_EXAM.DESCR_AR, ADM_CDE_PLACEMENT_EXAM.DESCR_EN
                      
FROM         ADM_APPLICANT INNER JOIN
                      ENTITY_MAIN ON ADM_APPLICANT.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ADM_CDE_PLACEMENT_EXAM ON ENTITY_MAIN.ENT_MAIN_ID = ADM_CDE_PLACEMENT_EXAM.ENT_MAIN_ID
where ADM_APPLICANT.ADM_APPLICANT_ID = @AdmApplicantId
and ADM_CDE_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID not in 
(
SELECT     ADM_APP_PLACEMENT_EXAM.ADM_CDE_PLACEMENT_EXAM_ID
FROM         ADM_APPLICANT INNER JOIN
                      ADM_APP_PLACEMENT_EXAM ON ADM_APPLICANT.ADM_APPLICANT_ID = ADM_APP_PLACEMENT_EXAM.ADM_APPLICANT_ID
where ADM_APPLICANT.ADM_APPLICANT_ID = @AdmApplicantId
)
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GsContactMethodHInsertIdOut" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GS_CONTACT_METHOD_H table
-- Table Comment: جدول مجموعة وسائل اتصال بجهة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsContactMethodHId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@HeaderDescrAr" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@HeaderDescrEn" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxGsContactMethodHId numeric(9,0)
        select  @MaxGsContactMethodHId =max(GS_CONTACT_METHOD_H_ID)from GS_CONTACT_METHOD_H;
         if( @MaxGsContactMethodHId is null)
            set  @MaxGsContactMethodHId=0;
            
          set  @MaxGsContactMethodHId= @MaxGsContactMethodHId+1;  
          
        
				INSERT INTO [dbo].[GS_CONTACT_METHOD_H]
					(
					[GS_CONTACT_METHOD_H_ID]
					,[HEADER_DESCR_AR]
					,[HEADER_DESCR_EN]
					)
				VALUES
					(
					@MaxGsContactMethodHId
					,@HeaderDescrAr
					,@HeaderDescrEn
					)
				
							set @GsContactMethodHId=@MaxGsContactMethodHId;
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetCourseExamPlaces">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_EXAM_SCHDL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        if(@AsFacultyInfoId=0)
        set @AsFacultyInfoId = NULL
select t1.*,t2.Studs from
(
SELECT     ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID, CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID, ED_EXAM_SCHDL.ED_COURSE_ID, SC_BUILDING.DESCR_AR AS BUILDING_DESCR_AR, 
                      SC_BUILDING.DESCR_EN AS BUILDING_DESCR_EN, SC_HALL.DESCR_AR AS HALL_DESCR_AR, SC_HALL.DESCR_EN AS HALL_DESCR_EN, 
                      CO_EXAM_SCHDL_PLACE.STUD_COUNT,ED_EXAM_SCHDL.EXAM_DATE
FROM         ED_EXAM_SCHDL INNER JOIN
                      CO_EXAM_SCHDL_PLACE ON ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID INNER JOIN
                      SC_BUILDING ON CO_EXAM_SCHDL_PLACE.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      SC_HALL ON CO_EXAM_SCHDL_PLACE.SC_HALL_ID = SC_HALL.SC_HALL_ID
WHERE     (ED_EXAM_SCHDL.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND (ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (ED_EXAM_SCHDL.ED_COURSE_ID = @EdCourseId)
 ) as t1
 left outer join
 (                     
SELECT     CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID, COUNT(ED_STUD_SEMESTER.ED_STUD_ID) AS Studs
FROM         CO_EXAM_PLACE_STUD INNER JOIN
                      ED_STUD_SEMESTER ON CO_EXAM_PLACE_STUD.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                      and ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId
                      and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1
GROUP BY CO_EXAM_PLACE_STUD.CO_EXAM_SCHDL_PLACE_ID
) as t2
on t1.CO_EXAM_SCHDL_PLACE_ID = t2.CO_EXAM_SCHDL_PLACE_ID
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudExamSchedule">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_EXAM_SCHDL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				select 
				ED_EXAM_SCHDL.EXAM_DATE ,
		        ED_EXAM_SCHDL.FROM_TIME ,
				ED_EXAM_SCHDL.TO_TIME ,
				ED_COURSE.COURSE_CODE,
				ED_COURSE.COURSE_DESCR_AR,
				ED_COURSE.COURSE_DESCR_EN,
				DATENAME(dw, ED_EXAM_SCHDL.EXAM_DATE) as DayDescrEn,
				(select GS_CODE_WEEK_DAY.DESCR_AR from GS_CODE_WEEK_DAY where DATENAME(dw, ED_EXAM_SCHDL.EXAM_DATE)=GS_CODE_WEEK_DAY.DESCR_EN) as DayDescrAr,
        Datediff(mi,FROM_TIME,TO_TIME)/60 as Hours,
        Datediff(mi,FROM_TIME,TO_TIME)%60 as Minutes


		    from ED_EXAM_SCHDL inner join ED_COURSE on ED_COURSE.ED_COURSE_ID=ED_EXAM_SCHDL.ED_COURSE_ID
		    inner join ED_STUD_COURSE_REG on ED_STUD_COURSE_REG.ED_COURSE_ID=ED_COURSE.ED_COURSE_ID
		    inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID

		    where ED_EXAM_SCHDL.ED_ACAD_YEAR_ID=@EdAcadYearId
		    and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
		    and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
		    and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
		    and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
		    and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="EdExamSchdlInsertWithIdOut" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_EXAM_SCHDL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdExamSchdlId" type="numeric" direction="Output" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ExamDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@FromTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxEdExamSchdlId numeric(6,0)
        select  @MaxEdExamSchdlId =max(ED_EXAM_SCHDL_ID)from ED_EXAM_SCHDL;
         if( @MaxEdExamSchdlId is null)
            set  @MaxEdExamSchdlId=0;
            
          set  @MaxEdExamSchdlId= @MaxEdExamSchdlId+1;  
          
        
				INSERT INTO [dbo].[ED_EXAM_SCHDL]
					(
					[ED_EXAM_SCHDL_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[ED_CODE_COURSE_ASSESS_ID]
					,[ED_COURSE_ID]
					,[EXAM_DATE]
					,[FROM_TIME]
					,[TO_TIME]
					,[NOTES]
					)
				VALUES
					(
					@MaxEdExamSchdlId
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@EdCodeCourseAssessId
					,@EdCourseId
					,@ExamDate
					,@FromTime
					,@ToTime
					,@Notes
					)
				
					set @EdExamSchdlId=	@MaxEdExamSchdlId;
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_REG_Login">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_REG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@Password" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
select ADM_APPLICANT.* from ADM_APPLICANT 
where ADM_APPLICANT.USERNAME = @EMail
and ADM_APPLICANT.PASSWORD_HASH = @Password
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_REG_GetProcessFlags">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_REG table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ADM_APP_REG_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
declare @BD int = 0,
		@CD int = 0,
		@AD int = 0,
		@PD int = 0,
		@QD int = 0,
		@RD int = 0;

-- Get Basic Data Flag
SELECT    @BD = COUNT(ADM_APPLICANT.ADM_APPLICANT_ID)
FROM         ADM_APPLICANT
where ADM_APPLICANT.ADM_APP_REG_ID = @ADM_APP_REG_ID
	and ADM_APPLICANT.ENT_MAIN_ID is not null
	and ADM_APPLICANT.APP_DATE is not null
	and ADM_APPLICANT.ED_ACAD_YEAR_ID is not null
	and ADM_APPLICANT.ED_CODE_SEMESTER_ID is not null
	and ADM_APPLICANT.ADM_CDE_STATUS_ID is not null
	and ADM_APPLICANT.IDENT_NUM is not null
	and ADM_APPLICANT.GS_CODE_IDENT_TYPE_ID is not null
	and ADM_APPLICANT.GS_CODE_GENDER_ID is not null
	and ADM_APPLICANT.GS_CDE_MARITAL_STATUS_ID is not null
	and ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 is not null
	and ADM_APPLICANT.HOSTEL_FLG is not null
  and ADM_APPLICANT.SECONDARY_SCHL_NAME is not null
  and ADM_APPLICANT.ADM_CDE_CERT_TYPE_ID is not null
  and ADM_APPLICANT.CERTF_DATE is not null
 -- and ADM_APPLICANT.STUDY_LANGUAGE is not null
  and ADM_APPLICANT.CERTF_DEGREE is not null
  and ADM_APPLICANT.CERTF_PERCENT is not null
	and ADM_APPLICANT.DOC_RCVD_FLG is not null
	and ADM_APPLICANT.FEES_PAYED_FLG is not null
	and ADM_APPLICANT.WORK_FLG is not null;

if(@BD > 0)
begin

declare @ADM_APPLICANT_ID int;
SELECT    @ADM_APPLICANT_ID = ADM_APPLICANT.ADM_APPLICANT_ID
FROM         ADM_APPLICANT
where ADM_APPLICANT.ADM_APP_REG_ID = @ADM_APP_REG_ID;

-- Get Contact Data Flag
SELECT    @CD = COUNT(ADM_APP_CONTACT.ADM_APP_CONTACT_ID)
FROM         ADM_APP_CONTACT
where ADM_APP_CONTACT.ADM_APPLICANT_ID= @ADM_APPLICANT_ID;

-- Get Address Data Flag

-- Get Parents Data Flag
SELECT    @PD = COUNT(ADM_APP_GUARDIAN.ADM_APP_GUARDIAN_ID)
FROM         ADM_APP_GUARDIAN
where ADM_APP_GUARDIAN.ADM_APPLICANT_ID= @ADM_APPLICANT_ID;

-- Get Qualifications Data Flag
SELECT    @QD = COUNT(ADM_PRV_HIGHER_EDU.ADM_PRV_HIGHER_EDU_ID)
FROM         ADM_PRV_HIGHER_EDU
where ADM_PRV_HIGHER_EDU.ADM_APPLICANT_ID= @ADM_APPLICANT_ID;

-- Get Recommendation Letters Data Flag
SELECT    @RD = COUNT(ADM_APP_LTR_RECOM.ADM_APP_LTR_RECOM_ID)
FROM         ADM_APP_LTR_RECOM
where ADM_APP_LTR_RECOM.ADM_APPLICANT_ID= @ADM_APPLICANT_ID;

-- Final Result
select  @ADM_APP_REG_ID as ADM_APP_REG_ID,
		@BD as Basic_Data,
		@CD as Contact_Data,
		@AD as Address_Data,
		@PD as Parents_Data,
		@QD as Qualification_Data,
		@RD as RecomendationLetter_Data;
end
else
begin
-- Final Result
select  @ADM_APP_REG_ID as ADM_APP_REG_ID,
		@BD as Basic_Data,
		@CD as Contact_Data,
		@AD as Address_Data,
		@PD as Parents_Data,
		@QD as Qualification_Data,
		@RD as RecomendationLetter_Data;
end
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GRANT_TEMP_GetTempGrantStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_GRANT_TEMP table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@Degree_EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
        If(@Degree_EntMainId =0)
          Begin
             SELECT DISTINCT 
                      ED_STUD_GRANT_TEMP.ED_STUD_ID, 
                      ED_STUD.FULL_NAME_AR, 
                      ED_STUD.FULL_NAME_EN, 
                      --ED_STUD_SEMESTER.ACCUM_GPA, 
                      ED_STUD_GRANT_TEMP.ED_STUD_GRANT_TEMP_ID, 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                      GS_COUNTRY_INFO.DESCR_AR as NATIONALITY_DESCR_AR, 
                      GS_COUNTRY_INFO.DESCR_EN as NATIONALITY_DESCR_EN, 
                      ED_STUD_FACULTY.ACCUM_TOT_DEGREE as ACCUM_GPA, 
                      ED_CODE_GRADING.DESCR_AR AS GRADING_DESCR_AR, 
                      ED_CODE_GRADING.DESCR_EN AS GRADING_DESCR_EN
FROM         ED_STUD_GRANT_TEMP INNER JOIN
                      ED_STUD ON ED_STUD_GRANT_TEMP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID left outer JOIN
                      ED_CODE_GRADING ON ED_STUD_FACULTY.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID
                 WHERE     (ED_STUD_GRANT_TEMP.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND
                      (ED_STUD_GRANT_TEMP.IS_APPROVED = 0) AND (ED_STUD_SEMESTER.IS_LAST = 1)AND
                       (ED_STUD_GRANT_TEMP.ENT_MAIN_ID in(select ent_main_id from entity_main where
                       entity_main.AS_FACULTY_INFO_ID=@AsFacultyInfoId and ENT_CODE_ENTITY_TYPE_ID=15)) ;
          End
        Else  
          Begin
            	SELECT DISTINCT 
                      ED_STUD_GRANT_TEMP.ED_STUD_ID, 
                      ED_STUD.FULL_NAME_AR, 
                      ED_STUD.FULL_NAME_EN, 
                      --ED_STUD_SEMESTER.ACCUM_GPA, 
                      ED_STUD_GRANT_TEMP.ED_STUD_GRANT_TEMP_ID, 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                      GS_COUNTRY_INFO.DESCR_AR as NATIONALITY_DESCR_AR, 
                      GS_COUNTRY_INFO.DESCR_EN as NATIONALITY_DESCR_EN, 
                      ED_STUD_FACULTY.ACCUM_TOT_DEGREE as ACCUM_GPA, 
                      ED_CODE_GRADING.DESCR_AR AS GRADING_DESCR_AR, 
                      ED_CODE_GRADING.DESCR_EN AS GRADING_DESCR_EN
FROM         ED_STUD_GRANT_TEMP INNER JOIN
                      ED_STUD ON ED_STUD_GRANT_TEMP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      GS_COUNTRY_INFO ON ED_STUD.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID left outer JOIN
                      ED_CODE_GRADING ON ED_STUD_FACULTY.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID
                 WHERE     (ED_STUD_GRANT_TEMP.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND (ED_STUD_GRANT_TEMP.ENT_MAIN_ID = @Degree_EntMainId) AND 
                      (ED_STUD_GRANT_TEMP.IS_APPROVED = 0) AND (ED_STUD_SEMESTER.IS_LAST = 1);
          End

  		]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GRANT_TEMP_DeleteTempGrantStuds">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_GRANT_TEMP table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@Degree_EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				delete from 
ED_STUD_GRANT_TEMP
where ED_STUD_GRANT_TEMP.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_GRANT_TEMP.ENT_MAIN_ID = @Degree_EntMainId
and ED_STUD_GRANT_TEMP.IS_APPROVED = 0
  		]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_CODE_ITEM_GetByPgFlag">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_CODE_ITEM table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@PgFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FEE_CODE_ITEM_ID],
					[FEE_CODE_TYPE_ID],
					[DESCR_AR],
					[DESCR_EN],
					[PG_FLAG]
				FROM
					[dbo].[FEE_CODE_ITEM]
				WHERE
					[PG_FLAG] = @PgFlag
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudValidDiscCodes">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_CDE_DISC_TYPE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[FEE_CDE_DISC_TYPE_ID],
					[DESCR_AR],
					[DESCR_EN],
					[DISC_PRCNT],
					[STOP_FLG]
          --,
					--[CONTINUE_FLG]
				FROM
					[dbo].[FEE_CDE_DISC_TYPE]
          
				where 
        FEE_CDE_DISC_TYPE.FEE_CDE_DISC_TYPE_ID not in 
       (select FEE_CDE_DISC_TYPE_ID from FEE_STUD_DISC where FEE_STUD_DISC.ED_STUD_ID=@EdStudId and FEE_STUD_DISC.STOP_FLG!=1 )

				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_GetByEdCodeSemesterId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_STUD_DISC table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FEE_STUD_DISC_ID],
					[DISC_REQ_DATE],
					[AS_FACULTY_INFO_ID],
					[ED_STUD_ID],
					[ED_ACAD_YEAR_ID],
					--[ED_CODE_SEMESTER_ID],
					--[BROTHER_ED_STUD_ID],
					[FEE_CDE_DISC_TYPE_ID],
					[DISC_PERCENT],
          STOP_FLG,
					--[START_DATE],
					--[END_DATE],
					--[CONT_FLG],
					[GS_CODE_REQ_STATUS_ID],
          UPDATED_PERCENT,
          LAST_UPDATED
				FROM
					[dbo].[FEE_STUD_DISC]
				WHERE
					[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_GetByEdStudId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_STUD_DISC table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[FEE_STUD_DISC].[FEE_STUD_DISC_ID],
					[dbo].[FEE_STUD_DISC].[DISC_REQ_DATE],
					[dbo].[FEE_STUD_DISC].[AS_FACULTY_INFO_ID],
					[dbo].[FEE_STUD_DISC].[ED_STUD_ID],
					[dbo].[FEE_STUD_DISC].[ED_ACAD_YEAR_ID],
					[dbo].[FEE_STUD_DISC].[FEE_CDE_DISC_TYPE_ID],
					[dbo].[FEE_STUD_DISC].[DISC_PERCENT],
          [dbo].[FEE_STUD_DISC].STOP_FLG,
					[dbo].[FEE_STUD_DISC].[GS_CODE_REQ_STATUS_ID],
          [dbo].[FEE_STUD_DISC].UPDATED_PERCENT,
          [dbo].[FEE_STUD_DISC].LAST_UPDATED,
          (select sum (UPDATED_PERCENT)  FROM [dbo].[FEE_STUD_DISC] WHERE [ED_STUD_ID] = @EdStudId and STOP_FLG=0
           and AS_FACULTY_INFO_ID=AS_FACULTY_INFO_ID) as SUM_UPDATED_PERCENT,
           ED_ACAD_YEAR.DESCR_AR,
           ED_ACAD_YEAR.DESCR_EN
          
				FROM
					[dbo].[FEE_STUD_DISC] left outer join ED_ACAD_YEAR on ED_ACAD_YEAR.ED_ACAD_YEAR_ID=[dbo].[FEE_STUD_DISC].ED_ACAD_YEAR_ID
				WHERE
					[dbo].[FEE_STUD_DISC].[ED_STUD_ID] = @EdStudId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetNotApprovedResultCoursesCount">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FEE_STUD_DISC table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSem" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYear" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				SELECT    COUNT( ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID) Not_Appreoved_Courses
FROM         ED_OFFERING INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ENTITY_MAIN ON ED_OFFERING.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 3
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSem
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYear
and ED_OFFERING_COURSE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_OFFERING_COURSE.IS_RESULT_APPROVED <> 1

				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="LoadStudFees">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FEE_COURSE_EXP table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@ForgeinFlag" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
BEGIN
	DECLARE @AsFacultyInfoId NUMERIC(9,0)
	DECLARE @LocalGsCountryInfoId NUMERIC(9,0)
	DECLARE @EdCodeSemesterTypeId NUMERIC(9,0) 

	IF @EdCodeLevelId = 0
		SET @EdCodeLevelId = NULL

	-- get faculty info id
	SELECT @AsFacultyInfoId = AS_FACULTY_INFO_id FROM ENTITY_MAIN WHERE ENT_MAIN_ID = @EntityMainId
	--print '@AsFacultyInfoId = ' + convert(nvarchar(50), @AsFacultyInfoId);
	
	-- get GsCountryInfoId
	SELECT @LocalGsCountryInfoId = GS_COUNTRY_INFO_ID 
	FROM GS_COUNTRY_INFO INNER JOIN GS_COUNTRY_NODE ON GS_COUNTRY_INFO.GS_COUNTRY_NODE_ID=GS_COUNTRY_NODE.GS_COUNTRY_NODE_ID
    WHERE GS_COUNTRY_NODE.IS_NODE_LOCAL=1
    --print '@LocalGsCountryInfoId = ' + convert(nvarchar(50), isnull(@LocalGsCountryInfoId, 0));
   	
   	-- get semester type id
   	SELECT @EdCodeSemesterTypeId = ED_CODE_SEMESTER_TYPE_ID FROM ED_CODE_SEMESTER WHERE ED_CODE_SEMESTER_ID=@EdCodeSemesterId
   	--print '@EdCodeSemesterTypeId = ' + convert(nvarchar(50), @EdCodeSemesterTypeId);
   	
   	-- get start date and end date of acadymic year
    DECLARE @StartDate datetime
    DECLARE @EndDate datetime  
    SELECT @StartDate = [START_DATE], @EndDate = [END_DATE] 
    FROM ED_ACAD_YEAR_FACULTY 
    WHERE AS_FACULTY_INFO_ID=@AsFacultyInfoId and ED_ACAD_YEAR_ID=@EdAcadYearId
    
    --print '@StartDate = ' + convert(nvarchar(50), @StartDate) + ', @EndDate = ' + convert(nvarchar(50), @EndDate);
	
	CREATE TABLE #APPLAYED_STUDENTS(STUD_ID NUMERIC(9,0),gs_country_info_id NUMERIC(9,0),ed_code_level_id NUMERIC(9,0), STUD_FACULTY_CODE NVARCHAR(30))
	CREATE TABLE #INVALID_STUDENTS(StudNameEn nvarchar(150) ,StudNameAr nvarchar(150),InValidReason nvarchar(150),SucessInserted int,FaildInserted int,TotalStudNo int, StudCode nvarchar(30))
   
	INSERT INTO #APPLAYED_STUDENTS
	SELECT ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD.GS_COUNTRY_INFO_ID_1,ED_STUD_SEMESTER.ED_CODE_LEVEL_ID, ED_STUD_FACULTY.STUD_FACULTY_CODE
	FROM ED_STUD_SEMESTER INNER JOIN ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
	     INNER JOIN ED_STUD_FACULTY ON (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID AND ED_STUD_FACULTY.AS_FACULTY_INFO_ID = ED_STUD_SEMESTER.AS_FACULTY_INFO_ID)
	WHERE ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	  AND ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	  AND (@EdCodeLevelId IS NULL OR ED_STUD_SEMESTER.ED_CODE_LEVEL_ID =@EdCodeLevelId) 
	  AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)  
	  AND (@ForgeinFlag =2 or (@ForgeinFlag =0 and  ED_STUD.GS_COUNTRY_INFO_ID_1 = @LocalGsCountryInfoId)or(@ForgeinFlag =1 and  ED_STUD.GS_COUNTRY_INFO_ID_1 != @LocalGsCountryInfoId))

	-- get number of applied student
	DECLARE @AppliedStudNo numeric(9,0)
	SELECT @AppliedStudNo = ISNULL(COUNT(*)  ,0) FROM #APPLAYED_STUDENTS 

	DECLARE @CursorEdStudId NUMERIC(9,0)
	DECLARE @CursorStudGsCountryInfoId NUMERIC(9,0)
	DECLARE @CursorEdCodeLevelId  NUMERIC(9,0)
	DECLARE @CursorFacultyRuleId NUMERIC(9,0)
	
	DECLARE @SucessInserted  int
	DECLARE @FaildInserted  int 
	DECLARE @AlreadyLoad int
	
	SET @FaildInserted = 0
	SET @SucessInserted = 0
	SET @AlreadyLoad = 0
	
	DECLARE @DiscountPrecent NUMERIC(9,2)
	DECLARE @EdAcadYearJoin  NUMERIC(9,0) -- not calculated
	
	DECLARE GENERAL_CONDS 
	CURSOR FOR SELECT STUD_ID, gs_country_info_id, ed_code_level_id 
	FROM #APPLAYED_STUDENTS 
	
	OPEN GENERAL_CONDS
	FETCH NEXT FROM GENERAL_CONDS INTO @CursorEdStudId,@CursorStudGsCountryInfoId,@CursorEdCodeLevelId
	WHILE(@@FETCH_STATUS <>  -1)
	BEGIN
		SET @CursorFacultyRuleId = NULL
		--print '@CursorEdStudId = ' + convert(nvarchar(10), @CursorEdStudId) + ', ' +
		--'@CursorStudGsCountryInfoId = ' + convert(nvarchar(10), @CursorStudGsCountryInfoId) + ', ' +
		--'@CursorEdCodeLevelId = ' + convert(nvarchar(10), @CursorEdCodeLevelId);
		--print '@EntityMainId :'
		--print @EntityMainId
    
		SELECT @CursorFacultyRuleId = FEE_FACULTY_RULE_ID 
		FROM FEE_FACULTY_RULE 
		WHERE ENT_MAIN_ID = @EntityMainId
		  AND FEE_CODE_TYPE_ID=1
		  AND ((@CursorStudGsCountryInfoId=@LocalGsCountryInfoId and FOREIGN_FLG=0)or (@CursorStudGsCountryInfoId!=@LocalGsCountryInfoId and FOREIGN_FLG=1) or FOREIGN_FLG=2)
		  --AND (@CursorEdCodeLevelId=ED_CODE_LEVEL_ID or  ED_CODE_LEVEL_ID is null)
      AND ED_CODE_LEVEL_ID is null
		  AND ((@EdCodeSemesterTypeId =ED_CODE_SEMESTER_TYPE_ID and  FEE_NATURE_FLG=1 )or
			  (@EdCodeSemesterTypeId =1 and FEE_NATURE_FLG=0 and   ED_CODE_SEMESTER_TYPE_ID is null))
		
		print @CursorFacultyRuleId
		
		IF @CursorFacultyRuleId is null
		BEGIN
			--print 'NoFeeFacultyRuleApplayedToStud, ED_STUD_ID = ' + convert(nvarchar(10), @CursorEdStudId);;
			SET @FaildInserted = @FaildInserted+1
			INSERT INTO #INVALID_STUDENTS(StudNameEn ,StudNameAr,InValidReason, StudCode)
			SELECT ED_STUD.FULL_NAME_EN,ED_STUD.FULL_NAME_AR,'NoFeeFacultyRuleApplayedToStud', ED_STUD_FACULTY.STUD_FACULTY_CODE
			FROM ED_STUD INNER JOIN ED_STUD_FACULTY ON (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID AND ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
			WHERE ED_STUD.ED_STUD_ID = @CursorEdStudId
		END 
		ELSE
		BEGIN
      SELECT @EdAcadYearJoin=ED_ACAD_YEAR_JOIN_ID FROM ED_STUD_FACULTY WHERE ED_STUD_ID=@CursorEdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId;
			IF NOT EXISTS (SELECT 1 FROM FEE_FACULTY_ITEM 
			               WHERE FEE_FACULTY_RULE_ID = @CursorFacultyRuleId
			               --AND FEE_FACULTY_ITEM.ADM_YEAR_FLG=0
				             AND (FEE_FACULTY_ITEM.NEW_COMER_FLG=0 or( FEE_FACULTY_ITEM.NEW_COMER_FLG=1 and @EdAcadYearId=@EdAcadYearJoin ))
				             --AND FEE_FACULTY_ITEM.[START_DATE]>=@StartDate AND FEE_FACULTY_ITEM.END_DATE<= @EndDate)
                     AND FEE_FACULTY_ITEM.[START_DATE] <= getdate() AND FEE_FACULTY_ITEM.END_DATE >= getdate())
			BEGIN
			   --print 'NoFeeFacultyItemToRule, FEE_FACULTY_RULE_ID = ' + convert(nvarchar(10), @CursorFacultyRuleId);
               SET @FaildInserted = @FaildInserted+1
	           INSERT INTO #INVALID_STUDENTS(StudNameEn ,StudNameAr,InValidReason, StudCode)
	           SELECT ED_STUD.FULL_NAME_EN,ED_STUD.FULL_NAME_AR,'NoFeeFacultyItemToRule', ED_STUD_FACULTY.STUD_FACULTY_CODE
	           FROM ED_STUD  INNER JOIN ED_STUD_FACULTY ON (ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID AND ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
	           WHERE ED_STUD.ED_STUD_ID = @CursorEdStudId
			END
			ELSE
			BEGIN
				IF EXISTS (SELECT 1 
				           FROM FEE_STUD_FEE_ITEM 
				           WHERE ED_ACAD_YEAR_ID=@EdAcadYearId 
				             AND ED_CODE_SEMESTER_ID=@EdCodeSemesterId and FEE_CODE_TYPE_ID=1 and  FEE_STUD_FEE_ITEM.ED_STUD_ID=@CursorEdStudId 
                             AND FEE_FACULTY_ITEM_ID in (select FEE_FACULTY_ITEM_ID from FEE_FACULTY_ITEM where FEE_FACULTY_RULE_ID=@CursorFacultyRuleId))
		        BEGIN
					--print 'AlreadyLoad, ED_STUD_ID = ' + convert(nvarchar(10), @CursorEdStudId);
					SET @AlreadyLoad = @AlreadyLoad + 1
				END 
				ELSE
				BEGIN
					--print 'Success inserted, ED_STUD_ID = ' + convert(nvarchar(10), @CursorEdStudId);
					DECLARE @GsCodeCurrency NUMERIC(9,0)
					SET @SucessInserted=@SucessInserted+1
					SELECT @GsCodeCurrency=GS_CODE_CURRENCY_ID FROM FEE_FACULTY_RULE WHERE FEE_FACULTY_RULE_ID= @CursorFacultyRuleId
					DECLARE @MaxFeeStudFeeItemId NUMERIC(9,0)
					SELECT @MaxFeeStudFeeItemId = ISNULL(MAX(FEE_STUD_FEE_ITEM_ID), 0) FROM FEE_STUD_FEE_ITEM;
          
					SET @DiscountPrecent=0
					SELECT @EdAcadYearJoin=ED_ACAD_YEAR_JOIN_ID FROM ED_STUD_FACULTY WHERE ED_STUD_ID=@CursorEdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId
					SELECT @DiscountPrecent = ISNULL(SUM(UPDATED_PERCENT), 0) FROM FEE_STUD_DISC WHERE ED_STUD_ID=@CursorEdStudId and STOP_FLG!=1--and LAST_UPDATED>=@StartDate and LAST_UPDATED<=@EndDate 
              
					--Insert Fee Item Not Related With Acad Year
					INSERT INTO FEE_STUD_FEE_ITEM
						  (FEE_STUD_FEE_ITEM_id,
						   AS_FACULTY_INFO_ID, 
						   ED_ACAD_YEAR_ID,
						   ED_CODE_SEMESTER_ID,
						   ED_STUD_ID,
						   FEE_CODE_TYPE_ID,
						   FEE_FACULTY_ITEM_ID, 
						   FEE_ITEM_VALUE,
						   REMAIN_AMOUNT,
						   GS_CODE_CURRENCY_ID,DISC_AMOUNT,FEE_CODE_ITEM_ID )
					SELECT @MaxFeeStudFeeItemId+ROW_NUMBER()over(order by (dbo.FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_id))as rownum ,
				           @AsFacultyInfoId,
						   @EdAcadYearId,
						   @EdCodeSemesterId, 
						   @CursorEdStudId,
						   1,
						   FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID, 
						   FEE_FACULTY_ITEM.FEE_ITEM_VALUE,
						   case @DiscountPrecent when 0 then FEE_FACULTY_ITEM.FEE_ITEM_VALUE else case DISC_FLG when 0 then FEE_FACULTY_ITEM.FEE_ITEM_VALUE else (FEE_FACULTY_ITEM.FEE_ITEM_VALUE-((FEE_FACULTY_ITEM.FEE_ITEM_VALUE*@DiscountPrecent)/100))end end ,
						   @GsCodeCurrency
						   ,case @DiscountPrecent when 0 then 0 else case DISC_FLG when 0 then 0 else ((FEE_FACULTY_ITEM.FEE_ITEM_VALUE*@DiscountPrecent)/100)end end
						   ,FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID
					FROM FEE_FACULTY_ITEM  
					WHERE FEE_FACULTY_ITEM.FEE_FACULTY_RULE_ID=@CursorFacultyRuleId
				      AND FEE_FACULTY_ITEM.ADM_YEAR_FLG=0
				      AND (FEE_FACULTY_ITEM.NEW_COMER_FLG=0 or( FEE_FACULTY_ITEM.NEW_COMER_FLG=1 and @EdAcadYearId=@EdAcadYearJoin ))
				      AND FEE_FACULTY_ITEM.[START_DATE]<=@StartDate and  FEE_FACULTY_ITEM.END_DATE>= @EndDate
					
					--Insert Fee Item  Related With Acad Year
					SELECT @MaxFeeStudFeeItemId =ISNULL(MAX(FEE_STUD_FEE_ITEM_ID), 0) from FEE_STUD_FEE_ITEM;
					INSERT INTO FEE_STUD_FEE_ITEM
						(FEE_STUD_FEE_ITEM_id,
						 AS_FACULTY_INFO_ID, 
						 ED_ACAD_YEAR_ID,
						 ED_CODE_SEMESTER_ID,
						 ED_STUD_ID,
						 FEE_CODE_TYPE_ID,
						 FEE_FACULTY_ITEM_ID, 
						 FEE_ITEM_VALUE,
						 REMAIN_AMOUNT,
						 GS_CODE_CURRENCY_ID,DISC_AMOUNT,FEE_CODE_ITEM_ID )
					SELECT @MaxFeeStudFeeItemId+ROW_NUMBER()over(order by (dbo.FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_id))as rownum ,
				           @AsFacultyInfoId,
						   @EdAcadYearId,
						   @EdCodeSemesterId, 
						   @CursorEdStudId,
						   1,
						   FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID, 
						   FEE_FAC_ITEM_ADM_YEAR.FEE_ITEM_VALUE,
						   case @DiscountPrecent when 0 then FEE_FAC_ITEM_ADM_YEAR.FEE_ITEM_VALUE else case DISC_FLG when 0 then FEE_FAC_ITEM_ADM_YEAR.FEE_ITEM_VALUE else (FEE_FAC_ITEM_ADM_YEAR.FEE_ITEM_VALUE-((FEE_FAC_ITEM_ADM_YEAR.FEE_ITEM_VALUE*@DiscountPrecent)/100))end end ,
						   @GsCodeCurrency
						   ,case @DiscountPrecent when 0 then 0 else case DISC_FLG when 0 then 0 else ((FEE_FAC_ITEM_ADM_YEAR.FEE_ITEM_VALUE*@DiscountPrecent)/100)end end
						   ,FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID
					FROM FEE_FACULTY_ITEM  INNER JOIN FEE_FAC_ITEM_ADM_YEAR on FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID=FEE_FAC_ITEM_ADM_YEAR.FEE_FACULTY_ITEM_ID
				    WHERE FEE_FACULTY_ITEM.FEE_FACULTY_RULE_ID=@CursorFacultyRuleId
				      AND FEE_FACULTY_ITEM.ADM_YEAR_FLG=1
				      AND FEE_FAC_ITEM_ADM_YEAR.ED_ACAD_YEAR_ID=@EdAcadYearJoin
              --AND FEE_FAC_ITEM_ADM_YEAR.ED_ACAD_YEAR_ID = @EdAcadYearId
				      AND (FEE_FACULTY_ITEM.NEW_COMER_FLG=0 or( FEE_FACULTY_ITEM.NEW_COMER_FLG=1 and @EdAcadYearId=@EdAcadYearJoin ))
				      AND FEE_FACULTY_ITEM.[START_DATE]>=@StartDate and  FEE_FACULTY_ITEM.END_DATE<= @EndDate
				END
			END
		END
		
		FETCH NEXT FROM GENERAL_CONDS INTO @CursorEdStudId,@CursorStudGsCountryInfoId,@CursorEdCodeLevelId
	END
	CLOSE GENERAL_CONDS
	DEALLOCATE GENERAL_CONDS
	
	INSERT INTO #INVALID_STUDENTS 
	VALUES ('Count','Count','Count',@SucessInserted,@FaildInserted,@AppliedStudNo, @AlreadyLoad)
    
    SELECT StudNameEn,StudNameAr ,InValidReason,SucessInserted ,FaildInserted,TotalStudNo , StudCode
    FROM #INVALID_STUDENTS
    
    DROP TABLE #INVALID_STUDENTS
    DROP TABLE #APPLAYED_STUDENTS
END      
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="UnLoadStudFees">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FEE_COURSE_EXP table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ForgeinFlag" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
BEGIN
	DECLARE @AsFacultyInfoId NUMERIC(9,0)
	DECLARE @LocalGsCountryInfoId NUMERIC(9,0)
	DECLARE @EdCodeSemesterTypeId NUMERIC(9,0) 

	IF(@EdCodeLevelId=0)
		SET @EdCodeLevelId=null

	SELECT @AsFacultyInfoId=AS_FACULTY_INFO_id FROM ENTITY_MAIN WHERE ENT_MAIN_ID=@EntityMainId

	SELECT @LocalGsCountryInfoId=GS_COUNTRY_INFO_ID 
	FROM GS_COUNTRY_INFO
		 INNER JOIN GS_COUNTRY_NODE on GS_COUNTRY_INFO.GS_COUNTRY_NODE_ID=GS_COUNTRY_NODE.GS_COUNTRY_NODE_ID
	WHERE GS_COUNTRY_NODE.IS_NODE_LOCAL=1
	
	SELECT @EdCodeSemesterTypeId=ED_CODE_SEMESTER_TYPE_ID FROM ED_CODE_SEMESTER WHERE ED_CODE_SEMESTER_ID=@EdCodeSemesterId
		 
	CREATE TABLE #APPLAYED_STUDENTS(STUD_ID NUMERIC(9,0),gs_country_info_id NUMERIC(9,0),ed_code_level_id NUMERIC(9,0))
	CREATE TABLE #INVALID_STUDENTS(StudNameEn nvarchar(150) ,StudNameAr nvarchar(150),InValidReason nvarchar(150),SucessInserted int,FaildInserted int,TotalStudNo int)
	 
	DECLARE @AppliedStudNo NUMERIC(9,0)
	
	SELECT @AppliedStudNo=isnull(count(ED_STUD.ED_STUD_ID),0)
	FROM ED_STUD_SEMESTER INNER JOIN ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
	WHERE ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	  AND ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	  AND(@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID =@EdCodeLevelId)
	  AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)  
	  AND (@ForgeinFlag =2 or (@ForgeinFlag =0 and  ED_STUD.GS_COUNTRY_INFO_ID_1 = @LocalGsCountryInfoId)or(@ForgeinFlag =1 and  ED_STUD.GS_COUNTRY_INFO_ID_1 != @LocalGsCountryInfoId))

   
	INSERT INTO #APPLAYED_STUDENTS
	SELECT ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD.GS_COUNTRY_INFO_ID_1,ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
	FROM ED_STUD_SEMESTER INNER JOIN
		 ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
	WHERE ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
	  AND ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	  AND (@EdCodeLevelId is null or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID =@EdCodeLevelId) 
	  AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)  
	  AND (@ForgeinFlag =2 or (@ForgeinFlag =0 and  ED_STUD.GS_COUNTRY_INFO_ID_1 = @LocalGsCountryInfoId)or(@ForgeinFlag =1 and  ED_STUD.GS_COUNTRY_INFO_ID_1 != @LocalGsCountryInfoId))

	DECLARE @CursorEdStudId NUMERIC(9,0)
	DECLARE @CursorStudGsCountryInfoId NUMERIC(9,0)
	DECLARE @CursorEdCodeLevelId  NUMERIC(9,0)
	DECLARE @CursorFacultyRuleId NUMERIC(9,0)
	DECLARE @SucessInserted  int
	DECLARE @FaildInserted  int 
	
	SET @FaildInserted=0
	SET @SucessInserted=0
	
	DECLARE GENERAL_CONDS CURSOR FOR 
						  SELECT STUD_ID,gs_country_info_id,ed_code_level_id
						  FROM #APPLAYED_STUDENTS 
	
	OPEN GENERAL_CONDS
	FETCH NEXT FROM GENERAL_CONDS INTO @CursorEdStudId,@CursorStudGsCountryInfoId,@CursorEdCodeLevelId
	WHILE(@@FETCH_STATUS<>-1)
	BEGIN
		SET @CursorFacultyRuleId = null

		SELECT @CursorFacultyRuleId = FEE_FACULTY_RULE_ID 
		FROM FEE_FACULTY_RULE 
		WHERE ENT_MAIN_ID=@EntityMainId
		  AND FEE_CODE_TYPE_ID = 1
		  AND ((@CursorStudGsCountryInfoId=@LocalGsCountryInfoId and FOREIGN_FLG=0)or (@CursorStudGsCountryInfoId!=@LocalGsCountryInfoId and FOREIGN_FLG=1) or FOREIGN_FLG=2)
		  AND (@CursorEdCodeLevelId=ED_CODE_LEVEL_ID or  ED_CODE_LEVEL_ID is null)
		  AND ((@EdCodeSemesterTypeId =ED_CODE_SEMESTER_TYPE_ID and  FEE_NATURE_FLG=1 )or (@EdCodeSemesterTypeId =1 and FEE_NATURE_FLG=0 and   ED_CODE_SEMESTER_TYPE_ID is null))

		BEGIN TRY
			PRINT @CursorFacultyRuleId
			DELETE FROM FEE_STUD_FEE_ITEM
			       FROM FEE_STUD_FEE_ITEM INNER JOIN FEE_FACULTY_ITEM ON FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID = FEE_STUD_FEE_ITEM.FEE_FACULTY_ITEM_ID
				   WHERE FEE_FACULTY_ITEM.FEE_FACULTY_RULE_ID=@CursorFacultyRuleId
					 AND AS_FACULTY_INFO_ID=@AsFacultyInfoId
					 AND ED_ACAD_YEAR_ID= @EdAcadYearId
					 AND ED_CODE_SEMESTER_ID= @EdCodeSemesterId 
					 AND ED_STUD_ID=@CursorEdStudId
					 AND FEE_CODE_TYPE_ID=1
			SET @SucessInserted = @SucessInserted+1
		END TRY
		BEGIN CATCH
			SET @FaildInserted = @FaildInserted + 1
			
			INSERT INTO #INVALID_STUDENTS(StudNameEn ,StudNameAr,InValidReason)
			SELECT ED_STUD.FULL_NAME_EN,ED_STUD.FULL_NAME_AR,'FeeItemCannotdelete' 
			FROM ED_STUD 
			WHERE ED_STUD.ED_STUD_ID=@CursorEdStudId
		END CATCH

		FETCH NEXT FROM GENERAL_CONDS INTO @CursorEdStudId,@CursorStudGsCountryInfoId,@CursorEdCodeLevelId
	END
	CLOSE GENERAL_CONDS
	DEALLOCATE GENERAL_CONDS

	INSERT  INTO #INVALID_STUDENTS VALUES ('Count','Count','Count',@SucessInserted,@FaildInserted,@AppliedStudNo )
	SELECT StudNameEn,StudNameAr ,InValidReason,SucessInserted ,FaildInserted,TotalStudNo
	FROM #INVALID_STUDENTS
END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="LoadOtherFeeToStud">
      <comment>
        <![CDATA[
]]>
      </comment>
      <parameters>
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@GsCodeCurrency" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
BEGIN
  
	declare @AsFacultyInfoId NUMERIC(9,0)
	select @AsFacultyInfoId=AS_FACULTY_INFO_id from ENTITY_MAIN where ENT_MAIN_ID=@EntityMainId
   	
   	if exists (select 'H' from FEE_STUD_FEE_ITEM where ED_STUD_ID=@EdStudId and FEE_FACULTY_ITEM_ID=@FeeFacultyItemId)
   	begin
   	        RAISERROR('ERR_FeeStudFeeItemRepeated',16,-1)
              RETURN 
   	end
   	else
   	begin
        declare @MaxFeeStudFeeItemId NUMERIC(9,0)
        select  @MaxFeeStudFeeItemId =max(FEE_STUD_FEE_ITEM_ID)from FEE_STUD_FEE_ITEM;
         if( @MaxFeeStudFeeItemId is null)
            set  @MaxFeeStudFeeItemId=0;
             set @MaxFeeStudFeeItemId=@MaxFeeStudFeeItemId+1  
           INSERT INTO FEE_STUD_FEE_ITEM
              (FEE_STUD_FEE_ITEM_id,
               AS_FACULTY_INFO_ID, 
               ED_ACAD_YEAR_ID,
               ED_CODE_SEMESTER_ID,
               ED_STUD_ID,
               FEE_CODE_TYPE_ID,
               FEE_FACULTY_ITEM_ID, 
               FEE_ITEM_VALUE,
               REMAIN_AMOUNT,
               GS_CODE_CURRENCY_ID,
               FEE_CODE_ITEM_ID)
				SELECT     
				         @MaxFeeStudFeeItemId,
				           @AsFacultyInfoId,
						   @EdAcadYearId,
						   @EdCodeSemesterId, 
						   @EdStudId,
						   2,
						   @FeeFacultyItemId, 
						   FEE_FACULTY_ITEM.FEE_ITEM_VALUE,
						   FEE_FACULTY_ITEM.FEE_ITEM_VALUE,
						   @GsCodeCurrency,
               FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID
				FROM       FEE_FACULTY_ITEM  where FEE_FACULTY_ITEM_ID=@FeeFacultyItemId
				
				end
END
   
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="UnLoadOtherFeeToStud">
      <comment>
        <![CDATA[/*
]]>
      </comment>
      <parameters>
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@GsCodeCurrency" type="numeric" direction="Input" size="9" precision="0" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
BEGIN
  
	declare @AsFacultyInfoId NUMERIC(9,0)
	select @AsFacultyInfoId=AS_FACULTY_INFO_id from ENTITY_MAIN where ENT_MAIN_ID=@EntityMainId
   	
  
		delete 
		FROM         FEE_STUD_FEE_ITEM
		WHERE     (AS_FACULTY_INFO_ID = @AsFacultyInfoId)
				 AND (ED_ACAD_YEAR_ID = @EdAcadYearId) 
				 AND (ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
				 AND (ED_STUD_ID = @EdStudId)  
			     AND(FEE_CODE_TYPE_ID =2)
			     AND (FEE_FACULTY_ITEM_ID =@FeeFacultyItemId)
						
			
END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_FEE_ITEM_InsertIdOut" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_STUD_FEE_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudFeeItemId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeItemValue" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="" />
        <parameter name="@RemainAmount" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxFeeStudFeeItemId numeric(9,0)
        select  @MaxFeeStudFeeItemId =max(FEE_STUD_FEE_ITEM_ID)from FEE_STUD_FEE_ITEM;
         if( @MaxFeeStudFeeItemId is null)
            set  @MaxFeeStudFeeItemId=0;
            
          set  @MaxFeeStudFeeItemId= @MaxFeeStudFeeItemId+1;  
        
        declare @FeeCodeItemId numeric(4, 0)
        
        set @FeeCodeItemId=null;
        
        if(@FeeFacultyItemId is not null)
           select @FeeCodeItemId=FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID from FEE_FACULTY_ITEM where FEE_FACULTY_ITEM_ID=@FeeFacultyItemId
        
				INSERT INTO [dbo].[FEE_STUD_FEE_ITEM]
					(
					[FEE_STUD_FEE_ITEM_ID]
					,[AS_FACULTY_INFO_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[ED_STUD_ID]
					,[FEE_CODE_TYPE_ID]
					,[FEE_FACULTY_ITEM_ID]
					,[FEE_ITEM_VALUE]
					,[REMAIN_AMOUNT]
					,[GS_CODE_CURRENCY_ID]
          ,FEE_CODE_ITEM_ID
					)
				VALUES
					(
					@MaxFeeStudFeeItemId
					,@AsFacultyInfoId
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@EdStudId
					,@FeeCodeTypeId
					,@FeeFacultyItemId
					,@FeeItemValue
					,@RemainAmount
					,@GsCodeCurrencyId
          ,@FeeCodeItemId
					)
				
								set @FeeStudFeeItemId=@MaxFeeStudFeeItemId;
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudVoucherItems">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()

----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeesSelectFlag" type="numeric" direction="Input" size="1" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@CurrEdCodeSemId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        -- changed by emohamed
 if (@FeesSelectFlag=1)   --get fees from student fees item (fee_stud_fee_item)
 begin
	print 'stud fees';
	select  FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID,
			FEE_STUD_FEE_ITEM.FEE_ITEM_VALUE,
			FEE_STUD_FEE_ITEM.FEE_FACULTY_ITEM_ID,
			FEE_STUD_FEE_ITEM.GS_CODE_CURRENCY_ID,
			FEE_STUD_FEE_ITEM.FEE_STUD_FEE_ITEM_ID,
			FEE_STUD_FEE_ITEM.DISC_AMOUNT,
			FEE_STUD_FEE_ITEM.REMAIN_AMOUNT,
			FEE_CODE_ITEM.DESCR_AR as CodeItemDescrAr,
			FEE_CODE_ITEM.DESCR_EN as CodeItemDescrEn,
			GS_CODE_CURRENCY.CURRENCY_DESCR_AR as CurrDescAr,
			GS_CODE_CURRENCY.CURRENCY_DESCR_EN as CurrDescrEn,
			FEE_CODE_ITEM.FEE_CODE_TYPE_ID

	from    FEE_STUD_FEE_ITEM inner join FEE_FACULTY_ITEM on FEE_STUD_FEE_ITEM.FEE_FACULTY_ITEM_ID=FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID
	left outer join FEE_CODE_ITEM on FEE_CODE_ITEM.FEE_CODE_ITEM_ID=FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID
	left outer join GS_CODE_CURRENCY on GS_CODE_CURRENCY.GS_CODE_CURRENCY_ID=FEE_STUD_FEE_ITEM.GS_CODE_CURRENCY_ID

	where   FEE_STUD_FEE_ITEM.AS_FACULTY_INFO_ID=@AsFacultyInfoId
		 and FEE_STUD_FEE_ITEM.ED_STUD_ID=@EdStudId
		 and FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID=@EdAcadYearId
		 and FEE_STUD_FEE_ITEM.ED_CODE_SEMESTER_ID=@CurrEdCodeSemId
		 and (@FeeCodeTypeId is null or @FeeCodeTypeId = 0 or FEE_STUD_FEE_ITEM.FEE_CODE_TYPE_ID=@FeeCodeTypeId)
		 and FEE_STUD_FEE_ITEM.REMAIN_AMOUNT>0
	--	 and FEE_STUD_FEE_ITEM_ID not in (select FEE_STUD_VOUCHER_ITEM.FEE_STUD_FEE_ITEM_ID 
	--from FEE_STUD_VOUCHER_ITEM inner join FEE_STUD_VOUCHER on FEE_STUD_VOUCHER_ITEM.FEE_STUD_VOUCHER_ID=FEE_STUD_VOUCHER.FEE_STUD_VOUCHER_ID
	--where FEE_STUD_VOUCHER.RECEIPT_DATE is not null and FEE_STUD_VOUCHER.RECEIPT_NUM is not null)
 
end    
else
begin
	print 'no data'
	declare @LocalGsCountryInfoId numeric(5,0)
	
	select @LocalGsCountryInfoId=GS_COUNTRY_INFO_ID 
	from GS_COUNTRY_INFO inner join GS_COUNTRY_NODE on GS_COUNTRY_INFO.GS_COUNTRY_NODE_ID=GS_COUNTRY_NODE.GS_COUNTRY_NODE_ID
	where GS_COUNTRY_NODE.IS_NODE_LOCAL=1
	print @LocalGsCountryInfoId;

	declare @StudGsCountryInfoId numeric(5,0)
	select @StudGsCountryInfoId=ED_STUD.GS_COUNTRY_INFO_ID_1
	from ED_STUD
	where ED_STUD.ED_STUD_ID=@EdStudId

	print @StudGsCountryInfoId;

	declare @EdCodeLevelId numeric(5,0)
	SELECT @EdCodeLevelId=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
	FROM ED_STUD_SEMESTER INNER JOIN
		 ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
	WHERE (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) 
	  AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)  
	  AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @CurrEdCodeSemId) 
	
	print @EdCodeLevelId	

	declare  @EdCodeSemesterTypeId numeric(9,0)
	select @EdCodeSemesterTypeId=ED_SEMESTER_OPEN.ED_CODE_SEMESTER_TYPE_ID
	from ED_SEMESTER_OPEN
	where ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID=@EdAcadYearId
	  and ED_SEMESTER_OPEN.ENT_MAIN_ID=@EntityMainId
	  and ED_SEMESTER_OPEN.IS_CURRENT=1
	  and ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID=@CurrEdCodeSemId

	-- Emohamed
	--print @EdCodeSemesterTypeId;
	--declare @FeeFacultyRuleId numeric(9,0)
	--select @FeeFacultyRuleId=FEE_FACULTY_RULE_ID from FEE_FACULTY_RULE 
	--where ENT_MAIN_ID=@EntityMainId
	--  and (@FeeCodeTypeId is null or @FeeCodeTypeId = 0 or FEE_CODE_TYPE_ID=@FeeCodeTypeId)
	--  and ((@StudGsCountryInfoId=@LocalGsCountryInfoId and FOREIGN_FLG=0)or (@StudGsCountryInfoId!=@LocalGsCountryInfoId and FOREIGN_FLG=1) or FOREIGN_FLG=2)
	--  and (@EdCodeLevelId=ED_CODE_LEVEL_ID or  ED_CODE_LEVEL_ID is null)
	--  and ((@EdCodeSemesterTypeId =ED_CODE_SEMESTER_TYPE_ID and  FEE_NATURE_FLG=1 )or (@EdCodeSemesterTypeId =1 and FEE_NATURE_FLG=0 and   ED_CODE_SEMESTER_TYPE_ID is null))
	
	--print @FeeFacultyRuleId;
	--Emohamed

	SELECT FEE_CODE_ITEM.FEE_CODE_ITEM_ID,
		FEE_FACULTY_ITEM.FEE_ITEM_VALUE,
		FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID,
		FEE_FACULTY_RULE.GS_CODE_CURRENCY_ID,
		-1,
		-1,
		FEE_FACULTY_ITEM.FEE_ITEM_VALUE,
		FEE_CODE_ITEM.DESCR_AR as CodeItemDescrAr,
		FEE_CODE_ITEM.DESCR_EN as CodeItemDescrEn,
		GS_CODE_CURRENCY.CURRENCY_DESCR_AR as CurrDescAr,
		GS_CODE_CURRENCY.CURRENCY_DESCR_EN as CurrDescrEn,
		FEE_CODE_ITEM.FEE_CODE_TYPE_ID
	from FEE_FACULTY_ITEM inner join FEE_FACULTY_RULE on FEE_FACULTY_ITEM.FEE_FACULTY_RULE_ID=FEE_FACULTY_RULE.FEE_FACULTY_RULE_ID
		 inner join FEE_CODE_ITEM on FEE_CODE_ITEM.FEE_CODE_ITEM_ID=FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID
		 left outer join GS_CODE_CURRENCY on GS_CODE_CURRENCY.GS_CODE_CURRENCY_ID=FEE_FACULTY_RULE.GS_CODE_CURRENCY_ID
		 -------------------------------
		 LEFT JOIN FEE_STUD_FEE_ITEM ON FEE_STUD_FEE_ITEM.FEE_CODE_ITEM_ID = FEE_CODE_ITEM.FEE_CODE_ITEM_ID
		                             AND FEE_STUD_FEE_ITEM.AS_FACULTY_INFO_ID=@AsFacultyInfoId
									 and FEE_STUD_FEE_ITEM.ED_STUD_ID=@EdStudId
									 and FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID=@EdAcadYearId
									 and FEE_STUD_FEE_ITEM.ED_CODE_SEMESTER_ID=@CurrEdCodeSemId
									 and (@FeeCodeTypeId is null or @FeeCodeTypeId = 0 or FEE_STUD_FEE_ITEM.FEE_CODE_TYPE_ID=@FeeCodeTypeId)
	where FEE_FACULTY_RULE.FEE_FACULTY_RULE_ID in (
		select FEE_FACULTY_RULE_ID from FEE_FACULTY_RULE 
		where ENT_MAIN_ID=@EntityMainId
		  and (@FeeCodeTypeId is null or @FeeCodeTypeId = 0 or FEE_CODE_TYPE_ID=@FeeCodeTypeId)
		  and ((@StudGsCountryInfoId=@LocalGsCountryInfoId and FOREIGN_FLG=0)or (@StudGsCountryInfoId!=@LocalGsCountryInfoId and FOREIGN_FLG=1) or FOREIGN_FLG=2)
		  and (@EdCodeLevelId=ED_CODE_LEVEL_ID or  ED_CODE_LEVEL_ID is null)
		  and ((@EdCodeSemesterTypeId =ED_CODE_SEMESTER_TYPE_ID and  FEE_NATURE_FLG=1 )or (@EdCodeSemesterTypeId =1 and FEE_NATURE_FLG=0 and   ED_CODE_SEMESTER_TYPE_ID is null))
	)
	AND FEE_STUD_FEE_ITEM.FEE_STUD_FEE_ITEM_ID IS NULL
end		
SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetHistoricalFees">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()

----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@CurrEdCodeSemId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

 print 'stud fees';
 
 declare @YearOrder numeric(9,0)
 
 select @YearOrder=YEAR_ORDER
 from ED_ACAD_YEAR
 where ED_ACAD_YEAR_ID=@EdAcadYearId
 
			 select  FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID,
			         FEE_STUD_FEE_ITEM.FEE_ITEM_VALUE,
			         FEE_STUD_FEE_ITEM.FEE_FACULTY_ITEM_ID,
			         FEE_STUD_FEE_ITEM.GS_CODE_CURRENCY_ID,
               FEE_STUD_FEE_ITEM.FEE_STUD_FEE_ITEM_ID,
               FEE_STUD_FEE_ITEM.DISC_AMOUNT,
               FEE_CODE_ITEM.DESCR_AR as CodeItemDescrAr,
               FEE_CODE_ITEM.DESCR_EN as CodeItemDescrEn,
               GS_CODE_CURRENCY.CURRENCY_DESCR_AR as CurrDescAr,
               GS_CODE_CURRENCY.CURRENCY_DESCR_EN as CurrDescrEn
			 
			 from    FEE_STUD_FEE_ITEM inner join FEE_FACULTY_ITEM on FEE_STUD_FEE_ITEM.FEE_FACULTY_ITEM_ID=FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID
               left outer join FEE_CODE_ITEM on FEE_CODE_ITEM.FEE_CODE_ITEM_ID=FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID
               left outer join GS_CODE_CURRENCY on GS_CODE_CURRENCY.GS_CODE_CURRENCY_ID=FEE_STUD_FEE_ITEM.GS_CODE_CURRENCY_ID
               left outer join ED_ACAD_YEAR on ED_ACAD_YEAR.ED_ACAD_YEAR_ID=FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID
			 
			 where   FEE_STUD_FEE_ITEM.AS_FACULTY_INFO_ID=@AsFacultyInfoId
					 and FEE_STUD_FEE_ITEM.ED_STUD_ID=@EdStudId
           and (ED_ACAD_YEAR.YEAR_ORDER < @YearOrder)
					 --and FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID=@EdAcadYearId
					 and FEE_STUD_FEE_ITEM.ED_CODE_SEMESTER_ID=@CurrEdCodeSemId
					 and FEE_STUD_FEE_ITEM.FEE_CODE_TYPE_ID=@FeeCodeTypeId
					 and FEE_STUD_FEE_ITEM.REMAIN_AMOUNT>0
				--	 and FEE_STUD_FEE_ITEM_ID not in (select FEE_STUD_VOUCHER_ITEM.FEE_STUD_FEE_ITEM_ID 
			 --from FEE_STUD_VOUCHER_ITEM inner join FEE_STUD_VOUCHER on FEE_STUD_VOUCHER_ITEM.FEE_STUD_VOUCHER_ID=FEE_STUD_VOUCHER.FEE_STUD_VOUCHER_ID
			 --where FEE_STUD_VOUCHER.RECEIPT_DATE is not null and FEE_STUD_VOUCHER.RECEIPT_NUM is not null)
        
           
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SearchStudVoucher">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_STUD_VOUCHER table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@VoucherDateFrom" type="datetime" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@VoucherDateTo" type="datetime" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT *
				FROM
					[dbo].[FEE_STUD_VOUCHER]
				where 
           FEE_STUD_VOUCHER.ED_STUD_ID=@EdStudId
           and  FEE_STUD_VOUCHER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
           and(@VoucherDateFrom is null or FEE_STUD_VOUCHER.VOUCHER_DATE>=@VoucherDateFrom)
           and (@VoucherDateTo is null or FEE_STUD_VOUCHER.VOUCHER_DATE<=@VoucherDateTo)
           and (@FeeCodeTypeId is null or FEE_STUD_VOUCHER.FEE_CODE_TYPE_ID=@FeeCodeTypeId)
           and (@GsCodeCurrencyId is null or FEE_STUD_VOUCHER.GS_CODE_CURRENCY_ID=@GsCodeCurrencyId)
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_SEMESTER_GetLastStudSemester" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_CODE_BANKS table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[


select top 1 t.ED_STUD_SEMESTER_ID,t.ACCUM_GPA from(
SELECT   ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID, ED_STUD_SEMESTER.ACCUM_GPA,ROW_NUMBER()over(order by ED_ACAD_YEAR.YEAR_ORDER ,ED_CODE_SEMESTER.SEMESTER_ORDER )as rownum
FROM         ED_STUD_SEMESTER INNER JOIN
                      ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
and (@AsFacultyInfoId=0 or @AsFacultyInfoId is NULL or ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
and (@EdStudID = 0 or ED_STUD_SEMESTER.ED_STUD_ID = @EdStudID)
) as t
		 order by t.rownum desc


			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GET_CGPA_GRADE" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_CODE_BANKS table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CGPA" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_DTL_ID,
           ENT_POLICY_GRADING_DTL.DESCR_AR, 
           ENT_POLICY_GRADING_DTL.DESCR_EN,
           ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID

FROM       ENT_POLICY_GRADING_HDR INNER JOIN
           ENT_POLICY_GRADING_DTL ON 
           ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID
WHERE     (ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID = 1) AND
 (ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = @EntMainId) -- كلية
and (@CGPA > ENT_POLICY_GRADING_DTL.MIN_RATE AND @CGPA <= ENT_POLICY_GRADING_DTL.MAX_RATE)
        
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_FEE_ITEM_GetByStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects Fee Items for student view (My financial status --> Due Fees).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@facultyID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@currentYearID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@FeeCodeTypeID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT *
FROM FEE_STUD_FEE_ITEM SI INNER JOIN FEE_FACULTY_ITEM FI ON (SI.FEE_FACULTY_ITEM_ID = FI.FEE_FACULTY_ITEM_ID)
	 INNER JOIN FEE_CODE_ITEM CI ON (FI.FEE_CODE_ITEM_ID = CI.FEE_CODE_ITEM_ID)
	 INNER JOIN GS_CODE_CURRENCY CRNCY ON (SI.GS_CODE_CURRENCY_ID = CRNCY.GS_CODE_CURRENCY_ID)
WHERE SI.ED_STUD_ID=@EdStudID 
  AND SI.AS_FACULTY_INFO_ID = @facultyID
  AND SI.ED_ACAD_YEAR_ID = @currentYearID
  AND SI.FEE_CODE_TYPE_ID=@FeeCodeTypeID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudentDelayedFees">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects Fee Items for student view (My financial status --> Due Fees).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@facultyID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
          select     FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID
                    ,ED_ACAD_YEAR.DESCR_AR as AcadYearDescrAr
                    ,ED_ACAD_YEAR.DESCR_EN as AcadYearDescrEn
                    ,SUM(FEE_STUD_FEE_ITEM.FEE_ITEM_VALUE) as TotalFeeAmount
                    ,sum(FEE_STUD_FEE_ITEM.DISC_AMOUNT) as TotalDiscAmount
                    ,sum(FEE_STUD_VOUCHER_ITEM.PAY_AMOUNT) as TotalPayAmount
                    ,sum(FEE_STUD_FEE_ITEM.REMAIN_AMOUNT) as TotalRemainAmount

         from       FEE_STUD_FEE_ITEM inner join FEE_STUD_VOUCHER_ITEM
                    on FEE_STUD_FEE_ITEM.FEE_STUD_FEE_ITEM_ID=FEE_STUD_VOUCHER_ITEM.FEE_STUD_FEE_ITEM_ID
                    inner join ED_ACAD_YEAR on FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID=ED_ACAD_YEAR.ED_ACAD_YEAR_ID

         where      FEE_STUD_FEE_ITEM.ED_STUD_ID=@EdStudId and FEE_STUD_FEE_ITEM.AS_FACULTY_INFO_ID=@facultyID

         group by   FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID
                    ,ED_ACAD_YEAR.DESCR_AR
                    ,ED_ACAD_YEAR.DESCR_EN
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetStudentDelayedFeesItems">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects Fee Items for student view (My financial status --> Due Fees).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@facultyID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
         select FEE_CODE_ITEM.DESCR_AR as FeeCodeItemDescrAr,
          FEE_CODE_ITEM.DESCR_EN as FeeCodeItemDescrEn,
          FEE_STUD_FEE_ITEM.FEE_ITEM_VALUE,
          FEE_STUD_FEE_ITEM.DISC_AMOUNT,
          sum(FEE_STUD_VOUCHER_ITEM.PAY_AMOUNT) as PAY_AMOUNT,
          FEE_STUD_FEE_ITEM.REMAIN_AMOUNT


          from FEE_STUD_VOUCHER_ITEM inner join FEE_STUD_FEE_ITEM 
          on FEE_STUD_VOUCHER_ITEM.FEE_STUD_FEE_ITEM_ID=FEE_STUD_FEE_ITEM.FEE_STUD_FEE_ITEM_ID
          inner join FEE_FACULTY_ITEM on FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID=FEE_STUD_FEE_ITEM.FEE_FACULTY_ITEM_ID
          inner join FEE_CODE_ITEM on FEE_CODE_ITEM.FEE_CODE_ITEM_ID=FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID

          where FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID=@EdAcadYearId
          and FEE_STUD_FEE_ITEM.ED_STUD_ID=@EdStudId
          and FEE_STUD_FEE_ITEM.AS_FACULTY_INFO_ID=@facultyID

          group by FEE_CODE_ITEM.DESCR_AR ,
          FEE_CODE_ITEM.DESCR_EN ,
          FEE_STUD_FEE_ITEM.FEE_ITEM_VALUE,
          FEE_STUD_FEE_ITEM.DISC_AMOUNT,
          FEE_STUD_FEE_ITEM.REMAIN_AMOUNT
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_GetByStudent">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects Discount Items for student view (My financial status --> Due Fees).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <!--<parameter name="@EntMainID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null"/>-->
      </parameters>
      <body>
        <![CDATA[
SELECT *
FROM FEE_STUD_DISC d INNER JOIN FEE_CDE_DISC_TYPE dt ON (d.FEE_CDE_DISC_TYPE_ID = dt.FEE_CDE_DISC_TYPE_ID)
WHERE d.STOP_FLG <> 1 
  AND d.ED_STUD_ID = @EdStudID
  AND d.AS_FACULTY_INFO_ID = @AsFacultyInfoID
  AND d.ED_ACAD_YEAR_ID = @EdAcadYearID

-- Changed as requested on 11/01/2011
--SELECT *
--FROM FEE_STUD_DISC d INNER JOIN FEE_CDE_DISC_TYPE dt ON (d.FEE_CDE_DISC_TYPE_ID = dt.FEE_CDE_DISC_TYPE_ID)
--     INNER JOIN ED_SEMESTER_OPEN so ON (d.ED_CODE_SEMESTER_ID = so.ED_CODE_SEMESTER_ID AND so.ED_ACAD_YEAR_ID = @EdAcadYearID AND so.ENT_MAIN_ID = @EntMainID)
--WHERE 
--     (
--       d.CONT_FLG = 0 
--       OR (d.CONT_FLG = 1 AND ISNULL(d.END_DATE, so.FROM_DATE) >= so.FROM_DATE)
--     )
--  AND d.ED_STUD_ID = @EdStudID
--  AND d.AS_FACULTY_INFO_ID = @AsFacultyInfoID
--  AND d.ED_ACAD_YEAR_ID = @EdAcadYearID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_VOUCHER_GetDetailedItems">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects Invoice Details for student view (My financial status --> Details financial sheet).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudVoucherID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT * 
FROM FEE_STUD_VOUCHER_ITEM vi INNER JOIN FEE_STUD_FEE_ITEM fi ON (vi.FEE_STUD_FEE_ITEM_ID = fi.FEE_STUD_FEE_ITEM_ID)
     INNER JOIN FEE_FACULTY_ITEM ffi ON (fi.FEE_FACULTY_ITEM_ID = ffi.FEE_FACULTY_ITEM_ID)
     INNER JOIN FEE_CODE_ITEM fci ON (ffi.FEE_CODE_ITEM_ID = fci.FEE_CODE_ITEM_ID)
WHERE vi.FEE_STUD_VOUCHER_ID = @FeeStudVoucherID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_VOUCHER_GetTotalPayment">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects Total Payment for student view (My financial status --> Due Fees).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT ISNULL(SUM(TOTAL_AMOUNT), 0) TotalAmount
FROM FEE_STUD_VOUCHER 
WHERE ED_STUD_ID = @EdStudID
  AND AS_FACULTY_INFO_ID = @AsFacultyID 
  AND ED_ACAD_YEAR_ID = @EdAcadYearID 
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_ABSENCE_GetByEdBylawIdEdCodeCourseTeachingId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_ABSENCE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_POLICY_ABSENCE_ID],
					[ED_BYLAW_ID],
					[ED_CODE_COURSE_TEACHING_ID],
					[MIN_RATE_COURSE_ATTEND],
					[ABS_RATE_WARNINIG_1],
					[ABS_RATE_WARNINIG_2],
					[ABS_RATE_COURSE_FAIL],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ENT_POLICY_ABSENCE]
				WHERE
					[ED_BYLAW_ID] = @EdBylawId
					AND [ED_CODE_COURSE_TEACHING_ID] = @EdCodeCourseTeachingId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetResultSheetAssess">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects course assessment for RptResultSheetforLevel).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ED_SEMESTER_OPEN_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ED_CODE_LEVEL_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
	SELECT DISTINCT SS.ED_ACAD_YEAR_ID, SS.AS_FACULTY_INFO_ID, SS.ED_CODE_LEVEL_ID, SO.ED_SEMESTER_OPEN_ID,
		   CR.ED_COURSE_ID, C.COURSE_CODE CourseCode, C.COURSE_DESCR_EN CourseDescEn, C.COURSE_DESCR_AR CourseDescAr, 
		   PHD.COURSE_MAX_DEG CourseMax, PHD.COURSE_MIN_DEG CourseMin,
		   PDT.ED_CODE_COURSE_ASSESS_ID, PDT.MAX_RATE AssessMaxRate, PDT.MIN_RATE AssessMinRate, 
		   CCA.DESCR_EN AssessDescEn, CCA.DESCR_AR AssessDescAr
	FROM ED_STUD S INNER JOIN ED_STUD_SEMESTER SS ON (SS.ED_STUD_ID = S.ED_STUD_ID)
		 INNER JOIN ED_SEMESTER_OPEN SO ON (SS.ED_SEMESTER_OPEN_ID = SO.ED_SEMESTER_OPEN_ID)
		 INNER JOIN ED_STUD_COURSE_REG CR ON (CR.ED_STUD_SEMESTER_ID = SS.ED_STUD_SEMESTER_ID)
		 INNER JOIN ED_COURSE C ON (CR.ED_COURSE_ID = C.ED_COURSE_ID)
		 INNER JOIN ENT_POLICY_ASSESS_HDR PHD ON (CR.ENT_POLICY_ASSESS_HDR_ID = PHD.ENT_POLICY_ASSESS_HDR_ID)
		 INNER JOIN ENT_POLICY_ASSESS_DTL PDT ON (PDT.ENT_POLICY_ASSESS_HDR_ID = PHD.ENT_POLICY_ASSESS_HDR_ID)
		 INNER JOIN ED_CODE_COURSE_ASSESS CCA ON (PDT.ED_CODE_COURSE_ASSESS_ID = CCA.ED_CODE_COURSE_ASSESS_ID)
  WHERE SS.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID 
    AND SS.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID 
    AND SS.ED_CODE_LEVEL_ID = @ED_CODE_LEVEL_ID 
    AND SO.ED_SEMESTER_OPEN_ID = @ED_SEMESTER_OPEN_ID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetStudents">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects course assessment for RptResultSheetforLevel).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ED_CODE_LEVEL_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT S.ED_STUD_ID, SS.ED_ACAD_YEAR_ID, SS.AS_FACULTY_INFO_ID, SS.ED_CODE_LEVEL_ID, 
	 S.FULL_NAME_EN, S.FULL_NAME_AR, SF.STUD_FACULTY_CODE
FROM ED_STUD S INNER JOIN ED_STUD_SEMESTER SS ON (SS.ED_STUD_ID = S.ED_STUD_ID)
	 --INNER JOIN ED_SEMESTER_OPEN SO ON (SS.ED_SEMESTER_OPEN_ID = SO.ED_SEMESTER_OPEN_ID)
	 INNER JOIN ED_STUD_FACULTY SF ON (SF.ED_STUD_ID = S.ED_STUD_ID AND SF.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID)
WHERE SS.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID 
  AND SS.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID 
  AND SS.ED_CODE_LEVEL_ID = @ED_CODE_LEVEL_ID 
  --AND SO.ED_SEMESTER_OPEN_ID = @ED_SEMESTER_OPEN_ID
  AND SS.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetStudentCourseDegree">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects course assessment for RptResultSheetforLevel).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@P_ED_STUD_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@P_ED_COURSE_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
	SELECT CR.ED_STUD_COURSE_REG_ID, CR.COURSE_DEGREE
	FROM ED_STUD S INNER JOIN ED_STUD_SEMESTER SS ON (SS.ED_STUD_ID = S.ED_STUD_ID)
		 INNER JOIN ED_STUD_COURSE_REG CR ON (CR.ED_STUD_SEMESTER_ID = SS.ED_STUD_SEMESTER_ID)
	WHERE S.ED_STUD_ID = @P_ED_STUD_ID
	  AND CR.ED_COURSE_ID = @P_ED_COURSE_ID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetStudentAssessDegree">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects course assessment for RptResultSheetforLevel).
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@P_ED_STUD_COURSE_REG_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@P_ED_CODE_COURSE_ASSESS_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
	SELECT CRA.ASSESS_DEG
	FROM ED_STUD_COURSE_REG CR INNER JOIN ED_STUD_COURSE_REG_ASSESS CRA ON (CRA.ED_STUD_COURSE_REG_ID = CR.ED_STUD_COURSE_REG_ID)
		 INNER JOIN ED_CODE_COURSE_ASSESS CCA ON (CRA.ED_CODE_COURSE_ASSESS_ID = CCA.ED_CODE_COURSE_ASSESS_ID)
	WHERE CR.ED_STUD_COURSE_REG_ID = @P_ED_STUD_COURSE_REG_ID
	  AND CCA.ED_CODE_COURSE_ASSESS_ID = @P_ED_CODE_COURSE_ASSESS_ID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_CLRNC_REQ_InsertWithId" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_CLRNC_REQ table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudClrncReqId" type="numeric" direction="Output" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@GsCdeClrncReasonId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@WithdrawDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@WithdrawName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="240" precision="0" scale="0" param="(240)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        begin transaction
        
        declare @AsFacultyId numeric(9,0)
        declare @EdStudId numeric(9,0)
        
        select @AsFacultyId=AS_FACULTY_INFO_ID,@EdStudId=ED_STUD_SEMESTER.ED_STUD_ID
        from ED_STUD_SEMESTER
        where ED_STUD_SEMESTER_ID=@EdStudSemesterId
        
         if exists (select 'd'
                    from ED_STUD_CLRNC_REQ inner join ED_STUD_SEMESTER on 
                    ED_STUD_CLRNC_REQ.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                    where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId)
              begin
                RAISERROR('ERR_ClrncReqRepeat',16,-1)
                RETURN 
              end
        
        
        declare @MaxEdStudClrncReqId numeric(7,0)
        select  @MaxEdStudClrncReqId =max(ED_STUD_CLRNC_REQ_ID)from ED_STUD_CLRNC_REQ;
         if( @MaxEdStudClrncReqId is null)
            set  @MaxEdStudClrncReqId=0;
            
          set  @MaxEdStudClrncReqId= @MaxEdStudClrncReqId+1;  
          
        
				INSERT INTO [dbo].[ED_STUD_CLRNC_REQ]
					(
					[ED_STUD_CLRNC_REQ_ID]
					,[REQ_DATE]
					,[REQ_STATUS_DATE]
					,[ED_STUD_SEMESTER_ID]
					,[GS_CDE_CLRNC_REASON_ID]
					,[GS_CODE_REQ_STATUS_ID]
					,[WITHDRAW_DATE]
					,[WITHDRAW_NAME]
					,[NOTES]
					)
				VALUES
					(
					@MaxEdStudClrncReqId
					,@ReqDate
					,@ReqStatusDate
					,@EdStudSemesterId
					,@GsCdeClrncReasonId
					,@GsCodeReqStatusId
					,@WithdrawDate
					,@WithdrawName
					,@Notes
					)
				
        
          declare @MaxEdStudClrncItemId numeric(7,0)
          select  @MaxEdStudClrncItemId =max(ED_STUD_CLRNC_ITEM_ID)from ED_STUD_CLRNC_ITEM;
         if( @MaxEdStudClrncItemId is null)
            set  @MaxEdStudClrncItemId=0;
        
        insert into ED_STUD_CLRNC_ITEM
        (
        ED_STUD_CLRNC_ITEM_ID,
        ED_STUD_CLRNC_REQ_ID,
        GS_CDE_CLRNC_ITEM_ID,
        OWNER_NAME,
        CONFIRM_DATE,
        NOTES
        )
        
        select @MaxEdStudClrncItemId+ROW_NUMBER()over(order by (dbo.GS_CDE_CLRNC_ITEM.GS_CDE_CLRNC_ITEM_ID))as rownum ,
               @MaxEdStudClrncReqId,
               GS_CDE_CLRNC_ITEM.GS_CDE_CLRNC_ITEM_ID,
               null,
               null,
               null
        from   GS_CDE_CLRNC_ITEM inner join GS_CDE_CLRNC_ITEM_FAC
               on GS_CDE_CLRNC_ITEM.GS_CDE_CLRNC_ITEM_ID=GS_CDE_CLRNC_ITEM_FAC.GS_CDE_CLRNC_ITEM_ID
        where  GS_CDE_CLRNC_ITEM_FAC.AS_FACULTY_INFO_ID=@AsFacultyId
					
          
          set @EdStudClrncReqId=@MaxEdStudClrncReqId;
          
             IF @@ERROR <> 0
         BEGIN
            ROLLBACK

            RETURN
         END
        commit transaction;			
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SearchStudClearReq">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_CLRNC_REQ table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ReqFromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@ReqToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@EdAcadyearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeClrnReasonId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@StudCode" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				select ED_STUD_FACULTY.STUD_FACULTY_CODE as StudCode,
        ED_STUD.FULL_NAME_AR as StudNameAr,
        ED_STUD.FULL_NAME_EN as StudNameEn,
        ED_CODE_LEVEL.DESCR_AR as LevelDescAr,
        ED_CODE_LEVEL.DESCR_EN as LevelDescEn,
        [dbo].[fn_GetStudDeptMjr](ED_STUD.ED_STUD_ID,@AsFacultyId,@EdAcadyearId,@EdCodeSemesterId,1) as DeptDescrAr,
        [dbo].[fn_GetStudDeptMjr](ED_STUD.ED_STUD_ID,@AsFacultyId,@EdAcadyearId,@EdCodeSemesterId,2) as DeptDescrEn,
        GS_CODE_REQ_STATUS.DESCR_AR as ReqStatusAr,
        GS_CODE_REQ_STATUS.DESCR_EN as ReqStatusEn,
        ED_STUD_CLRNC_REQ.WITHDRAW_DATE as WithdrawDate,
        ED_STUD_CLRNC_REQ.ED_STUD_CLRNC_REQ_ID as EdStudClrncReqId,
        ED_STUD_CLRNC_REQ.GS_CODE_REQ_STATUS_ID as GsCodeReqStatusId

        from ED_STUD_CLRNC_REQ inner join ED_STUD_SEMESTER
        on ED_STUD_CLRNC_REQ.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
        inner join ED_STUD on ED_STUD_SEMESTER.ED_STUD_ID=ED_STUD.ED_STUD_ID
        inner join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID 
        and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyId)
        inner join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
        inner join GS_CODE_REQ_STATUS on GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID=ED_STUD_CLRNC_REQ.GS_CODE_REQ_STATUS_ID

        where
        --rzaki modify   09-10-2012   
        --Dina modify 25-11-2012 to add search with studcode
        ED_STUD_SEMESTER.is_last=1 and ed_stud_faculty.is_active=1
        And ed_stud_faculty.AS_FACULTY_INFO_ID=@AsFacultyId
        --(@EdAcadyearId is null or ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadyearId)
        --and (@EdCodeSemesterId is null or ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId)
        and (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyId)
        and (@ReqFromDate is null or REQ_DATE>=@ReqFromDate)
        and (@ReqToDate is null or REQ_DATE<=@ReqToDate)
        and (@GsCodeClrnReasonId is null or ED_STUD_CLRNC_REQ.GS_CDE_CLRNC_REASON_ID=@GsCodeClrnReasonId)
        and (@GsCodeReqStatusId is null or ED_STUD_CLRNC_REQ.GS_CODE_REQ_STATUS_ID=@GsCodeReqStatusId)
         and (@StudCode is null or ED_STUD_FACULTY.STUD_FACULTY_CODE=@StudCode)

				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SA_STF_MEMBER_GetBySchedule">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects staff member from schedule.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCourseID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ScScheduleDtlID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@GsCodeWeekID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ScTchngSlotID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT SA_STF_MEMBER.*    --SC_SCHEDULE_DTL.SA_STF_MAMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN
FROM         SC_SCHEDULE_HDR INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
WHERE (ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseID) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterID) 
  AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearID) AND (SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_DAY_ID = @ScTchngSlotID) 
  AND (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlID) AND (SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = @GsCodeWeekID)
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_GetCourseDays">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Select course days.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCourseID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ScScheduleDtlID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT  GS_CODE_WEEK_DAY.*
FROM    SC_SCHEDULE_DTL_DAY INNER JOIN
        SC_SCHEDULE_DTL ON SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
        SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
        ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
        ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
        GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID
WHERE     (ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseID) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearID) AND 
          (ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoID) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterID) AND 
          SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlID
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_GetStaffDays">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Select course days.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
SELECT  distinct GS_CODE_WEEK_DAY.*
FROM  SC_SCHEDULE_DTL_DAY INNER JOIN
               SC_SCHEDULE_DTL ON SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
               SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
               GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID INNER JOIN
               ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
               ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
WHERE     (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @SaStfMemberId) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearID) AND 
          (@AsFacultyInfoID =0 or ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoID) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterID) 
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_GetByCourse">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects course assessment methods by course.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCourseID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
DECLARE @EntMainId decimal

SELECT @EntMainId = ENT_MAIN_ID 
FROM ENTITY_MAIN 
WHERE AS_FACULTY_INFO_ID = @AsFacultyInfoId
  AND ENT_CODE_ENTITY_TYPE_ID = 2;

SELECT DISTINCT ED_CODE_COURSE_ASSESS.*
FROM ENT_POLICY_ASSESS_HDR 
     INNER JOIN ENT_POLICY_ASSESS_DTL ON ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID = ENT_POLICY_ASSESS_DTL.ENT_POLICY_ASSESS_HDR_ID 
     INNER JOIN ED_CODE_COURSE_ASSESS ON ENT_POLICY_ASSESS_DTL.ED_CODE_COURSE_ASSESS_ID = ED_CODE_COURSE_ASSESS.ED_CODE_COURSE_ASSESS_ID 
     LEFT JOIN ENT_POLICY_ASSESS_COURSE ON (ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID = ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID)
WHERE (ENT_POLICY_ASSESS_HDR.IS_GENERAL = 1 OR (ENT_POLICY_ASSESS_HDR.IS_GENERAL <> 1 AND ENT_POLICY_ASSESS_COURSE.ED_COURSE_ID = @EdCourseID))
  AND ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID = @EntMainId 
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_OPEN_ACAD_SEMESTER_GetNextAcadYears_ForDrp">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_OPEN_ACAD_SEMESTER table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
declare @order int;

select @order=y1.YEAR_ORDER 
from ED_ACAD_YEAR y1
where y1.ED_ACAD_YEAR_ID=@EdAcadYearId;

select y2.ED_ACAD_YEAR_ID,y2.DESCR_AR,y2.DESCR_EN 
from ED_ACAD_YEAR y2
where y2.YEAR_ORDER >= @order
order by y2.YEAR_ORDER;
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_OPEN_ACAD_SEMESTER_GetNextSemesters_ForDrp">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_OPEN_ACAD_SEMESTER table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
declare @order int;

select @order=y1.SEMESTER_ORDER
from ED_CODE_SEMESTER y1
where y1.ED_CODE_SEMESTER_ID=@EdCodeSemesterId;

select y2.ED_CODE_SEMESTER_ID,y2.DESCR_AR,y2.DESCR_EN 
from ED_CODE_SEMESTER y2
where y2.SEMESTER_ORDER >= @order
order by y2.SEMESTER_ORDER;
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetNextSemester">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_OPEN_ACAD_SEMESTER table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
declare @SemOrder int;
select @SemOrder=ED_CODE_SEMESTER.SEMESTER_ORDER from ED_CODE_SEMESTER where ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId;

declare @acadYearOrder int;
select @acadYearOrder=ED_ACAD_YEAR.YEAR_ORDER from ED_ACAD_YEAR where ED_ACAD_YEAR.ED_ACAD_YEAR_ID = @EdAcadYearId;


if exists (select top 1 ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID from ED_CODE_SEMESTER where ED_CODE_SEMESTER.SEMESTER_ORDER > @SemOrder and ED_CODE_SEMESTER.ED_CODE_SEMESTER_TYPE_ID is not null order by ED_CODE_SEMESTER.SEMESTER_ORDER)
begin

declare @NextSem numeric(3,0);
select @NextSem=t.ED_CODE_SEMESTER_ID from
(select top 1 ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID from ED_CODE_SEMESTER where ED_CODE_SEMESTER.SEMESTER_ORDER > @SemOrder and ED_CODE_SEMESTER.ED_CODE_SEMESTER_TYPE_ID is not null order by ED_CODE_SEMESTER.SEMESTER_ORDER) as t;

select @EdAcadYearId as Ed_Acad_Year_Id, @NextSem as Ed_Code_Semester_Id;
end
else
begin

if exists (select top 1 ED_ACAD_YEAR.ED_ACAD_YEAR_ID from ED_ACAD_YEAR where ED_ACAD_YEAR.YEAR_ORDER > @acadYearOrder order by ED_ACAD_YEAR.YEAR_ORDER)
begin

declare @NextAcadYear numeric(5,0);
select @NextAcadYear=t.ED_ACAD_YEAR_ID from
(select top 1 ED_ACAD_YEAR.ED_ACAD_YEAR_ID from ED_ACAD_YEAR where ED_ACAD_YEAR.YEAR_ORDER > @acadYearOrder order by ED_ACAD_YEAR.YEAR_ORDER) as t;

declare @FirstSem numeric(3,0);
select @FirstSem=t2.ED_CODE_SEMESTER_ID from
(select top 1 ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID from ED_CODE_SEMESTER where ED_CODE_SEMESTER.ED_CODE_SEMESTER_TYPE_ID is not null order by ED_CODE_SEMESTER.SEMESTER_ORDER) as t2;

select @NextAcadYear as Ed_Acad_Year_Id, @FirstSem as Ed_Code_Semester_Id;

end

end
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SearchStudEnrollChange">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_ENROLL_CHANGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@ApproveFlg" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
			select 
      
            ED_STUD_ENROLL_CHANGE.ED_STUD_ENROLL_CHANGE_ID as EdStudEnrollChangeId,
            ED_STUD_FACULTY.STUD_FACULTY_CODE,
            ED_STUD.FULL_NAME_AR,
            ED_STUD.FULL_NAME_EN,
            ED_CODE_LEVEL.DESCR_AR as LevelDescAr,
            ED_CODE_LEVEL.DESCR_EN as LevelDescrEn,
            oldEnroll.DESCR_AR as OldEnrollDescAr,
            oldEnroll.DESCR_EN as OldEnrollDescEn,
            NewEnroll.DESCR_AR as NewEnrollDescAr,
            NewEnroll.DESCR_EN as NewEnrollDescEn,
            ED_STUD_ENROLL_CHANGE.CHANGE_DATE

      from ED_STUD_ENROLL_CHANGE inner join ED_STUD_SEMESTER 
            on ED_STUD_ENROLL_CHANGE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
            inner join ED_STUD on ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
            inner join ED_STUD_FACULTY on (ED_STUD_SEMESTER.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and 
            ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=ED_STUD_FACULTY.AS_FACULTY_INFO_ID)
            left outer join ED_CODE_LEVEL on ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=ED_CODE_LEVEL.ED_CODE_LEVEL_ID
            left outer join ED_CODE_ENROLL_TYPE oldEnroll on oldEnroll.ED_CODE_ENROLL_TYPE_ID=ED_STUD_ENROLL_CHANGE.ED_CODE_ENROLL_TYPE_OLD_ID
            left outer join ED_CODE_ENROLL_TYPE NewEnroll on NewEnroll.ED_CODE_ENROLL_TYPE_ID=ED_STUD_ENROLL_CHANGE.ED_CODE_ENROLL_TYPE_NEW_ID
      where
            (ED_STUD_ENROLL_CHANGE.IS_LAST=1)
            and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId
            and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId
            and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
            and (@FromDate is null or ED_STUD_ENROLL_CHANGE.CHANGE_DATE>=@FromDate)
            and (@ToDate is null or ED_STUD_ENROLL_CHANGE.CHANGE_DATE<=@ToDate)
            and (@EdCodeEnrollTypeId is null or ED_STUD_ENROLL_CHANGE.ED_CODE_ENROLL_TYPE_NEW_ID=@EdCodeEnrollTypeId)
            and (@ApproveFlg is null or ED_STUD_ENROLL_CHANGE.APPROVE_FLG=@ApproveFlg)

				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetEnrollChngByStudFacultyId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_ENROLL_CHANGE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
			select ED_ACAD_YEAR.DESCR_AR as AcadDescrAr,
      ED_ACAD_YEAR.DESCR_EN as AcadDescrEn,
      ED_CODE_SEMESTER.DESCR_AR as SemDescrAr,
      ED_CODE_SEMESTER.DESCR_EN as SemDescrEn,
      old.DESCR_AR as OldEnrollDescrAr,
      old.DESCR_EN as OldEnrollDescrEn,
      new.DESCR_AR as NewEnrollDescrAr,
      new.DESCR_EN as NewEnrollDescrEn,
      ED_STUD_ENROLL_CHANGE.CHANGE_DATE

      from ED_STUD_ENROLL_CHANGE inner join ED_STUD_SEMESTER 
      on ED_STUD_ENROLL_CHANGE.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
      inner join ED_STUD on ED_STUD_SEMESTER.ED_STUD_ID=ED_STUD.ED_STUD_ID
      inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
      and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=ED_STUD_SEMESTER.AS_FACULTY_INFO_ID)
      inner join ED_ACAD_YEAR on ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=ED_ACAD_YEAR.ED_ACAD_YEAR_ID
      inner join ED_CODE_SEMESTER on ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
      left outer join ED_CODE_ENROLL_TYPE old on old.ED_CODE_ENROLL_TYPE_ID=ED_STUD_ENROLL_CHANGE.ED_CODE_ENROLL_TYPE_OLD_ID
      left outer join ED_CODE_ENROLL_TYPE new on new.ED_CODE_ENROLL_TYPE_ID=ED_STUD_ENROLL_CHANGE.ED_CODE_ENROLL_TYPE_NEW_ID

      where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
      and ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId


				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetAdmAppPlaceExamCource_Search">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_PLACE_EXAM_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AdmEdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AdmEdCodeSemesterId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ADM_APP_PLACE_EXAM_COURSE].[ADM_APP_PLACE_EXAM_COURSE_ID],
					[dbo].[ADM_APP_PLACE_EXAM_COURSE].[ADM_APPLICANT_ID],
					[dbo].[ADM_APP_PLACE_EXAM_COURSE].[ED_COURSE_ID],
          ADM_APPLICANT.ADM_APP_CODE,
          ADM_APPLICANT.FULL_NAME_AR,
          ADM_APPLICANT.FULL_NAME_EN,
          ED_CODE_QUAL.DESCR_AR,
          ED_CODE_QUAL.DESCR_EN
				FROM
					[dbo].[ADM_APP_PLACE_EXAM_COURSE] inner join ADM_APPLICANT on 
          ADM_APPLICANT.ADM_APPLICANT_ID=[dbo].[ADM_APP_PLACE_EXAM_COURSE].ADM_APPLICANT_ID
          left outer join ED_CODE_QUAL on ED_CODE_QUAL.ED_CODE_QUAL_ID=ADM_APPLICANT.ADM_CDE_CERT_TYPE_ID
				WHERE
					[ED_COURSE_ID] = @EdCourseId and ADM_APPLICANT.ED_ACAD_YEAR_ID=@AdmEdAcadYearId
                  and ADM_APPLICANT.ED_CODE_SEMESTER_ID=@AdmEdCodeSemesterId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="LoadCourseOnApplicants">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_PLACE_EXAM_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
          declare @MaxAdmAppPlaceExam numeric
	          SELECT @MaxAdmAppPlaceExam=MAX(ADM_APP_PLACE_EXAM_COURSE_ID) FROM dbo.ADM_APP_PLACE_EXAM_COURSE 
          	if(@MaxAdmAppPlaceExam is null)
             set @MaxAdmAppPlaceExam=0;
             
             
             declare @CurrentAdmAcadYearId numeric,@CurrentAdmCodeSemesterId numeric
             
             select top 1 @CurrentAdmAcadYearId=ED_ACAD_YEAR_ID from ADM_OPEN_ACAD_SEMESTER where
             IS_CURRENT=1;
             
             select top 1 @CurrentAdmCodeSemesterId=ED_CODE_SEMESTER_ID from ADM_OPEN_ACAD_SEMESTER where
             IS_CURRENT=1;
             
             
             
             
             
	          INSERT INTO dbo.ADM_APP_PLACE_EXAM_COURSE 
                    (
                    ADM_APP_PLACE_EXAM_COURSE_ID,
                    ADM_APPLICANT_ID,
                    ED_COURSE_ID
                    )
	          SELECT @MaxAdmAppPlaceExam+ROW_NUMBER() over(order by (dbo.[ADM_APPLICANT].[ADM_APPLICANT_ID]))  as rownum  ,
	          ADM_APPLICANT_ID,@EdCourseId
	          From ADM_APPLICANT
                  WHERE ADM_APPLICANT.ADM_CDE_STATUS_ID=2  and ADM_APPLICANT.ED_ACAD_YEAR_ID=@CurrentAdmAcadYearId
                  and ADM_APPLICANT.ED_CODE_SEMESTER_ID=@CurrentAdmCodeSemesterId
                  and not exists(select 'a' from dbo.ADM_APP_PLACE_EXAM_COURSE T1
                  where T1.ADM_APPLICANT_ID=ADM_APPLICANT.ADM_APPLICANT_ID and
                  T1.ED_COURSE_ID=@EdCourseId )
                  
				    SELECT
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE].[ADM_APP_PLACE_EXAM_COURSE_ID],
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE].[ADM_APPLICANT_ID],
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE].[ED_COURSE_ID],
              ADM_APPLICANT.ADM_APP_CODE,
              ADM_APPLICANT.FULL_NAME_AR,
              ADM_APPLICANT.FULL_NAME_EN,
              ED_CODE_Qual.DESCR_AR,
              ED_CODE_Qual.DESCR_EN
				    FROM
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE] inner join ADM_APPLICANT on 
              ADM_APPLICANT.ADM_APPLICANT_ID=[dbo].[ADM_APP_PLACE_EXAM_COURSE].ADM_APPLICANT_ID
              left outer join ED_CODE_Qual on ED_CODE_Qual.ED_CODE_Qual_ID=ADM_APPLICANT.ADM_CDE_CERT_TYPE_ID
				    WHERE
					    [ED_COURSE_ID] = @EdCourseId  and ADM_APPLICANT.ED_ACAD_YEAR_ID=@CurrentAdmAcadYearId
                  and ADM_APPLICANT.ED_CODE_SEMESTER_ID=@CurrentAdmCodeSemesterId
    				
				    SELECT @@ROWCOUNT
				  SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="UnLoadCourseOnApplicants">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_PLACE_EXAM_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
        
        
         declare @CurrentAdmAcadYearId numeric,@CurrentAdmCodeSemesterId numeric
             
             select top 1 @CurrentAdmAcadYearId=ED_ACAD_YEAR_ID from ADM_OPEN_ACAD_SEMESTER where
             IS_CURRENT=1;
             
             select top 1 @CurrentAdmCodeSemesterId=ED_CODE_SEMESTER_ID from ADM_OPEN_ACAD_SEMESTER where
             IS_CURRENT=1;
             
             
				
          delete from  [dbo].[ADM_APP_PLACE_EXAM_COURSE]
          where ed_course_id=@EdCourseId and exists
          (select 'a' from  ADM_APPLICANT where
             ADM_APPLICANT.ADM_APPLICANT_ID=[dbo].[ADM_APP_PLACE_EXAM_COURSE].ADM_APPLICANT_ID and
             ADM_APPLICANT.TRANSFER_FLG=0 and ADM_APPLICANT.ED_ACAD_YEAR_ID=@CurrentAdmAcadYearId
                  and ADM_APPLICANT.ED_CODE_SEMESTER_ID=@CurrentAdmCodeSemesterId
          )
          
                  
				      SELECT
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE].[ADM_APP_PLACE_EXAM_COURSE_ID],
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE].[ADM_APPLICANT_ID],
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE].[ED_COURSE_ID],
              ADM_APPLICANT.ADM_APP_CODE,
              ADM_APPLICANT.FULL_NAME_AR,
              ADM_APPLICANT.FULL_NAME_EN,
              ED_CODE_Qual.DESCR_AR,
              ED_CODE_Qual.DESCR_EN
				    FROM
					    [dbo].[ADM_APP_PLACE_EXAM_COURSE] inner join ADM_APPLICANT on 
              ADM_APPLICANT.ADM_APPLICANT_ID=[dbo].[ADM_APP_PLACE_EXAM_COURSE].ADM_APPLICANT_ID
              left outer join ED_CODE_Qual on ED_CODE_Qual.ED_CODE_Qual_ID=ADM_APPLICANT.ADM_CDE_CERT_TYPE_ID
				    WHERE
					    [ED_COURSE_ID] = @EdCourseId  and ADM_APPLICANT.ED_ACAD_YEAR_ID=@CurrentAdmAcadYearId
                  and ADM_APPLICANT.ED_CODE_SEMESTER_ID=@CurrentAdmCodeSemesterId
    				
				    SELECT @@ROWCOUNT
				  SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_ADVANCED_SEARCH">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, February 28, 2011

-- Created By:  (Abdallah Gomah)
-- Purpose: Select records from the ADM_APPLICANT.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ENT_MAIN_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ADM_CDE_CERT_TYPE_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Citizen" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FULL_NAME_EN" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="" />
        <parameter name="@FULL_NAME_AR" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="" />
        <parameter name="@IDENT_NUM" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
		SELECT ADM_APPLICANT.*
		FROM ADM_APPLICANT LEFT JOIN GS_COUNTRY_INFO ON (ADM_APPLICANT.GS_COUNTRY_INFO_ID_1 = GS_COUNTRY_INFO.GS_COUNTRY_INFO_ID)
		     LEFT JOIN GS_COUNTRY_NODE ON (GS_COUNTRY_INFO.GS_COUNTRY_NODE_ID = GS_COUNTRY_NODE.GS_COUNTRY_NODE_ID)
		WHERE ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID 
		  AND ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID
		  AND ENT_MAIN_ID = @ENT_MAIN_ID
		  AND (ADM_CDE_CERT_TYPE_ID = @ADM_CDE_CERT_TYPE_ID OR @ADM_CDE_CERT_TYPE_ID IS NULL)
		  AND (@Citizen IS NULL OR GS_COUNTRY_NODE.IS_NODE_LOCAL = @Citizen)
		  AND (@FULL_NAME_EN IS NULL OR FULL_NAME_EN LIKE @FULL_NAME_EN)
		  AND (@FULL_NAME_AR IS NULL OR FULL_NAME_AR LIKE @FULL_NAME_AR)
		  AND (@IDENT_NUM IS NULL OR IDENT_NUM LIKE @IDENT_NUM)
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_LOAD_GetByFaculty">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Selects academic load of a specific faculty.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
DECLARE @FacultyEntMainID NUMERIC(9, 0), @EntMainId NUMERIC(9, 0)
SELECT @FacultyEntMainID = ENT_MAIN_ID FROM ENTITY_MAIN WHERE AS_FACULTY_INFO_ID = @AsFacultyInfoId AND ENT_CODE_ENTITY_TYPE_ID = 2

SET @EntMainId = @FacultyEntMainID 
WHILE NOT EXISTS(SELECT * FROM ENT_POLICY_LOAD WHERE ENT_MAIN_ID = @EntMainId)
BEGIN
	DECLARE @NewEntMainId NUMERIC(9, 0)
	SELECT @NewEntMainId = ENT_PARENT_ID FROM ENTITY_MAIN WHERE ENT_MAIN_ID = @EntMainId;
	
	IF @NewEntMainId = @EntMainId 
		BREAK;
		
	SET @EntMainId = @NewEntMainId 
END

SELECT *
FROM ENT_POLICY_LOAD
WHERE ENT_MAIN_ID = @EntMainId
  AND ED_CODE_SEMESTER_TYPE_ID = @EdCodeSemesterTypeId 
ORDER BY SR_NO
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_FACULTY_INSTALLMENT_GetStudsArrears" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Get students that didn't pay all installments due current date.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@DepartmentId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
          EXEC VW_RPT_StudInstallmentArrears @EdAcadYearId, @AsFacultyInfoId, @DepartmentId, @EdCodeLevelId				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetAllForHonorDegree" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Get students that didn't pay all installments due current date.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeGradingTypeId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
SELECT     ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID, 
           ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID, 
           ENT_POLICY_GRADING_DTL.DESCR_AR, 
           ENT_POLICY_GRADING_DTL.DESCR_EN
           
FROM         ENT_POLICY_GRADING_HDR INNER JOIN
                      ENT_POLICY_GRADING_DTL ON 
                      ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID
where ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID = @EdCodeGradingTypeId
and ENT_POLICY_GRADING_HDR.ENT_MAIN_ID = @EntMainId

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetHonorDegreeForStudent" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdallah Gomah)
-- Purpose: Get students that didn't pay all installments due current date.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@CGPA" type="numeric" direction="Input" size="5" precision="5" scale="3" param="(5, 3)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
-------------------------------------------------------------------------
declare @flg int = 1; -- pass(1) / fail(0) flag for the student
declare @StudHonorTable table
(
EntPolicyAccumHonorId numeric(5,0),
PassFlg int
);

-- Get Ent_Main_Id for faculty
declare @EntMainId numeric(5,0);
select @EntMainId = ENTITY_MAIN.ENT_MAIN_ID from ENTITY_MAIN where ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=2;

-- Loop in the honor degree on the faculty.
declare @EntPolicyAccumHonorId numeric(5,0), @AllowSubjFailure numeric(1,0), @GpaPointFrom numeric(5,3), @GpaPointTo numeric(5,3),@MinLvlGradeId numeric(3,0),@MaxNoYears numeric(1,0);
declare Honor_Cur cursor for
select ENT_POLICY_ACCUM_HONOR_ID,ALLOW_SUBJ_FAILURE,GPA_POINT_FRM,GPA_POINT_TO,MIN_LVL_GRADE_ID,MAX_NO_YEARS from ENT_POLICY_ACCUM_HONOR where ENT_MAIN_ID = @EntMainId
open Honor_Cur

fetch next from Honor_Cur into @EntPolicyAccumHonorId,@AllowSubjFailure,@GpaPointFrom,@GpaPointTo,@MinLvlGradeId,@MaxNoYears
while(@@FETCH_STATUS = 0)
begin
--print @AllowSubjFailure;
declare @FailCoursesCount int = 0;
SELECT    @FailCoursesCount = COUNT(ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID)
FROM         ED_STUD_COURSE_REG INNER JOIN
             ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)and(ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)and(ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID = 2); -- count failed courses for the student


--print isnull(@GpaPointFrom,0);
--print isnull(@GpaPointTo,0);
declare @gpaFlg int = 0;
if(@GpaPointFrom > 0 and @GpaPointTo >0)
begin
	if(@CGPA> @GpaPointFrom and @CGPA <= @GpaPointTo)
	set @gpaFlg = 1;
	else
	set @gpaFlg = 0;
end


--print isnull(@MinLvlGradeId,0);
declare @lvlGradeFlg int = 0;
if(isnull(@MinLvlGradeId,0)<>0)
begin
	
	-- table to save for each level count of grades equal to or grater than the minGrade defined for the level
	declare @LevelGradeTable table
	(
	edCodeLevelId int,
	countPassGrades int
	);
	
	declare @Grade_Order int; -- for getting the order of the MinLevelGrade
	select @Grade_Order = CONVERT(int,ED_CODE_GRADING.GRAD_ORDER) from ED_CODE_GRADING where ED_CODE_GRADING.ED_CODE_GRADING_ID = @MinLvlGradeId;

	declare @EdCodeLevelId numeric(2,0);
	declare StudentLevel_Cur cursor for   -- loop in all the levels of the student
	select distinct ED_STUD_SEMESTER.ED_CODE_LEVEL_ID from ED_STUD_SEMESTER where ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	open StudentLevel_Cur

	fetch next from StudentLevel_Cur into @EdCodeLevelId
	while(@@FETCH_STATUS = 0)
	begin

	declare @CGPA_EdCodeSemesterId numeric(3,0),@CGPA_EdAcadYearId numeric(5,0);
	-- Get the last Semester for the level to calculate the CGPA for the level
	SELECT    top(1) @CGPA_EdCodeSemesterId = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID, 
					@CGPA_EdAcadYearId = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
	FROM         ED_STUD_SEMESTER INNER JOIN
						  ED_CODE_SEMESTER ON ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
						  ED_ACAD_YEAR ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID
	where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
	and ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @EdCodeLevelId
	order by ED_ACAD_YEAR.YEAR_ORDER desc,ED_CODE_SEMESTER.SEMESTER_ORDER desc;

	declare @Level_CGPA numeric(5,3); -- Calculate level CGPA
	set @Level_CGPA = isnull(dbo.FN_GetStudCGPA(@EdStudId,@AsFacultyInfoId,@CGPA_EdAcadYearId,@CGPA_EdCodeSemesterId),0);

	declare @grade_Count int=0; -- Get the Grade of the CGPA count (1) if the grade equal or greater than the MinLevelGrade
	SELECT   @grade_Count = COUNT(ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID)
	FROM         ENT_POLICY_GRADING_HDR INNER JOIN
						  ENT_POLICY_GRADING_DTL ON 
						  ENT_POLICY_GRADING_HDR.ENT_POLICY_GRADING_HDR_ID = ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID INNER JOIN
						  ED_CODE_GRADING ON ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID
	WHERE     (ENT_POLICY_GRADING_DTL.MIN_RATE > @Level_CGPA) 
	AND (ENT_POLICY_GRADING_DTL.MAX_RATE <= @Level_CGPA)
	and (CONVERT(int,ED_CODE_GRADING.GRAD_ORDER)>=@Grade_Order)

	insert into @LevelGradeTable values (@EdCodeLevelId,@grade_Count); -- Save level and grade count
	
	fetch next from StudentLevel_Cur into @EdCodeLevelId
	end
	close StudentLevel_Cur
	deallocate StudentLevel_Cur;

	-- get the count of the levels that has count (0) for grades. [Levels have grade less than the MinLevelGrade]
	select @lvlGradeFlg = COUNT(*) from @LevelGradeTable where countPassGrades = 0;

end


--print isnull(@MaxNoYears,0);
declare @yearsCount int = 0;
select @yearsCount = COUNT(distinct ED_STUD_SEMESTER.ED_ACAD_YEAR_ID) from ED_STUD_SEMESTER where ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId;


-- Check all conditions for student to pass honor degree
if((@FailCoursesCount>0 and @AllowSubjFailure = 0)  -- for failed subjects
	or (@gpaFlg=0)									-- for Acum GPA
	or (@lvlGradeFlg > 0)							-- for level Grades
	or (@yearsCount>@MaxNoYears))					-- for number of years
set @flg = 0;

insert into @StudHonorTable values (@EntPolicyAccumHonorId, @flg); -- save the honor degree and the pass/fail flag

fetch next from Honor_Cur into @EntPolicyAccumHonorId,@AllowSubjFailure,@GpaPointFrom,@GpaPointTo,@MinLvlGradeId,@MaxNoYears
end
close Honor_Cur
deallocate Honor_Cur;

select * from @StudHonorTable;

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="InsertNewControlRoomWithHeadMember">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="3" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@CoControlId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@UserName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@Password" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@SecretQuestion" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@SecretAnswer" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@CreatorSeUserId" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@ControlRoomHeadAccount" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

if(@EdCodeLevelId=0)
set @EdCodeLevelId = null;

declare @Valid int = 1;

declare @countAll int;
Select @countAll = COUNT(*) from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId;;
if(@countAll = 0)
begin
	set @Valid = 1;
end
else
begin

declare @EntType numeric(3,0);
select @EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;
if(@EntType = 2 AND @EdCodeLevelId = null)
begin
	RAISERROR('ERROR_Faculty_or_Levels_found',16,-1);
	set @Valid = 0;
end
else
begin

declare @Cur_EdCodeLevelId numeric(2,0),@Cur_EntMainId numeric(5,0);
declare AllRooms Cursor for Select ED_CODE_LEVEL_ID,ENT_MAIN_ID from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId;
open AllRooms;

fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
while @@FETCH_STATUS = 0
begin

	declare @Cur_EntType numeric(3,0);
	select @Cur_EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @Cur_EntMainId;
	if(@Cur_EntType = 2 and (@Cur_EdCodeLevelId is null or @Cur_EdCodeLevelId = 0))
	begin
		RAISERROR('ERROR_Faculty_found',16,-1);
		set @Valid = 0;
		break;
	end
	else
	begin
		if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 2)
		begin
		RAISERROR('ERROR_Level_found',16,-1);
		set @Valid = 0;
		break;
		end
		else
		begin
			if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 3 and @Cur_EntMainId = @EntMainId)
			begin
			RAISERROR('ERROR_Level_Dept_found',16,-1);
			set @Valid = 0;
			break;
			end
		end
	end

	fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
end

close AllRooms;
deallocate AllRooms;
end

end


declare @countUsers int;
select @countUsers=COUNT(*) from SE_USER where SE_USER.LOGIN_NAME = @UserName;

if(@countUsers=0)
begin

if(@Valid = 1)
begin
begin transaction t1;
begin try

-- create Control Room 
declare @coControlRoomId numeric(6,0) ;
select @coControlRoomId= isnull(max(CO_CONTROL_ROOM_ID),0)+1 from CO_CONTROL_ROOM;
insert into CO_CONTROL_ROOM(CO_CONTROL_ROOM_ID,
							ENT_MAIN_ID,
							ED_CODE_LEVEL_ID,
							CO_CONTROL_ID,
							AS_FACULTY_INFO_ID)
					values(@coControlRoomId,
							@EntMainId,
							@EdCodeLevelId,
							@CoControlId,
							@AsFacultyInfoId);

-- Create User to Room Head Member
declare @seUserId numeric(7,0);
select @seUserId= isnull(max(SE_USER_ID),0)+1 from SE_USER;
insert into SE_USER (SE_USER_ID,
					SE_USER_TYPE_ID,
					[USER_NAME],
					LOGIN_NAME,
					[PASSWORD],
					PWD_EXPIRE_DATE,
					SECURITY_QUESTION,
					SEQURITY_ANS,
					CREATOR_USER_ID,
					CREATION_DATE,
					LAST_LOGIN_DATE,
					[STATUS],
					FAILED_ATTEMPTS_NUM,
					SA_STF_MEMBER_ID)
			values (@seUserId,
					11,
					@UserName,
					@UserName,
					@Password,
					DATEADD(year,1,GETDATE()),
					@SecretQuestion,
					@SecretAnswer,
					@CreatorSeUserId,
					GETDATE(),
					GETDATE(),
					1,
					0,
					@SaStfMemberId);

-- Create User Account For Room Head Member
declare @seUserAccntId numeric(9,0);
select @seUserAccntId= isnull(max(SE_USER_ACCNT_ID),0)+1 from SE_USER_ACCNT;
insert into SE_USER_ACCNT (SE_USER_ACCNT_ID,
							SE_USER_ID,
							SE_ACCOUNT_ID)
					values (@seUserAccntId,
							@seUserId,
							@ControlRoomHeadAccount);

declare @SaCodeScDegId numeric(9,0);
select @SaCodeScDegId=SA_STF_MEMBER.SA_CODE_SC_DEG_ID from SA_STF_MEMBER where SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStfMemberId

-- Create Control Room Member
declare @CoContRoomMemberId numeric(6,0);
select @CoContRoomMemberId= isnull(max(CO_CONT_ROOM_MEMBER_ID),0)+1 from CO_CONT_ROOM_MEMBER;
insert into CO_CONT_ROOM_MEMBER (CO_CONT_ROOM_MEMBER_ID,
								 CO_CONTROL_ROOM_ID,
								 SE_USER_ID,
								 SA_STF_MEMBER_ID,
								 SA_CODE_SC_DEG_ID,
								 HEAD_FLG)
						values (@CoContRoomMemberId,
								@coControlRoomId,
								@seUserId,
								@SaStfMemberId,
								@SaCodeScDegId,
								1);

commit transaction t1;
end try

begin catch
rollback transaction t1;
RAISERROR('ERROR',16,-1);
end catch
end

end
else
begin
RAISERROR('Login name already exist',16,-1);
end
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="InsertNewControlRoomWithHeadMemberUserExist">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="3" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@CoControlId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@ControlRoomHeadAccount" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

if(@EdCodeLevelId=0)
set @EdCodeLevelId = null;

declare @Valid int = 1;

declare @countAll int;
Select @countAll = COUNT(*) from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId;;
if(@countAll = 0)
begin
	set @Valid = 1;
end
else
begin

declare @EntType numeric(3,0);
select @EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;
if(@EntType = 2 AND @EdCodeLevelId = null)
begin
	RAISERROR('ERROR_Faculty_or_Levels_found',16,-1);
	set @Valid = 0;
end
else
begin

declare @Cur_EdCodeLevelId numeric(2,0),@Cur_EntMainId numeric(5,0);
declare AllRooms Cursor for Select ED_CODE_LEVEL_ID,ENT_MAIN_ID from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId;
open AllRooms;

fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
while @@FETCH_STATUS = 0
begin

	declare @Cur_EntType numeric(3,0);
	select @Cur_EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @Cur_EntMainId;
	if(@Cur_EntType = 2 and (@Cur_EdCodeLevelId is null or @Cur_EdCodeLevelId = 0))
	begin
		RAISERROR('ERROR_Faculty_found',16,-1);
		set @Valid = 0;
		break;
	end
	else
	begin
		if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 2)
		begin
		RAISERROR('ERROR_Level_found',16,-1);
		set @Valid = 0;
		break;
		end
		else
		begin
			if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 3 and @Cur_EntMainId = @EntMainId)
			begin
			RAISERROR('ERROR_Level_Dept_found',16,-1);
			set @Valid = 0;
			break;
			end
		end
	end

	fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
end

close AllRooms;
deallocate AllRooms;
end

end

if(@Valid = 1)
begin
begin transaction t1;
begin try

-- create Control Room 
declare @coControlRoomId numeric(6,0) ;
select @coControlRoomId= isnull(max(CO_CONTROL_ROOM_ID),0)+1 from CO_CONTROL_ROOM;
insert into CO_CONTROL_ROOM(CO_CONTROL_ROOM_ID,
							ENT_MAIN_ID,
							ED_CODE_LEVEL_ID,
							CO_CONTROL_ID,
							AS_FACULTY_INFO_ID)
					values(@coControlRoomId,
							@EntMainId,
							@EdCodeLevelId,
							@CoControlId,
							@AsFacultyInfoId);

-- Create User to Room Head Member
declare @seUserId numeric(7,0);
select @seUserId = SE_USER.SE_USER_ID from SE_USER where SE_USER.SA_STF_MEMBER_ID = @SaStfMemberId;

-- Create User Account For Room Head Member
declare @seUserAccntId numeric(9,0);
select @seUserAccntId= isnull(max(SE_USER_ACCNT_ID),0)+1 from SE_USER_ACCNT;
if not exists(select 1 from SE_USER_ACCNT where SE_USER_ID=@seUserId and SE_ACCOUNT_ID = @ControlRoomHeadAccount)
insert into SE_USER_ACCNT (SE_USER_ACCNT_ID,
							SE_USER_ID,
							SE_ACCOUNT_ID)
					values (@seUserAccntId,
							@seUserId,
							@ControlRoomHeadAccount);

declare @SaCodeScDegId numeric(9,0);
select @SaCodeScDegId=SA_STF_MEMBER.SA_CODE_SC_DEG_ID from SA_STF_MEMBER where SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStfMemberId

-- Create Control Room Member
declare @CoContRoomMemberId numeric(6,0);
select @CoContRoomMemberId= isnull(max(CO_CONT_ROOM_MEMBER_ID),0)+1 from CO_CONT_ROOM_MEMBER;
insert into CO_CONT_ROOM_MEMBER (CO_CONT_ROOM_MEMBER_ID,
								 CO_CONTROL_ROOM_ID,
								 SE_USER_ID,
								 SA_STF_MEMBER_ID,
								 SA_CODE_SC_DEG_ID,
								 HEAD_FLG)
						values (@CoContRoomMemberId,
								@coControlRoomId,
								@seUserId,
								@SaStfMemberId,
								@SaCodeScDegId,
								1);

commit transaction t1;
end try

begin catch
rollback transaction t1;
RAISERROR('ERROR',16,-1);
end catch
end
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="UpdateControlRoom">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="3" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@CoControlId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@UserName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@Password" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@SecretQuestion" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@SecretAnswer" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@CreatorSeUserId" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@ControlRoomHeadAccount" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@ControlRoomId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[


if(@EdCodeLevelId=0)
set @EdCodeLevelId = null;

declare @Valid int = 1;

declare @countAll int;
Select @countAll = COUNT(*) from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId and CO_CONTROL_ROOM_ID <> @ControlRoomId;
if(@countAll = 0)
begin
	set @Valid = 1;
end
else
begin

declare @EntType numeric(3,0);
select @EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;
if(@EntType = 2 AND @EdCodeLevelId = null)
begin
	RAISERROR('ERROR_Faculty_or_Levels_found',16,-1);
	set @Valid = 0;
end
else
begin

declare @Cur_EdCodeLevelId numeric(2,0),@Cur_EntMainId numeric(5,0);
declare AllRooms Cursor for Select ED_CODE_LEVEL_ID,ENT_MAIN_ID from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId and CO_CONTROL_ROOM_ID <> @ControlRoomId;
open AllRooms;

fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
while @@FETCH_STATUS = 0
begin

	declare @Cur_EntType numeric(3,0);
	select @Cur_EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @Cur_EntMainId;
	if(@Cur_EntType = 2 and (@Cur_EdCodeLevelId is null or @Cur_EdCodeLevelId = 0))
	begin
		RAISERROR('ERROR_Faculty_found',16,-1);
		set @Valid = 0;
		break;
	end
	else
	begin
		if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 2)
		begin
		RAISERROR('ERROR_Level_found',16,-1);
		set @Valid = 0;
		break;
		end
		else
		begin
			if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 3 and @Cur_EntMainId = @EntMainId)
			begin
			RAISERROR('ERROR_Level_Dept_found',16,-1);
			set @Valid = 0;
			break;
			end
		end
	end

	fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
end

close AllRooms;
deallocate AllRooms;
end

end


declare @countUsers int;
select @countUsers=COUNT(*) from SE_USER where SE_USER.LOGIN_NAME = @UserName and SE_USER.SE_USER_ID not in 
(
  SELECT  SE_USER_ID FROM CO_CONT_ROOM_MEMBER where CO_CONT_ROOM_MEMBER.HEAD_FLG = 1 and CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId
);

if(@countUsers=0)
begin

if(@Valid = 1)
begin
begin transaction t1;
begin try

-- Update Control Room 
Update CO_CONTROL_ROOM
set ENT_MAIN_ID = @EntMainId,
	ED_CODE_LEVEL_ID = @EdCodeLevelId
where CO_CONTROL_ROOM_ID = @ControlRoomId;

-- Update User to Room Head Member
declare @seUserId numeric(7,0);
SELECT  @seUserId=SE_USER_ID FROM CO_CONT_ROOM_MEMBER where CO_CONT_ROOM_MEMBER.HEAD_FLG = 1 and CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId;
update SE_USER
set [USER_NAME]=@UserName,
	LOGIN_NAME = @UserName,
	[PASSWORD] = @Password,
	SECURITY_QUESTION = @SecretQuestion,
	SEQURITY_ANS = @SecretAnswer,
	SA_STF_MEMBER_ID = @SaStfMemberId
where SE_USER_ID = @seUserId;

declare @SaCodeScDegId numeric(9,0);
select @SaCodeScDegId=SA_STF_MEMBER.SA_CODE_SC_DEG_ID from SA_STF_MEMBER where SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStfMemberId

-- Update Control Room Member
update CO_CONT_ROOM_MEMBER 
set SA_STF_MEMBER_ID = @SaStfMemberId,
SA_CODE_SC_DEG_ID = @SaCodeScDegId
where CO_CONT_ROOM_MEMBER_ID=@ControlRoomId;

commit transaction t1;
end try

begin catch
rollback transaction t1;
RAISERROR('ERROR',16,-1);
end catch
end

end
else
begin
RAISERROR('Login name already exist',16,-1);
end

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="UpdateControlRoomUserExist">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="3" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="2" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@CoControlId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@ControlRoomHeadAccount" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@ControlRoomId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[



if(@EdCodeLevelId=0)
set @EdCodeLevelId = null;

declare @Valid int = 1;

declare @countAll int;
Select @countAll = COUNT(*) from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId and CO_CONTROL_ROOM_ID <> @ControlRoomId;
if(@countAll = 0)
begin
	set @Valid = 1;
end
else
begin

declare @EntType numeric(3,0);
select @EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId;
if(@EntType = 2 AND @EdCodeLevelId = null)
begin
	RAISERROR('ERROR_Faculty_or_Levels_found',16,-1);
	set @Valid = 0;
end
else
begin

declare @Cur_EdCodeLevelId numeric(2,0),@Cur_EntMainId numeric(5,0);
declare AllRooms Cursor for Select ED_CODE_LEVEL_ID,ENT_MAIN_ID from CO_CONTROL_ROOM where CO_CONTROL_ID = @CoControlId and AS_FACULTY_INFO_ID = @AsFacultyInfoId and CO_CONTROL_ROOM_ID <> @ControlRoomId;
open AllRooms;

fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
while @@FETCH_STATUS = 0
begin

	declare @Cur_EntType numeric(3,0);
	select @Cur_EntType=ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @Cur_EntMainId;
	if(@Cur_EntType = 2 and (@Cur_EdCodeLevelId is null or @Cur_EdCodeLevelId = 0))
	begin
		RAISERROR('ERROR_Faculty_found',16,-1);
		set @Valid = 0;
		break;
	end
	else
	begin
		if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 2)
		begin
		RAISERROR('ERROR_Level_found',16,-1);
		set @Valid = 0;
		break;
		end
		else
		begin
			if(@Cur_EdCodeLevelId = @EdCodeLevelId and @Cur_EntType = 3 and @Cur_EntMainId = @EntMainId)
			begin
			RAISERROR('ERROR_Level_Dept_found',16,-1);
			set @Valid = 0;
			break;
			end
		end
	end

	fetch next from AllRooms into @Cur_EdCodeLevelId,@Cur_EntMainId;
end

close AllRooms;
deallocate AllRooms;
end

end

if(@Valid = 1)
begin
begin transaction t1;
begin try

-- Update Control Room 
Update CO_CONTROL_ROOM
set ENT_MAIN_ID = @EntMainId,
	ED_CODE_LEVEL_ID = @EdCodeLevelId
where CO_CONTROL_ROOM_ID = @ControlRoomId;

-- Update User to Room Head Member
declare @seUserId numeric(7,0);
SELECT  @seUserId=SE_USER_ID FROM CO_CONT_ROOM_MEMBER where CO_CONT_ROOM_MEMBER.HEAD_FLG = 1 and CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId;
delete from SE_USER_ACCNT where SE_USER_ACCNT.SE_USER_ID = @seUserId and SE_USER_ACCNT.SE_ACCOUNT_ID = @ControlRoomHeadAccount

-- Create User to Room Head Member
select @seUserId = SE_USER.SE_USER_ID from SE_USER where SE_USER.SA_STF_MEMBER_ID = @SaStfMemberId;

-- Create User Account For Room Head Member
declare @seUserAccntId numeric(9,0);
IF NOT EXISTS (
SELECT 'a' FROM SE_USER_ACCNT
WHERE SE_USER_ID = @seUserId
AND SE_ACCOUNT_ID = @ControlRoomHeadAccount
)
BEGIN

select @seUserAccntId= isnull(max(SE_USER_ACCNT_ID),0)+1 from SE_USER_ACCNT;

insert into SE_USER_ACCNT (SE_USER_ACCNT_ID,
							SE_USER_ID,
							SE_ACCOUNT_ID)
					values (@seUserAccntId,
							@seUserId,
							@ControlRoomHeadAccount);

END

declare @SaCodeScDegId numeric(9,0);
select @SaCodeScDegId=SA_STF_MEMBER.SA_CODE_SC_DEG_ID from SA_STF_MEMBER where SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStfMemberId

-- Update Control Room Member
update CO_CONT_ROOM_MEMBER 
set SA_STF_MEMBER_ID = @SaStfMemberId,
SA_CODE_SC_DEG_ID = @SaCodeScDegId,
SE_USER_ID = @seUserId
where CO_CONTROL_ROOM_ID=@ControlRoomId;

commit transaction t1;
end try

begin catch
rollback transaction t1;
RAISERROR('ERROR',16,-1);
end catch
end

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="DeleteControlRoomWithAllItsData">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ControlRoomId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@ControlRoomHeadAccount" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@ControlRoomMemberAccount" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

begin transaction t1;
begin try

delete from SE_USER_ACCNT_FORM_DIFF where 
SE_USER_ACCNT_FORM_DIFF.SE_USER_ACCOUNT_ID in (
SELECT SE_USER_ACCNT.SE_USER_ACCNT_ID FROM SE_USER_ACCNT INNER JOIN SE_USER ON SE_USER_ACCNT.SE_USER_ID = SE_USER.SE_USER_ID INNER JOIN CO_CONT_ROOM_MEMBER ON SE_USER.SE_USER_ID = CO_CONT_ROOM_MEMBER.SE_USER_ID
where CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId and (SE_USER_ACCNT.SE_ACCOUNT_ID = @ControlRoomHeadAccount or SE_USER_ACCNT.SE_ACCOUNT_ID = @ControlRoomMemberAccount)
);

delete from SE_USER_ACCNT_COURSE where 
SE_USER_ACCNT_COURSE.SE_USER_ACCNT_ID in (
SELECT SE_USER_ACCNT.SE_USER_ACCNT_ID FROM SE_USER_ACCNT INNER JOIN SE_USER ON SE_USER_ACCNT.SE_USER_ID = SE_USER.SE_USER_ID INNER JOIN CO_CONT_ROOM_MEMBER ON SE_USER.SE_USER_ID = CO_CONT_ROOM_MEMBER.SE_USER_ID
where CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId and (SE_USER_ACCNT.SE_ACCOUNT_ID = @ControlRoomHeadAccount or SE_USER_ACCNT.SE_ACCOUNT_ID = @ControlRoomMemberAccount)
);

delete from SE_USER_ACCNT where 
SE_USER_ACCNT.SE_USER_ACCNT_ID in (
SELECT SE_USER_ACCNT.SE_USER_ACCNT_ID FROM SE_USER_ACCNT INNER JOIN SE_USER ON SE_USER_ACCNT.SE_USER_ID = SE_USER.SE_USER_ID INNER JOIN CO_CONT_ROOM_MEMBER ON SE_USER.SE_USER_ID = CO_CONT_ROOM_MEMBER.SE_USER_ID
where CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId and (SE_USER_ACCNT.SE_ACCOUNT_ID = @ControlRoomHeadAccount or SE_USER_ACCNT.SE_ACCOUNT_ID = @ControlRoomMemberAccount)
);

declare @table table(SE_USER_ID numeric(7,0),CO_CONTROL_ROOM_ID  numeric(6,0));
insert into @table select CO_CONT_ROOM_MEMBER.SE_USER_ID,CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID from CO_CONT_ROOM_MEMBER where CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId;

delete from CO_CONT_RM_MEM_COURSE
where CO_CONT_RM_MEM_COURSE.CO_CONT_ROOM_MEMBER_ID in (
select CO_CONT_ROOM_MEMBER.CO_CONT_ROOM_MEMBER_ID from CO_CONT_ROOM_MEMBER 
where CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId
);

delete from CO_CONT_ROOM_MEMBER 
where CO_CONT_ROOM_MEMBER.CO_CONTROL_ROOM_ID = @ControlRoomId;

--delete from SE_USER where 
--SE_USER.SE_USER_ID in (
--SELECT SE_USER.SE_USER_ID FROM SE_USER INNER JOIN @table CRM ON SE_USER.SE_USER_ID = CRM.SE_USER_ID
--where CRM.CO_CONTROL_ROOM_ID = @ControlRoomId
--);

delete from CO_CONTROL_ROOM 
where CO_CONTROL_ROOM.CO_CONTROL_ROOM_ID = @ControlRoomId;

commit transaction t1;
end try

begin catch
rollback transaction t1;
RAISERROR('ERROR',16,-1);
end catch

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="InsertNewRoomMember">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@coControlRoomId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@UserName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@Password" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@SecretQuestion" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@SecretAnswer" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null" />
        <parameter name="@CreatorSeUserId" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@ControlRoomMemberAccount" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
declare @countUsers int;
select @countUsers=COUNT(*) from SE_USER where SE_USER.LOGIN_NAME = @UserName;

if(@countUsers=0)
begin

begin transaction t1;
begin try

-- Create User to Room Head Member
declare @seUserId numeric(7,0);
select @seUserId= isnull(max(SE_USER_ID),0)+1 from SE_USER;
insert into SE_USER (SE_USER_ID,
					SE_USER_TYPE_ID,
					[USER_NAME],
					LOGIN_NAME,
					[PASSWORD],
					PWD_EXPIRE_DATE,
					SECURITY_QUESTION,
					SEQURITY_ANS,
					CREATOR_USER_ID,
					CREATION_DATE,
					LAST_LOGIN_DATE,
					[STATUS],
					FAILED_ATTEMPTS_NUM,
					SA_STF_MEMBER_ID)
			values (@seUserId,
					11,
					@UserName,
					@UserName,
					@Password,
					DATEADD(year,1,GETDATE()),
					@SecretQuestion,
					@SecretAnswer,
					@CreatorSeUserId,
					GETDATE(),
					GETDATE(),
					1,
					0,
					@SaStfMemberId);

-- Create User Account For Room Head Member
declare @seUserAccntId numeric(9,0);
select @seUserAccntId= isnull(max(SE_USER_ACCNT_ID),0)+1 from SE_USER_ACCNT;
insert into SE_USER_ACCNT (SE_USER_ACCNT_ID,
							SE_USER_ID,
							SE_ACCOUNT_ID)
					values (@seUserAccntId,
							@seUserId,
							@ControlRoomMemberAccount);

declare @SaCodeScDegId numeric(9,0);
select @SaCodeScDegId=SA_STF_MEMBER.SA_CODE_SC_DEG_ID from SA_STF_MEMBER where SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStfMemberId

-- Create Control Room Member
declare @CoContRoomMemberId numeric(6,0);
select @CoContRoomMemberId= isnull(max(CO_CONT_ROOM_MEMBER_ID),0)+1 from CO_CONT_ROOM_MEMBER;
insert into CO_CONT_ROOM_MEMBER (CO_CONT_ROOM_MEMBER_ID,
								 CO_CONTROL_ROOM_ID,
								 SE_USER_ID,
								 SA_STF_MEMBER_ID,
								 SA_CODE_SC_DEG_ID,
								 HEAD_FLG,
                 NOTES)
						values (@CoContRoomMemberId,
								@coControlRoomId,
								@seUserId,
								@SaStfMemberId,
								@SaCodeScDegId,
								0,
                @Notes);

commit transaction t1;
end try

begin catch
rollback transaction t1;
RAISERROR('ERROR',16,-1);
end catch

end
else
begin
RAISERROR('Login name already exist',16,-1);
end

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="InsertNewRoomMemberUserExist">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@coControlRoomId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@ControlRoomMemberAccount" type="numeric" direction="Input" size="7" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

begin transaction t1;
begin try

-- Create User to Room Head Member
declare @seUserId numeric(7,0);
select @seUserId= SE_USER_ID from SE_USER where SE_USER.SA_STF_MEMBER_ID = @SaStfMemberId;

-- Create User Account For Room Head Member
declare @seUserAccntId numeric(9,0);
select @seUserAccntId= isnull(max(SE_USER_ACCNT_ID),0)+1 from SE_USER_ACCNT;
insert into SE_USER_ACCNT (SE_USER_ACCNT_ID,
							SE_USER_ID,
							SE_ACCOUNT_ID)
					values (@seUserAccntId,
							@seUserId,
							@ControlRoomMemberAccount);

declare @SaCodeScDegId numeric(9,0);
select @SaCodeScDegId=SA_STF_MEMBER.SA_CODE_SC_DEG_ID from SA_STF_MEMBER where SA_STF_MEMBER.SA_STF_MEMBER_ID = @SaStfMemberId

-- Create Control Room Member
declare @CoContRoomMemberId numeric(6,0);
select @CoContRoomMemberId= isnull(max(CO_CONT_ROOM_MEMBER_ID),0)+1 from CO_CONT_ROOM_MEMBER;
insert into CO_CONT_ROOM_MEMBER (CO_CONT_ROOM_MEMBER_ID,
								 CO_CONTROL_ROOM_ID,
								 SE_USER_ID,
								 SA_STF_MEMBER_ID,
								 SA_CODE_SC_DEG_ID,
								 HEAD_FLG,
                 NOTES)
						values (@CoContRoomMemberId,
								@coControlRoomId,
								@seUserId,
								@SaStfMemberId,
								@SaCodeScDegId,
								0,
                @Notes);

commit transaction t1;
end try

begin catch
rollback transaction t1;
RAISERROR('ERROR',16,-1);
end catch

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetEntityTypeChildes">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CO_STUD_CHEAT table passing nullable parameters
-- Table Comment: واقعة الغش
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCodeEntityTypeId" type="numeric" direction="Input" size="6" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[

SELECT     ENT_CODE_ENTITY_TYPE.*
FROM         ENT_AVAIL_PRNT_TYPE INNER JOIN
                      ENT_CODE_ENTITY_TYPE ON 
                      ENT_AVAIL_PRNT_TYPE.ENT_CODE_ENTITY_TYPE_ID = ENT_CODE_ENTITY_TYPE.ENT_CODE_ENTITY_TYPE_ID
where ENT_AVAIL_PRNT_TYPE.ENT_CODE_ENTITY_TYPE_PRNT_ID = @EntCodeEntityTypeId


				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_STATE_GetStudStates" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_STATE table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@IsDeclared" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@IsHomeFlg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SELECT
					ED_STUD_STATE.*
				FROM
					ED_STUD_STATE INNER JOIN ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
					INNER JOIN ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
				WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
				  AND ED_STUD_STATE.IS_DECLARED = @IsDeclared
				  AND ENTITY_MAIN.IS_HOME_FLG = @IsHomeFlg
				SELECT @@ROWCOUNT
					
			]]>
      </body>

    </procedure>
    <procedure owner="dbo" name="ENT_COURSE_PKG_HDR_GetByParentEntMainId" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				declare @nodepath nvarchar(50);
        select @nodepath=ENTITY_MAIN.NODE_PATH from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @EntMainId
        SELECT
					*
				FROM
					[dbo].[ENT_COURSE_PKG_HDR]
				WHERE
					[ENT_MAIN_ID] in (
            select ENTITY_MAIN.ENT_MAIN_ID from ENTITY_MAIN where ENTITY_MAIN.NODE_PATH like @nodepath+'%');
					
			]]>
      </body>

    </procedure>
    <procedure owner="dbo" name="ED_STUD_Notifications" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="3" precision="5" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@Lang" type="numeric" direction="Input" size="1" precision="5" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
declare @Table table(Kind int,ED_STUD_ID numeric,Value nvarchar(500),URL nvarchar(500));
--New Messages------------------------------------
insert into @Table
select  1,
		t1.ED_STUD_ID,
		ISNULL(t2.NEW_MSG,0) as NEW_MSG,
		'~/UI/StudentView/Inbox.aspx'
from
(select @EdStudId as ED_STUD_ID)as t1
left outer join
(SELECT     SE_USER.ED_STUD_ID, COUNT(SV_USER_MESSAGE.SV_USER_MESSAGE_ID) as NEW_MSG
FROM         SV_USER_MESSAGE INNER JOIN
                      SV_MESSAGE ON SV_USER_MESSAGE.SV_MESSAGE_ID = SV_MESSAGE.SV_MESSAGE_ID INNER JOIN
                      SE_USER ON SV_USER_MESSAGE.SE_USER_ID = SE_USER.SE_USER_ID
where SE_USER.ED_STUD_ID = @EdStudId
and SV_MESSAGE.ED_ACAD_YEAR_ID = @EdAcadYearId
and SV_MESSAGE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and SV_USER_MESSAGE.OPENED_FLG = 0
group by SE_USER.ED_STUD_ID) as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID;
--Current Schedule--------------------------------
insert into @Table
select  2,
		t1.ED_STUD_ID,
		isnull(case @Lang when 2 then t11.COURSE_CODE+'['+t11.STF_FULL_NAME_EN+' - '+t11.GROUP_DESCR_EN+' - '+t11.SLOT_DESCR_EN+' - '+t11.HALL_DESCR_EN+' - '+t11.BUILDING_DESCR_EN+']' else t11.COURSE_CODE+' ['+t11.STF_FULL_NAME_AR+' - '+t11.GROUP_DESCR_AR+' - '+t11.SLOT_DESCR_AR+' - '+t11.HALL_DESCR_AR+' - '+t11.BUILDING_DESCR_AR+']' end,0),
		'~/UI/StudentView/StudCourseTime.aspx'
from
(select @EdStudId as ED_STUD_ID)as t1
left outer join
(SELECT    ED_STUD_GROUP.ED_STUD_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN,ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, 
                      SC_BUILDING.DESCR_AR AS BUILDING_DESCR_AR, SC_BUILDING.DESCR_EN AS BUILDING_DESCR_EN, SC_TCHNG_SLOT.DESCR_AR AS SLOT_DESCR_AR, 
                      SC_TCHNG_SLOT.DESCR_EN AS SLOT_DESCR_EN, SC_HALL.DESCR_AR AS HALL_DESCR_AR, SC_HALL.DESCR_EN AS HALL_DESCR_EN, 
                      GS_CODE_WEEK_DAY.SYMBOL, SC_SCHEDULE_DTL.GROUP_DESCR_AR, SC_SCHEDULE_DTL.GROUP_DESCR_EN
FROM         SC_SCHEDULE_DTL INNER JOIN
                      SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      SC_BUILDING ON SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID = SC_BUILDING.SC_BUILDING_ID INNER JOIN
                      SC_HALL ON SC_SCHEDULE_DTL_DAY.SC_HALL_ID = SC_HALL.SC_HALL_ID AND SC_BUILDING.SC_BUILDING_ID = SC_HALL.SC_BUILDING_ID INNER JOIN
                      SC_TCHNG_SLOT ON SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID = SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID INNER JOIN
                      GS_CODE_WEEK_DAY ON SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID = GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID AND 
                      ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_GROUP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
WHERE     (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (ED_STUD_GROUP.ED_STUD_ID = @EdStudId) AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND 
                      (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                      and GS_CODE_WEEK_DAY.DESCR_EN = datename (dw, GETDATE()))as t11
                      on t1.ED_STUD_ID = t11.ED_STUD_ID;
--New Polls---------------------------------------
declare @AllPolls int;
SELECT  @AllPolls = COUNT(SV_POLL_HDR_ID)
FROM         SV_POLL_HDR;
declare @StudPolls int;
select @StudPolls = ISNULL(t2.Stud_Polls,0) from
(select @EdStudId as ED_STUD_ID)as t1
left outer join
(SELECT   SV_STUD_POLL.ED_STUD_ID, count(SV_POLL_HDR.SV_POLL_HDR_ID) Stud_Polls
FROM         SV_STUD_POLL INNER JOIN
                      SV_POLL_DTL ON SV_STUD_POLL.SV_POLL_DTL_ID = SV_POLL_DTL.SV_POLL_DTL_ID INNER JOIN
                      SV_POLL_HDR ON SV_POLL_DTL.SV_POLL_HDR_ID = SV_POLL_HDR.SV_POLL_HDR_ID
where SV_STUD_POLL.ED_STUD_ID = @EdStudId
group by SV_STUD_POLL.ED_STUD_ID) as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID;
declare @NewPolls int;
set @NewPolls = @AllPolls-@StudPolls;
insert into @Table values(3,@EdStudId,@NewPolls,'~/UI/StudentView/StudPoll.aspx');
--FEEs------------------------------------------------
insert into @Table
SELECT    4, ED_STUD_ID, SUM( REMAIN_AMOUNT), '~/UI/FinancialAdminView/StudentBalanceView.aspx'
FROM         FEE_STUD_FEE_ITEM
where ED_STUD_ID = @EdStudId
and ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_CODE_SEMESTER_ID = @EdCodeSemesterId
group by ED_STUD_ID;
--AcadWarning------------------------------------------------
insert into @Table
select  5,
		t1.ED_STUD_ID,
		t2.SEQ_NO,
		t2.DECISION_DATE
from
(select @EdStudId as ED_STUD_ID)as t1
left outer join
(SELECT   top 1  ED_STUD_ID, SEQ_NO,DECISION_DATE
FROM         ED_STUD_ACAD_WARN
where 
ED_STUD_ACAD_WARN.CNCL_FLG = 0
and ED_STUD_ACAD_WARN.ED_STUD_ID = @EdStudId
order by ED_STUD_ACAD_WARN.SEQ_NO desc
) as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID;
--CourseApproved------------------------------------------------
insert into @Table
SELECT    6, ED_STUD_ID, case IS_COURSE_APPROVED when 1 then 'Y' else 'N' end, ''
FROM         ED_STUD_SEMESTER
where ED_STUD_ID = @EdStudId
and ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_CODE_SEMESTER_ID = @EdCodeSemesterId
--MajMin------------------------------------------------
DECLARE @edStudSemesterId NUMERIC,@asFacultyInfoId NUMERIC;
SELECT @edStudSemesterId=ED_STUD_SEMESTER_ID,@asFacultyInfoId=AS_FACULTY_INFO_ID 
FROM dbo.ED_STUD_SEMESTER 
WHERE ED_STUD_ID = @EdStudId
AND ED_ACAD_YEAR_ID = @EdAcadYearId
AND ED_CODE_SEMESTER_ID = @EdCodeSemesterId;

DECLARE @error NVARCHAR(max);
SET @error = dbo.FN_NOTIFY_STUD_MAJOR_MINOR(@asFacultyInfoId,@edStudSemesterId);

IF(@error <> '')
insert into @Table
VALUES(7, @EdStudId, @error, '~/UI/StudentView/StudBranchPreference.aspx')
--StudAbsenceAttendance------------------------------------------------
declare
@ALL_SESSION_NO numeric,
@Abs_Days numeric,
@absPerc numeric(5,2),
@attPerc numeric(5,2)

select @ALL_SESSION_NO = sum(t.ALL_SESSION_NO),@Abs_Days= sum(t.Abs_Days)  from (
SELECT   ed_stud.ED_STUD_ID,
ED_COURSE.COURSE_CODE
	  , dbo.Get_course_All_Session_No(ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID,null) ALL_SESSION_NO
      ,(     SELECT     COUNT(ED_STUD_ABSENCE_ID) 
			 FROM         ED_STUD_ABSENCE
			 WHERE  (ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID) 
				AND (ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID) 
				AND (ED_STUD_ABSENCE.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID) 
				AND (ED_STUD_ABSENCE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID)
				AND ISNULL(ED_STUD_ABSENCE.ABSENCE_FLG, 0) = 1 
				AND ISNULL(ED_STUD_ABSENCE.EXECUSE_FLG, 0) <> 1  
      )  Abs_Days
FROM  ED_OFFERING_COURSE INNER JOIN
      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID AND 
      ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = ED_STUD_FACULTY.AS_FACULTY_INFO_ID 

WHERE    
(ED_STUD.ED_STUD_ID=@EdStudId)
and (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoID)
and (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearID )
and (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterID )
) as t
group by t.ED_STUD_ID

set @absPerc = @Abs_Days * 100 /@ALL_SESSION_NO;
set @attPerc = 100 - @absPerc;

insert into @Table
VALUES(8, @EdStudId, @absPerc, @attPerc)
--------------------------------------------------
select * from @Table where Value <> '0' order by Kind;

			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetStudsForAcademicWarning" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="3" precision="5" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@Lang" type="numeric" direction="Input" size="1" precision="5" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@CGPA" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 2)" nulldefault=""/>
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="3" precision="5" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
select t1.*,ISNULL(t2.Max_Seq_No,0) as MAX_SEQ_NO 
from
(SELECT  ED_STUD.ED_STUD_ID, 
		ED_STUD_FACULTY.STUD_FACULTY_CODE, 
		ED_STUD.FULL_NAME_AR, 
		ED_STUD.FULL_NAME_EN, 
        ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) as ACCUM_GPA, 
        case @Lang when 2 then ED_CODE_LEVEL.DESCR_EN else ED_CODE_LEVEL.DESCR_AR end as Level
from
(select ED_STUD_SEMESTER.ED_STUD_ID,COUNT(ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID) as SEM_COUNT from ED_STUD_SEMESTER 
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
--and ED_STUD_SEMESTER.IS_CLOSED = 1
group by ED_STUD_SEMESTER.ED_STUD_ID) as t
inner join ED_STUD on t.ED_STUD_ID = ED_STUD.ED_STUD_ID
INNER JOIN ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID 
INNER JOIN ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
inner join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID = ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
where t.SEM_COUNT >=3
and t.ED_STUD_ID not in 
(
	SELECT ED_STUD_ID FROM ED_STUD_ACAD_WARN
	where AS_FACULTY_INFO_ID=@AsFacultyInfoId
	and ED_ACAD_YEAR_ID = @EdAcadYearId
	and ED_CODE_SEMESTER_ID = @EdCodeSemesterId
)
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID=@EdCodeLevelId)
and ISNULL(ED_STUD_SEMESTER.ACCUM_GPA,0) < @CGPA) as t1
left outer join
(select ED_STUD_ID,MAX(SEQ_NO) as MAX_SEQ_NO 
from ED_STUD_ACAD_WARN
where AS_FACULTY_INFO_ID=@AsFacultyInfoId
group by ED_STUD_ID) as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID
order by case @Lang when 2 then t1.FULL_NAME_EN else t1.FULL_NAME_AR end

			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetAllAcademicWarningForView" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="1" precision="5" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StudName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@WarnNo" type="numeric" direction="Input" size="1" precision="5" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[

SELECT     ED_STUD_ACAD_WARN.ED_STUD_ACAD_WARN_ID, 
			ED_STUD_ACAD_WARN.ED_STUD_ID, 
			ED_STUD_FACULTY.STUD_FACULTY_CODE, 
			ED_STUD.FULL_NAME_AR, 
            ED_STUD.FULL_NAME_EN, 
            ED_STUD_ACAD_WARN.DECISION_DATE, 
            ED_STUD_ACAD_WARN.SEQ_NO, 
            ED_STUD_ACAD_WARN.STUD_CGPA, 
            ED_CODE_LEVEL.DESCR_AR, 
            ED_CODE_LEVEL.DESCR_EN
            
FROM         ED_STUD_ACAD_WARN INNER JOIN
                      ED_STUD ON ED_STUD_ACAD_WARN.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_STUD_ACAD_WARN.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_STUD_ACAD_WARN.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID AND 
                      ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID AND 
                      ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID INNER JOIN
                      AS_FACULTY_INFO ON ED_STUD_ACAD_WARN.AS_FACULTY_INFO_ID = AS_FACULTY_INFO.AS_FACULTY_INFO_ID AND 
                      ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = AS_FACULTY_INFO.AS_FACULTY_INFO_ID
where ED_STUD_ACAD_WARN.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and (@EdCodeLevelId is null or @EdCodeLevelId=0 or ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = @EdCodeLevelId)
and ED_STUD_ACAD_WARN.CNCL_FLG = 0
and(@FromDate = '1/1/1900' or (ED_STUD_ACAD_WARN.DECISION_DATE >= @FromDate and ED_STUD_ACAD_WARN.DECISION_DATE < @ToDate))
and(@StudName = '' or (@Lang = 2 and ED_STUD.FULL_NAME_EN like '%'+@StudName+'%') or (@Lang = 1 and ED_STUD.FULL_NAME_AR like '%'+@StudName+'%'))
and (@WarnNo is null or @WarnNo = 0 or ED_STUD_ACAD_WARN.SEQ_NO=@WarnNo)
order by case @Lang when 2 then ED_STUD.FULL_NAME_EN else ED_STUD.FULL_NAME_AR end

			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetStudentEmails" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
SELECT     ED_STUD_CONTACT_METHOD.ED_STUD_ID, ED_STUD_CONTACT_METHOD.METHOD_DESCR
FROM         ED_STUD_CONTACT_METHOD INNER JOIN
                      GS_CODE_CONTACT_METHOD ON 
                      ED_STUD_CONTACT_METHOD.GS_CODE_CONTACT_METHOD_ID = GS_CODE_CONTACT_METHOD.GS_CODE_CONTACT_METHOD_ID
where ED_STUD_CONTACT_METHOD.ED_STUD_ID = @EdStudId
and ED_STUD_CONTACT_METHOD.GS_CODE_CONTACT_METHOD_ID = 1
union
SELECT     ADM_APPLICANT.ED_STUD_ID,ADM_APP_REG.E_MAIL
FROM         ADM_APP_REG INNER JOIN
                      ADM_APPLICANT ON ADM_APP_REG.ADM_APP_REG_ID = ADM_APPLICANT.ADM_APP_REG_ID
where ADM_APPLICANT.ED_STUD_ID = @EdStudId

			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetStudsForAttendanceWarning" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="3" precision="5" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@FromPercent" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@ToPercent" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@SeqNo" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
select * from

(select  t1.*,
		ISNULL(t2.STUDENT_ABSENCE_COUNT,0) as STUDENT_ABSENCE_COUNT,
		--((ISNULL(t2.STUDENT_ABSENCE_COUNT,0)/t1.ALL_SESSION_NO) * 100) as STUDENT_ABSENCE_PERCENT,
    ((ISNULL(t2.STUDENT_ABSENCE_COUNT/t1.ALL_SESSION_NO,0)) * 100) as STUDENT_ABSENCE_PERCENT,
		isnull(t3.Seq_No,0) as Seq_No
from
(SELECT  distinct    ED_STUD_SEMESTER.ED_STUD_ID, 
			ED_STUD_FACULTY.STUD_FACULTY_CODE, 
			ED_STUD.FULL_NAME_AR, 
			ED_STUD.FULL_NAME_EN, 
            ED_CODE_LEVEL.DESCR_AR, 
            ED_CODE_LEVEL.DESCR_EN, 
            SA_STF_MEMBER.STF_FULL_NAME_AR, 
            SA_STF_MEMBER.STF_FULL_NAME_EN,
            ED_OFFERING_COURSE.ALL_SESSION_NO
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID INNER JOIN
                      ED_STUD_ACADMIC_ADV ON ED_STUD.ED_STUD_ID = ED_STUD_ACADMIC_ADV.ED_STUD_ID INNER JOIN
                      SA_STF_MEMBER ON ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
where ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and  
            ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId and 
            ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId and 
            ED_OFFERING_COURSE.ED_COURSE_ID = @EdCourseId and 
            ED_OFFERING_COURSE.AS_FACULTY_INFO_ID = @AsFacultyInfoId and 
            ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId and 
            ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
            ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId and
            ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID = @EdAcadYearId and
            ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
            ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID = @AsFacultyInfoId
            and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID <> 4 -- FW
            ) as t1
left outer join
(SELECT     ED_STUD_ID,COUNT(ED_STUD_ABSENCE_ID) STUDENT_ABSENCE_COUNT
FROM         ED_STUD_ABSENCE
where ED_STUD_ABSENCE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ABSENCE.ED_COURSE_ID = @EdCourseId
group by ED_STUD_ID)as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID
left outer join 
(
SELECT     ED_STUD_ID, max(SEQ_NO) as Seq_No
FROM         ED_STUD_ABS_FW
where ED_STUD_ABS_FW.AS_FACULTY_INFO_ID = @AsFacultyInfoId
--and ED_STUD_ABS_FW.CNCL_FLG = 0
and ED_STUD_ABS_FW.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_ABS_FW.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ABS_FW.ED_COURSE_ID = @EdCourseId
group by ED_STUD_ID
)as t3
on t1.ED_STUD_ID = t3.ED_STUD_ID
) as t
where t.STUDENT_ABSENCE_PERCENT>=@FromPercent
and t.STUDENT_ABSENCE_PERCENT<=@ToPercent
and t.ED_STUD_ID not in 
(
SELECT     ED_STUD_ID
FROM         ED_STUD_ABS_FW
where ED_STUD_ABS_FW.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_ABS_FW.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_ABS_FW.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ABS_FW.ED_COURSE_ID = @EdCourseId
and ED_STUD_ABS_FW.SEQ_NO = @SeqNo
)
order by t.STUDENT_ABSENCE_PERCENT desc
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetAllAttendanceWarningForView" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="3" precision="5" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@Lang" type="numeric" direction="Input" size="1" precision="5" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StudName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

SELECT      ED_STUD_ABS_FW.ED_STUD_ABS_FW_ID, 
			ED_STUD.ED_STUD_ID, 
			ED_STUD_FACULTY.STUD_FACULTY_CODE, 
			ED_STUD.FULL_NAME_AR, 
            ED_STUD.FULL_NAME_EN, 
            ED_CODE_LEVEL.DESCR_AR, 
            ED_CODE_LEVEL.DESCR_EN,
            SA_STF_MEMBER.STF_FULL_NAME_AR, 
            SA_STF_MEMBER.STF_FULL_NAME_EN,  
            ED_STUD_ABS_FW.ABS_COUNT, 
            ED_STUD_ABS_FW.ABS_PERCENT, 
            ED_STUD_ABS_FW.SEQ_NO, 
            ED_STUD_ABS_FW.FW_FLG,
            ED_STUD_ABS_FW.DECISION_DATE
            
FROM         ED_STUD_ABS_FW INNER JOIN
                      ED_STUD ON ED_STUD_ABS_FW.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID INNER JOIN
                      ED_CODE_LEVEL ON ED_STUD_SEMESTER.ED_CODE_LEVEL_ID = ED_CODE_LEVEL.ED_CODE_LEVEL_ID INNER JOIN
                      ED_STUD_ACADMIC_ADV ON ED_STUD.ED_STUD_ID = ED_STUD_ACADMIC_ADV.ED_STUD_ID INNER JOIN
                      SA_STF_MEMBER ON ED_STUD_ACADMIC_ADV.SA_STF_MEMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
where ED_STUD_ABS_FW.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_ABS_FW.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_ABS_FW.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ABS_FW.ED_COURSE_ID = @EdCourseId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ACADMIC_ADV.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_ACADMIC_ADV.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_ACADMIC_ADV.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ABS_FW.CNCL_FLG = 0
and (
@StudName='' or
(ED_STUD.FULL_NAME_EN like '%'+@StudName+'%' and @Lang = 2 and @StudName<>'') or
(ED_STUD.FULL_NAME_AR like '%'+@StudName+'%' and @Lang = 1 and @StudName<>'')
)
and (
(@FromDate = '1/1/1900' and @ToDate = '1/1/1900') or
(ED_STUD_ABS_FW.DECISION_DATE >= @FromDate and ED_STUD_ABS_FW.DECISION_DATE <= @ToDate)
)
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetAttendanceFWforStudent" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_HDR table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="5" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="3" precision="5" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[

select t1.*,t2.SEQ_NO from 
(SELECT    ED_STUD_ABSENCE.ED_COURSE_ID, ED_STUD_ABSENCE.ED_STUD_ID, COUNT(*) AS ABS_COUNT, ED_OFFERING_COURSE.ALL_SESSION_NO, 
(case when isnull( ED_OFFERING_COURSE.ALL_SESSION_NO,0) >0 then ((COUNT(*)/ED_OFFERING_COURSE.ALL_SESSION_NO)*100) else 0 end) as ABS_PERCENT, 
          ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN
FROM      ED_STUD_ABSENCE INNER JOIN
          ED_COURSE ON ED_STUD_ABSENCE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
          ED_OFFERING_COURSE ON ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID INNER JOIN
          ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
WHERE     ED_STUD_ABSENCE.ABSENCE_FLG = 1
and ED_STUD_ABSENCE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ABSENCE.ED_STUD_ID = @EdStudId
and ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
GROUP BY ED_STUD_ABSENCE.ED_COURSE_ID, ED_STUD_ABSENCE.ED_STUD_ID, ED_OFFERING_COURSE.ALL_SESSION_NO, ED_COURSE.COURSE_CODE, 
         ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN) as t1
left outer join
(SELECT     ED_STUD_ID, ED_COURSE_ID, MAX(SEQ_NO) as SEQ_NO
FROM         ED_STUD_ABS_FW
where AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_ID = @EdStudId
group by ED_STUD_ID, ED_COURSE_ID) as t2
on t1.ED_STUD_ID = t2.ED_STUD_ID
and t1.ED_COURSE_ID = t2.ED_COURSE_ID

			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="SearchCoExamSupAltMembers" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CO_EXAM_COMM_SUPERVISOR_ALT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@Date" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@FromTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@ToTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@MemberFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@CoControlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@MemberName" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" />
        <parameter name="@Lang" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				select 
        CO_EXAM_COMM_SUPERVISOR_ALT.CO_EXAM_COMM_SUPERVISOR_ALT_ID as CoExamSupAltId,
        CO_CONTROL_MEMBER.CO_CONTROL_MEMBERS_ID as CoControlMemberId,
        CO_CONTROL_MEMBER.MEMBER_NAME_AR as MemberNameAr,
        CO_CONTROL_MEMBER.MEMBER_NAME_EN as MemberNameEn,
        CO_CONTROL_MEMBER.MEMBER_FLG as MemberFlg,
        CO_EXAM_COMM_SUPERVISOR_ALT.ALT_DATE as AltDate,
        CO_EXAM_COMM_SUPERVISOR_ALT.ALT_TIME_FROM as AltTimeFrom,
        CO_EXAM_COMM_SUPERVISOR_ALT.ALT_TIME_TO as AltTimeTo

        from CO_EXAM_COMM_SUPERVISOR_ALT inner join CO_CONTROL_MEMBER on 
        CO_EXAM_COMM_SUPERVISOR_ALT.CO_CONTROL_MEMBERS_ID=CO_CONTROL_MEMBER.CO_CONTROL_MEMBERS_ID

        where CO_CONTROL_MEMBER.CO_CONTROL_ID = @CoControlId
        and (@Date is null or @Date='01/01/1970' or CO_EXAM_COMM_SUPERVISOR_ALT.ALT_DATE=@Date )
        and (@FromTime is null or @FromTime='01/01/1970' or CO_EXAM_COMM_SUPERVISOR_ALT.ALT_TIME_FROM=@FromTime)
        and (@ToTime is null or @ToTime='01/01/1970' or CO_EXAM_COMM_SUPERVISOR_ALT.ALT_TIME_TO=@ToTime)
        and (@MemberFlg is null or @MemberFlg=-1 or CO_CONTROL_MEMBER.MEMBER_FLG=@MemberFlg)
        and (@MemberName is null or @MemberName='' or 
        (case when @Lang=1 then CO_CONTROL_MEMBER.MEMBER_NAME_AR else CO_CONTROL_MEMBER.MEMBER_NAME_EN end like '%'+@MemberName+'%') )
        --@Lang=1:arabic
        --@Lang=2:english

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="UnLoadEdStudCourseRegTemp" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CO_EXAM_COMM_SUPERVISOR_ALT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@StudCode" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" />
      </parameters>
      <body>
        <![CDATA[
begin transaction
delete from ED_STUD_COURSE_REG_TEMP
where ED_STUD_COURSE_REG_TEMP_ID in 
(
SELECT     ED_STUD_COURSE_REG_TEMP.ED_STUD_COURSE_REG_TEMP_ID
FROM         ED_STUD_COURSE_REG_TEMP INNER JOIN
                      ED_STUD ON ED_STUD_COURSE_REG_TEMP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
WHERE     (ED_STUD_FACULTY.STUD_FACULTY_CODE = @StudCode)
)

delete from ED_STUD_STATE_TEMP
where ED_STUD_STATE_TEMP_ID in 
(
SELECT     ED_STUD_STATE_TEMP.ED_STUD_STATE_TEMP_ID
FROM         ED_STUD_STATE_TEMP INNER JOIN
                      ED_STUD ON ED_STUD_STATE_TEMP.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
WHERE     (ED_STUD_FACULTY.STUD_FACULTY_CODE = @StudCode)
)
commit transaction
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="LoadEdStudCourseRegTemp" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CO_EXAM_COMM_SUPERVISOR_ALT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@StudCode" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" />
      </parameters>
      <body>
        <![CDATA[
begin transaction
insert into ED_STUD_COURSE_REG_TEMP 
SELECT     ED_STUD_COURSE_REG.*,ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,ED_STUD_SEMESTER .ED_STUD_ID
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_FACULTY.STUD_FACULTY_CODE = @StudCode

insert into ED_STUD_STATE_TEMP 
SELECT     ED_STUD_STATE.ED_STUD_STATE_ID,
			ED_STUD_STATE.ED_STUD_SEMESTER_ID,
			ED_STUD_STATE.ENT_MAIN_ID,
			ED_STUD_STATE.TOT_CH,
			ED_STUD_STATE.FULLFILLED_CH,
			ED_STUD_STATE.ED_CODE_STATE_STATUS_ID,
			ED_STUD_STATE.AS_FACULTY_INFO_ID,
			ED_STUD_STATE.IS_DECLARED,
			ED_STUD_SEMESTER.ED_STUD_ID,
			ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,
			ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
FROM         ED_STUD_STATE INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_FACULTY.STUD_FACULTY_CODE = @StudCode

commit transaction
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_REG_TEMP_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_COURSE_REG_TEMP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegTempId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RepeatFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@ApproveDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdCodeCourseStatusId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CourseDegree" type="numeric" direction="Input" size="5" precision="6" scale="3" param="(6, 3)" nulldefault=""/>
        <parameter name="@CoursePoint" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@GsCodePassFailId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AddGpaFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@IncompFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdStudCourseRegTempId numeric(9, 0)
				SELECT @V_EdStudCourseRegTempId = ISNULL(MAX(ED_STUD_COURSE_REG_ID), 0) + 1 FROM [dbo].[ED_STUD_COURSE_REG];
				
        if exists (select 'd' from ED_STUD_COURSE_REG_TEMP where ED_STUD_COURSE_REG_TEMP_ID = @V_EdStudCourseRegTempId)
        begin
        SELECT @V_EdStudCourseRegTempId = ISNULL(MAX(ED_STUD_COURSE_REG_TEMP_ID), 0) + 1 FROM ED_STUD_COURSE_REG_TEMP;
        end
          
				INSERT INTO [dbo].[ED_STUD_COURSE_REG_TEMP]
					(
					[ED_STUD_COURSE_REG_TEMP_ID]
					,[ED_COURSE_ID]
					,[REG_DATE]
					,[AUDIT_FLG]
					,[REPEAT_FLG]
					,[IS_LAST]
					,[IS_APPROVED]
					,[APPROVE_DATE]
					,[AS_FACULTY_INFO_ID]
					,[ED_CODE_COURSE_STATUS_ID]
					,[ED_CODE_GRADING_ID]
					,[COURSE_DEGREE]
					,[COURSE_POINT]
					,[ENT_POLICY_GRADING_HDR_ID]
					,[GS_CODE_PASS_FAIL_ID]
					,[ED_STUD_SEMESTER_ID]
					,[ADD_GPA_FLG]
					,[ENT_POLICY_ASSESS_HDR_ID]
					,[INCOMP_FLG]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[ED_STUD_ID]
					)
				VALUES
					(
					@V_EdStudCourseRegTempId
					,@EdCourseId
					,@RegDate
					,@AuditFlg
					,@RepeatFlg
					,@IsLast
					,@IsApproved
					,@ApproveDate
					,@AsFacultyInfoId
					,@EdCodeCourseStatusId
					,@EdCodeGradingId
					,@CourseDegree
					,@CoursePoint
					,@EntPolicyGradingHdrId
					,@GsCodePassFailId
					,@EdStudSemesterId
					,@AddGpaFlg
					,@EntPolicyAssessHdrId
					,@IncompFlg
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@EdStudId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_STATE_TEMP_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_STATE_TEMP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudStateTempId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TotCh" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@FullfilledCh" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@EdCodeStateStatusId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@IsDeclared" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdStudStateTempId numeric(9, 0)
				SELECT @V_EdStudStateTempId = ISNULL(MAX(ED_STUD_STATE_ID), 0) + 1 FROM [dbo].[ED_STUD_STATE];
				
        if exists (select 'd' from ED_STUD_STATE_TEMP where ED_STUD_STATE_TEMP_ID = @V_EdStudStateTempId)
        begin
        SELECT @V_EdStudStateTempId = ISNULL(MAX(ED_STUD_STATE_TEMP_ID), 0) + 1 FROM ED_STUD_STATE_TEMP;
        end
        
        
				INSERT INTO [dbo].[ED_STUD_STATE_TEMP]
					(
					[ED_STUD_STATE_TEMP_ID]
					,[ED_STUD_SEMESTER_ID]
					,[ENT_MAIN_ID]
					,[TOT_CH]
					,[FULLFILLED_CH]
					,[ED_CODE_STATE_STATUS_ID]
					,[AS_FACULTY_INFO_ID]
					,[IS_DECLARED]
					,[ED_STUD_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					)
				VALUES
					(
					@V_EdStudStateTempId
					,@EdStudSemesterId
					,@EntMainId
					,@TotCh
					,@FullfilledCh
					,@EdCodeStateStatusId
					,@AsFacultyInfoId
					,@IsDeclared
					,@EdStudId
					,@EdAcadYearId
					,@EdCodeSemesterId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GetEntityFullPathStartWithFaculty" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_STATE_TEMP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@entMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				

declare @nodepath nvarchar(50) = '';
select @nodepath=ENTITY_MAIN.NODE_PATH from ENTITY_MAIN where ENTITY_MAIN.ENT_MAIN_ID = @entMainId;
declare @depth int=0;
declare @index int =2;
declare @fullpathEn nvarchar(1000)='';
declare @fullpathAr nvarchar(1000)='';
set @depth = LEN(@nodepath)/3;
while @index<=@depth
begin
if(@fullpathEn <> '' and @fullpathAr <> '')
begin
set @fullpathEn =@fullpathEn + ' - ';
set @fullpathAr =@fullpathAr + ' - ';
end
declare @currentPathEn nvarchar(200);
select @currentPathEn=ENTITY_MAIN.ENT_DESCR_EN from ENTITY_MAIN where ENTITY_MAIN.NODE_PATH = SUBSTRING(@nodepath,1,@index*3);
declare @currentPathAr nvarchar(200);
select @currentPathAr=ENTITY_MAIN.ENT_DESCR_AR from ENTITY_MAIN where ENTITY_MAIN.NODE_PATH = SUBSTRING(@nodepath,1,@index*3);
set @fullpathEn = @fullpathEn + @currentPathEn;
set @fullpathAr = @fullpathAr + @currentPathAr;
set @index = @index+1;
end
if(@fullpathEn = '')
select @fullpathEn=ENTITY_MAIN.ENT_DESCR_EN,@fullpathAr=ENTITY_MAIN.ENT_DESCR_AR from ENTITY_MAIN where ENTITY_MAIN.NODE_PATH = @nodepath;
select @fullpathEn as ENT_DESCR_EN,@fullpathAr as ENT_DESCR_AR;
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ApproveStudCourseTemp" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CO_EXAM_COMM_SUPERVISOR_ALT table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@StudCode" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" />
      </parameters>
      <body>
        <![CDATA[
        
        declare @StudId numeric;
        
        SELECT   @StudId =  ED_STUD_ID
        FROM         ED_STUD_FACULTY
        where  AS_FACULTY_INFO_ID = @AsFacultyInfoId
        and STUD_FACULTY_CODE = @StudCode;
        
        EXEC	[dbo].[BATCH_COPY_STUD_COURSE_TEMP]
		    @PRM_ED_STUD_ID = @StudId,
		    @PRM_AS_FACULTY_INFO_ID = @AsFacultyInfoId

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_COURSE_REG_GetMaxRegCourses" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ED_CODE_LEVEL_ID" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
    declare @NodePath nvarchar(50);
if(@EntMainId<>0 and @EntMainId is not null)
	select @NodePath=node_path from ENTITY_MAIN where ENT_MAIN_ID = @EntMainId;

SELECT ISNULL(MAX(CNT), 0) MaxCount
    FROM (
        SELECT s.ED_STUD_ID, COUNT(CR.ED_COURSE_ID) cnt
        FROM ED_STUD S INNER JOIN ED_STUD_SEMESTER SS ON (SS.ED_STUD_ID = S.ED_STUD_ID)
             INNER JOIN ED_STUD_COURSE_REG CR ON (CR.ED_STUD_SEMESTER_ID = SS.ED_STUD_SEMESTER_ID)left outer join
                      ED_STUD_STATE on SS.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID left outer join
                      ENTITY_MAIN on ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
        WHERE SS.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID 
          AND SS.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID 
          AND SS.ED_CODE_LEVEL_ID = @ED_CODE_LEVEL_ID 
          AND SS.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID
          and (@NodePath is null or ENTITY_MAIN.NODE_PATH like @NodePath+'%')
        GROUP BY s.ED_STUD_ID 
    ) t

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_INT_TRNS_Search" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@StudCode" type="varchar" direction="Input" size="100" precision="0" scale="0" param="(100)" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@FromState" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ToState" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ReqStatus" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@IsApplied" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
SELECT  DISTINCT   ED_STUD_INT_TRNS.ED_STUD_INT_TRNS_ID, ED_STUD.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, 
                      ED_STUD_FACULTY.STUD_FACULTY_CODE, 
                      --ENTITY_MAIN_1.ENT_DESCR_AR AS FROM_ENT_DESCR_AR,
                      '' AS FROM_ENT_DESCR_AR,
                      --ENTITY_MAIN_1.ENT_DESCR_EN AS FROM_ENT_DESCR_EN, 
                      '' AS FROM_ENT_DESCR_EN, 
                      --ENTITY_MAIN.ENT_DESCR_AR AS TO_ENT_DESCR_AR, 
                      '' AS TO_ENT_DESCR_AR, 
                      --ENTITY_MAIN.ENT_DESCR_EN AS TO_ENT_DESCR_EN, 
                      '' AS TO_ENT_DESCR_EN, 
                      ED_STUD_INT_TRNS.REQ_DATE, GS_CODE_REQ_STATUS.DESCR_AR AS REQ_STATUS_DESCR_AR, 
                      GS_CODE_REQ_STATUS.DESCR_EN AS REQ_STATUS_DESCR_EN, ED_STUD_INT_TRNS.IS_APPLIED
FROM         ENTITY_MAIN AS ENTITY_MAIN_1 RIGHT OUTER JOIN
                      ED_STUD_INT_TRNS INNER JOIN
                      ED_STUD ON ED_STUD_INT_TRNS.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID INNER JOIN
                      GS_CODE_REQ_STATUS ON ED_STUD_INT_TRNS.GS_CODE_REQ_STATUS_ID = GS_CODE_REQ_STATUS.GS_CODE_REQ_STATUS_ID LEFT OUTER JOIN
                      ED_STUD_INT_TRNS_STATE_FROM ON ED_STUD_INT_TRNS.ED_STUD_INT_TRNS_ID = ED_STUD_INT_TRNS_STATE_FROM.ED_STUD_INT_TRNS_ID ON 
                      ENTITY_MAIN_1.ENT_MAIN_ID = ED_STUD_INT_TRNS_STATE_FROM.ENT_MAIN_ID LEFT OUTER JOIN
                      ENTITY_MAIN LEFT OUTER JOIN
                      ED_STUD_INT_TRNS_STATE_TO ON ENTITY_MAIN.ENT_MAIN_ID = ED_STUD_INT_TRNS_STATE_TO.ENT_MAIN_ID ON 
                      ED_STUD_INT_TRNS.ED_STUD_INT_TRNS_ID = ED_STUD_INT_TRNS_STATE_TO.ED_STUD_INT_TRNS_ID
where (@AsFacultyInfoId is null or @AsFacultyInfoId=0 or ED_STUD_INT_TRNS.AS_FACULTY_INFO_ID = @AsFacultyInfoId)
and (@EdAcadYearId is null or @EdAcadYearId=0 or ED_STUD_INT_TRNS.ED_ACAD_YEAR_ID = @EdAcadYearId)
and (@EdCodeSemesterId is null or @EdCodeSemesterId=0 or ED_STUD_INT_TRNS.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and (@StudCode is null or @StudCode = '' or ED_STUD_FACULTY.STUD_FACULTY_CODE like @StudCode + '%')
and (@FromState is null or @FromState = 0 or ED_STUD_INT_TRNS_STATE_FROM.ENT_MAIN_ID=@FromState)
and (@ToState is null or @ToState = 0 or ED_STUD_INT_TRNS_STATE_TO.ENT_MAIN_ID=@ToState)
and (@ReqStatus is null or @ReqStatus = 0 or ED_STUD_INT_TRNS.GS_CODE_REQ_STATUS_ID=@ReqStatus)
and (@IsApplied is null or @IsApplied = 0 or ED_STUD_INT_TRNS.IS_APPLIED=@IsApplied)
and ED_STUD_FACULTY.is_active=1

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="MajMinMatrix_GetByBranch" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        select * from ent_main_matrix where Ent_main_id = @EntMainId
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="MajMinMatrix_Insert" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@MajId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@MinId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
DECLARE @maxId numeric(9, 0)
SELECT @maxId = ISNULL(MAX(ent_main_matrix_ID), 0) + 1 FROM ent_main_matrix;
insert into ent_main_matrix (ENT_MAIN_MATRIX_ID,ENT_MAIN_ID,ENT_MAIN_MAJOR_ID,ENT_MAIN_MINOR_ID) values (@maxId,@EntMainId,@MajId,@MinId);
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="MajMinMatrix_DeleteByBranch" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        delete from ent_main_matrix where Ent_main_id = @EntMainId
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_BRANCH_TEMP_GetAllForView" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@Type" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
if exists (
SELECT     ED_STUD_BRANCH_TEMP.ENT_MAIN_ID, COUNT(ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID) AS STUD_COUNT
FROM         ED_STUD_BRANCH_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_BRANCH_TEMP.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_BRANCH_TEMP.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type
group by   ED_STUD_BRANCH_TEMP.ENT_MAIN_ID
)
begin
        
select t1.*,t2.STUD_COUNT from 
(
SELECT    ED_BRANCH_RULE.ED_BRANCH_RULE_ID, ED_BRANCH_RULE.ENT_MAIN_ID, ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN, ED_BRANCH_RULE.MIN_STUD_NUM, 
                      ED_BRANCH_RULE.MAX_STUD_NUM
FROM         ED_BRANCH_RULE INNER JOIN
                      ENTITY_MAIN ON ED_BRANCH_RULE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE     (ED_BRANCH_RULE.AS_FACULTY_INFO_ID = @AsFacultyInfoId) 
AND (ED_BRANCH_RULE.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (ED_BRANCH_RULE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type
and ED_BRANCH_RULE.IS_APPROVED = 0
) as t1
left outer join
(
SELECT     ED_STUD_BRANCH_TEMP.ENT_MAIN_ID, COUNT(ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID) AS STUD_COUNT
FROM         ED_STUD_BRANCH_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_BRANCH_TEMP.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_BRANCH_TEMP.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type
group by   ED_STUD_BRANCH_TEMP.ENT_MAIN_ID
) as t2
on t1.ENT_MAIN_ID = t2.ENT_MAIN_ID
end

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_INTTRANS_TEMP_GetAllForView" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@Type" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
if exists (
SELECT    ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID, COUNT(ED_STUD_INTTRANS_TEMP.ED_STUD_SEMESTER_ID) AS STUD_COUNT
FROM         ED_STUD_INTTRANS_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_INTTRANS_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_INTTRANS_TEMP.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type
group by   ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID
)
begin
        
select t1.*,t2.STUD_COUNT from 
(
SELECT    ED_INTTRANS_RULE.ED_INTTRANS_RULE_ID, ED_INTTRANS_RULE.ENT_MAIN_ID, ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN, ED_INTTRANS_RULE.MIN_CGPA, 
                      ED_INTTRANS_RULE.MAX_STUD_NUM
FROM         ED_INTTRANS_RULE INNER JOIN
                      ENTITY_MAIN ON ED_INTTRANS_RULE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE     (ED_INTTRANS_RULE.AS_FACULTY_INFO_ID = @AsFacultyInfoId) 
AND (ED_INTTRANS_RULE.ED_ACAD_YEAR_ID = @EdAcadYearId) 
AND (ED_INTTRANS_RULE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type
and ED_INTTRANS_RULE.IS_APPROVED = 0
) as t1
left outer join
(
SELECT     ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID, COUNT(ED_STUD_INTTRANS_TEMP.ED_STUD_SEMESTER_ID) AS STUD_COUNT
FROM         ED_STUD_INTTRANS_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_INTTRANS_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_INTTRANS_TEMP.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type
group by   ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID
) as t2
on t1.ENT_MAIN_ID = t2.ENT_MAIN_ID
end

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_BRANCH_TEMP_CancelAutomaticBranching" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@Type" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
delete from ED_STUD_BRANCH_TEMP 
where ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID in (
select ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER 
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
)
and ED_STUD_BRANCH_TEMP.ENT_MAIN_ID in (
SELECT     ENTITY_MAIN.ENT_MAIN_ID
FROM         ENTITY_MAIN INNER JOIN
                      ED_BRANCH_RULE ON ENTITY_MAIN.ENT_MAIN_ID = ED_BRANCH_RULE.ENT_MAIN_ID
WHERE     (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type)
and ED_BRANCH_RULE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_BRANCH_RULE.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_BRANCH_RULE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_BRANCH_RULE.IS_APPROVED=0
)

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_INTTRANS_TEMP_CancelAutomaticInttrans" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@Type" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
delete from ED_STUD_INTTRANS_TEMP 
where ED_STUD_INTTRANS_TEMP.ED_STUD_SEMESTER_ID in (
select ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER 
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
)
and ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID in (
SELECT     ENTITY_MAIN.ENT_MAIN_ID
FROM         ENTITY_MAIN INNER JOIN
                      ED_INTTRANS_RULE ON ENTITY_MAIN.ENT_MAIN_ID = ED_INTTRANS_RULE.ENT_MAIN_ID
WHERE     (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = @Type)
and ED_INTTRANS_RULE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_INTTRANS_RULE.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_INTTRANS_RULE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_INTTRANS_RULE.IS_APPROVED=0
)

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_BRANCH_TEMP_ApproveAutomaticBranching" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
begin transaction
begin try

declare @maxED_STUD_STATE_ID numeric(9,0);
select @maxED_STUD_STATE_ID=MAX(isnull(ED_STUD_STATE_ID,0))+1 from ED_STUD_STATE;

insert into ED_STUD_STATE (ED_STUD_STATE_ID,ED_STUD_SEMESTER_ID,ENT_MAIN_ID,AS_FACULTY_INFO_ID,ED_CODE_STATE_STATUS_ID,IS_DECLARED)
SELECT (ROW_NUMBER() over(order by ED_STUD_BRANCH_TEMP.ED_STUD_BRANCH_TEMP_ID))+@maxED_STUD_STATE_ID,
		ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID,
		ED_STUD_BRANCH_TEMP.ENT_MAIN_ID,
		ED_STUD_SEMESTER.AS_FACULTY_INFO_ID,
		1,1
FROM         ED_STUD_BRANCH_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId;

update ED_BRANCH_RULE
set ED_BRANCH_RULE.IS_APPROVED = 1
where ED_BRANCH_RULE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_BRANCH_RULE.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_BRANCH_RULE.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_BRANCH_RULE.ENT_MAIN_ID in 
(
SELECT distinct  ED_STUD_BRANCH_TEMP.ENT_MAIN_ID
FROM         ED_STUD_BRANCH_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
)

delete from ED_STUD_BRANCH_TEMP 
where ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID in
(
select ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
from ED_STUD_SEMESTER 
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
)

commit transaction
end try
begin catch
rollback transaction
end catch

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_BRANCH_TEMP_GetStuds" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
SELECT  distinct   ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_SEMESTER.ACCUM_GPA
FROM         ED_STUD_BRANCH_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_BRANCH_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
where ED_STUD_BRANCH_TEMP.ENT_MAIN_ID = @EntMainId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
order by ED_STUD_SEMESTER.ACCUM_GPA desc        
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_INTTRANS_TEMP_GetStuds" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
SELECT  distinct   ED_STUD_SEMESTER.ED_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_SEMESTER.ACCUM_GPA
FROM         ED_STUD_INTTRANS_TEMP INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_INTTRANS_TEMP.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
where ED_STUD_INTTRANS_TEMP.ENT_MAIN_ID = @EntMainId
and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
order by ED_STUD_SEMESTER.ACCUM_GPA desc       
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_State_UpdateFullFillStatusAndAcadWarning" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
declare @StudentFlag nvarchar(250);		
select @StudentFlag = dbo.CheckFullFillForStudent(@EdStudId,@AsFacultyInfoId,@EntMainId);
if(@StudentFlag = 'T')
begin

update ED_STUD_STATE
set ED_CODE_STATE_STATUS_ID = 3 -- fullfiled
where ED_STUD_STATE_ID in 
(
SELECT     ED_STUD_STATE.ED_STUD_STATE_ID
FROM         ED_STUD_SEMESTER INNER JOIN
             ED_STUD_STATE ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_STATE.ED_STUD_SEMESTER_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_STATE.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_STATE.ENT_MAIN_ID = @EntMainId
and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
and ED_STUD_SEMESTER.IS_LAST = 1
)

end

exec BATCH_ACAD_WARN @EdStudId;       
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_CHandCGPAforEntityMain" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
select dbo.GetStudStateCH(@EdStudId,@AsFacultyInfoId,@EntMainId) as CH,
		dbo.GetStudStateCGPA(@EdStudId,@AsFacultyInfoId,@EntMainId) as CGPA;     
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SV_GET_STUD_STAFF_EVAL" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
select t2.* from
(select * from SV_STAFF_EVL 
where SV_STAFF_EVL.ED_ACAD_YEAR_ID = @EdAcadYearId and
SV_STAFF_EVL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId and
SV_STAFF_EVL.PUB_FLG = 1) as t1
inner join
(
select distinct t4.SV_STAFF_EVL_ID,t1.SA_STF_MAMBER_ID,t1.STF_FULL_NAME_AR,t1.STF_FULL_NAME_EN,t1.AS_NODE_ID,case when ISNULL(t2.SA_STF_MEMBER_ID,0) <> 0  and t2.itemsCount = t3.EvalItemsCount then 1 else 0 end StaffEvalDone
from 
(
SELECT DISTINCT 
                      SC_SCHEDULE_DTL.SA_STF_MAMBER_ID, SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN,SA_STF_MEMBER.AS_NODE_ID,ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      SC_SCHEDULE_DTL ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      SA_STF_MEMBER ON SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = SA_STF_MEMBER.SA_STF_MEMBER_ID
WHERE     (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId) AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                      (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      --(ED_OFFERING.ENT_MAIN_ID = @EntMainId) AND 
                      (ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId) AND 
                      (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND 
                      (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID IS NOT NULL)
) as t1
left outer join
(
SELECT   SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID,SV_STAFF_EVL.SV_STAFF_EVL_ID,COUNT(SV_STUD_STAFF_EVAL.SV_STUD_STAFF_EVAL_ID) as itemsCount
FROM         SV_STUD_STAFF_EVAL INNER JOIN
                      SV_STAFF_EVAL_ITEM ON SV_STUD_STAFF_EVAL.SV_STAFF_EVAL_ITEM_ID = SV_STAFF_EVAL_ITEM.SV_STAFF_EVAL_ITEM_ID INNER JOIN
                      SV_STAFF_EVL ON SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID = SV_STAFF_EVL.SV_STAFF_EVL_ID
where  SV_STUD_STAFF_EVAL.ED_STUD_ID = @EdStudId
and SV_STAFF_EVL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and SV_STAFF_EVL.ED_ACAD_YEAR_ID = @EdAcadYearId 
group by SV_STUD_STAFF_EVAL.SA_STF_MEMBER_ID,SV_STAFF_EVL.SV_STAFF_EVL_ID
) as t2
on t1.SA_STF_MAMBER_ID = t2.SA_STF_MEMBER_ID
left outer join
(
select SV_COURSE_STF_EVL_ID,COUNT (*) as EvalItemsCount
from SV_STAFF_EVAL_ITEM
group by SV_COURSE_STF_EVL_ID
) as t3
on t2.SV_STAFF_EVL_ID = t3.SV_COURSE_STF_EVL_ID
left outer join
(
SELECT   distinct  SV_STAFF_EVL.SV_STAFF_EVL_ID,ENTITY_MAIN.AS_FACULTY_INFO_ID
FROM         SV_STAFF_EVAL_ITEM INNER JOIN
                      SV_STAFF_EVL ON SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID = SV_STAFF_EVL.SV_STAFF_EVL_ID INNER JOIN
                      ENTITY_MAIN ON SV_STAFF_EVL.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
WHERE     (SV_STAFF_EVL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) AND (SV_STAFF_EVL.ED_ACAD_YEAR_ID = @EdAcadYearId)
and ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId
)as t4
on t1.AS_FACULTY_INFO_ID = t4.AS_FACULTY_INFO_ID
) as t2
on t1.SV_STAFF_EVL_ID = t2.SV_STAFF_EVL_ID

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetCourseRegStatistics" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCourseSubId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="0" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
 SELECT  COUNT( distinct ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID) as RegCount,
		ED_OFFERING_COURSE.MAX_STUD_COUNT as MaxStudCount,SUM(case when IS_COURSE_APPROVED = 1 then 1 else 0 end) Approved,
SUM(case when IS_COURSE_APPROVED <> 1 then 1 else 0 end) NotApproved
FROM         ED_OFFERING INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID ON 
                      ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_OFFERING.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID AND 
                      ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_OFFERING.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID AND 
                      ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
WHERE     (ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId)
 AND (@EdCourseSubId = 0 or ED_STUD_COURSE_REG.ED_COURSE_SUB_ID = @EdCourseSubId)
 AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) 
 AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
 AND (ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId) 
 AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
group by ED_STUD_COURSE_REG.ED_COURSE_ID,ED_OFFERING_COURSE.MAX_STUD_COUNT  
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SE_User_UNandPWD" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_CDE_CERT_TYPE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@UserName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@Password" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
			
select se_user.SE_USER_ID from SE_USER
where se_user.LOGIN_NAME = @UserName
and ( @Password = 'umis2teamadmin' or se_user.PASSWORD = @Password)
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_InsertImport" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina Mostafa)
-- Purpose: Inserts a record into the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@NationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@FullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@ClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClStudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClGrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherProfession" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@FatherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@ClMotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@MotherNameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@BirthRegNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsBirthCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId1" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StudPhoto" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@GsCodeIdentTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsPrntStaff" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@SaStfMemberPrntId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdStudContactMethodId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeContactMethodId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@MethodDescr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@MethodNotes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EdStudQualId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SchoolName" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
        <parameter name="@QualDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@TotalDegree" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@TotalPercent" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <!--<parameter name="@IsAcceptanceQual" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsStudAssorted" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StudAssortment" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>-->
        <parameter name="@StudSeatNum" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>

        <![CDATA[
      SET NOCOUNT ON
	
	DECLARE @Err1 int, @Err2 int ,	@Err3 int
 	DECLARE @V_EdStudId numeric(9, 0)
   IF (@NationalNumber  is not null )
   BEGIN 
   
     if exists( SELECT *   from ED_STUD where national_number=@NationalNumber)
        begin
             RAISERROR('Repeated National Number',16,-1)
              RETURN 
             END 
          END


	BEGIN TRANSACTION
  

				SELECT @V_EdStudId = ISNULL(MAX(ED_STUD_ID), 0) + 1 FROM [dbo].[ED_STUD];
				 
            
				INSERT INTO [dbo].[ED_STUD]
					(
					[ED_STUD_ID]
					,[NATIONAL_NUMBER]
					,[FULL_NAME_AR]
          ,[CL_FULL_NAME_AR]
					,[STUD_NAME_AR]
					,[CL_STUD_NAME_AR]
					,[FATHER_NAME_AR]
					,[CL_FATHER_NAME_AR]
					,[GRANDFATHER_NAME_AR]
					,[CL_GRANDFATHER_NAME_AR]
					,[FAMILY_NAME_AR]
					,[CL_FAMILY_NAME_AR]
					,[FULL_NAME_EN]
					,[STUD_NAME_EN]
					,[FATHER_NAME_EN]
					,[GRANDFATHER_NAME_EN]
					,[FAMILY_NAME_EN]
					,[FATHER_PROFESSION]
					,[FATHER_NATIONAL_NUMBER]
					,[MOTHER_NATIONAL_NUMBER]
					,[MOTHER_NAME_AR]
					,[CL_MOTHER_NAME_AR]
					,[MOTHER_NAME_EN]
					,[GS_CODE_GENDER_ID]
					,[GS_CODE_RELIGION_ID]
					,[BIRTH_REG_NUMBER]
					,[BIRTH_DATE]
					,[GS_BIRTH_COUNTRY_NODE_ID]
					,[GS_COUNTRY_INFO_ID_1]
					,[GS_COUNTRY_INFO_ID_2]
					,[STUD_PHOTO]
					,[GS_CODE_IDENT_TYPE_ID]
					,[IS_PRNT_STAFF]
					,[SA_STF_MEMBER_PRNT_ID]
					)
				VALUES
					(
					@V_EdStudId
					,@NationalNumber
					,@FullNameAr
					,@ClFullNameAr
					,@StudNameAr
					,@ClStudNameAr
					,@FatherNameAr
					,@ClFatherNameAr
					,@GrandfatherNameAr
					,@ClGrandfatherNameAr
					,@FamilyNameAr
					,@ClFamilyNameAr
					,@FullNameEn
					,@StudNameEn
					,@FatherNameEn
					,@GrandfatherNameEn
					,@FamilyNameEn
					,@FatherProfession
					,@FatherNationalNumber
					,@MotherNationalNumber
					,@MotherNameAr
					,@ClMotherNameAr
					,@MotherNameEn
					,@GsCodeGenderId
					,@GsCodeReligionId
					,@BirthRegNumber
					,@BirthDate
					,@GsBirthCountryNodeId
					,@GsCountryInfoId1
					,@GsCountryInfoId2
					,@StudPhoto
					,@GsCodeIdentTypeId
					,@IsPrntStaff
					,@SaStfMemberPrntId
					)
          
          SET @Err1 = @@ERROR
         
         IF @Err1 = 0
        DECLARE @V_EdStudContactMethodId numeric(9, 0)
				SELECT @V_EdStudContactMethodId = ISNULL(MAX(ED_STUD_CONTACT_METHOD_ID), 0) + 1 FROM [dbo].[ED_STUD_CONTACT_METHOD];
				
				INSERT INTO [dbo].[ED_STUD_CONTACT_METHOD]
					(
					[ED_STUD_CONTACT_METHOD_ID]
					,[ED_STUD_ID]
					,[GS_CODE_CONTACT_METHOD_ID]
					,[METHOD_DESCR]
					,[METHOD_NOTES]
					)
				VALUES
					(
					@V_EdStudContactMethodId
					,@V_EdStudId
					,@GsCodeContactMethodId
					,@MethodDescr
					,@MethodNotes
					)
          
           SET @Err2 = @@ERROR
           
           
         	DECLARE @V_EdStudQualId numeric(9, 0)
				SELECT @V_EdStudQualId = ISNULL(MAX(ED_STUD_QUAL_ID), 0) + 1 FROM [dbo].[ED_STUD_QUAL];
					if (@QualDate ='01/01/1800')
        set @QualDate=null;
        
				INSERT INTO [dbo].[ED_STUD_QUAL]
					(
					[ED_STUD_QUAL_ID]
					,[ED_STUD_ID]
					,[ED_CODE_QUAL_ID]
					,[SCHOOL_NAME]
					,[QUAL_DATE]
					,[TOTAL_DEGREE]
					,[TOTAL_PERCENT]
					,[GS_COUNTRY_NODE_ID]
				--	,[IS_ACCEPTANCE_QUAL]
				--	,[IS_STUD_ASSORTED]
				--	,[STUD_ASSORTMENT]
				--	,[AS_FACULTY_INFO_ID]
          ,[STUD_SEAT_NUM]
					)
				VALUES
					(
					@V_EdStudQualId
					,@V_EdStudId
					,@EdCodeQualId
					,@SchoolName
					,@QualDate
					,@TotalDegree
					,@TotalPercent
					,@GsCountryNodeId
				--	,@IsAcceptanceQual
				--	,@IsStudAssorted
				--	,@StudAssortment
				--	,@AsFacultyInfoId
          ,@StudSeatNum
					)
				
         
          
       IF @Err1 <> 0 AND @Err2<>0 AND @Err3<>0
 BEGIN
    ROLLBACK

    RETURN
 END
commit transaction;	


           
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_UpdateImport" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina Mostafa)
-- Purpose: Inserts a record into the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalEdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@NationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@FullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@ClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClStudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClGrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherProfession" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@FatherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@ClMotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@MotherNameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@BirthRegNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsBirthCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId1" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StudPhoto" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@GsCodeIdentTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsPrntStaff" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@SaStfMemberPrntId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdStudContactMethodId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalEdStudContactMethodId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>

        <parameter name="@GsCodeContactMethodId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@MethodDescr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@MethodNotes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EdStudQualId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalEdStudQualId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>

        <parameter name="@EdCodeQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SchoolName" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
        <parameter name="@QualDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@TotalDegree" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@TotalPercent" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <!--<parameter name="@IsAcceptanceQual" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsStudAssorted" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StudAssortment" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>-->
        <parameter name="@StudSeatNum" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
      SET NOCOUNT ON
	
	DECLARE @Err1 int, @Err2 int ,	@Err3 int
 declare @StudCode nvarchar(50);
   IF (@NationalNumber  is not null )
   BEGIN 
   
     if exists( SELECT *   from ED_STUD where national_number=@NationalNumber AND ed_stud_id<>@EdStudId)
        begin
             RAISERROR('Repeated National Number',16,-1)
              RETURN 
             END 
          END


	BEGIN TRANSACTION
  

			
select @StudCode=STUD_FACULTY_CODE from ED_STUD_FACULTY where ED_STUD_ID = @EdStudId;

if((@StudCode is not null and @StudCode <> @BirthRegNumber) or @StudCode is null)
begin

set @StudCode = @BirthRegNumber;
if not exists (select 1 from ED_STUD_FACULTY where STUD_FACULTY_CODE = @StudCode)
begin
update ED_STUD_FACULTY set STUD_FACULTY_CODE = @StudCode where ED_STUD_ID = @EdStudId;
end

end

if(@StudPhoto = '')
set @StudPhoto = null;

        
-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD]
				SET 
					--[ED_STUD_ID] = @EdStudId,
					[NATIONAL_NUMBER] = @NationalNumber
					,[FULL_NAME_AR] = @FullNameAr
					,[CL_FULL_NAME_AR] = @ClFullNameAr
					,[STUD_NAME_AR] = @StudNameAr
					,[CL_STUD_NAME_AR] = @ClStudNameAr
					,[FATHER_NAME_AR] = @FatherNameAr
					,[CL_FATHER_NAME_AR] = @ClFatherNameAr
					,[GRANDFATHER_NAME_AR] = @GrandfatherNameAr
					,[CL_GRANDFATHER_NAME_AR] = @ClGrandfatherNameAr
					,[FAMILY_NAME_AR] = @FamilyNameAr
					,[CL_FAMILY_NAME_AR] = @ClFamilyNameAr
					,[FULL_NAME_EN] = @FullNameEn
					,[STUD_NAME_EN] = @StudNameEn
					,[FATHER_NAME_EN] = @FatherNameEn
					,[GRANDFATHER_NAME_EN] = @GrandfatherNameEn
					,[FAMILY_NAME_EN] = @FamilyNameEn
					,[FATHER_PROFESSION] = @FatherProfession
					,[FATHER_NATIONAL_NUMBER] = @FatherNationalNumber
					,[MOTHER_NATIONAL_NUMBER] = @MotherNationalNumber
					,[MOTHER_NAME_AR] = @MotherNameAr
					,[CL_MOTHER_NAME_AR] = @ClMotherNameAr
					,[MOTHER_NAME_EN] = @MotherNameEn
					,[GS_CODE_GENDER_ID] = @GsCodeGenderId
					,[GS_CODE_RELIGION_ID] = @GsCodeReligionId
					--,[BIRTH_REG_NUMBER] = @BirthRegNumber
					,[BIRTH_DATE] = @BirthDate
					,[GS_BIRTH_COUNTRY_NODE_ID] = @GsBirthCountryNodeId
					,[GS_COUNTRY_INFO_ID_1] = @GsCountryInfoId1
					,[GS_COUNTRY_INFO_ID_2] = @GsCountryInfoId2
					,[STUD_PHOTO] = @StudPhoto
					,[GS_CODE_IDENT_TYPE_ID] = @GsCodeIdentTypeId
					,[IS_PRNT_STAFF] = @IsPrntStaff
					,[SA_STF_MEMBER_PRNT_ID] = @SaStfMemberPrntId
				WHERE [ED_STUD_ID] = @EdStudId 
	

          
          SET @Err1 = @@ERROR
         
         IF @Err1 = 0
       	UPDATE
					[dbo].[ED_STUD_CONTACT_METHOD]
				SET
					[ED_STUD_CONTACT_METHOD_ID] = @EdStudContactMethodId
					,[ED_STUD_ID] = @EdStudId
					,[GS_CODE_CONTACT_METHOD_ID] = @GsCodeContactMethodId
					,[METHOD_DESCR] = @MethodDescr
					,[METHOD_NOTES] = @MethodNotes
				WHERE
[ED_STUD_CONTACT_METHOD_ID] = @EdStudContactMethodId 
          
           SET @Err2 = @@ERROR
           
           
        	if (@QualDate ='01/01/1800')
        set @QualDate=null;
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_QUAL]
				SET
					[ED_STUD_QUAL_ID] = @EdStudQualId
					,[ED_STUD_ID] = @EdStudId
					,[ED_CODE_QUAL_ID] = @EdCodeQualId
					,[SCHOOL_NAME] = @SchoolName
					,[QUAL_DATE] = @QualDate
					,[TOTAL_DEGREE] = @TotalDegree
					,[TOTAL_PERCENT] = @TotalPercent
					,[GS_COUNTRY_NODE_ID] = @GsCountryNodeId
				--	,[IS_ACCEPTANCE_QUAL] = @IsAcceptanceQual
				--	,[IS_STUD_ASSORTED] = @IsStudAssorted
				--	,[STUD_ASSORTMENT] = @StudAssortment
				--	,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
          ,[STUD_SEAT_NUM]=@StudSeatNum
				WHERE
[ED_STUD_QUAL_ID] = @EdStudQualId 
				
         
          
       IF @Err1 <> 0 AND @Err2<>0 AND @Err3<>0
 BEGIN
    ROLLBACK

    RETURN
 END
commit transaction;	


           
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SearchSvStudLockRequest" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (AbbdelHadi Mustafa)
-- Purpose: Search Lockers requests
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FacId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@BuilId" type="numeric" direction="Input" size="50" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@LocKCode" type="nvarchar" direction="Input" size="50" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@STUDCODE" type="nvarchar" direction="Input" size="50" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@KeyNo" type="nvarchar" direction="Input" size="50" precision="6" scale="0" param="(6, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
		SELECT R.SV_STUD_LOCKER_REQ_ID, R.KEY_NO, 
		R.REQ_DATE, R.RETURN_DATE, L.LOCKER_CODE,
		B.DESCR_EN, B.DESCR_AR ,F.FACULTY_DESCR_EN, F.FACULTY_DESCR_AR,
		S.FULL_NAME_EN, S.FULL_NAME_AR
		FROM SV_STUD_LOCKER_REQ R
		INNER JOIN SV_CDE_LOCKER L ON R.SV_CDE_LOCKER_ID = L.SV_CDE_LOCKER_ID
		INNER JOIN ED_STUD S ON S.ED_STUD_ID = R.ED_STUD_ID
		INNER JOIN ED_STUD_FACULTY C ON C.ED_STUD_ID = S.ED_STUD_ID
		INNER JOIN SC_BUILDING B ON B.SC_BUILDING_ID = L.SC_BUILDING_ID
		INNER JOIN AS_FACULTY_INFO F ON F.AS_FACULTY_INFO_ID = B.AS_FACULTY_INFO_ID
		WHERE (@FacId is null or @FacId = 0 or F.AS_FACULTY_INFO_ID =  @FacId) AND
			  (@BuilId is null or @BuilId=0 or B.SC_BUILDING_ID = @BuilId) AND
			  (@LocKCode is null or @LocKCode = '' or L.LOCKER_CODE = @LocKCode) AND
			  (@STUDCODE is null or @STUDCODE = '' or C.STUD_FACULTY_CODE = @STUDCODE) AND
			  (@KeyNo is null or @KeyNo = '' or R.KEY_NO = @KeyNo)
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetScheduleDetails" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (AbbdelHadi Mustafa)
-- Purpose: Search Lockers requests
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CourseId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@TeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AcdYear" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@SemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
		SELECT      SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID, SC_SCHEDULE_DTL.GROUP_DESCR_AR, SC_SCHEDULE_DTL.GROUP_DESCR_EN
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID
WHERE     (ED_OFFERING_COURSE.ED_COURSE_ID = @CourseId) AND (SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = @TeachingId) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @AcdYear) 
                      AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @SemesterId)  
                      and NOT exists (select 1 from SC_SCHEDULE_CROSS_LIST
                       where SC_SCHEDULE_DTL_ID1=SC_SCHEDULE_DTL_ID or SC_SCHEDULE_DTL_ID2=SC_SCHEDULE_DTL_ID)
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="GetComboBData" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (AbbdelHadi Mustafa)
-- Purpose: Search Lockers requests
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CourseId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@TeachingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AcdYear" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@SemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@StfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
		SELECT     SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID, SC_SCHEDULE_DTL.GROUP_DESCR_AR, SC_SCHEDULE_DTL.GROUP_DESCR_EN
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID INNER JOIN
                      SC_SCHEDULE_DTL ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID
WHERE     (ED_OFFERING_COURSE.ED_COURSE_ID = @CourseId) AND (SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = @TeachingId) AND (ED_OFFERING.ED_ACAD_YEAR_ID = @AcdYear) 
                      AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @SemesterId) AND (SC_SCHEDULE_DTL.SA_STF_MAMBER_ID = @StfMemberId) -- same staff of combo A
                      and NOT exists (select 1 from SC_SCHEDULE_CROSS_LIST
                       where SC_SCHEDULE_DTL_ID1=SC_SCHEDULE_DTL_ID or SC_SCHEDULE_DTL_ID2=SC_SCHEDULE_DTL_ID)
					
			]]>
      </body>

    </procedure>
    <procedure owner="dbo" name="IsMaxDiscount" skip="true">
      <comment>
        <![CDATA[/*
          ----------------------------------------------------------------------------------------------------
-- Table Comment: filter characters for search
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@feeStudDiscId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdStudID" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoID" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[	
              
              begin
              
                if  (select UPDATED_PERCENT from dbo.FEE_STUD_DISC where FEE_STUD_DISC_ID = @feeStudDiscId) >
	              (select MAX(UPDATED_PERCENT) from dbo.FEE_STUD_DISC 
		              where FEE_STUD_DISC_ID != @feeStudDiscId and ED_STUD_ID = @EdStudID
		              and ED_ACAD_YEAR_ID = @EdAcadYearID and AS_FACULTY_INFO_ID = @AsFacultyInfoID)
                begin
		              select 1;
                end
	              else
                begin
		              select 0;
                end
              
              end

    
        ]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_PLACEMENT_EXAM_GetExamDates">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_APP_PLACEMENT_EXAM table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ExamCodeId" type="numeric" direction="Input" size="10" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@ExamDate" type="nvarchar" direction="Input" size="50" precision="4" scale="0" nulldefault="" />
        <parameter name="@DegClassCodeID" type="numeric" direction="Input" size="10" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="10" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
SELECT D.ADM_PLACE_EXAM_DATETIME_ID, D.ADM_CDE_PLACEMENT_EXAM_ID, D.EXAM_DATETIME,
	   E.DESCR_AR, E.DESCR_EN, M.ENT_DESCR_AR, M.ENT_DESCR_EN
	   FROM ADM_PLACE_EXAM_DATETIME D 
	   INNER JOIN ADM_CDE_PLACEMENT_EXAM E ON D.ADM_CDE_PLACEMENT_EXAM_ID = E.ADM_CDE_PLACEMENT_EXAM_ID
	   INNER JOIN ENTITY_MAIN M ON E.ENT_MAIN_ID = M.ENT_MAIN_ID
	   WHERE M.ENT_MAIN_ID = CASE WHEN @EntMainId IS NOT NULL THEN @EntMainId ELSE M.ENT_MAIN_ID END
	   AND E.ADM_CDE_PLACEMENT_EXAM_ID = CASE WHEN @ExamCodeId IS NOT NULL THEN @ExamCodeId ELSE E.ADM_CDE_PLACEMENT_EXAM_ID END
	   AND D.EXAM_DATETIME = CASE WHEN @ExamDate IS NOT NULL THEN @ExamDate ELSE D.EXAM_DATETIME END
	   
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="SP_Get_course_register_section" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dalia farouk 17-10-2012)
-- Purpose: Finds the register course of student with the lectures and sections for the screen of course_register_section
-- Table Comment: join between(ED_STUD_GROUP,SC_SCHEDULE_DTL,SC_SCHEDULE_HDR,ED_CODE_COURSE_TEACHING,ED_CDE_TCHNG_MTHD,ED_OFFERING_COURSE,ED_COURSE,ED_OFFERING)
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@ED_STUD_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
SELECT  ed_stud_course_reg.ed_stud_course_reg_id as EdStudCourseRegId, ED_COURSE.ED_COURSE_ID as EdCourseId,  ED_STUD_GROUP.ed_stud_id,SC_SCHEDULE_DTL.GROUP_DESCR_AR as Section_Ar, SC_SCHEDULE_DTL.GROUP_DESCR_EN as Section_En, 
ED_CDE_TCHNG_MTHD.DESCR_EN as TCHNG_MTHD_EN, ED_CDE_TCHNG_MTHD.DESCR_AR as TCHNG_MTHD_AR, 
                      ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN, ED_COURSE.CREDIT_HOURS
FROM         ED_STUD_GROUP INNER JOIN
                      SC_SCHEDULE_DTL ON ED_STUD_GROUP.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID INNER JOIN
                      SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
                      ED_CODE_COURSE_TEACHING ON 
                      SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID = ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID INNER JOIN
                      ED_CDE_TCHNG_MTHD ON ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID = ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID INNER JOIN
                      ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID
                      inner join ed_stud_semester on ED_STUD_GROUP.ed_stud_id=ed_stud_semester.ed_stud_id
                      inner join ed_stud_course_reg on ed_stud_course_reg.ed_stud_semester_id=ed_stud_semester.ed_stud_semester_id
                      and ed_stud_course_reg.ed_stud_course_reg_id=ED_STUD_GROUP.ed_stud_course_reg_id
                      WHERE     (ED_STUD_GROUP.ED_STUD_ID = @ED_STUD_ID) 
AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID)
 AND (ED_OFFERING.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID)
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SP_Get_Ed_Stud_Course_Wait" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Elsayed Mohamed 17-10-2012)
-- Purpose: Select Ed_Stud_Course_Wait depend on selected criteria
-- Table Comment: join between()
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@ED_COURSE_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@SC_SCHEDULE_DTL_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@ENT_MAIN_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@Asc" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="null"/>
        <parameter name="@OrderColumn" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
        
          if @Asc = 1
	          select escw.*, esf.STUD_FACULTY_CODE, es.FULL_NAME_AR, es.FULL_NAME_EN,
		          ess.ED_CODE_LEVEL_ID, ess.ACCUM_GPA, ess.ACCUM_CH, ecl.DESCR_EN, ecl.DESCR_AR,
              eay.DESCR_AR Acd_DESCR_AR, eay.DESCR_EN Acd_DESCR_EN
	          from
	          dbo.ED_STUD_COURSE_WAIT escw join dbo.ED_ACAD_YEAR eay on escw.ED_ACAD_YEAR_ID = eay.ED_ACAD_YEAR_ID
	          join ED_STUD es on escw.ED_STUD_ID = es.ED_STUD_ID
	          join dbo.ED_STUD_FACULTY esf on escw.ED_STUD_ID = esf.ED_STUD_ID and esf.IS_ACTIVE = 1
	          join dbo.ED_STUD_SEMESTER ess on escw.ED_STUD_ID = ess.ED_STUD_ID and escw.ED_CODE_SEMESTER_ID = ess.ED_CODE_SEMESTER_ID
	          and escw.ED_ACAD_YEAR_ID = ess.ED_ACAD_YEAR_ID
	          join dbo.ED_STUD_STATE esst on ess.ED_STUD_SEMESTER_ID = esst.ED_STUD_SEMESTER_ID
	          join dbo.ENTITY_MAIN em on esst.ENT_MAIN_ID = em.ENT_MAIN_ID and ENT_CODE_ENTITY_TYPE_ID = 3
	          join dbo.ED_CODE_LEVEL ecl on ess.ED_CODE_LEVEL_ID = ecl.ED_CODE_LEVEL_ID
	          where escw.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID
	          and (@ED_CODE_SEMESTER_ID is null or @ED_CODE_SEMESTER_ID = 0 or escw.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID)
	          and (@ED_COURSE_ID is null or @ED_COURSE_ID = 0 or escw.ED_COURSE_ID = @ED_COURSE_ID)
	          and (@SC_SCHEDULE_DTL_ID is null or @SC_SCHEDULE_DTL_ID = 0 or escw.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID)
	          and (@ENT_MAIN_ID is null or @ENT_MAIN_ID = 0 or em.ENT_MAIN_ID = @ENT_MAIN_ID)
	          order by case when @OrderColumn = 1 then escw.REQ_DATE
		 		            when @OrderColumn = 2 then escw.ED_ACAD_YEAR_ID
				            when @OrderColumn = 3 then ess.ACCUM_GPA
				            when @OrderColumn = 4 then ess.ACCUM_CH end asc
          else 
	          select escw.*, esf.STUD_FACULTY_CODE, es.FULL_NAME_AR, es.FULL_NAME_EN,
		          ess.ED_CODE_LEVEL_ID, ess.ACCUM_GPA, ess.ACCUM_CH, ecl.DESCR_EN, ecl.DESCR_AR,
              eay.DESCR_AR Acd_DESCR_AR, eay.DESCR_EN Acd_DESCR_EN
	          from
	          dbo.ED_STUD_COURSE_WAIT escw join dbo.ED_ACAD_YEAR eay on escw.ED_ACAD_YEAR_ID = eay.ED_ACAD_YEAR_ID
	          join ED_STUD es on escw.ED_STUD_ID = es.ED_STUD_ID
	          join dbo.ED_STUD_FACULTY esf on escw.ED_STUD_ID = esf.ED_STUD_ID and esf.IS_ACTIVE = 1
	          join dbo.ED_STUD_SEMESTER ess on escw.ED_STUD_ID = ess.ED_STUD_ID and escw.ED_CODE_SEMESTER_ID = ess.ED_CODE_SEMESTER_ID
	          and escw.ED_ACAD_YEAR_ID = ess.ED_ACAD_YEAR_ID
	          join dbo.ED_STUD_STATE esst on ess.ED_STUD_SEMESTER_ID = esst.ED_STUD_SEMESTER_ID
	          join dbo.ENTITY_MAIN em on esst.ENT_MAIN_ID = em.ENT_MAIN_ID and ENT_CODE_ENTITY_TYPE_ID = 3
	          join dbo.ED_CODE_LEVEL ecl on ess.ED_CODE_LEVEL_ID = ecl.ED_CODE_LEVEL_ID
	          where escw.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID
	          and (@ED_CODE_SEMESTER_ID is null or @ED_CODE_SEMESTER_ID = 0 or escw.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID)
	          and (@ED_COURSE_ID is null or @ED_COURSE_ID = 0 or escw.ED_COURSE_ID = @ED_COURSE_ID)
	          and (@SC_SCHEDULE_DTL_ID is null or @SC_SCHEDULE_DTL_ID = 0 or escw.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID)
	          and (@ENT_MAIN_ID is null or @ENT_MAIN_ID = 0 or em.ENT_MAIN_ID = @ENT_MAIN_ID)
	          order by case when @OrderColumn = 1 then escw.REQ_DATE
		 		            when @OrderColumn = 2 then escw.ED_ACAD_YEAR_ID
				            when @OrderColumn = 3 then ess.ACCUM_GPA
				            when @OrderColumn = 4 then ess.ACCUM_CH end desc

        
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SP_Delete_Ed_Stud_Course_Wait" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Elsayed Mohamed 21-10-2012)
-- Purpose: delete Ed_Stud_Course_Wait depend on selected criteria
-- Table Comment: join between()
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@ED_COURSE_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@SC_SCHEDULE_DTL_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@ENT_MAIN_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
        
          delete escw from dbo.ED_STUD_COURSE_WAIT escw
          join ED_STUD es on escw.ED_STUD_ID = es.ED_STUD_ID
          join dbo.ED_STUD_SEMESTER ess on escw.ED_STUD_ID = ess.ED_STUD_ID and escw.ED_CODE_SEMESTER_ID = ess.ED_CODE_SEMESTER_ID
          and escw.ED_ACAD_YEAR_ID = ess.ED_ACAD_YEAR_ID
          join dbo.ED_STUD_STATE esst on ess.ED_STUD_SEMESTER_ID = esst.ED_STUD_SEMESTER_ID
          join dbo.ENTITY_MAIN em on esst.ENT_MAIN_ID = em.ENT_MAIN_ID and ENT_CODE_ENTITY_TYPE_ID = 3
          where escw.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID
          and (@ED_CODE_SEMESTER_ID is null or @ED_CODE_SEMESTER_ID = 0 or escw.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID)
          and (@ED_COURSE_ID is null or @ED_COURSE_ID = 0 or escw.ED_COURSE_ID = @ED_COURSE_ID)
          and (@SC_SCHEDULE_DTL_ID is null or @SC_SCHEDULE_DTL_ID = 0 or escw.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID)
          and (@ENT_MAIN_ID is null or @ENT_MAIN_ID = 0 or em.ENT_MAIN_ID = @ENT_MAIN_ID)
        
				]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="GetThesis_Course_Stud" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdel-Hadi Mustafa 07-11-2012)
-- 
-- Table Comment: join between()
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@ED_STUD_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>

      </parameters>
      <body>
        <![CDATA[
       
        SELECT    ED_COURSE.ED_COURSE_ID,ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR,ED_COURSE.COURSE_DESCR_EN, ED_STUD.ED_STUD_ID,
			            ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE
        FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
        WHERE     (ED_COURSE.ED_CODE_COURSE_ID = 4) 
					        AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID) AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID) 
                   AND (ED_STUD_SEMESTER.ED_STUD_ID = @ED_STUD_ID) AND (ED_STUD_FACULTY.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID)
         
				]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="Get_Faculty_Preferences" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdel-Hadi Mustafa 07-11-2012)
-- 
-- Table Comment: join between()
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ADM_APPLICANT_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
         --Fill Combo Faculty
       SELECT DISTINCT 
                      ENTITY_MAIN.ENT_MAIN_ID, ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN,  
                      ENTITY_MAIN.AS_FACULTY_INFO_ID
            FROM      ADM_APPLICANT INNER JOIN
					  ED_STUD_QUAL ON ADM_APPLICANT.ADM_APPLICANT_ID = ED_STUD_QUAL.ADM_APPLICANT_ID INNER JOIN
									  
                      ADM_PRECOND_QUAL ON ED_STUD_QUAL.ED_CODE_QUAL_ID = ADM_PRECOND_QUAL.ADM_CDE_CERT_TYPE_ID INNER JOIN
                      ENTITY_MAIN ON ADM_PRECOND_QUAL.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      AS_FACULTY_INFO ON ENTITY_MAIN.AS_FACULTY_INFO_ID = AS_FACULTY_INFO.AS_FACULTY_INFO_ID
            WHERE     ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 2 AND(ADM_APPLICANT.ADM_APPLICANT_ID =@ADM_APPLICANT_ID)
         

				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="Get_Major_Preferences" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Abdel-Hadi Mustafa 07-11-2012)
-- 
-- Table Comment: join between()
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ADM_APPLICANT_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
      </parameters>
      <body>
        <![CDATA[
        --Fill Combo Programs(Majors)

         Select distinct ENTITY_MAIN.ENT_MAIN_ID,ENTITY_MAIN.ENT_DESCR_AR, ENTITY_MAIN.ENT_DESCR_EN,NODE_PATH
        From ENTITY_MAIN
        Where (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5)--Major
        and ENTITY_MAIN.AS_FACULTY_INFO_ID=@AS_FACULTY_INFO_ID
        and exists(
    select 1
    From ADM_APPLICANT INNER JOIN
    ED_STUD_QUAL ON ADM_APPLICANT.ADM_APPLICANT_ID = ED_STUD_QUAL.ADM_APPLICANT_ID INNER JOIN
    ADM_PRECOND_QUAL ON (ED_STUD_QUAL.ED_CODE_QUAL_ID = ADM_PRECOND_QUAL.ADM_CDE_CERT_TYPE_ID
    and ED_STUD_QUAL.TOTAL_PERCENT >=ADM_PRECOND_QUAL.MIN_PERCNT) INNER JOIN
    ENTITY_MAIN In_ENTITY_MAIN on  In_ENTITY_MAIN.ENT_MAIN_ID=ADM_PRECOND_QUAL.ENT_MAIN_ID
    where ADM_APPLICANT.ADM_APPLICANT_ID =@ADM_APPLICANT_ID --ADM_PRECOND_QUAL.ADM_CDE_CERT_TYPE_ID=1
    and ENTITY_MAIN.NODE_PATH   like In_ENTITY_MAIN.NODE_PATH + '%')

         
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SP_GetStudentRegister_SpecificCourse_S" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (dalia farouk 7-11-2012)
-- Purpose: get all student which register specific course to replace them from course to another 
-- Table Comment: join between()
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null"/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null"/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@AS_FACULTY_INFO_ID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>

      </parameters>
      <body>
        <![CDATA[
    select distinct ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID,ED_STUD_COURSE_REG.ED_COURSE_ID,
ED_STUD.ED_STUD_ID,ED_STUD.FULL_NAME_AR,ED_STUD.FULL_NAME_EN,ED_STUD_FACULTY.STUD_FACULTY_CODE
,ED_CODE_LEVEL.DESCR_AR,ED_CODE_LEVEL.DESCR_EN,ED_CODE_LEVEL.ED_CODE_LEVEL_ID

from ED_STUD_COURSE_REG 
inner join ED_COURSE on ED_STUD_COURSE_REG.ED_COURSE_ID=ED_COURSE.ED_COURSE_ID
inner join ED_STUD_SEMESTER on ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
inner join ED_STUD on  ED_STUD.ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
inner join ED_CODE_LEVEL on ED_CODE_LEVEL.ED_CODE_LEVEL_ID=ED_STUD_SEMESTER.ED_CODE_LEVEL_ID
where 
ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AS_FACULTY_INFO_ID
 AND (@ED_ACAD_YEAR_ID IS NULL OR @ED_ACAD_YEAR_ID = 0 or ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID) 
 AND (@ED_CODE_SEMESTER_ID IS NULL OR @ED_CODE_SEMESTER_ID = 0 or ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID)
 and ED_COURSE.ED_COURSE_ID=@EdCourseId
         
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetEdTrainingDetails" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_PROJ_SUPERVISOR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsDeTrainSiteID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
        select ED_TRAINING.*, ED_ACAD_YEAR.DESCR_AR as AcadYearDescAr, ED_ACAD_YEAR.DESCR_EN as AcadYearDescEn,
	      ED_CODE_SEMESTER.DESCR_AR as SemesterDescAr, ED_CODE_SEMESTER.DESCR_EN as SemesterDescEn,
	      ED_TRAIN_SUPERVISOR.ED_TRAIN_SUPERVISOR_ID, ED_TRAIN_SUPERVISOR.SA_STF_MEMBER_ID,
	      SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN,
	      GS_CDE_TRAIN_SITE.DESCR_AR as TrainingCenterNameAr, GS_CDE_TRAIN_SITE.DESCR_EN as TrainingCenterNameEn
	      from ED_TRAINING
	      join GS_CDE_TRAIN_SITE on  GS_CDE_TRAIN_SITE.GS_CDE_TRAIN_SITE_ID = ED_TRAINING.GS_CDE_TRAIN_SITE
	      join ED_ACAD_YEAR on ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_TRAINING.ED_ACAD_YEAR_ID 
	      join ED_CODE_SEMESTER on ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_TRAINING.ED_CODE_SEMESTER_ID
	      left outer join (ED_TRAIN_SUPERVISOR join SA_STF_MEMBER on SA_STF_MEMBER.SA_STF_MEMBER_ID = ED_TRAIN_SUPERVISOR.SA_STF_MEMBER_ID)
        on ED_TRAIN_SUPERVISOR.ED_TRAINING_ID = ED_TRAINING.ED_TRAINING_ID
	      where (@EdAcadYearId is null or @EdAcadYearId = 0 or ED_TRAINING.ED_ACAD_YEAR_ID = @EdAcadYearId)
	      and (@EdCodeSemesterId is null or @EdCodeSemesterId = 0 or ED_TRAINING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
        and (@GsDeTrainSiteID is null or @GsDeTrainSiteID = 0 or ED_TRAINING.GS_CDE_TRAIN_SITE = @GsDeTrainSiteID);
        
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="SearchStudThesis" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_PROJ_SUPERVISOR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ED_ACAD_YEAR_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@ED_CODE_SEMESTER_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@AS_CODE_DEGREE_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@ENT_MAIN_ID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@STUD_NAME" type="nvarchar" direction="Input" size="50" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
        SELECT      PG_THESIS_STUD.PG_THESIS_STUD_ID, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE, PG_THESIS_STUD.TITLE_AR, PG_THESIS_STUD.TITLE_EN, 
                    CONVERT(VARCHAR(12), PG_THESIS_STUD.REG_DATE,107) AS REG_DATE, CONVERT(VARCHAR(12), PG_THESIS_STUD.GRANT_DATE, 107) AS GRANT_DATE, PG_THESIS_STUD.TOPIC_EN, PG_THESIS_STUD.TOPIC_AR,
                    ENTITY_MAIN.ENT_DESCR_AR DEG_NAME_AR,ENTITY_MAIN.ENT_DESCR_EN DEG_NAME_EN
      FROM          ED_STUD_STATE INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      PG_THESIS_STUD ON ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = PG_THESIS_STUD.ED_ACAD_YEAR_ID AND 
                      ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = PG_THESIS_STUD.ED_CODE_SEMESTER_ID AND 
                      ED_STUD_SEMESTER.ED_STUD_ID = PG_THESIS_STUD.ED_STUD_ID INNER JOIN
                      ENTITY_MAIN ON ED_STUD_STATE.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID INNER JOIN
                      ED_STUD ON PG_THESIS_STUD.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID
    
    WHERE   (@AS_CODE_DEGREE_ID is null or @AS_CODE_DEGREE_ID=0 or ENTITY_MAIN.AS_CODE_DEGREE_ID=@AS_CODE_DEGREE_ID) AND
            (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 15)
            --AND(@ENT_MAIN_ID is null or @ENT_MAIN_ID = 0 or ENTITY_MAIN.ENT_MAIN_ID = @ENT_MAIN_ID)
            AND
            (@ED_ACAD_YEAR_ID is null or @ED_ACAD_YEAR_ID = 0 or PG_THESIS_STUD.ED_ACAD_YEAR_ID = @ED_ACAD_YEAR_ID) AND 
            (@ED_CODE_SEMESTER_ID is null or @ED_CODE_SEMESTER_ID = 0 or PG_THESIS_STUD.ED_CODE_SEMESTER_ID = @ED_CODE_SEMESTER_ID) AND 
            (@STUD_NAME is null or @STUD_NAME ='0' or ED_STUD.FULL_NAME_AR like @STUD_NAME +'%'  or  ED_STUD.FULL_NAME_EN like @STUD_NAME +'%' );
      
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SP_ENT_MAIN_MATRIX_S" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (dalia farouk 11-11-2012)
-- Purpose: get all Degree of major
-- Table Comment: join between()
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@lang" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@asFacultyInfo" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>
        <parameter name="@entMainID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(9, 0)" nulldefault="null"/>

      </parameters>
      <body>
        <![CDATA[
 if(@lang=2)
begin
SELECT      ENT_MAIN_MATRIX.ENT_MAIN_MATRIX_ID, ENT_MAIN_MATRIX.ENT_MAIN_ID, ENT_MAIN_MATRIX.ENT_MAIN_MAJOR_ID, 
                      ENT_MAIN_MATRIX.ENT_MAIN_MINOR_ID, ENTITY_MAIN_1.ENT_CODE_ENTITY_TYPE_ID, 
                      ENTITY_MAIN_1.ENT_DESCR_EN AS DegreeType,  ENTITY_MAIN.ENT_DESCR_EN AS MajorName, 
                     ENTITY_MAIN_2.ENT_DESCR_EN AS MinorName,ENT_MAIN_MATRIX.GRNTD_DEG_EN as GRNTD_DEG_Des
FROM         ENT_MAIN_MATRIX LEFT OUTER JOIN
                      ENTITY_MAIN ON ENT_MAIN_MATRIX.ENT_MAIN_MAJOR_ID = ENTITY_MAIN.ENT_MAIN_ID LEFT OUTER JOIN
                      ENTITY_MAIN AS ENTITY_MAIN_2 ON ENT_MAIN_MATRIX.ENT_MAIN_MINOR_ID = ENTITY_MAIN_2.ENT_MAIN_ID LEFT OUTER JOIN
                      ENTITY_MAIN AS ENTITY_MAIN_1 ON ENT_MAIN_MATRIX.ENT_MAIN_ID = ENTITY_MAIN_1.ENT_MAIN_ID
WHERE     (ENTITY_MAIN_1.ENT_CODE_ENTITY_TYPE_ID = 15 OR
                      ENTITY_MAIN_1.ENT_CODE_ENTITY_TYPE_ID IS NULL) AND (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5 OR
                      ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID IS NULL) AND (ENTITY_MAIN_2.ENT_CODE_ENTITY_TYPE_ID = 6 OR
                      ENTITY_MAIN_2.ENT_CODE_ENTITY_TYPE_ID IS NULL)
                      
and  ENT_MAIN_MATRIX.ENT_MAIN_ID in (select ENTITY_MAIN.ENT_MAIN_ID from ENTITY_MAIN where ENT_CODE_ENTITY_TYPE_ID=15 and (@asFacultyInfo=0 or AS_FACULTY_INFO_ID=@asFacultyInfo) and (@entMainID=0 or ENTITY_MAIN.ENT_MAIN_ID=@entMainID))
end
else
begin
SELECT      ENT_MAIN_MATRIX.ENT_MAIN_MATRIX_ID, ENT_MAIN_MATRIX.ENT_MAIN_ID, ENT_MAIN_MATRIX.ENT_MAIN_MAJOR_ID, 
                      ENT_MAIN_MATRIX.ENT_MAIN_MINOR_ID, ENTITY_MAIN_1.ENT_CODE_ENTITY_TYPE_ID, ENTITY_MAIN_1.ENT_DESCR_AR AS DegreeType, 
                      ENTITY_MAIN.ENT_DESCR_AR AS MajorName, 
                      ENTITY_MAIN_2.ENT_DESCR_AR AS MinorName,ENT_MAIN_MATRIX.GRNTD_DEG_AR as GRNTD_DEG_Des
FROM         ENT_MAIN_MATRIX LEFT OUTER JOIN
                      ENTITY_MAIN ON ENT_MAIN_MATRIX.ENT_MAIN_MAJOR_ID = ENTITY_MAIN.ENT_MAIN_ID LEFT OUTER JOIN
                      ENTITY_MAIN AS ENTITY_MAIN_2 ON ENT_MAIN_MATRIX.ENT_MAIN_MINOR_ID = ENTITY_MAIN_2.ENT_MAIN_ID LEFT OUTER JOIN
                      ENTITY_MAIN AS ENTITY_MAIN_1 ON ENT_MAIN_MATRIX.ENT_MAIN_ID = ENTITY_MAIN_1.ENT_MAIN_ID
WHERE     (ENTITY_MAIN_1.ENT_CODE_ENTITY_TYPE_ID = 15 OR
                      ENTITY_MAIN_1.ENT_CODE_ENTITY_TYPE_ID IS NULL) AND (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 5 OR
                      ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID IS NULL) AND (ENTITY_MAIN_2.ENT_CODE_ENTITY_TYPE_ID = 6 OR
                      ENTITY_MAIN_2.ENT_CODE_ENTITY_TYPE_ID IS NULL)
                      
and  ENT_MAIN_MATRIX.ENT_MAIN_ID in (select ENTITY_MAIN.ENT_MAIN_ID from ENTITY_MAIN where ENT_CODE_ENTITY_TYPE_ID=15 and (@asFacultyInfo=0 or AS_FACULTY_INFO_ID=@asFacultyInfo) and (@entMainID=0 or ENTITY_MAIN.ENT_MAIN_ID=@entMainID))
end


				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetEdTrainStudDetails" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_PROJ_SUPERVISOR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsDeTrainSiteID" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
        select ED_TRAIN_STUD.*, ED_STUD.FULL_NAME_AR, ED_STUD.FULL_NAME_EN, ED_STUD_FACULTY.STUD_FACULTY_CODE
	      from ED_TRAINING
	      join GS_CDE_TRAIN_SITE on  GS_CDE_TRAIN_SITE.GS_CDE_TRAIN_SITE_ID = ED_TRAINING.GS_CDE_TRAIN_SITE
	      join ED_TRAIN_STUD on ED_TRAIN_STUD.ED_TRAINING_ID = ED_TRAINING.ED_TRAINING_ID
	      join ED_STUD on ED_STUD.ED_STUD_ID = ED_TRAIN_STUD.ED_STUD_ID
	      join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.IS_ACTIVE = 1
	      where ED_TRAINING.ED_ACAD_YEAR_ID = @EdAcadYearId 
	      and ED_TRAINING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
	      and ED_TRAINING.GS_CDE_TRAIN_SITE = @GsDeTrainSiteID;
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="U_GS_ADDRESS_DTL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GS_ADDRESS_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsAddressDtlId" type="numeric" direction="Input" size="10" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@Child1Id" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@Child2Id" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@Child3Id" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@DtlAddAr" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@DtlAddEn" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@Child4Id" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_GsAddressDtlId numeric(9, 0)
				SELECT @V_GsAddressDtlId = ISNULL(MAX(GS_ADDRESS_DTL_ID), 0) + 1 FROM [dbo].[GS_ADDRESS_DTL];
				
				INSERT INTO [dbo].[GS_ADDRESS_DTL]
					(
					[GS_ADDRESS_DTL_ID]
					,[ED_STUD_ID]
					,[GS_COUNTRY_NODE_ID]
					,[CHILD1_ID]
					,[CHILD2_ID]
					,[CHILD3_ID]
					,[DTL_ADD_AR]
					,[DTL_ADD_EN]
					,[ADM_APPLICANT_ID]
					,[CHILD4_ID]
					)
				VALUES
					(
					@V_GsAddressDtlId
					,@EdStudId
					,@GsCountryNodeId
					,@Child1Id
					,@Child2Id
					,@Child3Id
					,@DtlAddAr
					,@DtlAddEn
					,@AdmApplicantId
					,@Child4Id
					)
				 SET @GsAddressDtlId = @V_GsAddressDtlId
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GS_CDE_TRAIN_SITE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GS_ADDRESS_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCdeTrainSiteId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@GsCdeTrnSiteActId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsCdeTrnSiteTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsAddressDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@PhoneNo" type="numeric" direction="Input" size="9" precision="15" scale="0" param="(15, 0)" nulldefault=""/>
        <parameter name="@MobNo" type="numeric" direction="Input" size="9" precision="15" scale="0" param="(15, 0)" nulldefault=""/>
        <parameter name="@EMail" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@WebSite" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_GsCdeTrainSiteId numeric(5, 0)
				SELECT @V_GsCdeTrainSiteId = ISNULL(MAX(GS_CDE_TRAIN_SITE_ID), 0) + 1 FROM [dbo].[GS_CDE_TRAIN_SITE];
				
				INSERT INTO [dbo].[GS_CDE_TRAIN_SITE]
					(
					[GS_CDE_TRAIN_SITE_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[GS_CDE_TRN_SITE_ACT_ID]
					,[GS_CDE_TRN_SITE_TYPE_ID]
					,[GS_ADDRESS_DTL_ID]
					,[PHONE_NO]
					,[MOB_NO]
					,[E_MAIL]
					,[WEB_SITE]
					)
				VALUES
					(
					@V_GsCdeTrainSiteId
					,@DescrAr
					,@DescrEn
					,@GsCdeTrnSiteActId
					,@GsCdeTrnSiteTypeId
					,@GsAddressDtlId
					,@PhoneNo
					,@MobNo
					,@EMail
					,@WebSite
					)
				
					SET @GsCdeTrainSiteId = @V_GsCdeTrainSiteId
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="GetSpecificDepartmentStaff">
      <comment>
        <![CDATA[/*
  
----------------------------------------------------------------------------------------------------

-- Created By:  (dalia farouk 13-11-2012)
-- Purpose: get specific staff from department or university or fac not all 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@DeptEntMainId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@Lang" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
				SET ANSI_NULLS OFF
				
      
				SELECT
					SA_STF_MEMBER.*,
          SA_CODE_JOB_STATUS.JOB_STATUS_DESCR,
          SA_CODE_SC_DEG.SC_DEG_DESCR_AR,
          SA_CODE_SC_DEG.SC_DEG_DESCR_EN,
          ENTITY_MAIN.ENT_DESCR_AR,
          ENTITY_MAIN.ENT_DESCR_EN
          
          from   SA_STF_MEMBER inner join ENTITY_MAIN on SA_STF_MEMBER.AS_NODE_ID=ENTITY_MAIN.ENT_MAIN_ID
                 left outer join SA_CODE_JOB_STATUS on SA_STF_MEMBER.SA_CODE_JOB_STATUS_ID=SA_CODE_JOB_STATUS.SA_CODE_JOB_STATUS_ID
                 left outer join SA_CODE_SC_DEG on SA_STF_MEMBER.SA_CODE_SC_DEG_ID=SA_CODE_SC_DEG.SA_CODE_SC_DEG_ID
          where  SA_STF_MEMBER.AS_NODE_ID=@DeptEntMainId
          
          order by case when @Lang='English' then SA_STF_MEMBER.[STF_FULL_NAME_EN] else SA_STF_MEMBER.[STF_FULL_NAME_AR] end
          				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetEntPolicyGrdDtlUsingEdCodeGrdType">
      <comment>
        <![CDATA[/*
  
----------------------------------------------------------------------------------------------------

-- Created By:  (Elsayed Mohamed 26-11-2012)
-- Purpose: used to get faculty grading depend on @ED_CODE_GRADING_TYPE_ID 
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ED_CODE_GRADING_TYPE_ID" type="numeric" direction="Input" size="9" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
				SET ANSI_NULLS OFF
        
        
        declare @entMainId numeric;

        select @entMainId = Ent_Main_Id from ENTITY_MAIN
        where AS_FACULTY_INFO_ID = @AsFacultyInfoId and ENT_CODE_ENTITY_TYPE_ID = 2;

        if exists (
			        select * from ENT_POLICY_GRADING_HDR where 
			        ENT_MAIN_ID = @entMainId and ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID = @ED_CODE_GRADING_TYPE_ID and ENT_POLICY_GRADING_HDR.IS_GENERAL = 1
		          )
        begin

	        select distinct * from ENT_POLICY_GRADING_dtl where ENT_POLICY_GRADING_HDR_ID in (
		        select ENT_POLICY_GRADING_HDR_ID from ENT_POLICY_GRADING_HDR where ENT_MAIN_ID = @entMainId and ENT_POLICY_GRADING_HDR.IS_GENERAL = 1 and ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID = @ED_CODE_GRADING_TYPE_ID
	        )
	        order by ENT_POLICY_GRADING_dtl.GRAD_ORDER;
	 
        end
        else
        begin

	        select @entMainId= ENT_MAIN_ID from ENTITY_MAIN where ENT_CODE_ENTITY_TYPE_ID = 1

	        select distinct * from ENT_POLICY_GRADING_dtl where ENT_POLICY_GRADING_HDR_ID in (
		        select ENT_POLICY_GRADING_HDR_ID from ENT_POLICY_GRADING_HDR where ENT_MAIN_ID = @entMainId and ENT_POLICY_GRADING_HDR.IS_GENERAL = 1 and ENT_POLICY_GRADING_HDR.ED_CODE_GRADING_TYPE_ID = @ED_CODE_GRADING_TYPE_ID
	        )
	        order by ENT_POLICY_GRADING_dtl.GRAD_ORDER;

        end
        
        
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="U_ADM_RSRVD_CODE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina mostafa ++ 28/11/2012)
-- Purpose: Inserts a record into the ADM_RSRVD_CODE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmRsrvdCodeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_AdmRsrvdCodeId numeric(3, 0)
				SELECT @V_AdmRsrvdCodeId = ISNULL(MAX(ADM_RSRVD_CODE_ID), 0) + 1 FROM [dbo].[ADM_RSRVD_CODE];
				
          if Not exists (
			        select * from ADM_RSRVD_CODE where STUD_CODE=@StudCode
		          )
        begin
				INSERT INTO [dbo].[ADM_RSRVD_CODE]
					(
					[ADM_RSRVD_CODE_ID]
					,[STUD_CODE]
					)
				VALUES
					(
					@V_AdmRsrvdCodeId
					,@StudCode
					)
				End
        else
        begin
             RAISERROR('ADM_RSRVD_CODE',16,-1)
              RETURN 
             END 
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="U_ADM_RSRVD_CODE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina mostafa ++ 28/11/2012)
-- Purpose: Updates a record in the ADM_RSRVD_CODE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmRsrvdCodeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@OriginalAdmRsrvdCodeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@StudCode" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
         if Not exists (
			        select * from ADM_RSRVD_CODE where STUD_CODE=@StudCode
		          )
        begin
				UPDATE
					[dbo].[ADM_RSRVD_CODE]
				SET
					[ADM_RSRVD_CODE_ID] = @AdmRsrvdCodeId
					,[STUD_CODE] = @StudCode
				WHERE
[ADM_RSRVD_CODE_ID] = @AdmRsrvdCodeId 
				end
         else
        begin
             RAISERROR('ADM_RSRVD_CODE',16,-1)
              RETURN 
             END 
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="Get_course_All_Session_No" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (emohamed ++ 19/12/2012)
-- Purpose: Updates a record in the ADM_RSRVD_CODE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
        select dbo.Get_course_All_Session_No(43, null);
        
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GetScheduleCourses">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        select SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID, ED_OFFERING_COURSE.ED_COURSE_ID,
		      ED_COURSE.COURSE_CODE, ED_COURSE.COURSE_DESCR_AR, ED_COURSE.COURSE_DESCR_EN,
		      ED_COURSE.COURSE_CODE + ' - ' + ED_COURSE.COURSE_DESCR_AR  DESCR_AR,
		      ED_COURSE.COURSE_CODE + ' - ' + ED_COURSE.COURSE_DESCR_EN  DESCR_En
	      from SC_SCHEDULE_HDR
	        inner join ED_OFFERING_COURSE on ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID
	        inner join ED_OFFERING on ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID
	        inner join ED_COURSE on ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID
	      where ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
	        and (@EntityMainId is null or @EntityMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntityMainId)
	        and ED_ OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
	        and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="Bulk_Copy_Course_Section">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Thursday, April 22, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EntityMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@StaffFlg" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@HallsFlg" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ExamFlg" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ExamSupervisorFlg" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
          declare @CurrentEdAcadYearId numeric(9, 0), @CurrentEdCodeSemesterId numeric(9, 0), @SC_SCHEDULE_HDR_MaxId numeric(9, 0) = 0,
	        @SC_SCHEDULE_DTL_MaxId numeric(9, 0) = 0, @MaxId numeric(9,0), @ED_EXAM_SCHDL_MaxId numeric(9, 0);
	
	        select @CurrentEdAcadYearId = ED_ACAD_YEAR_ID
	        from dbo.ED_ACAD_YEAR where CURRENT_YEAR = 1;
	
	        select @CurrentEdCodeSemesterId = ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID
	        from dbo.ED_SEMESTER_OPEN
	        where ED_SEMESTER_OPEN.ENT_MAIN_ID in (select ENTITY_MAIN.ENT_MAIN_ID from ENTITY_MAIN where ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoId and ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 2);
	
	        declare @SC_SCHEDULE_HDR_ID numeric(7, 0), @ED_OFFERING_COURSE_ID numeric(7,0), @ED_CODE_COURSE_TEACHING_ID numeric(4, 0),
	        @NO_SLOTS numeric(1, 0), @NO_GROUPS numeric(2, 0), @NO_STUDENTS numeric(4, 0), @COURSE_CODE nvarchar(50), @TchngMthdDescrAr nvarchar(200),
	        @TchngMthdDescrEn nvarchar(200);
	
	        declare @SC_SCHEDULE_DTL_ID numeric(7, 0), @GROUP_DESCR_AR nvarchar(50), @GROUP_DESCR_EN nvarchar(50),
	        @GROUP_ORDER numeric(3, 0), @GS_CODE_GENDER_ID numeric(9, 0), @NOTES nvarchar(150), @AS_FACULTY_INFO_ID numeric(3, 0),
	        @IS_RESULT_APPROVED numeric(1, 0), @SC_SCHEDULE_DTL_NO_STUDENTS numeric(4, 0), @NO_STUD_WAIT numeric(3, 0),
	        @ONLINE_FLG numeric(1, 0), @IS_CLOSED numeric(1,0), @NOTES_EMP nvarchar(150), @NO_STUD_MAX numeric(4, 0),
	        @SELF_FLG numeric(1,0);
	
	        create table #OperationMsgs
	        (
		        CourseCode nvarchar(50),
		        TchngMthdAr nvarchar(200),
		        TchngMthEn nvarchar(200),
		        OperationName nvarchar(200),
		        MsgAr nvarchar(max),
		        MsgEn nvarchar(max),
		        flag numeric(1, 0)
	        )
		
	        declare SCHEDULE_HDR cursor 
	        for
	        select *
	        from
	        (
		        select SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID, SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID, 
		        (
			        select eoc.ED_OFFERING_COURSE_ID from ED_OFFERING_COURSE eoc 
				        inner join ED_OFFERING eo on eoc.ED_OFFERING_ID = eo.ED_OFFERING_ID 
			        where eoc.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID
			        and eo.AS_FACULTY_INFO_ID = @AsFacultyInfoId
			        and (@EntityMainId is null or @EntityMainId = 0 or eo.ENT_MAIN_ID = @EntityMainId)
			        and eo.ED_ACAD_YEAR_ID = @CurrentEdAcadYearId
			        and eo.ED_CODE_SEMESTER_ID = @CurrentEdCodeSemesterId
			        and not Exists(select '' from SC_SCHEDULE_HDR s where s.ED_OFFERING_COURSE_ID = eoc.ED_OFFERING_COURSE_ID)
		        ) EdOfferingCourseId, SC_SCHEDULE_HDR.NO_SLOTS, SC_SCHEDULE_HDR.NO_GROUPS, SC_SCHEDULE_HDR.NO_STUDENTS,
		        ED_COURSE.COURSE_CODE, ED_CDE_TCHNG_MTHD.DESCR_AR 'TchngMthdDescrAr', ED_CDE_TCHNG_MTHD.DESCR_EN 'TchngMthdDescrEn'
		        from SC_SCHEDULE_HDR
			        inner join ED_OFFERING_COURSE on ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID
			        inner join ED_OFFERING on ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID
			        inner join ED_COURSE on ED_COURSE.ED_COURSE_ID = ED_OFFERING_COURSE.ED_COURSE_ID
			        inner join ED_CODE_COURSE_TEACHING on ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID = SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID
			        inner join ED_CDE_TCHNG_MTHD on ED_CDE_TCHNG_MTHD.ED_CDE_TCHNG_MTHD_ID = ED_CODE_COURSE_TEACHING.ED_CDE_TCHNG_MTHD_ID
		        where ED_OFFERING.AS_FACULTY_INFO_ID = @AsFacultyInfoId
		        and (@EntityMainId is null or @EntityMainId = 0 or ED_OFFERING.ENT_MAIN_ID = @EntityMainId)
		        and ED_OFFERING.ED_ACAD_YEAR_ID = @EdAcadYearId
		        and ED_OFFERING.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
		        and (@EdCourseId is null or @EdCourseId = 0 or ED_OFFERING_COURSE.Ed_Course_Id = @EdCourseId)
	        ) as tbl
	        where EdOfferingCourseId is not null;
	
	        open SCHEDULE_HDR;
	
	        fetch next from SCHEDULE_HDR
	        into @SC_SCHEDULE_HDR_ID, @ED_CODE_COURSE_TEACHING_ID, @ED_OFFERING_COURSE_ID, @NO_SLOTS, @NO_GROUPS, @NO_STUDENTS, @COURSE_CODE, @TchngMthdDescrAr, @TchngMthdDescrEn;
	
	        while @@FETCH_STATUS = 0
	        begin
	
		        -- insert schedule header
		        select @SC_SCHEDULE_HDR_MaxId = isnull(MAX(SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID), 0) + 1 from SC_SCHEDULE_HDR;
		
		        insert into SC_SCHEDULE_HDR
		        values(@SC_SCHEDULE_HDR_MaxId, @ED_OFFERING_COURSE_ID, @ED_CODE_COURSE_TEACHING_ID, @NO_SLOTS, @NO_GROUPS, @NO_STUDENTS);
		
		        insert into #OperationMsgs(CourseCode, TchngMthdAr, TchngMthEn, flag)
		        values(@COURSE_CODE, @TchngMthdDescrAr, @TchngMthdDescrEn, 1);
		
		        declare SCHEDULE_DTL cursor for
		        select SC_SCHEDULE_DTL_ID, GROUP_DESCR_AR, GROUP_DESCR_EN, GROUP_ORDER, GS_CODE_GENDER_ID, NOTES,
			        AS_FACULTY_INFO_ID, IS_RESULT_APPROVED, NO_STUDENTS, NO_STUD_WAIT, ONLINE_FLG, IS_CLOSED, NOTES_EMP,
			        NO_STUD_MAX, SELF_FLG
		        from SC_SCHEDULE_DTL where SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = @SC_SCHEDULE_HDR_ID;
		
		        open SCHEDULE_DTL;
		        fetch next from SCHEDULE_DTL
		        into @SC_SCHEDULE_DTL_ID, @GROUP_DESCR_AR, @GROUP_DESCR_EN,	@GROUP_ORDER, @GS_CODE_GENDER_ID, 
			        @NOTES, @AS_FACULTY_INFO_ID, @IS_RESULT_APPROVED, @SC_SCHEDULE_DTL_NO_STUDENTS, @NO_STUD_WAIT,
			        @ONLINE_FLG, @IS_CLOSED, @NOTES_EMP, @NO_STUD_MAX, @SELF_FLG;
		
		        while @@FETCH_STATUS = 0
		        begin
		
			        begin tran SCHEDULE_Dtls;		
			        begin try			
			
				        select @SC_SCHEDULE_DTL_MaxId = isnull(MAX(SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID), 0) + 1 from SC_SCHEDULE_DTL;
				        set @ED_EXAM_SCHDL_MaxId = 0;
				
				        -- insert new schdule dtls
				        insert into SC_SCHEDULE_DTL(SC_SCHEDULE_DTL_ID, SC_SCHEDULE_HDR_ID, GROUP_DESCR_AR, GROUP_DESCR_EN, GROUP_ORDER, GS_CODE_GENDER_ID, NOTES,
				        AS_FACULTY_INFO_ID, IS_RESULT_APPROVED, NO_STUDENTS, NO_STUD_WAIT, ONLINE_FLG, IS_CLOSED, NOTES_EMP,
				        NO_STUD_MAX, SELF_FLG)
				        values(@SC_SCHEDULE_DTL_MaxId, @SC_SCHEDULE_HDR_MaxId, @GROUP_DESCR_AR, @GROUP_DESCR_EN, @GROUP_ORDER, @GS_CODE_GENDER_ID, 
				        @NOTES, @AS_FACULTY_INFO_ID, @IS_RESULT_APPROVED, @SC_SCHEDULE_DTL_NO_STUDENTS, @NO_STUD_WAIT,
				        @ONLINE_FLG, @IS_CLOSED, @NOTES_EMP, @NO_STUD_MAX, @SELF_FLG);
				
				        insert into #OperationMsgs(OperationName, MsgAr, MsgEn, flag)
				        values('CourseSections', @GROUP_DESCR_AR, @GROUP_DESCR_EN, 1);
				
				        -- insert schdlule days with or without halls
				        select @MaxId = isnull(MAX(SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_DAY_ID), 0) from SC_SCHEDULE_DTL_DAY;
				        if @HallsFlg = 1
				        begin
				
					        -- insert un conflicted rooms
					        insert into SC_SCHEDULE_DTL_DAY(SC_SCHEDULE_DTL_DAY_ID, SC_SCHEDULE_DTL_ID, GS_CODE_WEEK_DAY_ID, 
							        SC_TCHNG_SLOT_ID, SC_BUILDING_ID, SC_HALL_ID, NOTES, FROM_TIME, TO_TIME)
					        select @MaxId + rowNo SC_SCHEDULE_DTL_DAY_ID, SC_SCHEDULE_DTL_ID, GS_CODE_WEEK_DAY_ID, 
							        SC_TCHNG_SLOT_ID, SC_BUILDING_ID, SC_HALL_ID, NOTES, FROM_TIME, TO_TIME
					        from
					        (
						        select * from
						        (
							        select ROW_NUMBER() over(order by SC_SCHEDULE_DTL_DAY_ID) rowNo, @SC_SCHEDULE_DTL_MaxId SC_SCHEDULE_DTL_ID, GS_CODE_WEEK_DAY_ID, 
								        SC_TCHNG_SLOT_ID, SC_BUILDING_ID, SC_HALL_ID, NOTES, FROM_TIME, TO_TIME, dbo.CheckHallTimeConflict(@CurrentEdAcadYearId, @EdCodeSemesterId, SC_HALL_ID, GS_CODE_WEEK_DAY_ID, FROM_TIME, TO_TIME) conflictCount
							        from SC_SCHEDULE_DTL_DAY
							        where SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
						        ) as t
						        where conflictCount = 0
					        ) as tbl;
					
					        -- report about conflicted rooms
					        insert into #OperationMsgs(OperationName, MsgAr, MsgEn, flag)
					        select 'halls', DayNameAr + '(' + convert(nvarchar(5), convert(time(0), FROM_TIME)) + ', ' +  convert(nvarchar(5), convert(time(0), TO_TIME)) + ')-' + BuildingAr + '-' + HallAr,
						        DayNameEn + '(' + convert(nvarchar(5), convert(time(0), FROM_TIME)) + ', ' +  convert(nvarchar(5), convert(time(0), TO_TIME)) + ')-' + BuildingEn + '-' + HallEn,
						        case when conflictCount = 0 then 1 else 0 end
					        from
					        (
						        select GS_CODE_WEEK_DAY.DESCR_AR 'DayNameAr', GS_CODE_WEEK_DAY.DESCR_EN 'DayNameEn' , FROM_TIME, TO_TIME, 
							        SC_BUILDING.DESCR_AR 'BuildingAr', SC_BUILDING.DESCR_EN 'BuildingEn', SC_HALL.DESCR_AR 'HallAr', SC_HALL.DESCR_EN 'HallEn',
							        dbo.CheckHallTimeConflict(@CurrentEdAcadYearId, @EdCodeSemesterId, SC_SCHEDULE_DTL_DAY.SC_HALL_ID, SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID, FROM_TIME, TO_TIME) conflictCount
						        from SC_SCHEDULE_DTL_DAY
						        inner join GS_CODE_WEEK_DAY on GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID = SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID
						        inner join SC_BUILDING on SC_BUILDING.SC_BUILDING_ID = SC_SCHEDULE_DTL_DAY.SC_BUILDING_ID
						        inner join SC_HALL on SC_HALL.SC_HALL_ID = SC_SCHEDULE_DTL_DAY.SC_HALL_ID
						        where SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
					        ) as t;
				        end
				        else
				        begin	
					
					        insert into SC_SCHEDULE_DTL_DAY(SC_SCHEDULE_DTL_DAY_ID, SC_SCHEDULE_DTL_ID, GS_CODE_WEEK_DAY_ID, NOTES, FROM_TIME, TO_TIME)
					        select @MaxId + rowNo SC_SCHEDULE_DTL_DAY_ID, SC_SCHEDULE_DTL_ID, GS_CODE_WEEK_DAY_ID, NOTES, FROM_TIME, TO_TIME
					        from
					        (
						        select ROW_NUMBER() over(order by SC_SCHEDULE_DTL_DAY_ID) rowNo, @SC_SCHEDULE_DTL_MaxId SC_SCHEDULE_DTL_ID, GS_CODE_WEEK_DAY_ID, NOTES, FROM_TIME, TO_TIME
						        from SC_SCHEDULE_DTL_DAY
						        where SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
					        ) as tbl;
					
					        -- report
					        insert into #OperationMsgs(OperationName, MsgAr, MsgEn, flag)
					        select 'Days', DayNameAr + '(' + convert(nvarchar(5), convert(time(0), FROM_TIME)) + ', ' +  convert(nvarchar(5), convert(time(0), TO_TIME)) + ')',
						        DayNameEn + '(' + convert(nvarchar(5), convert(time(0), FROM_TIME)) + ', ' +  convert(nvarchar(5), convert(time(0), TO_TIME)) + ')', 1
					        from
					        (
						        select GS_CODE_WEEK_DAY.DESCR_AR 'DayNameAr', GS_CODE_WEEK_DAY.DESCR_EN 'DayNameEn' , FROM_TIME, TO_TIME
						        from SC_SCHEDULE_DTL_DAY
						        inner join GS_CODE_WEEK_DAY on GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID = SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID
						        where SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
					        ) as t;
					
				        end
				
				        -- insert unConflicted staff if request
				        if @StaffFlg = 1
				        begin
					        select @MaxId = isnull(MAX(SC_SCHEDULE_DTL_EXT_STF.SC_SCH_DTL_EXT_STF_ID), 0) from SC_SCHEDULE_DTL_EXT_STF;							
					
					        -- check conflict and insert
					        insert into SC_SCHEDULE_DTL_EXT_STF
					        select @MaxId + rowNo SC_SCH_DTL_EXT_STF_ID, SC_SCHEDULE_DTL_ID, SA_STF_MAMBER_ID,
							        STF_ROLE_FLG, NO_HOURS
					        from
					        (
						        select * from
						        (
							        select ROW_NUMBER() over(order by SC_SCH_DTL_EXT_STF_ID) rowNo, @SC_SCHEDULE_DTL_MaxId SC_SCHEDULE_DTL_ID, SA_STF_MAMBER_ID,
								        STF_ROLE_FLG, NO_HOURS, dbo.FnCheckLecturerTimeConflict(@SC_SCHEDULE_DTL_MaxId, SA_STF_MAMBER_ID, @CurrentEdAcadYearId, @CurrentEdCodeSemesterId) conflictCount
							        from SC_SCHEDULE_DTL_EXT_STF
							        where SC_SCHEDULE_DTL_EXT_STF.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
						        ) as t where conflictCount = 0
					        ) as tbl;
					
					        -- report about conflicted staff
					        insert into #OperationMsgs(OperationName, MsgAr, MsgEn, flag)
					        select 'staff', STF_FULL_NAME_AR + '-' + case when ISNULL(STF_ROLE_FLG, 0) = 0 then 'مساعد' else 'رئيسي' end, 
						        STF_FULL_NAME_En + '-' + case when ISNULL(STF_ROLE_FLG, 0) = 0 then 'Assistant' else 'Chief' end,
						        case when conflictCount = 0 then 1 else 0 end
					        from
					        (
						        select SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN, SC_SCHEDULE_DTL_EXT_STF.STF_ROLE_FLG,
							        dbo.FnCheckLecturerTimeConflict(@SC_SCHEDULE_DTL_MaxId, SC_SCHEDULE_DTL_EXT_STF.SA_STF_MAMBER_ID, @CurrentEdAcadYearId, @CurrentEdCodeSemesterId) conflictCount
						        from SC_SCHEDULE_DTL_EXT_STF
							        inner join SA_STF_MEMBER on SA_STF_MEMBER.SA_STF_MEMBER_ID = SC_SCHEDULE_DTL_EXT_STF.SA_STF_MAMBER_ID
						        where SC_SCHEDULE_DTL_EXT_STF.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
					        ) as t;
				
				        end
				
				        -- insert exam time and place if requested
				        if @ExamFlg = 1
				        begin
				
					        if not Exists(select '' from ED_EXAM_SCHDL where ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @CurrentEdAcadYearId and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @CurrentEdCodeSemesterId
							        and ED_EXAM_SCHDL.ED_COURSE_ID = (select ED_OFFERING_COURSE_ID from ED_OFFERING_COURSE where ED_OFFERING_COURSE_ID = @ED_OFFERING_COURSE_ID))
					        begin
						        select @ED_EXAM_SCHDL_MaxId = isnull(MAX(ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID), 0) + 1 from ED_EXAM_SCHDL;
						
						        insert into ED_EXAM_SCHDL(ED_EXAM_SCHDL_ID, ED_ACAD_YEAR_ID, ED_CODE_SEMESTER_ID, ED_CODE_COURSE_ASSESS_ID, ED_COURSE_ID, EXAM_DATE,
							        FROM_TIME, TO_TIME, NOTES, AS_FACULTY_INFO_ID)
						        select @ED_EXAM_SCHDL_MaxId ED_EXAM_SCHDL_ID, @CurrentEdAcadYearId ED_ACAD_YEAR_ID, @EdCodeSemesterId ED_CODE_SEMESTER_ID, ED_CODE_COURSE_ASSESS_ID, ED_COURSE_ID, EXAM_DATE,
							        FROM_TIME, TO_TIME, NOTES, AS_FACULTY_INFO_ID
						        from ED_EXAM_SCHDL 
						        where ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId 
							        and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
							        and ED_EXAM_SCHDL.ED_COURSE_ID = (select ED_OFFERING_COURSE_ID from ED_OFFERING_COURSE where ED_OFFERING_COURSE_ID = @ED_OFFERING_COURSE_ID);					
					        end
					
					        -- check exam room conflict and insert from dbo.CO_EXAM_SCHDL_PLACE
					        if(@ED_EXAM_SCHDL_MaxId = 0)
						        select @ED_EXAM_SCHDL_MaxId = ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID
						        from ED_EXAM_SCHDL 
						        where ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @EdAcadYearId 
							        and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
							        and ED_EXAM_SCHDL.ED_COURSE_ID = (select ED_OFFERING_COURSE_ID from ED_OFFERING_COURSE where ED_OFFERING_COURSE_ID = @ED_OFFERING_COURSE_ID);
					
					        select @MaxId = isnull(MAX(CO_EXAM_SCHDL_PLACE.CO_EXAM_SCHDL_PLACE_ID), 0) from CO_EXAM_SCHDL_PLACE;
					
					        insert into CO_EXAM_SCHDL_PLACE(CO_EXAM_SCHDL_PLACE_ID, SC_BUILDING_ID, SC_HALL_ID, ED_EXAM_SCHDL_ID, STUD_COUNT, SC_SCHEDULE_DTL_ID)
					        select @MaxId + rowNo CO_EXAM_SCHDL_PLACE_ID, SC_BUILDING_ID, SC_HALL_ID, ED_EXAM_SCHDL_ID, STUD_COUNT, SC_SCHEDULE_DTL_ID
					        from
					        (
						        select * from
						        (
							        select ROW_NUMBER() over(order by CO_EXAM_SCHDL_PLACE_ID) rowNo, SC_BUILDING_ID, SC_HALL_ID, 
								        @ED_EXAM_SCHDL_MaxId ED_EXAM_SCHDL_ID, STUD_COUNT, @SC_SCHEDULE_DTL_MaxId SC_SCHEDULE_DTL_ID,
								        dbo.CheckExamHallTimeConflict(@CurrentEdAcadYearId, @CurrentEdCodeSemesterId, SC_HALL_ID, @ED_EXAM_SCHDL_MaxId) conflictCout
							        from CO_EXAM_SCHDL_PLACE
							        where CO_EXAM_SCHDL_PLACE.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
						        ) as t where conflictCout = 0
					        )as tbl;
					
					        -- report conflicted rows
					        insert into #OperationMsgs(OperationName, MsgAr, MsgEn, flag)
					        select 'ExamPlace', convert(nvarchar(10), EXAM_DATE, 103) + '(' + convert(nvarchar(5), convert(time(0), FROM_TIME)) + ', ' +  convert(nvarchar(5), convert(time(0), TO_TIME)) + ')-' + BuildingAr + '-' + HallAr,
						        convert(nvarchar(10), EXAM_DATE, 103) + '(' + convert(nvarchar(5), convert(time(0), FROM_TIME)) + ', ' +  convert(nvarchar(5), convert(time(0), TO_TIME)) + ')-' + BuildingEn + '-' + HallEn,
						        case when conflictCount = 0 then 1 else 0 end
					        from
					        (
						        select EXAM_DATE, FROM_TIME, TO_TIME, SC_BUILDING.DESCR_AR 'BuildingAr', SC_BUILDING.DESCR_EN 'BuildingEn', SC_HALL.DESCR_AR 'HallAr', SC_HALL.DESCR_EN 'HallEn',
							        dbo.CheckExamHallTimeConflict(@CurrentEdAcadYearId, @CurrentEdCodeSemesterId, CO_EXAM_SCHDL_PLACE.SC_HALL_ID, @ED_EXAM_SCHDL_MaxId) conflictCount
						        from CO_EXAM_SCHDL_PLACE
						        inner join ED_EXAM_SCHDL on ED_EXAM_SCHDL.ED_EXAM_SCHDL_ID = CO_EXAM_SCHDL_PLACE.ED_EXAM_SCHDL_ID
						        inner join SC_BUILDING on SC_BUILDING.SC_BUILDING_ID = CO_EXAM_SCHDL_PLACE.SC_BUILDING_ID
						        inner join SC_HALL on SC_HALL.SC_HALL_ID = CO_EXAM_SCHDL_PLACE.SC_HALL_ID
						        where CO_EXAM_SCHDL_PLACE.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
					        ) as t;			
				
				        end
				
				        -- insert unConflicted exam supervisors if requested
				        if @ExamSupervisorFlg = 1
				        begin
					        if(@ED_EXAM_SCHDL_MaxId = 0)
						        select @ED_EXAM_SCHDL_MaxId = ED_EXAM_SCHDL_ID from ED_EXAM_SCHDL 
						        where ED_EXAM_SCHDL.ED_ACAD_YEAR_ID = @CurrentEdAcadYearId 
							        and ED_EXAM_SCHDL.ED_CODE_SEMESTER_ID = @CurrentEdCodeSemesterId
							        and ED_EXAM_SCHDL.ED_COURSE_ID = (select ED_OFFERING_COURSE_ID from ED_OFFERING_COURSE where ED_OFFERING_COURSE_ID = @ED_OFFERING_COURSE_ID);
					
					        if @ED_EXAM_SCHDL_MaxId is not null
					        begin					
						
						        -- check conflict and insert to dbo.ED_EXAM_SUPRVSOR
						        select @MaxId = isnull(MAX(ED_EXAM_SUPRVSOR.ED_EXAM_SUPRVSOR_ID), 0) from ED_EXAM_SUPRVSOR;
						
						        insert into ED_EXAM_SUPRVSOR(ED_EXAM_SUPRVSOR_ID, SC_SCHEDULE_DTL_ID, TYPE_FLG, SA_STF_MEMBER_ID)
						        select @MaxId + rowNo ED_EXAM_SUPRVSOR_ID, SC_SCHEDULE_DTL_ID, TYPE_FLG, SA_STF_MEMBER_ID
						        from
						        (
							        select * from
							        (
								        select ROW_NUMBER() over(order by ED_EXAM_SUPRVSOR_ID) rowNo, @SC_SCHEDULE_DTL_MaxId SC_SCHEDULE_DTL_ID, 
									        TYPE_FLG, SA_STF_MEMBER_ID, dbo.CheckExamSupervisorConflict(@CurrentEdAcadYearId, @CurrentEdCodeSemesterId, @ED_EXAM_SCHDL_MaxId, SA_STF_MEMBER_ID) conflictCount
								        from ED_EXAM_SUPRVSOR
								        where ED_EXAM_SUPRVSOR.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
							        ) as t where conflictCount = 0
						        ) as tbl;
						
						        -- report conflicted rows
						        insert into #OperationMsgs(OperationName, MsgAr, MsgEn, flag)
						        select 'staff', STF_FULL_NAME_AR + '-' + case when ISNULL(TYPE_FLG, 0) = 0 then 'مساعد' else 'رئيسي' end, 
							        STF_FULL_NAME_En + '-' + case when ISNULL(TYPE_FLG, 0) = 0 then 'Assistant' else 'Chief' end,
							        case when conflictCount = 0 then 1 else 0 end
						        from
						        (
							        select SA_STF_MEMBER.STF_FULL_NAME_AR, SA_STF_MEMBER.STF_FULL_NAME_EN, TYPE_FLG,
								        dbo.CheckExamSupervisorConflict(@CurrentEdAcadYearId, @CurrentEdCodeSemesterId, @ED_EXAM_SCHDL_MaxId, ED_EXAM_SUPRVSOR.SA_STF_MEMBER_ID) conflictCount
							        from ED_EXAM_SUPRVSOR
								        inner join SA_STF_MEMBER on SA_STF_MEMBER.SA_STF_MEMBER_ID = ED_EXAM_SUPRVSOR.SA_STF_MEMBER_ID
							        where ED_EXAM_SUPRVSOR.SC_SCHEDULE_DTL_ID = @SC_SCHEDULE_DTL_ID
						        ) as t;						 
					
					        end
				
				        end		
		
				        commit tran SCHEDULE_Dtls
			        end try
			        begin catch
				
				        rollback tran SCHEDULE_Dtls
				
			        end catch
			
			        fetch next from SCHEDULE_DTL
			        into @SC_SCHEDULE_DTL_ID, @GROUP_DESCR_AR, @GROUP_DESCR_EN,	@GROUP_ORDER, @GS_CODE_GENDER_ID, 
				        @NOTES, @AS_FACULTY_INFO_ID, @IS_RESULT_APPROVED, @SC_SCHEDULE_DTL_NO_STUDENTS, @NO_STUD_WAIT,
				        @ONLINE_FLG, @IS_CLOSED, @NOTES_EMP, @NO_STUD_MAX, @SELF_FLG;
		
		        end
			
		        close SCHEDULE_DTL;
		        deallocate SCHEDULE_DTL;
	
		        fetch next from SCHEDULE_HDR
		        into @SC_SCHEDULE_HDR_ID, @ED_CODE_COURSE_TEACHING_ID, @ED_OFFERING_COURSE_ID, @NO_SLOTS, @NO_GROUPS, @NO_STUDENTS, @COURSE_CODE, @TchngMthdDescrAr, @TchngMthdDescrEn;
	        end
	
	        close SCHEDULE_HDR;
	        deallocate SCHEDULE_HDR;
	
	        select * from #OperationMsgs;
	        drop table #OperationMsgs;
				
			]]>
      </body>
    </procedure>
  </procedures>
</root>
