/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlAdmAppRegHistoryProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="AdmAppRegHistory"/> entity.
	///</summary>
	public abstract partial class SqlAdmAppRegHistoryProviderBase : AdmAppRegHistoryProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlAdmAppRegHistoryProviderBase"/> instance.
		/// </summary>
		public SqlAdmAppRegHistoryProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlAdmAppRegHistoryProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlAdmAppRegHistoryProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_admAppRegHistoryId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _admAppRegHistoryId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, _admAppRegHistoryId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(AdmAppRegHistory)
					,_admAppRegHistoryId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
		public override TList<AdmAppRegHistory> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<AdmAppRegHistory>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AppDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrentFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ComptativeRate", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeStatusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OverAllAcceptanceFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrintationFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmAdmissionBandId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DistributionFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnrolledFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AutoDistrFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullTimeFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OnlneFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeeCdeDiscTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LmsUsr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LmsPwd", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmAppHstryCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BusFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeeCdeSchshipTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SchshipNote", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SpoSponsorId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SubmitFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeeCdeDiscCatId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SchshipTypeFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FincaidTypeFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HasRa", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SubmitDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeStatusRsnId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TermcondFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DormFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EngNativeFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EngGradChkFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WaitFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MasterPhdFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SpoSponsorTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UrlReference", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeStatusOldId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProvisionalFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeAppStatusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TansikFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmDecisionStatusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DataSentFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CovidFlg", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("adm_app_reg_history_id ") || clause.Trim().StartsWith("adm_app_reg_history_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAppRegHistoryId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_applicant_id ") || clause.Trim().StartsWith("adm_applicant_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmApplicantId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("app_date ") || clause.Trim().StartsWith("app_date="))
				{
					database.SetParameterValue(commandWrapper, "@AppDate", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_app_type_id ") || clause.Trim().StartsWith("adm_cde_app_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeAppTypeId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("current_flg ") || clause.Trim().StartsWith("current_flg="))
				{
					database.SetParameterValue(commandWrapper, "@CurrentFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_code_degree_id ") || clause.Trim().StartsWith("as_code_degree_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsCodeDegreeId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_code_degree_class_id ") || clause.Trim().StartsWith("as_code_degree_class_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsCodeDegreeClassId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("comptative_rate ") || clause.Trim().StartsWith("comptative_rate="))
				{
					database.SetParameterValue(commandWrapper, "@ComptativeRate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_open_acad_semester_id ") || clause.Trim().StartsWith("adm_open_acad_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmOpenAcadSemesterId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_status_id ") || clause.Trim().StartsWith("adm_cde_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeStatusId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("over_all_acceptance_flg ") || clause.Trim().StartsWith("over_all_acceptance_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OverAllAcceptanceFlg", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("orintation_flg ") || clause.Trim().StartsWith("orintation_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OrintationFlg", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_admission_band_id ") || clause.Trim().StartsWith("adm_admission_band_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAdmissionBandId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("distribution_flg ") || clause.Trim().StartsWith("distribution_flg="))
				{
					database.SetParameterValue(commandWrapper, "@DistributionFlg", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("enrolled_flg ") || clause.Trim().StartsWith("enrolled_flg="))
				{
					database.SetParameterValue(commandWrapper, "@EnrolledFlg", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("auto_distr_flg ") || clause.Trim().StartsWith("auto_distr_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AutoDistrFlg", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_time_flg ") || clause.Trim().StartsWith("full_time_flg="))
				{
					database.SetParameterValue(commandWrapper, "@FullTimeFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("onlne_flg ") || clause.Trim().StartsWith("onlne_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OnlneFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_cde_disc_type_id ") || clause.Trim().StartsWith("fee_cde_disc_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@FeeCdeDiscTypeId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lms_usr ") || clause.Trim().StartsWith("lms_usr="))
				{
					database.SetParameterValue(commandWrapper, "@LmsUsr", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lms_pwd ") || clause.Trim().StartsWith("lms_pwd="))
				{
					database.SetParameterValue(commandWrapper, "@LmsPwd", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_app_hstry_code ") || clause.Trim().StartsWith("adm_app_hstry_code="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAppHstryCode", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bus_flg ") || clause.Trim().StartsWith("bus_flg="))
				{
					database.SetParameterValue(commandWrapper, "@BusFlg", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_cde_schship_type_id ") || clause.Trim().StartsWith("fee_cde_schship_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@FeeCdeSchshipTypeId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("schship_note ") || clause.Trim().StartsWith("schship_note="))
				{
					database.SetParameterValue(commandWrapper, "@SchshipNote", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("spo_sponsor_id ") || clause.Trim().StartsWith("spo_sponsor_id="))
				{
					database.SetParameterValue(commandWrapper, "@SpoSponsorId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("submit_flg ") || clause.Trim().StartsWith("submit_flg="))
				{
					database.SetParameterValue(commandWrapper, "@SubmitFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_cde_disc_cat_id ") || clause.Trim().StartsWith("fee_cde_disc_cat_id="))
				{
					database.SetParameterValue(commandWrapper, "@FeeCdeDiscCatId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("schship_type_flg ") || clause.Trim().StartsWith("schship_type_flg="))
				{
					database.SetParameterValue(commandWrapper, "@SchshipTypeFlg", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fincaid_type_flg ") || clause.Trim().StartsWith("fincaid_type_flg="))
				{
					database.SetParameterValue(commandWrapper, "@FincaidTypeFlg", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("has_ra ") || clause.Trim().StartsWith("has_ra="))
				{
					database.SetParameterValue(commandWrapper, "@HasRa", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("submit_date ") || clause.Trim().StartsWith("submit_date="))
				{
					database.SetParameterValue(commandWrapper, "@SubmitDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_status_rsn_id ") || clause.Trim().StartsWith("adm_cde_status_rsn_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeStatusRsnId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("termcond_flg ") || clause.Trim().StartsWith("termcond_flg="))
				{
					database.SetParameterValue(commandWrapper, "@TermcondFlg", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dorm_flg ") || clause.Trim().StartsWith("dorm_flg="))
				{
					database.SetParameterValue(commandWrapper, "@DormFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("eng_native_flg ") || clause.Trim().StartsWith("eng_native_flg="))
				{
					database.SetParameterValue(commandWrapper, "@EngNativeFlg", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("eng_grad_chk_flg ") || clause.Trim().StartsWith("eng_grad_chk_flg="))
				{
					database.SetParameterValue(commandWrapper, "@EngGradChkFlg", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wait_flg ") || clause.Trim().StartsWith("wait_flg="))
				{
					database.SetParameterValue(commandWrapper, "@WaitFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_year_id ") || clause.Trim().StartsWith("ed_acad_year_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadYearId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_semester_id ") || clause.Trim().StartsWith("ed_code_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeSemesterId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("master_phd_flg ") || clause.Trim().StartsWith("master_phd_flg="))
				{
					database.SetParameterValue(commandWrapper, "@MasterPhdFlg", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_level_id ") || clause.Trim().StartsWith("ed_code_level_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeLevelId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("spo_sponsor_type_id ") || clause.Trim().StartsWith("spo_sponsor_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@SpoSponsorTypeId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("url_reference ") || clause.Trim().StartsWith("url_reference="))
				{
					database.SetParameterValue(commandWrapper, "@UrlReference", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_status_old_id ") || clause.Trim().StartsWith("adm_cde_status_old_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeStatusOldId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("provisional_flg ") || clause.Trim().StartsWith("provisional_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ProvisionalFlg", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_app_status_id ") || clause.Trim().StartsWith("adm_cde_app_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeAppStatusId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tansik_flg ") || clause.Trim().StartsWith("tansik_flg="))
				{
					database.SetParameterValue(commandWrapper, "@TansikFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_decision_status_id ") || clause.Trim().StartsWith("adm_decision_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmDecisionStatusId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("part_time_flg ") || clause.Trim().StartsWith("part_time_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PartTimeFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("data_sent_flg ") || clause.Trim().StartsWith("data_sent_flg="))
				{
					database.SetParameterValue(commandWrapper, "@DataSentFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("covid_flg ") || clause.Trim().StartsWith("covid_flg="))
				{
					database.SetParameterValue(commandWrapper, "@CovidFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
		public override TList<AdmAppRegHistory> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_Find_Dynamic", typeof(AdmAppRegHistoryColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
		public override TList<AdmAppRegHistory> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAdmCdeAppStatusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_ADM_CDE_APP_STATUS key.
		///		FK_ADM_APP_REG_HISTORY_ADM_CDE_APP_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeAppStatusId">حالة المتقدم</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmCdeAppStatusId(TransactionManager transactionManager, System.Decimal? _admCdeAppStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmCdeAppStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeAppStatusId", DbType.Decimal, _admCdeAppStatusId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppStatusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppStatusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmCdeStatusRsnId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_ADM_CDE_STATUS_RSN key.
		///		FK_ADM_APP_REG_HISTORY_ADM_CDE_STATUS_RSN Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeStatusRsnId">XXسبب الرفضXX</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmCdeStatusRsnId(TransactionManager transactionManager, System.Int32? _admCdeStatusRsnId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmCdeStatusRsnId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeStatusRsnId", DbType.Int32, _admCdeStatusRsnId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusRsnId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusRsnId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmCdeStatusOldId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_ADM_CDE_STATUS1 key.
		///		FK_ADM_APP_REG_HISTORY_ADM_CDE_STATUS1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeStatusOldId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmCdeStatusOldId(TransactionManager transactionManager, System.Decimal? _admCdeStatusOldId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmCdeStatusOldId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeStatusOldId", DbType.Decimal, _admCdeStatusOldId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusOldId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusOldId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmDecisionStatusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_Adm_Decision_Status key.
		///		FK_ADM_APP_REG_HISTORY_Adm_Decision_Status Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admDecisionStatusId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmDecisionStatusId(TransactionManager transactionManager, System.Decimal? _admDecisionStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmDecisionStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmDecisionStatusId", DbType.Decimal, _admDecisionStatusId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmDecisionStatusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmDecisionStatusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmOpenAcadSemesterId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_ADM_OPEN_ACAD_SEMESTER key.
		///		FK_ADM_APP_REG_HISTORY_ADM_OPEN_ACAD_SEMESTER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admOpenAcadSemesterId">عام وفصل طلب الالتحاق</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmOpenAcadSemesterId(TransactionManager transactionManager, System.Decimal? _admOpenAcadSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmOpenAcadSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, _admOpenAcadSemesterId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmOpenAcadSemesterId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmOpenAcadSemesterId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsCodeDegreeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_AS_CODE_DEGREE key.
		///		FK_ADM_APP_REG_HISTORY_AS_CODE_DEGREE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asCodeDegreeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAsCodeDegreeId(TransactionManager transactionManager, System.Decimal? _asCodeDegreeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAsCodeDegreeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, _asCodeDegreeId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsCodeDegreeClassId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_AS_CODE_DEGREE_CLASS key.
		///		FK_ADM_APP_REG_HISTORY_AS_CODE_DEGREE_CLASS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asCodeDegreeClassId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAsCodeDegreeClassId(TransactionManager transactionManager, System.Decimal? _asCodeDegreeClassId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAsCodeDegreeClassId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, _asCodeDegreeClassId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeClassId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeClassId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdAcadYearId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_ED_ACAD_YEAR key.
		///		FK_ADM_APP_REG_HISTORY_ED_ACAD_YEAR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearId">عام الالتحاق الفعلى</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByEdAcadYearId(TransactionManager transactionManager, System.Decimal? _edAcadYearId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByEdAcadYearId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, _edAcadYearId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeLevelId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_ED_CODE_LEVEL key.
		///		FK_ADM_APP_REG_HISTORY_ED_CODE_LEVEL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeLevelId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByEdCodeLevelId(TransactionManager transactionManager, System.Decimal? _edCodeLevelId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByEdCodeLevelId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, _edCodeLevelId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeLevelId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeLevelId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeSemesterId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_ED_CODE_SEMESTER key.
		///		FK_ADM_APP_REG_HISTORY_ED_CODE_SEMESTER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeSemesterId">فصل الالتحاق الفعلى</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByEdCodeSemesterId(TransactionManager transactionManager, System.Decimal? _edCodeSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByEdCodeSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, _edCodeSemesterId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByFeeCdeDiscCatId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_FEE_CDE_DISC_CAT key.
		///		FK_ADM_APP_REG_HISTORY_FEE_CDE_DISC_CAT Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_feeCdeDiscCatId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByFeeCdeDiscCatId(TransactionManager transactionManager, System.Int32? _feeCdeDiscCatId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByFeeCdeDiscCatId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@FeeCdeDiscCatId", DbType.Int32, _feeCdeDiscCatId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFeeCdeDiscCatId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFeeCdeDiscCatId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByFeeCdeDiscTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_FEE_CDE_DISC_TYPE key.
		///		FK_ADM_APP_REG_HISTORY_FEE_CDE_DISC_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_feeCdeDiscTypeId">منحة تفوق مؤهل</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByFeeCdeDiscTypeId(TransactionManager transactionManager, System.Decimal? _feeCdeDiscTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByFeeCdeDiscTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@FeeCdeDiscTypeId", DbType.Decimal, _feeCdeDiscTypeId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFeeCdeDiscTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFeeCdeDiscTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByFeeCdeSchshipTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_FEE_CDE_SCHSHIP_TYPE key.
		///		FK_ADM_APP_REG_HISTORY_FEE_CDE_SCHSHIP_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_feeCdeSchshipTypeId">XXNU:انواع المنح الدراسية</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByFeeCdeSchshipTypeId(TransactionManager transactionManager, System.Int32? _feeCdeSchshipTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByFeeCdeSchshipTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@FeeCdeSchshipTypeId", DbType.Int32, _feeCdeSchshipTypeId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFeeCdeSchshipTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFeeCdeSchshipTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySeUserId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_SE_USER key.
		///		FK_ADM_APP_REG_HISTORY_SE_USER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_seUserId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetBySeUserId(TransactionManager transactionManager, System.Decimal? _seUserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetBySeUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, _seUserId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySeUserId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySeUserId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySpoSponsorId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_SPO_SPONSOR key.
		///		FK_ADM_APP_REG_HISTORY_SPO_SPONSOR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_spoSponsorId">الجهة المانحة</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetBySpoSponsorId(TransactionManager transactionManager, System.Decimal? _spoSponsorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetBySpoSponsorId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SpoSponsorId", DbType.Decimal, _spoSponsorId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySpoSponsorId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySpoSponsorId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySpoSponsorTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_APP_REG_HISTORY_SPO_SPONSOR_TYPE key.
		///		FK_ADM_APP_REG_HISTORY_SPO_SPONSOR_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_spoSponsorTypeId">Ejust نوع الكفيل حكومى-خاص-جامعة....</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmAppRegHistory objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetBySpoSponsorTypeId(TransactionManager transactionManager, System.Decimal? _spoSponsorTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetBySpoSponsorTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SpoSponsorTypeId", DbType.Decimal, _spoSponsorTypeId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> rows = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySpoSponsorTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySpoSponsorTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAdmAppRegHistoryIdAsCodeDegreeIdAsCodeDegreeClassId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the _dta_index_ADM_APP_REG_HISTORY_6_970797795__K1_K6_K7 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAppRegHistoryId"></param>
		/// <param name="_asCodeDegreeId"></param>
		/// <param name="_asCodeDegreeClassId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmAppRegHistoryIdAsCodeDegreeIdAsCodeDegreeClassId(TransactionManager transactionManager, System.Decimal _admAppRegHistoryId, System.Decimal? _asCodeDegreeId, System.Decimal? _asCodeDegreeClassId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmAppRegHistoryIdAsCodeDegreeIdAsCodeDegreeClassId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, _admAppRegHistoryId);
				database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, _asCodeDegreeId);
				database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, _asCodeDegreeClassId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAppRegHistoryIdAsCodeDegreeIdAsCodeDegreeClassId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAppRegHistoryIdAsCodeDegreeIdAsCodeDegreeClassId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmCdeStatusIdAdmCdeAppTypeIdAsCodeDegreeClassIdCurrentFlgAdmOpenAcadSemesterId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the _dta_index_ADM_APP_REG_HISTORY_6_970797795__K11_K4_K7_K5_K9 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeStatusId"></param>
		/// <param name="_admCdeAppTypeId"></param>
		/// <param name="_asCodeDegreeClassId"></param>
		/// <param name="_currentFlg"></param>
		/// <param name="_admOpenAcadSemesterId">عام وفصل طلب الالتحاق</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmCdeStatusIdAdmCdeAppTypeIdAsCodeDegreeClassIdCurrentFlgAdmOpenAcadSemesterId(TransactionManager transactionManager, System.Decimal? _admCdeStatusId, System.Decimal? _admCdeAppTypeId, System.Decimal? _asCodeDegreeClassId, System.Decimal? _currentFlg, System.Decimal? _admOpenAcadSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmCdeStatusIdAdmCdeAppTypeIdAsCodeDegreeClassIdCurrentFlgAdmOpenAcadSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeStatusId", DbType.Decimal, _admCdeStatusId);
				database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, _admCdeAppTypeId);
				database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, _asCodeDegreeClassId);
				database.AddInParameter(commandWrapper, "@CurrentFlg", DbType.Decimal, _currentFlg);
				database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, _admOpenAcadSemesterId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusIdAdmCdeAppTypeIdAsCodeDegreeClassIdCurrentFlgAdmOpenAcadSemesterId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusIdAdmCdeAppTypeIdAsCodeDegreeClassIdCurrentFlgAdmOpenAcadSemesterId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmAdmissionBandId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ADM_ADMISSION_BAND_ID_NonClusteredIndex-20131121-211257 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAdmissionBandId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmAdmissionBandId(TransactionManager transactionManager, System.Decimal? _admAdmissionBandId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmAdmissionBandId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAdmissionBandId", DbType.Decimal, _admAdmissionBandId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAdmissionBandId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAdmissionBandId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmApplicantIdAdmCdeAppTypeIdAdmOpenAcadSemesterId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ADM_APP_REG_HISTORY_UNIQUE_INDEX index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admApplicantId"></param>
		/// <param name="_admCdeAppTypeId"></param>
		/// <param name="_admOpenAcadSemesterId">عام وفصل طلب الالتحاق</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmAppRegHistory"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmAppRegHistory GetByAdmApplicantIdAdmCdeAppTypeIdAdmOpenAcadSemesterId(TransactionManager transactionManager, System.Decimal? _admApplicantId, System.Decimal? _admCdeAppTypeId, System.Decimal? _admOpenAcadSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmApplicantIdAdmCdeAppTypeIdAdmOpenAcadSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
				database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, _admCdeAppTypeId);
				database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, _admOpenAcadSemesterId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmApplicantIdAdmCdeAppTypeIdAdmOpenAcadSemesterId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmApplicantIdAdmCdeAppTypeIdAdmOpenAcadSemesterId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmApplicantId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ADM_APPLICANT_ID_NonClusteredIndex-20131121-211006 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admApplicantId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmApplicantId(TransactionManager transactionManager, System.Decimal? _admApplicantId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmApplicantId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmApplicantId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmApplicantId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmCdeAppTypeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ADM_CDE_APP_TYPE_ID_NonClusteredIndex-20131121-211029 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeAppTypeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmCdeAppTypeId(TransactionManager transactionManager, System.Decimal? _admCdeAppTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmCdeAppTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, _admCdeAppTypeId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppTypeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppTypeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmCdeStatusId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ADM_CDE_STATUS_ID_NonClusteredIndex-20131121-211142 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeStatusId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmCdeStatusId(TransactionManager transactionManager, System.Decimal? _admCdeStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmCdeStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeStatusId", DbType.Decimal, _admCdeStatusId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeStatusId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmApplicantIdCurrentFlgAsCodeDegreeIdAsCodeDegreeClassIdAdmOpenAcadSemesterId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the NonClusteredIndex-20131121-211105 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admApplicantId"></param>
		/// <param name="_currentFlg"></param>
		/// <param name="_asCodeDegreeId"></param>
		/// <param name="_asCodeDegreeClassId"></param>
		/// <param name="_admOpenAcadSemesterId">عام وفصل طلب الالتحاق</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByAdmApplicantIdCurrentFlgAsCodeDegreeIdAsCodeDegreeClassIdAdmOpenAcadSemesterId(TransactionManager transactionManager, System.Decimal? _admApplicantId, System.Decimal? _currentFlg, System.Decimal? _asCodeDegreeId, System.Decimal? _asCodeDegreeClassId, System.Decimal? _admOpenAcadSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmApplicantIdCurrentFlgAsCodeDegreeIdAsCodeDegreeClassIdAdmOpenAcadSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
				database.AddInParameter(commandWrapper, "@CurrentFlg", DbType.Decimal, _currentFlg);
				database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, _asCodeDegreeId);
				database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, _asCodeDegreeClassId);
				database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, _admOpenAcadSemesterId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmApplicantIdCurrentFlgAsCodeDegreeIdAsCodeDegreeClassIdAdmOpenAcadSemesterId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmApplicantIdCurrentFlgAsCodeDegreeIdAsCodeDegreeClassIdAdmOpenAcadSemesterId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByOverAllAcceptanceFlgOrintationFlgDistributionFlgEnrolledFlgAutoDistrFlgFullTimeFlg
					
		/// <summary>
		/// 	Gets rows from the datasource based on the NonClusteredIndex-20131121-211215 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_overAllAcceptanceFlg"></param>
		/// <param name="_orintationFlg">oriented -provisonal</param>
		/// <param name="_distributionFlg"></param>
		/// <param name="_enrolledFlg"></param>
		/// <param name="_autoDistrFlg"></param>
		/// <param name="_fullTimeFlg"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmAppRegHistory&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmAppRegHistory> GetByOverAllAcceptanceFlgOrintationFlgDistributionFlgEnrolledFlgAutoDistrFlgFullTimeFlg(TransactionManager transactionManager, System.Decimal _overAllAcceptanceFlg, System.Decimal _orintationFlg, System.Decimal _distributionFlg, System.Decimal _enrolledFlg, System.Decimal _autoDistrFlg, System.Decimal? _fullTimeFlg, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByOverAllAcceptanceFlgOrintationFlgDistributionFlgEnrolledFlgAutoDistrFlgFullTimeFlg", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@OverAllAcceptanceFlg", DbType.Decimal, _overAllAcceptanceFlg);
				database.AddInParameter(commandWrapper, "@OrintationFlg", DbType.Decimal, _orintationFlg);
				database.AddInParameter(commandWrapper, "@DistributionFlg", DbType.Decimal, _distributionFlg);
				database.AddInParameter(commandWrapper, "@EnrolledFlg", DbType.Decimal, _enrolledFlg);
				database.AddInParameter(commandWrapper, "@AutoDistrFlg", DbType.Decimal, _autoDistrFlg);
				database.AddInParameter(commandWrapper, "@FullTimeFlg", DbType.Decimal, _fullTimeFlg);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByOverAllAcceptanceFlgOrintationFlgDistributionFlgEnrolledFlgAutoDistrFlgFullTimeFlg", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByOverAllAcceptanceFlgOrintationFlgDistributionFlgEnrolledFlgAutoDistrFlgFullTimeFlg", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmAppRegHistoryId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ADM_APP_REG_HISTORY index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAppRegHistoryId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmAppRegHistory"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmAppRegHistory GetByAdmAppRegHistoryId(TransactionManager transactionManager, System.Decimal _admAppRegHistoryId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmAppRegHistoryId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, _admAppRegHistoryId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAppRegHistoryId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAppRegHistoryId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmOpenAcadSemesterIdAdmApplicantId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ADM_APP_REG_HISTORY index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admOpenAcadSemesterId">عام وفصل طلب الالتحاق</param>
		/// <param name="_admApplicantId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmAppRegHistory"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmAppRegHistory GetByAdmOpenAcadSemesterIdAdmApplicantId(TransactionManager transactionManager, System.Decimal? _admOpenAcadSemesterId, System.Decimal? _admApplicantId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_GetByAdmOpenAcadSemesterIdAdmApplicantId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, _admOpenAcadSemesterId);
				database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
			
			IDataReader reader = null;
			TList<AdmAppRegHistory> tmp = new TList<AdmAppRegHistory>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmOpenAcadSemesterIdAdmApplicantId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmOpenAcadSemesterIdAdmApplicantId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmAppRegHistory object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.AdmAppRegHistory> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ADM_APP_REG_HISTORY";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ADM_APPLICANT_ID", typeof(System.Decimal));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("APP_DATE", typeof(System.DateTime));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("ADM_CDE_APP_TYPE_ID", typeof(System.Decimal));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("CURRENT_FLG", typeof(System.Decimal));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("AS_CODE_DEGREE_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("COMPTATIVE_RATE", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ADM_OPEN_ACAD_SEMESTER_ID", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ADM_CDE_STATUS_ID", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("OVER_ALL_ACCEPTANCE_FLG", typeof(System.Decimal));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("ORINTATION_FLG", typeof(System.Decimal));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("ADM_ADMISSION_BAND_ID", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("DISTRIBUTION_FLG", typeof(System.Decimal));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("ENROLLED_FLG", typeof(System.Decimal));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("AUTO_DISTR_FLG", typeof(System.Decimal));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("FULL_TIME_FLG", typeof(System.Decimal));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ONLNE_FLG", typeof(System.Boolean));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("FEE_CDE_DISC_TYPE_ID", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("LMS_USR", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("LMS_PWD", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ADM_APP_HSTRY_CODE", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("BUS_FLG", typeof(System.Boolean));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("FEE_CDE_SCHSHIP_TYPE_ID", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("SCHSHIP_NOTE", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("SPO_SPONSOR_ID", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("SUBMIT_FLG", typeof(System.Boolean));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("FEE_CDE_DISC_CAT_ID", typeof(System.Int32));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("SCHSHIP_TYPE_FLG", typeof(System.Boolean));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("FINCAID_TYPE_FLG", typeof(System.Boolean));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("HAS_RA", typeof(System.Boolean));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("SUBMIT_DATE", typeof(System.DateTime));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("ADM_CDE_STATUS_RSN_ID", typeof(System.Int32));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("TERMCOND_FLG", typeof(System.Boolean));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("DORM_FLG", typeof(System.Boolean));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("ENG_NATIVE_FLG", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("ENG_GRAD_CHK_FLG", typeof(System.Boolean));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("WAIT_FLG", typeof(System.Boolean));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("ED_ACAD_YEAR_ID", typeof(System.Decimal));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("ED_CODE_SEMESTER_ID", typeof(System.Decimal));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("MASTER_PHD_FLG", typeof(System.Boolean));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("ED_CODE_LEVEL_ID", typeof(System.Decimal));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("SPO_SPONSOR_TYPE_ID", typeof(System.Decimal));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("URL_REFERENCE", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("ADM_CDE_STATUS_OLD_ID", typeof(System.Decimal));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("PROVISIONAL_FLG", typeof(System.Boolean));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("ADM_CDE_APP_STATUS_ID", typeof(System.Decimal));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("TansiK_FLG", typeof(System.Boolean));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("Adm_Decision_Status_Id", typeof(System.Decimal));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("PART_TIME_FLG", typeof(System.Boolean));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("DATA_SENT_FLG", typeof(System.Boolean));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("COVID_FLG", typeof(System.Boolean));
			col53.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ADM_APP_REG_HISTORY_ID", "ADM_APP_REG_HISTORY_ID");
			bulkCopy.ColumnMappings.Add("ADM_APPLICANT_ID", "ADM_APPLICANT_ID");
			bulkCopy.ColumnMappings.Add("APP_DATE", "APP_DATE");
			bulkCopy.ColumnMappings.Add("ADM_CDE_APP_TYPE_ID", "ADM_CDE_APP_TYPE_ID");
			bulkCopy.ColumnMappings.Add("CURRENT_FLG", "CURRENT_FLG");
			bulkCopy.ColumnMappings.Add("AS_CODE_DEGREE_ID", "AS_CODE_DEGREE_ID");
			bulkCopy.ColumnMappings.Add("AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_CLASS_ID");
			bulkCopy.ColumnMappings.Add("COMPTATIVE_RATE", "COMPTATIVE_RATE");
			bulkCopy.ColumnMappings.Add("ADM_OPEN_ACAD_SEMESTER_ID", "ADM_OPEN_ACAD_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("ADM_CDE_STATUS_ID", "ADM_CDE_STATUS_ID");
			bulkCopy.ColumnMappings.Add("OVER_ALL_ACCEPTANCE_FLG", "OVER_ALL_ACCEPTANCE_FLG");
			bulkCopy.ColumnMappings.Add("ORINTATION_FLG", "ORINTATION_FLG");
			bulkCopy.ColumnMappings.Add("ADM_ADMISSION_BAND_ID", "ADM_ADMISSION_BAND_ID");
			bulkCopy.ColumnMappings.Add("DISTRIBUTION_FLG", "DISTRIBUTION_FLG");
			bulkCopy.ColumnMappings.Add("ENROLLED_FLG", "ENROLLED_FLG");
			bulkCopy.ColumnMappings.Add("AUTO_DISTR_FLG", "AUTO_DISTR_FLG");
			bulkCopy.ColumnMappings.Add("FULL_TIME_FLG", "FULL_TIME_FLG");
			bulkCopy.ColumnMappings.Add("ONLNE_FLG", "ONLNE_FLG");
			bulkCopy.ColumnMappings.Add("FEE_CDE_DISC_TYPE_ID", "FEE_CDE_DISC_TYPE_ID");
			bulkCopy.ColumnMappings.Add("LMS_USR", "LMS_USR");
			bulkCopy.ColumnMappings.Add("LMS_PWD", "LMS_PWD");
			bulkCopy.ColumnMappings.Add("ADM_APP_HSTRY_CODE", "ADM_APP_HSTRY_CODE");
			bulkCopy.ColumnMappings.Add("BUS_FLG", "BUS_FLG");
			bulkCopy.ColumnMappings.Add("FEE_CDE_SCHSHIP_TYPE_ID", "FEE_CDE_SCHSHIP_TYPE_ID");
			bulkCopy.ColumnMappings.Add("SCHSHIP_NOTE", "SCHSHIP_NOTE");
			bulkCopy.ColumnMappings.Add("SPO_SPONSOR_ID", "SPO_SPONSOR_ID");
			bulkCopy.ColumnMappings.Add("SUBMIT_FLG", "SUBMIT_FLG");
			bulkCopy.ColumnMappings.Add("FEE_CDE_DISC_CAT_ID", "FEE_CDE_DISC_CAT_ID");
			bulkCopy.ColumnMappings.Add("SCHSHIP_TYPE_FLG", "SCHSHIP_TYPE_FLG");
			bulkCopy.ColumnMappings.Add("FINCAID_TYPE_FLG", "FINCAID_TYPE_FLG");
			bulkCopy.ColumnMappings.Add("HAS_RA", "HAS_RA");
			bulkCopy.ColumnMappings.Add("SUBMIT_DATE", "SUBMIT_DATE");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			bulkCopy.ColumnMappings.Add("ADM_CDE_STATUS_RSN_ID", "ADM_CDE_STATUS_RSN_ID");
			bulkCopy.ColumnMappings.Add("TERMCOND_FLG", "TERMCOND_FLG");
			bulkCopy.ColumnMappings.Add("DORM_FLG", "DORM_FLG");
			bulkCopy.ColumnMappings.Add("ENG_NATIVE_FLG", "ENG_NATIVE_FLG");
			bulkCopy.ColumnMappings.Add("ENG_GRAD_CHK_FLG", "ENG_GRAD_CHK_FLG");
			bulkCopy.ColumnMappings.Add("WAIT_FLG", "WAIT_FLG");
			bulkCopy.ColumnMappings.Add("ED_ACAD_YEAR_ID", "ED_ACAD_YEAR_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_SEMESTER_ID", "ED_CODE_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("MASTER_PHD_FLG", "MASTER_PHD_FLG");
			bulkCopy.ColumnMappings.Add("ED_CODE_LEVEL_ID", "ED_CODE_LEVEL_ID");
			bulkCopy.ColumnMappings.Add("SPO_SPONSOR_TYPE_ID", "SPO_SPONSOR_TYPE_ID");
			bulkCopy.ColumnMappings.Add("URL_REFERENCE", "URL_REFERENCE");
			bulkCopy.ColumnMappings.Add("ADM_CDE_STATUS_OLD_ID", "ADM_CDE_STATUS_OLD_ID");
			bulkCopy.ColumnMappings.Add("PROVISIONAL_FLG", "PROVISIONAL_FLG");
			bulkCopy.ColumnMappings.Add("ADM_CDE_APP_STATUS_ID", "ADM_CDE_APP_STATUS_ID");
			bulkCopy.ColumnMappings.Add("TansiK_FLG", "TansiK_FLG");
			bulkCopy.ColumnMappings.Add("Adm_Decision_Status_Id", "Adm_Decision_Status_Id");
			bulkCopy.ColumnMappings.Add("PART_TIME_FLG", "PART_TIME_FLG");
			bulkCopy.ColumnMappings.Add("DATA_SENT_FLG", "DATA_SENT_FLG");
			bulkCopy.ColumnMappings.Add("COVID_FLG", "COVID_FLG");
			
			foreach(UMIS_VER2.BusinessLyer.AdmAppRegHistory entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ADM_APP_REG_HISTORY_ID"] = entity.AdmAppRegHistoryId;
							
				
					row["ADM_APPLICANT_ID"] = entity.AdmApplicantId.HasValue ? (object) entity.AdmApplicantId  : System.DBNull.Value;
							
				
					row["APP_DATE"] = entity.AppDate.HasValue ? (object) entity.AppDate  : System.DBNull.Value;
							
				
					row["ADM_CDE_APP_TYPE_ID"] = entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId  : System.DBNull.Value;
							
				
					row["CURRENT_FLG"] = entity.CurrentFlg.HasValue ? (object) entity.CurrentFlg  : System.DBNull.Value;
							
				
					row["AS_CODE_DEGREE_ID"] = entity.AsCodeDegreeId.HasValue ? (object) entity.AsCodeDegreeId  : System.DBNull.Value;
							
				
					row["AS_CODE_DEGREE_CLASS_ID"] = entity.AsCodeDegreeClassId.HasValue ? (object) entity.AsCodeDegreeClassId  : System.DBNull.Value;
							
				
					row["COMPTATIVE_RATE"] = entity.ComptativeRate.HasValue ? (object) entity.ComptativeRate  : System.DBNull.Value;
							
				
					row["ADM_OPEN_ACAD_SEMESTER_ID"] = entity.AdmOpenAcadSemesterId.HasValue ? (object) entity.AdmOpenAcadSemesterId  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["ADM_CDE_STATUS_ID"] = entity.AdmCdeStatusId.HasValue ? (object) entity.AdmCdeStatusId  : System.DBNull.Value;
							
				
					row["OVER_ALL_ACCEPTANCE_FLG"] = entity.OverAllAcceptanceFlg;
							
				
					row["ORINTATION_FLG"] = entity.OrintationFlg;
							
				
					row["ADM_ADMISSION_BAND_ID"] = entity.AdmAdmissionBandId.HasValue ? (object) entity.AdmAdmissionBandId  : System.DBNull.Value;
							
				
					row["DISTRIBUTION_FLG"] = entity.DistributionFlg;
							
				
					row["ENROLLED_FLG"] = entity.EnrolledFlg;
							
				
					row["AUTO_DISTR_FLG"] = entity.AutoDistrFlg;
							
				
					row["FULL_TIME_FLG"] = entity.FullTimeFlg.HasValue ? (object) entity.FullTimeFlg  : System.DBNull.Value;
							
				
					row["ONLNE_FLG"] = entity.OnlneFlg.HasValue ? (object) entity.OnlneFlg  : System.DBNull.Value;
							
				
					row["FEE_CDE_DISC_TYPE_ID"] = entity.FeeCdeDiscTypeId.HasValue ? (object) entity.FeeCdeDiscTypeId  : System.DBNull.Value;
							
				
					row["LMS_USR"] = entity.LmsUsr;
							
				
					row["LMS_PWD"] = entity.LmsPwd;
							
				
					row["ADM_APP_HSTRY_CODE"] = entity.AdmAppHstryCode;
							
				
					row["BUS_FLG"] = entity.BusFlg.HasValue ? (object) entity.BusFlg  : System.DBNull.Value;
							
				
					row["FEE_CDE_SCHSHIP_TYPE_ID"] = entity.FeeCdeSchshipTypeId.HasValue ? (object) entity.FeeCdeSchshipTypeId  : System.DBNull.Value;
							
				
					row["SCHSHIP_NOTE"] = entity.SchshipNote;
							
				
					row["SPO_SPONSOR_ID"] = entity.SpoSponsorId.HasValue ? (object) entity.SpoSponsorId  : System.DBNull.Value;
							
				
					row["SUBMIT_FLG"] = entity.SubmitFlg.HasValue ? (object) entity.SubmitFlg  : System.DBNull.Value;
							
				
					row["FEE_CDE_DISC_CAT_ID"] = entity.FeeCdeDiscCatId.HasValue ? (object) entity.FeeCdeDiscCatId  : System.DBNull.Value;
							
				
					row["SCHSHIP_TYPE_FLG"] = entity.SchshipTypeFlg.HasValue ? (object) entity.SchshipTypeFlg  : System.DBNull.Value;
							
				
					row["FINCAID_TYPE_FLG"] = entity.FincaidTypeFlg.HasValue ? (object) entity.FincaidTypeFlg  : System.DBNull.Value;
							
				
					row["HAS_RA"] = entity.HasRa.HasValue ? (object) entity.HasRa  : System.DBNull.Value;
							
				
					row["SUBMIT_DATE"] = entity.SubmitDate.HasValue ? (object) entity.SubmitDate  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
					row["ADM_CDE_STATUS_RSN_ID"] = entity.AdmCdeStatusRsnId.HasValue ? (object) entity.AdmCdeStatusRsnId  : System.DBNull.Value;
							
				
					row["TERMCOND_FLG"] = entity.TermcondFlg.HasValue ? (object) entity.TermcondFlg  : System.DBNull.Value;
							
				
					row["DORM_FLG"] = entity.DormFlg.HasValue ? (object) entity.DormFlg  : System.DBNull.Value;
							
				
					row["ENG_NATIVE_FLG"] = entity.EngNativeFlg.HasValue ? (object) entity.EngNativeFlg  : System.DBNull.Value;
							
				
					row["ENG_GRAD_CHK_FLG"] = entity.EngGradChkFlg.HasValue ? (object) entity.EngGradChkFlg  : System.DBNull.Value;
							
				
					row["WAIT_FLG"] = entity.WaitFlg.HasValue ? (object) entity.WaitFlg  : System.DBNull.Value;
							
				
					row["ED_ACAD_YEAR_ID"] = entity.EdAcadYearId.HasValue ? (object) entity.EdAcadYearId  : System.DBNull.Value;
							
				
					row["ED_CODE_SEMESTER_ID"] = entity.EdCodeSemesterId.HasValue ? (object) entity.EdCodeSemesterId  : System.DBNull.Value;
							
				
					row["MASTER_PHD_FLG"] = entity.MasterPhdFlg.HasValue ? (object) entity.MasterPhdFlg  : System.DBNull.Value;
							
				
					row["ED_CODE_LEVEL_ID"] = entity.EdCodeLevelId.HasValue ? (object) entity.EdCodeLevelId  : System.DBNull.Value;
							
				
					row["SPO_SPONSOR_TYPE_ID"] = entity.SpoSponsorTypeId.HasValue ? (object) entity.SpoSponsorTypeId  : System.DBNull.Value;
							
				
					row["URL_REFERENCE"] = entity.UrlReference;
							
				
					row["ADM_CDE_STATUS_OLD_ID"] = entity.AdmCdeStatusOldId.HasValue ? (object) entity.AdmCdeStatusOldId  : System.DBNull.Value;
							
				
					row["PROVISIONAL_FLG"] = entity.ProvisionalFlg.HasValue ? (object) entity.ProvisionalFlg  : System.DBNull.Value;
							
				
					row["ADM_CDE_APP_STATUS_ID"] = entity.AdmCdeAppStatusId.HasValue ? (object) entity.AdmCdeAppStatusId  : System.DBNull.Value;
							
				
					row["TansiK_FLG"] = entity.TansikFlg.HasValue ? (object) entity.TansikFlg  : System.DBNull.Value;
							
				
					row["Adm_Decision_Status_Id"] = entity.AdmDecisionStatusId.HasValue ? (object) entity.AdmDecisionStatusId  : System.DBNull.Value;
							
				
					row["PART_TIME_FLG"] = entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg  : System.DBNull.Value;
							
				
					row["DATA_SENT_FLG"] = entity.DataSentFlg.HasValue ? (object) entity.DataSentFlg  : System.DBNull.Value;
							
				
					row["COVID_FLG"] = entity.CovidFlg.HasValue ? (object) entity.CovidFlg  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.AdmAppRegHistory entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.AdmAppRegHistory object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmAppRegHistory object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmAppRegHistory object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmAppRegHistory entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, (entity.AdmApplicantId.HasValue ? (object) entity.AdmApplicantId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AppDate", DbType.DateTime, (entity.AppDate.HasValue ? (object) entity.AppDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, (entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CurrentFlg", DbType.Decimal, (entity.CurrentFlg.HasValue ? (object) entity.CurrentFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, (entity.AsCodeDegreeId.HasValue ? (object) entity.AsCodeDegreeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, (entity.AsCodeDegreeClassId.HasValue ? (object) entity.AsCodeDegreeClassId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ComptativeRate", DbType.Decimal, (entity.ComptativeRate.HasValue ? (object) entity.ComptativeRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, (entity.AdmOpenAcadSemesterId.HasValue ? (object) entity.AdmOpenAcadSemesterId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeStatusId", DbType.Decimal, (entity.AdmCdeStatusId.HasValue ? (object) entity.AdmCdeStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OverAllAcceptanceFlg", DbType.Decimal, entity.OverAllAcceptanceFlg );
			database.AddInParameter(commandWrapper, "@OrintationFlg", DbType.Decimal, entity.OrintationFlg );
			database.AddInParameter(commandWrapper, "@AdmAdmissionBandId", DbType.Decimal, (entity.AdmAdmissionBandId.HasValue ? (object) entity.AdmAdmissionBandId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DistributionFlg", DbType.Decimal, entity.DistributionFlg );
			database.AddInParameter(commandWrapper, "@EnrolledFlg", DbType.Decimal, entity.EnrolledFlg );
			database.AddInParameter(commandWrapper, "@AutoDistrFlg", DbType.Decimal, entity.AutoDistrFlg );
			database.AddInParameter(commandWrapper, "@FullTimeFlg", DbType.Decimal, (entity.FullTimeFlg.HasValue ? (object) entity.FullTimeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OnlneFlg", DbType.Boolean, (entity.OnlneFlg.HasValue ? (object) entity.OnlneFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeeCdeDiscTypeId", DbType.Decimal, (entity.FeeCdeDiscTypeId.HasValue ? (object) entity.FeeCdeDiscTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LmsUsr", DbType.String, entity.LmsUsr );
			database.AddInParameter(commandWrapper, "@LmsPwd", DbType.String, entity.LmsPwd );
			database.AddInParameter(commandWrapper, "@AdmAppHstryCode", DbType.String, entity.AdmAppHstryCode );
			database.AddInParameter(commandWrapper, "@BusFlg", DbType.Boolean, (entity.BusFlg.HasValue ? (object) entity.BusFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeeCdeSchshipTypeId", DbType.Int32, (entity.FeeCdeSchshipTypeId.HasValue ? (object) entity.FeeCdeSchshipTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SchshipNote", DbType.String, entity.SchshipNote );
			database.AddInParameter(commandWrapper, "@SpoSponsorId", DbType.Decimal, (entity.SpoSponsorId.HasValue ? (object) entity.SpoSponsorId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SubmitFlg", DbType.Boolean, (entity.SubmitFlg.HasValue ? (object) entity.SubmitFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeeCdeDiscCatId", DbType.Int32, (entity.FeeCdeDiscCatId.HasValue ? (object) entity.FeeCdeDiscCatId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SchshipTypeFlg", DbType.Boolean, (entity.SchshipTypeFlg.HasValue ? (object) entity.SchshipTypeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FincaidTypeFlg", DbType.Boolean, (entity.FincaidTypeFlg.HasValue ? (object) entity.FincaidTypeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HasRa", DbType.Boolean, (entity.HasRa.HasValue ? (object) entity.HasRa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SubmitDate", DbType.DateTime, (entity.SubmitDate.HasValue ? (object) entity.SubmitDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeStatusRsnId", DbType.Int32, (entity.AdmCdeStatusRsnId.HasValue ? (object) entity.AdmCdeStatusRsnId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TermcondFlg", DbType.Boolean, (entity.TermcondFlg.HasValue ? (object) entity.TermcondFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DormFlg", DbType.Boolean, (entity.DormFlg.HasValue ? (object) entity.DormFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EngNativeFlg", DbType.Decimal, (entity.EngNativeFlg.HasValue ? (object) entity.EngNativeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EngGradChkFlg", DbType.Boolean, (entity.EngGradChkFlg.HasValue ? (object) entity.EngGradChkFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WaitFlg", DbType.Boolean, (entity.WaitFlg.HasValue ? (object) entity.WaitFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, (entity.EdAcadYearId.HasValue ? (object) entity.EdAcadYearId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, (entity.EdCodeSemesterId.HasValue ? (object) entity.EdCodeSemesterId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MasterPhdFlg", DbType.Boolean, (entity.MasterPhdFlg.HasValue ? (object) entity.MasterPhdFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, (entity.EdCodeLevelId.HasValue ? (object) entity.EdCodeLevelId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SpoSponsorTypeId", DbType.Decimal, (entity.SpoSponsorTypeId.HasValue ? (object) entity.SpoSponsorTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UrlReference", DbType.String, entity.UrlReference );
			database.AddInParameter(commandWrapper, "@AdmCdeStatusOldId", DbType.Decimal, (entity.AdmCdeStatusOldId.HasValue ? (object) entity.AdmCdeStatusOldId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ProvisionalFlg", DbType.Boolean, (entity.ProvisionalFlg.HasValue ? (object) entity.ProvisionalFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeAppStatusId", DbType.Decimal, (entity.AdmCdeAppStatusId.HasValue ? (object) entity.AdmCdeAppStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TansikFlg", DbType.Boolean, (entity.TansikFlg.HasValue ? (object) entity.TansikFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmDecisionStatusId", DbType.Decimal, (entity.AdmDecisionStatusId.HasValue ? (object) entity.AdmDecisionStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Boolean, (entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DataSentFlg", DbType.Boolean, (entity.DataSentFlg.HasValue ? (object) entity.DataSentFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CovidFlg", DbType.Boolean, (entity.CovidFlg.HasValue ? (object) entity.CovidFlg  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _admAppRegHistoryId = database.GetParameterValue(commandWrapper, "@AdmAppRegHistoryId");
			entity.AdmAppRegHistoryId = (System.Decimal)_admAppRegHistoryId;
			
			entity.OriginalAdmAppRegHistoryId = entity.AdmAppRegHistoryId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmAppRegHistory object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.AdmAppRegHistory object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmAppRegHistory entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_APP_REG_HISTORY_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, entity.AdmAppRegHistoryId );
			database.AddInParameter(commandWrapper, "@OriginalAdmAppRegHistoryId", DbType.Decimal, entity.OriginalAdmAppRegHistoryId);
			database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, (entity.AdmApplicantId.HasValue ? (object) entity.AdmApplicantId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AppDate", DbType.DateTime, (entity.AppDate.HasValue ? (object) entity.AppDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, (entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CurrentFlg", DbType.Decimal, (entity.CurrentFlg.HasValue ? (object) entity.CurrentFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, (entity.AsCodeDegreeId.HasValue ? (object) entity.AsCodeDegreeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, (entity.AsCodeDegreeClassId.HasValue ? (object) entity.AsCodeDegreeClassId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ComptativeRate", DbType.Decimal, (entity.ComptativeRate.HasValue ? (object) entity.ComptativeRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, (entity.AdmOpenAcadSemesterId.HasValue ? (object) entity.AdmOpenAcadSemesterId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeStatusId", DbType.Decimal, (entity.AdmCdeStatusId.HasValue ? (object) entity.AdmCdeStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OverAllAcceptanceFlg", DbType.Decimal, entity.OverAllAcceptanceFlg );
			database.AddInParameter(commandWrapper, "@OrintationFlg", DbType.Decimal, entity.OrintationFlg );
			database.AddInParameter(commandWrapper, "@AdmAdmissionBandId", DbType.Decimal, (entity.AdmAdmissionBandId.HasValue ? (object) entity.AdmAdmissionBandId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DistributionFlg", DbType.Decimal, entity.DistributionFlg );
			database.AddInParameter(commandWrapper, "@EnrolledFlg", DbType.Decimal, entity.EnrolledFlg );
			database.AddInParameter(commandWrapper, "@AutoDistrFlg", DbType.Decimal, entity.AutoDistrFlg );
			database.AddInParameter(commandWrapper, "@FullTimeFlg", DbType.Decimal, (entity.FullTimeFlg.HasValue ? (object) entity.FullTimeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OnlneFlg", DbType.Boolean, (entity.OnlneFlg.HasValue ? (object) entity.OnlneFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeeCdeDiscTypeId", DbType.Decimal, (entity.FeeCdeDiscTypeId.HasValue ? (object) entity.FeeCdeDiscTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LmsUsr", DbType.String, entity.LmsUsr );
			database.AddInParameter(commandWrapper, "@LmsPwd", DbType.String, entity.LmsPwd );
			database.AddInParameter(commandWrapper, "@AdmAppHstryCode", DbType.String, entity.AdmAppHstryCode );
			database.AddInParameter(commandWrapper, "@BusFlg", DbType.Boolean, (entity.BusFlg.HasValue ? (object) entity.BusFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeeCdeSchshipTypeId", DbType.Int32, (entity.FeeCdeSchshipTypeId.HasValue ? (object) entity.FeeCdeSchshipTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SchshipNote", DbType.String, entity.SchshipNote );
			database.AddInParameter(commandWrapper, "@SpoSponsorId", DbType.Decimal, (entity.SpoSponsorId.HasValue ? (object) entity.SpoSponsorId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SubmitFlg", DbType.Boolean, (entity.SubmitFlg.HasValue ? (object) entity.SubmitFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeeCdeDiscCatId", DbType.Int32, (entity.FeeCdeDiscCatId.HasValue ? (object) entity.FeeCdeDiscCatId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SchshipTypeFlg", DbType.Boolean, (entity.SchshipTypeFlg.HasValue ? (object) entity.SchshipTypeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FincaidTypeFlg", DbType.Boolean, (entity.FincaidTypeFlg.HasValue ? (object) entity.FincaidTypeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HasRa", DbType.Boolean, (entity.HasRa.HasValue ? (object) entity.HasRa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SubmitDate", DbType.DateTime, (entity.SubmitDate.HasValue ? (object) entity.SubmitDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeStatusRsnId", DbType.Int32, (entity.AdmCdeStatusRsnId.HasValue ? (object) entity.AdmCdeStatusRsnId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TermcondFlg", DbType.Boolean, (entity.TermcondFlg.HasValue ? (object) entity.TermcondFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DormFlg", DbType.Boolean, (entity.DormFlg.HasValue ? (object) entity.DormFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EngNativeFlg", DbType.Decimal, (entity.EngNativeFlg.HasValue ? (object) entity.EngNativeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EngGradChkFlg", DbType.Boolean, (entity.EngGradChkFlg.HasValue ? (object) entity.EngGradChkFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WaitFlg", DbType.Boolean, (entity.WaitFlg.HasValue ? (object) entity.WaitFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, (entity.EdAcadYearId.HasValue ? (object) entity.EdAcadYearId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, (entity.EdCodeSemesterId.HasValue ? (object) entity.EdCodeSemesterId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MasterPhdFlg", DbType.Boolean, (entity.MasterPhdFlg.HasValue ? (object) entity.MasterPhdFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, (entity.EdCodeLevelId.HasValue ? (object) entity.EdCodeLevelId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SpoSponsorTypeId", DbType.Decimal, (entity.SpoSponsorTypeId.HasValue ? (object) entity.SpoSponsorTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UrlReference", DbType.String, entity.UrlReference );
			database.AddInParameter(commandWrapper, "@AdmCdeStatusOldId", DbType.Decimal, (entity.AdmCdeStatusOldId.HasValue ? (object) entity.AdmCdeStatusOldId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ProvisionalFlg", DbType.Boolean, (entity.ProvisionalFlg.HasValue ? (object) entity.ProvisionalFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeAppStatusId", DbType.Decimal, (entity.AdmCdeAppStatusId.HasValue ? (object) entity.AdmCdeAppStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TansikFlg", DbType.Boolean, (entity.TansikFlg.HasValue ? (object) entity.TansikFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmDecisionStatusId", DbType.Decimal, (entity.AdmDecisionStatusId.HasValue ? (object) entity.AdmDecisionStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Boolean, (entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DataSentFlg", DbType.Boolean, (entity.DataSentFlg.HasValue ? (object) entity.DataSentFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CovidFlg", DbType.Boolean, (entity.CovidFlg.HasValue ? (object) entity.CovidFlg : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalAdmAppRegHistoryId = entity.AdmAppRegHistoryId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
