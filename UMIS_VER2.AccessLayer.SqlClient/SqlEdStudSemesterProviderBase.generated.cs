/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdStudSemesterProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdStudSemester"/> entity.
	///</summary>
	public abstract partial class SqlEdStudSemesterProviderBase : EdStudSemesterProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdStudSemesterProviderBase"/> instance.
		/// </summary>
		public SqlEdStudSemesterProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdStudSemesterProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdStudSemesterProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edStudSemesterId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edStudSemesterId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, _edStudSemesterId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdStudSemester)
					,_edStudSemesterId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
		public override TList<EdStudSemester> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdStudSemester>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeLoadTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeEnrollTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumCh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumGpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsCourseApproved", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseApproveDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumPoint", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SemCh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SemGpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SemPoint", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsClosed", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MajorCgpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MajorGpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AcdPlnLoadFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExpForGrad", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HoldForGrad", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrientFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NationalitySimilarityFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeeFacultyRuleId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudCardStkrFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudCardStkrDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeeTotAmnt", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeePayAmnt", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeeRefundAmnt", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FreezeFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeAcadWarnTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SemCount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LstSemInYrFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BhvrMark", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AttndcMark", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumChTot", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumPointTot", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResultApproveFlg", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CalcGpaDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserCrsApproveId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MigGpaFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MajorSemCh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MajorAccumCh", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ResultApproveMuFlg", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrecentCoursesLvl", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TransferFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeStudTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ugpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ucgpa", DbType.Decimal, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_stud_semester_id ") || clause.Trim().StartsWith("ed_stud_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudSemesterId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_semester_id ") || clause.Trim().StartsWith("ed_code_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeSemesterId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_id ") || clause.Trim().StartsWith("ed_stud_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_year_id ") || clause.Trim().StartsWith("ed_acad_year_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadYearId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_faculty_info_id ") || clause.Trim().StartsWith("as_faculty_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsFacultyInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_level_id ") || clause.Trim().StartsWith("ed_code_level_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeLevelId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_last ") || clause.Trim().StartsWith("is_last="))
				{
					database.SetParameterValue(commandWrapper, "@IsLast", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_load_type_id ") || clause.Trim().StartsWith("ed_code_load_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeLoadTypeId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_enroll_type_id ") || clause.Trim().StartsWith("ed_code_enroll_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeEnrollTypeId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_ch ") || clause.Trim().StartsWith("accum_ch="))
				{
					database.SetParameterValue(commandWrapper, "@AccumCh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_gpa ") || clause.Trim().StartsWith("accum_gpa="))
				{
					database.SetParameterValue(commandWrapper, "@AccumGpa", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_course_approved ") || clause.Trim().StartsWith("is_course_approved="))
				{
					database.SetParameterValue(commandWrapper, "@IsCourseApproved", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_approve_date ") || clause.Trim().StartsWith("course_approve_date="))
				{
					database.SetParameterValue(commandWrapper, "@CourseApproveDate", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_point ") || clause.Trim().StartsWith("accum_point="))
				{
					database.SetParameterValue(commandWrapper, "@AccumPoint", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sem_ch ") || clause.Trim().StartsWith("sem_ch="))
				{
					database.SetParameterValue(commandWrapper, "@SemCh", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sem_gpa ") || clause.Trim().StartsWith("sem_gpa="))
				{
					database.SetParameterValue(commandWrapper, "@SemGpa", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sem_point ") || clause.Trim().StartsWith("sem_point="))
				{
					database.SetParameterValue(commandWrapper, "@SemPoint", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_closed ") || clause.Trim().StartsWith("is_closed="))
				{
					database.SetParameterValue(commandWrapper, "@IsClosed", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("major_cgpa ") || clause.Trim().StartsWith("major_cgpa="))
				{
					database.SetParameterValue(commandWrapper, "@MajorCgpa", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("major_gpa ") || clause.Trim().StartsWith("major_gpa="))
				{
					database.SetParameterValue(commandWrapper, "@MajorGpa", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("acd_pln_load_flg ") || clause.Trim().StartsWith("acd_pln_load_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AcdPlnLoadFlg", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("online_flg ") || clause.Trim().StartsWith("online_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OnlineFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exp_for_grad ") || clause.Trim().StartsWith("exp_for_grad="))
				{
					database.SetParameterValue(commandWrapper, "@ExpForGrad", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hold_for_grad ") || clause.Trim().StartsWith("hold_for_grad="))
				{
					database.SetParameterValue(commandWrapper, "@HoldForGrad", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("orient_flg ") || clause.Trim().StartsWith("orient_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OrientFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nationality_similarity_flg ") || clause.Trim().StartsWith("nationality_similarity_flg="))
				{
					database.SetParameterValue(commandWrapper, "@NationalitySimilarityFlg", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_faculty_rule_id ") || clause.Trim().StartsWith("fee_faculty_rule_id="))
				{
					database.SetParameterValue(commandWrapper, "@FeeFacultyRuleId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_card_stkr_flg ") || clause.Trim().StartsWith("stud_card_stkr_flg="))
				{
					database.SetParameterValue(commandWrapper, "@StudCardStkrFlg", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_card_stkr_date ") || clause.Trim().StartsWith("stud_card_stkr_date="))
				{
					database.SetParameterValue(commandWrapper, "@StudCardStkrDate", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_tot_amnt ") || clause.Trim().StartsWith("fee_tot_amnt="))
				{
					database.SetParameterValue(commandWrapper, "@FeeTotAmnt", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_pay_amnt ") || clause.Trim().StartsWith("fee_pay_amnt="))
				{
					database.SetParameterValue(commandWrapper, "@FeePayAmnt", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_refund_amnt ") || clause.Trim().StartsWith("fee_refund_amnt="))
				{
					database.SetParameterValue(commandWrapper, "@FeeRefundAmnt", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pay_flg ") || clause.Trim().StartsWith("pay_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PayFlg", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("freeze_flg ") || clause.Trim().StartsWith("freeze_flg="))
				{
					database.SetParameterValue(commandWrapper, "@FreezeFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_code_degree_id ") || clause.Trim().StartsWith("as_code_degree_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsCodeDegreeId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_acad_warn_type_id ") || clause.Trim().StartsWith("ed_cde_acad_warn_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeAcadWarnTypeId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sem_count ") || clause.Trim().StartsWith("sem_count="))
				{
					database.SetParameterValue(commandWrapper, "@SemCount", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lst_sem_in_yr_flg ") || clause.Trim().StartsWith("lst_sem_in_yr_flg="))
				{
					database.SetParameterValue(commandWrapper, "@LstSemInYrFlg", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_exam_type_id ") || clause.Trim().StartsWith("ed_cde_exam_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeExamTypeId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bhvr_mark ") || clause.Trim().StartsWith("bhvr_mark="))
				{
					database.SetParameterValue(commandWrapper, "@BhvrMark", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("attndc_mark ") || clause.Trim().StartsWith("attndc_mark="))
				{
					database.SetParameterValue(commandWrapper, "@AttndcMark", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_ch_tot ") || clause.Trim().StartsWith("accum_ch_tot="))
				{
					database.SetParameterValue(commandWrapper, "@AccumChTot", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accum_point_tot ") || clause.Trim().StartsWith("accum_point_tot="))
				{
					database.SetParameterValue(commandWrapper, "@AccumPointTot", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("result_approve_flg ") || clause.Trim().StartsWith("result_approve_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ResultApproveFlg", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("calc_gpa_date ") || clause.Trim().StartsWith("calc_gpa_date="))
				{
					database.SetParameterValue(commandWrapper, "@CalcGpaDate", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_crs_approve_id ") || clause.Trim().StartsWith("se_user_crs_approve_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserCrsApproveId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mig_gpa_flg ") || clause.Trim().StartsWith("mig_gpa_flg="))
				{
					database.SetParameterValue(commandWrapper, "@MigGpaFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("major_sem_ch ") || clause.Trim().StartsWith("major_sem_ch="))
				{
					database.SetParameterValue(commandWrapper, "@MajorSemCh", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("major_accum_ch ") || clause.Trim().StartsWith("major_accum_ch="))
				{
					database.SetParameterValue(commandWrapper, "@MajorAccumCh", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("result_approve_mu_flg ") || clause.Trim().StartsWith("result_approve_mu_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ResultApproveMuFlg", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_honor_id ") || clause.Trim().StartsWith("gs_cde_honor_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeHonorId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("precent_courses_lvl ") || clause.Trim().StartsWith("precent_courses_lvl="))
				{
					database.SetParameterValue(commandWrapper, "@PrecentCoursesLvl", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_form_id ") || clause.Trim().StartsWith("se_form_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeFormId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("transfer_flg ") || clause.Trim().StartsWith("transfer_flg="))
				{
					database.SetParameterValue(commandWrapper, "@TransferFlg", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_stud_type_id ") || clause.Trim().StartsWith("ed_cde_stud_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeStudTypeId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ugpa ") || clause.Trim().StartsWith("ugpa="))
				{
					database.SetParameterValue(commandWrapper, "@Ugpa", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ucgpa ") || clause.Trim().StartsWith("ucgpa="))
				{
					database.SetParameterValue(commandWrapper, "@Ucgpa", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
		public override TList<EdStudSemester> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_Find_Dynamic", typeof(EdStudSemesterColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
		public override TList<EdStudSemester> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAsCodeDegreeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_SEMESTER_AS_CODE_DEGREE key.
		///		FK_ED_STUD_SEMESTER_AS_CODE_DEGREE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asCodeDegreeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByAsCodeDegreeId(TransactionManager transactionManager, System.Decimal? _asCodeDegreeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByAsCodeDegreeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, _asCodeDegreeId);
			
			IDataReader reader = null;
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeAcadWarnTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_SEMESTER_ED_CDE_ACAD_WARN_TYPE key.
		///		FK_ED_STUD_SEMESTER_ED_CDE_ACAD_WARN_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeAcadWarnTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdCdeAcadWarnTypeId(TransactionManager transactionManager, System.Decimal? _edCdeAcadWarnTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdCdeAcadWarnTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeAcadWarnTypeId", DbType.Decimal, _edCdeAcadWarnTypeId);
			
			IDataReader reader = null;
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeAcadWarnTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeAcadWarnTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeExamTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_SEMESTER_ED_CDE_EXAM_TYPE key.
		///		FK_ED_STUD_SEMESTER_ED_CDE_EXAM_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdCdeExamTypeId(TransactionManager transactionManager, System.Decimal? _edCdeExamTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdCdeExamTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, _edCdeExamTypeId);
			
			IDataReader reader = null;
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeExamTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeExamTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeStudTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_SEMESTER_ED_CDE_STUD_TYPE key.
		///		FK_ED_STUD_SEMESTER_ED_CDE_STUD_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeStudTypeId">burimi</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdCdeStudTypeId(TransactionManager transactionManager, System.Int32? _edCdeStudTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdCdeStudTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeStudTypeId", DbType.Int32, _edCdeStudTypeId);
			
			IDataReader reader = null;
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeStudTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeStudTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByFeeFacultyRuleId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_SEMESTER_FEE_FACULTY_RULE key.
		///		FK_ED_STUD_SEMESTER_FEE_FACULTY_RULE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_feeFacultyRuleId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByFeeFacultyRuleId(TransactionManager transactionManager, System.Decimal? _feeFacultyRuleId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByFeeFacultyRuleId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@FeeFacultyRuleId", DbType.Decimal, _feeFacultyRuleId);
			
			IDataReader reader = null;
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFeeFacultyRuleId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFeeFacultyRuleId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeHonorId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_SEMESTER_GS_CDE_HONOR key.
		///		FK_ED_STUD_SEMESTER_GS_CDE_HONOR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeHonorId">KTCH مرتبو الشرف الفصلية</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudSemester objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByGsCdeHonorId(TransactionManager transactionManager, System.Decimal? _gsCdeHonorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByGsCdeHonorId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, _gsCdeHonorId);
			
			IDataReader reader = null;
			TList<EdStudSemester> rows = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeHonorId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeHonorId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAsFacultyInfoId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_AS_FACULTY_INFO_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudSemester&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByAsFacultyInfoId(TransactionManager transactionManager, System.Decimal? _asFacultyInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByAsFacultyInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdAcadYearId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_ACAD_YEAR_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudSemester&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdAcadYearId(TransactionManager transactionManager, System.Decimal _edAcadYearId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdAcadYearId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, _edAcadYearId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCodeEnrollTypeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_ENROLL_TYPE__1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeEnrollTypeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudSemester&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdCodeEnrollTypeId(TransactionManager transactionManager, System.Decimal? _edCodeEnrollTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdCodeEnrollTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeEnrollTypeId", DbType.Decimal, _edCodeEnrollTypeId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeEnrollTypeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeEnrollTypeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCodeLevelId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_LEVEL_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeLevelId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudSemester&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdCodeLevelId(TransactionManager transactionManager, System.Decimal? _edCodeLevelId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdCodeLevelId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, _edCodeLevelId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeLevelId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeLevelId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCodeLoadTypeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_LOAD_TYPE_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeLoadTypeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudSemester&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdCodeLoadTypeId(TransactionManager transactionManager, System.Decimal? _edCodeLoadTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdCodeLoadTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeLoadTypeId", DbType.Decimal, _edCodeLoadTypeId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeLoadTypeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeLoadTypeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCodeSemesterId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_SEMESTER_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudSemester&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdCodeSemesterId(TransactionManager transactionManager, System.Decimal _edCodeSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdCodeSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, _edCodeSemesterId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_STUD_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudSemester&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudSemester> GetByEdStudId(TransactionManager transactionManager, System.Decimal _edStudId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdStudId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudSemesterId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ED_STUD_SEMESTER index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudSemesterId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudSemester"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudSemester GetByEdStudSemesterId(TransactionManager transactionManager, System.Decimal _edStudSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdStudSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, _edStudSemesterId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudSemesterId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudSemesterId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudIdEdAcadYearIdEdCodeSemesterIdEdCdeExamTypeIdAsFacultyInfoId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_STUD_SEMESTER index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="_edAcadYearId"></param>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudSemester"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudSemester GetByEdStudIdEdAcadYearIdEdCodeSemesterIdEdCdeExamTypeIdAsFacultyInfoId(TransactionManager transactionManager, System.Decimal _edStudId, System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, System.Decimal? _edCdeExamTypeId, System.Decimal? _asFacultyInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_GetByEdStudIdEdAcadYearIdEdCodeSemesterIdEdCdeExamTypeIdAsFacultyInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
				database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, _edAcadYearId);
				database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, _edCodeSemesterId);
				database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, _edCdeExamTypeId);
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
			
			IDataReader reader = null;
			TList<EdStudSemester> tmp = new TList<EdStudSemester>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudIdEdAcadYearIdEdCodeSemesterIdEdCdeExamTypeIdAsFacultyInfoId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudIdEdAcadYearIdEdCodeSemesterIdEdCdeExamTypeIdAsFacultyInfoId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudSemester object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdStudSemester> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_STUD_SEMESTER";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_STUD_SEMESTER_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ED_CODE_SEMESTER_ID", typeof(System.Decimal));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("ED_STUD_ID", typeof(System.Decimal));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("ED_ACAD_YEAR_ID", typeof(System.Decimal));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("AS_FACULTY_INFO_ID", typeof(System.Decimal));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("ED_CODE_LEVEL_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("IS_LAST", typeof(System.Decimal));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("ED_CODE_LOAD_TYPE_ID", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ED_CODE_ENROLL_TYPE_ID", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ACCUM_CH", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ACCUM_GPA", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("IS_COURSE_APPROVED", typeof(System.Decimal));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("COURSE_APPROVE_DATE", typeof(System.DateTime));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ACCUM_POINT", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("SEM_CH", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("SEM_GPA", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("SEM_POINT", typeof(System.Decimal));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("IS_CLOSED", typeof(System.Decimal));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("MAJOR_CGPA", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("MAJOR_GPA", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ACD_PLN_LOAD_FLG", typeof(System.Decimal));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ONLINE_FLG", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("EXP_FOR_GRAD", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("HOLD_FOR_GRAD", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("ORIENT_FLG", typeof(System.Decimal));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("NATIONALITY_SIMILARITY_FLG", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("FEE_FACULTY_RULE_ID", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("STUD_CARD_STKR_FLG", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("STUD_CARD_STKR_DATE", typeof(System.DateTime));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("FEE_TOT_AMNT", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("FEE_PAY_AMNT", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("FEE_REFUND_AMNT", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("PAY_FLG", typeof(System.Decimal));
			col32.AllowDBNull = false;		
			DataColumn col33 = dataTable.Columns.Add("FREEZE_FLG", typeof(System.Decimal));
			col33.AllowDBNull = false;		
			DataColumn col34 = dataTable.Columns.Add("AS_CODE_DEGREE_ID", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("ED_CDE_ACAD_WARN_TYPE_ID", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("NOTES", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("SEM_COUNT", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("LST_SEM_IN_YR_FLG", typeof(System.Decimal));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("BHVR_MARK", typeof(System.Decimal));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("ATTNDC_MARK", typeof(System.Decimal));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("ACCUM_CH_TOT", typeof(System.Decimal));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("ACCUM_POINT_TOT", typeof(System.Decimal));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("RESULT_APPROVE_FLG", typeof(System.Int32));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("CALC_GPA_DATE", typeof(System.DateTime));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("SE_USER_CRS_APPROVE_ID", typeof(System.Decimal));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("MIG_GPA_FLG", typeof(System.Boolean));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("MAJOR_SEM_CH", typeof(System.Decimal));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("MAJOR_ACCUM_CH", typeof(System.Decimal));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("RESULT_APPROVE_MU_FLG", typeof(System.Int32));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("GS_CDE_HONOR_ID", typeof(System.Decimal));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("PRECENT_COURSES_LVL", typeof(System.Decimal));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("SE_FORM_ID", typeof(System.Decimal));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("Transfer_Flg", typeof(System.Boolean));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("ED_CDE_STUD_TYPE_ID", typeof(System.Int32));
			col57.AllowDBNull = true;		
			DataColumn col58 = dataTable.Columns.Add("UGPA", typeof(System.Decimal));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("UCGPA", typeof(System.Decimal));
			col59.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_STUD_SEMESTER_ID", "ED_STUD_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_SEMESTER_ID", "ED_CODE_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_ID", "ED_STUD_ID");
			bulkCopy.ColumnMappings.Add("ED_ACAD_YEAR_ID", "ED_ACAD_YEAR_ID");
			bulkCopy.ColumnMappings.Add("AS_FACULTY_INFO_ID", "AS_FACULTY_INFO_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_LEVEL_ID", "ED_CODE_LEVEL_ID");
			bulkCopy.ColumnMappings.Add("IS_LAST", "IS_LAST");
			bulkCopy.ColumnMappings.Add("ED_CODE_LOAD_TYPE_ID", "ED_CODE_LOAD_TYPE_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_ENROLL_TYPE_ID", "ED_CODE_ENROLL_TYPE_ID");
			bulkCopy.ColumnMappings.Add("ACCUM_CH", "ACCUM_CH");
			bulkCopy.ColumnMappings.Add("ACCUM_GPA", "ACCUM_GPA");
			bulkCopy.ColumnMappings.Add("IS_COURSE_APPROVED", "IS_COURSE_APPROVED");
			bulkCopy.ColumnMappings.Add("COURSE_APPROVE_DATE", "COURSE_APPROVE_DATE");
			bulkCopy.ColumnMappings.Add("ACCUM_POINT", "ACCUM_POINT");
			bulkCopy.ColumnMappings.Add("SEM_CH", "SEM_CH");
			bulkCopy.ColumnMappings.Add("SEM_GPA", "SEM_GPA");
			bulkCopy.ColumnMappings.Add("SEM_POINT", "SEM_POINT");
			bulkCopy.ColumnMappings.Add("IS_CLOSED", "IS_CLOSED");
			bulkCopy.ColumnMappings.Add("MAJOR_CGPA", "MAJOR_CGPA");
			bulkCopy.ColumnMappings.Add("MAJOR_GPA", "MAJOR_GPA");
			bulkCopy.ColumnMappings.Add("ACD_PLN_LOAD_FLG", "ACD_PLN_LOAD_FLG");
			bulkCopy.ColumnMappings.Add("ONLINE_FLG", "ONLINE_FLG");
			bulkCopy.ColumnMappings.Add("EXP_FOR_GRAD", "EXP_FOR_GRAD");
			bulkCopy.ColumnMappings.Add("HOLD_FOR_GRAD", "HOLD_FOR_GRAD");
			bulkCopy.ColumnMappings.Add("ORIENT_FLG", "ORIENT_FLG");
			bulkCopy.ColumnMappings.Add("NATIONALITY_SIMILARITY_FLG", "NATIONALITY_SIMILARITY_FLG");
			bulkCopy.ColumnMappings.Add("FEE_FACULTY_RULE_ID", "FEE_FACULTY_RULE_ID");
			bulkCopy.ColumnMappings.Add("STUD_CARD_STKR_FLG", "STUD_CARD_STKR_FLG");
			bulkCopy.ColumnMappings.Add("STUD_CARD_STKR_DATE", "STUD_CARD_STKR_DATE");
			bulkCopy.ColumnMappings.Add("FEE_TOT_AMNT", "FEE_TOT_AMNT");
			bulkCopy.ColumnMappings.Add("FEE_PAY_AMNT", "FEE_PAY_AMNT");
			bulkCopy.ColumnMappings.Add("FEE_REFUND_AMNT", "FEE_REFUND_AMNT");
			bulkCopy.ColumnMappings.Add("PAY_FLG", "PAY_FLG");
			bulkCopy.ColumnMappings.Add("FREEZE_FLG", "FREEZE_FLG");
			bulkCopy.ColumnMappings.Add("AS_CODE_DEGREE_ID", "AS_CODE_DEGREE_ID");
			bulkCopy.ColumnMappings.Add("ED_CDE_ACAD_WARN_TYPE_ID", "ED_CDE_ACAD_WARN_TYPE_ID");
			bulkCopy.ColumnMappings.Add("NOTES", "NOTES");
			bulkCopy.ColumnMappings.Add("SEM_COUNT", "SEM_COUNT");
			bulkCopy.ColumnMappings.Add("LST_SEM_IN_YR_FLG", "LST_SEM_IN_YR_FLG");
			bulkCopy.ColumnMappings.Add("ED_CDE_EXAM_TYPE_ID", "ED_CDE_EXAM_TYPE_ID");
			bulkCopy.ColumnMappings.Add("BHVR_MARK", "BHVR_MARK");
			bulkCopy.ColumnMappings.Add("ATTNDC_MARK", "ATTNDC_MARK");
			bulkCopy.ColumnMappings.Add("ACCUM_CH_TOT", "ACCUM_CH_TOT");
			bulkCopy.ColumnMappings.Add("ACCUM_POINT_TOT", "ACCUM_POINT_TOT");
			bulkCopy.ColumnMappings.Add("RESULT_APPROVE_FLG", "RESULT_APPROVE_FLG");
			bulkCopy.ColumnMappings.Add("CALC_GPA_DATE", "CALC_GPA_DATE");
			bulkCopy.ColumnMappings.Add("SE_USER_CRS_APPROVE_ID", "SE_USER_CRS_APPROVE_ID");
			bulkCopy.ColumnMappings.Add("MIG_GPA_FLG", "MIG_GPA_FLG");
			bulkCopy.ColumnMappings.Add("MAJOR_SEM_CH", "MAJOR_SEM_CH");
			bulkCopy.ColumnMappings.Add("MAJOR_ACCUM_CH", "MAJOR_ACCUM_CH");
			bulkCopy.ColumnMappings.Add("RESULT_APPROVE_MU_FLG", "RESULT_APPROVE_MU_FLG");
			bulkCopy.ColumnMappings.Add("GS_CDE_HONOR_ID", "GS_CDE_HONOR_ID");
			bulkCopy.ColumnMappings.Add("PRECENT_COURSES_LVL", "PRECENT_COURSES_LVL");
			bulkCopy.ColumnMappings.Add("SE_FORM_ID", "SE_FORM_ID");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("Transfer_Flg", "Transfer_Flg");
			bulkCopy.ColumnMappings.Add("ED_CDE_STUD_TYPE_ID", "ED_CDE_STUD_TYPE_ID");
			bulkCopy.ColumnMappings.Add("UGPA", "UGPA");
			bulkCopy.ColumnMappings.Add("UCGPA", "UCGPA");
			
			foreach(UMIS_VER2.BusinessLyer.EdStudSemester entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_STUD_SEMESTER_ID"] = entity.EdStudSemesterId;
							
				
					row["ED_CODE_SEMESTER_ID"] = entity.EdCodeSemesterId;
							
				
					row["ED_STUD_ID"] = entity.EdStudId;
							
				
					row["ED_ACAD_YEAR_ID"] = entity.EdAcadYearId;
							
				
					row["AS_FACULTY_INFO_ID"] = entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value;
							
				
					row["ED_CODE_LEVEL_ID"] = entity.EdCodeLevelId.HasValue ? (object) entity.EdCodeLevelId  : System.DBNull.Value;
							
				
					row["IS_LAST"] = entity.IsLast;
							
				
					row["ED_CODE_LOAD_TYPE_ID"] = entity.EdCodeLoadTypeId.HasValue ? (object) entity.EdCodeLoadTypeId  : System.DBNull.Value;
							
				
					row["ED_CODE_ENROLL_TYPE_ID"] = entity.EdCodeEnrollTypeId.HasValue ? (object) entity.EdCodeEnrollTypeId  : System.DBNull.Value;
							
				
					row["ACCUM_CH"] = entity.AccumCh.HasValue ? (object) entity.AccumCh  : System.DBNull.Value;
							
				
					row["ACCUM_GPA"] = entity.AccumGpa.HasValue ? (object) entity.AccumGpa  : System.DBNull.Value;
							
				
					row["IS_COURSE_APPROVED"] = entity.IsCourseApproved;
							
				
					row["COURSE_APPROVE_DATE"] = entity.CourseApproveDate.HasValue ? (object) entity.CourseApproveDate  : System.DBNull.Value;
							
				
					row["ACCUM_POINT"] = entity.AccumPoint.HasValue ? (object) entity.AccumPoint  : System.DBNull.Value;
							
				
					row["SEM_CH"] = entity.SemCh.HasValue ? (object) entity.SemCh  : System.DBNull.Value;
							
				
					row["SEM_GPA"] = entity.SemGpa.HasValue ? (object) entity.SemGpa  : System.DBNull.Value;
							
				
					row["SEM_POINT"] = entity.SemPoint.HasValue ? (object) entity.SemPoint  : System.DBNull.Value;
							
				
					row["IS_CLOSED"] = entity.IsClosed;
							
				
					row["MAJOR_CGPA"] = entity.MajorCgpa.HasValue ? (object) entity.MajorCgpa  : System.DBNull.Value;
							
				
					row["MAJOR_GPA"] = entity.MajorGpa.HasValue ? (object) entity.MajorGpa  : System.DBNull.Value;
							
				
					row["ACD_PLN_LOAD_FLG"] = entity.AcdPlnLoadFlg.HasValue ? (object) entity.AcdPlnLoadFlg  : System.DBNull.Value;
							
				
					row["ONLINE_FLG"] = entity.OnlineFlg.HasValue ? (object) entity.OnlineFlg  : System.DBNull.Value;
							
				
					row["EXP_FOR_GRAD"] = entity.ExpForGrad.HasValue ? (object) entity.ExpForGrad  : System.DBNull.Value;
							
				
					row["HOLD_FOR_GRAD"] = entity.HoldForGrad.HasValue ? (object) entity.HoldForGrad  : System.DBNull.Value;
							
				
					row["ORIENT_FLG"] = entity.OrientFlg.HasValue ? (object) entity.OrientFlg  : System.DBNull.Value;
							
				
					row["NATIONALITY_SIMILARITY_FLG"] = entity.NationalitySimilarityFlg.HasValue ? (object) entity.NationalitySimilarityFlg  : System.DBNull.Value;
							
				
					row["FEE_FACULTY_RULE_ID"] = entity.FeeFacultyRuleId.HasValue ? (object) entity.FeeFacultyRuleId  : System.DBNull.Value;
							
				
					row["STUD_CARD_STKR_FLG"] = entity.StudCardStkrFlg.HasValue ? (object) entity.StudCardStkrFlg  : System.DBNull.Value;
							
				
					row["STUD_CARD_STKR_DATE"] = entity.StudCardStkrDate.HasValue ? (object) entity.StudCardStkrDate  : System.DBNull.Value;
							
				
					row["FEE_TOT_AMNT"] = entity.FeeTotAmnt.HasValue ? (object) entity.FeeTotAmnt  : System.DBNull.Value;
							
				
					row["FEE_PAY_AMNT"] = entity.FeePayAmnt.HasValue ? (object) entity.FeePayAmnt  : System.DBNull.Value;
							
				
					row["FEE_REFUND_AMNT"] = entity.FeeRefundAmnt.HasValue ? (object) entity.FeeRefundAmnt  : System.DBNull.Value;
							
				
					row["PAY_FLG"] = entity.PayFlg;
							
				
					row["FREEZE_FLG"] = entity.FreezeFlg;
							
				
					row["AS_CODE_DEGREE_ID"] = entity.AsCodeDegreeId.HasValue ? (object) entity.AsCodeDegreeId  : System.DBNull.Value;
							
				
					row["ED_CDE_ACAD_WARN_TYPE_ID"] = entity.EdCdeAcadWarnTypeId.HasValue ? (object) entity.EdCdeAcadWarnTypeId  : System.DBNull.Value;
							
				
					row["NOTES"] = entity.Notes;
							
				
					row["SEM_COUNT"] = entity.SemCount.HasValue ? (object) entity.SemCount  : System.DBNull.Value;
							
				
					row["LST_SEM_IN_YR_FLG"] = entity.LstSemInYrFlg.HasValue ? (object) entity.LstSemInYrFlg  : System.DBNull.Value;
							
				
					row["ED_CDE_EXAM_TYPE_ID"] = entity.EdCdeExamTypeId.HasValue ? (object) entity.EdCdeExamTypeId  : System.DBNull.Value;
							
				
					row["BHVR_MARK"] = entity.BhvrMark.HasValue ? (object) entity.BhvrMark  : System.DBNull.Value;
							
				
					row["ATTNDC_MARK"] = entity.AttndcMark.HasValue ? (object) entity.AttndcMark  : System.DBNull.Value;
							
				
					row["ACCUM_CH_TOT"] = entity.AccumChTot.HasValue ? (object) entity.AccumChTot  : System.DBNull.Value;
							
				
					row["ACCUM_POINT_TOT"] = entity.AccumPointTot.HasValue ? (object) entity.AccumPointTot  : System.DBNull.Value;
							
				
					row["RESULT_APPROVE_FLG"] = entity.ResultApproveFlg.HasValue ? (object) entity.ResultApproveFlg  : System.DBNull.Value;
							
				
					row["CALC_GPA_DATE"] = entity.CalcGpaDate.HasValue ? (object) entity.CalcGpaDate  : System.DBNull.Value;
							
				
					row["SE_USER_CRS_APPROVE_ID"] = entity.SeUserCrsApproveId.HasValue ? (object) entity.SeUserCrsApproveId  : System.DBNull.Value;
							
				
					row["MIG_GPA_FLG"] = entity.MigGpaFlg.HasValue ? (object) entity.MigGpaFlg  : System.DBNull.Value;
							
				
					row["MAJOR_SEM_CH"] = entity.MajorSemCh.HasValue ? (object) entity.MajorSemCh  : System.DBNull.Value;
							
				
					row["MAJOR_ACCUM_CH"] = entity.MajorAccumCh.HasValue ? (object) entity.MajorAccumCh  : System.DBNull.Value;
							
				
					row["RESULT_APPROVE_MU_FLG"] = entity.ResultApproveMuFlg.HasValue ? (object) entity.ResultApproveMuFlg  : System.DBNull.Value;
							
				
					row["GS_CDE_HONOR_ID"] = entity.GsCdeHonorId.HasValue ? (object) entity.GsCdeHonorId  : System.DBNull.Value;
							
				
					row["PRECENT_COURSES_LVL"] = entity.PrecentCoursesLvl.HasValue ? (object) entity.PrecentCoursesLvl  : System.DBNull.Value;
							
				
					row["SE_FORM_ID"] = entity.SeFormId.HasValue ? (object) entity.SeFormId  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["Transfer_Flg"] = entity.TransferFlg.HasValue ? (object) entity.TransferFlg  : System.DBNull.Value;
							
				
					row["ED_CDE_STUD_TYPE_ID"] = entity.EdCdeStudTypeId.HasValue ? (object) entity.EdCdeStudTypeId  : System.DBNull.Value;
							
				
					row["UGPA"] = entity.Ugpa.HasValue ? (object) entity.Ugpa  : System.DBNull.Value;
							
				
					row["UCGPA"] = entity.Ucgpa.HasValue ? (object) entity.Ucgpa  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdStudSemester entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdStudSemester object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudSemester object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudSemester object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudSemester entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, entity.EdCodeSemesterId );
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, entity.EdStudId );
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, entity.EdAcadYearId );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, (entity.EdCodeLevelId.HasValue ? (object) entity.EdCodeLevelId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, entity.IsLast );
			database.AddInParameter(commandWrapper, "@EdCodeLoadTypeId", DbType.Decimal, (entity.EdCodeLoadTypeId.HasValue ? (object) entity.EdCodeLoadTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeEnrollTypeId", DbType.Decimal, (entity.EdCodeEnrollTypeId.HasValue ? (object) entity.EdCodeEnrollTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumCh", DbType.Decimal, (entity.AccumCh.HasValue ? (object) entity.AccumCh  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumGpa", DbType.Decimal, (entity.AccumGpa.HasValue ? (object) entity.AccumGpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsCourseApproved", DbType.Decimal, entity.IsCourseApproved );
			database.AddInParameter(commandWrapper, "@CourseApproveDate", DbType.DateTime, (entity.CourseApproveDate.HasValue ? (object) entity.CourseApproveDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumPoint", DbType.Decimal, (entity.AccumPoint.HasValue ? (object) entity.AccumPoint  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SemCh", DbType.Decimal, (entity.SemCh.HasValue ? (object) entity.SemCh  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SemGpa", DbType.Decimal, (entity.SemGpa.HasValue ? (object) entity.SemGpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SemPoint", DbType.Decimal, (entity.SemPoint.HasValue ? (object) entity.SemPoint  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsClosed", DbType.Decimal, entity.IsClosed );
			database.AddInParameter(commandWrapper, "@MajorCgpa", DbType.Decimal, (entity.MajorCgpa.HasValue ? (object) entity.MajorCgpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MajorGpa", DbType.Decimal, (entity.MajorGpa.HasValue ? (object) entity.MajorGpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AcdPlnLoadFlg", DbType.Decimal, (entity.AcdPlnLoadFlg.HasValue ? (object) entity.AcdPlnLoadFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, (entity.OnlineFlg.HasValue ? (object) entity.OnlineFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExpForGrad", DbType.Decimal, (entity.ExpForGrad.HasValue ? (object) entity.ExpForGrad  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HoldForGrad", DbType.Decimal, (entity.HoldForGrad.HasValue ? (object) entity.HoldForGrad  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OrientFlg", DbType.Decimal, (entity.OrientFlg.HasValue ? (object) entity.OrientFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NationalitySimilarityFlg", DbType.Decimal, (entity.NationalitySimilarityFlg.HasValue ? (object) entity.NationalitySimilarityFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeeFacultyRuleId", DbType.Decimal, (entity.FeeFacultyRuleId.HasValue ? (object) entity.FeeFacultyRuleId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StudCardStkrFlg", DbType.Decimal, (entity.StudCardStkrFlg.HasValue ? (object) entity.StudCardStkrFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StudCardStkrDate", DbType.DateTime, (entity.StudCardStkrDate.HasValue ? (object) entity.StudCardStkrDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeeTotAmnt", DbType.Decimal, (entity.FeeTotAmnt.HasValue ? (object) entity.FeeTotAmnt  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeePayAmnt", DbType.Decimal, (entity.FeePayAmnt.HasValue ? (object) entity.FeePayAmnt  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeeRefundAmnt", DbType.Decimal, (entity.FeeRefundAmnt.HasValue ? (object) entity.FeeRefundAmnt  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PayFlg", DbType.Decimal, entity.PayFlg );
			database.AddInParameter(commandWrapper, "@FreezeFlg", DbType.Decimal, entity.FreezeFlg );
			database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, (entity.AsCodeDegreeId.HasValue ? (object) entity.AsCodeDegreeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeAcadWarnTypeId", DbType.Decimal, (entity.EdCdeAcadWarnTypeId.HasValue ? (object) entity.EdCdeAcadWarnTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@SemCount", DbType.Decimal, (entity.SemCount.HasValue ? (object) entity.SemCount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LstSemInYrFlg", DbType.Decimal, (entity.LstSemInYrFlg.HasValue ? (object) entity.LstSemInYrFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, (entity.EdCdeExamTypeId.HasValue ? (object) entity.EdCdeExamTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BhvrMark", DbType.Decimal, (entity.BhvrMark.HasValue ? (object) entity.BhvrMark  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AttndcMark", DbType.Decimal, (entity.AttndcMark.HasValue ? (object) entity.AttndcMark  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumChTot", DbType.Decimal, (entity.AccumChTot.HasValue ? (object) entity.AccumChTot  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumPointTot", DbType.Decimal, (entity.AccumPointTot.HasValue ? (object) entity.AccumPointTot  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ResultApproveFlg", DbType.Int32, (entity.ResultApproveFlg.HasValue ? (object) entity.ResultApproveFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CalcGpaDate", DbType.DateTime, (entity.CalcGpaDate.HasValue ? (object) entity.CalcGpaDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserCrsApproveId", DbType.Decimal, (entity.SeUserCrsApproveId.HasValue ? (object) entity.SeUserCrsApproveId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MigGpaFlg", DbType.Boolean, (entity.MigGpaFlg.HasValue ? (object) entity.MigGpaFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MajorSemCh", DbType.Decimal, (entity.MajorSemCh.HasValue ? (object) entity.MajorSemCh  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MajorAccumCh", DbType.Decimal, (entity.MajorAccumCh.HasValue ? (object) entity.MajorAccumCh  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ResultApproveMuFlg", DbType.Int32, (entity.ResultApproveMuFlg.HasValue ? (object) entity.ResultApproveMuFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, (entity.GsCdeHonorId.HasValue ? (object) entity.GsCdeHonorId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PrecentCoursesLvl", DbType.Decimal, (entity.PrecentCoursesLvl.HasValue ? (object) entity.PrecentCoursesLvl  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, (entity.SeFormId.HasValue ? (object) entity.SeFormId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TransferFlg", DbType.Boolean, (entity.TransferFlg.HasValue ? (object) entity.TransferFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeStudTypeId", DbType.Int32, (entity.EdCdeStudTypeId.HasValue ? (object) entity.EdCdeStudTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Ugpa", DbType.Decimal, (entity.Ugpa.HasValue ? (object) entity.Ugpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Ucgpa", DbType.Decimal, (entity.Ucgpa.HasValue ? (object) entity.Ucgpa  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edStudSemesterId = database.GetParameterValue(commandWrapper, "@EdStudSemesterId");
			entity.EdStudSemesterId = (System.Decimal)_edStudSemesterId;
			
			entity.OriginalEdStudSemesterId = entity.EdStudSemesterId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudSemester object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdStudSemester object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudSemester entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_SEMESTER_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, entity.EdStudSemesterId );
			database.AddInParameter(commandWrapper, "@OriginalEdStudSemesterId", DbType.Decimal, entity.OriginalEdStudSemesterId);
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, entity.EdCodeSemesterId );
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, entity.EdStudId );
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, entity.EdAcadYearId );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeLevelId", DbType.Decimal, (entity.EdCodeLevelId.HasValue ? (object) entity.EdCodeLevelId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, entity.IsLast );
			database.AddInParameter(commandWrapper, "@EdCodeLoadTypeId", DbType.Decimal, (entity.EdCodeLoadTypeId.HasValue ? (object) entity.EdCodeLoadTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeEnrollTypeId", DbType.Decimal, (entity.EdCodeEnrollTypeId.HasValue ? (object) entity.EdCodeEnrollTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumCh", DbType.Decimal, (entity.AccumCh.HasValue ? (object) entity.AccumCh : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumGpa", DbType.Decimal, (entity.AccumGpa.HasValue ? (object) entity.AccumGpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsCourseApproved", DbType.Decimal, entity.IsCourseApproved );
			database.AddInParameter(commandWrapper, "@CourseApproveDate", DbType.DateTime, (entity.CourseApproveDate.HasValue ? (object) entity.CourseApproveDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumPoint", DbType.Decimal, (entity.AccumPoint.HasValue ? (object) entity.AccumPoint : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SemCh", DbType.Decimal, (entity.SemCh.HasValue ? (object) entity.SemCh : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SemGpa", DbType.Decimal, (entity.SemGpa.HasValue ? (object) entity.SemGpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SemPoint", DbType.Decimal, (entity.SemPoint.HasValue ? (object) entity.SemPoint : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsClosed", DbType.Decimal, entity.IsClosed );
			database.AddInParameter(commandWrapper, "@MajorCgpa", DbType.Decimal, (entity.MajorCgpa.HasValue ? (object) entity.MajorCgpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MajorGpa", DbType.Decimal, (entity.MajorGpa.HasValue ? (object) entity.MajorGpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AcdPlnLoadFlg", DbType.Decimal, (entity.AcdPlnLoadFlg.HasValue ? (object) entity.AcdPlnLoadFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, (entity.OnlineFlg.HasValue ? (object) entity.OnlineFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExpForGrad", DbType.Decimal, (entity.ExpForGrad.HasValue ? (object) entity.ExpForGrad : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HoldForGrad", DbType.Decimal, (entity.HoldForGrad.HasValue ? (object) entity.HoldForGrad : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OrientFlg", DbType.Decimal, (entity.OrientFlg.HasValue ? (object) entity.OrientFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NationalitySimilarityFlg", DbType.Decimal, (entity.NationalitySimilarityFlg.HasValue ? (object) entity.NationalitySimilarityFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeeFacultyRuleId", DbType.Decimal, (entity.FeeFacultyRuleId.HasValue ? (object) entity.FeeFacultyRuleId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StudCardStkrFlg", DbType.Decimal, (entity.StudCardStkrFlg.HasValue ? (object) entity.StudCardStkrFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StudCardStkrDate", DbType.DateTime, (entity.StudCardStkrDate.HasValue ? (object) entity.StudCardStkrDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeeTotAmnt", DbType.Decimal, (entity.FeeTotAmnt.HasValue ? (object) entity.FeeTotAmnt : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeePayAmnt", DbType.Decimal, (entity.FeePayAmnt.HasValue ? (object) entity.FeePayAmnt : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeeRefundAmnt", DbType.Decimal, (entity.FeeRefundAmnt.HasValue ? (object) entity.FeeRefundAmnt : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PayFlg", DbType.Decimal, entity.PayFlg );
			database.AddInParameter(commandWrapper, "@FreezeFlg", DbType.Decimal, entity.FreezeFlg );
			database.AddInParameter(commandWrapper, "@AsCodeDegreeId", DbType.Decimal, (entity.AsCodeDegreeId.HasValue ? (object) entity.AsCodeDegreeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeAcadWarnTypeId", DbType.Decimal, (entity.EdCdeAcadWarnTypeId.HasValue ? (object) entity.EdCdeAcadWarnTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@SemCount", DbType.Decimal, (entity.SemCount.HasValue ? (object) entity.SemCount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LstSemInYrFlg", DbType.Decimal, (entity.LstSemInYrFlg.HasValue ? (object) entity.LstSemInYrFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, (entity.EdCdeExamTypeId.HasValue ? (object) entity.EdCdeExamTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BhvrMark", DbType.Decimal, (entity.BhvrMark.HasValue ? (object) entity.BhvrMark : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AttndcMark", DbType.Decimal, (entity.AttndcMark.HasValue ? (object) entity.AttndcMark : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumChTot", DbType.Decimal, (entity.AccumChTot.HasValue ? (object) entity.AccumChTot : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumPointTot", DbType.Decimal, (entity.AccumPointTot.HasValue ? (object) entity.AccumPointTot : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ResultApproveFlg", DbType.Int32, (entity.ResultApproveFlg.HasValue ? (object) entity.ResultApproveFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CalcGpaDate", DbType.DateTime, (entity.CalcGpaDate.HasValue ? (object) entity.CalcGpaDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserCrsApproveId", DbType.Decimal, (entity.SeUserCrsApproveId.HasValue ? (object) entity.SeUserCrsApproveId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MigGpaFlg", DbType.Boolean, (entity.MigGpaFlg.HasValue ? (object) entity.MigGpaFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MajorSemCh", DbType.Decimal, (entity.MajorSemCh.HasValue ? (object) entity.MajorSemCh : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MajorAccumCh", DbType.Decimal, (entity.MajorAccumCh.HasValue ? (object) entity.MajorAccumCh : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ResultApproveMuFlg", DbType.Int32, (entity.ResultApproveMuFlg.HasValue ? (object) entity.ResultApproveMuFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCdeHonorId", DbType.Decimal, (entity.GsCdeHonorId.HasValue ? (object) entity.GsCdeHonorId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PrecentCoursesLvl", DbType.Decimal, (entity.PrecentCoursesLvl.HasValue ? (object) entity.PrecentCoursesLvl : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, (entity.SeFormId.HasValue ? (object) entity.SeFormId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TransferFlg", DbType.Boolean, (entity.TransferFlg.HasValue ? (object) entity.TransferFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeStudTypeId", DbType.Int32, (entity.EdCdeStudTypeId.HasValue ? (object) entity.EdCdeStudTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Ugpa", DbType.Decimal, (entity.Ugpa.HasValue ? (object) entity.Ugpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Ucgpa", DbType.Decimal, (entity.Ucgpa.HasValue ? (object) entity.Ucgpa : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdStudSemesterId = entity.EdStudSemesterId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
