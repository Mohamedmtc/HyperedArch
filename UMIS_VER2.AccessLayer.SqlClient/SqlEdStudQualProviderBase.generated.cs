/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdStudQualProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdStudQual"/> entity.
	///</summary>
	public abstract partial class SqlEdStudQualProviderBase : EdStudQualProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdStudQualProviderBase"/> instance.
		/// </summary>
		public SqlEdStudQualProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdStudQualProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdStudQualProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edStudQualId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edStudQualId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, _edStudQualId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdStudQual)
					,_edStudQualId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
		public override TList<EdStudQual> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdStudQual>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeQualId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SchoolName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualTotMark", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalDegree", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalPercent", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeQualBrnId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeSchoolId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudSeatNum", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EnglishPercent", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ConvertedPercent", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeQualCatId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmissionFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Tofel", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cgpa", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualRank", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeQualStatusId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualStartDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualDescEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualBrnDescEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeFacultyId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeSchoolTypeId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeQualStatusId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualRsltUsr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualRsltPwd", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeSchoolGradeId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_stud_qual_id ") || clause.Trim().StartsWith("ed_stud_qual_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudQualId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_id ") || clause.Trim().StartsWith("ed_stud_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_qual_id ") || clause.Trim().StartsWith("ed_code_qual_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeQualId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("school_name ") || clause.Trim().StartsWith("school_name="))
				{
					database.SetParameterValue(commandWrapper, "@SchoolName", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_date ") || clause.Trim().StartsWith("qual_date="))
				{
					database.SetParameterValue(commandWrapper, "@QualDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_tot_mark ") || clause.Trim().StartsWith("qual_tot_mark="))
				{
					database.SetParameterValue(commandWrapper, "@QualTotMark", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("total_degree ") || clause.Trim().StartsWith("total_degree="))
				{
					database.SetParameterValue(commandWrapper, "@TotalDegree", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("total_percent ") || clause.Trim().StartsWith("total_percent="))
				{
					database.SetParameterValue(commandWrapper, "@TotalPercent", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_node_id ") || clause.Trim().StartsWith("gs_country_node_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryNodeId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_applicant_id ") || clause.Trim().StartsWith("adm_applicant_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmApplicantId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_qual_brn_id ") || clause.Trim().StartsWith("ed_cde_qual_brn_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeQualBrnId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_school_id ") || clause.Trim().StartsWith("gs_cde_school_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeSchoolId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_seat_num ") || clause.Trim().StartsWith("stud_seat_num="))
				{
					database.SetParameterValue(commandWrapper, "@StudSeatNum", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("english_percent ") || clause.Trim().StartsWith("english_percent="))
				{
					database.SetParameterValue(commandWrapper, "@EnglishPercent", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("converted_percent ") || clause.Trim().StartsWith("converted_percent="))
				{
					database.SetParameterValue(commandWrapper, "@ConvertedPercent", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_qual_cat_id ") || clause.Trim().StartsWith("ed_cde_qual_cat_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeQualCatId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("admission_flg ") || clause.Trim().StartsWith("admission_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AdmissionFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_universities_id ") || clause.Trim().StartsWith("gs_cde_universities_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeUniversitiesId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tofel ") || clause.Trim().StartsWith("tofel="))
				{
					database.SetParameterValue(commandWrapper, "@Tofel", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cgpa ") || clause.Trim().StartsWith("cgpa="))
				{
					database.SetParameterValue(commandWrapper, "@Cgpa", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_rank ") || clause.Trim().StartsWith("qual_rank="))
				{
					database.SetParameterValue(commandWrapper, "@QualRank", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_qual_phase ") || clause.Trim().StartsWith("ed_cde_qual_phase="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeQualPhase", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_qual_status_id ") || clause.Trim().StartsWith("ed_cde_qual_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeQualStatusId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_start_date ") || clause.Trim().StartsWith("qual_start_date="))
				{
					database.SetParameterValue(commandWrapper, "@QualStartDate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_language_id ") || clause.Trim().StartsWith("gs_code_language_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeLanguageId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_app_reg_history_id ") || clause.Trim().StartsWith("adm_app_reg_history_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAppRegHistoryId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_exam_grdng_id ") || clause.Trim().StartsWith("adm_cde_exam_grdng_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeExamGrdngId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_desc_en ") || clause.Trim().StartsWith("qual_desc_en="))
				{
					database.SetParameterValue(commandWrapper, "@QualDescEn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_brn_desc_en ") || clause.Trim().StartsWith("qual_brn_desc_en="))
				{
					database.SetParameterValue(commandWrapper, "@QualBrnDescEn", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_faculty_id ") || clause.Trim().StartsWith("gs_cde_faculty_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeFacultyId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_school_type_id ") || clause.Trim().StartsWith("gs_cde_school_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeSchoolTypeId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_qual_status_id ") || clause.Trim().StartsWith("adm_cde_qual_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeQualStatusId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_rslt_usr ") || clause.Trim().StartsWith("qual_rslt_usr="))
				{
					database.SetParameterValue(commandWrapper, "@QualRsltUsr", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_rslt_pwd ") || clause.Trim().StartsWith("qual_rslt_pwd="))
				{
					database.SetParameterValue(commandWrapper, "@QualRsltPwd", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_school_grade_id ") || clause.Trim().StartsWith("ed_cde_school_grade_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeSchoolGradeId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdStudQual> rows = new TList<EdStudQual>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
		public override TList<EdStudQual> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_Find_Dynamic", typeof(EdStudQualColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdStudQual> rows = new TList<EdStudQual>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdStudQual> rows = new TList<EdStudQual>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
		public override TList<EdStudQual> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdStudQual> rows = new TList<EdStudQual>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByEdStudId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_AUTO_0280 key.
		///		FK_AUTO_0280 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByEdStudId(TransactionManager transactionManager, System.Decimal? _edStudId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdStudId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmAppRegHistoryId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ADM_APP_REG_HISTORY key.
		///		FK_ED_STUD_QUAL_ADM_APP_REG_HISTORY Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAppRegHistoryId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByAdmAppRegHistoryId(TransactionManager transactionManager, System.Decimal? _admAppRegHistoryId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByAdmAppRegHistoryId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, _admAppRegHistoryId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAppRegHistoryId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAppRegHistoryId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmApplicantId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ADM_APPLICANT key.
		///		FK_ED_STUD_QUAL_ADM_APPLICANT Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admApplicantId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByAdmApplicantId(TransactionManager transactionManager, System.Decimal? _admApplicantId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByAdmApplicantId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmApplicantId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmApplicantId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmCdeExamGrdngId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ADM_CDE_EXAM_GRDNG key.
		///		FK_ED_STUD_QUAL_ADM_CDE_EXAM_GRDNG Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeExamGrdngId">NU:PG QUAL GRADE</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByAdmCdeExamGrdngId(TransactionManager transactionManager, System.Decimal? _admCdeExamGrdngId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByAdmCdeExamGrdngId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, _admCdeExamGrdngId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeExamGrdngId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeExamGrdngId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmCdeQualStatusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ADM_CDE_QUAL_STATUS key.
		///		FK_ED_STUD_QUAL_ADM_CDE_QUAL_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeQualStatusId">EJUST</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByAdmCdeQualStatusId(TransactionManager transactionManager, System.Int32? _admCdeQualStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByAdmCdeQualStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeQualStatusId", DbType.Int32, _admCdeQualStatusId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeQualStatusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeQualStatusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeQualBrnId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ED_CDE_QUAL_BRN key.
		///		FK_ED_STUD_QUAL_ED_CDE_QUAL_BRN Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeQualBrnId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByEdCdeQualBrnId(TransactionManager transactionManager, System.Decimal? _edCdeQualBrnId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdCdeQualBrnId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeQualBrnId", DbType.Decimal, _edCdeQualBrnId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeQualBrnId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeQualBrnId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeQualCatId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ED_CDE_QUAL_CAT key.
		///		FK_ED_STUD_QUAL_ED_CDE_QUAL_CAT Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeQualCatId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByEdCdeQualCatId(TransactionManager transactionManager, System.Decimal? _edCdeQualCatId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdCdeQualCatId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeQualCatId", DbType.Decimal, _edCdeQualCatId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeQualCatId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeQualCatId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeQualPhase
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ED_CDE_QUAL_PHASE key.
		///		FK_ED_STUD_QUAL_ED_CDE_QUAL_PHASE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeQualPhase"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByEdCdeQualPhase(TransactionManager transactionManager, System.Decimal? _edCdeQualPhase, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdCdeQualPhase", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, _edCdeQualPhase);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeQualPhase", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeQualPhase", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeQualStatusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ED_CDE_QUAL_STATUS key.
		///		FK_ED_STUD_QUAL_ED_CDE_QUAL_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeQualStatusId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByEdCdeQualStatusId(TransactionManager transactionManager, System.Int32? _edCdeQualStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdCdeQualStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeQualStatusId", DbType.Int32, _edCdeQualStatusId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeQualStatusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeQualStatusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeSchoolGradeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_ED_CDE_SCHOOL_GRADE key.
		///		FK_ED_STUD_QUAL_ED_CDE_SCHOOL_GRADE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeSchoolGradeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByEdCdeSchoolGradeId(TransactionManager transactionManager, System.Int32? _edCdeSchoolGradeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdCdeSchoolGradeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeSchoolGradeId", DbType.Int32, _edCdeSchoolGradeId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeSchoolGradeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeSchoolGradeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeFacultyId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_GS_CDE_FACULTY key.
		///		FK_ED_STUD_QUAL_GS_CDE_FACULTY Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeFacultyId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByGsCdeFacultyId(TransactionManager transactionManager, System.Decimal? _gsCdeFacultyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByGsCdeFacultyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeFacultyId", DbType.Decimal, _gsCdeFacultyId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeFacultyId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeFacultyId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeSchoolId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_GS_CDE_SCHOOL key.
		///		FK_ED_STUD_QUAL_GS_CDE_SCHOOL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeSchoolId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByGsCdeSchoolId(TransactionManager transactionManager, System.Decimal? _gsCdeSchoolId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByGsCdeSchoolId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeSchoolId", DbType.Decimal, _gsCdeSchoolId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeSchoolId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeSchoolId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeSchoolTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_GS_CDE_SCHOOL_TYPE key.
		///		FK_ED_STUD_QUAL_GS_CDE_SCHOOL_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeSchoolTypeId">EJUST</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByGsCdeSchoolTypeId(TransactionManager transactionManager, System.Int32? _gsCdeSchoolTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByGsCdeSchoolTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeSchoolTypeId", DbType.Int32, _gsCdeSchoolTypeId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeSchoolTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeSchoolTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeUniversitiesId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_GS_CDE_UNIVERSITIES key.
		///		FK_ED_STUD_QUAL_GS_CDE_UNIVERSITIES Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeUniversitiesId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByGsCdeUniversitiesId(TransactionManager transactionManager, System.Decimal? _gsCdeUniversitiesId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByGsCdeUniversitiesId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, _gsCdeUniversitiesId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeUniversitiesId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeUniversitiesId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeLanguageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_QUAL_GS_CODE_LANGUAGE key.
		///		FK_ED_STUD_QUAL_GS_CODE_LANGUAGE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeLanguageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudQual objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByGsCodeLanguageId(TransactionManager transactionManager, System.Decimal? _gsCodeLanguageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByGsCodeLanguageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, _gsCodeLanguageId);
			
			IDataReader reader = null;
			TList<EdStudQual> rows = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByEdCodeQualId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_QUAL_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeQualId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudQual&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByEdCodeQualId(TransactionManager transactionManager, System.Decimal _edCodeQualId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdCodeQualId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeQualId", DbType.Decimal, _edCodeQualId);
			
			IDataReader reader = null;
			TList<EdStudQual> tmp = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeQualId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeQualId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCountryNodeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_COUNTRY_NODE_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryNodeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudQual&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudQual> GetByGsCountryNodeId(TransactionManager transactionManager, System.Decimal? _gsCountryNodeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByGsCountryNodeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, _gsCountryNodeId);
			
			IDataReader reader = null;
			TList<EdStudQual> tmp = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudQualId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ED_STUD_QUAL index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudQualId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudQual"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudQual GetByEdStudQualId(TransactionManager transactionManager, System.Decimal _edStudQualId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdStudQualId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, _edStudQualId);
			
			IDataReader reader = null;
			TList<EdStudQual> tmp = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudQualId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudQualId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudIdEdCodeQualIdQualDateAdmApplicantIdAdmAppRegHistoryId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_STUD_QUAL index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="_edCodeQualId"></param>
		/// <param name="_qualDate">End Date</param>
		/// <param name="_admApplicantId"></param>
		/// <param name="_admAppRegHistoryId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudQual"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudQual GetByEdStudIdEdCodeQualIdQualDateAdmApplicantIdAdmAppRegHistoryId(TransactionManager transactionManager, System.Decimal? _edStudId, System.Decimal _edCodeQualId, System.DateTime? _qualDate, System.Decimal? _admApplicantId, System.Decimal? _admAppRegHistoryId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdStudIdEdCodeQualIdQualDateAdmApplicantIdAdmAppRegHistoryId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
				database.AddInParameter(commandWrapper, "@EdCodeQualId", DbType.Decimal, _edCodeQualId);
				database.AddInParameter(commandWrapper, "@QualDate", DbType.DateTime, _qualDate);
				database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, _admApplicantId);
				database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, _admAppRegHistoryId);
			
			IDataReader reader = null;
			TList<EdStudQual> tmp = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudIdEdCodeQualIdQualDateAdmApplicantIdAdmAppRegHistoryId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudIdEdCodeQualIdQualDateAdmApplicantIdAdmAppRegHistoryId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudIdAdmAppRegHistoryIdAdmissionFlg
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_STUD_QUAL_ADM_FLG index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="_admAppRegHistoryId"></param>
		/// <param name="_admissionFlg"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudQual"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudQual GetByEdStudIdAdmAppRegHistoryIdAdmissionFlg(TransactionManager transactionManager, System.Decimal? _edStudId, System.Decimal? _admAppRegHistoryId, System.Decimal _admissionFlg, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_GetByEdStudIdAdmAppRegHistoryIdAdmissionFlg", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
				database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, _admAppRegHistoryId);
				database.AddInParameter(commandWrapper, "@AdmissionFlg", DbType.Decimal, _admissionFlg);
			
			IDataReader reader = null;
			TList<EdStudQual> tmp = new TList<EdStudQual>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudIdAdmAppRegHistoryIdAdmissionFlg", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudIdAdmAppRegHistoryIdAdmissionFlg", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudQual object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdStudQual> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_STUD_QUAL";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_STUD_QUAL_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ED_STUD_ID", typeof(System.Decimal));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("ED_CODE_QUAL_ID", typeof(System.Decimal));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("SCHOOL_NAME", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("QUAL_DATE", typeof(System.DateTime));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("QUAL_TOT_MARK", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("TOTAL_DEGREE", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("TOTAL_PERCENT", typeof(System.Decimal));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("GS_COUNTRY_NODE_ID", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ADM_APPLICANT_ID", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ED_CDE_QUAL_BRN_ID", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("GS_CDE_SCHOOL_ID", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("STUD_SEAT_NUM", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ENGLISH_PERCENT", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("CONVERTED_PERCENT", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("ED_CDE_QUAL_CAT_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("ADMISSION_FLG", typeof(System.Decimal));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("GS_CDE_UNIVERSITIES_ID", typeof(System.Decimal));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("TOFEL", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("CGPA", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("QUAL_RANK", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ED_CDE_QUAL_PHASE", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ED_CDE_QUAL_STATUS_ID", typeof(System.Int32));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("QUAL_START_DATE", typeof(System.DateTime));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("GS_CODE_LANGUAGE_ID", typeof(System.Decimal));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ADM_CDE_EXAM_GRDNG_ID", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("QUAL_DESC_EN", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("QUAL_BRN_DESC_EN", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("GS_CDE_FACULTY_ID", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("GS_CDE_SCHOOL_TYPE_ID", typeof(System.Int32));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("ADM_CDE_QUAL_STATUS_ID", typeof(System.Int32));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("NOTES", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("QUAL_RSLT_USR", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("QUAL_RSLT_PWD", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("ED_CDE_SCHOOL_GRADE_ID", typeof(System.Int32));
			col35.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_STUD_QUAL_ID", "ED_STUD_QUAL_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_ID", "ED_STUD_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_QUAL_ID", "ED_CODE_QUAL_ID");
			bulkCopy.ColumnMappings.Add("SCHOOL_NAME", "SCHOOL_NAME");
			bulkCopy.ColumnMappings.Add("QUAL_DATE", "QUAL_DATE");
			bulkCopy.ColumnMappings.Add("QUAL_TOT_MARK", "QUAL_TOT_MARK");
			bulkCopy.ColumnMappings.Add("TOTAL_DEGREE", "TOTAL_DEGREE");
			bulkCopy.ColumnMappings.Add("TOTAL_PERCENT", "TOTAL_PERCENT");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_NODE_ID", "GS_COUNTRY_NODE_ID");
			bulkCopy.ColumnMappings.Add("ADM_APPLICANT_ID", "ADM_APPLICANT_ID");
			bulkCopy.ColumnMappings.Add("ED_CDE_QUAL_BRN_ID", "ED_CDE_QUAL_BRN_ID");
			bulkCopy.ColumnMappings.Add("GS_CDE_SCHOOL_ID", "GS_CDE_SCHOOL_ID");
			bulkCopy.ColumnMappings.Add("STUD_SEAT_NUM", "STUD_SEAT_NUM");
			bulkCopy.ColumnMappings.Add("ENGLISH_PERCENT", "ENGLISH_PERCENT");
			bulkCopy.ColumnMappings.Add("CONVERTED_PERCENT", "CONVERTED_PERCENT");
			bulkCopy.ColumnMappings.Add("ED_CDE_QUAL_CAT_ID", "ED_CDE_QUAL_CAT_ID");
			bulkCopy.ColumnMappings.Add("ADMISSION_FLG", "ADMISSION_FLG");
			bulkCopy.ColumnMappings.Add("GS_CDE_UNIVERSITIES_ID", "GS_CDE_UNIVERSITIES_ID");
			bulkCopy.ColumnMappings.Add("TOFEL", "TOFEL");
			bulkCopy.ColumnMappings.Add("CGPA", "CGPA");
			bulkCopy.ColumnMappings.Add("QUAL_RANK", "QUAL_RANK");
			bulkCopy.ColumnMappings.Add("ED_CDE_QUAL_PHASE", "ED_CDE_QUAL_PHASE");
			bulkCopy.ColumnMappings.Add("ED_CDE_QUAL_STATUS_ID", "ED_CDE_QUAL_STATUS_ID");
			bulkCopy.ColumnMappings.Add("QUAL_START_DATE", "QUAL_START_DATE");
			bulkCopy.ColumnMappings.Add("GS_CODE_LANGUAGE_ID", "GS_CODE_LANGUAGE_ID");
			bulkCopy.ColumnMappings.Add("ADM_APP_REG_HISTORY_ID", "ADM_APP_REG_HISTORY_ID");
			bulkCopy.ColumnMappings.Add("ADM_CDE_EXAM_GRDNG_ID", "ADM_CDE_EXAM_GRDNG_ID");
			bulkCopy.ColumnMappings.Add("QUAL_DESC_EN", "QUAL_DESC_EN");
			bulkCopy.ColumnMappings.Add("QUAL_BRN_DESC_EN", "QUAL_BRN_DESC_EN");
			bulkCopy.ColumnMappings.Add("GS_CDE_FACULTY_ID", "GS_CDE_FACULTY_ID");
			bulkCopy.ColumnMappings.Add("GS_CDE_SCHOOL_TYPE_ID", "GS_CDE_SCHOOL_TYPE_ID");
			bulkCopy.ColumnMappings.Add("ADM_CDE_QUAL_STATUS_ID", "ADM_CDE_QUAL_STATUS_ID");
			bulkCopy.ColumnMappings.Add("NOTES", "NOTES");
			bulkCopy.ColumnMappings.Add("QUAL_RSLT_USR", "QUAL_RSLT_USR");
			bulkCopy.ColumnMappings.Add("QUAL_RSLT_PWD", "QUAL_RSLT_PWD");
			bulkCopy.ColumnMappings.Add("ED_CDE_SCHOOL_GRADE_ID", "ED_CDE_SCHOOL_GRADE_ID");
			
			foreach(UMIS_VER2.BusinessLyer.EdStudQual entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_STUD_QUAL_ID"] = entity.EdStudQualId;
							
				
					row["ED_STUD_ID"] = entity.EdStudId.HasValue ? (object) entity.EdStudId  : System.DBNull.Value;
							
				
					row["ED_CODE_QUAL_ID"] = entity.EdCodeQualId;
							
				
					row["SCHOOL_NAME"] = entity.SchoolName;
							
				
					row["QUAL_DATE"] = entity.QualDate.HasValue ? (object) entity.QualDate  : System.DBNull.Value;
							
				
					row["QUAL_TOT_MARK"] = entity.QualTotMark.HasValue ? (object) entity.QualTotMark  : System.DBNull.Value;
							
				
					row["TOTAL_DEGREE"] = entity.TotalDegree.HasValue ? (object) entity.TotalDegree  : System.DBNull.Value;
							
				
					row["TOTAL_PERCENT"] = entity.TotalPercent;
							
				
					row["GS_COUNTRY_NODE_ID"] = entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value;
							
				
					row["ADM_APPLICANT_ID"] = entity.AdmApplicantId.HasValue ? (object) entity.AdmApplicantId  : System.DBNull.Value;
							
				
					row["ED_CDE_QUAL_BRN_ID"] = entity.EdCdeQualBrnId.HasValue ? (object) entity.EdCdeQualBrnId  : System.DBNull.Value;
							
				
					row["GS_CDE_SCHOOL_ID"] = entity.GsCdeSchoolId.HasValue ? (object) entity.GsCdeSchoolId  : System.DBNull.Value;
							
				
					row["STUD_SEAT_NUM"] = entity.StudSeatNum.HasValue ? (object) entity.StudSeatNum  : System.DBNull.Value;
							
				
					row["ENGLISH_PERCENT"] = entity.EnglishPercent.HasValue ? (object) entity.EnglishPercent  : System.DBNull.Value;
							
				
					row["CONVERTED_PERCENT"] = entity.ConvertedPercent.HasValue ? (object) entity.ConvertedPercent  : System.DBNull.Value;
							
				
					row["ED_CDE_QUAL_CAT_ID"] = entity.EdCdeQualCatId.HasValue ? (object) entity.EdCdeQualCatId  : System.DBNull.Value;
							
				
					row["ADMISSION_FLG"] = entity.AdmissionFlg;
							
				
					row["GS_CDE_UNIVERSITIES_ID"] = entity.GsCdeUniversitiesId.HasValue ? (object) entity.GsCdeUniversitiesId  : System.DBNull.Value;
							
				
					row["TOFEL"] = entity.Tofel.HasValue ? (object) entity.Tofel  : System.DBNull.Value;
							
				
					row["CGPA"] = entity.Cgpa.HasValue ? (object) entity.Cgpa  : System.DBNull.Value;
							
				
					row["QUAL_RANK"] = entity.QualRank.HasValue ? (object) entity.QualRank  : System.DBNull.Value;
							
				
					row["ED_CDE_QUAL_PHASE"] = entity.EdCdeQualPhase.HasValue ? (object) entity.EdCdeQualPhase  : System.DBNull.Value;
							
				
					row["ED_CDE_QUAL_STATUS_ID"] = entity.EdCdeQualStatusId.HasValue ? (object) entity.EdCdeQualStatusId  : System.DBNull.Value;
							
				
					row["QUAL_START_DATE"] = entity.QualStartDate.HasValue ? (object) entity.QualStartDate  : System.DBNull.Value;
							
				
					row["GS_CODE_LANGUAGE_ID"] = entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value;
							
				
					row["ADM_APP_REG_HISTORY_ID"] = entity.AdmAppRegHistoryId.HasValue ? (object) entity.AdmAppRegHistoryId  : System.DBNull.Value;
							
				
					row["ADM_CDE_EXAM_GRDNG_ID"] = entity.AdmCdeExamGrdngId.HasValue ? (object) entity.AdmCdeExamGrdngId  : System.DBNull.Value;
							
				
					row["QUAL_DESC_EN"] = entity.QualDescEn;
							
				
					row["QUAL_BRN_DESC_EN"] = entity.QualBrnDescEn;
							
				
					row["GS_CDE_FACULTY_ID"] = entity.GsCdeFacultyId.HasValue ? (object) entity.GsCdeFacultyId  : System.DBNull.Value;
							
				
					row["GS_CDE_SCHOOL_TYPE_ID"] = entity.GsCdeSchoolTypeId.HasValue ? (object) entity.GsCdeSchoolTypeId  : System.DBNull.Value;
							
				
					row["ADM_CDE_QUAL_STATUS_ID"] = entity.AdmCdeQualStatusId.HasValue ? (object) entity.AdmCdeQualStatusId  : System.DBNull.Value;
							
				
					row["NOTES"] = entity.Notes;
							
				
					row["QUAL_RSLT_USR"] = entity.QualRsltUsr;
							
				
					row["QUAL_RSLT_PWD"] = entity.QualRsltPwd;
							
				
					row["ED_CDE_SCHOOL_GRADE_ID"] = entity.EdCdeSchoolGradeId.HasValue ? (object) entity.EdCdeSchoolGradeId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdStudQual entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdStudQual object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudQual object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudQual object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudQual entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, (entity.EdStudId.HasValue ? (object) entity.EdStudId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeQualId", DbType.Decimal, entity.EdCodeQualId );
			database.AddInParameter(commandWrapper, "@SchoolName", DbType.String, entity.SchoolName );
			database.AddInParameter(commandWrapper, "@QualDate", DbType.DateTime, (entity.QualDate.HasValue ? (object) entity.QualDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualTotMark", DbType.Decimal, (entity.QualTotMark.HasValue ? (object) entity.QualTotMark  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalDegree", DbType.Decimal, (entity.TotalDegree.HasValue ? (object) entity.TotalDegree  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalPercent", DbType.Decimal, entity.TotalPercent );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, (entity.AdmApplicantId.HasValue ? (object) entity.AdmApplicantId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeQualBrnId", DbType.Decimal, (entity.EdCdeQualBrnId.HasValue ? (object) entity.EdCdeQualBrnId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCdeSchoolId", DbType.Decimal, (entity.GsCdeSchoolId.HasValue ? (object) entity.GsCdeSchoolId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StudSeatNum", DbType.Decimal, (entity.StudSeatNum.HasValue ? (object) entity.StudSeatNum  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EnglishPercent", DbType.Decimal, (entity.EnglishPercent.HasValue ? (object) entity.EnglishPercent  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ConvertedPercent", DbType.Decimal, (entity.ConvertedPercent.HasValue ? (object) entity.ConvertedPercent  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeQualCatId", DbType.Decimal, (entity.EdCdeQualCatId.HasValue ? (object) entity.EdCdeQualCatId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmissionFlg", DbType.Decimal, entity.AdmissionFlg );
			database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, (entity.GsCdeUniversitiesId.HasValue ? (object) entity.GsCdeUniversitiesId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Tofel", DbType.Decimal, (entity.Tofel.HasValue ? (object) entity.Tofel  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Cgpa", DbType.Decimal, (entity.Cgpa.HasValue ? (object) entity.Cgpa  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualRank", DbType.Int32, (entity.QualRank.HasValue ? (object) entity.QualRank  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, (entity.EdCdeQualPhase.HasValue ? (object) entity.EdCdeQualPhase  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeQualStatusId", DbType.Int32, (entity.EdCdeQualStatusId.HasValue ? (object) entity.EdCdeQualStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualStartDate", DbType.DateTime, (entity.QualStartDate.HasValue ? (object) entity.QualStartDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, (entity.AdmAppRegHistoryId.HasValue ? (object) entity.AdmAppRegHistoryId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, (entity.AdmCdeExamGrdngId.HasValue ? (object) entity.AdmCdeExamGrdngId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualDescEn", DbType.String, entity.QualDescEn );
			database.AddInParameter(commandWrapper, "@QualBrnDescEn", DbType.String, entity.QualBrnDescEn );
			database.AddInParameter(commandWrapper, "@GsCdeFacultyId", DbType.Decimal, (entity.GsCdeFacultyId.HasValue ? (object) entity.GsCdeFacultyId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCdeSchoolTypeId", DbType.Int32, (entity.GsCdeSchoolTypeId.HasValue ? (object) entity.GsCdeSchoolTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeQualStatusId", DbType.Int32, (entity.AdmCdeQualStatusId.HasValue ? (object) entity.AdmCdeQualStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@QualRsltUsr", DbType.String, entity.QualRsltUsr );
			database.AddInParameter(commandWrapper, "@QualRsltPwd", DbType.String, entity.QualRsltPwd );
			database.AddInParameter(commandWrapper, "@EdCdeSchoolGradeId", DbType.Int32, (entity.EdCdeSchoolGradeId.HasValue ? (object) entity.EdCdeSchoolGradeId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edStudQualId = database.GetParameterValue(commandWrapper, "@EdStudQualId");
			entity.EdStudQualId = (System.Decimal)_edStudQualId;
			
			entity.OriginalEdStudQualId = entity.EdStudQualId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudQual object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdStudQual object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudQual entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_QUAL_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdStudQualId", DbType.Decimal, entity.EdStudQualId );
			database.AddInParameter(commandWrapper, "@OriginalEdStudQualId", DbType.Decimal, entity.OriginalEdStudQualId);
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, (entity.EdStudId.HasValue ? (object) entity.EdStudId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeQualId", DbType.Decimal, entity.EdCodeQualId );
			database.AddInParameter(commandWrapper, "@SchoolName", DbType.String, entity.SchoolName );
			database.AddInParameter(commandWrapper, "@QualDate", DbType.DateTime, (entity.QualDate.HasValue ? (object) entity.QualDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualTotMark", DbType.Decimal, (entity.QualTotMark.HasValue ? (object) entity.QualTotMark : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalDegree", DbType.Decimal, (entity.TotalDegree.HasValue ? (object) entity.TotalDegree : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalPercent", DbType.Decimal, entity.TotalPercent );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmApplicantId", DbType.Decimal, (entity.AdmApplicantId.HasValue ? (object) entity.AdmApplicantId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeQualBrnId", DbType.Decimal, (entity.EdCdeQualBrnId.HasValue ? (object) entity.EdCdeQualBrnId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCdeSchoolId", DbType.Decimal, (entity.GsCdeSchoolId.HasValue ? (object) entity.GsCdeSchoolId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StudSeatNum", DbType.Decimal, (entity.StudSeatNum.HasValue ? (object) entity.StudSeatNum : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EnglishPercent", DbType.Decimal, (entity.EnglishPercent.HasValue ? (object) entity.EnglishPercent : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ConvertedPercent", DbType.Decimal, (entity.ConvertedPercent.HasValue ? (object) entity.ConvertedPercent : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeQualCatId", DbType.Decimal, (entity.EdCdeQualCatId.HasValue ? (object) entity.EdCdeQualCatId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmissionFlg", DbType.Decimal, entity.AdmissionFlg );
			database.AddInParameter(commandWrapper, "@GsCdeUniversitiesId", DbType.Decimal, (entity.GsCdeUniversitiesId.HasValue ? (object) entity.GsCdeUniversitiesId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Tofel", DbType.Decimal, (entity.Tofel.HasValue ? (object) entity.Tofel : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Cgpa", DbType.Decimal, (entity.Cgpa.HasValue ? (object) entity.Cgpa : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualRank", DbType.Int32, (entity.QualRank.HasValue ? (object) entity.QualRank : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeQualPhase", DbType.Decimal, (entity.EdCdeQualPhase.HasValue ? (object) entity.EdCdeQualPhase : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeQualStatusId", DbType.Int32, (entity.EdCdeQualStatusId.HasValue ? (object) entity.EdCdeQualStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualStartDate", DbType.DateTime, (entity.QualStartDate.HasValue ? (object) entity.QualStartDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmAppRegHistoryId", DbType.Decimal, (entity.AdmAppRegHistoryId.HasValue ? (object) entity.AdmAppRegHistoryId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, (entity.AdmCdeExamGrdngId.HasValue ? (object) entity.AdmCdeExamGrdngId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualDescEn", DbType.String, entity.QualDescEn );
			database.AddInParameter(commandWrapper, "@QualBrnDescEn", DbType.String, entity.QualBrnDescEn );
			database.AddInParameter(commandWrapper, "@GsCdeFacultyId", DbType.Decimal, (entity.GsCdeFacultyId.HasValue ? (object) entity.GsCdeFacultyId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCdeSchoolTypeId", DbType.Int32, (entity.GsCdeSchoolTypeId.HasValue ? (object) entity.GsCdeSchoolTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeQualStatusId", DbType.Int32, (entity.AdmCdeQualStatusId.HasValue ? (object) entity.AdmCdeQualStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@QualRsltUsr", DbType.String, entity.QualRsltUsr );
			database.AddInParameter(commandWrapper, "@QualRsltPwd", DbType.String, entity.QualRsltPwd );
			database.AddInParameter(commandWrapper, "@EdCdeSchoolGradeId", DbType.Int32, (entity.EdCdeSchoolGradeId.HasValue ? (object) entity.EdCdeSchoolGradeId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdStudQualId = entity.EdStudQualId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
