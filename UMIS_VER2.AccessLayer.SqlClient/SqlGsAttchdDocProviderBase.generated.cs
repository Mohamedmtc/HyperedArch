/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlGsAttchdDocProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="GsAttchdDoc"/> entity.
	///</summary>
	public abstract partial class SqlGsAttchdDocProviderBase : GsAttchdDocProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlGsAttchdDocProviderBase"/> instance.
		/// </summary>
		public SqlGsAttchdDocProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlGsAttchdDocProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlGsAttchdDocProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_gsAttchdDocId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _gsAttchdDocId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@GsAttchdDocId", DbType.Decimal, _gsAttchdDocId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(GsAttchdDoc)
					,_gsAttchdDocId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
		public override TList<GsAttchdDoc> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<GsAttchdDoc>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@GsAttchdDocId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudEnrollChangeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmAppPlacementExamId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmAppHonorId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmAppInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SvMessageId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeeStudDiscId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdExamStudAbsenceId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudCourseChngId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudCourseGrdChngId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudClrncReqId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudViolInvestId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudViolAppealId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AttchdDocPath", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DocNotes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrgDocAttached", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PgThesisStudId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdGraduationAwardId", DbType.Decimal, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("gs_attchd_doc_id ") || clause.Trim().StartsWith("gs_attchd_doc_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsAttchdDocId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_enroll_change_id ") || clause.Trim().StartsWith("ed_stud_enroll_change_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudEnrollChangeId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_cheat_id ") || clause.Trim().StartsWith("ed_stud_cheat_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudCheatId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_app_placement_exam_id ") || clause.Trim().StartsWith("adm_app_placement_exam_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAppPlacementExamId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_app_honor_id ") || clause.Trim().StartsWith("adm_app_honor_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAppHonorId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_app_info_id ") || clause.Trim().StartsWith("adm_app_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmAppInfoId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sv_message_id ") || clause.Trim().StartsWith("sv_message_id="))
				{
					database.SetParameterValue(commandWrapper, "@SvMessageId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_course_reg_id ") || clause.Trim().StartsWith("ed_stud_course_reg_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudCourseRegId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fee_stud_disc_id ") || clause.Trim().StartsWith("fee_stud_disc_id="))
				{
					database.SetParameterValue(commandWrapper, "@FeeStudDiscId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_exam_stud_absence_id ") || clause.Trim().StartsWith("ed_exam_stud_absence_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdExamStudAbsenceId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_course_chng_id ") || clause.Trim().StartsWith("ed_stud_course_chng_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudCourseChngId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_course_grd_chng_id ") || clause.Trim().StartsWith("ed_stud_course_grd_chng_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudCourseGrdChngId", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_clrnc_req_id ") || clause.Trim().StartsWith("ed_stud_clrnc_req_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudClrncReqId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_viol_id ") || clause.Trim().StartsWith("ed_stud_viol_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudViolId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_viol_invest_id ") || clause.Trim().StartsWith("ed_stud_viol_invest_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudViolInvestId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_viol_appeal_id ") || clause.Trim().StartsWith("ed_stud_viol_appeal_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudViolAppealId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("attchd_doc_path ") || clause.Trim().StartsWith("attchd_doc_path="))
				{
					database.SetParameterValue(commandWrapper, "@AttchdDocPath", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("doc_notes ") || clause.Trim().StartsWith("doc_notes="))
				{
					database.SetParameterValue(commandWrapper, "@DocNotes", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("org_doc_attached ") || clause.Trim().StartsWith("org_doc_attached="))
				{
					database.SetParameterValue(commandWrapper, "@OrgDocAttached", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pg_thesis_stud_id ") || clause.Trim().StartsWith("pg_thesis_stud_id="))
				{
					database.SetParameterValue(commandWrapper, "@PgThesisStudId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_graduation_award_id ") || clause.Trim().StartsWith("ed_graduation_award_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdGraduationAwardId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
		public override TList<GsAttchdDoc> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_Find_Dynamic", typeof(GsAttchdDocColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
		public override TList<GsAttchdDoc> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAdmAppHonorId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ADM_APP_HONOR key.
		///		FK_GS_ATTCHD_DOC_ADM_APP_HONOR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAppHonorId">XX</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByAdmAppHonorId(TransactionManager transactionManager, System.Decimal? _admAppHonorId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByAdmAppHonorId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAppHonorId", DbType.Decimal, _admAppHonorId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAppHonorId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAppHonorId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmAppInfoId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ADM_APP_INFO key.
		///		FK_GS_ATTCHD_DOC_ADM_APP_INFO Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAppInfoId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByAdmAppInfoId(TransactionManager transactionManager, System.Decimal? _admAppInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByAdmAppInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAppInfoId", DbType.Decimal, _admAppInfoId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAppInfoId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAppInfoId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmAppPlacementExamId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ADM_APP_PLACEMENT_EXAM key.
		///		FK_GS_ATTCHD_DOC_ADM_APP_PLACEMENT_EXAM Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admAppPlacementExamId">XX</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByAdmAppPlacementExamId(TransactionManager transactionManager, System.Decimal? _admAppPlacementExamId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByAdmAppPlacementExamId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmAppPlacementExamId", DbType.Decimal, _admAppPlacementExamId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmAppPlacementExamId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmAppPlacementExamId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdExamStudAbsenceId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_EXAM_STUD_ABSENCE key.
		///		FK_GS_ATTCHD_DOC_ED_EXAM_STUD_ABSENCE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edExamStudAbsenceId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdExamStudAbsenceId(TransactionManager transactionManager, System.Decimal? _edExamStudAbsenceId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdExamStudAbsenceId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdExamStudAbsenceId", DbType.Decimal, _edExamStudAbsenceId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdExamStudAbsenceId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdExamStudAbsenceId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdGraduationAwardId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_GRADUATION_AWARD key.
		///		FK_GS_ATTCHD_DOC_ED_GRADUATION_AWARD Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edGraduationAwardId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdGraduationAwardId(TransactionManager transactionManager, System.Decimal? _edGraduationAwardId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdGraduationAwardId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdGraduationAwardId", DbType.Decimal, _edGraduationAwardId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdGraduationAwardId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdGraduationAwardId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudCheatId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_CHEAT key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_CHEAT Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudCheatId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudCheatId(TransactionManager transactionManager, System.Decimal? _edStudCheatId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudCheatId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, _edStudCheatId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudCheatId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudCheatId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudClrncReqId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_CLRNC_REQ key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_CLRNC_REQ Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudClrncReqId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudClrncReqId(TransactionManager transactionManager, System.Decimal? _edStudClrncReqId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudClrncReqId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudClrncReqId", DbType.Decimal, _edStudClrncReqId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudClrncReqId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudClrncReqId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudCourseChngId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_COURSE_CHNG key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_COURSE_CHNG Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudCourseChngId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudCourseChngId(TransactionManager transactionManager, System.Decimal? _edStudCourseChngId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudCourseChngId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudCourseChngId", DbType.Decimal, _edStudCourseChngId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudCourseChngId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudCourseChngId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudCourseGrdChngId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_COURSE_GRD_CHNG key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_COURSE_GRD_CHNG Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudCourseGrdChngId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudCourseGrdChngId(TransactionManager transactionManager, System.Decimal? _edStudCourseGrdChngId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudCourseGrdChngId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudCourseGrdChngId", DbType.Decimal, _edStudCourseGrdChngId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudCourseGrdChngId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudCourseGrdChngId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudCourseRegId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_COURSE_REG key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_COURSE_REG Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudCourseRegId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudCourseRegId(TransactionManager transactionManager, System.Decimal? _edStudCourseRegId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudCourseRegId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, _edStudCourseRegId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudCourseRegId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudCourseRegId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudEnrollChangeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_ENROLL_CHANGE key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_ENROLL_CHANGE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudEnrollChangeId">مسلسل تغيير حالة قيد طالب</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudEnrollChangeId(TransactionManager transactionManager, System.Decimal? _edStudEnrollChangeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudEnrollChangeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudEnrollChangeId", DbType.Decimal, _edStudEnrollChangeId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudEnrollChangeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudEnrollChangeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudViolId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_VIOL key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_VIOL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudViolId">المخالفة</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudViolId(TransactionManager transactionManager, System.Decimal? _edStudViolId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudViolId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, _edStudViolId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudViolId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudViolId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudViolAppealId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_VIOL_APPEAL key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_VIOL_APPEAL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudViolAppealId">التظلم</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudViolAppealId(TransactionManager transactionManager, System.Decimal? _edStudViolAppealId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudViolAppealId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudViolAppealId", DbType.Decimal, _edStudViolAppealId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudViolAppealId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudViolAppealId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudViolInvestId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_ED_STUD_VIOL1 key.
		///		FK_GS_ATTCHD_DOC_ED_STUD_VIOL1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudViolInvestId">مجلس التأديب</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByEdStudViolInvestId(TransactionManager transactionManager, System.Decimal? _edStudViolInvestId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByEdStudViolInvestId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudViolInvestId", DbType.Decimal, _edStudViolInvestId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudViolInvestId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudViolInvestId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByFeeStudDiscId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_FEE_STUD_DISC key.
		///		FK_GS_ATTCHD_DOC_FEE_STUD_DISC Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_feeStudDiscId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByFeeStudDiscId(TransactionManager transactionManager, System.Decimal? _feeStudDiscId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByFeeStudDiscId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@FeeStudDiscId", DbType.Decimal, _feeStudDiscId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByFeeStudDiscId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByFeeStudDiscId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByPgThesisStudId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_PG_THESIS_STUD key.
		///		FK_GS_ATTCHD_DOC_PG_THESIS_STUD Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_pgThesisStudId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetByPgThesisStudId(TransactionManager transactionManager, System.Decimal? _pgThesisStudId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByPgThesisStudId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PgThesisStudId", DbType.Decimal, _pgThesisStudId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPgThesisStudId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPgThesisStudId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySvMessageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_GS_ATTCHD_DOC_SV_MESSAGE key.
		///		FK_GS_ATTCHD_DOC_SV_MESSAGE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_svMessageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.GsAttchdDoc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<GsAttchdDoc> GetBySvMessageId(TransactionManager transactionManager, System.Decimal? _svMessageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetBySvMessageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SvMessageId", DbType.Decimal, _svMessageId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> rows = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySvMessageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySvMessageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByGsAttchdDocId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_GS_ATTCHD_DOC index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsAttchdDocId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.GsAttchdDoc"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.GsAttchdDoc GetByGsAttchdDocId(TransactionManager transactionManager, System.Decimal _gsAttchdDocId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_GetByGsAttchdDocId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsAttchdDocId", DbType.Decimal, _gsAttchdDocId);
			
			IDataReader reader = null;
			TList<GsAttchdDoc> tmp = new TList<GsAttchdDoc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsAttchdDocId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsAttchdDocId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.GsAttchdDoc object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.GsAttchdDoc> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "GS_ATTCHD_DOC";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("GS_ATTCHD_DOC_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ED_STUD_ENROLL_CHANGE_ID", typeof(System.Decimal));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("ED_STUD_CHEAT_ID", typeof(System.Decimal));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("ADM_APP_PLACEMENT_EXAM_ID", typeof(System.Decimal));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("ADM_APP_HONOR_ID", typeof(System.Decimal));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("ADM_APP_INFO_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("SV_MESSAGE_ID", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("ED_STUD_COURSE_REG_ID", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("FEE_STUD_DISC_ID", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("ED_EXAM_STUD_ABSENCE_ID", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("ED_STUD_COURSE_CHNG_ID", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ED_STUD_COURSE_GRD_CHNG_ID", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("ED_STUD_CLRNC_REQ_ID", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ED_STUD_VIOL_ID", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("ED_STUD_VIOL_INVEST_ID", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("ED_STUD_VIOL_APPEAL_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("ATTCHD_DOC_PATH", typeof(System.String));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("DOC_NOTES", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ORG_DOC_ATTACHED", typeof(System.Boolean));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("PG_THESIS_STUD_ID", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("ED_GRADUATION_AWARD_ID", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("GS_ATTCHD_DOC_ID", "GS_ATTCHD_DOC_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_ENROLL_CHANGE_ID", "ED_STUD_ENROLL_CHANGE_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_CHEAT_ID", "ED_STUD_CHEAT_ID");
			bulkCopy.ColumnMappings.Add("ADM_APP_PLACEMENT_EXAM_ID", "ADM_APP_PLACEMENT_EXAM_ID");
			bulkCopy.ColumnMappings.Add("ADM_APP_HONOR_ID", "ADM_APP_HONOR_ID");
			bulkCopy.ColumnMappings.Add("ADM_APP_INFO_ID", "ADM_APP_INFO_ID");
			bulkCopy.ColumnMappings.Add("SV_MESSAGE_ID", "SV_MESSAGE_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_COURSE_REG_ID", "ED_STUD_COURSE_REG_ID");
			bulkCopy.ColumnMappings.Add("FEE_STUD_DISC_ID", "FEE_STUD_DISC_ID");
			bulkCopy.ColumnMappings.Add("ED_EXAM_STUD_ABSENCE_ID", "ED_EXAM_STUD_ABSENCE_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_COURSE_CHNG_ID", "ED_STUD_COURSE_CHNG_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_COURSE_GRD_CHNG_ID", "ED_STUD_COURSE_GRD_CHNG_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_CLRNC_REQ_ID", "ED_STUD_CLRNC_REQ_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_VIOL_ID", "ED_STUD_VIOL_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_VIOL_INVEST_ID", "ED_STUD_VIOL_INVEST_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_VIOL_APPEAL_ID", "ED_STUD_VIOL_APPEAL_ID");
			bulkCopy.ColumnMappings.Add("ATTCHD_DOC_PATH", "ATTCHD_DOC_PATH");
			bulkCopy.ColumnMappings.Add("DOC_NOTES", "DOC_NOTES");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			bulkCopy.ColumnMappings.Add("ORG_DOC_ATTACHED", "ORG_DOC_ATTACHED");
			bulkCopy.ColumnMappings.Add("PG_THESIS_STUD_ID", "PG_THESIS_STUD_ID");
			bulkCopy.ColumnMappings.Add("ED_GRADUATION_AWARD_ID", "ED_GRADUATION_AWARD_ID");
			
			foreach(UMIS_VER2.BusinessLyer.GsAttchdDoc entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["GS_ATTCHD_DOC_ID"] = entity.GsAttchdDocId;
							
				
					row["ED_STUD_ENROLL_CHANGE_ID"] = entity.EdStudEnrollChangeId.HasValue ? (object) entity.EdStudEnrollChangeId  : System.DBNull.Value;
							
				
					row["ED_STUD_CHEAT_ID"] = entity.EdStudCheatId.HasValue ? (object) entity.EdStudCheatId  : System.DBNull.Value;
							
				
					row["ADM_APP_PLACEMENT_EXAM_ID"] = entity.AdmAppPlacementExamId.HasValue ? (object) entity.AdmAppPlacementExamId  : System.DBNull.Value;
							
				
					row["ADM_APP_HONOR_ID"] = entity.AdmAppHonorId.HasValue ? (object) entity.AdmAppHonorId  : System.DBNull.Value;
							
				
					row["ADM_APP_INFO_ID"] = entity.AdmAppInfoId.HasValue ? (object) entity.AdmAppInfoId  : System.DBNull.Value;
							
				
					row["SV_MESSAGE_ID"] = entity.SvMessageId.HasValue ? (object) entity.SvMessageId  : System.DBNull.Value;
							
				
					row["ED_STUD_COURSE_REG_ID"] = entity.EdStudCourseRegId.HasValue ? (object) entity.EdStudCourseRegId  : System.DBNull.Value;
							
				
					row["FEE_STUD_DISC_ID"] = entity.FeeStudDiscId.HasValue ? (object) entity.FeeStudDiscId  : System.DBNull.Value;
							
				
					row["ED_EXAM_STUD_ABSENCE_ID"] = entity.EdExamStudAbsenceId.HasValue ? (object) entity.EdExamStudAbsenceId  : System.DBNull.Value;
							
				
					row["ED_STUD_COURSE_CHNG_ID"] = entity.EdStudCourseChngId.HasValue ? (object) entity.EdStudCourseChngId  : System.DBNull.Value;
							
				
					row["ED_STUD_COURSE_GRD_CHNG_ID"] = entity.EdStudCourseGrdChngId.HasValue ? (object) entity.EdStudCourseGrdChngId  : System.DBNull.Value;
							
				
					row["ED_STUD_CLRNC_REQ_ID"] = entity.EdStudClrncReqId.HasValue ? (object) entity.EdStudClrncReqId  : System.DBNull.Value;
							
				
					row["ED_STUD_VIOL_ID"] = entity.EdStudViolId.HasValue ? (object) entity.EdStudViolId  : System.DBNull.Value;
							
				
					row["ED_STUD_VIOL_INVEST_ID"] = entity.EdStudViolInvestId.HasValue ? (object) entity.EdStudViolInvestId  : System.DBNull.Value;
							
				
					row["ED_STUD_VIOL_APPEAL_ID"] = entity.EdStudViolAppealId.HasValue ? (object) entity.EdStudViolAppealId  : System.DBNull.Value;
							
				
					row["ATTCHD_DOC_PATH"] = entity.AttchdDocPath;
							
				
					row["DOC_NOTES"] = entity.DocNotes;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
					row["ORG_DOC_ATTACHED"] = entity.OrgDocAttached.HasValue ? (object) entity.OrgDocAttached  : System.DBNull.Value;
							
				
					row["PG_THESIS_STUD_ID"] = entity.PgThesisStudId.HasValue ? (object) entity.PgThesisStudId  : System.DBNull.Value;
							
				
					row["ED_GRADUATION_AWARD_ID"] = entity.EdGraduationAwardId.HasValue ? (object) entity.EdGraduationAwardId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.GsAttchdDoc entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.GsAttchdDoc object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.GsAttchdDoc object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.GsAttchdDoc object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.GsAttchdDoc entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@GsAttchdDocId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@EdStudEnrollChangeId", DbType.Decimal, (entity.EdStudEnrollChangeId.HasValue ? (object) entity.EdStudEnrollChangeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, (entity.EdStudCheatId.HasValue ? (object) entity.EdStudCheatId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmAppPlacementExamId", DbType.Decimal, (entity.AdmAppPlacementExamId.HasValue ? (object) entity.AdmAppPlacementExamId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmAppHonorId", DbType.Decimal, (entity.AdmAppHonorId.HasValue ? (object) entity.AdmAppHonorId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmAppInfoId", DbType.Decimal, (entity.AdmAppInfoId.HasValue ? (object) entity.AdmAppInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SvMessageId", DbType.Decimal, (entity.SvMessageId.HasValue ? (object) entity.SvMessageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, (entity.EdStudCourseRegId.HasValue ? (object) entity.EdStudCourseRegId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FeeStudDiscId", DbType.Decimal, (entity.FeeStudDiscId.HasValue ? (object) entity.FeeStudDiscId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdExamStudAbsenceId", DbType.Decimal, (entity.EdExamStudAbsenceId.HasValue ? (object) entity.EdExamStudAbsenceId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudCourseChngId", DbType.Decimal, (entity.EdStudCourseChngId.HasValue ? (object) entity.EdStudCourseChngId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudCourseGrdChngId", DbType.Decimal, (entity.EdStudCourseGrdChngId.HasValue ? (object) entity.EdStudCourseGrdChngId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudClrncReqId", DbType.Decimal, (entity.EdStudClrncReqId.HasValue ? (object) entity.EdStudClrncReqId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, (entity.EdStudViolId.HasValue ? (object) entity.EdStudViolId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudViolInvestId", DbType.Decimal, (entity.EdStudViolInvestId.HasValue ? (object) entity.EdStudViolInvestId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudViolAppealId", DbType.Decimal, (entity.EdStudViolAppealId.HasValue ? (object) entity.EdStudViolAppealId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AttchdDocPath", DbType.String, entity.AttchdDocPath );
			database.AddInParameter(commandWrapper, "@DocNotes", DbType.String, entity.DocNotes );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OrgDocAttached", DbType.Boolean, (entity.OrgDocAttached.HasValue ? (object) entity.OrgDocAttached  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PgThesisStudId", DbType.Decimal, (entity.PgThesisStudId.HasValue ? (object) entity.PgThesisStudId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdGraduationAwardId", DbType.Decimal, (entity.EdGraduationAwardId.HasValue ? (object) entity.EdGraduationAwardId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _gsAttchdDocId = database.GetParameterValue(commandWrapper, "@GsAttchdDocId");
			entity.GsAttchdDocId = (System.Decimal)_gsAttchdDocId;
			
			entity.OriginalGsAttchdDocId = entity.GsAttchdDocId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.GsAttchdDoc object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.GsAttchdDoc object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.GsAttchdDoc entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.GS_ATTCHD_DOC_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@GsAttchdDocId", DbType.Decimal, entity.GsAttchdDocId );
			database.AddInParameter(commandWrapper, "@OriginalGsAttchdDocId", DbType.Decimal, entity.OriginalGsAttchdDocId);
			database.AddInParameter(commandWrapper, "@EdStudEnrollChangeId", DbType.Decimal, (entity.EdStudEnrollChangeId.HasValue ? (object) entity.EdStudEnrollChangeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, (entity.EdStudCheatId.HasValue ? (object) entity.EdStudCheatId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmAppPlacementExamId", DbType.Decimal, (entity.AdmAppPlacementExamId.HasValue ? (object) entity.AdmAppPlacementExamId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmAppHonorId", DbType.Decimal, (entity.AdmAppHonorId.HasValue ? (object) entity.AdmAppHonorId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmAppInfoId", DbType.Decimal, (entity.AdmAppInfoId.HasValue ? (object) entity.AdmAppInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SvMessageId", DbType.Decimal, (entity.SvMessageId.HasValue ? (object) entity.SvMessageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, (entity.EdStudCourseRegId.HasValue ? (object) entity.EdStudCourseRegId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FeeStudDiscId", DbType.Decimal, (entity.FeeStudDiscId.HasValue ? (object) entity.FeeStudDiscId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdExamStudAbsenceId", DbType.Decimal, (entity.EdExamStudAbsenceId.HasValue ? (object) entity.EdExamStudAbsenceId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudCourseChngId", DbType.Decimal, (entity.EdStudCourseChngId.HasValue ? (object) entity.EdStudCourseChngId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudCourseGrdChngId", DbType.Decimal, (entity.EdStudCourseGrdChngId.HasValue ? (object) entity.EdStudCourseGrdChngId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudClrncReqId", DbType.Decimal, (entity.EdStudClrncReqId.HasValue ? (object) entity.EdStudClrncReqId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, (entity.EdStudViolId.HasValue ? (object) entity.EdStudViolId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudViolInvestId", DbType.Decimal, (entity.EdStudViolInvestId.HasValue ? (object) entity.EdStudViolInvestId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudViolAppealId", DbType.Decimal, (entity.EdStudViolAppealId.HasValue ? (object) entity.EdStudViolAppealId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AttchdDocPath", DbType.String, entity.AttchdDocPath );
			database.AddInParameter(commandWrapper, "@DocNotes", DbType.String, entity.DocNotes );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OrgDocAttached", DbType.Boolean, (entity.OrgDocAttached.HasValue ? (object) entity.OrgDocAttached : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PgThesisStudId", DbType.Decimal, (entity.PgThesisStudId.HasValue ? (object) entity.PgThesisStudId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdGraduationAwardId", DbType.Decimal, (entity.EdGraduationAwardId.HasValue ? (object) entity.EdGraduationAwardId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalGsAttchdDocId = entity.GsAttchdDocId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
