/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlSaStfMemberProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="SaStfMember"/> entity.
	///</summary>
	public abstract partial class SqlSaStfMemberProviderBase : SaStfMemberProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlSaStfMemberProviderBase"/> instance.
		/// </summary>
		public SqlSaStfMemberProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlSaStfMemberProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlSaStfMemberProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_saStfMemberId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _saStfMemberId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, _saStfMemberId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(SaStfMember)
					,_saStfMemberId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
		public override TList<SaStfMember> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<SaStfMember>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfFullNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfFullNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsNodeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SaCodeJobStatusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfClFullNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfClNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfLnameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfClLnameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfFnameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfLnameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfIsAzhary", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FileNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfStatusNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfNationalIdNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfDob", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfRegNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfRegDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfMname", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfPermAdd", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfCurrAdd", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfEmpDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryInfoId2", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryNodeId2", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryNodeId3", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsContactMethodHId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StfPhoto", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BasicSalary", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PgThesisGeneralSpecId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PgThesisDetailedSpecId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DelFlag", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetirmentAge", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OldStfMemberId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmailPassword", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TelNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MobNum", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EMail", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdminJobFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SaCdeAdminJobId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdminJobLoad", DbType.Decimal, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("sa_stf_member_id ") || clause.Trim().StartsWith("sa_stf_member_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaStfMemberId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_code ") || clause.Trim().StartsWith("stf_code="))
				{
					database.SetParameterValue(commandWrapper, "@StfCode", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_full_name_ar ") || clause.Trim().StartsWith("stf_full_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@StfFullNameAr", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_full_name_en ") || clause.Trim().StartsWith("stf_full_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@StfFullNameEn", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_node_id ") || clause.Trim().StartsWith("as_node_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsNodeId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_faculty_info_id ") || clause.Trim().StartsWith("as_faculty_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsFacultyInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sa_code_job_status_id ") || clause.Trim().StartsWith("sa_code_job_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaCodeJobStatusId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sa_code_sc_deg_id ") || clause.Trim().StartsWith("sa_code_sc_deg_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaCodeScDegId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_name_ar ") || clause.Trim().StartsWith("stf_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@StfNameAr", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_cl_full_name_ar ") || clause.Trim().StartsWith("stf_cl_full_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@StfClFullNameAr", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_cl_name_ar ") || clause.Trim().StartsWith("stf_cl_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@StfClNameAr", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_lname_ar ") || clause.Trim().StartsWith("stf_lname_ar="))
				{
					database.SetParameterValue(commandWrapper, "@StfLnameAr", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_cl_lname_ar ") || clause.Trim().StartsWith("stf_cl_lname_ar="))
				{
					database.SetParameterValue(commandWrapper, "@StfClLnameAr", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_fname_en ") || clause.Trim().StartsWith("stf_fname_en="))
				{
					database.SetParameterValue(commandWrapper, "@StfFnameEn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_lname_en ") || clause.Trim().StartsWith("stf_lname_en="))
				{
					database.SetParameterValue(commandWrapper, "@StfLnameEn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_is_azhary ") || clause.Trim().StartsWith("stf_is_azhary="))
				{
					database.SetParameterValue(commandWrapper, "@StfIsAzhary", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("file_num ") || clause.Trim().StartsWith("file_num="))
				{
					database.SetParameterValue(commandWrapper, "@FileNum", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_status_num ") || clause.Trim().StartsWith("stf_status_num="))
				{
					database.SetParameterValue(commandWrapper, "@StfStatusNum", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_national_id_num ") || clause.Trim().StartsWith("stf_national_id_num="))
				{
					database.SetParameterValue(commandWrapper, "@StfNationalIdNum", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_dob ") || clause.Trim().StartsWith("stf_dob="))
				{
					database.SetParameterValue(commandWrapper, "@StfDob", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_reg_num ") || clause.Trim().StartsWith("stf_reg_num="))
				{
					database.SetParameterValue(commandWrapper, "@StfRegNum", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_reg_date ") || clause.Trim().StartsWith("stf_reg_date="))
				{
					database.SetParameterValue(commandWrapper, "@StfRegDate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_mname ") || clause.Trim().StartsWith("stf_mname="))
				{
					database.SetParameterValue(commandWrapper, "@StfMname", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_perm_add ") || clause.Trim().StartsWith("stf_perm_add="))
				{
					database.SetParameterValue(commandWrapper, "@StfPermAdd", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_curr_add ") || clause.Trim().StartsWith("stf_curr_add="))
				{
					database.SetParameterValue(commandWrapper, "@StfCurrAdd", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_emp_date ") || clause.Trim().StartsWith("stf_emp_date="))
				{
					database.SetParameterValue(commandWrapper, "@StfEmpDate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_gender_id ") || clause.Trim().StartsWith("gs_code_gender_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeGenderId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_religion_id ") || clause.Trim().StartsWith("gs_code_religion_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeReligionId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_marital_state_id ") || clause.Trim().StartsWith("gs_code_marital_state_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeMaritalStateId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_info_id ") || clause.Trim().StartsWith("gs_country_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_info_id2 ") || clause.Trim().StartsWith("gs_country_info_id2="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryInfoId2", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_node_id ") || clause.Trim().StartsWith("gs_country_node_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryNodeId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_node_id2 ") || clause.Trim().StartsWith("gs_country_node_id2="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryNodeId2", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_node_id3 ") || clause.Trim().StartsWith("gs_country_node_id3="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryNodeId3", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_contact_method_h_id ") || clause.Trim().StartsWith("gs_contact_method_h_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsContactMethodHId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stf_photo ") || clause.Trim().StartsWith("stf_photo="))
				{
					database.SetParameterValue(commandWrapper, "@StfPhoto", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("basic_salary ") || clause.Trim().StartsWith("basic_salary="))
				{
					database.SetParameterValue(commandWrapper, "@BasicSalary", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pg_thesis_general_spec_id ") || clause.Trim().StartsWith("pg_thesis_general_spec_id="))
				{
					database.SetParameterValue(commandWrapper, "@PgThesisGeneralSpecId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pg_thesis_detailed_spec_id ") || clause.Trim().StartsWith("pg_thesis_detailed_spec_id="))
				{
					database.SetParameterValue(commandWrapper, "@PgThesisDetailedSpecId", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("del_flag ") || clause.Trim().StartsWith("del_flag="))
				{
					database.SetParameterValue(commandWrapper, "@DelFlag", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retirment_age ") || clause.Trim().StartsWith("retirment_age="))
				{
					database.SetParameterValue(commandWrapper, "@RetirmentAge", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("old_stf_member_id ") || clause.Trim().StartsWith("old_stf_member_id="))
				{
					database.SetParameterValue(commandWrapper, "@OldStfMemberId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("email_password ") || clause.Trim().StartsWith("email_password="))
				{
					database.SetParameterValue(commandWrapper, "@EmailPassword", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tel_num ") || clause.Trim().StartsWith("tel_num="))
				{
					database.SetParameterValue(commandWrapper, "@TelNum", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mob_num ") || clause.Trim().StartsWith("mob_num="))
				{
					database.SetParameterValue(commandWrapper, "@MobNum", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("e_mail ") || clause.Trim().StartsWith("e_mail="))
				{
					database.SetParameterValue(commandWrapper, "@EMail", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_ident_type_id ") || clause.Trim().StartsWith("gs_code_ident_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeIdentTypeId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("admin_job_flg ") || clause.Trim().StartsWith("admin_job_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AdminJobFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sa_cde_admin_job_id ") || clause.Trim().StartsWith("sa_cde_admin_job_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaCdeAdminJobId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("admin_job_load ") || clause.Trim().StartsWith("admin_job_load="))
				{
					database.SetParameterValue(commandWrapper, "@AdminJobLoad", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<SaStfMember> rows = new TList<SaStfMember>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
		public override TList<SaStfMember> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_Find_Dynamic", typeof(SaStfMemberColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<SaStfMember> rows = new TList<SaStfMember>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<SaStfMember> rows = new TList<SaStfMember>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
		public override TList<SaStfMember> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<SaStfMember> rows = new TList<SaStfMember>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByGsContactMethodHId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_AUTO_0029 key.
		///		FK_AUTO_0029 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsContactMethodHId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByGsContactMethodHId(TransactionManager transactionManager, System.Decimal? _gsContactMethodHId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByGsContactMethodHId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsContactMethodHId", DbType.Decimal, _gsContactMethodHId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsContactMethodHId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsContactMethodHId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByPgThesisGeneralSpecId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_AUTO_002b key.
		///		FK_AUTO_002b Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_pgThesisGeneralSpecId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByPgThesisGeneralSpecId(TransactionManager transactionManager, System.Decimal? _pgThesisGeneralSpecId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByPgThesisGeneralSpecId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PgThesisGeneralSpecId", DbType.Decimal, _pgThesisGeneralSpecId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPgThesisGeneralSpecId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPgThesisGeneralSpecId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsFacultyInfoId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_AS_FACULTY_INFO key.
		///		FK_SA_STF_MEMBER_AS_FACULTY_INFO Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByAsFacultyInfoId(TransactionManager transactionManager, System.Decimal? _asFacultyInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByAsFacultyInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsNodeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_ENTITY_MAIN key.
		///		FK_SA_STF_MEMBER_ENTITY_MAIN Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asNodeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByAsNodeId(TransactionManager transactionManager, System.Decimal? _asNodeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByAsNodeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsNodeId", DbType.Decimal, _asNodeId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsNodeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsNodeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeMaritalStateId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_GS_CDE_MARITAL_STATUS key.
		///		FK_SA_STF_MEMBER_GS_CDE_MARITAL_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeMaritalStateId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByGsCodeMaritalStateId(TransactionManager transactionManager, System.Decimal? _gsCodeMaritalStateId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByGsCodeMaritalStateId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, _gsCodeMaritalStateId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeMaritalStateId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeMaritalStateId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeGenderId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_GS_CODE_GENDER key.
		///		FK_SA_STF_MEMBER_GS_CODE_GENDER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeGenderId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByGsCodeGenderId(TransactionManager transactionManager, System.Decimal? _gsCodeGenderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByGsCodeGenderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, _gsCodeGenderId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeIdentTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_GS_CODE_IDENT_TYPE key.
		///		FK_SA_STF_MEMBER_GS_CODE_IDENT_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeIdentTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByGsCodeIdentTypeId(TransactionManager transactionManager, System.Decimal? _gsCodeIdentTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByGsCodeIdentTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, _gsCodeIdentTypeId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeIdentTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeIdentTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeReligionId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_GS_CODE_RELIGION key.
		///		FK_SA_STF_MEMBER_GS_CODE_RELIGION Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeReligionId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByGsCodeReligionId(TransactionManager transactionManager, System.Decimal? _gsCodeReligionId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByGsCodeReligionId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, _gsCodeReligionId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeReligionId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeReligionId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCountryNodeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_GS_COUNTRY_NODE key.
		///		FK_SA_STF_MEMBER_GS_COUNTRY_NODE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryNodeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByGsCountryNodeId(TransactionManager transactionManager, System.Decimal? _gsCountryNodeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByGsCountryNodeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, _gsCountryNodeId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryNodeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCountryInfoId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_GS_COUNTRY_NODE1 key.
		///		FK_SA_STF_MEMBER_GS_COUNTRY_NODE1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryInfoId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByGsCountryInfoId(TransactionManager transactionManager, System.Decimal? _gsCountryInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByGsCountryInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, _gsCountryInfoId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByPgThesisDetailedSpecId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_PG_THESIS_DETAILED_SPEC key.
		///		FK_SA_STF_MEMBER_PG_THESIS_DETAILED_SPEC Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_pgThesisDetailedSpecId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetByPgThesisDetailedSpecId(TransactionManager transactionManager, System.Decimal? _pgThesisDetailedSpecId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByPgThesisDetailedSpecId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@PgThesisDetailedSpecId", DbType.Decimal, _pgThesisDetailedSpecId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByPgThesisDetailedSpecId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByPgThesisDetailedSpecId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySaCdeAdminJobId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_SA_CDE_ADMIN_JOB key.
		///		FK_SA_STF_MEMBER_SA_CDE_ADMIN_JOB Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saCdeAdminJobId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetBySaCdeAdminJobId(TransactionManager transactionManager, System.Int32? _saCdeAdminJobId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetBySaCdeAdminJobId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaCdeAdminJobId", DbType.Int32, _saCdeAdminJobId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaCdeAdminJobId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaCdeAdminJobId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySaCodeJobStatusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_SA_CODE_JOB_STATUS key.
		///		FK_SA_STF_MEMBER_SA_CODE_JOB_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saCodeJobStatusId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetBySaCodeJobStatusId(TransactionManager transactionManager, System.Decimal? _saCodeJobStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetBySaCodeJobStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaCodeJobStatusId", DbType.Decimal, _saCodeJobStatusId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaCodeJobStatusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaCodeJobStatusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySaCodeScDegId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SA_STF_MEMBER_SA_CODE_SC_DEG key.
		///		FK_SA_STF_MEMBER_SA_CODE_SC_DEG Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saCodeScDegId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.SaStfMember objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SaStfMember> GetBySaCodeScDegId(TransactionManager transactionManager, System.Decimal? _saCodeScDegId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetBySaCodeScDegId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, _saCodeScDegId);
			
			IDataReader reader = null;
			TList<SaStfMember> rows = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaCodeScDegId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaCodeScDegId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetBySaStfMemberId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_SA_STF_MEMBER index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saStfMemberId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.SaStfMember"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.SaStfMember GetBySaStfMemberId(TransactionManager transactionManager, System.Decimal _saStfMemberId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetBySaStfMemberId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, _saStfMemberId);
			
			IDataReader reader = null;
			TList<SaStfMember> tmp = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaStfMemberId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaStfMemberId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByStfCode
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_SA_STF_MEMBER index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_stfCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.SaStfMember"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.SaStfMember GetByStfCode(TransactionManager transactionManager, System.String _stfCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_GetByStfCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@StfCode", DbType.String, _stfCode);
			
			IDataReader reader = null;
			TList<SaStfMember> tmp = new TList<SaStfMember>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByStfCode", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByStfCode", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.SaStfMember object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.SaStfMember> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "SA_STF_MEMBER";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("SA_STF_MEMBER_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("STF_CODE", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("STF_FULL_NAME_AR", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("STF_FULL_NAME_EN", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("AS_NODE_ID", typeof(System.Decimal));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("AS_FACULTY_INFO_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("SA_CODE_JOB_STATUS_ID", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("SA_CODE_SC_DEG_ID", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("STF_NAME_AR", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("STF_CL_FULL_NAME_AR", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("STF_CL_NAME_AR", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("STF_LNAME_AR", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("STF_CL_LNAME_AR", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("STF_FNAME_EN", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("STF_LNAME_EN", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("STF_IS_AZHARY", typeof(System.Decimal));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("FILE_NUM", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("STF_STATUS_NUM", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("STF_NATIONAL_ID_NUM", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("STF_DOB", typeof(System.DateTime));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("STF_REG_NUM", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("STF_REG_DATE", typeof(System.DateTime));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("STF_MNAME", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("STF_PERM_ADD", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("STF_CURR_ADD", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("STF_EMP_DATE", typeof(System.DateTime));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("GS_CODE_GENDER_ID", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("GS_CODE_RELIGION_ID", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("GS_CODE_MARITAL_STATE_ID", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("GS_COUNTRY_INFO_ID", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("GS_COUNTRY_INFO_ID2", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("GS_COUNTRY_NODE_ID", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("GS_COUNTRY_NODE_ID2", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("GS_COUNTRY_NODE_ID3", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("GS_CONTACT_METHOD_H_ID", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("STF_PHOTO", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("BASIC_SALARY", typeof(System.Decimal));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("PG_THESIS_GENERAL_SPEC_ID", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("PG_THESIS_DETAILED_SPEC_ID", typeof(System.Decimal));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("DEL_FLAG", typeof(System.Decimal));
			col39.AllowDBNull = false;		
			DataColumn col40 = dataTable.Columns.Add("RETIRMENT_AGE", typeof(System.Decimal));
			col40.AllowDBNull = false;		
			DataColumn col41 = dataTable.Columns.Add("OLD_STF_MEMBER_ID", typeof(System.Decimal));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("EMAIL_PASSWORD", typeof(System.String));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("TEL_NUM", typeof(System.String));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("MOB_NUM", typeof(System.String));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("E_MAIL", typeof(System.String));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("GS_CODE_IDENT_TYPE_ID", typeof(System.Decimal));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("ADMIN_JOB_FLG", typeof(System.Boolean));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("SA_CDE_ADMIN_JOB_ID", typeof(System.Int32));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("ADMIN_JOB_LOAD", typeof(System.Decimal));
			col49.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("SA_STF_MEMBER_ID", "SA_STF_MEMBER_ID");
			bulkCopy.ColumnMappings.Add("STF_CODE", "STF_CODE");
			bulkCopy.ColumnMappings.Add("STF_FULL_NAME_AR", "STF_FULL_NAME_AR");
			bulkCopy.ColumnMappings.Add("STF_FULL_NAME_EN", "STF_FULL_NAME_EN");
			bulkCopy.ColumnMappings.Add("AS_NODE_ID", "AS_NODE_ID");
			bulkCopy.ColumnMappings.Add("AS_FACULTY_INFO_ID", "AS_FACULTY_INFO_ID");
			bulkCopy.ColumnMappings.Add("SA_CODE_JOB_STATUS_ID", "SA_CODE_JOB_STATUS_ID");
			bulkCopy.ColumnMappings.Add("SA_CODE_SC_DEG_ID", "SA_CODE_SC_DEG_ID");
			bulkCopy.ColumnMappings.Add("STF_NAME_AR", "STF_NAME_AR");
			bulkCopy.ColumnMappings.Add("STF_CL_FULL_NAME_AR", "STF_CL_FULL_NAME_AR");
			bulkCopy.ColumnMappings.Add("STF_CL_NAME_AR", "STF_CL_NAME_AR");
			bulkCopy.ColumnMappings.Add("STF_LNAME_AR", "STF_LNAME_AR");
			bulkCopy.ColumnMappings.Add("STF_CL_LNAME_AR", "STF_CL_LNAME_AR");
			bulkCopy.ColumnMappings.Add("STF_FNAME_EN", "STF_FNAME_EN");
			bulkCopy.ColumnMappings.Add("STF_LNAME_EN", "STF_LNAME_EN");
			bulkCopy.ColumnMappings.Add("STF_IS_AZHARY", "STF_IS_AZHARY");
			bulkCopy.ColumnMappings.Add("FILE_NUM", "FILE_NUM");
			bulkCopy.ColumnMappings.Add("STF_STATUS_NUM", "STF_STATUS_NUM");
			bulkCopy.ColumnMappings.Add("STF_NATIONAL_ID_NUM", "STF_NATIONAL_ID_NUM");
			bulkCopy.ColumnMappings.Add("STF_DOB", "STF_DOB");
			bulkCopy.ColumnMappings.Add("STF_REG_NUM", "STF_REG_NUM");
			bulkCopy.ColumnMappings.Add("STF_REG_DATE", "STF_REG_DATE");
			bulkCopy.ColumnMappings.Add("STF_MNAME", "STF_MNAME");
			bulkCopy.ColumnMappings.Add("STF_PERM_ADD", "STF_PERM_ADD");
			bulkCopy.ColumnMappings.Add("STF_CURR_ADD", "STF_CURR_ADD");
			bulkCopy.ColumnMappings.Add("STF_EMP_DATE", "STF_EMP_DATE");
			bulkCopy.ColumnMappings.Add("GS_CODE_GENDER_ID", "GS_CODE_GENDER_ID");
			bulkCopy.ColumnMappings.Add("GS_CODE_RELIGION_ID", "GS_CODE_RELIGION_ID");
			bulkCopy.ColumnMappings.Add("GS_CODE_MARITAL_STATE_ID", "GS_CODE_MARITAL_STATE_ID");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_INFO_ID", "GS_COUNTRY_INFO_ID");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_INFO_ID2", "GS_COUNTRY_INFO_ID2");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_NODE_ID", "GS_COUNTRY_NODE_ID");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_NODE_ID2", "GS_COUNTRY_NODE_ID2");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_NODE_ID3", "GS_COUNTRY_NODE_ID3");
			bulkCopy.ColumnMappings.Add("GS_CONTACT_METHOD_H_ID", "GS_CONTACT_METHOD_H_ID");
			bulkCopy.ColumnMappings.Add("STF_PHOTO", "STF_PHOTO");
			bulkCopy.ColumnMappings.Add("BASIC_SALARY", "BASIC_SALARY");
			bulkCopy.ColumnMappings.Add("PG_THESIS_GENERAL_SPEC_ID", "PG_THESIS_GENERAL_SPEC_ID");
			bulkCopy.ColumnMappings.Add("PG_THESIS_DETAILED_SPEC_ID", "PG_THESIS_DETAILED_SPEC_ID");
			bulkCopy.ColumnMappings.Add("DEL_FLAG", "DEL_FLAG");
			bulkCopy.ColumnMappings.Add("RETIRMENT_AGE", "RETIRMENT_AGE");
			bulkCopy.ColumnMappings.Add("OLD_STF_MEMBER_ID", "OLD_STF_MEMBER_ID");
			bulkCopy.ColumnMappings.Add("EMAIL_PASSWORD", "EMAIL_PASSWORD");
			bulkCopy.ColumnMappings.Add("TEL_NUM", "TEL_NUM");
			bulkCopy.ColumnMappings.Add("MOB_NUM", "MOB_NUM");
			bulkCopy.ColumnMappings.Add("E_MAIL", "E_MAIL");
			bulkCopy.ColumnMappings.Add("GS_CODE_IDENT_TYPE_ID", "GS_CODE_IDENT_TYPE_ID");
			bulkCopy.ColumnMappings.Add("ADMIN_JOB_FLG", "ADMIN_JOB_FLG");
			bulkCopy.ColumnMappings.Add("SA_CDE_ADMIN_JOB_ID", "SA_CDE_ADMIN_JOB_ID");
			bulkCopy.ColumnMappings.Add("ADMIN_JOB_LOAD", "ADMIN_JOB_LOAD");
			
			foreach(UMIS_VER2.BusinessLyer.SaStfMember entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["SA_STF_MEMBER_ID"] = entity.SaStfMemberId;
							
				
					row["STF_CODE"] = entity.StfCode;
							
				
					row["STF_FULL_NAME_AR"] = entity.StfFullNameAr;
							
				
					row["STF_FULL_NAME_EN"] = entity.StfFullNameEn;
							
				
					row["AS_NODE_ID"] = entity.AsNodeId.HasValue ? (object) entity.AsNodeId  : System.DBNull.Value;
							
				
					row["AS_FACULTY_INFO_ID"] = entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value;
							
				
					row["SA_CODE_JOB_STATUS_ID"] = entity.SaCodeJobStatusId.HasValue ? (object) entity.SaCodeJobStatusId  : System.DBNull.Value;
							
				
					row["SA_CODE_SC_DEG_ID"] = entity.SaCodeScDegId.HasValue ? (object) entity.SaCodeScDegId  : System.DBNull.Value;
							
				
					row["STF_NAME_AR"] = entity.StfNameAr;
							
				
					row["STF_CL_FULL_NAME_AR"] = entity.StfClFullNameAr;
							
				
					row["STF_CL_NAME_AR"] = entity.StfClNameAr;
							
				
					row["STF_LNAME_AR"] = entity.StfLnameAr;
							
				
					row["STF_CL_LNAME_AR"] = entity.StfClLnameAr;
							
				
					row["STF_FNAME_EN"] = entity.StfFnameEn;
							
				
					row["STF_LNAME_EN"] = entity.StfLnameEn;
							
				
					row["STF_IS_AZHARY"] = entity.StfIsAzhary;
							
				
					row["FILE_NUM"] = entity.FileNum;
							
				
					row["STF_STATUS_NUM"] = entity.StfStatusNum;
							
				
					row["STF_NATIONAL_ID_NUM"] = entity.StfNationalIdNum;
							
				
					row["STF_DOB"] = entity.StfDob.HasValue ? (object) entity.StfDob  : System.DBNull.Value;
							
				
					row["STF_REG_NUM"] = entity.StfRegNum;
							
				
					row["STF_REG_DATE"] = entity.StfRegDate.HasValue ? (object) entity.StfRegDate  : System.DBNull.Value;
							
				
					row["STF_MNAME"] = entity.StfMname;
							
				
					row["STF_PERM_ADD"] = entity.StfPermAdd;
							
				
					row["STF_CURR_ADD"] = entity.StfCurrAdd;
							
				
					row["STF_EMP_DATE"] = entity.StfEmpDate.HasValue ? (object) entity.StfEmpDate  : System.DBNull.Value;
							
				
					row["GS_CODE_GENDER_ID"] = entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value;
							
				
					row["GS_CODE_RELIGION_ID"] = entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId  : System.DBNull.Value;
							
				
					row["GS_CODE_MARITAL_STATE_ID"] = entity.GsCodeMaritalStateId.HasValue ? (object) entity.GsCodeMaritalStateId  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_INFO_ID"] = entity.GsCountryInfoId.HasValue ? (object) entity.GsCountryInfoId  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_INFO_ID2"] = entity.GsCountryInfoId2.HasValue ? (object) entity.GsCountryInfoId2  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_NODE_ID"] = entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_NODE_ID2"] = entity.GsCountryNodeId2.HasValue ? (object) entity.GsCountryNodeId2  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_NODE_ID3"] = entity.GsCountryNodeId3.HasValue ? (object) entity.GsCountryNodeId3  : System.DBNull.Value;
							
				
					row["GS_CONTACT_METHOD_H_ID"] = entity.GsContactMethodHId.HasValue ? (object) entity.GsContactMethodHId  : System.DBNull.Value;
							
				
					row["STF_PHOTO"] = entity.StfPhoto;
							
				
					row["BASIC_SALARY"] = entity.BasicSalary.HasValue ? (object) entity.BasicSalary  : System.DBNull.Value;
							
				
					row["PG_THESIS_GENERAL_SPEC_ID"] = entity.PgThesisGeneralSpecId.HasValue ? (object) entity.PgThesisGeneralSpecId  : System.DBNull.Value;
							
				
					row["PG_THESIS_DETAILED_SPEC_ID"] = entity.PgThesisDetailedSpecId.HasValue ? (object) entity.PgThesisDetailedSpecId  : System.DBNull.Value;
							
				
					row["DEL_FLAG"] = entity.DelFlag;
							
				
					row["RETIRMENT_AGE"] = entity.RetirmentAge;
							
				
					row["OLD_STF_MEMBER_ID"] = entity.OldStfMemberId.HasValue ? (object) entity.OldStfMemberId  : System.DBNull.Value;
							
				
					row["EMAIL_PASSWORD"] = entity.EmailPassword;
							
				
					row["TEL_NUM"] = entity.TelNum;
							
				
					row["MOB_NUM"] = entity.MobNum;
							
				
					row["E_MAIL"] = entity.EMail;
							
				
					row["GS_CODE_IDENT_TYPE_ID"] = entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId  : System.DBNull.Value;
							
				
					row["ADMIN_JOB_FLG"] = entity.AdminJobFlg.HasValue ? (object) entity.AdminJobFlg  : System.DBNull.Value;
							
				
					row["SA_CDE_ADMIN_JOB_ID"] = entity.SaCdeAdminJobId.HasValue ? (object) entity.SaCdeAdminJobId  : System.DBNull.Value;
							
				
					row["ADMIN_JOB_LOAD"] = entity.AdminJobLoad.HasValue ? (object) entity.AdminJobLoad  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.SaStfMember entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.SaStfMember object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.SaStfMember object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.SaStfMember object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.SaStfMember entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@StfCode", DbType.String, entity.StfCode );
			database.AddInParameter(commandWrapper, "@StfFullNameAr", DbType.String, entity.StfFullNameAr );
			database.AddInParameter(commandWrapper, "@StfFullNameEn", DbType.String, entity.StfFullNameEn );
			database.AddInParameter(commandWrapper, "@AsNodeId", DbType.Decimal, (entity.AsNodeId.HasValue ? (object) entity.AsNodeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SaCodeJobStatusId", DbType.Decimal, (entity.SaCodeJobStatusId.HasValue ? (object) entity.SaCodeJobStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, (entity.SaCodeScDegId.HasValue ? (object) entity.SaCodeScDegId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StfNameAr", DbType.String, entity.StfNameAr );
			database.AddInParameter(commandWrapper, "@StfClFullNameAr", DbType.String, entity.StfClFullNameAr );
			database.AddInParameter(commandWrapper, "@StfClNameAr", DbType.String, entity.StfClNameAr );
			database.AddInParameter(commandWrapper, "@StfLnameAr", DbType.String, entity.StfLnameAr );
			database.AddInParameter(commandWrapper, "@StfClLnameAr", DbType.String, entity.StfClLnameAr );
			database.AddInParameter(commandWrapper, "@StfFnameEn", DbType.String, entity.StfFnameEn );
			database.AddInParameter(commandWrapper, "@StfLnameEn", DbType.String, entity.StfLnameEn );
			database.AddInParameter(commandWrapper, "@StfIsAzhary", DbType.Decimal, entity.StfIsAzhary );
			database.AddInParameter(commandWrapper, "@FileNum", DbType.String, entity.FileNum );
			database.AddInParameter(commandWrapper, "@StfStatusNum", DbType.String, entity.StfStatusNum );
			database.AddInParameter(commandWrapper, "@StfNationalIdNum", DbType.String, entity.StfNationalIdNum );
			database.AddInParameter(commandWrapper, "@StfDob", DbType.DateTime, (entity.StfDob.HasValue ? (object) entity.StfDob  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StfRegNum", DbType.String, entity.StfRegNum );
			database.AddInParameter(commandWrapper, "@StfRegDate", DbType.DateTime, (entity.StfRegDate.HasValue ? (object) entity.StfRegDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StfMname", DbType.String, entity.StfMname );
			database.AddInParameter(commandWrapper, "@StfPermAdd", DbType.String, entity.StfPermAdd );
			database.AddInParameter(commandWrapper, "@StfCurrAdd", DbType.String, entity.StfCurrAdd );
			database.AddInParameter(commandWrapper, "@StfEmpDate", DbType.DateTime, (entity.StfEmpDate.HasValue ? (object) entity.StfEmpDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, (entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, (entity.GsCodeMaritalStateId.HasValue ? (object) entity.GsCodeMaritalStateId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, (entity.GsCountryInfoId.HasValue ? (object) entity.GsCountryInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryInfoId2", DbType.Decimal, (entity.GsCountryInfoId2.HasValue ? (object) entity.GsCountryInfoId2  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryNodeId2", DbType.Decimal, (entity.GsCountryNodeId2.HasValue ? (object) entity.GsCountryNodeId2  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryNodeId3", DbType.Decimal, (entity.GsCountryNodeId3.HasValue ? (object) entity.GsCountryNodeId3  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsContactMethodHId", DbType.Decimal, (entity.GsContactMethodHId.HasValue ? (object) entity.GsContactMethodHId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StfPhoto", DbType.String, entity.StfPhoto );
			database.AddInParameter(commandWrapper, "@BasicSalary", DbType.Decimal, (entity.BasicSalary.HasValue ? (object) entity.BasicSalary  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PgThesisGeneralSpecId", DbType.Decimal, (entity.PgThesisGeneralSpecId.HasValue ? (object) entity.PgThesisGeneralSpecId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PgThesisDetailedSpecId", DbType.Decimal, (entity.PgThesisDetailedSpecId.HasValue ? (object) entity.PgThesisDetailedSpecId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DelFlag", DbType.Decimal, entity.DelFlag );
			database.AddInParameter(commandWrapper, "@RetirmentAge", DbType.Decimal, entity.RetirmentAge );
			database.AddInParameter(commandWrapper, "@OldStfMemberId", DbType.Decimal, (entity.OldStfMemberId.HasValue ? (object) entity.OldStfMemberId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EmailPassword", DbType.String, entity.EmailPassword );
			database.AddInParameter(commandWrapper, "@TelNum", DbType.String, entity.TelNum );
			database.AddInParameter(commandWrapper, "@MobNum", DbType.String, entity.MobNum );
			database.AddInParameter(commandWrapper, "@EMail", DbType.String, entity.EMail );
			database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, (entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdminJobFlg", DbType.Boolean, (entity.AdminJobFlg.HasValue ? (object) entity.AdminJobFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SaCdeAdminJobId", DbType.Int32, (entity.SaCdeAdminJobId.HasValue ? (object) entity.SaCdeAdminJobId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdminJobLoad", DbType.Decimal, (entity.AdminJobLoad.HasValue ? (object) entity.AdminJobLoad  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _saStfMemberId = database.GetParameterValue(commandWrapper, "@SaStfMemberId");
			entity.SaStfMemberId = (System.Decimal)_saStfMemberId;
			
			entity.OriginalSaStfMemberId = entity.SaStfMemberId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.SaStfMember object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.SaStfMember object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.SaStfMember entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SA_STF_MEMBER_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@SaStfMemberId", DbType.Decimal, entity.SaStfMemberId );
			database.AddInParameter(commandWrapper, "@OriginalSaStfMemberId", DbType.Decimal, entity.OriginalSaStfMemberId);
			database.AddInParameter(commandWrapper, "@StfCode", DbType.String, entity.StfCode );
			database.AddInParameter(commandWrapper, "@StfFullNameAr", DbType.String, entity.StfFullNameAr );
			database.AddInParameter(commandWrapper, "@StfFullNameEn", DbType.String, entity.StfFullNameEn );
			database.AddInParameter(commandWrapper, "@AsNodeId", DbType.Decimal, (entity.AsNodeId.HasValue ? (object) entity.AsNodeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SaCodeJobStatusId", DbType.Decimal, (entity.SaCodeJobStatusId.HasValue ? (object) entity.SaCodeJobStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SaCodeScDegId", DbType.Decimal, (entity.SaCodeScDegId.HasValue ? (object) entity.SaCodeScDegId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StfNameAr", DbType.String, entity.StfNameAr );
			database.AddInParameter(commandWrapper, "@StfClFullNameAr", DbType.String, entity.StfClFullNameAr );
			database.AddInParameter(commandWrapper, "@StfClNameAr", DbType.String, entity.StfClNameAr );
			database.AddInParameter(commandWrapper, "@StfLnameAr", DbType.String, entity.StfLnameAr );
			database.AddInParameter(commandWrapper, "@StfClLnameAr", DbType.String, entity.StfClLnameAr );
			database.AddInParameter(commandWrapper, "@StfFnameEn", DbType.String, entity.StfFnameEn );
			database.AddInParameter(commandWrapper, "@StfLnameEn", DbType.String, entity.StfLnameEn );
			database.AddInParameter(commandWrapper, "@StfIsAzhary", DbType.Decimal, entity.StfIsAzhary );
			database.AddInParameter(commandWrapper, "@FileNum", DbType.String, entity.FileNum );
			database.AddInParameter(commandWrapper, "@StfStatusNum", DbType.String, entity.StfStatusNum );
			database.AddInParameter(commandWrapper, "@StfNationalIdNum", DbType.String, entity.StfNationalIdNum );
			database.AddInParameter(commandWrapper, "@StfDob", DbType.DateTime, (entity.StfDob.HasValue ? (object) entity.StfDob : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StfRegNum", DbType.String, entity.StfRegNum );
			database.AddInParameter(commandWrapper, "@StfRegDate", DbType.DateTime, (entity.StfRegDate.HasValue ? (object) entity.StfRegDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StfMname", DbType.String, entity.StfMname );
			database.AddInParameter(commandWrapper, "@StfPermAdd", DbType.String, entity.StfPermAdd );
			database.AddInParameter(commandWrapper, "@StfCurrAdd", DbType.String, entity.StfCurrAdd );
			database.AddInParameter(commandWrapper, "@StfEmpDate", DbType.DateTime, (entity.StfEmpDate.HasValue ? (object) entity.StfEmpDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, (entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeMaritalStateId", DbType.Decimal, (entity.GsCodeMaritalStateId.HasValue ? (object) entity.GsCodeMaritalStateId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryInfoId", DbType.Decimal, (entity.GsCountryInfoId.HasValue ? (object) entity.GsCountryInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryInfoId2", DbType.Decimal, (entity.GsCountryInfoId2.HasValue ? (object) entity.GsCountryInfoId2 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId", DbType.Decimal, (entity.GsCountryNodeId.HasValue ? (object) entity.GsCountryNodeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId2", DbType.Decimal, (entity.GsCountryNodeId2.HasValue ? (object) entity.GsCountryNodeId2 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryNodeId3", DbType.Decimal, (entity.GsCountryNodeId3.HasValue ? (object) entity.GsCountryNodeId3 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsContactMethodHId", DbType.Decimal, (entity.GsContactMethodHId.HasValue ? (object) entity.GsContactMethodHId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StfPhoto", DbType.String, entity.StfPhoto );
			database.AddInParameter(commandWrapper, "@BasicSalary", DbType.Decimal, (entity.BasicSalary.HasValue ? (object) entity.BasicSalary : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PgThesisGeneralSpecId", DbType.Decimal, (entity.PgThesisGeneralSpecId.HasValue ? (object) entity.PgThesisGeneralSpecId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PgThesisDetailedSpecId", DbType.Decimal, (entity.PgThesisDetailedSpecId.HasValue ? (object) entity.PgThesisDetailedSpecId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DelFlag", DbType.Decimal, entity.DelFlag );
			database.AddInParameter(commandWrapper, "@RetirmentAge", DbType.Decimal, entity.RetirmentAge );
			database.AddInParameter(commandWrapper, "@OldStfMemberId", DbType.Decimal, (entity.OldStfMemberId.HasValue ? (object) entity.OldStfMemberId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EmailPassword", DbType.String, entity.EmailPassword );
			database.AddInParameter(commandWrapper, "@TelNum", DbType.String, entity.TelNum );
			database.AddInParameter(commandWrapper, "@MobNum", DbType.String, entity.MobNum );
			database.AddInParameter(commandWrapper, "@EMail", DbType.String, entity.EMail );
			database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, (entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdminJobFlg", DbType.Boolean, (entity.AdminJobFlg.HasValue ? (object) entity.AdminJobFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SaCdeAdminJobId", DbType.Int32, (entity.SaCdeAdminJobId.HasValue ? (object) entity.SaCdeAdminJobId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdminJobLoad", DbType.Decimal, (entity.AdminJobLoad.HasValue ? (object) entity.AdminJobLoad : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalSaStfMemberId = entity.SaStfMemberId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
