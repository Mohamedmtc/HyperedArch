/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdStudCourseRegProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdStudCourseReg"/> entity.
	///</summary>
	public abstract partial class SqlEdStudCourseRegProviderBase : EdStudCourseRegProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdStudCourseRegProviderBase"/> instance.
		/// </summary>
		public SqlEdStudCourseRegProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdStudCourseRegProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdStudCourseRegProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edStudCourseRegId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edStudCourseRegId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, _edStudCourseRegId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdStudCourseReg)
					,_edStudCourseRegId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
		public override TList<EdStudCourseReg> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdStudCourseReg>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RegDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AuditFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RepeatFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeCourseStatusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseDegree", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CoursePoint", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntPolicyGradingHdrId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AddGpaFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntPolicyAssessHdrId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IncompFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HideFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HideReason", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCourseSubId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsResultApproved", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RepeatNo", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PayAmount", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AbsFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReceiptNo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ReceiptDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ByforceFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeCrsRegTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntCoursePkgDtlId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadPlanDtlId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserApproveId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CrsRaiseMark", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CrsCh", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AudtNote", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScSectionGroupHdrId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCourseOrgId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsLastYear", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RetakeFlg", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeCourseCaseId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_stud_course_reg_id ") || clause.Trim().StartsWith("ed_stud_course_reg_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudCourseRegId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_course_id ") || clause.Trim().StartsWith("ed_course_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCourseId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("reg_date ") || clause.Trim().StartsWith("reg_date="))
				{
					database.SetParameterValue(commandWrapper, "@RegDate", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("audit_flg ") || clause.Trim().StartsWith("audit_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AuditFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("repeat_flg ") || clause.Trim().StartsWith("repeat_flg="))
				{
					database.SetParameterValue(commandWrapper, "@RepeatFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_last ") || clause.Trim().StartsWith("is_last="))
				{
					database.SetParameterValue(commandWrapper, "@IsLast", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_faculty_info_id ") || clause.Trim().StartsWith("as_faculty_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsFacultyInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_course_status_id ") || clause.Trim().StartsWith("ed_code_course_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeCourseStatusId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_grading_id ") || clause.Trim().StartsWith("ed_code_grading_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeGradingId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_degree ") || clause.Trim().StartsWith("course_degree="))
				{
					database.SetParameterValue(commandWrapper, "@CourseDegree", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_point ") || clause.Trim().StartsWith("course_point="))
				{
					database.SetParameterValue(commandWrapper, "@CoursePoint", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_policy_grading_hdr_id ") || clause.Trim().StartsWith("ent_policy_grading_hdr_id="))
				{
					database.SetParameterValue(commandWrapper, "@EntPolicyGradingHdrId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_pass_fail_id ") || clause.Trim().StartsWith("gs_code_pass_fail_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodePassFailId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_semester_id ") || clause.Trim().StartsWith("ed_stud_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudSemesterId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("add_gpa_flg ") || clause.Trim().StartsWith("add_gpa_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AddGpaFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_policy_assess_hdr_id ") || clause.Trim().StartsWith("ent_policy_assess_hdr_id="))
				{
					database.SetParameterValue(commandWrapper, "@EntPolicyAssessHdrId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("incomp_flg ") || clause.Trim().StartsWith("incomp_flg="))
				{
					database.SetParameterValue(commandWrapper, "@IncompFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hide_flg ") || clause.Trim().StartsWith("hide_flg="))
				{
					database.SetParameterValue(commandWrapper, "@HideFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hide_reason ") || clause.Trim().StartsWith("hide_reason="))
				{
					database.SetParameterValue(commandWrapper, "@HideReason", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_course_sub_id ") || clause.Trim().StartsWith("ed_course_sub_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCourseSubId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_form_id ") || clause.Trim().StartsWith("se_form_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeFormId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_result_approved ") || clause.Trim().StartsWith("is_result_approved="))
				{
					database.SetParameterValue(commandWrapper, "@IsResultApproved", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("repeat_no ") || clause.Trim().StartsWith("repeat_no="))
				{
					database.SetParameterValue(commandWrapper, "@RepeatNo", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pay_flg ") || clause.Trim().StartsWith("pay_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PayFlg", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pay_amount ") || clause.Trim().StartsWith("pay_amount="))
				{
					database.SetParameterValue(commandWrapper, "@PayAmount", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("abs_flg ") || clause.Trim().StartsWith("abs_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AbsFlg", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("receipt_no ") || clause.Trim().StartsWith("receipt_no="))
				{
					database.SetParameterValue(commandWrapper, "@ReceiptNo", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("receipt_date ") || clause.Trim().StartsWith("receipt_date="))
				{
					database.SetParameterValue(commandWrapper, "@ReceiptDate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("byforce_flg ") || clause.Trim().StartsWith("byforce_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ByforceFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_crs_reg_type_id ") || clause.Trim().StartsWith("ed_cde_crs_reg_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeCrsRegTypeId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_course_pkg_dtl_id ") || clause.Trim().StartsWith("ent_course_pkg_dtl_id="))
				{
					database.SetParameterValue(commandWrapper, "@EntCoursePkgDtlId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_plan_dtl_id ") || clause.Trim().StartsWith("ed_acad_plan_dtl_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadPlanDtlId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_approve_id ") || clause.Trim().StartsWith("se_user_approve_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserApproveId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("crs_raise_mark ") || clause.Trim().StartsWith("crs_raise_mark="))
				{
					database.SetParameterValue(commandWrapper, "@CrsRaiseMark", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("crs_ch ") || clause.Trim().StartsWith("crs_ch="))
				{
					database.SetParameterValue(commandWrapper, "@CrsCh", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("audt_note ") || clause.Trim().StartsWith("audt_note="))
				{
					database.SetParameterValue(commandWrapper, "@AudtNote", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sc_section_group_hdr_id ") || clause.Trim().StartsWith("sc_section_group_hdr_id="))
				{
					database.SetParameterValue(commandWrapper, "@ScSectionGroupHdrId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_course_org_id ") || clause.Trim().StartsWith("ed_course_org_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCourseOrgId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_cde_exam_type_id ") || clause.Trim().StartsWith("ed_cde_exam_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCdeExamTypeId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_last_year ") || clause.Trim().StartsWith("is_last_year="))
				{
					database.SetParameterValue(commandWrapper, "@IsLastYear", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("retake_flg ") || clause.Trim().StartsWith("retake_flg="))
				{
					database.SetParameterValue(commandWrapper, "@RetakeFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_course_case_id ") || clause.Trim().StartsWith("ed_code_course_case_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeCourseCaseId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
		public override TList<EdStudCourseReg> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_Find_Dynamic", typeof(EdStudCourseRegColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
		public override TList<EdStudCourseReg> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByEdAcadPlanDtlId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_ED_ACAD_PLAN_DTL key.
		///		FK_ED_STUD_COURSE_REG_ED_ACAD_PLAN_DTL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadPlanDtlId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdAcadPlanDtlId(TransactionManager transactionManager, System.Decimal? _edAcadPlanDtlId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdAcadPlanDtlId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadPlanDtlId", DbType.Decimal, _edAcadPlanDtlId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadPlanDtlId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadPlanDtlId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeCrsRegTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_ED_CDE_CRS_REG_TYPE key.
		///		FK_ED_STUD_COURSE_REG_ED_CDE_CRS_REG_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeCrsRegTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdCdeCrsRegTypeId(TransactionManager transactionManager, System.Decimal? _edCdeCrsRegTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdCdeCrsRegTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeCrsRegTypeId", DbType.Decimal, _edCdeCrsRegTypeId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeCrsRegTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeCrsRegTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCdeExamTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_ED_CDE_EXAM_TYPE key.
		///		FK_ED_STUD_COURSE_REG_ED_CDE_EXAM_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdCdeExamTypeId(TransactionManager transactionManager, System.Decimal? _edCdeExamTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdCdeExamTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, _edCdeExamTypeId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCdeExamTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCdeExamTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeCourseCaseId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_ED_CODE_COURSE_CASE key.
		///		FK_ED_STUD_COURSE_REG_ED_CODE_COURSE_CASE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeCourseCaseId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdCodeCourseCaseId(TransactionManager transactionManager, System.Int32? _edCodeCourseCaseId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdCodeCourseCaseId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeCourseCaseId", DbType.Int32, _edCodeCourseCaseId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseCaseId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseCaseId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCourseOrgId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_ED_COURSE1 key.
		///		FK_ED_STUD_COURSE_REG_ED_COURSE1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCourseOrgId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdCourseOrgId(TransactionManager transactionManager, System.Decimal? _edCourseOrgId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdCourseOrgId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCourseOrgId", DbType.Decimal, _edCourseOrgId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCourseOrgId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCourseOrgId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntCoursePkgDtlId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_ENT_COURSE_PKG_DTL key.
		///		FK_ED_STUD_COURSE_REG_ENT_COURSE_PKG_DTL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entCoursePkgDtlId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEntCoursePkgDtlId(TransactionManager transactionManager, System.Decimal? _entCoursePkgDtlId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEntCoursePkgDtlId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntCoursePkgDtlId", DbType.Decimal, _entCoursePkgDtlId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntCoursePkgDtlId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntCoursePkgDtlId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByScSectionGroupHdrId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_SC_SECTION_GROUP_HDR key.
		///		FK_ED_STUD_COURSE_REG_SC_SECTION_GROUP_HDR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scSectionGroupHdrId">مجموعة سكاشن المقرر</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByScSectionGroupHdrId(TransactionManager transactionManager, System.Decimal? _scSectionGroupHdrId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByScSectionGroupHdrId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScSectionGroupHdrId", DbType.Decimal, _scSectionGroupHdrId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScSectionGroupHdrId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScSectionGroupHdrId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySeFormId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_SE_FORM key.
		///		FK_ED_STUD_COURSE_REG_SE_FORM Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_seFormId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetBySeFormId(TransactionManager transactionManager, System.Decimal? _seFormId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetBySeFormId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, _seFormId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySeFormId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySeFormId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySeUserId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_SE_USER key.
		///		FK_ED_STUD_COURSE_REG_SE_USER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_seUserId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetBySeUserId(TransactionManager transactionManager, System.Decimal? _seUserId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetBySeUserId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, _seUserId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySeUserId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySeUserId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySeUserApproveId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_COURSE_REG_SE_USER_APRV key.
		///		FK_ED_STUD_COURSE_REG_SE_USER_APRV Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_seUserApproveId">Result Approved</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudCourseReg objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetBySeUserApproveId(TransactionManager transactionManager, System.Decimal? _seUserApproveId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetBySeUserApproveId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SeUserApproveId", DbType.Decimal, _seUserApproveId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> rows = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySeUserApproveId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySeUserApproveId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAsFacultyInfoId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_AS_FACULTY_INFO_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByAsFacultyInfoId(TransactionManager transactionManager, System.Decimal? _asFacultyInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByAsFacultyInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCodeCourseStatusId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_COURSE_STATU_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeCourseStatusId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdCodeCourseStatusId(TransactionManager transactionManager, System.Decimal? _edCodeCourseStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdCodeCourseStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeCourseStatusId", DbType.Decimal, _edCodeCourseStatusId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseStatusId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseStatusId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCodeGradingId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_CODE_GRADING_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeGradingId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdCodeGradingId(TransactionManager transactionManager, System.Decimal? _edCodeGradingId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdCodeGradingId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, _edCodeGradingId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeGradingId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeGradingId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCourseId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_COURSE_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCourseId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdCourseId(TransactionManager transactionManager, System.Decimal _edCourseId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdCourseId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, _edCourseId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCourseId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCourseId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudSemesterId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_STUD_SEMESTER_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudSemesterId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEdStudSemesterId(TransactionManager transactionManager, System.Decimal _edStudSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdStudSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, _edStudSemesterId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudSemesterId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudSemesterId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEntPolicyAssessHdrId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ENT_POLICY_ASSESS_HD_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entPolicyAssessHdrId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEntPolicyAssessHdrId(TransactionManager transactionManager, System.Decimal? _entPolicyAssessHdrId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEntPolicyAssessHdrId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntPolicyAssessHdrId", DbType.Decimal, _entPolicyAssessHdrId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntPolicyAssessHdrId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntPolicyAssessHdrId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEntPolicyGradingHdrId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ENT_POLICY_GRADING_H_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entPolicyGradingHdrId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByEntPolicyGradingHdrId(TransactionManager transactionManager, System.Decimal? _entPolicyGradingHdrId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEntPolicyGradingHdrId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntPolicyGradingHdrId", DbType.Decimal, _entPolicyGradingHdrId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntPolicyGradingHdrId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntPolicyGradingHdrId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCodePassFailId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_CODE_PASS_FAIL_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodePassFailId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStudCourseReg&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudCourseReg> GetByGsCodePassFailId(TransactionManager transactionManager, System.Decimal? _gsCodePassFailId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByGsCodePassFailId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, _gsCodePassFailId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodePassFailId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodePassFailId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudCourseRegId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_STUD_STATE_COURSE index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudCourseRegId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudCourseReg"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudCourseReg GetByEdStudCourseRegId(TransactionManager transactionManager, System.Decimal _edStudCourseRegId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdStudCourseRegId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, _edStudCourseRegId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudCourseRegId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudCourseRegId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudSemesterIdEdCourseIdEdCdeExamTypeIdEdCodeCourseStatusId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_STUD_COURSE_REG index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudSemesterId"></param>
		/// <param name="_edCourseId"></param>
		/// <param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		/// <param name="_edCodeCourseStatusId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudCourseReg"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudCourseReg GetByEdStudSemesterIdEdCourseIdEdCdeExamTypeIdEdCodeCourseStatusId(TransactionManager transactionManager, System.Decimal _edStudSemesterId, System.Decimal _edCourseId, System.Decimal? _edCdeExamTypeId, System.Decimal? _edCodeCourseStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_GetByEdStudSemesterIdEdCourseIdEdCdeExamTypeIdEdCodeCourseStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, _edStudSemesterId);
				database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, _edCourseId);
				database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, _edCdeExamTypeId);
				database.AddInParameter(commandWrapper, "@EdCodeCourseStatusId", DbType.Decimal, _edCodeCourseStatusId);
			
			IDataReader reader = null;
			TList<EdStudCourseReg> tmp = new TList<EdStudCourseReg>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudSemesterIdEdCourseIdEdCdeExamTypeIdEdCodeCourseStatusId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudSemesterIdEdCourseIdEdCdeExamTypeIdEdCodeCourseStatusId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudCourseReg object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdStudCourseReg> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_STUD_COURSE_REG";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_STUD_COURSE_REG_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ED_COURSE_ID", typeof(System.Decimal));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("REG_DATE", typeof(System.DateTime));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("AUDIT_FLG", typeof(System.Decimal));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("REPEAT_FLG", typeof(System.Decimal));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("IS_LAST", typeof(System.Decimal));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("AS_FACULTY_INFO_ID", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("ED_CODE_COURSE_STATUS_ID", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ED_CODE_GRADING_ID", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("COURSE_DEGREE", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("COURSE_POINT", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ED_STUD_SEMESTER_ID", typeof(System.Decimal));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("ADD_GPA_FLG", typeof(System.Decimal));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("ENT_POLICY_ASSESS_HDR_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("INCOMP_FLG", typeof(System.Decimal));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("HIDE_FLG", typeof(System.Decimal));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("HIDE_REASON", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("ED_COURSE_SUB_ID", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("SE_FORM_ID", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("IS_RESULT_APPROVED", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("REPEAT_NO", typeof(System.Decimal));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("PAY_FLG", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("PAY_AMOUNT", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ABS_FLG", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("RECEIPT_NO", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("RECEIPT_DATE", typeof(System.DateTime));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("BYFORCE_FLG", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("ED_CDE_CRS_REG_TYPE_ID", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("ENT_COURSE_PKG_DTL_ID", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("ED_ACAD_PLAN_DTL_ID", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("NOTES", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("SE_USER_APPROVE_ID", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("CRS_RAISE_MARK", typeof(System.Decimal));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("CRS_CH", typeof(System.Int32));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("AUDT_NOTE", typeof(System.String));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("SC_SECTION_GROUP_HDR_ID", typeof(System.Decimal));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("ED_COURSE_ORG_ID", typeof(System.Decimal));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("IS_LAST_YEAR", typeof(System.Boolean));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("RETAKE_FLG", typeof(System.Int16));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("ED_CODE_COURSE_CASE_ID", typeof(System.Int32));
			col44.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_STUD_COURSE_REG_ID", "ED_STUD_COURSE_REG_ID");
			bulkCopy.ColumnMappings.Add("ED_COURSE_ID", "ED_COURSE_ID");
			bulkCopy.ColumnMappings.Add("REG_DATE", "REG_DATE");
			bulkCopy.ColumnMappings.Add("AUDIT_FLG", "AUDIT_FLG");
			bulkCopy.ColumnMappings.Add("REPEAT_FLG", "REPEAT_FLG");
			bulkCopy.ColumnMappings.Add("IS_LAST", "IS_LAST");
			bulkCopy.ColumnMappings.Add("AS_FACULTY_INFO_ID", "AS_FACULTY_INFO_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_COURSE_STATUS_ID", "ED_CODE_COURSE_STATUS_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_GRADING_ID", "ED_CODE_GRADING_ID");
			bulkCopy.ColumnMappings.Add("COURSE_DEGREE", "COURSE_DEGREE");
			bulkCopy.ColumnMappings.Add("COURSE_POINT", "COURSE_POINT");
			bulkCopy.ColumnMappings.Add("ENT_POLICY_GRADING_HDR_ID", "ENT_POLICY_GRADING_HDR_ID");
			bulkCopy.ColumnMappings.Add("GS_CODE_PASS_FAIL_ID", "GS_CODE_PASS_FAIL_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_SEMESTER_ID", "ED_STUD_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("ADD_GPA_FLG", "ADD_GPA_FLG");
			bulkCopy.ColumnMappings.Add("ENT_POLICY_ASSESS_HDR_ID", "ENT_POLICY_ASSESS_HDR_ID");
			bulkCopy.ColumnMappings.Add("INCOMP_FLG", "INCOMP_FLG");
			bulkCopy.ColumnMappings.Add("HIDE_FLG", "HIDE_FLG");
			bulkCopy.ColumnMappings.Add("HIDE_REASON", "HIDE_REASON");
			bulkCopy.ColumnMappings.Add("ED_COURSE_SUB_ID", "ED_COURSE_SUB_ID");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			bulkCopy.ColumnMappings.Add("SE_FORM_ID", "SE_FORM_ID");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("IS_RESULT_APPROVED", "IS_RESULT_APPROVED");
			bulkCopy.ColumnMappings.Add("REPEAT_NO", "REPEAT_NO");
			bulkCopy.ColumnMappings.Add("PAY_FLG", "PAY_FLG");
			bulkCopy.ColumnMappings.Add("PAY_AMOUNT", "PAY_AMOUNT");
			bulkCopy.ColumnMappings.Add("ABS_FLG", "ABS_FLG");
			bulkCopy.ColumnMappings.Add("RECEIPT_NO", "RECEIPT_NO");
			bulkCopy.ColumnMappings.Add("RECEIPT_DATE", "RECEIPT_DATE");
			bulkCopy.ColumnMappings.Add("BYFORCE_FLG", "BYFORCE_FLG");
			bulkCopy.ColumnMappings.Add("ED_CDE_CRS_REG_TYPE_ID", "ED_CDE_CRS_REG_TYPE_ID");
			bulkCopy.ColumnMappings.Add("ENT_COURSE_PKG_DTL_ID", "ENT_COURSE_PKG_DTL_ID");
			bulkCopy.ColumnMappings.Add("ED_ACAD_PLAN_DTL_ID", "ED_ACAD_PLAN_DTL_ID");
			bulkCopy.ColumnMappings.Add("NOTES", "NOTES");
			bulkCopy.ColumnMappings.Add("SE_USER_APPROVE_ID", "SE_USER_APPROVE_ID");
			bulkCopy.ColumnMappings.Add("CRS_RAISE_MARK", "CRS_RAISE_MARK");
			bulkCopy.ColumnMappings.Add("CRS_CH", "CRS_CH");
			bulkCopy.ColumnMappings.Add("AUDT_NOTE", "AUDT_NOTE");
			bulkCopy.ColumnMappings.Add("SC_SECTION_GROUP_HDR_ID", "SC_SECTION_GROUP_HDR_ID");
			bulkCopy.ColumnMappings.Add("ED_COURSE_ORG_ID", "ED_COURSE_ORG_ID");
			bulkCopy.ColumnMappings.Add("ED_CDE_EXAM_TYPE_ID", "ED_CDE_EXAM_TYPE_ID");
			bulkCopy.ColumnMappings.Add("IS_LAST_YEAR", "IS_LAST_YEAR");
			bulkCopy.ColumnMappings.Add("RETAKE_FLG", "RETAKE_FLG");
			bulkCopy.ColumnMappings.Add("ED_CODE_COURSE_CASE_ID", "ED_CODE_COURSE_CASE_ID");
			
			foreach(UMIS_VER2.BusinessLyer.EdStudCourseReg entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_STUD_COURSE_REG_ID"] = entity.EdStudCourseRegId;
							
				
					row["ED_COURSE_ID"] = entity.EdCourseId;
							
				
					row["REG_DATE"] = entity.RegDate.HasValue ? (object) entity.RegDate  : System.DBNull.Value;
							
				
					row["AUDIT_FLG"] = entity.AuditFlg;
							
				
					row["REPEAT_FLG"] = entity.RepeatFlg;
							
				
					row["IS_LAST"] = entity.IsLast;
							
				
					row["AS_FACULTY_INFO_ID"] = entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value;
							
				
					row["ED_CODE_COURSE_STATUS_ID"] = entity.EdCodeCourseStatusId.HasValue ? (object) entity.EdCodeCourseStatusId  : System.DBNull.Value;
							
				
					row["ED_CODE_GRADING_ID"] = entity.EdCodeGradingId.HasValue ? (object) entity.EdCodeGradingId  : System.DBNull.Value;
							
				
					row["COURSE_DEGREE"] = entity.CourseDegree.HasValue ? (object) entity.CourseDegree  : System.DBNull.Value;
							
				
					row["COURSE_POINT"] = entity.CoursePoint.HasValue ? (object) entity.CoursePoint  : System.DBNull.Value;
							
				
					row["ENT_POLICY_GRADING_HDR_ID"] = entity.EntPolicyGradingHdrId.HasValue ? (object) entity.EntPolicyGradingHdrId  : System.DBNull.Value;
							
				
					row["GS_CODE_PASS_FAIL_ID"] = entity.GsCodePassFailId.HasValue ? (object) entity.GsCodePassFailId  : System.DBNull.Value;
							
				
					row["ED_STUD_SEMESTER_ID"] = entity.EdStudSemesterId;
							
				
					row["ADD_GPA_FLG"] = entity.AddGpaFlg;
							
				
					row["ENT_POLICY_ASSESS_HDR_ID"] = entity.EntPolicyAssessHdrId.HasValue ? (object) entity.EntPolicyAssessHdrId  : System.DBNull.Value;
							
				
					row["INCOMP_FLG"] = entity.IncompFlg;
							
				
					row["HIDE_FLG"] = entity.HideFlg;
							
				
					row["HIDE_REASON"] = entity.HideReason;
							
				
					row["ED_COURSE_SUB_ID"] = entity.EdCourseSubId.HasValue ? (object) entity.EdCourseSubId  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
					row["SE_FORM_ID"] = entity.SeFormId.HasValue ? (object) entity.SeFormId  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["IS_RESULT_APPROVED"] = entity.IsResultApproved.HasValue ? (object) entity.IsResultApproved  : System.DBNull.Value;
							
				
					row["REPEAT_NO"] = entity.RepeatNo.HasValue ? (object) entity.RepeatNo  : System.DBNull.Value;
							
				
					row["PAY_FLG"] = entity.PayFlg.HasValue ? (object) entity.PayFlg  : System.DBNull.Value;
							
				
					row["PAY_AMOUNT"] = entity.PayAmount.HasValue ? (object) entity.PayAmount  : System.DBNull.Value;
							
				
					row["ABS_FLG"] = entity.AbsFlg.HasValue ? (object) entity.AbsFlg  : System.DBNull.Value;
							
				
					row["RECEIPT_NO"] = entity.ReceiptNo;
							
				
					row["RECEIPT_DATE"] = entity.ReceiptDate.HasValue ? (object) entity.ReceiptDate  : System.DBNull.Value;
							
				
					row["BYFORCE_FLG"] = entity.ByforceFlg.HasValue ? (object) entity.ByforceFlg  : System.DBNull.Value;
							
				
					row["ED_CDE_CRS_REG_TYPE_ID"] = entity.EdCdeCrsRegTypeId.HasValue ? (object) entity.EdCdeCrsRegTypeId  : System.DBNull.Value;
							
				
					row["ENT_COURSE_PKG_DTL_ID"] = entity.EntCoursePkgDtlId.HasValue ? (object) entity.EntCoursePkgDtlId  : System.DBNull.Value;
							
				
					row["ED_ACAD_PLAN_DTL_ID"] = entity.EdAcadPlanDtlId.HasValue ? (object) entity.EdAcadPlanDtlId  : System.DBNull.Value;
							
				
					row["NOTES"] = entity.Notes;
							
				
					row["SE_USER_APPROVE_ID"] = entity.SeUserApproveId.HasValue ? (object) entity.SeUserApproveId  : System.DBNull.Value;
							
				
					row["CRS_RAISE_MARK"] = entity.CrsRaiseMark.HasValue ? (object) entity.CrsRaiseMark  : System.DBNull.Value;
							
				
					row["CRS_CH"] = entity.CrsCh.HasValue ? (object) entity.CrsCh  : System.DBNull.Value;
							
				
					row["AUDT_NOTE"] = entity.AudtNote;
							
				
					row["SC_SECTION_GROUP_HDR_ID"] = entity.ScSectionGroupHdrId.HasValue ? (object) entity.ScSectionGroupHdrId  : System.DBNull.Value;
							
				
					row["ED_COURSE_ORG_ID"] = entity.EdCourseOrgId.HasValue ? (object) entity.EdCourseOrgId  : System.DBNull.Value;
							
				
					row["ED_CDE_EXAM_TYPE_ID"] = entity.EdCdeExamTypeId.HasValue ? (object) entity.EdCdeExamTypeId  : System.DBNull.Value;
							
				
					row["IS_LAST_YEAR"] = entity.IsLastYear.HasValue ? (object) entity.IsLastYear  : System.DBNull.Value;
							
				
					row["RETAKE_FLG"] = entity.RetakeFlg.HasValue ? (object) entity.RetakeFlg  : System.DBNull.Value;
							
				
					row["ED_CODE_COURSE_CASE_ID"] = entity.EdCodeCourseCaseId.HasValue ? (object) entity.EdCodeCourseCaseId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdStudCourseReg entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdStudCourseReg object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudCourseReg object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudCourseReg object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudCourseReg entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, entity.EdCourseId );
			database.AddInParameter(commandWrapper, "@RegDate", DbType.DateTime, (entity.RegDate.HasValue ? (object) entity.RegDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AuditFlg", DbType.Decimal, entity.AuditFlg );
			database.AddInParameter(commandWrapper, "@RepeatFlg", DbType.Decimal, entity.RepeatFlg );
			database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, entity.IsLast );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeCourseStatusId", DbType.Decimal, (entity.EdCodeCourseStatusId.HasValue ? (object) entity.EdCodeCourseStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, (entity.EdCodeGradingId.HasValue ? (object) entity.EdCodeGradingId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CourseDegree", DbType.Decimal, (entity.CourseDegree.HasValue ? (object) entity.CourseDegree  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CoursePoint", DbType.Decimal, (entity.CoursePoint.HasValue ? (object) entity.CoursePoint  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntPolicyGradingHdrId", DbType.Decimal, (entity.EntPolicyGradingHdrId.HasValue ? (object) entity.EntPolicyGradingHdrId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, (entity.GsCodePassFailId.HasValue ? (object) entity.GsCodePassFailId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, entity.EdStudSemesterId );
			database.AddInParameter(commandWrapper, "@AddGpaFlg", DbType.Decimal, entity.AddGpaFlg );
			database.AddInParameter(commandWrapper, "@EntPolicyAssessHdrId", DbType.Decimal, (entity.EntPolicyAssessHdrId.HasValue ? (object) entity.EntPolicyAssessHdrId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IncompFlg", DbType.Decimal, entity.IncompFlg );
			database.AddInParameter(commandWrapper, "@HideFlg", DbType.Decimal, entity.HideFlg );
			database.AddInParameter(commandWrapper, "@HideReason", DbType.String, entity.HideReason );
			database.AddInParameter(commandWrapper, "@EdCourseSubId", DbType.Decimal, (entity.EdCourseSubId.HasValue ? (object) entity.EdCourseSubId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, (entity.SeFormId.HasValue ? (object) entity.SeFormId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsResultApproved", DbType.Decimal, (entity.IsResultApproved.HasValue ? (object) entity.IsResultApproved  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RepeatNo", DbType.Decimal, (entity.RepeatNo.HasValue ? (object) entity.RepeatNo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PayFlg", DbType.Decimal, (entity.PayFlg.HasValue ? (object) entity.PayFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PayAmount", DbType.Decimal, (entity.PayAmount.HasValue ? (object) entity.PayAmount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AbsFlg", DbType.Decimal, (entity.AbsFlg.HasValue ? (object) entity.AbsFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ReceiptNo", DbType.String, entity.ReceiptNo );
			database.AddInParameter(commandWrapper, "@ReceiptDate", DbType.DateTime, (entity.ReceiptDate.HasValue ? (object) entity.ReceiptDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ByforceFlg", DbType.Decimal, (entity.ByforceFlg.HasValue ? (object) entity.ByforceFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeCrsRegTypeId", DbType.Decimal, (entity.EdCdeCrsRegTypeId.HasValue ? (object) entity.EdCdeCrsRegTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntCoursePkgDtlId", DbType.Decimal, (entity.EntCoursePkgDtlId.HasValue ? (object) entity.EntCoursePkgDtlId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdAcadPlanDtlId", DbType.Decimal, (entity.EdAcadPlanDtlId.HasValue ? (object) entity.EdAcadPlanDtlId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@SeUserApproveId", DbType.Decimal, (entity.SeUserApproveId.HasValue ? (object) entity.SeUserApproveId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CrsRaiseMark", DbType.Decimal, (entity.CrsRaiseMark.HasValue ? (object) entity.CrsRaiseMark  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CrsCh", DbType.Int32, (entity.CrsCh.HasValue ? (object) entity.CrsCh  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AudtNote", DbType.String, entity.AudtNote );
			database.AddInParameter(commandWrapper, "@ScSectionGroupHdrId", DbType.Decimal, (entity.ScSectionGroupHdrId.HasValue ? (object) entity.ScSectionGroupHdrId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCourseOrgId", DbType.Decimal, (entity.EdCourseOrgId.HasValue ? (object) entity.EdCourseOrgId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, (entity.EdCdeExamTypeId.HasValue ? (object) entity.EdCdeExamTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsLastYear", DbType.Boolean, (entity.IsLastYear.HasValue ? (object) entity.IsLastYear  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RetakeFlg", DbType.Int16, (entity.RetakeFlg.HasValue ? (object) entity.RetakeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeCourseCaseId", DbType.Int32, (entity.EdCodeCourseCaseId.HasValue ? (object) entity.EdCodeCourseCaseId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edStudCourseRegId = database.GetParameterValue(commandWrapper, "@EdStudCourseRegId");
			entity.EdStudCourseRegId = (System.Decimal)_edStudCourseRegId;
			
			entity.OriginalEdStudCourseRegId = entity.EdStudCourseRegId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudCourseReg object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdStudCourseReg object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudCourseReg entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_COURSE_REG_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdStudCourseRegId", DbType.Decimal, entity.EdStudCourseRegId );
			database.AddInParameter(commandWrapper, "@OriginalEdStudCourseRegId", DbType.Decimal, entity.OriginalEdStudCourseRegId);
			database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, entity.EdCourseId );
			database.AddInParameter(commandWrapper, "@RegDate", DbType.DateTime, (entity.RegDate.HasValue ? (object) entity.RegDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AuditFlg", DbType.Decimal, entity.AuditFlg );
			database.AddInParameter(commandWrapper, "@RepeatFlg", DbType.Decimal, entity.RepeatFlg );
			database.AddInParameter(commandWrapper, "@IsLast", DbType.Decimal, entity.IsLast );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeCourseStatusId", DbType.Decimal, (entity.EdCodeCourseStatusId.HasValue ? (object) entity.EdCodeCourseStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeGradingId", DbType.Decimal, (entity.EdCodeGradingId.HasValue ? (object) entity.EdCodeGradingId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CourseDegree", DbType.Decimal, (entity.CourseDegree.HasValue ? (object) entity.CourseDegree : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CoursePoint", DbType.Decimal, (entity.CoursePoint.HasValue ? (object) entity.CoursePoint : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntPolicyGradingHdrId", DbType.Decimal, (entity.EntPolicyGradingHdrId.HasValue ? (object) entity.EntPolicyGradingHdrId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, (entity.GsCodePassFailId.HasValue ? (object) entity.GsCodePassFailId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdStudSemesterId", DbType.Decimal, entity.EdStudSemesterId );
			database.AddInParameter(commandWrapper, "@AddGpaFlg", DbType.Decimal, entity.AddGpaFlg );
			database.AddInParameter(commandWrapper, "@EntPolicyAssessHdrId", DbType.Decimal, (entity.EntPolicyAssessHdrId.HasValue ? (object) entity.EntPolicyAssessHdrId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IncompFlg", DbType.Decimal, entity.IncompFlg );
			database.AddInParameter(commandWrapper, "@HideFlg", DbType.Decimal, entity.HideFlg );
			database.AddInParameter(commandWrapper, "@HideReason", DbType.String, entity.HideReason );
			database.AddInParameter(commandWrapper, "@EdCourseSubId", DbType.Decimal, (entity.EdCourseSubId.HasValue ? (object) entity.EdCourseSubId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, (entity.SeFormId.HasValue ? (object) entity.SeFormId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsResultApproved", DbType.Decimal, (entity.IsResultApproved.HasValue ? (object) entity.IsResultApproved : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RepeatNo", DbType.Decimal, (entity.RepeatNo.HasValue ? (object) entity.RepeatNo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PayFlg", DbType.Decimal, (entity.PayFlg.HasValue ? (object) entity.PayFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PayAmount", DbType.Decimal, (entity.PayAmount.HasValue ? (object) entity.PayAmount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AbsFlg", DbType.Decimal, (entity.AbsFlg.HasValue ? (object) entity.AbsFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ReceiptNo", DbType.String, entity.ReceiptNo );
			database.AddInParameter(commandWrapper, "@ReceiptDate", DbType.DateTime, (entity.ReceiptDate.HasValue ? (object) entity.ReceiptDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ByforceFlg", DbType.Decimal, (entity.ByforceFlg.HasValue ? (object) entity.ByforceFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeCrsRegTypeId", DbType.Decimal, (entity.EdCdeCrsRegTypeId.HasValue ? (object) entity.EdCdeCrsRegTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntCoursePkgDtlId", DbType.Decimal, (entity.EntCoursePkgDtlId.HasValue ? (object) entity.EntCoursePkgDtlId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdAcadPlanDtlId", DbType.Decimal, (entity.EdAcadPlanDtlId.HasValue ? (object) entity.EdAcadPlanDtlId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@SeUserApproveId", DbType.Decimal, (entity.SeUserApproveId.HasValue ? (object) entity.SeUserApproveId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CrsRaiseMark", DbType.Decimal, (entity.CrsRaiseMark.HasValue ? (object) entity.CrsRaiseMark : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CrsCh", DbType.Int32, (entity.CrsCh.HasValue ? (object) entity.CrsCh : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AudtNote", DbType.String, entity.AudtNote );
			database.AddInParameter(commandWrapper, "@ScSectionGroupHdrId", DbType.Decimal, (entity.ScSectionGroupHdrId.HasValue ? (object) entity.ScSectionGroupHdrId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCourseOrgId", DbType.Decimal, (entity.EdCourseOrgId.HasValue ? (object) entity.EdCourseOrgId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCdeExamTypeId", DbType.Decimal, (entity.EdCdeExamTypeId.HasValue ? (object) entity.EdCdeExamTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsLastYear", DbType.Boolean, (entity.IsLastYear.HasValue ? (object) entity.IsLastYear : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RetakeFlg", DbType.Int16, (entity.RetakeFlg.HasValue ? (object) entity.RetakeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeCourseCaseId", DbType.Int32, (entity.EdCodeCourseCaseId.HasValue ? (object) entity.EdCodeCourseCaseId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdStudCourseRegId = entity.EdStudCourseRegId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
