/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdStudProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdStud"/> entity.
	///</summary>
	public abstract partial class SqlEdStudProviderBase : EdStudProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdStudProviderBase"/> instance.
		/// </summary>
		public SqlEdStudProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdStudProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdStudProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edStudId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edStudId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdStud)
					,_edStudId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
		public override TList<EdStud> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdStud>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NationalNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ClFullNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ClStudNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FatherNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ClFatherNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GrandfatherNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ClGrandfatherNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FamilyNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ClFamilyNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FatherNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GrandfatherNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FamilyNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FatherProfession", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FatherNationalNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MotherNationalNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MotherNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ClMotherNameAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MotherNameEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BirthRegNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BirthDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryInfoId1", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCountryInfoId2", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudPhoto", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsPrntStaff", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SaStfMemberPrntId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeBloodId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudLnht", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StudWght", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdentIssuePlc", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PassporIssueDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SpecialNeedFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmployeeFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdentIssueDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdentExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HecId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MarriageDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoChild", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VisaNumber", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VisaIssueDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VisaExpireDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CovidFlg", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_stud_id ") || clause.Trim().StartsWith("ed_stud_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("national_number ") || clause.Trim().StartsWith("national_number="))
				{
					database.SetParameterValue(commandWrapper, "@NationalNumber", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_name_ar ") || clause.Trim().StartsWith("full_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@FullNameAr", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cl_full_name_ar ") || clause.Trim().StartsWith("cl_full_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@ClFullNameAr", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_name_ar ") || clause.Trim().StartsWith("stud_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@StudNameAr", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cl_stud_name_ar ") || clause.Trim().StartsWith("cl_stud_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@ClStudNameAr", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("father_name_ar ") || clause.Trim().StartsWith("father_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@FatherNameAr", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cl_father_name_ar ") || clause.Trim().StartsWith("cl_father_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@ClFatherNameAr", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("grandfather_name_ar ") || clause.Trim().StartsWith("grandfather_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@GrandfatherNameAr", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cl_grandfather_name_ar ") || clause.Trim().StartsWith("cl_grandfather_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@ClGrandfatherNameAr", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("family_name_ar ") || clause.Trim().StartsWith("family_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@FamilyNameAr", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cl_family_name_ar ") || clause.Trim().StartsWith("cl_family_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@ClFamilyNameAr", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("full_name_en ") || clause.Trim().StartsWith("full_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@FullNameEn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_name_en ") || clause.Trim().StartsWith("stud_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@StudNameEn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("father_name_en ") || clause.Trim().StartsWith("father_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@FatherNameEn", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("grandfather_name_en ") || clause.Trim().StartsWith("grandfather_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@GrandfatherNameEn", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("family_name_en ") || clause.Trim().StartsWith("family_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@FamilyNameEn", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("father_profession ") || clause.Trim().StartsWith("father_profession="))
				{
					database.SetParameterValue(commandWrapper, "@FatherProfession", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("father_national_number ") || clause.Trim().StartsWith("father_national_number="))
				{
					database.SetParameterValue(commandWrapper, "@FatherNationalNumber", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mother_national_number ") || clause.Trim().StartsWith("mother_national_number="))
				{
					database.SetParameterValue(commandWrapper, "@MotherNationalNumber", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mother_name_ar ") || clause.Trim().StartsWith("mother_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@MotherNameAr", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cl_mother_name_ar ") || clause.Trim().StartsWith("cl_mother_name_ar="))
				{
					database.SetParameterValue(commandWrapper, "@ClMotherNameAr", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mother_name_en ") || clause.Trim().StartsWith("mother_name_en="))
				{
					database.SetParameterValue(commandWrapper, "@MotherNameEn", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_gender_id ") || clause.Trim().StartsWith("gs_code_gender_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeGenderId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_religion_id ") || clause.Trim().StartsWith("gs_code_religion_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeReligionId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("birth_reg_number ") || clause.Trim().StartsWith("birth_reg_number="))
				{
					database.SetParameterValue(commandWrapper, "@BirthRegNumber", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("birth_date ") || clause.Trim().StartsWith("birth_date="))
				{
					database.SetParameterValue(commandWrapper, "@BirthDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_birth_country_node_id ") || clause.Trim().StartsWith("gs_birth_country_node_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsBirthCountryNodeId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_info_id_1 ") || clause.Trim().StartsWith("gs_country_info_id_1="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryInfoId1", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_country_info_id_2 ") || clause.Trim().StartsWith("gs_country_info_id_2="))
				{
					database.SetParameterValue(commandWrapper, "@GsCountryInfoId2", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_photo ") || clause.Trim().StartsWith("stud_photo="))
				{
					database.SetParameterValue(commandWrapper, "@StudPhoto", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_ident_type_id ") || clause.Trim().StartsWith("gs_code_ident_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeIdentTypeId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_prnt_staff ") || clause.Trim().StartsWith("is_prnt_staff="))
				{
					database.SetParameterValue(commandWrapper, "@IsPrntStaff", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sa_stf_member_prnt_id ") || clause.Trim().StartsWith("sa_stf_member_prnt_id="))
				{
					database.SetParameterValue(commandWrapper, "@SaStfMemberPrntId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_blood_id ") || clause.Trim().StartsWith("gs_cde_blood_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeBloodId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_lnht ") || clause.Trim().StartsWith("stud_lnht="))
				{
					database.SetParameterValue(commandWrapper, "@StudLnht", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stud_wght ") || clause.Trim().StartsWith("stud_wght="))
				{
					database.SetParameterValue(commandWrapper, "@StudWght", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ident_issue_plc ") || clause.Trim().StartsWith("ident_issue_plc="))
				{
					database.SetParameterValue(commandWrapper, "@IdentIssuePlc", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_language_id ") || clause.Trim().StartsWith("gs_code_language_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeLanguageId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_no ") || clause.Trim().StartsWith("passpor_no="))
				{
					database.SetParameterValue(commandWrapper, "@PassporNo", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_expire_date ") || clause.Trim().StartsWith("passpor_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@PassporExpireDate", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("passpor_issue_date ") || clause.Trim().StartsWith("passpor_issue_date="))
				{
					database.SetParameterValue(commandWrapper, "@PassporIssueDate", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("special_need_flg ") || clause.Trim().StartsWith("special_need_flg="))
				{
					database.SetParameterValue(commandWrapper, "@SpecialNeedFlg", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("employee_flg ") || clause.Trim().StartsWith("employee_flg="))
				{
					database.SetParameterValue(commandWrapper, "@EmployeeFlg", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ident_issue_date ") || clause.Trim().StartsWith("ident_issue_date="))
				{
					database.SetParameterValue(commandWrapper, "@IdentIssueDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ident_expire_date ") || clause.Trim().StartsWith("ident_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@IdentExpireDate", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hec_id ") || clause.Trim().StartsWith("hec_id="))
				{
					database.SetParameterValue(commandWrapper, "@HecId", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_marital_status_id ") || clause.Trim().StartsWith("gs_cde_marital_status_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeMaritalStatusId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("marriage_date ") || clause.Trim().StartsWith("marriage_date="))
				{
					database.SetParameterValue(commandWrapper, "@MarriageDate", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("no_child ") || clause.Trim().StartsWith("no_child="))
				{
					database.SetParameterValue(commandWrapper, "@NoChild", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("visa_number ") || clause.Trim().StartsWith("visa_number="))
				{
					database.SetParameterValue(commandWrapper, "@VisaNumber", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("visa_issue_date ") || clause.Trim().StartsWith("visa_issue_date="))
				{
					database.SetParameterValue(commandWrapper, "@VisaIssueDate", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("visa_expire_date ") || clause.Trim().StartsWith("visa_expire_date="))
				{
					database.SetParameterValue(commandWrapper, "@VisaExpireDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_form_id ") || clause.Trim().StartsWith("se_form_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeFormId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("covid_flg ") || clause.Trim().StartsWith("covid_flg="))
				{
					database.SetParameterValue(commandWrapper, "@CovidFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdStud> rows = new TList<EdStud>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
		public override TList<EdStud> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_Find_Dynamic", typeof(EdStudColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdStud> rows = new TList<EdStud>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdStud> rows = new TList<EdStud>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
		public override TList<EdStud> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdStud> rows = new TList<EdStud>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByGsCdeBloodId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_GS_CDE_BLOOD key.
		///		FK_ED_STUD_GS_CDE_BLOOD Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeBloodId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCdeBloodId(TransactionManager transactionManager, System.Decimal? _gsCdeBloodId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCdeBloodId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeBloodId", DbType.Decimal, _gsCdeBloodId);
			
			IDataReader reader = null;
			TList<EdStud> rows = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeBloodId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeBloodId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeMaritalStatusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_GS_CDE_MARITAL_STATUS key.
		///		FK_ED_STUD_GS_CDE_MARITAL_STATUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeMaritalStatusId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCdeMaritalStatusId(TransactionManager transactionManager, System.Decimal? _gsCdeMaritalStatusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCdeMaritalStatusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, _gsCdeMaritalStatusId);
			
			IDataReader reader = null;
			TList<EdStud> rows = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeMaritalStatusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeMaritalStatusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeLanguageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_GS_CODE_LANGUAGE key.
		///		FK_ED_STUD_GS_CODE_LANGUAGE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeLanguageId">لغة التخصص</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCodeLanguageId(TransactionManager transactionManager, System.Decimal? _gsCodeLanguageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCodeLanguageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, _gsCodeLanguageId);
			
			IDataReader reader = null;
			TList<EdStud> rows = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySaStfMemberPrntId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_SA_STF_MEMBER key.
		///		FK_ED_STUD_SA_STF_MEMBER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_saStfMemberPrntId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStud objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetBySaStfMemberPrntId(TransactionManager transactionManager, System.Decimal? _saStfMemberPrntId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetBySaStfMemberPrntId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SaStfMemberPrntId", DbType.Decimal, _saStfMemberPrntId);
			
			IDataReader reader = null;
			TList<EdStud> rows = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySaStfMemberPrntId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySaStfMemberPrntId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByGsBirthCountryNodeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_BIRTH_COUNTRY_NOD_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsBirthCountryNodeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStud&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsBirthCountryNodeId(TransactionManager transactionManager, System.Decimal? _gsBirthCountryNodeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsBirthCountryNodeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, _gsBirthCountryNodeId);
			
			IDataReader reader = null;
			TList<EdStud> tmp = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsBirthCountryNodeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsBirthCountryNodeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCodeGenderId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_CODE_GENDER_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeGenderId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStud&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCodeGenderId(TransactionManager transactionManager, System.Decimal? _gsCodeGenderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCodeGenderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, _gsCodeGenderId);
			
			IDataReader reader = null;
			TList<EdStud> tmp = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCodeIdentTypeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_CODE_IDENT_TYPE_I_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeIdentTypeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStud&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCodeIdentTypeId(TransactionManager transactionManager, System.Decimal? _gsCodeIdentTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCodeIdentTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, _gsCodeIdentTypeId);
			
			IDataReader reader = null;
			TList<EdStud> tmp = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeIdentTypeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeIdentTypeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCodeReligionId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_CODE_RELIGION_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeReligionId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStud&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCodeReligionId(TransactionManager transactionManager, System.Decimal? _gsCodeReligionId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCodeReligionId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, _gsCodeReligionId);
			
			IDataReader reader = null;
			TList<EdStud> tmp = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeReligionId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeReligionId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCountryInfoId1
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_COUNTRY_INFO_ID_1_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryInfoId1"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStud&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCountryInfoId1(TransactionManager transactionManager, System.Decimal? _gsCountryInfoId1, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCountryInfoId1", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryInfoId1", DbType.Decimal, _gsCountryInfoId1);
			
			IDataReader reader = null;
			TList<EdStud> tmp = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId1", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId1", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByGsCountryInfoId2
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_GS_COUNTRY_INFO_ID_2_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCountryInfoId2"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;EdStud&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStud> GetByGsCountryInfoId2(TransactionManager transactionManager, System.Decimal? _gsCountryInfoId2, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByGsCountryInfoId2", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCountryInfoId2", DbType.Decimal, _gsCountryInfoId2);
			
			IDataReader reader = null;
			TList<EdStud> tmp = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId2", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCountryInfoId2", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdStudId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ED_STUD index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStud"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStud GetByEdStudId(TransactionManager transactionManager, System.Decimal _edStudId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_GetByEdStudId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
			
			IDataReader reader = null;
			TList<EdStud> tmp = new TList<EdStud>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStud object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdStud> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_STUD";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_STUD_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("NATIONAL_NUMBER", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("FULL_NAME_AR", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("CL_FULL_NAME_AR", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("STUD_NAME_AR", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("CL_STUD_NAME_AR", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("FATHER_NAME_AR", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("CL_FATHER_NAME_AR", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("GRANDFATHER_NAME_AR", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("CL_GRANDFATHER_NAME_AR", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("FAMILY_NAME_AR", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("CL_FAMILY_NAME_AR", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("FULL_NAME_EN", typeof(System.String));
			col12.AllowDBNull = false;		
			DataColumn col13 = dataTable.Columns.Add("STUD_NAME_EN", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("FATHER_NAME_EN", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("GRANDFATHER_NAME_EN", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("FAMILY_NAME_EN", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("FATHER_PROFESSION", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("FATHER_NATIONAL_NUMBER", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("MOTHER_NATIONAL_NUMBER", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("MOTHER_NAME_AR", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("CL_MOTHER_NAME_AR", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("MOTHER_NAME_EN", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("GS_CODE_GENDER_ID", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("GS_CODE_RELIGION_ID", typeof(System.Decimal));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("BIRTH_REG_NUMBER", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("BIRTH_DATE", typeof(System.DateTime));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("GS_BIRTH_COUNTRY_NODE_ID", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("GS_COUNTRY_INFO_ID_1", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("GS_COUNTRY_INFO_ID_2", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("STUD_PHOTO", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("GS_CODE_IDENT_TYPE_ID", typeof(System.Decimal));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("IS_PRNT_STAFF", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("SA_STF_MEMBER_PRNT_ID", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("GS_CDE_BLOOD_ID", typeof(System.Decimal));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("STUD_LNHT", typeof(System.Decimal));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("STUD_WGHT", typeof(System.Decimal));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("IDENT_ISSUE_PLC", typeof(System.String));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("GS_CODE_LANGUAGE_ID", typeof(System.Decimal));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("PASSPOR_NO", typeof(System.String));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("PASSPOR_EXPIRE_DATE", typeof(System.DateTime));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("PASSPOR_ISSUE_DATE", typeof(System.DateTime));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("SPECIAL_NEED_FLG", typeof(System.Boolean));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("EMPLOYEE_FLG", typeof(System.Boolean));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("IDENT_ISSUE_DATE", typeof(System.DateTime));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("IDENT_EXPIRE_DATE", typeof(System.DateTime));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("HEC_ID", typeof(System.String));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("GS_CDE_MARITAL_STATUS_ID", typeof(System.Decimal));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("MARRIAGE_DATE", typeof(System.DateTime));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("NO_CHILD", typeof(System.Int32));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("VISA_NUMBER", typeof(System.String));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("VISA_ISSUE_DATE", typeof(System.DateTime));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("VISA_EXPIRE_DATE", typeof(System.DateTime));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("SE_FORM_ID", typeof(System.Decimal));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("COVID_FLG", typeof(System.Boolean));
			col56.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_STUD_ID", "ED_STUD_ID");
			bulkCopy.ColumnMappings.Add("NATIONAL_NUMBER", "NATIONAL_NUMBER");
			bulkCopy.ColumnMappings.Add("FULL_NAME_AR", "FULL_NAME_AR");
			bulkCopy.ColumnMappings.Add("CL_FULL_NAME_AR", "CL_FULL_NAME_AR");
			bulkCopy.ColumnMappings.Add("STUD_NAME_AR", "STUD_NAME_AR");
			bulkCopy.ColumnMappings.Add("CL_STUD_NAME_AR", "CL_STUD_NAME_AR");
			bulkCopy.ColumnMappings.Add("FATHER_NAME_AR", "FATHER_NAME_AR");
			bulkCopy.ColumnMappings.Add("CL_FATHER_NAME_AR", "CL_FATHER_NAME_AR");
			bulkCopy.ColumnMappings.Add("GRANDFATHER_NAME_AR", "GRANDFATHER_NAME_AR");
			bulkCopy.ColumnMappings.Add("CL_GRANDFATHER_NAME_AR", "CL_GRANDFATHER_NAME_AR");
			bulkCopy.ColumnMappings.Add("FAMILY_NAME_AR", "FAMILY_NAME_AR");
			bulkCopy.ColumnMappings.Add("CL_FAMILY_NAME_AR", "CL_FAMILY_NAME_AR");
			bulkCopy.ColumnMappings.Add("FULL_NAME_EN", "FULL_NAME_EN");
			bulkCopy.ColumnMappings.Add("STUD_NAME_EN", "STUD_NAME_EN");
			bulkCopy.ColumnMappings.Add("FATHER_NAME_EN", "FATHER_NAME_EN");
			bulkCopy.ColumnMappings.Add("GRANDFATHER_NAME_EN", "GRANDFATHER_NAME_EN");
			bulkCopy.ColumnMappings.Add("FAMILY_NAME_EN", "FAMILY_NAME_EN");
			bulkCopy.ColumnMappings.Add("FATHER_PROFESSION", "FATHER_PROFESSION");
			bulkCopy.ColumnMappings.Add("FATHER_NATIONAL_NUMBER", "FATHER_NATIONAL_NUMBER");
			bulkCopy.ColumnMappings.Add("MOTHER_NATIONAL_NUMBER", "MOTHER_NATIONAL_NUMBER");
			bulkCopy.ColumnMappings.Add("MOTHER_NAME_AR", "MOTHER_NAME_AR");
			bulkCopy.ColumnMappings.Add("CL_MOTHER_NAME_AR", "CL_MOTHER_NAME_AR");
			bulkCopy.ColumnMappings.Add("MOTHER_NAME_EN", "MOTHER_NAME_EN");
			bulkCopy.ColumnMappings.Add("GS_CODE_GENDER_ID", "GS_CODE_GENDER_ID");
			bulkCopy.ColumnMappings.Add("GS_CODE_RELIGION_ID", "GS_CODE_RELIGION_ID");
			bulkCopy.ColumnMappings.Add("BIRTH_REG_NUMBER", "BIRTH_REG_NUMBER");
			bulkCopy.ColumnMappings.Add("BIRTH_DATE", "BIRTH_DATE");
			bulkCopy.ColumnMappings.Add("GS_BIRTH_COUNTRY_NODE_ID", "GS_BIRTH_COUNTRY_NODE_ID");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_INFO_ID_1", "GS_COUNTRY_INFO_ID_1");
			bulkCopy.ColumnMappings.Add("GS_COUNTRY_INFO_ID_2", "GS_COUNTRY_INFO_ID_2");
			bulkCopy.ColumnMappings.Add("STUD_PHOTO", "STUD_PHOTO");
			bulkCopy.ColumnMappings.Add("GS_CODE_IDENT_TYPE_ID", "GS_CODE_IDENT_TYPE_ID");
			bulkCopy.ColumnMappings.Add("IS_PRNT_STAFF", "IS_PRNT_STAFF");
			bulkCopy.ColumnMappings.Add("SA_STF_MEMBER_PRNT_ID", "SA_STF_MEMBER_PRNT_ID");
			bulkCopy.ColumnMappings.Add("GS_CDE_BLOOD_ID", "GS_CDE_BLOOD_ID");
			bulkCopy.ColumnMappings.Add("STUD_LNHT", "STUD_LNHT");
			bulkCopy.ColumnMappings.Add("STUD_WGHT", "STUD_WGHT");
			bulkCopy.ColumnMappings.Add("IDENT_ISSUE_PLC", "IDENT_ISSUE_PLC");
			bulkCopy.ColumnMappings.Add("GS_CODE_LANGUAGE_ID", "GS_CODE_LANGUAGE_ID");
			bulkCopy.ColumnMappings.Add("PASSPOR_NO", "PASSPOR_NO");
			bulkCopy.ColumnMappings.Add("PASSPOR_EXPIRE_DATE", "PASSPOR_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("PASSPOR_ISSUE_DATE", "PASSPOR_ISSUE_DATE");
			bulkCopy.ColumnMappings.Add("SPECIAL_NEED_FLG", "SPECIAL_NEED_FLG");
			bulkCopy.ColumnMappings.Add("EMPLOYEE_FLG", "EMPLOYEE_FLG");
			bulkCopy.ColumnMappings.Add("IDENT_ISSUE_DATE", "IDENT_ISSUE_DATE");
			bulkCopy.ColumnMappings.Add("IDENT_EXPIRE_DATE", "IDENT_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("HEC_ID", "HEC_ID");
			bulkCopy.ColumnMappings.Add("GS_CDE_MARITAL_STATUS_ID", "GS_CDE_MARITAL_STATUS_ID");
			bulkCopy.ColumnMappings.Add("MARRIAGE_DATE", "MARRIAGE_DATE");
			bulkCopy.ColumnMappings.Add("NO_CHILD", "NO_CHILD");
			bulkCopy.ColumnMappings.Add("VISA_NUMBER", "VISA_NUMBER");
			bulkCopy.ColumnMappings.Add("VISA_ISSUE_DATE", "VISA_ISSUE_DATE");
			bulkCopy.ColumnMappings.Add("VISA_EXPIRE_DATE", "VISA_EXPIRE_DATE");
			bulkCopy.ColumnMappings.Add("SE_FORM_ID", "SE_FORM_ID");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("COVID_FLG", "COVID_FLG");
			
			foreach(UMIS_VER2.BusinessLyer.EdStud entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_STUD_ID"] = entity.EdStudId;
							
				
					row["NATIONAL_NUMBER"] = entity.NationalNumber;
							
				
					row["FULL_NAME_AR"] = entity.FullNameAr;
							
				
					row["CL_FULL_NAME_AR"] = entity.ClFullNameAr;
							
				
					row["STUD_NAME_AR"] = entity.StudNameAr;
							
				
					row["CL_STUD_NAME_AR"] = entity.ClStudNameAr;
							
				
					row["FATHER_NAME_AR"] = entity.FatherNameAr;
							
				
					row["CL_FATHER_NAME_AR"] = entity.ClFatherNameAr;
							
				
					row["GRANDFATHER_NAME_AR"] = entity.GrandfatherNameAr;
							
				
					row["CL_GRANDFATHER_NAME_AR"] = entity.ClGrandfatherNameAr;
							
				
					row["FAMILY_NAME_AR"] = entity.FamilyNameAr;
							
				
					row["CL_FAMILY_NAME_AR"] = entity.ClFamilyNameAr;
							
				
					row["FULL_NAME_EN"] = entity.FullNameEn;
							
				
					row["STUD_NAME_EN"] = entity.StudNameEn;
							
				
					row["FATHER_NAME_EN"] = entity.FatherNameEn;
							
				
					row["GRANDFATHER_NAME_EN"] = entity.GrandfatherNameEn;
							
				
					row["FAMILY_NAME_EN"] = entity.FamilyNameEn;
							
				
					row["FATHER_PROFESSION"] = entity.FatherProfession;
							
				
					row["FATHER_NATIONAL_NUMBER"] = entity.FatherNationalNumber;
							
				
					row["MOTHER_NATIONAL_NUMBER"] = entity.MotherNationalNumber;
							
				
					row["MOTHER_NAME_AR"] = entity.MotherNameAr;
							
				
					row["CL_MOTHER_NAME_AR"] = entity.ClMotherNameAr;
							
				
					row["MOTHER_NAME_EN"] = entity.MotherNameEn;
							
				
					row["GS_CODE_GENDER_ID"] = entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value;
							
				
					row["GS_CODE_RELIGION_ID"] = entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId  : System.DBNull.Value;
							
				
					row["BIRTH_REG_NUMBER"] = entity.BirthRegNumber;
							
				
					row["BIRTH_DATE"] = entity.BirthDate.HasValue ? (object) entity.BirthDate  : System.DBNull.Value;
							
				
					row["GS_BIRTH_COUNTRY_NODE_ID"] = entity.GsBirthCountryNodeId.HasValue ? (object) entity.GsBirthCountryNodeId  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_INFO_ID_1"] = entity.GsCountryInfoId1.HasValue ? (object) entity.GsCountryInfoId1  : System.DBNull.Value;
							
				
					row["GS_COUNTRY_INFO_ID_2"] = entity.GsCountryInfoId2.HasValue ? (object) entity.GsCountryInfoId2  : System.DBNull.Value;
							
				
					row["STUD_PHOTO"] = entity.StudPhoto;
							
				
					row["GS_CODE_IDENT_TYPE_ID"] = entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId  : System.DBNull.Value;
							
				
					row["IS_PRNT_STAFF"] = entity.IsPrntStaff.HasValue ? (object) entity.IsPrntStaff  : System.DBNull.Value;
							
				
					row["SA_STF_MEMBER_PRNT_ID"] = entity.SaStfMemberPrntId.HasValue ? (object) entity.SaStfMemberPrntId  : System.DBNull.Value;
							
				
					row["GS_CDE_BLOOD_ID"] = entity.GsCdeBloodId.HasValue ? (object) entity.GsCdeBloodId  : System.DBNull.Value;
							
				
					row["STUD_LNHT"] = entity.StudLnht.HasValue ? (object) entity.StudLnht  : System.DBNull.Value;
							
				
					row["STUD_WGHT"] = entity.StudWght.HasValue ? (object) entity.StudWght  : System.DBNull.Value;
							
				
					row["IDENT_ISSUE_PLC"] = entity.IdentIssuePlc;
							
				
					row["GS_CODE_LANGUAGE_ID"] = entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value;
							
				
					row["PASSPOR_NO"] = entity.PassporNo;
							
				
					row["PASSPOR_EXPIRE_DATE"] = entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate  : System.DBNull.Value;
							
				
					row["PASSPOR_ISSUE_DATE"] = entity.PassporIssueDate.HasValue ? (object) entity.PassporIssueDate  : System.DBNull.Value;
							
				
					row["SPECIAL_NEED_FLG"] = entity.SpecialNeedFlg.HasValue ? (object) entity.SpecialNeedFlg  : System.DBNull.Value;
							
				
					row["EMPLOYEE_FLG"] = entity.EmployeeFlg.HasValue ? (object) entity.EmployeeFlg  : System.DBNull.Value;
							
				
					row["IDENT_ISSUE_DATE"] = entity.IdentIssueDate.HasValue ? (object) entity.IdentIssueDate  : System.DBNull.Value;
							
				
					row["IDENT_EXPIRE_DATE"] = entity.IdentExpireDate.HasValue ? (object) entity.IdentExpireDate  : System.DBNull.Value;
							
				
					row["HEC_ID"] = entity.HecId;
							
				
					row["GS_CDE_MARITAL_STATUS_ID"] = entity.GsCdeMaritalStatusId.HasValue ? (object) entity.GsCdeMaritalStatusId  : System.DBNull.Value;
							
				
					row["MARRIAGE_DATE"] = entity.MarriageDate.HasValue ? (object) entity.MarriageDate  : System.DBNull.Value;
							
				
					row["NO_CHILD"] = entity.NoChild.HasValue ? (object) entity.NoChild  : System.DBNull.Value;
							
				
					row["VISA_NUMBER"] = entity.VisaNumber;
							
				
					row["VISA_ISSUE_DATE"] = entity.VisaIssueDate.HasValue ? (object) entity.VisaIssueDate  : System.DBNull.Value;
							
				
					row["VISA_EXPIRE_DATE"] = entity.VisaExpireDate.HasValue ? (object) entity.VisaExpireDate  : System.DBNull.Value;
							
				
					row["SE_FORM_ID"] = entity.SeFormId.HasValue ? (object) entity.SeFormId  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["COVID_FLG"] = entity.CovidFlg.HasValue ? (object) entity.CovidFlg  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdStud entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdStud object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStud object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStud object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStud entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdStudId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@NationalNumber", DbType.String, entity.NationalNumber );
			database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, entity.FullNameAr );
			database.AddInParameter(commandWrapper, "@ClFullNameAr", DbType.String, entity.ClFullNameAr );
			database.AddInParameter(commandWrapper, "@StudNameAr", DbType.String, entity.StudNameAr );
			database.AddInParameter(commandWrapper, "@ClStudNameAr", DbType.String, entity.ClStudNameAr );
			database.AddInParameter(commandWrapper, "@FatherNameAr", DbType.String, entity.FatherNameAr );
			database.AddInParameter(commandWrapper, "@ClFatherNameAr", DbType.String, entity.ClFatherNameAr );
			database.AddInParameter(commandWrapper, "@GrandfatherNameAr", DbType.String, entity.GrandfatherNameAr );
			database.AddInParameter(commandWrapper, "@ClGrandfatherNameAr", DbType.String, entity.ClGrandfatherNameAr );
			database.AddInParameter(commandWrapper, "@FamilyNameAr", DbType.String, entity.FamilyNameAr );
			database.AddInParameter(commandWrapper, "@ClFamilyNameAr", DbType.String, entity.ClFamilyNameAr );
			database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, entity.FullNameEn );
			database.AddInParameter(commandWrapper, "@StudNameEn", DbType.String, entity.StudNameEn );
			database.AddInParameter(commandWrapper, "@FatherNameEn", DbType.String, entity.FatherNameEn );
			database.AddInParameter(commandWrapper, "@GrandfatherNameEn", DbType.String, entity.GrandfatherNameEn );
			database.AddInParameter(commandWrapper, "@FamilyNameEn", DbType.String, entity.FamilyNameEn );
			database.AddInParameter(commandWrapper, "@FatherProfession", DbType.String, entity.FatherProfession );
			database.AddInParameter(commandWrapper, "@FatherNationalNumber", DbType.String, entity.FatherNationalNumber );
			database.AddInParameter(commandWrapper, "@MotherNationalNumber", DbType.String, entity.MotherNationalNumber );
			database.AddInParameter(commandWrapper, "@MotherNameAr", DbType.String, entity.MotherNameAr );
			database.AddInParameter(commandWrapper, "@ClMotherNameAr", DbType.String, entity.ClMotherNameAr );
			database.AddInParameter(commandWrapper, "@MotherNameEn", DbType.String, entity.MotherNameEn );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, (entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BirthRegNumber", DbType.String, entity.BirthRegNumber );
			database.AddInParameter(commandWrapper, "@BirthDate", DbType.Date, (entity.BirthDate.HasValue ? (object) entity.BirthDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, (entity.GsBirthCountryNodeId.HasValue ? (object) entity.GsBirthCountryNodeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryInfoId1", DbType.Decimal, (entity.GsCountryInfoId1.HasValue ? (object) entity.GsCountryInfoId1  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCountryInfoId2", DbType.Decimal, (entity.GsCountryInfoId2.HasValue ? (object) entity.GsCountryInfoId2  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StudPhoto", DbType.String, entity.StudPhoto );
			database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, (entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsPrntStaff", DbType.Decimal, (entity.IsPrntStaff.HasValue ? (object) entity.IsPrntStaff  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SaStfMemberPrntId", DbType.Decimal, (entity.SaStfMemberPrntId.HasValue ? (object) entity.SaStfMemberPrntId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCdeBloodId", DbType.Decimal, (entity.GsCdeBloodId.HasValue ? (object) entity.GsCdeBloodId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StudLnht", DbType.Decimal, (entity.StudLnht.HasValue ? (object) entity.StudLnht  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StudWght", DbType.Decimal, (entity.StudWght.HasValue ? (object) entity.StudWght  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdentIssuePlc", DbType.String, entity.IdentIssuePlc );
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, entity.PassporNo );
			database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, (entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PassporIssueDate", DbType.Date, (entity.PassporIssueDate.HasValue ? (object) entity.PassporIssueDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SpecialNeedFlg", DbType.Boolean, (entity.SpecialNeedFlg.HasValue ? (object) entity.SpecialNeedFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EmployeeFlg", DbType.Boolean, (entity.EmployeeFlg.HasValue ? (object) entity.EmployeeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdentIssueDate", DbType.Date, (entity.IdentIssueDate.HasValue ? (object) entity.IdentIssueDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdentExpireDate", DbType.Date, (entity.IdentExpireDate.HasValue ? (object) entity.IdentExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@HecId", DbType.String, entity.HecId );
			database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, (entity.GsCdeMaritalStatusId.HasValue ? (object) entity.GsCdeMaritalStatusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MarriageDate", DbType.Date, (entity.MarriageDate.HasValue ? (object) entity.MarriageDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NoChild", DbType.Int32, (entity.NoChild.HasValue ? (object) entity.NoChild  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@VisaNumber", DbType.String, entity.VisaNumber );
			database.AddInParameter(commandWrapper, "@VisaIssueDate", DbType.Date, (entity.VisaIssueDate.HasValue ? (object) entity.VisaIssueDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@VisaExpireDate", DbType.Date, (entity.VisaExpireDate.HasValue ? (object) entity.VisaExpireDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, (entity.SeFormId.HasValue ? (object) entity.SeFormId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CovidFlg", DbType.Boolean, (entity.CovidFlg.HasValue ? (object) entity.CovidFlg  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edStudId = database.GetParameterValue(commandWrapper, "@EdStudId");
			entity.EdStudId = (System.Decimal)_edStudId;
			
			entity.OriginalEdStudId = entity.EdStudId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStud object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdStud object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStud entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, entity.EdStudId );
			database.AddInParameter(commandWrapper, "@OriginalEdStudId", DbType.Decimal, entity.OriginalEdStudId);
			database.AddInParameter(commandWrapper, "@NationalNumber", DbType.String, entity.NationalNumber );
			database.AddInParameter(commandWrapper, "@FullNameAr", DbType.String, entity.FullNameAr );
			database.AddInParameter(commandWrapper, "@ClFullNameAr", DbType.String, entity.ClFullNameAr );
			database.AddInParameter(commandWrapper, "@StudNameAr", DbType.String, entity.StudNameAr );
			database.AddInParameter(commandWrapper, "@ClStudNameAr", DbType.String, entity.ClStudNameAr );
			database.AddInParameter(commandWrapper, "@FatherNameAr", DbType.String, entity.FatherNameAr );
			database.AddInParameter(commandWrapper, "@ClFatherNameAr", DbType.String, entity.ClFatherNameAr );
			database.AddInParameter(commandWrapper, "@GrandfatherNameAr", DbType.String, entity.GrandfatherNameAr );
			database.AddInParameter(commandWrapper, "@ClGrandfatherNameAr", DbType.String, entity.ClGrandfatherNameAr );
			database.AddInParameter(commandWrapper, "@FamilyNameAr", DbType.String, entity.FamilyNameAr );
			database.AddInParameter(commandWrapper, "@ClFamilyNameAr", DbType.String, entity.ClFamilyNameAr );
			database.AddInParameter(commandWrapper, "@FullNameEn", DbType.String, entity.FullNameEn );
			database.AddInParameter(commandWrapper, "@StudNameEn", DbType.String, entity.StudNameEn );
			database.AddInParameter(commandWrapper, "@FatherNameEn", DbType.String, entity.FatherNameEn );
			database.AddInParameter(commandWrapper, "@GrandfatherNameEn", DbType.String, entity.GrandfatherNameEn );
			database.AddInParameter(commandWrapper, "@FamilyNameEn", DbType.String, entity.FamilyNameEn );
			database.AddInParameter(commandWrapper, "@FatherProfession", DbType.String, entity.FatherProfession );
			database.AddInParameter(commandWrapper, "@FatherNationalNumber", DbType.String, entity.FatherNationalNumber );
			database.AddInParameter(commandWrapper, "@MotherNationalNumber", DbType.String, entity.MotherNationalNumber );
			database.AddInParameter(commandWrapper, "@MotherNameAr", DbType.String, entity.MotherNameAr );
			database.AddInParameter(commandWrapper, "@ClMotherNameAr", DbType.String, entity.ClMotherNameAr );
			database.AddInParameter(commandWrapper, "@MotherNameEn", DbType.String, entity.MotherNameEn );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeReligionId", DbType.Decimal, (entity.GsCodeReligionId.HasValue ? (object) entity.GsCodeReligionId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BirthRegNumber", DbType.String, entity.BirthRegNumber );
			database.AddInParameter(commandWrapper, "@BirthDate", DbType.Date, (entity.BirthDate.HasValue ? (object) entity.BirthDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsBirthCountryNodeId", DbType.Decimal, (entity.GsBirthCountryNodeId.HasValue ? (object) entity.GsBirthCountryNodeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryInfoId1", DbType.Decimal, (entity.GsCountryInfoId1.HasValue ? (object) entity.GsCountryInfoId1 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCountryInfoId2", DbType.Decimal, (entity.GsCountryInfoId2.HasValue ? (object) entity.GsCountryInfoId2 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StudPhoto", DbType.String, entity.StudPhoto );
			database.AddInParameter(commandWrapper, "@GsCodeIdentTypeId", DbType.Decimal, (entity.GsCodeIdentTypeId.HasValue ? (object) entity.GsCodeIdentTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsPrntStaff", DbType.Decimal, (entity.IsPrntStaff.HasValue ? (object) entity.IsPrntStaff : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SaStfMemberPrntId", DbType.Decimal, (entity.SaStfMemberPrntId.HasValue ? (object) entity.SaStfMemberPrntId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCdeBloodId", DbType.Decimal, (entity.GsCdeBloodId.HasValue ? (object) entity.GsCdeBloodId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StudLnht", DbType.Decimal, (entity.StudLnht.HasValue ? (object) entity.StudLnht : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StudWght", DbType.Decimal, (entity.StudWght.HasValue ? (object) entity.StudWght : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdentIssuePlc", DbType.String, entity.IdentIssuePlc );
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PassporNo", DbType.String, entity.PassporNo );
			database.AddInParameter(commandWrapper, "@PassporExpireDate", DbType.Date, (entity.PassporExpireDate.HasValue ? (object) entity.PassporExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PassporIssueDate", DbType.Date, (entity.PassporIssueDate.HasValue ? (object) entity.PassporIssueDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SpecialNeedFlg", DbType.Boolean, (entity.SpecialNeedFlg.HasValue ? (object) entity.SpecialNeedFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EmployeeFlg", DbType.Boolean, (entity.EmployeeFlg.HasValue ? (object) entity.EmployeeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdentIssueDate", DbType.Date, (entity.IdentIssueDate.HasValue ? (object) entity.IdentIssueDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdentExpireDate", DbType.Date, (entity.IdentExpireDate.HasValue ? (object) entity.IdentExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@HecId", DbType.String, entity.HecId );
			database.AddInParameter(commandWrapper, "@GsCdeMaritalStatusId", DbType.Decimal, (entity.GsCdeMaritalStatusId.HasValue ? (object) entity.GsCdeMaritalStatusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MarriageDate", DbType.Date, (entity.MarriageDate.HasValue ? (object) entity.MarriageDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NoChild", DbType.Int32, (entity.NoChild.HasValue ? (object) entity.NoChild : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@VisaNumber", DbType.String, entity.VisaNumber );
			database.AddInParameter(commandWrapper, "@VisaIssueDate", DbType.Date, (entity.VisaIssueDate.HasValue ? (object) entity.VisaIssueDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@VisaExpireDate", DbType.Date, (entity.VisaExpireDate.HasValue ? (object) entity.VisaExpireDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeFormId", DbType.Decimal, (entity.SeFormId.HasValue ? (object) entity.SeFormId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CovidFlg", DbType.Boolean, (entity.CovidFlg.HasValue ? (object) entity.CovidFlg : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdStudId = entity.EdStudId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
