/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlScScheduleDtlProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="ScScheduleDtl"/> entity.
	///</summary>
	public abstract partial class SqlScScheduleDtlProviderBase : ScScheduleDtlProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlScScheduleDtlProviderBase"/> instance.
		/// </summary>
		public SqlScScheduleDtlProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlScScheduleDtlProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlScScheduleDtlProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_scScheduleDtlId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _scScheduleDtlId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@ScScheduleDtlId", DbType.Decimal, _scScheduleDtlId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(ScScheduleDtl)
					,_scScheduleDtlId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
		public override TList<ScScheduleDtl> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<ScScheduleDtl>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@ScScheduleDtlId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScScheduleHdrId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GroupDescrAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GroupDescrEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GroupOrder", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsResultApproved", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserRsultApproveId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RsultApproveDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoStudents", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoStudWait", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsClosed", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NotesEmp", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NoStudMax", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InternalFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WaitlistFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CnclFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("sc_schedule_dtl_id ") || clause.Trim().StartsWith("sc_schedule_dtl_id="))
				{
					database.SetParameterValue(commandWrapper, "@ScScheduleDtlId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sc_schedule_hdr_id ") || clause.Trim().StartsWith("sc_schedule_hdr_id="))
				{
					database.SetParameterValue(commandWrapper, "@ScScheduleHdrId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("group_descr_ar ") || clause.Trim().StartsWith("group_descr_ar="))
				{
					database.SetParameterValue(commandWrapper, "@GroupDescrAr", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("group_descr_en ") || clause.Trim().StartsWith("group_descr_en="))
				{
					database.SetParameterValue(commandWrapper, "@GroupDescrEn", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("group_order ") || clause.Trim().StartsWith("group_order="))
				{
					database.SetParameterValue(commandWrapper, "@GroupOrder", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_gender_id ") || clause.Trim().StartsWith("gs_code_gender_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeGenderId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_faculty_info_id ") || clause.Trim().StartsWith("as_faculty_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsFacultyInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_result_approved ") || clause.Trim().StartsWith("is_result_approved="))
				{
					database.SetParameterValue(commandWrapper, "@IsResultApproved", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_rsult_approve_id ") || clause.Trim().StartsWith("se_user_rsult_approve_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserRsultApproveId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("rsult_approve_date ") || clause.Trim().StartsWith("rsult_approve_date="))
				{
					database.SetParameterValue(commandWrapper, "@RsultApproveDate", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("no_students ") || clause.Trim().StartsWith("no_students="))
				{
					database.SetParameterValue(commandWrapper, "@NoStudents", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("no_stud_wait ") || clause.Trim().StartsWith("no_stud_wait="))
				{
					database.SetParameterValue(commandWrapper, "@NoStudWait", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("online_flg ") || clause.Trim().StartsWith("online_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OnlineFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_closed ") || clause.Trim().StartsWith("is_closed="))
				{
					database.SetParameterValue(commandWrapper, "@IsClosed", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes_emp ") || clause.Trim().StartsWith("notes_emp="))
				{
					database.SetParameterValue(commandWrapper, "@NotesEmp", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("no_stud_max ") || clause.Trim().StartsWith("no_stud_max="))
				{
					database.SetParameterValue(commandWrapper, "@NoStudMax", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("internal_flg ") || clause.Trim().StartsWith("internal_flg="))
				{
					database.SetParameterValue(commandWrapper, "@InternalFlg", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("waitlist_flg ") || clause.Trim().StartsWith("waitlist_flg="))
				{
					database.SetParameterValue(commandWrapper, "@WaitlistFlg", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_language_id ") || clause.Trim().StartsWith("gs_code_language_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeLanguageId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cncl_flg ") || clause.Trim().StartsWith("cncl_flg="))
				{
					database.SetParameterValue(commandWrapper, "@CnclFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("part_time_flg ") || clause.Trim().StartsWith("part_time_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PartTimeFlg", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
		public override TList<ScScheduleDtl> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_Find_Dynamic", typeof(ScScheduleDtlColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ScScheduleDtl> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
		public override TList<ScScheduleDtl> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByScScheduleHdrId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_SCHEDULE_DETAILS_SC_SCHEDULE_HDR key.
		///		FK_SC_SCHEDULE_DETAILS_SC_SCHEDULE_HDR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scScheduleHdrId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ScScheduleDtl> GetByScScheduleHdrId(TransactionManager transactionManager, System.Decimal _scScheduleHdrId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByScScheduleHdrId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScScheduleHdrId", DbType.Decimal, _scScheduleHdrId);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsFacultyInfoId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_SCHEDULE_DTL_AS_FACULTY_INFO key.
		///		FK_SC_SCHEDULE_DTL_AS_FACULTY_INFO Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ScScheduleDtl> GetByAsFacultyInfoId(TransactionManager transactionManager, System.Decimal? _asFacultyInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByAsFacultyInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeGenderId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_SCHEDULE_DTL_GS_CODE_GENDER key.
		///		FK_SC_SCHEDULE_DTL_GS_CODE_GENDER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeGenderId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ScScheduleDtl> GetByGsCodeGenderId(TransactionManager transactionManager, System.Decimal? _gsCodeGenderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByGsCodeGenderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, _gsCodeGenderId);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeLanguageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_SCHEDULE_DTL_GS_CODE_LANGUAGE key.
		///		FK_SC_SCHEDULE_DTL_GS_CODE_LANGUAGE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeLanguageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ScScheduleDtl> GetByGsCodeLanguageId(TransactionManager transactionManager, System.Decimal? _gsCodeLanguageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByGsCodeLanguageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, _gsCodeLanguageId);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySeUserRsultApproveId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_SC_SCHEDULE_DTL_SE_USER key.
		///		FK_SC_SCHEDULE_DTL_SE_USER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_seUserRsultApproveId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.ScScheduleDtl objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ScScheduleDtl> GetBySeUserRsultApproveId(TransactionManager transactionManager, System.Decimal? _seUserRsultApproveId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetBySeUserRsultApproveId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SeUserRsultApproveId", DbType.Decimal, _seUserRsultApproveId);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> rows = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySeUserRsultApproveId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySeUserRsultApproveId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByScScheduleDtlId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_SC_SCHEDULE_DETAILS index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scScheduleDtlId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.ScScheduleDtl"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.ScScheduleDtl GetByScScheduleDtlId(TransactionManager transactionManager, System.Decimal _scScheduleDtlId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByScScheduleDtlId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScScheduleDtlId", DbType.Decimal, _scScheduleDtlId);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> tmp = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScScheduleDtlId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScScheduleDtlId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByScScheduleHdrIdGroupOrder
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_SC_SCHEDULE_DTL index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scScheduleHdrId"></param>
		/// <param name="_groupOrder"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.ScScheduleDtl"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.ScScheduleDtl GetByScScheduleHdrIdGroupOrder(TransactionManager transactionManager, System.Decimal _scScheduleHdrId, System.Decimal? _groupOrder, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByScScheduleHdrIdGroupOrder", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScScheduleHdrId", DbType.Decimal, _scScheduleHdrId);
				database.AddInParameter(commandWrapper, "@GroupOrder", DbType.Decimal, _groupOrder);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> tmp = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrIdGroupOrder", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrIdGroupOrder", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByScScheduleHdrIdGroupDescrAr
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_SC_SCHEDULE_DTL_AR index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scScheduleHdrId"></param>
		/// <param name="_groupDescrAr"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.ScScheduleDtl"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.ScScheduleDtl GetByScScheduleHdrIdGroupDescrAr(TransactionManager transactionManager, System.Decimal _scScheduleHdrId, System.String _groupDescrAr, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByScScheduleHdrIdGroupDescrAr", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScScheduleHdrId", DbType.Decimal, _scScheduleHdrId);
				database.AddInParameter(commandWrapper, "@GroupDescrAr", DbType.String, _groupDescrAr);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> tmp = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrIdGroupDescrAr", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrIdGroupDescrAr", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByScScheduleHdrIdGroupDescrEn
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_SC_SCHEDULE_DTL_EN index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scScheduleHdrId"></param>
		/// <param name="_groupDescrEn"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.ScScheduleDtl"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.ScScheduleDtl GetByScScheduleHdrIdGroupDescrEn(TransactionManager transactionManager, System.Decimal _scScheduleHdrId, System.String _groupDescrEn, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_GetByScScheduleHdrIdGroupDescrEn", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScScheduleHdrId", DbType.Decimal, _scScheduleHdrId);
				database.AddInParameter(commandWrapper, "@GroupDescrEn", DbType.String, _groupDescrEn);
			
			IDataReader reader = null;
			TList<ScScheduleDtl> tmp = new TList<ScScheduleDtl>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrIdGroupDescrEn", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScScheduleHdrIdGroupDescrEn", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.ScScheduleDtl object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.ScScheduleDtl> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "SC_SCHEDULE_DTL";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("SC_SCHEDULE_DTL_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("SC_SCHEDULE_HDR_ID", typeof(System.Decimal));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("GROUP_DESCR_AR", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("GROUP_DESCR_EN", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("GROUP_ORDER", typeof(System.Decimal));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("GS_CODE_GENDER_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("NOTES", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("AS_FACULTY_INFO_ID", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("IS_RESULT_APPROVED", typeof(System.Decimal));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("SE_USER_RSULT_APPROVE_ID", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("RSULT_APPROVE_DATE", typeof(System.DateTime));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("NO_STUDENTS", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("NO_STUD_WAIT", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ONLINE_FLG", typeof(System.Decimal));
			col13.AllowDBNull = false;		
			DataColumn col14 = dataTable.Columns.Add("IS_CLOSED", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("NOTES_EMP", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("NO_STUD_MAX", typeof(System.Decimal));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("INTERNAL_FLG", typeof(System.Decimal));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("WAITLIST_FLG", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("GS_CODE_LANGUAGE_ID", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("CNCL_FLG", typeof(System.Decimal));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("PART_TIME_FLG", typeof(System.Int32));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col23.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("SC_SCHEDULE_DTL_ID", "SC_SCHEDULE_DTL_ID");
			bulkCopy.ColumnMappings.Add("SC_SCHEDULE_HDR_ID", "SC_SCHEDULE_HDR_ID");
			bulkCopy.ColumnMappings.Add("GROUP_DESCR_AR", "GROUP_DESCR_AR");
			bulkCopy.ColumnMappings.Add("GROUP_DESCR_EN", "GROUP_DESCR_EN");
			bulkCopy.ColumnMappings.Add("GROUP_ORDER", "GROUP_ORDER");
			bulkCopy.ColumnMappings.Add("GS_CODE_GENDER_ID", "GS_CODE_GENDER_ID");
			bulkCopy.ColumnMappings.Add("NOTES", "NOTES");
			bulkCopy.ColumnMappings.Add("AS_FACULTY_INFO_ID", "AS_FACULTY_INFO_ID");
			bulkCopy.ColumnMappings.Add("IS_RESULT_APPROVED", "IS_RESULT_APPROVED");
			bulkCopy.ColumnMappings.Add("SE_USER_RSULT_APPROVE_ID", "SE_USER_RSULT_APPROVE_ID");
			bulkCopy.ColumnMappings.Add("RSULT_APPROVE_DATE", "RSULT_APPROVE_DATE");
			bulkCopy.ColumnMappings.Add("NO_STUDENTS", "NO_STUDENTS");
			bulkCopy.ColumnMappings.Add("NO_STUD_WAIT", "NO_STUD_WAIT");
			bulkCopy.ColumnMappings.Add("ONLINE_FLG", "ONLINE_FLG");
			bulkCopy.ColumnMappings.Add("IS_CLOSED", "IS_CLOSED");
			bulkCopy.ColumnMappings.Add("NOTES_EMP", "NOTES_EMP");
			bulkCopy.ColumnMappings.Add("NO_STUD_MAX", "NO_STUD_MAX");
			bulkCopy.ColumnMappings.Add("INTERNAL_FLG", "INTERNAL_FLG");
			bulkCopy.ColumnMappings.Add("WAITLIST_FLG", "WAITLIST_FLG");
			bulkCopy.ColumnMappings.Add("GS_CODE_LANGUAGE_ID", "GS_CODE_LANGUAGE_ID");
			bulkCopy.ColumnMappings.Add("CNCL_FLG", "CNCL_FLG");
			bulkCopy.ColumnMappings.Add("PART_TIME_FLG", "PART_TIME_FLG");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			
			foreach(UMIS_VER2.BusinessLyer.ScScheduleDtl entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["SC_SCHEDULE_DTL_ID"] = entity.ScScheduleDtlId;
							
				
					row["SC_SCHEDULE_HDR_ID"] = entity.ScScheduleHdrId;
							
				
					row["GROUP_DESCR_AR"] = entity.GroupDescrAr;
							
				
					row["GROUP_DESCR_EN"] = entity.GroupDescrEn;
							
				
					row["GROUP_ORDER"] = entity.GroupOrder.HasValue ? (object) entity.GroupOrder  : System.DBNull.Value;
							
				
					row["GS_CODE_GENDER_ID"] = entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value;
							
				
					row["NOTES"] = entity.Notes;
							
				
					row["AS_FACULTY_INFO_ID"] = entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value;
							
				
					row["IS_RESULT_APPROVED"] = entity.IsResultApproved;
							
				
					row["SE_USER_RSULT_APPROVE_ID"] = entity.SeUserRsultApproveId.HasValue ? (object) entity.SeUserRsultApproveId  : System.DBNull.Value;
							
				
					row["RSULT_APPROVE_DATE"] = entity.RsultApproveDate.HasValue ? (object) entity.RsultApproveDate  : System.DBNull.Value;
							
				
					row["NO_STUDENTS"] = entity.NoStudents.HasValue ? (object) entity.NoStudents  : System.DBNull.Value;
							
				
					row["NO_STUD_WAIT"] = entity.NoStudWait.HasValue ? (object) entity.NoStudWait  : System.DBNull.Value;
							
				
					row["ONLINE_FLG"] = entity.OnlineFlg;
							
				
					row["IS_CLOSED"] = entity.IsClosed.HasValue ? (object) entity.IsClosed  : System.DBNull.Value;
							
				
					row["NOTES_EMP"] = entity.NotesEmp;
							
				
					row["NO_STUD_MAX"] = entity.NoStudMax.HasValue ? (object) entity.NoStudMax  : System.DBNull.Value;
							
				
					row["INTERNAL_FLG"] = entity.InternalFlg;
							
				
					row["WAITLIST_FLG"] = entity.WaitlistFlg.HasValue ? (object) entity.WaitlistFlg  : System.DBNull.Value;
							
				
					row["GS_CODE_LANGUAGE_ID"] = entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value;
							
				
					row["CNCL_FLG"] = entity.CnclFlg.HasValue ? (object) entity.CnclFlg  : System.DBNull.Value;
							
				
					row["PART_TIME_FLG"] = entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.ScScheduleDtl entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.ScScheduleDtl object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.ScScheduleDtl object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.ScScheduleDtl object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.ScScheduleDtl entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@ScScheduleDtlId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@ScScheduleHdrId", DbType.Decimal, entity.ScScheduleHdrId );
			database.AddInParameter(commandWrapper, "@GroupDescrAr", DbType.String, entity.GroupDescrAr );
			database.AddInParameter(commandWrapper, "@GroupDescrEn", DbType.String, entity.GroupDescrEn );
			database.AddInParameter(commandWrapper, "@GroupOrder", DbType.Decimal, (entity.GroupOrder.HasValue ? (object) entity.GroupOrder  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsResultApproved", DbType.Decimal, entity.IsResultApproved );
			database.AddInParameter(commandWrapper, "@SeUserRsultApproveId", DbType.Decimal, (entity.SeUserRsultApproveId.HasValue ? (object) entity.SeUserRsultApproveId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RsultApproveDate", DbType.DateTime, (entity.RsultApproveDate.HasValue ? (object) entity.RsultApproveDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NoStudents", DbType.Decimal, (entity.NoStudents.HasValue ? (object) entity.NoStudents  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NoStudWait", DbType.Decimal, (entity.NoStudWait.HasValue ? (object) entity.NoStudWait  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, entity.OnlineFlg );
			database.AddInParameter(commandWrapper, "@IsClosed", DbType.Decimal, (entity.IsClosed.HasValue ? (object) entity.IsClosed  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NotesEmp", DbType.String, entity.NotesEmp );
			database.AddInParameter(commandWrapper, "@NoStudMax", DbType.Decimal, (entity.NoStudMax.HasValue ? (object) entity.NoStudMax  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@InternalFlg", DbType.Decimal, entity.InternalFlg );
			database.AddInParameter(commandWrapper, "@WaitlistFlg", DbType.Decimal, (entity.WaitlistFlg.HasValue ? (object) entity.WaitlistFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CnclFlg", DbType.Decimal, (entity.CnclFlg.HasValue ? (object) entity.CnclFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Int32, (entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _scScheduleDtlId = database.GetParameterValue(commandWrapper, "@ScScheduleDtlId");
			entity.ScScheduleDtlId = (System.Decimal)_scScheduleDtlId;
			
			entity.OriginalScScheduleDtlId = entity.ScScheduleDtlId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.ScScheduleDtl object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.ScScheduleDtl object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.ScScheduleDtl entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.SC_SCHEDULE_DTL_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@ScScheduleDtlId", DbType.Decimal, entity.ScScheduleDtlId );
			database.AddInParameter(commandWrapper, "@OriginalScScheduleDtlId", DbType.Decimal, entity.OriginalScScheduleDtlId);
			database.AddInParameter(commandWrapper, "@ScScheduleHdrId", DbType.Decimal, entity.ScScheduleHdrId );
			database.AddInParameter(commandWrapper, "@GroupDescrAr", DbType.String, entity.GroupDescrAr );
			database.AddInParameter(commandWrapper, "@GroupDescrEn", DbType.String, entity.GroupDescrEn );
			database.AddInParameter(commandWrapper, "@GroupOrder", DbType.Decimal, (entity.GroupOrder.HasValue ? (object) entity.GroupOrder : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsResultApproved", DbType.Decimal, entity.IsResultApproved );
			database.AddInParameter(commandWrapper, "@SeUserRsultApproveId", DbType.Decimal, (entity.SeUserRsultApproveId.HasValue ? (object) entity.SeUserRsultApproveId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RsultApproveDate", DbType.DateTime, (entity.RsultApproveDate.HasValue ? (object) entity.RsultApproveDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NoStudents", DbType.Decimal, (entity.NoStudents.HasValue ? (object) entity.NoStudents : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NoStudWait", DbType.Decimal, (entity.NoStudWait.HasValue ? (object) entity.NoStudWait : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, entity.OnlineFlg );
			database.AddInParameter(commandWrapper, "@IsClosed", DbType.Decimal, (entity.IsClosed.HasValue ? (object) entity.IsClosed : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NotesEmp", DbType.String, entity.NotesEmp );
			database.AddInParameter(commandWrapper, "@NoStudMax", DbType.Decimal, (entity.NoStudMax.HasValue ? (object) entity.NoStudMax : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@InternalFlg", DbType.Decimal, entity.InternalFlg );
			database.AddInParameter(commandWrapper, "@WaitlistFlg", DbType.Decimal, (entity.WaitlistFlg.HasValue ? (object) entity.WaitlistFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, (entity.GsCodeLanguageId.HasValue ? (object) entity.GsCodeLanguageId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CnclFlg", DbType.Decimal, (entity.CnclFlg.HasValue ? (object) entity.CnclFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PartTimeFlg", DbType.Int32, (entity.PartTimeFlg.HasValue ? (object) entity.PartTimeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalScScheduleDtlId = entity.ScScheduleDtlId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
