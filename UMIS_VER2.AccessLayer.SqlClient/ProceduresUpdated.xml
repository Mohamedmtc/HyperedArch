<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <database includeDrop="true">UMIS_VER2</database>
  <procedures>
    <procedure owner="dbo" name="FEE_CODE_BANKS_Update">
    </procedure>
    <procedure owner="dbo" name="FEE_CODE_BANKS_Insert">
    </procedure>
    <procedure owner="dbo" name="FEE_CDE_BANK_ACCNT_Update">
    </procedure>
    <procedure owner="dbo" name="FEE_CDE_BANK_ACCNT_Insert">
        </procedure>
      <procedure owner="dbo" name="CTR_MENU_ACT_ITEM_Insert">
      </procedure>
      <procedure owner="dbo" name="CTR_MENU_ACT_Update">
      </procedure>
         <procedure owner="dbo" name="CTR_MENU_ACT_Insert">
        </procedure>
        <procedure owner="dbo" name="CTR_MENU_ITEM_Insert">
      </procedure>
      <procedure owner="dbo" name="SC_GROUP_DAY_Update">
      </procedure>
      <procedure owner="dbo" name="SC_GROUP_DAY_Insert">
      </procedure>
      <procedure owner="dbo" name="MLT_ORG_TREE_Insert">
      </procedure>
      <procedure owner="dbo" name="SE_FORM_Insert">
      </procedure>
      <procedure owner="dbo" name="SE_MODULE_Insert">
      </procedure>
    <procedure owner="dbo" name="ED_SEM_AGENDA_DTL_Insert">
    </procedure>
    <procedure owner="dbo" name="ED_SEM_AGENDA_DTL_Update">
    </procedure>
      <procedure owner="dbo" name="ADM_APP_PREF_Update">
      </procedure>
      <procedure owner="dbo" name="ED_GRADUATION_AWARD_Insert">
      </procedure>
      <procedure owner="dbo" name="ED_GRADUATION_AWARD_Update">
      </procedure>
      <procedure owner="dbo" name="ED_GUARD_Insert">
      </procedure>
      <procedure owner="dbo" name="ED_GUARD_Update">
      </procedure>
    <procedure owner="dbo" name="SE_ACCNT_Insert">
    </procedure>
    <procedure owner="dbo" name="ED_SEMESTER_AGENDA_Update">
    </procedure>
	  <procedure owner="dbo" name="ED_COURSE_PRFX_GetByPrfxEnEntMainId" >
		  <comment>
			  <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_COURSE_PRFX table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
		  </comment>
		  <parameters>
			  <parameter name="@PrfxEn" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			  <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
		  </parameters>
		  <body>
			  <![CDATA[
				SELECT
					[ED_COURSE_PRFX_ID],
					[PRFX_EN],
					[PRFX_AR],
					[DESCR_AR],
					[DESCR_EN],
					[ENT_MAIN_ID]
				FROM
					[dbo].[ED_COURSE_PRFX]
				WHERE
					[PRFX_EN] = @PrfxEn
					AND (@EntMainId=0 or [ENT_MAIN_ID] = @EntMainId)
				SELECT @@ROWCOUNT
					
			]]>
		  </body>

	  </procedure>
      <procedure owner="dbo" name="ED_STUD_INT_TRNS_STATE_TO_Insert" grant="">
      </procedure>
      <procedure owner="dbo" name="ED_CDE_QUAL_CAT_Insert" grant="">
      </procedure>
      <procedure owner="dbo" name="ED_CDE_QUAL_CAT_Update" grant="">
      </procedure>
      <procedure owner="dbo" name="ED_CDE_QUAL_BRN_Insert" grant="">
      </procedure>
      <procedure owner="dbo" name="ED_CDE_QUAL_BRN_Update" grant="">
      </procedure>
      <procedure owner="dbo" name="ED_STUD_ABS_FW_Insert" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>              
              <parameter name="@EdStudAbsFwId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
              <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@DecisionDate" type="smalldatetime" direction="Input" size="4" precision="16" scale="0" param="" nulldefault=""/>
              <parameter name="@SeqNo" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@FwFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@AbsCount" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
              <parameter name="@AbsPercent" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
              <parameter name="@CnclFlg" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
              <parameter name="@MailFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
              <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
              <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
                    
                    DECLARE @V_EdStudAbsFwId numeric(9, 0)
                    SELECT @V_EdStudAbsFwId = ISNULL(MAX(ED_STUD_ABS_FW_ID), 0) + 1 FROM [dbo].[ED_STUD_ABS_FW];
                
				
				INSERT INTO [dbo].[ED_STUD_ABS_FW]
					(
                            
                                [ED_STUD_ABS_FW_ID]
                                
                            ,                            
                                [AS_FACULTY_INFO_ID]
                                
                            ,                            
                                [ED_ACAD_YEAR_ID]
                                
                            ,                            
                                [ED_CODE_SEMESTER_ID]
                                
                            ,                            
                                [ED_STUD_ID]
                                
                            ,                            
                                [ED_COURSE_ID]
                                
                            ,                            
                                [DECISION_DATE]
                                
                            ,                            
                                [SEQ_NO]
                                
                            ,                            
                                [FW_FLG]
                                
                            ,                            
                                [ABS_COUNT]
                                
                            ,                            
                                [ABS_PERCENT]
                                
                            ,                            
                                [CNCL_FLG]
                                
                            ,                            
                                [MAIL_FLG]
                                
                            ,                            
                                [NOTES]
                                
                            ,                            
                                [LAST_DATE]
                                
                            ,                            
                                [SE_FORM_ID]
                                
                            ,                            
                                [SE_USER_ID]
                                
                            
					)
				VALUES
					(					
                                        @V_EdStudAbsFwId
                                    ,

                                        @AsFacultyInfoId
                                    ,

                                        @EdAcadYearId
                                    ,

                                        @EdCodeSemesterId
                                    ,

                                        @EdStudId
                                    ,

                                        @EdCourseId
                                    ,

                                        @DecisionDate
                                    ,

                                        @SeqNo
                                    ,

                                        @FwFlg
                                    ,

                                        @AbsCount
                                    ,

                                        @AbsPercent
                                    ,

                                        @CnclFlg
                                    ,

                                        @MailFlg
                                    ,

                                        @Notes
                                    ,

                                        @LastDate
                                    ,

                                        @SeFormId
                                    ,

                                        @SeUserId
                                    
					)
				
                        SET @EdStudAbsFwId = @V_EdStudAbsFwId

							
			]]>
          </body>
      </procedure>
    <procedure owner="dbo" name="GS_CDE_SCHOOL_Update" grant="">
    </procedure>
    <procedure owner="dbo" name="GS_CDE_SCHOOL_Insert" grant="">
    </procedure>
      <procedure owner="dbo" name="ED_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdCodeCourseId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
        <parameter name="@CourseDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@CourseDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@CreditHours" type="numeric" direction="Input" size="5" precision="3" scale="1" param="(3, 1)" nulldefault=""/>
        <parameter name="@CourseContentsAr" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
        <parameter name="@CourseContentsEn" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@PrereqCodeExp" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@PrereqIdExp" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@ElectFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCourseElectTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdCoursePrfxId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@CrsNo" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@PfFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@CrsLvl" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@OnlineFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StopMessage" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdCourseExpHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
                    
                    DECLARE @V_EdCourseId numeric(9, 0)
                    SELECT @V_EdCourseId = ISNULL(MAX(ED_COURSE_ID), 0) + 1 FROM [dbo].[ED_COURSE];
                
				
				INSERT INTO [dbo].[ED_COURSE]
					(
                            
                                [ED_COURSE_ID]
                                
                            ,                            
                                [ED_CODE_COURSE_ID]
                                
                            ,                            
                                [COURSE_CODE]
                                
                            ,                            
                                [COURSE_DESCR_AR]
                                
                            ,                            
                                [COURSE_DESCR_EN]
                                
                            ,                            
                                [CREDIT_HOURS]
                                
                            ,                            
                                [COURSE_CONTENTS_AR]
                                
                            ,                            
                                [COURSE_CONTENTS_EN]
                                
                            ,                            
                                [ENT_MAIN_ID]
                                
                            ,                            
                                [GS_CODE_LANGUAGE_ID]
                                
                            ,                            
                                [AS_FACULTY_INFO_ID]
                                
                            ,                            
                                [IS_ACTIVE]
                                
                            ,                            
                                [PREREQ_CODE_EXP]
                                
                            ,                            
                                [PREREQ_ID_EXP]
                                
                            ,                            
                                [ELECT_FLG]
                                
                            ,                            
                                [GS_COURSE_ELECT_TYPE_ID]
                                
                            ,                            
                                [ED_COURSE_PRFX_ID]
                                
                            ,                            
                                [CRS_NO]
                                
                            ,                            
                                [PF_FLG]
                                
                            ,                            
                                [CRS_LVL]
                                
                            ,                            
                                [ONLINE_FLG]
                                
                            ,                            
                                [STOP_MESSAGE]
                                
                            ,                            
                                [AS_CODE_DEGREE_CLASS_ID]
                                
                            ,                            
                                [ED_COURSE_EXP_HDR_ID]
                                
                            
					)
				VALUES
					(					
                                        @V_EdCourseId
                                    ,

                                        @EdCodeCourseId
                                    ,

                                        @CourseCode
                                    ,

                                        @CourseDescrAr
                                    ,

                                        @CourseDescrEn
                                    ,

                                        @CreditHours
                                    ,

                                        @CourseContentsAr
                                    ,

                                        @CourseContentsEn
                                    ,

                                        @EntMainId
                                    ,

                                        @GsCodeLanguageId
                                    ,

                                        @AsFacultyInfoId
                                    ,

                                        @IsActive
                                    ,

                                        @PrereqCodeExp
                                    ,

                                        @PrereqIdExp
                                    ,

                                        @ElectFlg
                                    ,

                                        @GsCourseElectTypeId
                                    ,

                                        @EdCoursePrfxId
                                    ,

                                        @CrsNo
                                    ,

                                        @PfFlg
                                    ,

                                        @CrsLvl
                                    ,

                                        @OnlineFlg
                                    ,

                                        @StopMessage
                                    ,

                                        @AsCodeDegreeClassId
                                    ,

                                        @EdCourseExpHdrId
                                    
					)
				
                        SET @EdCourseId = @V_EdCourseId
									
							
			]]>
      </body>
    </procedure>
    
      <procedure owner="dbo" name="GS_CDE_CLRNC_ITEM_FAC_Insert" grant="">
      </procedure>

          <procedure owner="dbo" name="ED_STUD_GUARD_Update" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_GUARD table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@EdStudGuardId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
              <parameter name="@OriginalEdStudGuardId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
              <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@GsCodeRelationId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault=""/>
              <parameter name="@JobTitle" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault=""/>
              <parameter name="@PermAddr" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault=""/>
              <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
              <parameter name="@PhoneNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
              <parameter name="@MobileNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
              <parameter name="@MonthIncome" type="numeric" direction="Input" size="5" precision="7" scale="3" param="(7, 3)" nulldefault=""/>
              <parameter name="@StaffFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@DiplomaticFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@MainFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
              <parameter name="@EdStudBroId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
              <parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
              <parameter name="@GsCodeMaritalStateId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@GsCodeEducationLevelId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@CompanyName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
              <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_GUARD]
				SET
					[ED_STUD_GUARD_ID] = @EdStudGuardId
					,[ED_STUD_ID] = @EdStudId
					,[GS_CODE_RELATION_ID] = @GsCodeRelationId
					,[FULL_NAME_EN] = @FullNameEn
					,[JOB_TITLE] = @JobTitle
					,[PERM_ADDR] = @PermAddr
					,[E_MAIL] = @EMail
					,[PHONE_NUM] = @PhoneNum
					,[MOBILE_NUM] = @MobileNum
					,[MONTH_INCOME] = @MonthIncome
					,[STAFF_FLG] = @StaffFlg
					,[DIPLOMATIC_FLG] = @DiplomaticFlg
					,[MAIN_FLG] = @MainFlg
					,[ADM_APPLICANT_ID] = @AdmApplicantId
					,[ED_STUD_BRO_ID] = @EdStudBroId
					,[SA_STF_MEMBER_ID] = @SaStfMemberId
					,[BIRTH_DATE] = @BirthDate
					,[GS_CODE_MARITAL_STATE_ID] = @GsCodeMaritalStateId
					,[GS_CODE_EDUCATION_LEVEL_ID] = @GsCodeEducationLevelId
					,[COMPANY_NAME] = @CompanyName
					,[GS_COUNTRY_NODE_ID] = @GsCountryNodeId
				WHERE
[ED_STUD_GUARD_ID] = @EdStudGuardId 
				
			]]>
          </body>
      </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@OriginalAdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AdmAppCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
        <parameter name="@Username" type="varchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@PasswordSalt" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@PasswordHash" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@SecurityQs" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@SecurityQsAnsSalt" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@SecurityQsAnsHash" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@ActivationCode" type="nvarchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
        <parameter name="@ActivationFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@FnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@MnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@MnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@LnameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@LnameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@Cpr" type="numeric" direction="Input" size="9" precision="10" scale="0" param="(10, 0)" nulldefault=""/>
        <parameter name="@PassporNo" type="numeric" direction="Input" size="9" precision="18" scale="0" param="(18, 0)" nulldefault=""/>
        <parameter name="@PassporExpireDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@Birthdate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@PhotoPath" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@GsCdeMaritalStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@WorkFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@FullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@ResidentId" type="numeric" direction="Input" size="9" precision="18" scale="0" param="(18, 0)" nulldefault=""/>
        <parameter name="@ResidentExpireDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				if exists (select * from ADM_APPLICANT where USERNAME = @Username
              and ADM_APPLICANT_ID != @AdmApplicantId )
         BEGIN
         RAISERROR ('USERNAMEDUPLICATED',10,-1)     
         RETURN
         END
         
              
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_APPLICANT]
				SET
					[ADM_APPLICANT_ID] = @AdmApplicantId
					,[ADM_APP_CODE] = @AdmAppCode
					,[USERNAME] = @Username
					,[PASSWORD_SALT] = @PasswordSalt
					,[PASSWORD_HASH] = @PasswordHash
					,[SECURITY_QS] = @SecurityQs
					,[SECURITY_QS_ANS_SALT] = @SecurityQsAnsSalt
					,[SECURITY_QS_ANS_HASH] = @SecurityQsAnsHash
					,[ACTIVATION_CODE] = @ActivationCode
					,[ACTIVATION_FLG] = @ActivationFlg
					,[REG_DATE] = @RegDate
					,[FNAME_AR] = @FnameAr
					,[FNAME_EN] = @FnameEn
					,[MNAME_AR] = @MnameAr
					,[MNAME_EN] = @MnameEn
					,[LNAME_AR] = @LnameAr
					,[LNAME_EN] = @LnameEn
					,[FAMILY_AR] = @FamilyAr
					,[FAMILY_EN] = @FamilyEn
					,[GS_CODE_RELIGION_ID] = @GsCodeReligionId
					,[CPR] = @Cpr
					,[PASSPOR_NO] = @PassporNo
					,[PASSPOR_EXPIRE_DATE] = @PassporExpireDate
					,[BIRTHDATE] = @Birthdate
					,[PHOTO_PATH] = @PhotoPath
					,[GS_CDE_MARITAL_STATUS_ID] = @GsCdeMaritalStatusId
					,[GS_CODE_GENDER_ID] = @GsCodeGenderId
					,[WORK_FLG] = @WorkFlg
					,[GS_COUNTRY_NODE_ID] = @GsCountryNodeId
					,[FULL_NAME_AR] = @FullNameAr
					,[FULL_NAME_EN] = @FullNameEn
					,[RESIDENT_ID] = @ResidentId
					,[RESIDENT_EXPIRE_DATE] = @ResidentExpireDate
				WHERE [ADM_APPLICANT_ID] = @AdmApplicantId

			]]>
      </body>
    </procedure>
      <procedure owner="dbo" name="ADM_APP_LTR_RECOM_Update" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_APP_LTR_RECOM table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@AdmAppLtrRecomId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
              <parameter name="@OriginalAdmAppLtrRecomId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
              <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
              <parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
              <parameter name="@JobTitle" type="nvarchar" direction="Input" size="35" precision="0" scale="0" param="(35)" nulldefault=""/>
              <parameter name="@MobNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
              <parameter name="@PhoneNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
              <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
              <parameter name="@LetterPath" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_APP_LTR_RECOM]
				SET
					[ADM_APP_LTR_RECOM_ID] = @AdmAppLtrRecomId
					,[ADM_APPLICANT_ID] = @AdmApplicantId
					,[NAME] = @Name
					,[JOB_TITLE] = @JobTitle
					,[MOB_NUM] = @MobNum
					,[PHONE_NUM] = @PhoneNum
					,[E_MAIL] = @EMail
					,[LETTER_PATH] = @LetterPath
				WHERE
[ADM_APP_LTR_RECOM_ID] = @AdmAppLtrRecomId 
				
			]]>
          </body>
      </procedure>
      
      <procedure owner="dbo" name="ADM_APP_REG_HISTORY_Update" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_APP_REG_HISTORY table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@AdmAppRegHistoryId" type="numeric" direction="Input" size="9" precision="18" scale="0" param="(18, 0)" nulldefault=""/>
              <parameter name="@OriginalAdmAppRegHistoryId" type="numeric" direction="Input" size="9" precision="18" scale="0" param="(18, 0)" nulldefault=""/>
              <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
              <parameter name="@AppDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
              <parameter name="@AdmCdeAppTypeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
              <parameter name="@CurrentFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
              <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@ComptativeRate" type="numeric" direction="Input" size="5" precision="3" scale="3" param="(3, 3)" nulldefault=""/>
              <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
              <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
              <parameter name="@AdmCdeStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@OverAllAcceptanceFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@OrintationFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@AdmAdmissionBandId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@DistributionFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@EnrolledFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
				
                -- check for over all acceptance for the applicant.
				IF(@OverAllAcceptanceFlg=(SELECT OVER_ALL_ACCEPTANCE_FLG FROM ADM_APP_REG_HISTORY WHERE [ADM_APP_REG_HISTORY_ID] = @AdmAppRegHistoryId))
				BEGIN
					IF EXISTS (SELECT 1 FROM dbo.ADM_APPLICANT_ACCEPTANCE WHERE [ADM_APP_REG_HISTORY_ID] = @AdmAppRegHistoryId AND dbo.ADM_APPLICANT_ACCEPTANCE.ACCEPTANCE_FLG = 0)
					BEGIN
						SET @OverAllAcceptanceFlg = 0;
					END
					ELSE
					BEGIN
						SET @OverAllAcceptanceFlg = 1;
					END
				END
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_APP_REG_HISTORY]
				SET
					[ADM_APP_REG_HISTORY_ID] = @AdmAppRegHistoryId
					,[ADM_APPLICANT_ID] = @AdmApplicantId
					,[APP_DATE] = @AppDate
					,[ADM_CDE_APP_TYPE_ID] = @AdmCdeAppTypeId
					,[CURRENT_FLG] = @CurrentFlg
					,[AS_CODE_DEGREE_ID] = @AsCodeDegreeId
					,[AS_CODE_DEGREE_CLASS_ID] = @AsCodeDegreeClassId
					,[COMPTATIVE_RATE] = @ComptativeRate
					,[ADM_OPEN_ACAD_SEMESTER_ID] = @AdmOpenAcadSemesterId
					,[SE_USER_ID] = @SeUserId
					,[ADM_CDE_STATUS_ID] = @AdmCdeStatusId
					,[OVER_ALL_ACCEPTANCE_FLG] = @OverAllAcceptanceFlg
					,[ORINTATION_FLG] = @OrintationFlg
					,[ADM_ADMISSION_BAND_ID] = @AdmAdmissionBandId
					,[DISTRIBUTION_FLG] = @DistributionFlg
					,[ENROLLED_FLG] = @EnrolledFlg
				WHERE
[ADM_APP_REG_HISTORY_ID] = @AdmAppRegHistoryId 
				
			]]>
          </body>
      </procedure>
      
	  <procedure owner="dbo" name="ED_STUD_COURSE_GRD_CHNG_Insert" grant="">
		  <comment>
			  <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_COURSE_GRD_CHNG table
----------------------------------------------------------------------------------------------------
*/
]]>
		  </comment>
		  <parameters>
			  <parameter name="@EdStudCourseGrdChngId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
			  <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
			  <parameter name="@EdCodeCourseStsOldId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
			  <parameter name="@EdCodeCourseStsNewId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
			  <parameter name="@EdCodeGradingOldId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
			  <parameter name="@EdCodeGradingNewId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
			  <parameter name="@EdCdeCourseChngRsnId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
			  <parameter name="@ReqDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
			  <parameter name="@DecisionNo" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			  <parameter name="@DecisionDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			  <parameter name="@ApproveFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
			  <parameter name="@SaStfMemApprovedById" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
			  <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
			  <parameter name="@Notes" type="nvarchar" direction="Input" size="1000" precision="0" scale="0" param="(1000)" nulldefault=""/>
			  <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			  <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
			  <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
		  </parameters>
		  <body>
			  <![CDATA[
				DECLARE @V_EdStudCourseGrdChngId numeric(9, 0)
				SELECT @V_EdStudCourseGrdChngId = ISNULL(MAX(ED_STUD_COURSE_GRD_CHNG_ID), 0) + 1 FROM [dbo].[ED_STUD_COURSE_GRD_CHNG];
				
				INSERT INTO [dbo].[ED_STUD_COURSE_GRD_CHNG]
					(
					[ED_STUD_COURSE_GRD_CHNG_ID]
					,[ED_STUD_COURSE_REG_ID]
					,[ED_CODE_COURSE_STS_OLD_ID]
					,[ED_CODE_COURSE_STS_NEW_ID]
					,[ED_CODE_GRADING_OLD_ID]
					,[ED_CODE_GRADING_NEW_ID]
					,[ED_CDE_COURSE_CHNG_RSN_ID]
					,[REQ_DATE]
					,[DECISION_NO]
					,[DECISION_DATE]
					,[APPROVE_FLG]
					,[SA_STF_MEM_APPROVED_BY_ID]
					,[IS_LAST]
					,[NOTES]
					,[LAST_DATE]
					,[SE_USER_ID]
					,[SE_FORM_ID]
					)
				VALUES
					(
					@V_EdStudCourseGrdChngId
					,@EdStudCourseRegId
					,@EdCodeCourseStsOldId
					,@EdCodeCourseStsNewId
					,@EdCodeGradingOldId
					,@EdCodeGradingNewId
					,@EdCdeCourseChngRsnId
					,@ReqDate
					,@DecisionNo
					,@DecisionDate
					,@ApproveFlg
					,@SaStfMemApprovedById
					,@IsLast
					,@Notes
					,@LastDate
					,@SeUserId
					,@SeFormId
					)
				
									
							
			]]>
		  </body>
	  </procedure>
    <procedure owner="dbo" name="ADM_PRECOND_QUAL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_PRECOND_QUAL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmPrecondQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@MinPercnt" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdCodeQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@EdCdeQualBrnId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				DECLARE @V_AdmPrecondQualId numeric(3, 0)
				SELECT @V_AdmPrecondQualId = ISNULL(MAX(ADM_PRECOND_QUAL_ID), 0) + 1 FROM [dbo].[ADM_PRECOND_QUAL];
				 -- check if the record exists before 
				 
				 if EXISTS (SELECT     ADM_PRECOND_QUAL_ID, ENT_MAIN_ID, MIN_PERCNT, AS_CODE_DEGREE_CLASS_ID, ED_CODE_QUAL_ID, AS_CODE_DEGREE_ID, ED_CDE_QUAL_BRN_ID FROM         ADM_PRECOND_QUAL WHERE     (ENT_MAIN_ID = @EntMainId)  AND (AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)  AND (AS_CODE_DEGREE_ID = @AsCodeDegreeId) AND (ED_CODE_QUAL_ID = @EdCodeQualId) AND (ED_CDE_QUAL_BRN_ID = @EdCdeQualBrnId))
                  BEGIN
                  RAISERROR ('Record already Exists',16,-1)
                  return
                  END
				 
				INSERT INTO [dbo].[ADM_PRECOND_QUAL]
					(
					[ADM_PRECOND_QUAL_ID]
					,[ENT_MAIN_ID]
					,[MIN_PERCNT]
					,[AS_CODE_DEGREE_CLASS_ID]
					,[ED_CODE_QUAL_ID]
					,[AS_CODE_DEGREE_ID]
					,[ED_CDE_QUAL_BRN_ID]
					)
				VALUES
					(
					@V_AdmPrecondQualId
					,@EntMainId
					,@MinPercnt
					,@AsCodeDegreeClassId
					,@EdCodeQualId
					,@AsCodeDegreeId
					,@EdCdeQualBrnId
					)
				
									
							
					
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_RSRVD_CODE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_RSRVD_CODE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmRsrvdCodeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@OriginalAdmRsrvdCodeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AssignedFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@AdmAppReservedCode" type="varchar" direction="Input" size="8" precision="0" scale="0" param="(8)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
			if exists (select * from ADM_RSRVD_CODE where ADM_APPLICANT_ID = @AdmApplicantId)
				Begin
				RAISERROR('ThisApplicantAlreadyAssgined',16,-1)
				RETURN
				end
				else
				Begin
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_RSRVD_CODE]
				SET
					[ADM_RSRVD_CODE_ID] = @AdmRsrvdCodeId
					,[ASSIGNED_FLG] = @AssignedFlg
					,[ADM_OPEN_ACAD_SEMESTER_ID] = @AdmOpenAcadSemesterId
					,[ADM_APPLICANT_ID] = @AdmApplicantId
					,[ADM_APP_RESERVED_CODE] = @AdmAppReservedCode
				WHERE
[ADM_RSRVD_CODE_ID] = @AdmRsrvdCodeId 
				end
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_PRECOND_QUAL_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_PRECOND_QUAL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmPrecondQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@OriginalAdmPrecondQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@MinPercnt" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdCodeQualId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@EdCdeQualBrnId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				if EXISTS (SELECT  ADM_PRECOND_QUAL_ID, ENT_MAIN_ID, MIN_PERCNT, AS_CODE_DEGREE_CLASS_ID, ED_CODE_QUAL_ID, AS_CODE_DEGREE_ID, ED_CDE_QUAL_BRN_ID FROM         ADM_PRECOND_QUAL WHERE     (ENT_MAIN_ID = @EntMainId)  AND (AS_CODE_DEGREE_CLASS_ID = @AsCodeDegreeClassId)  AND (AS_CODE_DEGREE_ID = @AsCodeDegreeId) AND (ED_CODE_QUAL_ID = @EdCodeQualId) AND (ED_CDE_QUAL_BRN_ID = @EdCdeQualBrnId))
                  BEGIN
                   RAISERROR ('Record Already Exists',16,-1) 
                  --return
                  END
				 else
				begin
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_PRECOND_QUAL]
				SET
					[ADM_PRECOND_QUAL_ID] = @AdmPrecondQualId
					,[ENT_MAIN_ID] = @EntMainId
					,[MIN_PERCNT] = @MinPercnt
					,[AS_CODE_DEGREE_CLASS_ID] = @AsCodeDegreeClassId
					,[ED_CODE_QUAL_ID] = @EdCodeQualId
					,[AS_CODE_DEGREE_ID] = @AsCodeDegreeId
					,[ED_CDE_QUAL_BRN_ID] = @EdCdeQualBrnId
				WHERE
[ADM_PRECOND_QUAL_ID] = @AdmPrecondQualId 
				end
			


				
			]]>
      </body>
    </procedure>
      <procedure owner="dbo" name="SC_SECTION_GROUP_DTL_Insert" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SC_SECTION_GROUP_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@ScSectionGroupDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@ScSectionGroupHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
              
-- Check Dates Conflect CheckHallTimeConflict

DECLARE @edAcadYearId NUMERIC,@edCodeSemesterId numeric
SELECT @edAcadYearId=ED_ACAD_YEAR_ID, @edCodeSemesterId = ED_CODE_SEMESTER_ID FROM dbo.SC_SECTION_GROUP_HDR WHERE SC_SECTION_GROUP_HDR_ID = @ScSectionGroupHdrId

DECLARE @confNum NUMERIC = 0;
SELECT @confNum = ISNULL(dbo.CheckHallTimeConflict(@edAcadYearId,@edCodeSemesterId,SC_SCHEDULE_DTL_DAY.SC_HALL_ID,SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID,SC_SCHEDULE_DTL_DAY.FROM_TIME,SC_SCHEDULE_DTL_DAY.TO_TIME,@ScSectionGroupHdrId),0)
FROM dbo.SC_SCHEDULE_DTL_DAY WHERE SC_SCHEDULE_DTL_ID = @ScScheduleDtlId

IF(@confNum<>0)
BEGIN
	RAISERROR('SectionGroupHdr_Conf',16,-1);
	RETURN;
END

DECLARE @V_ScSectionGroupDtlId numeric(9, 0)
SELECT @V_ScSectionGroupDtlId = ISNULL(MAX(SC_SECTION_GROUP_DTL_ID), 0) + 1 FROM [dbo].[SC_SECTION_GROUP_DTL];

INSERT INTO [dbo].[SC_SECTION_GROUP_DTL]
	(
	[SC_SECTION_GROUP_DTL_ID]
	,[SC_SECTION_GROUP_HDR_ID]
	,[ED_COURSE_ID]
	,[SC_SCHEDULE_DTL_ID]
	)
VALUES
	(
	@V_ScSectionGroupDtlId
	,@ScSectionGroupHdrId
	,@EdCourseId
	,@ScScheduleDtlId
	)
			
			]]>
          </body>
      </procedure>
    <procedure owner="dbo" name="ADM_COMPETITIVE_AVG_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_COMPETITIVE_AVG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCompetitiveAvgId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@Percentage" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CertficateFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
			DECLARE @V_AdmCompetitiveAvgId numeric(4, 0)
				DECLARE @V_SumOfPercentage numeric(4, 0)
				SELECT @V_AdmCompetitiveAvgId = ISNULL(MAX(ADM_COMPETITIVE_AVG_ID), 0) + 1 FROM [dbo].[ADM_COMPETITIVE_AVG];

				select @V_SumOfPercentage = SUM (PERCENTAGE) from ADM_COMPETITIVE_AVG where ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId;
                IF (@V_SumOfPercentage + @Percentage > 100)				
                Begin 
                 RAISERROR('Sum Of Percentages for this Semester/Year is Greater than 100',16,-1)
                  RETURN  
                End 
                
				
				INSERT INTO [dbo].[ADM_COMPETITIVE_AVG]
					(
					[ADM_COMPETITIVE_AVG_ID]
					,[ADM_CDE_PLACEMENT_EXAM_ID]
					,[PERCENTAGE]
					,[CERTFICATE_FLG]
					,[ADM_OPEN_ACAD_SEMESTER_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					)
				VALUES
					(
					@V_AdmCompetitiveAvgId
					,@AdmCdePlacementExamId
					,@Percentage
					,@CertficateFlg
					,@AdmOpenAcadSemesterId
					,@DescrAr
					,@DescrEn
					)

							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_COMPETITIVE_AVG_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_COMPETITIVE_AVG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCompetitiveAvgId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@OriginalAdmCompetitiveAvgId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@Percentage" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CertficateFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AdmOpenAcadSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
			DECLARE @V_SumOfPercentage numeric(4, 0)
				select @V_SumOfPercentage = SUM (PERCENTAGE) from ADM_COMPETITIVE_AVG where ADM_OPEN_ACAD_SEMESTER_ID = @AdmOpenAcadSemesterId;
                IF (@V_SumOfPercentage + @Percentage > 100)				
                Begin 
                 RAISERROR('Sum Of Percentages for this Semester/Year is Greater than 100',16,-1)
                  RETURN  
                End 
				else
				Begin
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_COMPETITIVE_AVG]
				SET
					[ADM_COMPETITIVE_AVG_ID] = @AdmCompetitiveAvgId
					,[ADM_CDE_PLACEMENT_EXAM_ID] = @AdmCdePlacementExamId
					,[PERCENTAGE] = @Percentage
					,[CERTFICATE_FLG] = @CertficateFlg
					,[ADM_OPEN_ACAD_SEMESTER_ID] = @AdmOpenAcadSemesterId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
				WHERE
[ADM_COMPETITIVE_AVG_ID] = @AdmCompetitiveAvgId 
end 

				
			]]>
      </body>
    </procedure>
    
      <procedure owner="dbo" name="SC_SECTION_GROUP_HDR_Insert" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SC_SECTION_GROUP_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@ScSectionGroupHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@GroupCode" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
              <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
              <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@GrpTypeFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@LoadFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
              
                IF EXISTS( SELECT 1 FROM SC_SECTION_GROUP_HDR WHERE ED_ACAD_YEAR_ID=@EdAcadYearId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND GRP_TYPE_FLG = 1)
                BEGIN
	                RAISERROR('Orient_Repeated',16,-1);
	                RETURN;
                END

                IF( @AsFacultyInfoId IS NOT NULL AND @GrpTypeFlg = 1)
                BEGIN
	                RAISERROR('Orient_On_University',16,-1);
	                RETURN;
                END
              
				DECLARE @V_ScSectionGroupHdrId numeric(9, 0)
				SELECT @V_ScSectionGroupHdrId = ISNULL(MAX(SC_SECTION_GROUP_HDR_ID), 0) + 1 FROM [dbo].[SC_SECTION_GROUP_HDR];
				
				INSERT INTO [dbo].[SC_SECTION_GROUP_HDR]
					(
					[SC_SECTION_GROUP_HDR_ID]
					,[GROUP_CODE]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[GRP_TYPE_FLG]
					,[LOAD_FLG]
					,[AS_FACULTY_INFO_ID]
					)
				VALUES
					(
					@V_ScSectionGroupHdrId
					,@GroupCode
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@GrpTypeFlg
					,@LoadFlg
					,@AsFacultyInfoId
					)
				
									
							
			]]>
          </body>
      </procedure>
    <procedure owner="dbo" name="ED_AMN_PARM_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_AMN_PARM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAmnParmId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@OriginalEdAmnParmId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@DueParm" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@MaxFamilyIncome" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@DiscRate" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
			-- Modify the updatable columns
				declare @Total as decimal
				set @Total = (Select ISNULL( Count(*) ,0)
				                      from ED_STUD_AMNEST_REQ_RESULT
                                      where ED_AMN_PARM_ID = @EdAmnParmId
                                      )
				if (@Total = 0)
          begin
				UPDATE
					[dbo].[ED_AMN_PARM]
				SET
					[ED_AMN_PARM_ID] = @EdAmnParmId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[DUE_PARM] = @DueParm
					,[MAX_FAMILY_INCOME] = @MaxFamilyIncome
					,[DISC_RATE] = @DiscRate
				WHERE
				[ED_AMN_PARM_ID] = @EdAmnParmId 
				end
				
			else
          begin
           RAISERROR('Stop Change',16,-1)
              RETURN
              end

				
			]]>
      </body>
    </procedure>
      <procedure owner="dbo" name="SC_SECTION_GROUP_HDR_Update" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SC_SECTION_GROUP_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@ScSectionGroupHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@OriginalScSectionGroupHdrId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@GroupCode" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
              <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
              <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@GrpTypeFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@LoadFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
              
                IF EXISTS( SELECT 1 FROM SC_SECTION_GROUP_HDR WHERE ED_ACAD_YEAR_ID=@EdAcadYearId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND GRP_TYPE_FLG = 1 AND [SC_SECTION_GROUP_HDR_ID] <> @ScSectionGroupHdrId)
                BEGIN
	                RAISERROR('Orient_Repeated',16,-1);
	                RETURN;
                END

                IF( @AsFacultyInfoId IS NOT NULL AND @GrpTypeFlg = 1)
                BEGIN
	                RAISERROR('Orient_On_University',16,-1);
	                RETURN;
                END
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SC_SECTION_GROUP_HDR]
				SET
					[SC_SECTION_GROUP_HDR_ID] = @ScSectionGroupHdrId
					,[GROUP_CODE] = @GroupCode
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[GRP_TYPE_FLG] = @GrpTypeFlg
					,[LOAD_FLG] = @LoadFlg
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				WHERE
[SC_SECTION_GROUP_HDR_ID] = @ScSectionGroupHdrId 
				
			]]>
          </body>
      </procedure>
      
      <procedure owner="dbo" name="ED_ACAD_YEAR_Get_List" >
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ED_ACAD_YEAR table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters/>
          <body>
              <![CDATA[
				
				SELECT
					[ED_ACAD_YEAR_ID],
					[DESCR_AR],
					[DESCR_EN],
					[YEAR_CODE],
					[YEAR_ORDER],
					[YEAR_CALENDER],
					[CURRENT_YEAR],
					[IS_CLOSED]
				FROM
					[dbo].[ED_ACAD_YEAR]
					order by YEAR_ORDER desc
				SELECT @@ROWCOUNT
			]]>
          </body>
      </procedure>

    <procedure owner="dbo" name="SPO_CONTACT_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SPO_CONTACT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SpoSponsorContactId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SpoSponsorId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@GsCodeContactMethodId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@ContactValue" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@SpoDepartmentId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SpoResponsiblePersonId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_SpoSponsorContactId numeric(7, 0)
				SELECT @V_SpoSponsorContactId = ISNULL(MAX(SPO_SPONSOR_CONTACT_ID), 0) + 1 FROM [dbo].[SPO_CONTACT];
				
				INSERT INTO [dbo].[SPO_CONTACT]
					(
					[SPO_SPONSOR_CONTACT_ID]
					,[SPO_SPONSOR_ID]
					,[GS_CODE_CONTACT_METHOD_ID]
					,[CONTACT_VALUE]
					,[SPO_DEPARTMENT_ID]
					,[SPO_RESPONSIBLE_PERSON_ID]
					)
				VALUES
					(
					@V_SpoSponsorContactId
					,@SpoSponsorId
					,@GsCodeContactMethodId
					,@ContactValue
					,@SpoDepartmentId
					,@SpoResponsiblePersonId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SPO_CONTACT_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SPO_CONTACT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SpoSponsorContactId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@OriginalSpoSponsorContactId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SpoSponsorId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@GsCodeContactMethodId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@ContactValue" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@SpoDepartmentId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SpoResponsiblePersonId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SPO_CONTACT]
				SET
					[SPO_SPONSOR_CONTACT_ID] = @SpoSponsorContactId
					,[SPO_SPONSOR_ID] = @SpoSponsorId
					,[GS_CODE_CONTACT_METHOD_ID] = @GsCodeContactMethodId
					,[CONTACT_VALUE] = @ContactValue
					,[SPO_DEPARTMENT_ID] = @SpoDepartmentId
					,[SPO_RESPONSIBLE_PERSON_ID] = @SpoResponsiblePersonId
				WHERE
[SPO_SPONSOR_CONTACT_ID] = @SpoSponsorContactId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CDE_TCHNG_MTHD_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CDE_TCHNG_MTHD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCdeTchngMthdId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdCdeTchngMthdId numeric(4, 0)
				SELECT @V_EdCdeTchngMthdId = ISNULL(MAX(ED_CDE_TCHNG_MTHD_ID), 0) + 1 FROM [dbo].[ED_CDE_TCHNG_MTHD];
				
				INSERT INTO [dbo].[ED_CDE_TCHNG_MTHD]
					(
					[ED_CDE_TCHNG_MTHD_ID]
					,[DESCR_EN]
					,[DESCR_AR]
					)
				VALUES
					(
					@V_EdCdeTchngMthdId
					,@DescrEn
					,@DescrAr
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CDE_TCHNG_MTHD_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_CDE_TCHNG_MTHD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCdeTchngMthdId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@OriginalEdCdeTchngMthdId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_CDE_TCHNG_MTHD]
				SET
					[ED_CDE_TCHNG_MTHD_ID] = @EdCdeTchngMthdId
					,[DESCR_EN] = @DescrEn
					,[DESCR_AR] = @DescrAr
				WHERE
[ED_CDE_TCHNG_MTHD_ID] = @EdCdeTchngMthdId 
				
			]]>
      </body>
    </procedure>
      <procedure owner="dbo" name="FEE_FACULTY_INSTALLMENT_Delete" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FEE_FACULTY_INSTALLMENT table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@FeeFacultyInstallmentId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
				DELETE FROM [dbo].[FEE_FACULTY_INSTALLMENT] WITH (ROWLOCK) 
				WHERE
					[FEE_FACULTY_INSTALLMENT_ID] = @FeeFacultyInstallmentId
					
			]]>
          </body>
      </procedure>
      
    <procedure owner="dbo" name="SPO_SPONSOR_STUD_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SPO_SPONSOR_STUD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SpoSponsorStudId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[SPO_SPONSOR_STUD] WITH (ROWLOCK) 
				WHERE
					[SPO_SPONSOR_STUD_ID] = @SpoSponsorStudId
					
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_VIOL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_VIOL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudViolId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCdeCampusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ViolDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsCdeViolId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@GroupId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@GsCdePenaltyId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@PnltyDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@DropDate" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@Notes" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@ErpOrgTreeFromId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@ErpOrgTreeToId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@ViolSerial" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@BanFee" type="numeric" direction="Input" size="5" precision="6" scale="2" param="(6, 2)" nulldefault=""/>
        <parameter name="@BanFeePayFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@DropFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterStopFromId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearStopFromId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterStopToId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearStopToId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@AppealFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@OtherFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@OtherSite" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@GsCdeViolCatId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@InvestigationCommInOut" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@InvestigationDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@InvestigationEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@InvestigationRecommendation" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
        <parameter name="@ApprovedBy" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@CancelFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@PunishCommFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@PunishCommDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@PunishCommEndDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@PenaltyRelatedFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@SemesterNo" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AbsenceFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@ExecFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@ExeFlgReg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@WarningNo" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdStudCheatId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
			

				DECLARE @V_EdStudViolId numeric(9, 0)
				SELECT @V_EdStudViolId = ISNULL(MAX(ED_STUD_VIOL_ID), 0) + 1 FROM [dbo].[ED_STUD_VIOL];
				
				INSERT INTO [dbo].[ED_STUD_VIOL]
					(
					[ED_STUD_VIOL_ID]
					,[ED_STUD_ID]
					,[GS_CDE_CAMPUS_ID]
					,[SC_BUILDING_ID]
					,[VIOL_DATE]
					,[GS_CDE_VIOL_ID]
					,[GROUP_ID]
					,[GS_CDE_PENALTY_ID]
					,[PNLTY_DATE]
					,[DROP_DATE]
					,[NOTES]
					,[ERP_ORG_TREE_FROM_ID]
					,[ERP_ORG_TREE_TO_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[VIOL_SERIAL]
					,[BAN_FEE]
					,[BAN_FEE_PAY_FLAG]
					,[DROP_FLG]
					,[ED_CODE_SEMESTER_STOP_FROM_ID]
					,[ED_ACAD_YEAR_STOP_FROM_ID]
					,[ED_CODE_SEMESTER_STOP_TO_ID]
					,[ED_ACAD_YEAR_STOP_TO_ID]
					,[APPEAL_FLG]
					,[OTHER_FLAG]
					,[OTHER_SITE]
					,[GS_CDE_VIOL_CAT_ID]
					,[INVESTIGATION_COMM_IN_OUT]
					,[INVESTIGATION_DATE]
					,[INVESTIGATION_END_DATE]
					,[INVESTIGATION_RECOMMENDATION]
					,[APPROVED_BY]
					,[CANCEL_FLG]
					,[PUNISH_COMM_FLG]
					,[PUNISH_COMM_DATE]
					,[PUNISH_COMM_END_DATE]
					,[PENALTY_RELATED_FLG]
					,[SEMESTER_NO]
					,[ABSENCE_FLG]
					,[EXEC_FLG]
					,[EXE_FLG_REG]
					,[WARNING_NO]
					,[ED_STUD_CHEAT_ID]
					)
				VALUES
					(
					@V_EdStudViolId
					,@EdStudId
					,@GsCdeCampusId
					,@ScBuildingId
					,@ViolDate
					,@GsCdeViolId
					,@GroupId
					,@GsCdePenaltyId
					,@PnltyDate
					,@DropDate
					,@Notes
					,@ErpOrgTreeFromId
					,@ErpOrgTreeToId
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@ViolSerial
					,@BanFee
					,@BanFeePayFlag
					,@DropFlg
					,@EdCodeSemesterStopFromId
					,@EdAcadYearStopFromId
					,@EdCodeSemesterStopToId
					,@EdAcadYearStopToId
					,@AppealFlg
					,@OtherFlag
					,@OtherSite
					,@GsCdeViolCatId
					,@InvestigationCommInOut
					,@InvestigationDate
					,@InvestigationEndDate
					,@InvestigationRecommendation
					,@ApprovedBy
					,@CancelFlg
					,@PunishCommFlg
					,@PunishCommDate
					,@PunishCommEndDate
					,@PenaltyRelatedFlg
					,@SemesterNo
					,@AbsenceFlg
					,@ExecFlg
					,@ExeFlgReg
					,@WarningNo
					,@EdStudCheatId
					)
				
									
							
			set @EdStudViolId = @V_EdStudViolId;		




									
							
			]]>
      </body>
    </procedure>
    
    <procedure owner="dbo" name="SV_MESSAGE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SV_MESSAGE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvMessageId" type="numeric" direction="Output" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        
        <parameter name="@MsgContent" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
        <parameter name="@MsgDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>        
        <parameter name="@MsgSubject" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@DeleteFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
			
				DECLARE @V_SvMessageId numeric(6, 0)
				SELECT @V_SvMessageId = ISNULL(MAX(SV_MESSAGE_ID), 0) + 1 FROM [dbo].[SV_MESSAGE];
				
				INSERT INTO [dbo].[SV_MESSAGE]
					(
					[SV_MESSAGE_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[SE_USER_ID]
					,[MSG_CONTENT]
					,[MSG_DATE]
					,[TYPE_FLG]
					,[SV_CDE_MSG_TO_ID]
					,[FAIL_FLG]
					,[MSG_SUBJECT]
					,[ADM_APPLICANT_ID]
					,[DELETE_FLG]
					)
				VALUES
					(
					@V_SvMessageId
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@SeUserId
					,@MsgContent
					,@MsgDate
					,@TypeFlg
					,@SvCdeMsgToId
					,@FailFlg
					,@MsgSubject
					,@AdmApplicantId
					,@DeleteFlg
					)
				
									
					set @SvMessageId = @V_SvMessageId;		
			


									
							
			]]>
      </body>
    </procedure>
    
    
    
    <procedure owner="dbo" name="SPO_SPONSOR_STUD_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SPO_SPONSOR_STUD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SpoSponsorStudId" type="numeric" direction="Output" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SpoSponsorId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@Percentage" type="tinyint" direction="Input" size="1" precision="3" scale="0" param="" nulldefault=""/>
        <parameter name="@Amount" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@IsApproved" type="numeric" direction="Input" size="9" precision="10" scale="0" param="(10, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_SpoSponsorStudId numeric(7, 0)
				SELECT @V_SpoSponsorStudId = ISNULL(MAX(SPO_SPONSOR_STUD_ID), 0) + 1 FROM [dbo].[SPO_SPONSOR_STUD];
				
				INSERT INTO [dbo].[SPO_SPONSOR_STUD]
					(
					[SPO_SPONSOR_STUD_ID]
					,[ED_STUD_ID]
					,[SPO_SPONSOR_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[PERCENTAGE]
					,[AMOUNT]
					,[IS_APPROVED]
					)
				VALUES
					(
					@V_SpoSponsorStudId
					,@EdStudId
					,@SpoSponsorId
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@Percentage
					,@Amount
					,@IsApproved
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SPO_SPONSOR_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SPO_SPONSOR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SpoSponsorId" type="numeric" direction="Output" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SpoCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@SpoAccountCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@NameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@NameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@Address" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
        <parameter name="@OfficeTel" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@Mobile" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@Email" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@Website" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@SpoSponserTypeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@CoverRepeatedCoursesFlag" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_SpoSponsorId numeric(7, 0)
				SELECT @V_SpoSponsorId = ISNULL(MAX(SPO_SPONSOR_ID), 0) + 1 FROM [dbo].[SPO_SPONSOR];
				
				INSERT INTO [dbo].[SPO_SPONSOR]
					(
					[SPO_SPONSOR_ID]
					,[SPO_Code]
					,[SPO_ACCOUNT_CODE]
					,[NAME_AR]
					,[NAME_EN]
					,[ADDRESS]
					,[OFFICE_TEL]
					,[MOBILE]
					,[EMAIL]
					,[WEBSITE]
					,[SPO_SPONSER_TYPE_ID]
					,[COVER_REPEATED_COURSES_FLAG]
					)
				VALUES
					(
					@V_SpoSponsorId
					,@SpoCode
					,@SpoAccountCode
					,@NameAr
					,@NameEn
					,@Address
					,@OfficeTel
					,@Mobile
					,@Email
					,@Website
					,@SpoSponserTypeId
					,@CoverRepeatedCoursesFlag
					)
				
									
							
			]]>
      </body>
    </procedure>
    
    <procedure owner="dbo" name="ADM_PRV_HIGHER_EDU_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_PRV_HIGHER_EDU table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmPrvHigherEduId" type="numeric" direction="Output" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@FacultyName" type="nvarchar" direction="Input" size="70" precision="0" scale="0" param="(70)" nulldefault=""/>
        <parameter name="@FacultyAddr" type="nvarchar" direction="Input" size="70" precision="0" scale="0" param="(70)" nulldefault=""/>
        <parameter name="@FromDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@ToDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@MajorSpec" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
        <parameter name="@CertfGrade" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@CertfDegree" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
        <parameter name="@DocumentPath" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_AdmPrvHigherEduId numeric(6, 0)
				SELECT @V_AdmPrvHigherEduId = ISNULL(MAX(ADM_PRV_HIGHER_EDU_ID), 0) + 1 FROM [dbo].[ADM_PRV_HIGHER_EDU];
				
				INSERT INTO [dbo].[ADM_PRV_HIGHER_EDU]
					(
					[ADM_PRV_HIGHER_EDU_ID]
					,[ADM_APPLICANT_ID]
					,[FACULTY_NAME]
					,[FACULTY_ADDR]
					,[FROM_DATE]
					,[TO_DATE]
					,[MAJOR_SPEC]
					,[CERTF_GRADE]
					,[CERTF_DEGREE]
					,[DOCUMENT_PATH]
					)
				VALUES
					(
					@V_AdmPrvHigherEduId
					,@AdmApplicantId
					,@FacultyName
					,@FacultyAddr
					,@FromDate
					,@ToDate
					,@MajorSpec
					,@CertfGrade
					,@CertfDegree
					,@DocumentPath
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_LTR_RECOM_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_LTR_RECOM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppLtrRecomId" type="numeric" direction="Output" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@Name" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@JobTitle" type="nvarchar" direction="Input" size="35" precision="0" scale="0" param="(35)" nulldefault=""/>
        <parameter name="@MobNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@PhoneNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@LetterPath" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_AdmAppLtrRecomId numeric(6, 0)
				SELECT @V_AdmAppLtrRecomId = ISNULL(MAX(ADM_APP_LTR_RECOM_ID), 0) + 1 FROM [dbo].[ADM_APP_LTR_RECOM];
				
				INSERT INTO [dbo].[ADM_APP_LTR_RECOM]
					(
					[ADM_APP_LTR_RECOM_ID]
					,[ADM_APPLICANT_ID]
					,[NAME]
					,[JOB_TITLE]
					,[MOB_NUM]
					,[PHONE_NUM]
					,[E_MAIL]
					,[LETTER_PATH]
					)
				VALUES
					(
					@V_AdmAppLtrRecomId
					,@AdmApplicantId
					,@Name
					,@JobTitle
					,@MobNum
					,@PhoneNum
					,@EMail
					,@LetterPath
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_WORK_EXPER_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_WORK_EXPER table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppWorkExperId" type="numeric" direction="Output" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@OrganizationName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@OrganizationAddress" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@JobTitle" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@PeriodFrom" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@PeriodTo" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_AdmAppWorkExperId numeric(3, 0)
				SELECT @V_AdmAppWorkExperId = ISNULL(MAX(ADM_APP_WORK_EXPER_ID), 0) + 1 FROM [dbo].[ADM_APP_WORK_EXPER];
				
				INSERT INTO [dbo].[ADM_APP_WORK_EXPER]
					(
					[ADM_APP_WORK_EXPER_ID]
					,[ORGANIZATION_NAME]
					,[ORGANIZATION_ADDRESS]
					,[JOB_TITLE]
					,[PERIOD_FROM]
					,[PERIOD_TO]
					,[ADM_APPLICANT_ID]
					)
				VALUES
					(
					@V_AdmAppWorkExperId
					,@OrganizationName
					,@OrganizationAddress
					,@JobTitle
					,@PeriodFrom
					,@PeriodTo
					,@AdmApplicantId
					)
				
									
							
			]]>
      </body>
    </procedure>
    
    <procedure owner="dbo" name="ADM_APP_MESSAGE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_MESSAGE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppMessageId" type="numeric" direction="Output" size="9" precision="18" scale="0" param="(18, 0)" nulldefault=""/>
        <parameter name="@MsgSubj" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@MsgBody" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
        <parameter name="@MsgDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@FailFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				DECLARE @V_AdmAppMessageId numeric(18, 0)
				SELECT @V_AdmAppMessageId = ISNULL(MAX(ADM_APP_MESSAGE_ID), 0) + 1 FROM [dbo].[ADM_APP_MESSAGE];
				
				INSERT INTO [dbo].[ADM_APP_MESSAGE]
					(
					[ADM_APP_MESSAGE_ID]
					,[MSG_SUBJ]
					,[MSG_BODY]
					,[MSG_DATE]
					,[FAIL_FLG]
					)
				VALUES
					(
					@V_AdmAppMessageId
					,@MsgSubj
					,@MsgBody
					,@MsgDate
					,@FailFlg
					)
					
					
				Set @AdmAppMessageId= @V_AdmAppMessageId;
				
									

				
									
							
			]]>
      </body>
    </procedure>
  
	  <procedure owner="dbo" name="ED_ACAD_YEAR_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 10, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_ACAD_YEAR table
-- Table Comment: جدول الأعوام الأكاديمية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        
        begin transaction; 
            delete from ED_ACAD_YEAR_FACULTY  where [ED_ACAD_YEAR_ID] = @EdAcadYearId
            
				    DELETE FROM [ED_ACAD_YEAR] 
				    WHERE
					    [ED_ACAD_YEAR_ID] = @EdAcadYearId
          
       IF @@ERROR <> 0
       BEGIN
          ROLLBACK

          RETURN
       END
      commit transaction;
					
			]]>
      </body>
    </procedure>
    
    <procedure owner="dbo" name="GS_CODE_GENDER_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GS_CODE_GENDER table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@GenderDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@GenderDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@GenderCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [GS_CODE_GENDER_ID]
	, [GENDER_DESCR_AR]
	, [GENDER_DESCR_EN]
	, [GENDER_CODE]
    FROM
	[dbo].[GS_CODE_GENDER]
    WHERE 
	 ([GS_CODE_GENDER_ID] = @GsCodeGenderId OR @GsCodeGenderId IS NULL)
	AND ([GENDER_DESCR_AR] like '%'+@GenderDescrAr+'%' OR @GenderDescrAr IS NULL)
	AND ([GENDER_DESCR_EN] like '%'+ @GenderDescrEn+'%' OR @GenderDescrEn IS NULL)
	AND ([GENDER_CODE] = @GenderCode OR @GenderCode IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [GS_CODE_GENDER_ID]
	, [GENDER_DESCR_AR]
	, [GENDER_DESCR_EN]
	, [GENDER_CODE]
    FROM
	[dbo].[GS_CODE_GENDER]
    WHERE 
	 ([GS_CODE_GENDER_ID] = @GsCodeGenderId AND @GsCodeGenderId is not null)
	OR ([GENDER_DESCR_AR] like '%'+ @GenderDescrAr+'%' AND @GenderDescrAr is not null)
	OR ([GENDER_DESCR_EN] like '%'+@GenderDescrEn+'%' AND @GenderDescrEn is not null)
	OR ([GENDER_CODE] = @GenderCode AND @GenderCode is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_CODE_RELIGION_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GS_CODE_RELIGION table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GS_CODE_RELIGION_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([GS_CODE_RELIGION_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [GS_CODE_RELIGION_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[GS_CODE_RELIGION]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[GS_CODE_RELIGION_ID], O.[RELIGION_DESCR_AR], O.[RELIGION_DESCR_EN], O.[RELIGION_CODE]
				FROM
				    [dbo].[GS_CODE_RELIGION] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[GS_CODE_RELIGION_ID] = PageIndex.[GS_CODE_RELIGION_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GS_CODE_RELIGION]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GS_CODE_RELIGION_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GS_CODE_RELIGION table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ReligionDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@ReligionDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@ReligionCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [GS_CODE_RELIGION_ID]
	, [RELIGION_DESCR_AR]
	, [RELIGION_DESCR_EN]
	, [RELIGION_CODE]
    FROM
	[dbo].[GS_CODE_RELIGION]
    WHERE 
	 ([GS_CODE_RELIGION_ID] = @GsCodeReligionId OR @GsCodeReligionId IS NULL)
	AND ([RELIGION_DESCR_AR] like '%'+ @ReligionDescrAr+'%' OR @ReligionDescrAr IS NULL)
	AND ([RELIGION_DESCR_EN] like '%'+ @ReligionDescrEn+'%' OR @ReligionDescrEn IS NULL)
	AND ([RELIGION_CODE] = @ReligionCode OR @ReligionCode IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [GS_CODE_RELIGION_ID]
	, [RELIGION_DESCR_AR]
	, [RELIGION_DESCR_EN]
	, [RELIGION_CODE]
    FROM
	[dbo].[GS_CODE_RELIGION]
    WHERE 
	 ([GS_CODE_RELIGION_ID] = @GsCodeReligionId AND @GsCodeReligionId is not null)
	OR ([RELIGION_DESCR_AR] like '%'+ @ReligionDescrAr+'%' AND @ReligionDescrAr is not null)
	OR ([RELIGION_DESCR_EN] like '%'+ @ReligionDescrEn+'%' AND @ReligionDescrEn is not null)
	OR ([RELIGION_CODE] = @ReligionCode AND @ReligionCode is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_CODE_RELIGION_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GS_CODE_RELIGION table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GS_CODE_RELIGION_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [GS_CODE_RELIGION_ID] )
				SELECT TOP {3} [GS_CODE_RELIGION_ID]
				FROM [dbo].[GS_CODE_RELIGION] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[GS_CODE_RELIGION_ID], O.[RELIGION_DESCR_AR], O.[RELIGION_DESCR_EN], O.[RELIGION_CODE]
				FROM
				    [dbo].[GS_CODE_RELIGION] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[GS_CODE_RELIGION_ID] = PageIndex.[GS_CODE_RELIGION_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GS_CODE_RELIGION] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>

  
    <procedure owner="dbo" name="GS_CODE_LANGUAGE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GS_CODE_LANGUAGE table passing page index and page count parameters
-- Table Comment: جدول أكواد اللغات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GS_CODE_LANGUAGE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([GS_CODE_LANGUAGE_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [GS_CODE_LANGUAGE_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[GS_CODE_LANGUAGE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[GS_CODE_LANGUAGE_ID], O.DESCR_AR as [LANGUAGE_DESCR_AR], O.DESCR_EN as [LANGUAGE_DESCR_EN], O.LANG_CODE as [LANGUAGE_CODE], O.IS_LANG_LOCAL as [IS_LANGUAGE_LOCAL]
				FROM
				    [dbo].[GS_CODE_LANGUAGE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[GS_CODE_LANGUAGE_ID] = PageIndex.[GS_CODE_LANGUAGE_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GS_CODE_LANGUAGE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GS_CODE_LANGUAGE_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GS_CODE_LANGUAGE table passing nullable parameters
-- Table Comment: جدول أكواد اللغات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@GsCodeLanguageId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@LanguageDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@LanguageDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@LanguageCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@IsLanguageLocal" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [GS_CODE_LANGUAGE_ID]
	, DESCR_AR as [LANGUAGE_DESCR_AR]
	, DESCR_EN as [LANGUAGE_DESCR_EN]
	, LANG_CODE as [LANGUAGE_CODE]
	, IS_LANG_LOCAL as [IS_LANGUAGE_LOCAL]
    FROM
	[dbo].[GS_CODE_LANGUAGE]
    WHERE 
	 ([GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId OR @GsCodeLanguageId IS NULL)
	AND (DESCR_AR = @LanguageDescrAr OR @LanguageDescrAr IS NULL)
	AND (DESCR_EN = @LanguageDescrEn OR @LanguageDescrEn IS NULL)
	AND (LANG_CODE = @LanguageCode OR @LanguageCode IS NULL)
	AND (IS_LANG_LOCAL = @IsLanguageLocal OR @IsLanguageLocal IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [GS_CODE_LANGUAGE_ID]
	, DESCR_AR as [LANGUAGE_DESCR_AR]
	, DESCR_EN as [LANGUAGE_DESCR_EN]
	, LANG_CODE as [LANGUAGE_CODE]
	, IS_LANG_LOCAL as [IS_LANGUAGE_LOCAL]
    FROM
	[dbo].[GS_CODE_LANGUAGE]
    WHERE 
	 ([GS_CODE_LANGUAGE_ID] = @GsCodeLanguageId AND @GsCodeLanguageId is not null)
	OR ([DESCR_AR] = @LanguageDescrAr AND @LanguageDescrAr is not null)
	OR ([DESCR_EN] = @LanguageDescrEn AND @LanguageDescrEn is not null)
	OR ([LANG_CODE] = @LanguageCode AND @LanguageCode is not null)
	OR ([IS_LANG_LOCAL] = @IsLanguageLocal AND @IsLanguageLocal is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_CODE_LANGUAGE_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GS_CODE_LANGUAGE table using a dynamically generated query.
-- Table Comment: جدول أكواد اللغات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GS_CODE_LANGUAGE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [GS_CODE_LANGUAGE_ID] )
				SELECT TOP {3} [GS_CODE_LANGUAGE_ID]
				FROM [dbo].[GS_CODE_LANGUAGE] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[GS_CODE_LANGUAGE_ID], O.DESCR_AR as [LANGUAGE_DESCR_AR], O.DESCR_EN as [LANGUAGE_DESCR_EN], O.LANG_CODE as [LANGUAGE_CODE], O.IS_LANG_LOCAL as [IS_LANGUAGE_LOCAL]
				FROM
				    [dbo].[GS_CODE_LANGUAGE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[GS_CODE_LANGUAGE_ID] = PageIndex.[GS_CODE_LANGUAGE_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GS_CODE_LANGUAGE] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@NationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@FullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@ClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClStudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClGrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherProfession" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@FatherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@ClMotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@MotherNameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@BirthRegNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsBirthCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId1" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StudPhoto" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@GsCodeIdentTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsPrntStaff" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@SaStfMemberPrntId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
          /*
          IF (@NationalNumber  is not null )
          begin
              if exists( SELECT 'h' from ED_STUD inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where ( ED_STUD.NATIONAL_NUMBER = @NationalNumber and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId )  )
              begin
                --Throw exception with constant number -2000 as string
                -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
                --   raise_application_error (-20000, '(COS_SE_USR_USER_NAME)');
             RAISERROR('COS_NATIONAL_NUMBER',16,-1)
              RETURN 
             END 
          END
              
        IF (@FatherNationalNumber  is not null )
          begin
           
           --FATHER_NATIONAL_NUMBER = @FatherNationalNumber or --or NATIONAL_NUMBER=@FatherNationalNumber
              if exists( SELECT 'h' from ED_STUD inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where  (ED_STUD.FATHER_NATIONAL_NUMBER  =@FatherNationalNumber ) and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId )
              begin
              RAISERROR('COS_NATIONAL_NUMBER_Father',16,-1)
              RETURN 
             END 
          END
       IF (@MotherNationalNumber  is not null )
          begin
              if exists( SELECT 'h'   from ED_STUD inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where (ED_STUD.MOTHER_NATIONAL_NUMBER =@MotherNationalNumber )and  ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId )
              begin
             RAISERROR('COS_NATIONAL_NUMBER_Mother',16,-1)
              RETURN 
             END 
          END
          
        */
          
				DECLARE @V_EdStudId numeric(9, 0)
				SELECT @V_EdStudId = ISNULL(MAX(ED_STUD_ID), 0) + 1 FROM [dbo].[ED_STUD];
				 if exists(
select 'h' from ed_stud
where ([NATIONAL_NUMBER] = @NationalNumber)

 )   
  begin
                --Throw exception with constant number -2000 as string
                -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
                --   raise_application_error (-20000, '(COS_SE_USR_USER_NAME)');
             RAISERROR('COS_NATIONAL_NUMBER',16,-1)
              RETURN 
             END 
             else
             begin
				INSERT INTO [dbo].[ED_STUD]
					(
					[ED_STUD_ID]
					,[NATIONAL_NUMBER]
					,[FULL_NAME_AR]
					,[CL_FULL_NAME_AR]
					,[STUD_NAME_AR]
					,[CL_STUD_NAME_AR]
					,[FATHER_NAME_AR]
					,[CL_FATHER_NAME_AR]
					,[GRANDFATHER_NAME_AR]
					,[CL_GRANDFATHER_NAME_AR]
					,[FAMILY_NAME_AR]
					,[CL_FAMILY_NAME_AR]
					,[FULL_NAME_EN]
					,[STUD_NAME_EN]
					,[FATHER_NAME_EN]
					,[GRANDFATHER_NAME_EN]
					,[FAMILY_NAME_EN]
					,[FATHER_PROFESSION]
					,[FATHER_NATIONAL_NUMBER]
					,[MOTHER_NATIONAL_NUMBER]
					,[MOTHER_NAME_AR]
					,[CL_MOTHER_NAME_AR]
					,[MOTHER_NAME_EN]
					,[GS_CODE_GENDER_ID]
					,[GS_CODE_RELIGION_ID]
					,[BIRTH_REG_NUMBER]
					,[BIRTH_DATE]
					,[GS_BIRTH_COUNTRY_NODE_ID]
					,[GS_COUNTRY_INFO_ID_1]
					,[GS_COUNTRY_INFO_ID_2]
					,[STUD_PHOTO]
					,[GS_CODE_IDENT_TYPE_ID]
					,[IS_PRNT_STAFF]
					,[SA_STF_MEMBER_PRNT_ID]
					)
				VALUES
					(
					@V_EdStudId
					,@NationalNumber
					,@FullNameAr
					,@ClFullNameAr
					,@StudNameAr
					,@ClStudNameAr
					,@FatherNameAr
					,@ClFatherNameAr
					,@GrandfatherNameAr
					,@ClGrandfatherNameAr
					,@FamilyNameAr
					,@ClFamilyNameAr
					,@FullNameEn
					,@StudNameEn
					,@FatherNameEn
					,@GrandfatherNameEn
					,@FamilyNameEn
					,@FatherProfession
					,@FatherNationalNumber
					,@MotherNationalNumber
					,@MotherNameAr
					,@ClMotherNameAr
					,@MotherNameEn
					,@GsCodeGenderId
					,@GsCodeReligionId
					,@BirthRegNumber
					,@BirthDate
					,@GsBirthCountryNodeId
					,@GsCountryInfoId1
					,@GsCountryInfoId2
					,@StudPhoto
					,@GsCodeIdentTypeId
					,@IsPrntStaff
					,@SaStfMemberPrntId
					)
       				end
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="GS_CDE_CLRNC_ITEM_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GS_CDE_CLRNC_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCdeClrncItemId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DbSpCheck" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_GsCdeClrncItemId numeric(4, 0)
				SELECT @V_GsCdeClrncItemId = ISNULL(MAX(GS_CDE_CLRNC_ITEM_ID), 0) + 1 FROM [dbo].[GS_CDE_CLRNC_ITEM];
				
			if not exists (select * from GS_CDE_CLRNC_ITEM where DESCR_AR=@DescrAr OR DESCR_EN=@DescrEn)

begin
				DECLARE @V_GsCdeClrncItemId numeric(4, 0)
				SELECT @V_GsCdeClrncItemId = ISNULL(MAX(GS_CDE_CLRNC_ITEM_ID), 0) + 1 FROM [dbo].[GS_CDE_CLRNC_ITEM];
				
				INSERT INTO [dbo].[GS_CDE_CLRNC_ITEM]
					(
					[GS_CDE_CLRNC_ITEM_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[DB_SP_CHECK]
					)
				VALUES
					(
					@V_GsCdeClrncItemId
					,@DescrAr
					,@DescrEn
					,@DbSpCheck
					)
				END
				
				else
				Begin
				 RAISERROR('No GS_CDE_CLRNC_ITEM Repeated',16,-1)
              RETURN 
             END 
          
				
									
							
			


				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_CDE_CLRNC_ITEM_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GS_CDE_CLRNC_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCdeClrncItemId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@OriginalGsCdeClrncItemId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DbSpCheck" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
			if not exists (select * from GS_CDE_CLRNC_ITEM where DESCR_AR=@DescrAr OR DESCR_EN=@DescrEn and GS_CDE_CLRNC_ITEM_ID <> @GsCdeClrncItemId)

begin
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[GS_CDE_CLRNC_ITEM]
				SET
					[GS_CDE_CLRNC_ITEM_ID] = @GsCdeClrncItemId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[DB_SP_CHECK] = @DbSpCheck
				WHERE
[GS_CDE_CLRNC_ITEM_ID] = @GsCdeClrncItemId 
	END
				
				else
				Begin
				 RAISERROR('No GS_CDE_CLRNC_ITEM Repeated',16,-1)
              RETURN 
             END 

				
			


				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalEdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@NationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@FullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@ClFullNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClStudNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClGrandfatherNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@ClFamilyNameAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@StudNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@GrandfatherNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FamilyNameEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@FatherProfession" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@FatherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNationalNumber" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
        <parameter name="@MotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@ClMotherNameAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@MotherNameEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeReligionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@BirthRegNumber" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsBirthCountryNodeId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId1" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId2" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StudPhoto" type="nvarchar" direction="Input" size="350" precision="0" scale="0" param="(350)" nulldefault=""/>
        <parameter name="@GsCodeIdentTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsPrntStaff" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@SaStfMemberPrntId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
     /*
          IF (@NationalNumber  is not null )
          begin
              if exists( SELECT 'h' from ED_STUD inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where ( ED_STUD.NATIONAL_NUMBER = @NationalNumber and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId and ED_STUD.ED_STUD_ID!=@EdStudId)  )
              begin
                --Throw exception with constant number -2000 as string
                -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
                --   raise_application_error (-20000, '(COS_SE_USR_USER_NAME)');
             RAISERROR('COS_NATIONAL_NUMBER',16,-1)
              RETURN 
             END 
          END
              
        IF (@FatherNationalNumber  is not null )
          begin
           
           --FATHER_NATIONAL_NUMBER = @FatherNationalNumber or --or NATIONAL_NUMBER=@FatherNationalNumber
              if exists( SELECT 'h' from ED_STUD inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where  (ED_STUD.FATHER_NATIONAL_NUMBER  =@FatherNationalNumber ) and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId and ED_STUD.ED_STUD_ID!=@EdStudId )
              begin
              RAISERROR('COS_NATIONAL_NUMBER_Father',16,-1)
              RETURN 
             END 
          END
       IF (@MotherNationalNumber  is not null )
          begin
              if exists( SELECT 'h'   from ED_STUD inner join ED_STUD_FACULTY on ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID
              where (ED_STUD.MOTHER_NATIONAL_NUMBER =@MotherNationalNumber )and  ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId and ED_STUD.ED_STUD_ID!=@EdStudId )
              begin
             RAISERROR('COS_NATIONAL_NUMBER_Mother',16,-1)
              RETURN 
             END 
          END
     
        */
				--declare @StudCode nvarchar(50);
--select @StudCode=STUD_FACULTY_CODE from ED_STUD_FACULTY where ED_STUD_ID = @EdStudId;

--if((@StudCode is not null and @StudCode <> @BirthRegNumber) or @StudCode is null)
--begin

--set @StudCode = @BirthRegNumber;
--if not exists (select 1 from ED_STUD_FACULTY where STUD_FACULTY_CODE = @StudCode)
--begin
--update ED_STUD_FACULTY set STUD_FACULTY_CODE = @StudCode where ED_STUD_ID = @EdStudId;
--end

--end

if(@StudPhoto = '')
set @StudPhoto = null;

   if exists(
select 'h' from ed_stud
where ([NATIONAL_NUMBER] = @NationalNumber)
 AND ([ED_STUD_ID] <> @EdStudId)
 )   
  begin
                --Throw exception with constant number -2000 as string
                -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
                --   raise_application_error (-20000, '(COS_SE_USR_USER_NAME)');
             RAISERROR('COS_NATIONAL_NUMBER',16,-1)
              RETURN 
             END 
             else
             begin
-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD]
				SET 
					--[ED_STUD_ID] = @EdStudId,
					[NATIONAL_NUMBER] = @NationalNumber
					,[FULL_NAME_AR] = @FullNameAr
					,[CL_FULL_NAME_AR] = @ClFullNameAr
					,[STUD_NAME_AR] = @StudNameAr
					,[CL_STUD_NAME_AR] = @ClStudNameAr
					,[FATHER_NAME_AR] = @FatherNameAr
					,[CL_FATHER_NAME_AR] = @ClFatherNameAr
					,[GRANDFATHER_NAME_AR] = @GrandfatherNameAr
					,[CL_GRANDFATHER_NAME_AR] = @ClGrandfatherNameAr
					,[FAMILY_NAME_AR] = @FamilyNameAr
					,[CL_FAMILY_NAME_AR] = @ClFamilyNameAr
					,[FULL_NAME_EN] = @FullNameEn
					,[STUD_NAME_EN] = @StudNameEn
					,[FATHER_NAME_EN] = @FatherNameEn
					,[GRANDFATHER_NAME_EN] = @GrandfatherNameEn
					,[FAMILY_NAME_EN] = @FamilyNameEn
					,[FATHER_PROFESSION] = @FatherProfession
					,[FATHER_NATIONAL_NUMBER] = @FatherNationalNumber
					,[MOTHER_NATIONAL_NUMBER] = @MotherNationalNumber
					,[MOTHER_NAME_AR] = @MotherNameAr
					,[CL_MOTHER_NAME_AR] = @ClMotherNameAr
					,[MOTHER_NAME_EN] = @MotherNameEn
					,[GS_CODE_GENDER_ID] = @GsCodeGenderId
					,[GS_CODE_RELIGION_ID] = @GsCodeReligionId
					,[BIRTH_REG_NUMBER] = @BirthRegNumber
					,[BIRTH_DATE] = @BirthDate
					,[GS_BIRTH_COUNTRY_NODE_ID] = @GsBirthCountryNodeId
					,[GS_COUNTRY_INFO_ID_1] = @GsCountryInfoId1
					,[GS_COUNTRY_INFO_ID_2] = @GsCountryInfoId2
					,[STUD_PHOTO] = @StudPhoto
					,[GS_CODE_IDENT_TYPE_ID] = @GsCodeIdentTypeId
					,[IS_PRNT_STAFF] = @IsPrntStaff
					,[SA_STF_MEMBER_PRNT_ID] = @SaStfMemberPrntId
				WHERE [ED_STUD_ID] = @EdStudId 
	end
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_STUD table
-- Table Comment: جدول البيانات الأساسية للطالب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
         begin transaction;   
         
         declare @count numeric(5,0);
         set @count =0;
         select @count=count(*)
         from [dbo].[ED_STUD_FACULTY] 
         where [ED_STUD_ID] = @EdStudId
         
         if(@count=1)
          begin
           if exists(select 'b' from [dbo].[ED_STUD_FACULTY] where [ED_STUD_ID] = @EdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId)
              begin
               DELETE FROM [dbo].[ED_STUD_FACULTY] 
				       WHERE [ED_STUD_ID] = @EdStudId and AS_FACULTY_INFO_ID=@AsFacultyInfoId
      
			        DELETE FROM [dbo].[ED_STUD] WITH (ROWLOCK) 
			        WHERE
				        [ED_STUD_ID] = @EdStudId
              end
          end
          else
           begin
             RAISERROR('ERR_Deletion',16,-1)
             RETURN 
           end

        IF @@ERROR <> 0
         BEGIN
          ROLLBACK
          RETURN
         END
         else 
          begin 
           commit transaction; 
          end
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GetByGsCodeGenderId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ED_STUD].[ED_STUD_ID],
					ED_STUD_FACULTY.STUD_FACULTY_CODE,
					[NATIONAL_NUMBER],
					[FULL_NAME_AR],
					[CL_FULL_NAME_AR],
					[STUD_NAME_AR],
					[CL_STUD_NAME_AR],
					[FATHER_NAME_AR],
					[CL_FATHER_NAME_AR],
					[GRANDFATHER_NAME_AR],
					[CL_GRANDFATHER_NAME_AR],
					[FAMILY_NAME_AR],
					[CL_FAMILY_NAME_AR],
					[FULL_NAME_EN],
					[STUD_NAME_EN],
					[FATHER_NAME_EN],
					[GRANDFATHER_NAME_EN],
					[FAMILY_NAME_EN],
					[FATHER_PROFESSION],
					[FATHER_NATIONAL_NUMBER],
					[MOTHER_NATIONAL_NUMBER],
					[MOTHER_NAME_AR],
					[CL_MOTHER_NAME_AR],
					[MOTHER_NAME_EN],
					[GS_CODE_GENDER_ID],
					[GS_CODE_RELIGION_ID],
					[BIRTH_REG_NUMBER],
					[BIRTH_DATE],
					[GS_BIRTH_COUNTRY_NODE_ID],
					[GS_COUNTRY_INFO_ID_1],
					[GS_COUNTRY_INFO_ID_2],
					ED_STUD_FACULTY.AS_FACULTY_INFO_ID,
					[STUD_PHOTO]
				FROM
					[dbo].[ED_STUD] left outer join ED_STUD_FACULTY on (ED_STUD.ED_STUD_ID=ED_STUD_FACULTY.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
				WHERE
					[GS_CODE_GENDER_ID] = @GsCodeGenderId and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>



 
    <!--<procedure owner="dbo" name="ENT_POLICY_ASSESS_HDR_Get_List">
      <comment>
        <![CDATA[/*
 Date Created: Monday, May 17, 2010

Created By:  ()
 Purpose: Gets all records from the ENT_POLICY_ASSESS_HDR table

*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ENT_POLICY_ASSESS_HDR_ID],
					[DESCR_AR],
					[DESCR_EN],
					[ENT_MAIN_ID],
					[ED_STUDY_METHOD_ID],
					[IS_GENERAL],
          [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MAX_DEG,
          [dbo].[ENT_POLICY_ASSESS_HDR].COURSE_MIN_DEG
				FROM
					[dbo].[ENT_POLICY_ASSESS_HDR]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>-->
    <procedure owner="dbo" name="ENT_POLICY_ASSESS_HDR_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_ASSESS_HDR table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ENT_POLICY_ASSESS_HDR_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ENT_POLICY_ASSESS_HDR_ID]'
				SET @SQL = @SQL + ', [DESCR_AR]'
				SET @SQL = @SQL + ', [DESCR_EN]'
				SET @SQL = @SQL + ', [ENT_MAIN_ID]'
				SET @SQL = @SQL + ', [ED_STUDY_METHOD_ID]'
				SET @SQL = @SQL + ', [IS_GENERAL]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_ASSESS_HDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ENT_POLICY_ASSESS_HDR_ID],'
				SET @SQL = @SQL + ' [DESCR_AR],'
				SET @SQL = @SQL + ' [DESCR_EN],'
				SET @SQL = @SQL + ' [ENT_MAIN_ID],'
				SET @SQL = @SQL + ' [ED_STUDY_METHOD_ID],'
				SET @SQL = @SQL + ' [IS_GENERAL]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_ASSESS_HDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
   <procedure owner="dbo" name="ENT_POLICY_ASSESS_HDR_Insert" grant="">
      <comment>
        <![CDATA[/*
 Date Created: Monday, May 17, 2010

 Created By:  ()
 Purpose: Inserts a record into the ENT_POLICY_ASSESS_HDR table

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdStudyMethodId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@IsGeneral" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CourseMaxDeg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CourseMinDeg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[

        IF EXISTS(SELECT * FROM ENT_POLICY_ASSESS_HDR WHERE (DESCR_AR = @DescrAr OR DESCR_EN = @DescrEn) and Ent_Main_ID = @EntMainId)
        BEGIN
          RAISERROR('(COS_POLICY_ASSESS_HDR_DESCR)',16,-1);
          RETURN;
        END;
				
        DECLARE @V_EntPolicyAssessHdrId numeric(7, 0)
				SELECT @V_EntPolicyAssessHdrId = ISNULL(MAX(ENT_POLICY_ASSESS_HDR_ID), 0) + 1 FROM [dbo].[ENT_POLICY_ASSESS_HDR];
				
				INSERT INTO [dbo].[ENT_POLICY_ASSESS_HDR]
					(
					[ENT_POLICY_ASSESS_HDR_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[ENT_MAIN_ID]
					,[ED_STUDY_METHOD_ID]
					,[IS_GENERAL]
					,[ED_BYLAW_ID]
					,[COURSE_MAX_DEG]
					,[COURSE_MIN_DEG]
					)
				VALUES
					(
					@V_EntPolicyAssessHdrId
					,@DescrAr
					,@DescrEn
					,@EntMainId
					,@EdStudyMethodId
					,@IsGeneral
					,@EdBylawId
					,@CourseMaxDeg
					,@CourseMinDeg
					)

			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_ASSESS_HDR_Update" grant="">
      <comment>
        <![CDATA[/*
 Date Created: Monday, May 17, 2010

 Created By:  ()
 Purpose: Updates a record in the ENT_POLICY_ASSESS_HDR table

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@OriginalEntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdStudyMethodId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsGeneral" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CourseMaxDeg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@CourseMinDeg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
        if  exists (select 'a' from [dbo].[ENT_POLICY_ASSESS_HDR] where
           (([DESCR_AR]=@DescrAr) and ([ENT_POLICY_ASSESS_HDR_ID] = @OriginalEntPolicyAssessHdrId )) or
           (([DESCR_EN]=@DescrEn) and ([ENT_POLICY_ASSESS_HDR_ID] = @OriginalEntPolicyAssessHdrId )))
           begin
               RAISERROR('(COS_POLICY_ASSESS_HDR_DESCR)',16,-1)
                                   return
           end
         
			 Modify the updatable columns
				UPDATE
					[dbo].[ENT_POLICY_ASSESS_HDR]
				SET
					[ENT_POLICY_ASSESS_HDR_ID] = @EntPolicyAssessHdrId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[ENT_MAIN_ID] = @EntMainId
					,[ED_STUDY_METHOD_ID] = @EdStudyMethodId
					,[IS_GENERAL] = @IsGeneral
          ,[ED_BYLAW_ID] = @EdBylawId
					,[COURSE_MAX_DEG] = @CourseMaxDeg
					,[COURSE_MIN_DEG] = @CourseMinDeg
				WHERE
[ENT_POLICY_ASSESS_HDR_ID] = @OriginalEntPolicyAssessHdrId 
				
			]]>
      </body>
    </procedure>
      <procedure owner="dbo" name="ENT_POLICY_ASSESS_DTL_Insert" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_POLICY_ASSESS_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@EntPolicyAssessDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
              <parameter name="@EdCodeCourseAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
              <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
              <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
              
              IF EXISTS(SELECT * FROM ENT_POLICY_ASSESS_DTL WHERE (ED_CODE_COURSE_ASSESS_ID = @EdCodeCourseAssessId ) and ENT_POLICY_ASSESS_HDR_ID = @EntPolicyAssessHdrId)
        BEGIN
          RAISERROR('Do not repeat data',16,-1);
          RETURN;
        END;
              
				DECLARE @V_EntPolicyAssessDtlId numeric(3, 0)
				SELECT @V_EntPolicyAssessDtlId = ISNULL(MAX(ENT_POLICY_ASSESS_DTL_ID), 0) + 1 FROM [dbo].[ENT_POLICY_ASSESS_DTL];
				
				INSERT INTO [dbo].[ENT_POLICY_ASSESS_DTL]
					(
					[ENT_POLICY_ASSESS_DTL_ID]
					,[ENT_POLICY_ASSESS_HDR_ID]
					,[ED_CODE_COURSE_ASSESS_ID]
					,[MAX_RATE]
					,[MIN_RATE]
					)
				VALUES
					(
					@V_EntPolicyAssessDtlId
					,@EntPolicyAssessHdrId
					,@EdCodeCourseAssessId
					,@MaxRate
					,@MinRate
					)
				
									
							
			]]>
          </body>
      </procedure>
      <procedure owner="dbo" name="ENT_POLICY_ASSESS_DTL_Update" grant="">
          <comment>
              <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ENT_POLICY_ASSESS_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
          </comment>
          <parameters>
              <parameter name="@EntPolicyAssessDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@OriginalEntPolicyAssessDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
              <parameter name="@EdCodeCourseAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
              <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
              <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
				
                IF EXISTS(SELECT * FROM ENT_POLICY_ASSESS_DTL 
			WHERE ED_CODE_COURSE_ASSESS_ID = @EdCodeCourseAssessId and ENT_POLICY_ASSESS_HDR_ID = @EntPolicyAssessHdrId
			AND [ENT_POLICY_ASSESS_DTL_ID] <> @EntPolicyAssessDtlId
			)
        BEGIN
          RAISERROR('Do not repeat data',16,-1);
          RETURN;
        END;
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ENT_POLICY_ASSESS_DTL]
				SET
					[ENT_POLICY_ASSESS_DTL_ID] = @EntPolicyAssessDtlId
					,[ENT_POLICY_ASSESS_HDR_ID] = @EntPolicyAssessHdrId
					,[ED_CODE_COURSE_ASSESS_ID] = @EdCodeCourseAssessId
					,[MAX_RATE] = @MaxRate
					,[MIN_RATE] = @MinRate
				WHERE
[ENT_POLICY_ASSESS_DTL_ID] = @EntPolicyAssessDtlId 
				
			]]>
          </body>
      </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_CODE_COURSE_ASSESS table
-- Table Comment: جدول أكواد طرق تقييم المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_CODE_COURSE_ASSESS_ID],
					[DESCR_AR],
					[DESCR_EN],
					[AS_FACULTY_INFO_ID]
				FROM
					[dbo].[ED_CODE_COURSE_ASSESS]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_CODE_COURSE_ASSESS table passing page index and page count parameters
-- Table Comment: جدول أكواد طرق تقييم المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_CODE_COURSE_ASSESS_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_CODE_COURSE_ASSESS_ID]'
				SET @SQL = @SQL + ', [DESCR_AR]'
				SET @SQL = @SQL + ', [DESCR_EN]'
				SET @SQL = @SQL + ', [AS_FACULTY_INFO_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE_ASSESS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_CODE_COURSE_ASSESS_ID],'
				SET @SQL = @SQL + ' [DESCR_AR],'
				SET @SQL = @SQL + ' [DESCR_EN],'
				SET @SQL = @SQL + ' [AS_FACULTY_INFO_ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_CODE_COURSE_ASSESS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_COURSE_ASSESS table
-- Table Comment: جدول أكواد طرق تقييم المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ControlFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxEdCodeCourseAssessId numeric(9,0)
        select  @MaxEdCodeCourseAssessId =max(ED_CODE_COURSE_ASSESS_ID)from ED_CODE_COURSE_ASSESS;
         if( @MaxEdCodeCourseAssessId is null)
            set  @MaxEdCodeCourseAssessId=0;
            
          set  @MaxEdCodeCourseAssessId= @MaxEdCodeCourseAssessId+1;  
          
        BEGIN TRANSACTION	
        
        if(@ControlFlag=1)
        begin
         update [dbo].[ED_CODE_COURSE_ASSESS]
         set CONTROL_FLAG=0
         where AS_FACULTY_INFO_ID=@AsFacultyInfoId
        end
        
				INSERT INTO [dbo].[ED_CODE_COURSE_ASSESS]
					(
					[ED_CODE_COURSE_ASSESS_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[AS_FACULTY_INFO_ID]
          ,CONTROL_FLAG
					)
				VALUES
					(
					@MaxEdCodeCourseAssessId
					,@DescrAr
					,@DescrEn
					,case when @AsFacultyInfoId=0 then null else @AsFacultyInfoId end
          ,@ControlFlag
					)
				
				IF @@ERROR <> 0
   BEGIN
      ROLLBACK

      RETURN
   END
  commit transaction;				
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_CODE_COURSE_ASSESS table
-- Table Comment: جدول أكواد طرق تقييم المقررات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeCourseAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@OriginalEdCodeCourseAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ControlFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
       BEGIN TRANSACTION	
        
        if(@ControlFlag=1)
        begin
         update [dbo].[ED_CODE_COURSE_ASSESS]
         set CONTROL_FLAG=0
         where AS_FACULTY_INFO_ID=@AsFacultyInfoId
        end
        
        
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_CODE_COURSE_ASSESS]
				SET
					 [DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[AS_FACULTY_INFO_ID] = case when @AsFacultyInfoId=0 then null else @AsFacultyInfoId end
          ,CONTROL_FLAG=@ControlFlag
				WHERE
           [ED_CODE_COURSE_ASSESS_ID] = @EdCodeCourseAssessId 

				IF @@ERROR <> 0
   BEGIN
      ROLLBACK

      RETURN
   END
  commit transaction;			
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_GetByAsFacultyInfoId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_ASSESS table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_CODE_COURSE_ASSESS_ID],
					[DESCR_AR],
					[DESCR_EN],
					[AS_FACULTY_INFO_ID],
          'temp',
          CONTROL_FLAG
				FROM
					[dbo].[ED_CODE_COURSE_ASSESS]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId or (@AsFacultyInfoId=0 and AS_FACULTY_INFO_ID is null)
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_CODE_COURSE_ASSESS_GetByAsFacultyInfoIdDescrAr">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ED_CODE_COURSE_ASSESS table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ED_CODE_COURSE_ASSESS_ID],
					[DESCR_AR],
					[DESCR_EN],
					[AS_FACULTY_INFO_ID]
				FROM
					[dbo].[ED_CODE_COURSE_ASSESS]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					AND [DESCR_AR] = @DescrAr
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ENT_POLICY_TCHNG_COURSE_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ENT_POLICY_TCHNG_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ENT_POLICY_TCHNG_COURSE_ID],
					[ENT_POLICY_TCHNG_HDR_ID],
					[ED_COURSE_ID]
				FROM
					[dbo].[ENT_POLICY_TCHNG_COURSE]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_COURSE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_TCHNG_COURSE table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ENT_POLICY_TCHNG_COURSE_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ENT_POLICY_TCHNG_COURSE_ID]'
				SET @SQL = @SQL + ', [ENT_POLICY_TCHNG_HDR_ID]'
				SET @SQL = @SQL + ', [ED_COURSE_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_TCHNG_COURSE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ENT_POLICY_TCHNG_COURSE_ID],'
				SET @SQL = @SQL + ' [ENT_POLICY_TCHNG_HDR_ID],'
				SET @SQL = @SQL + ' [ED_COURSE_ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_TCHNG_COURSE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_POLICY_TCHNG_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntCoursePkgHdrID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        declare @MaxEntPolicyTchngCourseId numeric
        select @MaxEntPolicyTchngCourseId=max(ENT_POLICY_TCHNG_COURSE_ID) from ENT_POLICY_TCHNG_COURSE
        if(@MaxEntPolicyTchngCourseId is null)
           set @MaxEntPolicyTchngCourseId=0
         set @MaxEntPolicyTchngCourseId=@MaxEntPolicyTchngCourseId+1;
        
        
        
        
        
          declare @EntMainId numeric
        select @EntMainId=ENT_MAIN_ID from ENT_POLICY_TCHNG_HDR where 
        ENT_POLICY_TCHNG_HDR_ID=@EntPolicyTchngHdrId
        
        
        if exists(   select 'a' from ENT_POLICY_TCHNG_COURSE inner join 
                     ENT_POLICY_TCHNG_HDR on ENT_POLICY_TCHNG_HDR.ENT_POLICY_TCHNG_HDR_ID=
                     ENT_POLICY_TCHNG_COURSE.ENT_POLICY_TCHNG_HDR_ID
        where 
                    ENT_POLICY_TCHNG_COURSE.ED_COURSE_ID=@EdCourseId and 
                    ENT_POLICY_TCHNG_COURSE.ENT_COURSE_PKG_HDR_ID=@EntCoursePkgHdrID and 
                    ENT_POLICY_TCHNG_HDR.ENT_MAIN_ID=@EntMainId
                 )
          begin
              RAISERROR('(COS_ENT_POLICY_TCHNG_COURSE)',16,-1)
                                   return
          end
        
        
        
        
				INSERT INTO [dbo].[ENT_POLICY_TCHNG_COURSE]
					(
					[ENT_POLICY_TCHNG_COURSE_ID]
					,[ENT_POLICY_TCHNG_HDR_ID]
					,[ED_COURSE_ID]
          ,ENT_COURSE_PKG_HDR_ID
					)
				VALUES
					(
					@MaxEntPolicyTchngCourseId
					,@EntPolicyTchngHdrId
					,@EdCourseId
          ,@EntCoursePkgHdrID
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_COURSE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ENT_POLICY_TCHNG_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@OriginalEntPolicyTchngCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        
           declare @EntMainId numeric
        select @EntMainId=ENT_MAIN_ID from ENT_POLICY_TCHNG_HDR where 
        ENT_POLICY_TCHNG_HDR_ID=@EntPolicyTchngHdrId
        
        
        if exists(   select 'a' from ENT_POLICY_TCHNG_COURSE inner join 
                     ENT_POLICY_TCHNG_HDR on ENT_POLICY_TCHNG_HDR.ENT_POLICY_TCHNG_HDR_ID=
                     ENT_POLICY_TCHNG_COURSE.ENT_POLICY_TCHNG_HDR_ID
        where 
                    ENT_POLICY_TCHNG_COURSE.ED_COURSE_ID=@EdCourseId and 
                    ENT_POLICY_TCHNG_COURSE.ENT_COURSE_PKG_HDR_ID=@EntCoursePkgHdrID and 
                    ENT_POLICY_TCHNG_HDR.ENT_MAIN_ID=@EntMainId and 
                    ENT_POLICY_TCHNG_COURSE.ENT_POLICY_TCHNG_COURSE_ID <> @EntPolicyTchngCourseId
                 )
          begin
              RAISERROR('(COS_ENT_POLICY_TCHNG_COURSE)',16,-1)
                                   return
          end
        
        
        
				UPDATE
					[dbo].[ENT_POLICY_TCHNG_COURSE]
				SET
					[ENT_POLICY_TCHNG_COURSE_ID] = @EntPolicyTchngCourseId
					,[ENT_POLICY_TCHNG_HDR_ID] = @EntPolicyTchngHdrId
					,[ED_COURSE_ID] = @EdCourseId
				WHERE
[ENT_POLICY_TCHNG_COURSE_ID] = @OriginalEntPolicyTchngCourseId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ENT_POLICY_TCHNG_COURSE_GetByEntPolicyTchngHdrId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_TCHNG_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
        
         declare @EntityMainID numeric
        select @EntityMainID=ENT_MAIN_ID  from ENT_POLICY_Tchng_HDR where ENT_POLICY_Tchng_HDR_ID=@EntPolicyTchngHdrId
        
        
				
				SELECT
					[dbo].[ENT_POLICY_TCHNG_COURSE].[ENT_POLICY_TCHNG_COURSE_ID],
					[dbo].[ENT_POLICY_TCHNG_COURSE].[ENT_POLICY_TCHNG_HDR_ID],
          [dbo].[ENT_POLICY_TCHNG_COURSE].ED_COURSE_ID,
          ENT_COURSE_PKG_HDR.DESCR_AR,
          ENT_COURSE_PKG_HDR.DESCR_EN,
          ed_course.COURSE_DESCR_AR,
          ed_course.COURSE_DESCR_EN
          from
					[dbo].[ENT_POLICY_TCHNG_COURSE] inner join ed_course on ed_course.ed_course_id=[dbo].[ENT_POLICY_TCHNG_COURSE].ed_course_id
          left outer join ENT_COURSE_PKG_DTL on ENT_COURSE_PKG_DTL.ED_COURSE_ID=ed_course.ed_course_id
          inner join ENT_COURSE_PKG_HDR 
          on (ENT_COURSE_PKG_HDR.ENT_COURSE_PKG_HDR_id=ENT_COURSE_PKG_DTL.ENT_COURSE_PKG_HDR_id 
          and ENT_COURSE_PKG_HDR.ENT_MAIN_ID=@EntityMainID)
          
				WHERE
					[ENT_POLICY_TCHNG_HDR_ID] = @EntPolicyTchngHdrId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ENT_POLICY_TCHNG_COURSE_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_TCHNG_COURSE table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EntPolicyTchngCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ENT_POLICY_TCHNG_COURSE_ID]
	, [ENT_POLICY_TCHNG_HDR_ID]
	, [ED_COURSE_ID]
    FROM
	[dbo].[ENT_POLICY_TCHNG_COURSE]
    WHERE 
	 ([ENT_POLICY_TCHNG_COURSE_ID] = @EntPolicyTchngCourseId OR @EntPolicyTchngCourseId IS NULL)
	AND ([ENT_POLICY_TCHNG_HDR_ID] = @EntPolicyTchngHdrId OR @EntPolicyTchngHdrId IS NULL)
	AND ([ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ENT_POLICY_TCHNG_COURSE_ID]
	, [ENT_POLICY_TCHNG_HDR_ID]
	, [ED_COURSE_ID]
    FROM
	[dbo].[ENT_POLICY_TCHNG_COURSE]
    WHERE 
	 ([ENT_POLICY_TCHNG_COURSE_ID] = @EntPolicyTchngCourseId AND @EntPolicyTchngCourseId is not null)
	OR ([ENT_POLICY_TCHNG_HDR_ID] = @EntPolicyTchngHdrId AND @EntPolicyTchngHdrId is not null)
	OR ([ED_COURSE_ID] = @EdCourseId AND @EdCourseId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_COURSE_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_TCHNG_COURSE table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ENT_POLICY_TCHNG_COURSE_ID]
					, [ENT_POLICY_TCHNG_HDR_ID]
					, [ED_COURSE_ID]
					FROM [dbo].[ENT_POLICY_TCHNG_COURSE] {0}
				)
				SELECT
				       [ENT_POLICY_TCHNG_COURSE_ID],
				       [ENT_POLICY_TCHNG_HDR_ID],
				       [ED_COURSE_ID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ENT_POLICY_TCHNG_COURSE] {0};
				
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_DTL_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_TCHNG_DTL table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ENT_POLICY_TCHNG_DTL_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ENT_POLICY_TCHNG_DTL_ID]'
				SET @SQL = @SQL + ', [ENT_POLICY_TCHNG_HDR_ID]'
				SET @SQL = @SQL + ', [GROUP_OR_SECTION_FLAG]'
				SET @SQL = @SQL + ', [ED_CODE_COURSE_TEACHING_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_TCHNG_DTL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ENT_POLICY_TCHNG_DTL_ID],'
				SET @SQL = @SQL + ' [ENT_POLICY_TCHNG_HDR_ID],'
				SET @SQL = @SQL + ' [GROUP_OR_SECTION_FLAG],'
				SET @SQL = @SQL + ' [ED_CODE_COURSE_TEACHING_ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_TCHNG_DTL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_DTL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_POLICY_TCHNG_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GroupOrSectionFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@MethodDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@MethodDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
         
       -- declare @AsFacultyInfoId numeric;
       -- select @AsFacultyInfoId= ENTITY_MAIN.AS_FACULTY_INFO_ID
             --   FROM         ENTITY_MAIN INNER JOIN
                 --     ENT_POLICY_TCHNG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_POLICY_TCHNG_HDR.ENT_MAIN_ID
                -- WHERE     (ENT_POLICY_TCHNG_HDR.ENT_POLICY_TCHNG_HDR_ID = @EntPolicyTchngHdrId)
        
        
        -- declare @TempCodeTchngID numeric(2,0),@MaxEntPolicyAssessDtlID numeric(3,0)
       -- select @TempCodeTchngID=[ED_CODE_COURSE_TEACHING_ID] from [ED_CODE_COURSE_TEACHING]
        --where DESCR_AR=@MethodDescrAr and DESCR_EN=@MethodDescrEn  and As_Faculty_info_id=@AsFacultyInfoId
        
        --if(@TempCodeTchngID is null)
         --  Begin
              -- select @TempCodeTchngID=max(ED_CODE_COURSE_TEACHING_ID) from ED_CODE_COURSE_TEACHING
              -- if(@TempCodeTchngID is null)
               --  set @TempCodeTchngID=0
               --set @TempCodeTchngID=@TempCodeTchngID+1;
               
               
               
          
               
               
              --- declare @MaxTeachingCodeOrder numeric(1,0)
              ----  select @MaxTeachingCodeOrder=max(METHOD_ORDER) from ED_CODE_COURSE_TEACHING
               -- where AS_FACULTY_INFO_ID=@AsFacultyInfoId;
              -- if(@MaxTeachingCodeOrder is null)
                -- set @MaxTeachingCodeOrder=0
              -- set @MaxTeachingCodeOrder=@MaxTeachingCodeOrder+1;
               
               
               
             --  insert into ED_CODE_COURSE_TEACHING(ED_CODE_COURSE_TEACHING_ID,DESCR_AR,DESCR_EN,METHOD_ORDER,AS_FACULTY_INFO_ID) 
             --  values(@TempCodeTchngID,@MethodDescrAr,@MethodDescrEn,@MaxTeachingCodeOrder,@AsFacultyInfoId)
           --End
           
				
        
       -- select @MaxEntPolicyAssessDtlID=max(ENT_POLICY_ASSESS_DTL_ID) from ENT_POLICY_ASSESS_DTL
        --if(@MaxEntPolicyAssessDtlID is null)
         -- set @MaxEntPolicyAssessDtlID=0
       -- set @MaxEntPolicyAssessDtlID=@MaxEntPolicyAssessDtlID+1;
        
        
        
        if exists(select 'a' from ENT_POLICY_TCHNG_DTL where ENT_POLICY_TCHNG_HDR_ID=@EntPolicyTchngHdrId and
        ED_CODE_COURSE_TEACHING_ID=@EdCodeCourseTeachingId)
          Begin
                 RAISERROR('(COS_ENT_POLICY_TCHNG_DTL_REPEATE_CODE)',16,-1)
                                   return
          End
        
			
      declare @MaxEntPolicyTchngDtlId numeric;
      select @MaxEntPolicyTchngDtlId=max(ENT_POLICY_TCHNG_DTL_ID) from ENT_POLICY_TCHNG_DTL
      if(@MaxEntPolicyTchngDtlId is null)
         set @MaxEntPolicyTchngDtlId=0;
      set @MaxEntPolicyTchngDtlId=@MaxEntPolicyTchngDtlId+1;
        
      
        
				INSERT INTO [dbo].[ENT_POLICY_TCHNG_DTL]
					(
					[ENT_POLICY_TCHNG_DTL_ID]
					,[ENT_POLICY_TCHNG_HDR_ID]
					,[GROUP_OR_SECTION_FLAG]
					,[ED_CODE_COURSE_TEACHING_ID]
					)
				VALUES
					(
				  @MaxEntPolicyTchngDtlId
					,@EntPolicyTchngHdrId
					,@GroupOrSectionFlag
					,@EdCodeCourseTeachingId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_DTL_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ENT_POLICY_TCHNG_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@OriginalEntPolicyTchngDtlId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GroupOrSectionFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@MethodDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@MethodDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        
        
        declare @AsFacultyInfoId numeric;
        select @AsFacultyInfoId= ENTITY_MAIN.AS_FACULTY_INFO_ID
                FROM         ENTITY_MAIN INNER JOIN
                      ENT_POLICY_TCHNG_HDR ON ENTITY_MAIN.ENT_MAIN_ID = ENT_POLICY_TCHNG_HDR.ENT_MAIN_ID
                 WHERE     (ENT_POLICY_TCHNG_HDR.ENT_POLICY_TCHNG_HDR_ID = @EntPolicyTchngHdrId)
        
        
         declare @TempCodeTchngID numeric(2,0),@MaxEntPolicyAssessDtlID numeric(3,0)
        select @TempCodeTchngID=[ED_CODE_COURSE_TEACHING_ID] from [ED_CODE_COURSE_TEACHING]
        where (DESCR_AR=@MethodDescrAr or DESCR_EN=@MethodDescrEn) and As_Faculty_info_id=@AsFacultyInfoId
        
        if(@TempCodeTchngID is null)
           Begin
               select @TempCodeTchngID=max(ED_CODE_COURSE_TEACHING_ID) from ED_CODE_COURSE_TEACHING
               if(@TempCodeTchngID is null)
                 set @TempCodeTchngID=0
               set @TempCodeTchngID=@TempCodeTchngID+1;
               
               
               
               declare @MaxTeachingCodeOrder numeric(1,0)
                select @MaxTeachingCodeOrder=max(METHOD_ORDER) from ED_CODE_COURSE_TEACHING
                where AS_FACULTY_INFO_ID=@AsFacultyInfoId;
               if(@MaxTeachingCodeOrder is null)
                 set @MaxTeachingCodeOrder=0
               set @MaxTeachingCodeOrder=@MaxTeachingCodeOrder+1;
               
               
               
               insert into ED_CODE_COURSE_TEACHING(ED_CODE_COURSE_TEACHING_ID,DESCR_AR,DESCR_EN,METHOD_ORDER,AS_FACULTY_INFO_ID) 
               values(@TempCodeTchngID,@MethodDescrAr,@MethodDescrEn,@MaxTeachingCodeOrder,@AsFacultyInfoId)
           End
           
				

        
				UPDATE
					[dbo].[ENT_POLICY_TCHNG_DTL]
				SET
					[ENT_POLICY_TCHNG_DTL_ID] = @EntPolicyTchngDtlId
					,[ENT_POLICY_TCHNG_HDR_ID] = @EntPolicyTchngHdrId
					,[GROUP_OR_SECTION_FLAG] = @GroupOrSectionFlag
					,[ED_CODE_COURSE_TEACHING_ID] = @TempCodeTchngID
				WHERE
[ENT_POLICY_TCHNG_DTL_ID] = @OriginalEntPolicyTchngDtlId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ENT_POLICY_TCHNG_DTL_GetByEntPolicyTchngHdrId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Select records from the ENT_POLICY_TCHNG_DTL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ENT_POLICY_TCHNG_DTL].[ENT_POLICY_TCHNG_DTL_ID],
					[dbo].[ENT_POLICY_TCHNG_DTL].[ENT_POLICY_TCHNG_HDR_ID],
					[dbo].[ENT_POLICY_TCHNG_DTL].[GROUP_OR_SECTION_FLAG],
					[dbo].[ENT_POLICY_TCHNG_DTL].[ED_CODE_COURSE_TEACHING_ID],
          ED_CODE_COURSE_TEACHING.DESCR_AR,
          ED_CODE_COURSE_TEACHING.DESCR_EN
          
				FROM
					[dbo].[ENT_POLICY_TCHNG_DTL] inner join ED_CODE_COURSE_TEACHING on 
          ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID=[dbo].[ENT_POLICY_TCHNG_DTL].ED_CODE_COURSE_TEACHING_ID
          
				WHERE
					[ENT_POLICY_TCHNG_HDR_ID] = @EntPolicyTchngHdrId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_DTL_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_TCHNG_DTL table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ENT_POLICY_TCHNG_DTL_ID]
					, [ENT_POLICY_TCHNG_HDR_ID]
					, [GROUP_OR_SECTION_FLAG]
					, [ED_CODE_COURSE_TEACHING_ID]
					FROM [dbo].[ENT_POLICY_TCHNG_DTL] {0}
				)
				SELECT
				       [ENT_POLICY_TCHNG_DTL_ID],
				       [ENT_POLICY_TCHNG_HDR_ID],
				       [GROUP_OR_SECTION_FLAG],
				       [ED_CODE_COURSE_TEACHING_ID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ENT_POLICY_TCHNG_DTL] {0};
				
				END
			]]>
      </body>
    </procedure>

    <!--<procedure owner="dbo" name="ENT_POLICY_ASSESS_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
 Date Created: Monday, May 17, 2010

 Created By:  ()
 Purpose: Inserts a record into the ENT_POLICY_ASSESS_COURSE table

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyAssessCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntCoursePkgHdrID" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        
        declare @MaxEntPolicyAssessCourse numeric(3,0)
        select @MaxEntPolicyAssessCourse=max(ENT_POLICY_ASSESS_COURSE_ID) from [dbo].[ENT_POLICY_ASSESS_COURSE]
        if(@MaxEntPolicyAssessCourse is null)
          set @MaxEntPolicyAssessCourse=0
        set @MaxEntPolicyAssessCourse=@MaxEntPolicyAssessCourse+1;
        
        
        
        declare @EntMainId numeric
        select @EntMainId=ENT_MAIN_ID from ENT_POLICY_ASSESS_HDR where 
        ENT_POLICY_ASSESS_HDR_ID=@EntPolicyAssessHdrId
        
        
        if exists(   select 'a' from ENT_POLICY_ASSESS_COURSE inner join 
                     ENT_POLICY_ASSESS_HDR on ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID=
                     ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID
        where 
                    ENT_POLICY_ASSESS_COURSE.ED_COURSE_ID=@EdCourseId and 
                    ENT_POLICY_ASSESS_COURSE.ENT_COURSE_PKG_HDR_ID=@EntCoursePkgHdrID and 
                    ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID=@EntMainId
                 )
          begin
              RAISERROR('(COS_ENT_POLICY_ASSESS_COURSE)',16,-1)
                                   return
          end
        
        
        
				INSERT INTO [dbo].[ENT_POLICY_ASSESS_COURSE]
					(
					[ENT_POLICY_ASSESS_COURSE_ID]
					,[ENT_POLICY_ASSESS_HDR_ID]
					,[ED_COURSE_ID]
          ,ENT_COURSE_PKG_HDR_ID
					)
				VALUES
					(
					@MaxEntPolicyAssessCourse
					,@EntPolicyAssessHdrId
					,@EdCourseId
          ,@EntCoursePkgHdrID
					)
				
									
							
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="ENT_POLICY_ASSESS_COURSE_Update" grant="">
      <comment>
        <![CDATA[/*
 Date Created: Monday, May 17, 2010

 Created By:  ()
 Purpose: Updates a record in the ENT_POLICY_ASSESS_COURSE table

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyAssessCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@OriginalEntPolicyAssessCourseId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				 Modify the updatable columns
        
        
        
        
        declare @EntMainId numeric
        select @EntMainId=ENT_MAIN_ID from ENT_POLICY_ASSESS_HDR where 
        ENT_POLICY_ASSESS_HDR_ID=@EntPolicyAssessHdrId
        
        
        if exists(   select 'a' from ENT_POLICY_ASSESS_COURSE inner join 
                     ENT_POLICY_ASSESS_HDR on ENT_POLICY_ASSESS_HDR.ENT_POLICY_ASSESS_HDR_ID=
                     ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_HDR_ID
        where 
                    ENT_POLICY_ASSESS_COURSE.ED_COURSE_ID=@EdCourseId and 
                    ENT_POLICY_ASSESS_COURSE.ENT_COURSE_PKG_HDR_ID=@EntCoursePkgHdrID and 
                    ENT_POLICY_ASSESS_HDR.ENT_MAIN_ID=@EntMainId and 
                    ENT_POLICY_ASSESS_COURSE.ENT_POLICY_ASSESS_COURSE_ID <> @EntPolicyAssessCourseId
                 )
          begin
              RAISERROR('(COS_ENT_POLICY_ASSESS_COURSE)',16,-1)
                                   return
          end
        
        
         if exists( select 'a' from ENT_POLICY_ASSESS_COURSE 
            where
                ED_COURSE_ID=@EdCourseId and 
                ENT_COURSE_PKG_HDR_ID=@EntCoursePkgHdrID and 
                ENT_POLICY_ASSESS_HDR_ID=@EntPolicyAssessHdrId and 
                [ENT_POLICY_ASSESS_COURSE_ID] <> @OriginalEntPolicyAssessCourseId
                )
          begin
              RAISERROR('(COS_ENT_POLICY_ASSESS_COURSE)',16,-1)
                                   return
          end
        
        
        
				UPDATE
					[dbo].[ENT_POLICY_ASSESS_COURSE]
				SET
					[ENT_POLICY_ASSESS_COURSE_ID] = @EntPolicyAssessCourseId
					,[ENT_POLICY_ASSESS_HDR_ID] = @EntPolicyAssessHdrId
					,[ED_COURSE_ID] = @EdCourseId
				WHERE
[ENT_POLICY_ASSESS_COURSE_ID] = @OriginalEntPolicyAssessCourseId 
				
			]]>
      </body>
    </procedure>-->


    <procedure owner="dbo" name="ENT_POLICY_TCHNG_HDR_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_TCHNG_HDR table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ENT_POLICY_TCHNG_HDR_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ENT_POLICY_TCHNG_HDR_ID]'
				SET @SQL = @SQL + ', [DESCR_AR]'
				SET @SQL = @SQL + ', [DESCR_EN]'
				SET @SQL = @SQL + ', [ENT_MAIN_ID]'
				SET @SQL = @SQL + ', [ED_STUDY_METHOD_ID]'
				SET @SQL = @SQL + ', [IS_GENERAL]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_TCHNG_HDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ENT_POLICY_TCHNG_HDR_ID],'
				SET @SQL = @SQL + ' [DESCR_AR],'
				SET @SQL = @SQL + ' [DESCR_EN],'
				SET @SQL = @SQL + ' [ENT_MAIN_ID],'
				SET @SQL = @SQL + ' [ED_STUDY_METHOD_ID],'
				SET @SQL = @SQL + ' [IS_GENERAL]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_TCHNG_HDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_HDR_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_POLICY_TCHNG_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdStudyMethodId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsGeneral" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        
        
        if exists (select 'a' from [dbo].[ENT_POLICY_TCHNG_HDR] where
           ([DESCR_AR]=@DescrAr) or ([DESCR_EN]=@DescrEn))
           begin
               RAISERROR('(COS_POLICY_TCHNG_HDR_DESCR)',16,-1)
                                   return
           end
           
        
           declare @MaxEntPolicyTchngHdrId numeric;
      select @MaxEntPolicyTchngHdrId=max(ENT_POLICY_TCHNG_HDR_ID) from ENT_POLICY_TCHNG_HDR
      if(@MaxEntPolicyTchngHdrId is null)
         set @MaxEntPolicyTchngHdrId=0;
      set @MaxEntPolicyTchngHdrId=@MaxEntPolicyTchngHdrId+1;
        
        
				
				INSERT INTO [dbo].[ENT_POLICY_TCHNG_HDR]
					(
					[ENT_POLICY_TCHNG_HDR_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[ENT_MAIN_ID]
					,[ED_STUDY_METHOD_ID]
					,[IS_GENERAL]
					)
				VALUES
					(
					@MaxEntPolicyTchngHdrId
					,@DescrAr
					,@DescrEn
					,@EntMainId
					,@EdStudyMethodId
					,@IsGeneral
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_TCHNG_HDR_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ENT_POLICY_TCHNG_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@OriginalEntPolicyTchngHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdStudyMethodId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsGeneral" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        
        
         if exists (select 'a' from [dbo].[ENT_POLICY_TCHNG_HDR] where
           (([DESCR_AR]=@DescrAr) and ([ENT_POLICY_TCHNG_HDR_ID] != @OriginalEntPolicyTchngHdrId))or
           (([DESCR_EN]=@DescrEn)and ([ENT_POLICY_TCHNG_HDR_ID] != @OriginalEntPolicyTchngHdrId))
           
           )
           
           begin
               RAISERROR('(COS_POLICY_TCHNG_HDR_DESCR)',16,-1)
                                   return
           end
           
        
        
        
        
       
        
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ENT_POLICY_TCHNG_HDR]
				SET
					[ENT_POLICY_TCHNG_HDR_ID] = @EntPolicyTchngHdrId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[ENT_MAIN_ID] = @EntMainId
					,[ED_STUDY_METHOD_ID] = @EdStudyMethodId
					,[IS_GENERAL] = @IsGeneral
				WHERE
[ENT_POLICY_TCHNG_HDR_ID] = @OriginalEntPolicyTchngHdrId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ENT_POLICY_TCHNG_HDR_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 17, 2010

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_TCHNG_HDR table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ENT_POLICY_TCHNG_HDR_ID]
					, [DESCR_AR]
					, [DESCR_EN]
					, [ENT_MAIN_ID]
					, [ED_STUDY_METHOD_ID]
					, [IS_GENERAL]
					FROM [dbo].[ENT_POLICY_TCHNG_HDR] {0}
				)
				SELECT
				       [ENT_POLICY_TCHNG_HDR_ID],
				       [DESCR_AR],
				       [DESCR_EN],
				       [ENT_MAIN_ID],
				       [ED_STUDY_METHOD_ID],
				       [IS_GENERAL]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ENT_POLICY_TCHNG_HDR] {0};
				
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_COUNTRY_NODE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GS_COUNTRY_NODE table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GS_COUNTRY_NODE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([GS_COUNTRY_NODE_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [GS_COUNTRY_NODE_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[GS_COUNTRY_NODE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[GS_COUNTRY_NODE_ID], O.[NODE_DESCR_AR], O.[NODE_DESCR_EN], O.[NODE_PATH], O.[NODE_ORDER], O.[NODE_PARENT_ID], O.[NODE_LEVEL], O.[NODE_CODE], O.[NODE_CHILD_COUNT], O.[GS_CODE_C_NODE_NATURE_ID], O.[IS_NODE_LOCAL], O.[IS_NODE_VISIBLE]
				FROM
				    [dbo].[GS_COUNTRY_NODE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[GS_COUNTRY_NODE_ID] = PageIndex.[GS_COUNTRY_NODE_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GS_COUNTRY_NODE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_COUNTRY_NODE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GS_COUNTRY_NODE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeDescrAr" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@NodeDescrEn" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@NodePath" type="nvarchar" direction="Input" size="90" precision="0" scale="0" param="(90)" nulldefault="" />
        <parameter name="@NodeOrder" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeParentId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeLevel" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NodeChildCount" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeCNodeNatureId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@IsNodeLocal" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsNodeVisible" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@GccFlg" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationDescrAr" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationDescrEn" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
          DECLARE @v_tmp              NUMERIC;
   DECLARE @v_nodeparentid     NUMERIC; SET @v_nodeparentid = @nodeparentid;
   DECLARE @v_nodelevel        NUMERIC;
   DECLARE @v_nodeorder        NUMERIC; SET @v_nodeorder = @nodeorder;
   DECLARE @v_nodechildcount   NUMERIC; SET @v_nodechildcount = 0;
   DECLARE @v_isnodelocal      NUMERIC; SET @v_isnodelocal = @isnodelocal;
   DECLARE @v_isnodevisible    NUMERIC; SET @v_isnodevisible = @isnodevisible;
   DECLARE @v_nodepath         NVARCHAR(300);
   DECLARE @v_cnt              NUMERIC;
   DECLARE @node_rec_gs_country_node_id    NUMERIC; 
   DECLARE @node_rec_node_order    NUMERIC;
        
        
        declare @MaxGsCountryNodeId numeric(9,0)
        select  @MaxGsCountryNodeId =max(GS_COUNTRY_NODE_ID)from GS_COUNTRY_NODE;
         if( @MaxGsCountryNodeId is null)
            set  @MaxGsCountryNodeId=0;
            
          set  @MaxGsCountryNodeId= @MaxGsCountryNodeId+1;  
        
        -- If @nodeparentid AS NULL, this is a root node
   IF (@v_nodeparentid IS NULL)
   BEGIN
      SET @v_nodeparentid = @maxgscountrynodeid;
   END;

-- Find correct value for @v_nodelevel
   BEGIN
      SELECT @v_nodelevel = node_level
        FROM gs_country_node
       WHERE gs_country_node_id = @v_nodeparentid;

      IF @v_nodelevel IS NULL
         SET @v_nodelevel = 0;
   END;
   
    SET @v_nodelevel = @v_nodelevel + 1;

   IF NOT (@nodedescren IS NULL)
   BEGIN
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_en = @nodedescren AND node_level = 1;
      END
      ELSE
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_en = @nodedescren
            AND node_parent_id = @nodeparentid
            AND node_level = @v_nodelevel;
      END;
      
       IF (@v_cnt > 0)
      BEGIN
         --Throw exception with constant NUMERIC -2000 as string
         -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
         raiserror('(COS_GS_COUNTRY_NODE_1)',16,-1);
		       RETURN
      END;
   END;
   
    IF NOT (@NodeDescrAr IS NULL)
   BEGIN
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_ar = @NodeDescrAr AND node_level = 1;
      END
      ELSE
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_ar = @NodeDescrAr
            AND node_parent_id = @nodeparentid
            AND node_level = @v_nodelevel;
      END;
      
       IF (@v_cnt > 0)
      BEGIN
         --Throw exception with constant NUMERIC -2000 as string
         -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
         raiserror('(COS_GS_COUNTRY_NODE_2)',16,-1);
		       RETURN
      END;
   END;


   IF NOT (@nodecode IS NULL)
   BEGIN
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_code = @nodecode AND node_level = 1;
      END
      ELSE
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_code = @nodecode
            AND node_parent_id = @nodeparentid
            AND node_level = @v_nodelevel;
      END;
      
       IF (@v_cnt > 0)
      BEGIN
         --Throw exception with constant NUMERIC -2000 as string
         -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
         raiserror('(COS_GS_COUNTRY_NODE_3)',16,-1);
		RETURN
      END;
   END;


BEGIN TRY

	BEGIN TRANSACTION	

-- If @nodeorder is null, automatically find a suitable value else use the given value
   IF (@v_nodeorder IS NULL)
   BEGIN
      -- Use gs_sys_pivot table to find any gaps in the sequence of node_order for nodes with same node_parent_id
      -- and assign the smallest gap id to @v_nodeorder
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
           FROM (SELECT node_order
                   FROM gs_country_node
                  WHERE node_level = 1) dst
                RIGHT OUTER JOIN
                (SELECT gs_sys_pivot_id
                   FROM gs_sys_pivot
                  WHERE gs_sys_pivot_id <= (SELECT COUNT (node_order) + 1
                                              FROM gs_country_node
                                             WHERE node_level = 1)) src
                ON (dst.node_order = src.gs_sys_pivot_id)
          WHERE dst.node_order IS NULL;
      END
      ELSE
      BEGIN
         SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
           FROM (SELECT node_order
                   FROM gs_country_node
                  WHERE node_parent_id = @v_nodeparentid
                    AND gs_country_node_id <> node_parent_id) dst
                RIGHT OUTER JOIN
                (SELECT gs_sys_pivot_id
                   FROM gs_sys_pivot
                  WHERE gs_sys_pivot_id <=
                           (SELECT COUNT (node_order) + 1
                              FROM gs_country_node
                             WHERE node_parent_id = @v_nodeparentid
                               AND gs_country_node_id <> node_parent_id)) src
                ON (dst.node_order = src.gs_sys_pivot_id)
          WHERE dst.node_order IS NULL;
      END;
   END
   ELSE
   BEGIN
      -- Test if there is a node with same node_parent_id and same node_order as the inserted node
      BEGIN
         IF @v_nodelevel = 1
         BEGIN
            SELECT @v_tmp = gs_country_node_id
              FROM gs_country_node
             WHERE node_order = @v_nodeorder AND node_level = 1;
         END
         ELSE
         BEGIN
            SELECT @v_tmp = gs_country_node_id
              FROM gs_country_node
             WHERE node_parent_id = @v_nodeparentid
               AND node_order = @v_nodeorder
               AND node_level = @v_nodelevel;
         END;
      END;

      IF NOT (@v_tmp IS NULL)
      BEGIN
         -- Loop in a cursor that return all brother nodes with node_order >= inserted node node_order
         -- and try to make room for the newly inserted node
         IF @v_nodelevel = 1
         BEGIN
			DECLARE gs_country_node_crsr_1 CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
             SELECT gs_country_node_id, node_order + 1
               FROM gs_country_node
              WHERE node_level = 1 AND node_order >= @nodeorder
           ORDER BY node_order DESC;

			OPEN gs_country_node_crsr_1;

			FETCH NEXT FROM gs_country_node_crsr_1 INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			WHILE @@FETCH_STATUS = 0
			BEGIN
               -- Move current brother node in cursor, and all of its children to following place among brothers
               EXEC gs_country_node_chng_order @node_rec_gs_country_node_id, @node_rec_node_order;

               FETCH NEXT FROM gs_country_node_crsr_1 INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			END;

			CLOSE gs_country_node_crsr_1;

			DEALLOCATE gs_country_node_crsr_1;
         END
         ELSE
         BEGIN
			DECLARE gs_country_node_crsr CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
             SELECT gs_country_node_id, node_order + 1
               FROM gs_country_node
              WHERE node_parent_id = @v_nodeparentid
                AND node_parent_id <> gs_country_node_id
                AND node_order >= @nodeorder
           ORDER BY node_order DESC;

			OPEN gs_country_node_crsr;

			FETCH NEXT FROM gs_country_node_crsr INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			WHILE @@FETCH_STATUS = 0
			BEGIN
               -- Move current brother node in cursor, and all of its children to following place among brothers
               EXEC gs_country_node_chng_order @node_rec_gs_country_node_id, @node_rec_node_order;

               FETCH NEXT FROM gs_country_node_crsr INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			END;

			CLOSE gs_country_node_crsr;

			DEALLOCATE gs_country_node_crsr;
         END;
      END;
   END;
        
        
        -- Create @v_nodepath for the inserted node based on the path of its parent and its node_order among its brothers
   BEGIN
      SET @v_nodepath = NULL;
      SELECT @v_nodepath = SUBSTRING(node_path, 1, CAST(node_level * 3 AS Integer))
        FROM gs_country_node
       WHERE gs_country_node_id = @v_nodeparentid;

      IF @v_nodepath IS NULL
         SET @v_nodepath = '';
   END;

   SET @v_nodepath = @v_nodepath + REVERSE(SUBSTRING(REVERSE(N'00' + CONVERT(NVARCHAR(90), @v_nodeorder)), 1, 3));

-- Set value of is_node_local of the inserted node to be appropriate.
   IF (@v_isnodelocal IS NULL)
   BEGIN
      SET @v_isnodelocal = 0;
   END;

   IF (@v_isnodelocal <> 0 and @gscodecnodenatureid=1)
   BEGIN
      UPDATE gs_country_node
         SET is_node_local = 0;

      SET @v_isnodelocal = 1;
   END;

-- Adjust some flag values properly.
   IF (@v_isnodevisible IS NULL)
   BEGIN
      SET @v_isnodevisible = 1;
   END;

   IF (@v_isnodevisible <> 0)
   BEGIN
      SET @v_isnodevisible = 1;
   END;

        
				INSERT INTO [dbo].[GS_COUNTRY_NODE]
					(
					[GS_COUNTRY_NODE_ID]
					,[NODE_DESCR_AR]
					,[NODE_DESCR_EN]
					,[NODE_PATH]
					,[NODE_ORDER]
					,[NODE_PARENT_ID]
					,[NODE_LEVEL]
					,[NODE_CODE]
					,[NODE_CHILD_COUNT]
					,[GS_CODE_C_NODE_NATURE_ID]
					,[IS_NODE_LOCAL]
					,[IS_NODE_VISIBLE]
					)
				VALUES
					(
					@MaxGsCountryNodeId
					,@NodeDescrAr
					,@NodeDescrEn
					,@v_nodepath
					,@v_nodeorder
					,@v_nodeparentid
					,@v_nodelevel
					,@NodeCode
					,@v_nodechildcount
					,@GsCodeCNodeNatureId
					,@v_isnodelocal
					,@v_isnodevisible
					)
				
						-- Update node_child_count of parent node by adding a one to the child count
   UPDATE gs_country_node
      SET node_child_count = node_child_count + 1
    WHERE gs_country_node_id = @v_nodeparentid;

-- Automatically create a record in gs_country_info if the node_nature is 1 (country)
  -- IF (@gscodecnodenatureid = 1)
  -- BEGIN
   --   EXEC gs_country_info_i @maxgscountryinfoid = @v_tmp,
    --                     @gscountrynodeid = @maxgscountrynodeid
     --                   ;
   --END;

	COMMIT
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

  -- Raise an error with the details of the exception
	DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
	SELECT	@ErrMsg = ERROR_MESSAGE(),
			@ErrSeverity = ERROR_SEVERITY()

	RAISERROR(@ErrMsg, @ErrSeverity, 1)
END CATCH			
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_COUNTRY_NODE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GS_COUNTRY_NODE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalGsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeDescrAr" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@NodeDescrEn" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="" />
        <parameter name="@NodePath" type="nvarchar" direction="Input" size="90" precision="0" scale="0" param="(90)" nulldefault="" />
        <parameter name="@NodeOrder" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeParentId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeLevel" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@NodeCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NodeChildCount" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeCNodeNatureId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@IsNodeLocal" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsNodeVisible" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@GccFlg" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationDescrAr" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@NationDescrEn" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
			
          DECLARE @v_tmp              NUMERIC;
   DECLARE @v_nodeparentid     NUMERIC; SET @v_nodeparentid = @nodeparentid;
   DECLARE @v_nodelevel        NUMERIC;
   DECLARE @v_nodeorder        NUMERIC; SET @v_nodeorder = @nodeorder;
   DECLARE @v_nodechildcount   NUMERIC; SET @v_nodechildcount = 0;
   DECLARE @v_isnodelocal      NUMERIC; SET @v_isnodelocal = @isnodelocal;
   DECLARE @v_isnodevisible    NUMERIC; SET @v_isnodevisible = @isnodevisible;
   DECLARE @v_nodepath         NVARCHAR(300);
   DECLARE @v_cnt              NUMERIC;
   DECLARE @node_rec_gs_country_node_id    NUMERIC; 
   DECLARE @node_rec_node_order    NUMERIC;
   
        
        
        declare @MaxGsCountryNodeId numeric(9,0)
        select  @MaxGsCountryNodeId =max(GS_COUNTRY_NODE_ID)from GS_COUNTRY_NODE;
         if( @MaxGsCountryNodeId is null)
            set  @MaxGsCountryNodeId=0;
            
          set  @MaxGsCountryNodeId= @MaxGsCountryNodeId+1;  
        
        -- If @nodeparentid AS NULL, this is a root node
   IF (@v_nodeparentid IS NULL)
   BEGIN
      SET @v_nodeparentid = @maxgscountrynodeid;
   END;

-- Find correct value for @v_nodelevel
   BEGIN
      SELECT @v_nodelevel = node_level
        FROM gs_country_node
       WHERE gs_country_node_id = @v_nodeparentid;

      IF @v_nodelevel IS NULL
         SET @v_nodelevel = 0;
   END;
   
    SET @v_nodelevel = @v_nodelevel + 1;

   IF NOT (@nodedescren IS NULL)
   BEGIN
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_en = @nodedescren AND node_level = 1;
      END
      ELSE
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_en = @nodedescren
            AND node_parent_id = @nodeparentid
            AND node_level = @v_nodelevel;
      END;
      
       IF (@v_cnt > 0)
      BEGIN
         --Throw exception with constant NUMERIC -2000 as string
         -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
         raiserror('(COS_GS_COUNTRY_NODE_1)',16,-1);
		       RETURN
      END;
   END;
   
    IF NOT (@NodeDescrAr IS NULL)
   BEGIN
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_ar = @NodeDescrAr AND node_level = 1;
      END
      ELSE
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_descr_ar = @NodeDescrAr
            AND node_parent_id = @nodeparentid
            AND node_level = @v_nodelevel;
      END;
      
       IF (@v_cnt > 0)
      BEGIN
         --Throw exception with constant NUMERIC -2000 as string
         -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
         raiserror('(COS_GS_COUNTRY_NODE_2)',16,-1);
		       RETURN
      END;
   END;


   IF NOT (@nodecode IS NULL)
   BEGIN
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_code = @nodecode AND node_level = 1;
      END
      ELSE
      BEGIN
         SELECT @v_cnt = COUNT (GS_COUNTRY_NODE_id)
           FROM GS_COUNTRY_NODE
          WHERE node_code = @nodecode
            AND node_parent_id = @nodeparentid
            AND node_level = @v_nodelevel;
      END;
      
       IF (@v_cnt > 0)
      BEGIN
         --Throw exception with constant NUMERIC -2000 as string
         -- with the unique constraint name it should be prefixed with COS to be recognized at the c# code
         raiserror('(COS_GS_COUNTRY_NODE_3)',16,-1);
		RETURN
      END;
   END;


BEGIN TRY

	BEGIN TRANSACTION	

-- If @nodeorder is null, automatically find a suitable value else use the given value
   IF (@v_nodeorder IS NULL)
   BEGIN
      -- Use gs_sys_pivot table to find any gaps in the sequence of node_order for nodes with same node_parent_id
      -- and assign the smallest gap id to @v_nodeorder
      IF @v_nodelevel = 1
      BEGIN
         SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
           FROM (SELECT node_order
                   FROM gs_country_node
                  WHERE node_level = 1) dst
                RIGHT OUTER JOIN
                (SELECT gs_sys_pivot_id
                   FROM gs_sys_pivot
                  WHERE gs_sys_pivot_id <= (SELECT COUNT (node_order) + 1
                                              FROM gs_country_node
                                             WHERE node_level = 1)) src
                ON (dst.node_order = src.gs_sys_pivot_id)
          WHERE dst.node_order IS NULL;
      END
      ELSE
      BEGIN
         SELECT @v_nodeorder = MIN (src.gs_sys_pivot_id)
           FROM (SELECT node_order
                   FROM gs_country_node
                  WHERE node_parent_id = @v_nodeparentid
                    AND gs_country_node_id <> node_parent_id) dst
                RIGHT OUTER JOIN
                (SELECT gs_sys_pivot_id
                   FROM gs_sys_pivot
                  WHERE gs_sys_pivot_id <=
                           (SELECT COUNT (node_order) + 1
                              FROM gs_country_node
                             WHERE node_parent_id = @v_nodeparentid
                               AND gs_country_node_id <> node_parent_id)) src
                ON (dst.node_order = src.gs_sys_pivot_id)
          WHERE dst.node_order IS NULL;
      END;
   END
   ELSE
   BEGIN
      -- Test if there is a node with same node_parent_id and same node_order as the inserted node
      BEGIN
         IF @v_nodelevel = 1
         BEGIN
            SELECT @v_tmp = gs_country_node_id
              FROM gs_country_node
             WHERE node_order = @v_nodeorder AND node_level = 1;
         END
         ELSE
         BEGIN
            SELECT @v_tmp = gs_country_node_id
              FROM gs_country_node
             WHERE node_parent_id = @v_nodeparentid
               AND node_order = @v_nodeorder
               AND node_level = @v_nodelevel;
         END;
      END;

      IF NOT (@v_tmp IS NULL)
      BEGIN
         -- Loop in a cursor that return all brother nodes with node_order >= inserted node node_order
         -- and try to make room for the newly inserted node
         IF @v_nodelevel = 1
         BEGIN
			DECLARE gs_country_node_crsr_1 CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
             SELECT gs_country_node_id, node_order + 1
               FROM gs_country_node
              WHERE node_level = 1 AND node_order >= @nodeorder
           ORDER BY node_order DESC;

			OPEN gs_country_node_crsr_1;

			FETCH NEXT FROM gs_country_node_crsr_1 INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			WHILE @@FETCH_STATUS = 0
			BEGIN
               -- Move current brother node in cursor, and all of its children to following place among brothers
               EXEC gs_country_node_chng_order @node_rec_gs_country_node_id, @node_rec_node_order;

               FETCH NEXT FROM gs_country_node_crsr_1 INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			END;

			CLOSE gs_country_node_crsr_1;

			DEALLOCATE gs_country_node_crsr_1;
         END
         ELSE
         BEGIN
			DECLARE gs_country_node_crsr CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
             SELECT gs_country_node_id, node_order + 1
               FROM gs_country_node
              WHERE node_parent_id = @v_nodeparentid
                AND node_parent_id <> gs_country_node_id
                AND node_order >= @nodeorder
           ORDER BY node_order DESC;

			OPEN gs_country_node_crsr;

			FETCH NEXT FROM gs_country_node_crsr INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			WHILE @@FETCH_STATUS = 0
			BEGIN
               -- Move current brother node in cursor, and all of its children to following place among brothers
               EXEC gs_country_node_chng_order @node_rec_gs_country_node_id, @node_rec_node_order;

               FETCH NEXT FROM gs_country_node_crsr INTO @node_rec_gs_country_node_id, @node_rec_node_order;
			END;

			CLOSE gs_country_node_crsr;

			DEALLOCATE gs_country_node_crsr;
         END;
      END;
   END;
        
        
        -- Create @v_nodepath for the inserted node based on the path of its parent and its node_order among its brothers
   BEGIN
      SET @v_nodepath = NULL;
      SELECT @v_nodepath = SUBSTRING(node_path, 1, CAST(node_level * 3 AS Integer))
        FROM gs_country_node
       WHERE gs_country_node_id = @v_nodeparentid;

      IF @v_nodepath IS NULL
         SET @v_nodepath = '';
   END;

   SET @v_nodepath = @v_nodepath + REVERSE(SUBSTRING(REVERSE(N'00' + CONVERT(NVARCHAR(90), @v_nodeorder)), 1, 3));

-- Set value of is_node_local of the inserted node to be appropriate.
   IF (@v_isnodelocal IS NULL)
   BEGIN
      SET @v_isnodelocal = 0;
   END;

   IF (@v_isnodelocal <> 0 and @gscodecnodenatureid=1)
   BEGIN
      UPDATE gs_country_node
         SET is_node_local = 0;

      SET @v_isnodelocal = 1;
   END;

-- Adjust some flag values properly.
   IF (@v_isnodevisible IS NULL)
   BEGIN
      SET @v_isnodevisible = 1;
   END;

   IF (@v_isnodevisible <> 0)
   BEGIN
      SET @v_isnodevisible = 1;
   END;

        
				INSERT INTO [dbo].[GS_COUNTRY_NODE]
					(
					[GS_COUNTRY_NODE_ID]
					,[NODE_DESCR_AR]
					,[NODE_DESCR_EN]
					,[NODE_PATH]
					,[NODE_ORDER]
					,[NODE_PARENT_ID]
					,[NODE_LEVEL]
					,[NODE_CODE]
					,[NODE_CHILD_COUNT]
					,[GS_CODE_C_NODE_NATURE_ID]
					,[IS_NODE_LOCAL]
					,[IS_NODE_VISIBLE]
					,GCC_FLG
					,NATION_CODE
					,NATION_DESCR_AR
					,NATION_DESCR_EN
					)
				VALUES
					(
					@MaxGsCountryNodeId
					,@NodeDescrAr
					,@NodeDescrEn
					,@v_nodepath
					,@v_nodeorder
					,@v_nodeparentid
					,@v_nodelevel
					,@NodeCode
					,@v_nodechildcount
					,@GsCodeCNodeNatureId
					,@v_isnodelocal
					,@v_isnodevisible
					,@GccFlg
					,@NationCode
					,@NationDescrAr
					,@NationDescrEn
					)
				
						-- Update node_child_count of parent node by adding a one to the child count
   UPDATE gs_country_node
      SET node_child_count = node_child_count + 1
    WHERE gs_country_node_id = @v_nodeparentid;

-- Automatically create a record in gs_country_info if the node_nature is 1 (country)
  -- IF (@gscodecnodenatureid = 1)
  -- BEGIN
   --   EXEC gs_country_info_i @maxgscountryinfoid = @v_tmp,
    --                     @gscountrynodeid = @maxgscountrynodeid
     --                   ;
   --END;

	COMMIT
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

  -- Raise an error with the details of the exception
	DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
	SELECT	@ErrMsg = ERROR_MESSAGE(),
			@ErrSeverity = ERROR_SEVERITY()

	RAISERROR(@ErrMsg, @ErrSeverity, 1)
END CATCH			
							
			
      
			]]>
      </body>
    </procedure>

    <!--<procedure owner="dbo" name="GS_COUNTRY_NODE_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*

*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
		
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GS_COUNTRY_NODE_ID] numeric(9, 0) 
				)
				
			
				INSERT INTO #PageIndex ( [GS_COUNTRY_NODE_ID] )
				SELECT TOP {3} [GS_COUNTRY_NODE_ID]
				FROM [dbo].[GS_COUNTRY_NODE] {0}
				ORDER BY {1}
				
			
                SELECT O.[GS_COUNTRY_NODE_ID], O.[NODE_DESCR_AR], O.[NODE_DESCR_EN], O.[NODE_PATH], O.[NODE_ORDER], O.[NODE_PARENT_ID], O.[NODE_LEVEL]  , O.[NODE_CODE], O.[NODE_CHILD_COUNT], O.[GS_CODE_C_NODE_NATURE_ID], O.[IS_NODE_LOCAL], O.[IS_NODE_VISIBLE], O.[GCC_FLG], O.[NATION_CODE], O.[NATION_DESCR_AR], O.[NATION_DESCR_EN]
				FROM
				    [dbo].[GS_COUNTRY_NODE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[GS_COUNTRY_NODE_ID] = PageIndex.[GS_COUNTRY_NODE_ID]
				ORDER BY
				    PageIndex.IndexId
				

			
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GS_COUNTRY_NODE] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>-->



    <procedure owner="dbo" name="GS_COUNTRY_INFO_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GS_COUNTRY_INFO table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="null" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault="null" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault="null" />
        <parameter name="@NationCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null" />
        <parameter name="@GsCountryNodeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@TreateAsCitizenFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [GS_COUNTRY_INFO_ID]
	, [DESCR_AR]
	, [DESCR_EN]
	, [NATION_CODE]
	, [GS_COUNTRY_NODE_ID]
	, [TREATE_AS_CITIZEN_FLAG]
    FROM
	[dbo].[GS_COUNTRY_INFO]
    WHERE 
	 ([GS_COUNTRY_INFO_ID] = @GsCountryInfoId OR @GsCountryInfoId IS NULL)
	AND ([DESCR_AR] like '%'+ @DescrAr+'%' OR @DescrAr IS NULL)
	AND ([DESCR_EN] like '%'+ @DescrEn+'%' OR @DescrEn IS NULL)
	AND ([NATION_CODE] = @NationCode OR @NationCode IS NULL)
	AND ([GS_COUNTRY_NODE_ID] = @GsCountryNodeId OR @GsCountryNodeId IS NULL)
	AND ([TREATE_AS_CITIZEN_FLAG] = @TreateAsCitizenFlag OR @TreateAsCitizenFlag IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [GS_COUNTRY_INFO_ID]
	, [DESCR_AR]
	, [DESCR_EN]
	, [NATION_CODE]
	, [GS_COUNTRY_NODE_ID]
	, [TREATE_AS_CITIZEN_FLAG]
    FROM
	[dbo].[GS_COUNTRY_INFO]
    WHERE 
	 ([GS_COUNTRY_INFO_ID] = @GsCountryInfoId AND @GsCountryInfoId is not null)
	OR ([DESCR_AR] like '%'+ @DescrAr+'%' AND @DescrAr is not null)
	OR ([DESCR_EN] like '%'+ @DescrEn+'%' AND @DescrEn is not null)
	OR ([NATION_CODE] = @NationCode AND @NationCode is not null)
	OR ([GS_COUNTRY_NODE_ID] = @GsCountryNodeId AND @GsCountryNodeId is not null)
	OR ([TREATE_AS_CITIZEN_FLAG] = @TreateAsCitizenFlag AND @TreateAsCitizenFlag is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_SCHEDULE_HDR_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the SC_SCHEDULE_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdOfferingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@NoSlots" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@NoGroups" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@NoStudents" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <!--<parameter name="@WeekFreq" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />-->
      </parameters>
      <body>
        <![CDATA[
        
        
        if exists(select 'a' from SC_SCHEDULE_HDR where ED_CODE_COURSE_TEACHING_ID=@EdCodeCourseTeachingId and 
        ED_OFFERING_COURSE_ID=@EdOfferingCourseId)
        begin
        
            declare @ExistingHdrID numeric
              select @ExistingHdrID=SC_SCHEDULE_HDR_ID from SC_SCHEDULE_HDR  where ED_CODE_COURSE_TEACHING_ID=@EdCodeCourseTeachingId and 
                 ED_OFFERING_COURSE_ID=@EdOfferingCourseId
        
        
                	UPDATE
					        [dbo].[SC_SCHEDULE_HDR]
				         SET
					        [NO_SLOTS] = @NoSlots
					        ,[NO_GROUPS] = @NoGroups
					        ,[NO_STUDENTS] = @NoStudents
					        --,[WEEK_FREQ] = @WeekFreq
				        WHERE
          	        [SC_SCHEDULE_HDR_ID] = @ExistingHdrID
        end
        else
        begin
        
             declare @MaxScScheduleHdrId numeric
              select @MaxScScheduleHdrId=max(SC_SCHEDULE_HDR_ID) from SC_SCHEDULE_HDR
              if(@MaxScScheduleHdrId is null)
                 set @MaxScScheduleHdrId=0
               set @MaxScScheduleHdrId=@MaxScScheduleHdrId+1;
        
        
        
				      INSERT INTO [dbo].[SC_SCHEDULE_HDR]
					      (
					      [SC_SCHEDULE_HDR_ID]
					      ,[ED_OFFERING_COURSE_ID]
					      ,[ED_CODE_COURSE_TEACHING_ID]
					      ,[NO_SLOTS]
					      ,[NO_GROUPS]
					      ,[NO_STUDENTS]
					      --,[WEEK_FREQ]
					      )
				      VALUES
					      (
					      @MaxScScheduleHdrId
					      ,@EdOfferingCourseId
					      ,@EdCodeCourseTeachingId
					      ,@NoSlots
					      ,@NoGroups
					      ,@NoStudents
					      --,@WeekFreq
					      )
				end
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_SCHEDULE_HDR_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the SC_SCHEDULE_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
         DELETE FROM [dbo].[SC_SCHEDULE_DTL_DAY]WITH (ROWLOCK)
        WHERE exists
           (select 'a' from SC_SCHEDULE_DTL
           	WHERE
		            	[SC_SCHEDULE_HDR_ID] = @ScScheduleHdrId and
                  [dbo].[SC_SCHEDULE_DTL_DAY].SC_SCHEDULE_DTL_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID)
					
          DELETE FROM [dbo].[SC_SCHEDULE_DTL_EXT_STF]WITH (ROWLOCK)
        WHERE exists
           (select 'a' from SC_SCHEDULE_DTL
           	WHERE
		            	[SC_SCHEDULE_HDR_ID] = @ScScheduleHdrId and
                  [dbo].[SC_SCHEDULE_DTL_EXT_STF].SC_SCHEDULE_DTL_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID)
        
				DELETE FROM [dbo].[SC_SCHEDULE_DTL] WITH (ROWLOCK) 
				WHERE
			[SC_SCHEDULE_HDR_ID] = @ScScheduleHdrId
        
        
				DELETE FROM [dbo].[SC_SCHEDULE_HDR] WITH (ROWLOCK) 
				WHERE
					[SC_SCHEDULE_HDR_ID] = @ScScheduleHdrId
					
			]]>
      </body>
    </procedure>

      <!--<procedure owner="dbo" name="SC_SCHEDULE_DTL_Insert" grant="">
          <comment>
          </comment>
          <parameters>
              <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@ScScheduleHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
              <parameter name="@GroupDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
              <parameter name="@GroupDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
              <parameter name="@GroupOrder" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
              <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
              <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@IsResultApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@NoStudents" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
              <parameter name="@NoStudWait" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
              <parameter name="@OnlineFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@IsClosed" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
              <parameter name="@NotesEmp" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
              <parameter name="@NoStudMax" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
              <parameter name="@InternalFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
          </parameters>
          <body>
              <![CDATA[
				DECLARE @V_ScScheduleDtlId numeric(9, 0)
				SELECT @V_ScScheduleDtlId = ISNULL(MAX(SC_SCHEDULE_DTL_ID), 0) + 1 FROM [dbo].[SC_SCHEDULE_DTL];
				
				INSERT INTO [dbo].[SC_SCHEDULE_DTL]
					(
					[SC_SCHEDULE_DTL_ID]
					,[SC_SCHEDULE_HDR_ID]
					,[GROUP_DESCR_AR]
					,[GROUP_DESCR_EN]
					,[GROUP_ORDER]
					,[GS_CODE_GENDER_ID]
					,[NOTES]
					,[AS_FACULTY_INFO_ID]
					,[IS_RESULT_APPROVED]
					,[NO_STUDENTS]
					,[NO_STUD_WAIT]
					,[ONLINE_FLG]
					,[IS_CLOSED]
					,[NOTES_EMP]
					,[NO_STUD_MAX]
					,[INTERNAL_FLG]
					)
				VALUES
					(
					@V_ScScheduleDtlId
					,@ScScheduleHdrId
					,@GroupDescrAr
					,@GroupDescrEn
					,@GroupOrder
					,@GsCodeGenderId
					,@Notes
					,@AsFacultyInfoId
					,@IsResultApproved
					,@NoStudents
					,@NoStudWait
					,@OnlineFlg
					,@IsClosed
					,@NotesEmp
					,@NoStudMax
					,@InternalFlg
					)
				
					set @ScScheduleDtlId = @V_ScScheduleDtlId
							
			]]>
          </body>
      </procedure>-->

      <procedure owner="dbo" name="ED_COURSE_INSTANCE_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets all records from the ED_COURSE‌_INSTANCE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_COURSE_INSTANCE_ID],
					[ED_OFFERING_COURSE_ID],
					[COURSE_NAME]
				FROM
					[dbo].[ED_COURSE‌_INSTANCE]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_INSTANCE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets records from the ED_COURSE‌_INSTANCE table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ED_COURSE_INSTANCE_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ED_COURSE_INSTANCE_ID]'
				SET @SQL = @SQL + ', [ED_OFFERING_COURSE_ID]'
				SET @SQL = @SQL + ', [COURSE_NAME]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE‌_INSTANCE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ED_COURSE_INSTANCE_ID],'
				SET @SQL = @SQL + ' [ED_OFFERING_COURSE_ID],'
				SET @SQL = @SQL + ' [COURSE_NAME]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_COURSE‌_INSTANCE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="SC_BUILDING_GetByAsFacultyInfoIdBuildCode">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Select records from the SC_BUILDING table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@BuildCode" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT *
				FROM
					[dbo].[SC_BUILDING]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					AND ([BUILD_CODE] = @BuildCode or @BuildCode='')
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_OFFERING_COURSE_Commneted_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Inserts a record into the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@OnlineFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@MinAttendNo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@MaxStudCount" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[

if(@AsFacultyInfoId=0)
set @AsFacultyInfoId = null;
        
       declare @MaxEdOfferingCourseId numeric
        select @MaxEdOfferingCourseId=max(ED_OFFERING_COURSE_ID) from ED_OFFERING_COURSE
        if(@MaxEdOfferingCourseId is null)
           set @MaxEdOfferingCourseId=0
         set @MaxEdOfferingCourseId=@MaxEdOfferingCourseId+1;
         
         IF NOT EXISTS(SELECT 'A' FROM [dbo].[ED_OFFERING_COURSE] WHERE [ED_COURSE_ID]=@EdCourseId
         AND [ED_OFFERING_ID]=@EdOfferingId)
          BEGIN
		  if(@AsFacultyInfoId is null)
		  begin
		  
		  INSERT INTO [dbo].[ED_OFFERING_COURSE]
					        (
				    	        [ED_OFFERING_COURSE_ID],[ED_COURSE_ID],[ED_OFFERING_ID],[AUDIT_FLG]
				   	        ,[ONLINE_FLG],[MIN_ATTEND_NO],[AS_FACULTY_INFO_ID],[IS_APPROVED],[MAX_STUD_COUNT]
					        )
				        VALUES
					        (
				    	        @MaxEdOfferingCourseId,@EdCourseId,@EdOfferingId,@AuditFlg
					          ,@OnlineFlg,@MinAttendNo,null,@IsApproved,@MaxStudCount
					        )
		  
		  end
		  else
		  begin
				        INSERT INTO [dbo].[ED_OFFERING_COURSE]
					        (
				    	        [ED_OFFERING_COURSE_ID],[ED_COURSE_ID],[ED_OFFERING_ID],[AUDIT_FLG]
				   	        ,[ONLINE_FLG],[MIN_ATTEND_NO],[AS_FACULTY_INFO_ID],[IS_APPROVED],[MAX_STUD_COUNT]
					        )
				        VALUES
					        (
				    	        @MaxEdOfferingCourseId,@EdCourseId,@EdOfferingId,@AuditFlg
					          ,@OnlineFlg,@MinAttendNo,@AsFacultyInfoId,@IsApproved,@MaxStudCount
					        )
			end
           END
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_OFFERING_COURSE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Updates a record in the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@OriginalEdOfferingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@OnlineFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@MinAttendNo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsResultApproved" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AllSessionNo" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@MaxStudCount" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
 DECLARE @approve numeric(1,0)=0;
 -- @OriginalEdOfferingCourseId=1 check Course Groups, @OriginalEdOfferingCourseId=0 check Course registered Studs
 IF(@OriginalEdOfferingCourseId = 1)
 BEGIN
 
				  if exists(select 'a' FROM  SC_SCHEDULE_DTL INNER JOIN
							SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID
							WHERE   (SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = @EdOfferingCourseId) AND 
									(SC_SCHEDULE_DTL.IS_RESULT_APPROVED=0))
                  Begin
                      declare @GroupsHaveErrors nvarchar(max)
                      set @GroupsHaveErrors='';
                             select @GroupsHaveErrors=@GroupsHaveErrors+
                             (CASE @IsResultApproved WHEN  3 then SC_SCHEDULE_DTL.GROUP_DESCR_Ar+'('+ED_CODE_COURSE_TEACHING.DESCR_AR+') --> '+convert(nvarchar,(select COUNT(*) from ED_STUD_GROUP where SC_SCHEDULE_DTL_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID))+N' طلاب'+'<br>' 
													WHEN  4 then SC_SCHEDULE_DTL.GROUP_DESCR_EN+'('+ED_CODE_COURSE_TEACHING.DESCR_EN+') --> '+convert(nvarchar,(select COUNT(*) from ED_STUD_GROUP where SC_SCHEDULE_DTL_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID))+' Students'+'<br>' 
							END)						
                             
                                 FROM  SC_SCHEDULE_DTL INNER JOIN
                                  SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID
                                  INNER JOIN
                                  ED_CODE_COURSE_TEACHING ON ED_CODE_COURSE_TEACHING.ED_CODE_COURSE_TEACHING_ID = SC_SCHEDULE_HDR.ED_CODE_COURSE_TEACHING_ID
                                   WHERE     (SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = @EdOfferingCourseId) AND 
                                   (SC_SCHEDULE_DTL.IS_RESULT_APPROVED=0)
                            
                            
                       set @GroupsHaveErrors='Err_Approve_Offering_Course'+@GroupsHaveErrors;
                        RAISERROR(@GroupsHaveErrors,16,-1)
                                   return
                  End
                  ELSE
                  BEGIN
				  	SET @approve = 1;
				  END
		
 END
 ELSE
 BEGIN
 	
 	DECLARE @EdAcadYearId NUMERIC ,@EdCodeSemesterId NUMERIC
 	SELECT @EdAcadYearId=ED_OFFERING.ED_ACAD_YEAR_ID,@EdCodeSemesterId=ED_OFFERING.ED_CODE_SEMESTER_ID FROM dbo.ED_OFFERING WHERE ED_OFFERING_ID = @EdOfferingId;
 	
 	IF(@EdAcadYearId IS NOT NULL AND @EdCodeSemesterId IS NOT NULL)
 	SET @approve = dbo.CHK_B4_COURSE_RSLT_APPROVE(@EdAcadYearId,@EdCodeSemesterId,@EdCourseId,0);
 	
 	IF(@approve =0)
 	BEGIN
 	
 	DECLARE @studs NVARCHAR(MAX)='';
 	
SELECT     @studs=@studs+ ED_STUD_FACULTY.STUD_FACULTY_CODE+', '
FROM         ED_STUD INNER JOIN
                      ED_STUD_FACULTY ON ED_STUD.ED_STUD_ID = ED_STUD_FACULTY.ED_STUD_ID inner JOIN
                      ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID 
WHERE dbo.ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId AND dbo.ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
AND dbo.ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId 
AND (ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is null) 
AND (ED_STUD_COURSE_REG.INCOMP_FLG=0) 
AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1)
AND (ED_STUD_FACULTY.IS_ACTIVE = 1)
 	
	 	set @GroupsHaveErrors='StudsNotHaveGrade '+@studs;
                        RAISERROR(@GroupsHaveErrors,16,-1)
                                   return
	 END
 	
 END			  
				  
--set @IsResultApproved=@approve;

-- Modify the updatable columns
UPDATE
[dbo].[ED_OFFERING_COURSE]
SET
[ED_COURSE_ID] = @EdCourseId
,[ED_OFFERING_ID] = @EdOfferingId
,[AUDIT_FLG] = @AuditFlg
,[ONLINE_FLG] = @OnlineFlg
,[MIN_ATTEND_NO] = @MinAttendNo
,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
,[IS_APPROVED] = @IsApproved
,[IS_RESULT_APPROVED]=@approve
,[ALL_SESSION_NO] = @AllSessionNo
,[MAX_STUD_COUNT] = @MaxStudCount
WHERE
[ED_OFFERING_COURSE_ID] = @EdOfferingCourseId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_OFFERING_COURSE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the ED_OFFERING_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdOfferingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
  begin transaction;   
  
  declare @EdStudCourseRegId NUMERIC

declare studs cursor for    
SELECT     ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
FROM         ED_OFFERING_COURSE INNER JOIN
                      ED_OFFERING ON ED_OFFERING_COURSE.ED_OFFERING_ID = ED_OFFERING.ED_OFFERING_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_OFFERING.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_OFFERING.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID AND 
                      ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_STUD_COURSE_REG ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID AND 
                      ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
WHERE     (ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = @EdOfferingCourseId);
open studs;
fetch next from studs into @EdStudCourseRegId;
while @@FETCH_STATUS = 0
begin
  
		DECLARE @ED_STUD_ID NUMERIC,@ED_STUD_SEMESTER_ID NUMERIC,@ED_COURSE_ID NUMERIC
      
      SELECT     @ED_COURSE_ID=ED_STUD_COURSE_REG.ED_COURSE_ID,
                 @ED_STUD_SEMESTER_ID=ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID,
                 @ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
      FROM       ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                WHERE ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID=@EdStudCourseRegId
                
     
     ----IN COURSE IS CONTINOUS TO ANOTHER course and another vourse is the main so can't delete second course
     --    if exists(select 'a' from ED_STUD_COURSE_REG INNER JOIN
     --                 ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
     --               where 
     --                 ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID and
     --                 ED_STUD_SEMESTER.ED_STUD_ID=@ED_STUD_ID and exists
     --                  ( 
     --                      select 'a' from ED_COURSE_COREQ T1 inner join ED_COURSE_COREQ T2 on
     --                      T1.ED_COURSE_GROUP=T2.ED_COURSE_GROUP
     --                      where T1.ed_course_id=ED_STUD_COURSE_REG.ed_course_id
     --                      and T1.IS_MAIN=1 and T2.ed_course_id=@ED_COURSE_ID and
     --                      T2.IS_MAIN=0
     --                   )
     --              )
     --              BEGIN
     --                  RAISERROR('(COS_DELETE_COURSE_REG_COREQ)',16,-1)
					--                    RETURN 
     --              END

     
          DELETE FROM ED_STUD_GROUP WHERE
          ED_STUD_ID=@ED_STUD_ID AND ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID AND EXISTS
          (SELECT 'A' FROM SC_SCHEDULE_DTL
          INNER JOIN SC_SCHEDULE_HDR ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID
          INNER JOIN ED_OFFERING_COURSE ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID=SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID
          
          WHERE SC_SCHEDULE_DTL_ID=ED_STUD_GROUP.SC_SCHEDULE_DTL_ID
          AND ED_OFFERING_COURSE.ED_COURSE_ID=@ED_COURSE_ID)
          
            
				DELETE FROM [dbo].[ED_STUD_COURSE_REG] WITH (ROWLOCK) 
				WHERE
					[ED_STUD_COURSE_REG_ID] = @EdStudCourseRegId
          
          exec [dbo].[Sp_Maint_StudCourseReg] @ED_STUD_ID,@ED_COURSE_ID
         
          
           -- to delete agenda fees on student if available  
                    declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
                     select @FeeEdStudId= ED_STUD_ID,
                            @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
                            @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
                            @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
                     FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID
                    exec  [dbo].[Delete_AgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,2,0
                    
  
fetch next from studs into @EdStudCourseRegId;
end
close studs;
deallocate studs;  
---------------------------------------------------------------------------------------------------------  
  
			 --DELETE FROM SC_SCHEDULE_DTL_DAY TABLE
        DELETE FROM SC_SCHEDULE_DTL_DAY WHERE SC_SCHEDULE_DTL_ID IN
         (SELECT
                 SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID
                  FROM SC_SCHEDULE_DTL INNER JOIN SC_SCHEDULE_HDR ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID=
                  SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID 
                  WHERE ED_OFFERING_COURSE_ID=@EdOfferingCourseId
               )
        
        
        --DELETE FROM SC_SCHEDULE_DTL TABLE
        DELETE FROM SC_SCHEDULE_DTL WHERE SC_SCHEDULE_HDR_ID IN
       (  SELECT
                  SC_SCHEDULE_HDR_ID FROM SC_SCHEDULE_HDR
                  WHERE ED_OFFERING_COURSE_ID=@EdOfferingCourseId
               )
               
               
               -- DELETE FROM SC_SCHEDULE_HDR TABLE
         DELETE FROM SC_SCHEDULE_HDR WHERE ED_OFFERING_COURSE_ID=@EdOfferingCourseId
        
        
				DELETE FROM [dbo].[ED_OFFERING_COURSE] WITH (ROWLOCK) 
				WHERE
					[ED_OFFERING_COURSE_ID] = @EdOfferingCourseId

  IF @@ERROR <> 0
   BEGIN
      ROLLBACK

      RETURN
   END
  commit transaction;
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_TCHNG_SLOT_AGENDA_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets records from the SC_TCHNG_SLOT_AGENDA table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SC_TCHNG_SLOT_AGEND_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SC_TCHNG_SLOT_AGEND_ID]'
				SET @SQL = @SQL + ', [ED_ACAD_YEAR_ID]'
				SET @SQL = @SQL + ', [ED_CODE_SEMESTER_ID]'
				SET @SQL = @SQL + ', [FROM_DATE]'
				SET @SQL = @SQL + ', [TO_DATE]'
				SET @SQL = @SQL + ', [SC_TCHNG_SLOT_ID]'
				SET @SQL = @SQL + ', [SLOT_INTERVAL]'
				SET @SQL = @SQL + ' FROM [dbo].[SC_TCHNG_SLOT_AGENDA]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SC_TCHNG_SLOT_AGEND_ID],'
				SET @SQL = @SQL + ' [ED_ACAD_YEAR_ID],'
				SET @SQL = @SQL + ' [ED_CODE_SEMESTER_ID],'
				SET @SQL = @SQL + ' [FROM_DATE],'
				SET @SQL = @SQL + ' [TO_DATE],'
				SET @SQL = @SQL + ' [SC_TCHNG_SLOT_ID],'
				SET @SQL = @SQL + ' [SLOT_INTERVAL]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SC_TCHNG_SLOT_AGENDA]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="SC_TCHNG_SLOT_AGENDA_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Gets records from the SC_TCHNG_SLOT_AGENDA table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SC_TCHNG_SLOT_AGEND_ID]
					, [ED_ACAD_YEAR_ID]
					, [ED_CODE_SEMESTER_ID]
					, [FROM_DATE]
					, [TO_DATE]
					, [SC_TCHNG_SLOT_ID]
					, [SLOT_INTERVAL]
					FROM [dbo].[SC_TCHNG_SLOT_AGENDA] {0}
				)
				SELECT
				       [SC_TCHNG_SLOT_AGEND_ID],
				       [ED_ACAD_YEAR_ID],
				       [ED_CODE_SEMESTER_ID],
				       [FROM_DATE],
				       [TO_DATE],
				       [SC_TCHNG_SLOT_ID],
				       [SLOT_INTERVAL]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SC_TCHNG_SLOT_AGENDA] {0};
				
				END
			]]>
      </body>
    </procedure>
    
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_old_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010
renamed by hadeer 3/2/2013 to insert from default insert of code smith
-- Created By:  ()
-- Purpose: Inserts a record into the SC_SCHEDULE_DTL table
-- Table Comment: جدول بيانات الجدول الدراسي لعام اكاديمي
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <!--<parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />-->
        <parameter name="@ScScheduleHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SaStfMamberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@GroupDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GroupDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GroupOrder" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeWeekDayId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ScTchngSlotId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ManualFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
       
        declare @Count numeric
        select @Count=count(SC_SCHEDULE_DTL_ID) from SC_SCHEDULE_DTL where SC_SCHEDULE_HDR_ID=@ScScheduleHdrId
        set @Count=@Count+1;
        
        declare @MaxScScheduleDtlId numeric
        select @MaxScScheduleDtlId=max(SC_SCHEDULE_DTL_ID) from SC_SCHEDULE_DTL
        if(@MaxScScheduleDtlId is null)
           set @MaxScScheduleDtlId=0
         set @MaxScScheduleDtlId=@MaxScScheduleDtlId+1;
        
        
        
        
        
        declare @MaxGroupOrder numeric
        select @MaxGroupOrder=max(GROUP_ORDER) from SC_SCHEDULE_DTL
        if(@MaxGroupOrder is null)
           set @MaxGroupOrder=0
         set @MaxGroupOrder=@MaxGroupOrder+1;
        
        
        
				
				INSERT INTO [dbo].[SC_SCHEDULE_DTL]
					(
					--[ED_OFFERING_ID],
					[SC_SCHEDULE_HDR_ID]
					,[SA_STF_MAMBER_ID]
					,[GROUP_DESCR_AR]
					,[GROUP_DESCR_EN]
					,[GROUP_ORDER]
					,[GS_CODE_GENDER_ID]
					
					,[NOTES]
					,[IS_APPROVED]
					,[MANUAL_FLAG]
					,[AS_FACULTY_INFO_ID]
					)
				VALUES
					(
					--@EdOfferingId,
					@ScScheduleHdrId
					,@SaStfMamberId
					,@Count
					,@Count
					,@MaxGroupOrder
					,@GsCodeGenderId
					
					,@Notes
					,@IsApproved
					,@ManualFlag
					,@AsFacultyInfoId
					)
				
				-- Get the identity value
				SET @ScScheduleDtlId = SCOPE_IDENTITY()
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_old_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Updates a record in the SC_SCHEDULE_DTL table
-- Table Comment: جدول بيانات الجدول الدراسي لعام اكاديمي
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <!--<parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />-->
        <parameter name="@ScScheduleHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SaStfMamberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@GroupDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GroupDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GroupOrder" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeWeekDayId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ScTchngSlotId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ManualFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CourseInstanceName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@IsResultApproved" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
	
				
				
				-- Modify the updatable columns
        if(@IsResultApproved=3)  
          Begin
                  if exists(
                          SELECT     'a'
                          FROM         SC_SCHEDULE_DTL INNER JOIN
                                       ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
                                       ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
                          WHERE        (ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is null) AND 
                                       (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId) AND
                                       (ED_STUD_COURSE_REG.INCOMP_FLG=0) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1)
                           )
                      Begin
                        declare @ErrApproveScheduleDtl nvarchar(max)
                             set @ErrApproveScheduleDtl='';
                         SELECT     @ErrApproveScheduleDtl=@ErrApproveScheduleDtl+ED_STUD.FULL_NAME_AR+'<br>'
                            FROM         SC_SCHEDULE_DTL INNER JOIN
                                                  ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
                                                  ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID INNER JOIN
                                                  ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                                  ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
                            WHERE     (ED_STUD_COURSE_REG.ED_CODE_GRADING_ID IS NULL) AND (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID =@ScScheduleDtlId) AND 
                                                  (ED_STUD_COURSE_REG.INCOMP_FLG = 0) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1)
                                set @ErrApproveScheduleDtl='ErrApproveScheduleDtl'+@ErrApproveScheduleDtl;                    
                         RAISERROR(@ErrApproveScheduleDtl,16,-1)
                                   return
                      End
                      
                set @IsResultApproved=1;      
          End
          
          
         If(@IsResultApproved=4)
          Begin
                  if exists(
                          SELECT     'a'
                          FROM         SC_SCHEDULE_DTL INNER JOIN
                                       ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
                                       ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID
                          WHERE        (ED_STUD_COURSE_REG.ED_CODE_GRADING_ID is null) AND 
                                       (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId) AND
                                       (ED_STUD_COURSE_REG.INCOMP_FLG=0) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1)
                           )
                      Begin
                        declare @ErrApproveScheduleDtlEn nvarchar(max)
                             set @ErrApproveScheduleDtlEn='';
                         SELECT     @ErrApproveScheduleDtlEn=@ErrApproveScheduleDtlEn+ED_STUD.FULL_NAME_EN+'<br>'
                            FROM         SC_SCHEDULE_DTL INNER JOIN
                                                  ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
                                                  ED_STUD_COURSE_REG ON ED_STUD_GROUP.ED_STUD_COURSE_REG_ID = ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID INNER JOIN
                                                  ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID INNER JOIN
                                                  ED_STUD ON ED_STUD_SEMESTER.ED_STUD_ID = ED_STUD.ED_STUD_ID
                            WHERE     (ED_STUD_COURSE_REG.ED_CODE_GRADING_ID IS NULL) AND (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId) AND 
                                                  (ED_STUD_COURSE_REG.INCOMP_FLG = 0) AND (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID = 1)
                                 
                                 set @ErrApproveScheduleDtlEn='ErrApproveScheduleDtlEn'+@ErrApproveScheduleDtlEn;
                         RAISERROR(@ErrApproveScheduleDtlEn,16,-1)
                                   return
                      End
                      
                set @IsResultApproved=1;      
          End
        
				UPDATE
					[dbo].[SC_SCHEDULE_DTL]
				SET
					--[ED_OFFERING_ID] = @EdOfferingId,
					[SC_SCHEDULE_HDR_ID] = @ScScheduleHdrId
					,[SA_STF_MAMBER_ID] = @SaStfMamberId
					,[GROUP_DESCR_AR] = @GroupDescrAr
					,[GROUP_DESCR_EN] = @GroupDescrEn
					,[GROUP_ORDER] = @GroupOrder
					,[GS_CODE_GENDER_ID] = @GsCodeGenderId
					
					,[NOTES] = @Notes
					,[IS_APPROVED] = @IsApproved
					,[MANUAL_FLAG] = @ManualFlag
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
          ,[COURSE_INSTANCE_NAME]=@CourseInstanceName
          ,[IS_RESULT_APPROVED]=@IsResultApproved
				WHERE
[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId 
				
			
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Deletes a record in the SC_SCHEDULE_DTL table
-- Table Comment: جدول بيانات الجدول الدراسي لعام اكاديمي
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        begin transaction
        DELETE FROM [dbo].[SC_SCHEDULE_DTL_DAY]WITH (ROWLOCK)
        WHERE
					[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId
          
          DELETE FROM [dbo].[SC_SCHEDULE_DTL_EXT_STF]WITH (ROWLOCK)
        WHERE
					[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId
          
       declare @HeaderGroupNumber numeric,@ScScheduleHdrId numeric
            select @HeaderGroupNumber=
                 SC_SCHEDULE_HDR.NO_GROUPS,
                 @ScScheduleHdrId=SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID
            FROM         SC_SCHEDULE_DTL INNER JOIN
                                  SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID
            WHERE     (SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = @ScScheduleDtlId)
          
        
				DELETE FROM [dbo].[SC_SCHEDULE_DTL] WITH (ROWLOCK) 
				WHERE
					[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId
          
          update SC_SCHEDULE_HDR set NO_GROUPS=(@HeaderGroupNumber-1) where SC_SCHEDULE_HDR_ID=@ScScheduleHdrId;
					commit transaction;
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_SCHEDULE_DTL_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 19, 2010

-- Created By:  ()
-- Purpose: Finds records in the SC_SCHEDULE_DTL table passing nullable parameters
-- Table Comment: جدول بيانات الجدول الدراسي لعام اكاديمي
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <!--<parameter name="@EdOfferingId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />-->
        <parameter name="@ScScheduleHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@SaStfMamberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@GroupDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@GroupDescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@GroupOrder" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@GsCodeGenderId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@GsCodeWeekDayId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@ScTchngSlotId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@ManualFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SC_SCHEDULE_DTL_ID]
	--, [ED_OFFERING_ID]
	, [SC_SCHEDULE_HDR_ID]
	, [SA_STF_MAMBER_ID]
	, [GROUP_DESCR_AR]
	, [GROUP_DESCR_EN]
	, [GROUP_ORDER]
	, [GS_CODE_GENDER_ID]
	,1
					,1
					,1
					,1
	, [NOTES]
	, [IS_APPROVED]
	, [MANUAL_FLAG]
	, [AS_FACULTY_INFO_ID]
    FROM
	[dbo].[SC_SCHEDULE_DTL]
    WHERE 
	 ([SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId OR @ScScheduleDtlId IS NULL)
	--AND ([ED_OFFERING_ID] = @EdOfferingId OR @EdOfferingId IS NULL)
	AND ([SC_SCHEDULE_HDR_ID] = @ScScheduleHdrId OR @ScScheduleHdrId IS NULL)
	AND ([SA_STF_MAMBER_ID] = @SaStfMamberId OR @SaStfMamberId IS NULL)
	AND ([GROUP_DESCR_AR] = @GroupDescrAr OR @GroupDescrAr IS NULL)
	AND ([GROUP_DESCR_EN] = @GroupDescrEn OR @GroupDescrEn IS NULL)
	AND ([GROUP_ORDER] = @GroupOrder OR @GroupOrder IS NULL)
	AND ([GS_CODE_GENDER_ID] = @GsCodeGenderId OR @GsCodeGenderId IS NULL)
	AND ([GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId OR @GsCodeWeekDayId IS NULL)
	AND ([SC_TCHNG_SLOT_ID] = @ScTchngSlotId OR @ScTchngSlotId IS NULL)
	AND ([SC_BUILDING_ID] = @ScBuildingId OR @ScBuildingId IS NULL)
	AND ([SC_HALL_ID] = @ScHallId OR @ScHallId IS NULL)
	AND ([NOTES] = @Notes OR @Notes IS NULL)
	AND ([IS_APPROVED] = @IsApproved OR @IsApproved IS NULL)
	AND ([MANUAL_FLAG] = @ManualFlag OR @ManualFlag IS NULL)
	AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SC_SCHEDULE_DTL_ID]
	--, [ED_OFFERING_ID]
	, [SC_SCHEDULE_HDR_ID]
	, [SA_STF_MAMBER_ID]
	, [GROUP_DESCR_AR]
	, [GROUP_DESCR_EN]
	, [GROUP_ORDER]
	, [GS_CODE_GENDER_ID]
	, [GS_CODE_WEEK_DAY_ID]
	, [SC_TCHNG_SLOT_ID]
	, [SC_BUILDING_ID]
	, [SC_HALL_ID]
	, [NOTES]
	, [IS_APPROVED]
	, [MANUAL_FLAG]
	, [AS_FACULTY_INFO_ID]
    FROM
	[dbo].[SC_SCHEDULE_DTL]
    WHERE 
	 ([SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId AND @ScScheduleDtlId is not null)
	--OR ([ED_OFFERING_ID] = @EdOfferingId AND @EdOfferingId is not null)
	OR ([SC_SCHEDULE_HDR_ID] = @ScScheduleHdrId AND @ScScheduleHdrId is not null)
	OR ([SA_STF_MAMBER_ID] = @SaStfMamberId AND @SaStfMamberId is not null)
	OR ([GROUP_DESCR_AR] = @GroupDescrAr AND @GroupDescrAr is not null)
	OR ([GROUP_DESCR_EN] = @GroupDescrEn AND @GroupDescrEn is not null)
	OR ([GROUP_ORDER] = @GroupOrder AND @GroupOrder is not null)
	OR ([GS_CODE_GENDER_ID] = @GsCodeGenderId AND @GsCodeGenderId is not null)
	OR ([GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId AND @GsCodeWeekDayId is not null)
	OR ([SC_TCHNG_SLOT_ID] = @ScTchngSlotId AND @ScTchngSlotId is not null)
	OR ([SC_BUILDING_ID] = @ScBuildingId AND @ScBuildingId is not null)
	OR ([SC_HALL_ID] = @ScHallId AND @ScHallId is not null)
	OR ([NOTES] = @Notes AND @Notes is not null)
	OR ([IS_APPROVED] = @IsApproved AND @IsApproved is not null)
	OR ([MANUAL_FLAG] = @ManualFlag AND @ManualFlag is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
   

    
    <procedure owner="dbo" name="ED_CODE_SEMESTER_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_SEMESTER table
-- Table Comment: جدول أكواد الفصول الدراسية لكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@SemesterOrder" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@PeriodWeek" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
			

            declare @MaxEdCodeSemesterOrder numeric(9,0)
                select @MaxEdCodeSemesterOrder=max(SEMESTER_ORDER) from ED_CODE_SEMESTER
               if(@MaxEdCodeSemesterOrder is null)
                 set @MaxEdCodeSemesterOrder=0
               set @MaxEdCodeSemesterOrder=@MaxEdCodeSemesterOrder+1;
        
        
        
        declare @MaxEdCodeSemesterId numeric(6,0)
        select  @MaxEdCodeSemesterId =max(ED_CODE_SEMESTER_ID)from ED_CODE_SEMESTER;
         if( @MaxEdCodeSemesterId is null)
            set  @MaxEdCodeSemesterId=0;
            
          set  @MaxEdCodeSemesterId= @MaxEdCodeSemesterId+1;        
        
				INSERT INTO [dbo].[ED_CODE_SEMESTER]
					(
					[ED_CODE_SEMESTER_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[SEMESTER_ORDER]
					,[ED_CODE_SEMESTER_TYPE_ID]
          	,[PERIOD_WEEK]
					)
				VALUES
					(
					@MaxEdCodeSemesterId
					,@DescrAr
					,@DescrEn
					,@MaxEdCodeSemesterOrder
					,@EdCodeSemesterTypeId
          	,@PeriodWeek
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_CODE_SEMESTER_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_CODE_SEMESTER table
-- Table Comment: جدول أكواد الفصول الدراسية لكلية
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@SemesterOrder" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@PeriodWeek" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
			

            declare @MaxEdCodeSemesterOrder numeric(9,0)
                select @MaxEdCodeSemesterOrder=max(SEMESTER_ORDER) from ED_CODE_SEMESTER
               if(@MaxEdCodeSemesterOrder is null)
                 set @MaxEdCodeSemesterOrder=0
               set @MaxEdCodeSemesterOrder=@MaxEdCodeSemesterOrder+1;
        
        
        
        declare @MaxEdCodeSemesterId numeric(6,0)
        select  @MaxEdCodeSemesterId =max(ED_CODE_SEMESTER_ID)from ED_CODE_SEMESTER;
         if( @MaxEdCodeSemesterId is null)
            set  @MaxEdCodeSemesterId=0;
            
          set  @MaxEdCodeSemesterId= @MaxEdCodeSemesterId+1;        
        
				INSERT INTO [dbo].[ED_CODE_SEMESTER]
					(
					[ED_CODE_SEMESTER_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[SEMESTER_ORDER]
					,[ED_CODE_SEMESTER_TYPE_ID]
          	,[PERIOD_WEEK]
					)
				VALUES
					(
					@MaxEdCodeSemesterId
					,@DescrAr
					,@DescrEn
					,@MaxEdCodeSemesterOrder
					,@EdCodeSemesterTypeId
          	,@PeriodWeek
					)
				
									
							
			]]>
      </body>
    </procedure>
    


    <procedure owner="dbo" name="ED_STUD_SEMESTER_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_SEMESTER table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
          <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
          <parameter name="@OriginalEdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
          <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
          <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
          <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
          <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
          <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
          <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
          <parameter name="@EdCodeLoadTypeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
          <parameter name="@EdCodeEnrollTypeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
          <parameter name="@AccumCh" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
          <parameter name="@AccumGpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
          <parameter name="@IsCourseApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
          <parameter name="@AccumPoint" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
          <parameter name="@SemCh" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
          <parameter name="@SemGpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
          <parameter name="@SemPoint" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
          <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
          <parameter name="@IsClosed" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
          <parameter name="@MajorGpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
          <parameter name="@MajorCgpa" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				-- Modify the updatable columns
        
        if(@IsCourseApproved=3)  --in approve flag only =3 in case off check on approve conditions
        Begin
        
             --check on late registration Fees
                 declare @IsPayed numeric
                   select @IsPayed=[dbo].[FN_IsAgendaFeesOnStudentPayed](@EdStudId,@AsFacultyInfoId,@EdAcadYearId,@EdCodeSemesterId,2,0)
                  if(@IsPayed=0)
                    Begin
                       RAISERROR('(Fees_Not_Payed_For_Late_Registration)',16,-1)
                         return;
                    End
            
            
              --check on Fees Paid or not
                  declare @DueRemain numeric(18,2)
                     select @DueRemain=DueRemain from [dbo].[ComputeStudPaymentDue](@EdAcadYearId,@AsFacultyInfoId,@EdStudId)
                      if(@DueRemain>0)
                        Begin
                          declare @RaisedFeeErrorr nvarchar(50);
                          set @RaisedFeeErrorr='Fees_Not_Payed'+CONVERT(nvarchar,@DueRemain)
                           RAISERROR(@RaisedFeeErrorr,16,-1)
                             return;
                        End
            
                  -- التحقق من شروط العبء الدراسى
                      declare @MIN_LOAD numeric(8,3),@MAX_LOAD numeric(8,3),@EXCESS_LOAD numeric(8,3),@ADDED_LOAD numeric(8,3) 
                       declare @Sum_Subjects_Hours numeric(11,3),@TOTAL_MAX_LOAD numeric(9,3),@ED_CODE_LOAD_TYPE_ID numeric,
                       @ED_CODE_SEMESTER_TYPE_ID numeric;
                       
                       select @ED_CODE_SEMESTER_TYPE_ID=ED_CODE_SEMESTER_TYPE_ID from ED_CODE_SEMESTER 
                       where ED_CODE_SEMESTER_ID=@EdCodeSemesterId;
                       

                      
                      
                     --  select @ED_CODE_LOAD_TYPE_ID=ED_CODE_LOAD_TYPE_ID from ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@EdStudSemesterId
                        
                     
                      select @MIN_LOAD=MIN_CH,
                      @MAX_LOAD=MAX_CH from
                      [dbo].[ComputeAcademicLoad](@EdStudSemesterId)
                        
      
                        
                       if(@MIN_LOAD is null or @MAX_LOAD is null)
                           begin
                              RAISERROR('(No_Policy_Load_For_Student)',16,-1)
                                   return
                              
                           end

                        set @TOTAL_MAX_LOAD=@MAX_LOAD;
                        if(@TOTAL_MAX_LOAD is null)
                          set @TOTAL_MAX_LOAD=0;

                        select @Sum_Subjects_Hours =SUM(ED_COURSE.CREDIT_HOURS)
                             FROM    
                                      ED_STUD_COURSE_REG  INNER JOIN
                                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                             WHERE    (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @EdStudSemesterId)AND
                                      (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID=1)
                             
                             
                             if(@Sum_Subjects_Hours is null)
                                set @Sum_Subjects_Hours=0;
                              
                        
                        
                        if(@Sum_Subjects_Hours<@MIN_LOAD)
                                begin
                                    RAISERROR('(MIN_LOAD)',16,-1)
                                   return
                                end
                        


                        if(@Sum_Subjects_Hours>@TOTAL_MAX_LOAD)
                               begin
                                   RAISERROR('(MAX_LOAD)',16,-1)
                                   return
                                end
                             
                   --    declare @DueRemains numeric(18,2)
                   --    select @DueRemains=DueRemain from [dbo].[ComputeStudPaymentDue](@EdAcadYearId,@AsFacultyInfoId,@EdStudId)
                   --    if(@DueRemains>0) 
                   --       begin
                    --           declare @RemainsAmount nvarchar(100)
                    --           set @RemainsAmount='Remains_Amount'+convert(nvarchar,@DueRemains);
                    --          RAISERROR(@RemainsAmount,16,-1)
                    --               return
                    --      end
                          
                      -- نهاية التحقق من شروط العبء الدراسى    
                      
                    --التحقق من ان كل مقرر قام الطالب بتسجيله فى هذا الفصل تم تسكين الطالب  مجموعه لكل طرق التقييم
                     if exists( select 'a' from  ED_STUD_SEMESTER  INNER JOIN
                                  ED_STUD_COURSE_REG ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                                  inner join ED_OFFERING
                                     on(
                                         ED_OFFERING.AS_FACULTY_INFO_ID=ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
                                         and  ED_OFFERING.ED_ACAD_YEAR_ID=ED_STUD_SEMESTER.ED_ACAD_YEAR_ID
                                         and  ED_OFFERING.ED_CODE_SEMESTER_ID=ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID
                                       )
                                    INNER JOIN
                                          ED_OFFERING_COURSE 
                                          ON (
                                                ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID
                                                and ED_OFFERING_COURSE.ED_COURSE_ID=ED_STUD_COURSE_REG.ED_COURSE_ID
                                             )
                                           INNER JOIN
                                          SC_SCHEDULE_HDR ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID = SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID 
                                          
                                           where     ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=@EdStudSemesterId 
                                            and not exists
                                                 (
                                                     select 'a' from ED_STUD_GROUP inner join SC_SCHEDULE_DTL on
                                                     SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID=ED_STUD_GROUP.SC_SCHEDULE_DTL_ID and
                                                     SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID=SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID
                                                 )
                               )
                               begin
                                    RAISERROR('(Empty_Stud_Group)',16,-1)
                                   return
                                end
                               
                   --نهاية التحقق  من ان كل مقرر قام الطالب بتسجيله فى هذا الفصل تم تسكين الطالب  مجموعه لكل طرق التقييم
        
        	          UPDATE
					          [dbo].[ED_STUD_SEMESTER]
				          SET
					          [ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					          ,[ED_STUD_ID] = @EdStudId
					          ,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					          ,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					          ,[ED_CODE_LEVEL_ID] = @EdCodeLevelId
					          ,[IS_LAST] = @IsLast
					          ,[ED_CODE_LOAD_TYPE_ID] = @EdCodeLoadTypeId
					          ,[ED_CODE_ENROLL_TYPE_ID] = @EdCodeEnrollTypeId
					          ,[ACCUM_CH] = @AccumCh
					          ,[ACCUM_GPA] = @AccumGpa
                    ,IS_COURSE_APPROVED=1
					          ,ACCUM_POINT=@AccumPoint
					          ,SEM_CH=@SemCh
					          ,SEM_GPA=@SemGpa
					          ,SEM_POINT=@SemPoint
					          ,ED_SEMESTER_OPEN_ID=@EdSemesterOpenId
					          ,IS_CLOSED=@IsClosed
                              ,MAJOR_GPA = @MajorGpa
                              ,MAJOR_CGPA = @MajorCgpa
				          WHERE
                  [ED_STUD_SEMESTER_ID] = @EdStudSemesterId 
        End
        
        else
        Begin
        
            declare @CurrentApproveCourseFlg numeric
            select @CurrentApproveCourseFlg=IS_COURSE_APPROVED from [dbo].[ED_STUD_SEMESTER]
              where 
               [ED_STUD_SEMESTER_ID] = @EdStudSemesterId 
               
               if(@CurrentApproveCourseFlg=1 and @IsCourseApproved=0)
                 Begin
                     -- if user want to cancel student course approval so we must check on this conditions
                     --1- no degrees is entered for the student
                        if exists(select 'a' from ed_stud_course_reg where 
                         [ED_STUD_SEMESTER_ID] = @EdStudSemesterId and ED_CODE_GRADING_ID is not null)
                           Begin
                              RAISERROR('Cannot_Cancel_Approve_Exists_Degrees)',16,-1)
                                   return;
                           End
                           
                           
                      --2- no absence is entered for the student 
                        if exists(SELECT    'a'
                        FROM      ED_STUD_ABSENCE INNER JOIN
                                  ED_STUD_SEMESTER ON ED_STUD_ABSENCE.ED_CODE_SEMESTER_ID = ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID AND 
                                  ED_STUD_ABSENCE.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID AND 
                                  ED_STUD_ABSENCE.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID
                        WHERE     (ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId))
                          Begin
                                 RAISERROR('Cannot_Cancel_Approve_Exists_ABSENCE)',16,-1)
                                   return;
                          End
                          
                          
                       --3- no course change is entered for the student
                        if exists(select 'a' from ED_STUD_COURSE_CHNG where 
                         [ED_STUD_SEMESTER_ID] = @EdStudSemesterId )
                           Begin
                              RAISERROR('Cannot_Cancel_Approve_Exists_CourseChange)',16,-1)
                                   return;
                           End
                           
                       --4- no  excuse is entered for the student
                        if exists(select 'a' from ED_STUD_EXCUSE where 
                         [ED_STUD_SEMESTER_ID] = @EdStudSemesterId )
                           Begin
                              RAISERROR('Cannot_Cancel_Approve_Exists_excuse)',16,-1)
                                   return;
                           End
                           
                           
                 End
        
          		UPDATE
					      [dbo].[ED_STUD_SEMESTER]
				      SET
					      [ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					      ,[ED_STUD_ID] = @EdStudId
					      ,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					      ,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					      ,[ED_CODE_LEVEL_ID] = @EdCodeLevelId
					      ,[IS_LAST] = @IsLast
					      ,[ED_CODE_LOAD_TYPE_ID] = @EdCodeLoadTypeId
					      ,[ED_CODE_ENROLL_TYPE_ID] = @EdCodeEnrollTypeId
					      ,[ACCUM_CH] = @AccumCh
					      ,[ACCUM_GPA] = @AccumGpa
                ,IS_COURSE_APPROVED=@IsCourseApproved
				       ,ACCUM_POINT=@AccumPoint
					      ,SEM_CH=@SemCh
					      ,SEM_GPA=@SemGpa
					      ,SEM_POINT=@SemPoint
					      ,ED_SEMESTER_OPEN_ID=@EdSemesterOpenId
					      ,IS_CLOSED=@IsClosed
                          ,MAJOR_GPA = @MajorGpa
                          ,MAJOR_CGPA = @MajorCgpa
				      WHERE
              [ED_STUD_SEMESTER_ID] = @EdStudSemesterId 
        End
        
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_SEMESTER_GetByEdStudSemesterId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_SEMESTER table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
      
      
				SELECT
					[dbo].[ED_STUD_SEMESTER].*
         
				FROM
					[dbo].[ED_STUD_SEMESTER] left outer join ed_code_level on ed_code_level.ed_code_level_id=
          [dbo].[ED_STUD_SEMESTER].ed_code_level_id
				WHERE
					[dbo].[ED_STUD_SEMESTER].[ED_STUD_SEMESTER_ID] = @EdStudSemesterId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="SA_CODE_JOB_STATUS_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 24, 2010

-- Created By:  ()
-- Purpose: Gets records from the SA_CODE_JOB_STATUS table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SA_CODE_JOB_STATUS_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SA_CODE_JOB_STATUS_ID]'
				SET @SQL = @SQL + ', [JOB_STATUS_CODE]'
				SET @SQL = @SQL + ', [JOB_STATUS_DESCR]'
				SET @SQL = @SQL + ', [JOB_STATUS_DESCR_EN]'
				SET @SQL = @SQL + ' FROM [dbo].[SA_CODE_JOB_STATUS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SA_CODE_JOB_STATUS_ID],'
				SET @SQL = @SQL + ' [JOB_STATUS_CODE],'
				SET @SQL = @SQL + ' [JOB_STATUS_DESCR]'
				SET @SQL = @SQL + ' [JOB_STATUS_DESCR_EN]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SA_CODE_JOB_STATUS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SA_CODE_JOB_STATUS_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 24, 2010

-- Created By:  ()
-- Purpose: Finds records in the SA_CODE_JOB_STATUS table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@SaCodeJobStatusId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@JobStatusCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null" />
        <parameter name="@JobStatusDescr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SA_CODE_JOB_STATUS_ID]
	, [JOB_STATUS_CODE]
	, [JOB_STATUS_DESCR]
    FROM
	[dbo].[SA_CODE_JOB_STATUS]
    WHERE 
	 ([SA_CODE_JOB_STATUS_ID] = @SaCodeJobStatusId OR @SaCodeJobStatusId IS NULL)
	AND ([JOB_STATUS_CODE] = @JobStatusCode OR @JobStatusCode IS NULL)
	AND ([JOB_STATUS_DESCR] = @JobStatusDescr OR @JobStatusDescr IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SA_CODE_JOB_STATUS_ID]
	, [JOB_STATUS_CODE]
	, [JOB_STATUS_DESCR]
    FROM
	[dbo].[SA_CODE_JOB_STATUS]
    WHERE 
	 ([SA_CODE_JOB_STATUS_ID] = @SaCodeJobStatusId AND @SaCodeJobStatusId is not null)
	OR ([JOB_STATUS_CODE] = @JobStatusCode AND @JobStatusCode is not null)
	OR ([JOB_STATUS_DESCR] = @JobStatusDescr AND @JobStatusDescr is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SA_CODE_JOB_STATUS_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 24, 2010

-- Created By:  ()
-- Purpose: Gets records from the SA_CODE_JOB_STATUS table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SA_CODE_JOB_STATUS_ID]
					, [JOB_STATUS_CODE]
					, [JOB_STATUS_DESCR]
					FROM [dbo].[SA_CODE_JOB_STATUS] {0}
				)
				SELECT
				       [SA_CODE_JOB_STATUS_ID],
				       [JOB_STATUS_CODE],
				       [JOB_STATUS_DESCR]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SA_CODE_JOB_STATUS] {0};
				
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SA_CODE_SC_DEG_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 24, 2010

-- Created By:  ()
-- Purpose: Gets records from the SA_CODE_SC_DEG table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SA_CODE_SC_DEG_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SA_CODE_SC_DEG_ID]'
				SET @SQL = @SQL + ', [SC_DEG_CODE]'
				SET @SQL = @SQL + ', [SC_DEG_DESCR_AR]'
				SET @SQL = @SQL + ', [SC_DEG_DESCR_EN]'
				SET @SQL = @SQL + ', [START_SAL]'
				SET @SQL = @SQL + ', [END_SAL]'
				SET @SQL = @SQL + ', [DEG_PERIOD]'
				SET @SQL = @SQL + ', [STAFF_FLAG]'
				SET @SQL = @SQL + ', [DEG_ORDER]'
				SET @SQL = @SQL + ', [DEG_PERIOD_Month]'
				SET @SQL = @SQL + ', [Constant]'
				SET @SQL = @SQL + ' FROM [dbo].[SA_CODE_SC_DEG]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SA_CODE_SC_DEG_ID],'
				SET @SQL = @SQL + ' [SC_DEG_CODE],'
				SET @SQL = @SQL + ' [SC_DEG_DESCR_AR],'
				SET @SQL = @SQL + ' [SC_DEG_DESCR_EN],'
				SET @SQL = @SQL + ' [START_SAL],'
				SET @SQL = @SQL + ' [END_SAL],'
				SET @SQL = @SQL + ' [DEG_PERIOD],'
				SET @SQL = @SQL + ' [STAFF_FLAG],'
				SET @SQL = @SQL + ' [DEG_ORDER],'
				SET @SQL = @SQL + ' [DEG_PERIOD_Month],'
				SET @SQL = @SQL + ' [Constant]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SA_CODE_SC_DEG]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SA_CODE_SC_DEG_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Monday, May 24, 2010

-- Created By:  ()
-- Purpose: Gets records from the SA_CODE_SC_DEG table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SA_CODE_SC_DEG_ID]
					, [SC_DEG_CODE]
					, [SC_DEG_DESCR_AR]
					, [SC_DEG_DESCR_EN]
					, [START_SAL]
					, [END_SAL]
					, [DEG_PERIOD]
					, [STAFF_FLAG]
					, [DEG_ORDER]
					, [DEG_PERIOD_Month]
					, [Constant]
					FROM [dbo].[SA_CODE_SC_DEG] {0}
				)
				SELECT
				       [SA_CODE_SC_DEG_ID],
				       [SC_DEG_CODE],
				       [SC_DEG_DESCR_AR],
				       [SC_DEG_DESCR_EN],
				       [START_SAL],
				       [END_SAL],
				       [DEG_PERIOD],
				       [STAFF_FLAG],
				       [DEG_ORDER],
				       [DEG_PERIOD_Month],
				       [Constant]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SA_CODE_SC_DEG] {0};
				
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_ACADMIC_ADV_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_ACADMIC_ADV table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdStudAcadmicAdvId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	   [dbo].[ED_STUD_ACADMIC_ADV].[ED_STUD_ACADMIC_ADV_ID]
	,  [dbo].[ED_STUD_ACADMIC_ADV].[IS_LAST]
	,  [dbo].[ED_STUD_ACADMIC_ADV].[ED_STUD_ID]
	,  [dbo].[ED_STUD_ACADMIC_ADV].[ED_ACAD_YEAR_ID]
	,  [dbo].[ED_STUD_ACADMIC_ADV].[ED_CODE_SEMESTER_ID]
	,  [dbo].[ED_STUD_ACADMIC_ADV].[AS_FACULTY_INFO_ID]
	,  [dbo].[ED_STUD_ACADMIC_ADV].[SA_STF_MEMBER_ID]
  , ED_STUD_FACULTY.STUD_FACULTY_CODE EdStudCode
  , ED_STUD.FULL_NAME_AR EdStudFullNameAr
  , ED_STUD.FULL_NAME_EN EdStudFullNameEn
    FROM
	[dbo].[ED_STUD_ACADMIC_ADV] left outer join ED_STUD on ED_STUD.ED_STUD_ID=[dbo].[ED_STUD_ACADMIC_ADV].ED_STUD_ID
  left outer join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)
    WHERE 
	 ([ED_STUD_ACADMIC_ADV_ID] = @EdStudAcadmicAdvId OR @EdStudAcadmicAdvId IS NULL)
	AND ([dbo].[ED_STUD_ACADMIC_ADV].[IS_LAST] = @IsLast OR @IsLast IS NULL)
	AND ([dbo].[ED_STUD_ACADMIC_ADV].[ED_STUD_ID] = @EdStudId OR @EdStudId IS NULL)
	AND ([dbo].[ED_STUD_ACADMIC_ADV].[ED_ACAD_YEAR_ID] = @EdAcadYearId OR @EdAcadYearId IS NULL)
	AND ([dbo].[ED_STUD_ACADMIC_ADV].[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId OR @EdCodeSemesterId IS NULL)
	AND ([dbo].[ED_STUD_ACADMIC_ADV].[AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
	AND ([dbo].[ED_STUD_ACADMIC_ADV].[SA_STF_MEMBER_ID] = @SaStfMemberId OR @SaStfMemberId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [dbo].[ED_STUD_ACADMIC_ADV].[ED_STUD_ACADMIC_ADV_ID]
	, [dbo].[ED_STUD_ACADMIC_ADV].[IS_LAST]
	, [dbo].[ED_STUD_ACADMIC_ADV].[ED_STUD_ID]
	, [dbo].[ED_STUD_ACADMIC_ADV].[ED_ACAD_YEAR_ID]
	, [dbo].[ED_STUD_ACADMIC_ADV].[ED_CODE_SEMESTER_ID]
	, [dbo].[ED_STUD_ACADMIC_ADV].[AS_FACULTY_INFO_ID]
	, [dbo].[ED_STUD_ACADMIC_ADV].[SA_STF_MEMBER_ID]
  , ED_STUD_FACULTY.STUD_FACULTY_CODE EdStudCode
  , ED_STUD.FULL_NAME_AR EdStudFullNameAr
  , ED_STUD.FULL_NAME_EN EdStudFullNameEn
    FROM
	[dbo].[ED_STUD_ACADMIC_ADV] left outer join ED_STUD on ED_STUD.ED_STUD_ID=[dbo].[ED_STUD_ACADMIC_ADV].ED_STUD_ID
    left outer join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD.ED_STUD_ID and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyInfoId)

    WHERE 
	 ([ED_STUD_ACADMIC_ADV_ID] = @EdStudAcadmicAdvId AND @EdStudAcadmicAdvId is not null)
	OR ([dbo].[ED_STUD_ACADMIC_ADV].[IS_LAST] = @IsLast AND @IsLast is not null)
	OR ([dbo].[ED_STUD_ACADMIC_ADV].[ED_STUD_ID] = @EdStudId AND @EdStudId is not null)
	OR ([dbo].[ED_STUD_ACADMIC_ADV].[ED_ACAD_YEAR_ID] = @EdAcadYearId AND @EdAcadYearId is not null)
	OR ([dbo].[ED_STUD_ACADMIC_ADV].[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId AND @EdCodeSemesterId is not null)
	OR ([dbo].[ED_STUD_ACADMIC_ADV].[AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	OR ([dbo].[ED_STUD_ACADMIC_ADV].[SA_STF_MEMBER_ID] = @SaStfMemberId AND @SaStfMemberId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_SCHEDULE_DTL_DAY_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  ()
-- Purpose: Gets records from the SC_SCHEDULE_DTL_DAY table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SC_SCHEDULE_DTL_DAY_ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SC_SCHEDULE_DTL_DAY_ID]'
				SET @SQL = @SQL + ', [SC_SCHEDULE_DTL_ID]'
				SET @SQL = @SQL + ', [GS_CODE_WEEK_DAY_ID]'
				SET @SQL = @SQL + ', [SC_TCHNG_SLOT_ID]'
				SET @SQL = @SQL + ', [SC_BUILDING_ID]'
				SET @SQL = @SQL + ', [SC_HALL_ID]'
				SET @SQL = @SQL + ', [NOTES]'
				SET @SQL = @SQL + ' FROM [dbo].[SC_SCHEDULE_DTL_DAY]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SC_SCHEDULE_DTL_DAY_ID],'
				SET @SQL = @SQL + ' [SC_SCHEDULE_DTL_ID],'
				SET @SQL = @SQL + ' [GS_CODE_WEEK_DAY_ID],'
				SET @SQL = @SQL + ' [SC_TCHNG_SLOT_ID],'
				SET @SQL = @SQL + ' [SC_BUILDING_ID],'
				SET @SQL = @SQL + ' [SC_HALL_ID],'
				SET @SQL = @SQL + ' [NOTES]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SC_SCHEDULE_DTL_DAY]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SC_SCHEDULE_DTL_DAY_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  ()
-- Purpose: Updates a record in the SC_SCHEDULE_DTL_DAY table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlDayId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalScScheduleDtlDayId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodeWeekDayId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ScTchngSlotId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@FromTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        
        if(@GsCodeWeekDayId is null)
          select @GsCodeWeekDayId=GS_CODE_WEEK_DAY_ID from SC_SCHEDULE_DTL_DAY where SC_SCHEDULE_DTL_DAY_ID=@ScScheduleDtlDayId
          
        if(@ScTchngSlotId is null)
          select @ScTchngSlotId=SC_TCHNG_SLOT_ID from SC_SCHEDULE_DTL_DAY where SC_SCHEDULE_DTL_DAY_ID=@ScScheduleDtlDayId

              declare @SaStffMember numeric
             select @SaStffMember =SA_STF_MAMBER_ID from SC_SCHEDULE_DTL where SC_SCHEDULE_DTL_ID=@ScScheduleDtlId

        --must check that slot and day and schedule dtl not repeated
        
				UPDATE
					[dbo].[SC_SCHEDULE_DTL_DAY]
				SET
					[SC_SCHEDULE_DTL_DAY_ID] = @ScScheduleDtlDayId
					,[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId
					,[GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId
					,[SC_TCHNG_SLOT_ID] = @ScTchngSlotId
					,[SC_BUILDING_ID] = @ScBuildingId
					,[SC_HALL_ID] = @ScHallId
					,[NOTES] = @Notes
          ,[FROM_TIME] = @FromTime
          ,[TO_TIME] = @ToTime
				WHERE
[SC_SCHEDULE_DTL_DAY_ID] = @OriginalScScheduleDtlDayId 
				
			]]>
      </body>
    </procedure>
    <!--<procedure owner="dbo" name="SC_SCHEDULE_DTL_DAY_GetByScScheduleDtlId">
      <comment>
        <![CDATA[
]]>
      </comment>
      <parameters>
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_DAY_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[GS_CODE_WEEK_DAY_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_TCHNG_SLOT_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_BUILDING_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_HALL_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[NOTES],
          [dbo].[SC_SCHEDULE_DTL_DAY].[From_Time],
          [dbo].[SC_SCHEDULE_DTL_DAY].[To_Time],
          '1',
          '1',
          '1',
          '1',
          SC_TCHNG_SLOT.DESCR_AR,
          '1',
          '1',
          '1',
          SC_TCHNG_SLOT.DESCR_EN
				FROM
					[dbo].[SC_SCHEDULE_DTL_DAY] left outer join SC_TCHNG_SLOT on SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID=[dbo].[SC_SCHEDULE_DTL_DAY].SC_TCHNG_SLOT_ID
				WHERE
					[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>-->
    <!--<procedure owner="dbo" name="SC_SCHEDULE_DTL_DAY_Find">
      <comment>
        <![CDATA[
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@ScScheduleDtlDayId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@GsCodeWeekDayId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@ScTchngSlotId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@ScBuildingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@ScHallId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@FromTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	[dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_DAY_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[GS_CODE_WEEK_DAY_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_TCHNG_SLOT_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_BUILDING_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_HALL_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[NOTES],
          [dbo].[SC_SCHEDULE_DTL_DAY].[From_Time],
          [dbo].[SC_SCHEDULE_DTL_DAY].[To_Time],
          '1',
          '1',
          '1',
          '1',
          SC_TCHNG_SLOT.DESCR_AR,
          '1',
          '1',
          '1',
          SC_TCHNG_SLOT.DESCR_EN
  
    FROM
	[dbo].[SC_SCHEDULE_DTL_DAY] left outer join SC_TCHNG_SLOT on SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID=[dbo].[SC_SCHEDULE_DTL_DAY].SC_TCHNG_SLOT_ID
    WHERE 
	 ([dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_DAY_ID] = @ScScheduleDtlDayId OR @ScScheduleDtlDayId IS NULL)
	AND ([dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId OR @ScScheduleDtlId IS NULL)
	AND ([dbo].[SC_SCHEDULE_DTL_DAY].[GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId OR @GsCodeWeekDayId IS NULL)
	AND ([dbo].[SC_SCHEDULE_DTL_DAY].[SC_TCHNG_SLOT_ID] = @ScTchngSlotId OR @ScTchngSlotId IS NULL)
	AND ([SC_BUILDING_ID] = @ScBuildingId OR @ScBuildingId IS NULL)
	AND ([SC_HALL_ID] = @ScHallId OR @ScHallId IS NULL)
	AND ([NOTES] = @Notes OR @Notes IS NULL)
  AND ([From_Time] = @FromTime OR @FromTime IS NULL)
  AND ([To_Time] = @ToTime OR @ToTime IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	[dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_DAY_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[GS_CODE_WEEK_DAY_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_TCHNG_SLOT_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_BUILDING_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[SC_HALL_ID],
					[dbo].[SC_SCHEDULE_DTL_DAY].[NOTES],
          [dbo].[SC_SCHEDULE_DTL_DAY].[From_Time],
          [dbo].[SC_SCHEDULE_DTL_DAY].[To_Time],
          '1',
          '1',
          '1',
          '1',
          SC_TCHNG_SLOT.DESCR_AR,
          '1',
          '1',
          '1',
          SC_TCHNG_SLOT.DESCR_EN
    FROM
	[dbo].[SC_SCHEDULE_DTL_DAY] left outer join SC_TCHNG_SLOT on SC_TCHNG_SLOT.SC_TCHNG_SLOT_ID=[dbo].[SC_SCHEDULE_DTL_DAY].SC_TCHNG_SLOT_ID
    WHERE 
	 ([dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_DAY_ID] = @ScScheduleDtlDayId AND @ScScheduleDtlDayId is not null)
	OR ([dbo].[SC_SCHEDULE_DTL_DAY].[SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId AND @ScScheduleDtlId is not null)
	OR ([dbo].[SC_SCHEDULE_DTL_DAY].[GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId AND @GsCodeWeekDayId is not null)
	OR ([dbo].[SC_SCHEDULE_DTL_DAY].[SC_TCHNG_SLOT_ID] = @ScTchngSlotId AND @ScTchngSlotId is not null)
	OR ([SC_BUILDING_ID] = @ScBuildingId AND @ScBuildingId is not null)
	OR ([SC_HALL_ID] = @ScHallId AND @ScHallId is not null)
	OR ([NOTES] = @Notes AND @Notes is not null)
  OR ([From_Time] = @FromTime AND @FromTime IS not NULL)
  OR ([To_Time] = @ToTime AND @ToTime IS not NULL)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>-->
    <procedure owner="dbo" name="SC_SCHEDULE_DTL_DAY_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Wednesday, May 26, 2010

-- Created By:  ()
-- Purpose: Gets records from the SC_SCHEDULE_DTL_DAY table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SC_SCHEDULE_DTL_DAY_ID]
					, [SC_SCHEDULE_DTL_ID]
					, [GS_CODE_WEEK_DAY_ID]
					, [SC_TCHNG_SLOT_ID]
					, [SC_BUILDING_ID]
					, [SC_HALL_ID]
					, [NOTES]
          , [FROM_TIME]
          , [TO_TIME]
					FROM [dbo].[SC_SCHEDULE_DTL_DAY] {0}
				)
				SELECT
				       [SC_SCHEDULE_DTL_DAY_ID],
				       [SC_SCHEDULE_DTL_ID],
				       [GS_CODE_WEEK_DAY_ID],
				       [SC_TCHNG_SLOT_ID],
				       [SC_BUILDING_ID],
				       [SC_HALL_ID],
				       [NOTES]
               , [FROM_TIME]
          , [TO_TIME]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SC_SCHEDULE_DTL_DAY] {0};
				
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ED_STUD_COURSE_CHNG table
-- Table Comment: جدول تسجيل لإضافة / حذف / انسحاب طالب من مواد
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_STUD_COURSE_CHNG_ID],
					[ED_CODE_COURSE_CHNG_ID],
					[ED_COURSE_ID],
					[APPROVE_FLG],
					[REQ_DATE],
					[AS_FACULTY_INFO_ID]
				FROM
					[dbo].[ED_STUD_COURSE_CHNG]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_COURSE_CHNG table passing page index and page count parameters
-- Table Comment: جدول تسجيل لإضافة / حذف / انسحاب طالب من مواد
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_COURSE_CHNG_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ED_STUD_COURSE_CHNG_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ED_STUD_COURSE_CHNG_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_COURSE_CHNG]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ED_STUD_COURSE_CHNG_ID], O.[ED_CODE_COURSE_CHNG_ID], O.[ED_COURSE_ID], O.[APPROVE_FLG], O.[REQ_DATE], O.[AS_FACULTY_INFO_ID]
				FROM
				    [dbo].[ED_STUD_COURSE_CHNG] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ED_STUD_COURSE_CHNG_ID] = PageIndex.[ED_STUD_COURSE_CHNG_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_COURSE_CHNG]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_COURSE_CHNG table
-- Table Comment: جدول تسجيل لإضافة / حذف / انسحاب طالب من مواد
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ApproveFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EdCourseSubId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
		    declare @MaxEdStudCourseChngId numeric
        select @MaxEdStudCourseChngId=max(ED_STUD_COURSE_CHNG_ID) from ED_STUD_COURSE_CHNG
        if(@MaxEdStudCourseChngId is null)
           set @MaxEdStudCourseChngId=0
         set @MaxEdStudCourseChngId=@MaxEdStudCourseChngId+1;
				
				if not exists (select 1 from [ED_STUD_COURSE_CHNG] where [ED_CODE_COURSE_CHNG_ID] = @EdCodeCourseChngId
																	and [ED_COURSE_ID] = @EdCourseId
																	and [AS_FACULTY_INFO_ID] = @AsFacultyInfoId
																	and [ED_STUD_SEMESTER_ID]=@EdStudSemesterId
																	and [APPROVE_FLG] = @ApproveFlg)
				begin
        
         begin transaction;
				    INSERT INTO [dbo].[ED_STUD_COURSE_CHNG]
					    (
					    [ED_STUD_COURSE_CHNG_ID]
					    ,[ED_CODE_COURSE_CHNG_ID]
					    ,[ED_COURSE_ID]
					    ,[APPROVE_FLG]
					    ,[REQ_DATE]
					    ,[AS_FACULTY_INFO_ID]
					    ,[ED_STUD_SEMESTER_ID]
              ,[REQ_STATUS_DATE]
					    ,[GS_CODE_REQ_STATUS_ID]
              ,[NOTES]
              ,[ED_COURSE_SUB_ID]
					,[SE_USER_ID]
					,[SE_FORM_ID]
					,[LAST_DATE]
					    )
				    VALUES
					    (
					    @MaxEdStudCourseChngId
					    ,@EdCodeCourseChngId
					    ,@EdCourseId
					    ,@ApproveFlg
					    ,@ReqDate
					    ,@AsFacultyInfoId
					    ,@EdStudSemesterId
              ,@ReqStatusDate
					    ,@GsCodeReqStatusId
              ,@Notes
              ,@EdCourseSubId
					,@SeUserId
					,@SeFormId
					,@LastDate
					    )
              
              
              -- to insert agenda fees on student   
                      declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
                       select @FeeEdStudId= ED_STUD_ID,
                              @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
                              @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
                              @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
                       FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@EdStudSemesterId
                               
                    if(@EdCodeCourseChngId=1)
                        exec  [dbo].[LoadAgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,3,@MaxEdStudCourseChngId
                    else if(@EdCodeCourseChngId=2)
                        exec  [dbo].[LoadAgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,4,@MaxEdStudCourseChngId
                    else if(@EdCodeCourseChngId=3)
                        exec  [dbo].[LoadAgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,5,@MaxEdStudCourseChngId
                    
				IF @@ERROR <> 0
       BEGIN
          ROLLBACK

          RETURN
       END
      commit transaction;
      
      end
      else
      begin
      RAISERROR('Don’t repeat data', 16, 1)
      end
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_COURSE_CHNG table
-- Table Comment: جدول تسجيل لإضافة / حذف / انسحاب طالب من مواد
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdStudCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ApproveFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@Notes" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@EdCourseSubId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
declare @feePayed int;
set @feePayed = 1;			

if(@ApproveFlg=1)
begin

declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
select @FeeEdStudId= ED_STUD_ID,
      @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
      @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
      @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@EdStudSemesterId

declare @ActiveId int;
if(@EdCodeCourseChngId = 1)
	set @ActiveId = 3;
else if(@EdCodeCourseChngId = 2)
	set @ActiveId = 4;
else if(@EdCodeCourseChngId = 3)
	set @ActiveId = 5;

set @feePayed = dbo.FN_IsAgendaFeesOnStudentPayed(@FeeEdStudId,@FeeAsfacultyInfoId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@ActiveId,@EdStudCourseChngId);

end

if(@feePayed=1)
begin

-- Modify the updatable columns
UPDATE
	[dbo].[ED_STUD_COURSE_CHNG]
SET
	[ED_STUD_COURSE_CHNG_ID] = @EdStudCourseChngId
	,[ED_CODE_COURSE_CHNG_ID] = @EdCodeCourseChngId
	,[ED_COURSE_ID] = @EdCourseId
	,[APPROVE_FLG] = @ApproveFlg
	,[REQ_DATE] = @ReqDate
	,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
	,[ED_STUD_SEMESTER_ID] = @EdStudSemesterId
  ,[REQ_STATUS_DATE] = @ReqStatusDate
	,[GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId
  ,[NOTES] = @Notes
  ,[ED_COURSE_SUB_ID] = @EdCourseSubId
					,[SE_USER_ID] = @SeUserId
					,[SE_FORM_ID] = @SeFormId
					,[LAST_DATE] = @LastDate
WHERE
[ED_STUD_COURSE_CHNG_ID] = @EdStudCourseChngId 

end
else
begin
	-- error
	RAISERROR('Check Fees Payed on Student.',16,-1) 
end 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_CHNG_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_STUD_COURSE_CHNG table
-- Table Comment: جدول تسجيل لإضافة / حذف / انسحاب طالب من مواد
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseChngId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				     declare @ED_STUD_SEMESTER_ID numeric,@ED_CODE_COURSE_CHNG_ID numeric
             
             select @ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER_ID,
             @ED_CODE_COURSE_CHNG_ID=ED_CODE_COURSE_CHNG_ID
             from [dbo].[ED_STUD_COURSE_CHNG]
               	WHERE
					       [ED_STUD_COURSE_CHNG_ID] = @EdStudCourseChngId
          
           begin transaction;
          
              -- to delete agenda fees on student if available  
                    declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
                     select @FeeEdStudId= ED_STUD_ID,
                            @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
                            @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
                            @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
                     FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID
                     
                 
                  if(@ED_CODE_COURSE_CHNG_ID=1)
                      exec  [dbo].[Delete_AgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,3, @EdStudCourseChngId
                  else if(@ED_CODE_COURSE_CHNG_ID=2)
                      exec  [dbo].[Delete_AgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,4, @EdStudCourseChngId
                  else if(@ED_CODE_COURSE_CHNG_ID=3)
                      exec  [dbo].[Delete_AgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,5, @EdStudCourseChngId
                    
					
          
             DELETE FROM [dbo].[ED_STUD_COURSE_CHNG] WITH (ROWLOCK) 
			       	  WHERE
					         [ED_STUD_COURSE_CHNG_ID] = @EdStudCourseChngId
                 
            IF @@ERROR <> 0
         BEGIN
            ROLLBACK

            RETURN
         END
        commit transaction;     
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SA_OFFICE_HOUR_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SA_OFFICE_HOUR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@SaOfficeHourId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@GsCodeWeekDayId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@FromTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@ToTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SA_OFFICE_HOUR_ID]
	, [SA_STF_MEMBER_ID]
	, [dbo].[SA_OFFICE_HOUR].[GS_CODE_WEEK_DAY_ID]
	, [FROM_TIME]
	, [TO_TIME]
	, [ED_ACAD_YEAR_ID]
	, [ED_CODE_SEMESTER_ID]
  ,GS_CODE_WEEK_DAY.DESCR_AR
  ,GS_CODE_WEEK_DAY.DESCR_EN
    FROM
	[dbo].[SA_OFFICE_HOUR] left outer join GS_CODE_WEEK_DAY on GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID=[dbo].[SA_OFFICE_HOUR].GS_CODE_WEEK_DAY_ID
    WHERE 
	 ([SA_OFFICE_HOUR_ID] = @SaOfficeHourId OR @SaOfficeHourId IS NULL)
	AND ([SA_STF_MEMBER_ID] = @SaStfMemberId OR @SaStfMemberId IS NULL)
	AND ([dbo].[SA_OFFICE_HOUR].[GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId OR @GsCodeWeekDayId IS NULL)
	AND ([FROM_TIME] = @FromTime OR @FromTime IS NULL)
	AND ([TO_TIME] = @ToTime OR @ToTime IS NULL)
	AND ([ED_ACAD_YEAR_ID] = @EdAcadYearId OR @EdAcadYearId IS NULL)
	AND ([ED_CODE_SEMESTER_ID] = @EdCodeSemesterId OR @EdCodeSemesterId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SA_OFFICE_HOUR_ID]
	, [SA_STF_MEMBER_ID]
	, [dbo].[SA_OFFICE_HOUR].[GS_CODE_WEEK_DAY_ID]
	, [FROM_TIME]
	, [TO_TIME]
	, [ED_ACAD_YEAR_ID]
	, [ED_CODE_SEMESTER_ID]
  ,GS_CODE_WEEK_DAY.DESCR_AR
  ,GS_CODE_WEEK_DAY.DESCR_EN
    FROM
	[dbo].[SA_OFFICE_HOUR] left outer join GS_CODE_WEEK_DAY on GS_CODE_WEEK_DAY.GS_CODE_WEEK_DAY_ID=[dbo].[SA_OFFICE_HOUR].GS_CODE_WEEK_DAY_ID
    WHERE 
	 ([SA_OFFICE_HOUR_ID] = @SaOfficeHourId AND @SaOfficeHourId is not null)
	OR ([SA_STF_MEMBER_ID] = @SaStfMemberId AND @SaStfMemberId is not null)
	OR ([dbo].[SA_OFFICE_HOUR].[GS_CODE_WEEK_DAY_ID] = @GsCodeWeekDayId AND @GsCodeWeekDayId is not null)
	OR ([FROM_TIME] = @FromTime AND @FromTime is not null)
	OR ([TO_TIME] = @ToTime AND @ToTime is not null)
	OR ([ED_ACAD_YEAR_ID] = @EdAcadYearId AND @EdAcadYearId is not null)
	OR ([ED_CODE_SEMESTER_ID] = @EdCodeSemesterId AND @EdCodeSemesterId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SYSTEM_PARAM_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SYSTEM_PARAM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[SYSTEM_PARAM_ID],
					[BUILD_STUD_CODE],
					[ALLOW_COURSE_INSTANCE],
					[ALLOW_COURSE_WAITING]
				FROM
					[dbo].[SYSTEM_PARAM]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SYSTEM_PARAM_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SYSTEM_PARAM table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [SYSTEM_PARAM_ID] numeric(5, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([SYSTEM_PARAM_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [SYSTEM_PARAM_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[SYSTEM_PARAM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[SYSTEM_PARAM_ID], O.[BUILD_STUD_CODE], O.[ALLOW_COURSE_INSTANCE], O.[ALLOW_COURSE_WAITING]
				FROM
				    [dbo].[SYSTEM_PARAM] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[SYSTEM_PARAM_ID] = PageIndex.[SYSTEM_PARAM_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SYSTEM_PARAM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SYSTEM_PARAM_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SYSTEM_PARAM table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@SystemParamId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@BuildStudCode" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@AllowCourseInstance" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@AllowCourseWaiting" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SYSTEM_PARAM_ID]
	, [BUILD_STUD_CODE]
	, [ALLOW_COURSE_INSTANCE]
	, [ALLOW_COURSE_WAITING]
    FROM
	[dbo].[SYSTEM_PARAM]
    WHERE 
	 ([SYSTEM_PARAM_ID] = @SystemParamId OR @SystemParamId IS NULL)
	AND ([BUILD_STUD_CODE] = @BuildStudCode OR @BuildStudCode IS NULL)
	AND ([ALLOW_COURSE_INSTANCE] = @AllowCourseInstance OR @AllowCourseInstance IS NULL)
	AND ([ALLOW_COURSE_WAITING] = @AllowCourseWaiting OR @AllowCourseWaiting IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SYSTEM_PARAM_ID]
	, [BUILD_STUD_CODE]
	, [ALLOW_COURSE_INSTANCE]
	, [ALLOW_COURSE_WAITING]
    FROM
	[dbo].[SYSTEM_PARAM]
    WHERE 
	 ([SYSTEM_PARAM_ID] = @SystemParamId AND @SystemParamId is not null)
	OR ([BUILD_STUD_CODE] = @BuildStudCode AND @BuildStudCode is not null)
	OR ([ALLOW_COURSE_INSTANCE] = @AllowCourseInstance AND @AllowCourseInstance is not null)
	OR ([ALLOW_COURSE_WAITING] = @AllowCourseWaiting AND @AllowCourseWaiting is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SYSTEM_PARAM_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SYSTEM_PARAM table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [SYSTEM_PARAM_ID] numeric(5, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [SYSTEM_PARAM_ID] )
				SELECT TOP {3} [SYSTEM_PARAM_ID]
				FROM [dbo].[SYSTEM_PARAM] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[SYSTEM_PARAM_ID], O.[BUILD_STUD_CODE], O.[ALLOW_COURSE_INSTANCE], O.[ALLOW_COURSE_WAITING]
				FROM
				    [dbo].[SYSTEM_PARAM] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[SYSTEM_PARAM_ID] = PageIndex.[SYSTEM_PARAM_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SYSTEM_PARAM] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_REG_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_COURSE_REG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@RepeatFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsApproved" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ApproveDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodePassFailId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AddGpaFlg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@IncompFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@HideFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@HideReason" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@EdCourseSubId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@CoursePoint" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseDegree" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[

 



      begin transaction;   
       declare @AsFacultyInfoIdP numeric,@EdCodeSemesterIdP numeric,@EdStudId numeric,@EdCodeSemesterId numeric,@EdAcadYearId numeric
       
       select @EdStudId= ED_STUD_SEMESTER.ED_STUD_ID , @EdAcadYearId= ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,@EdCodeSemesterId= ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID from ED_STUD_SEMESTER where ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = @EdStudSemesterId;
       
				if(@AsFacultyInfoId is null or @AsFacultyInfoId=0 or @AsFacultyInfoId=0.0)
        begin
            select @AsFacultyInfoIdP=AS_FACULTY_INFO_ID from ED_STUD_FACULTY where ED_STUD_ID=@EdStudId and IS_ACTIVE=1
        end
        else
          set  @AsFacultyInfoIdP= @AsFacultyInfoId
        
        
        if(@EdCodeSemesterId is null or @EdCodeSemesterId=0 or @EdCodeSemesterId=0.0)
        begin
           SELECT top 1 @EdCodeSemesterIdP=ED_SEMESTER_OPEN.ED_CODE_SEMESTER_ID
                FROM         ED_SEMESTER_OPEN INNER JOIN
                             ENTITY_MAIN ON ED_SEMESTER_OPEN.ENT_MAIN_ID = ENTITY_MAIN.ENT_MAIN_ID
                WHERE        (ENTITY_MAIN.AS_FACULTY_INFO_ID = @AsFacultyInfoIdP) AND
                             (ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID = 2 or ENTITY_MAIN.ENT_CODE_ENTITY_TYPE_ID=14) AND
                             (ED_SEMESTER_OPEN.IS_CURRENT = 1) AND 
                             (ED_SEMESTER_OPEN.ED_ACAD_YEAR_ID = @EdAcadYearId)
          
        end
        else
           set @EdCodeSemesterIdP=@EdCodeSemesterId;
           
       
        
        
       DECLARE @ED_STUD_SEMESTER_ID numeric,@MaxED_STUD_SEMESTER_ID NUMERIC,
                @ED_STUD_STATE_ID NUMERIC,@MaxED_STUD_STATE_ID NUMERIC,
                @ED_STUD_COURSE_REG_ID NUMERIC,@MaxED_STUD_COURSE_REG_ID NUMERIC
                
       --declare @errorr nvarchar(max)
         -- set @errorr='faculty='+@AsFacultyInfoId+'Semester='+@EdCodeSemesterId;
         --     
              
            -------------   RAISERROR(@errorr,16,-1)
					         --   RETURN
                   
                
                      
        select @ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER_ID from ED_STUD_SEMESTER WHERE ED_STUD_ID=@EdStudId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterIdP AND
                    ED_ACAD_YEAR_ID=@EdAcadYearId AND AS_FACULTY_INFO_ID=@AsFacultyInfoIdP
                    
         IF(@EdStudSemesterId IS NOT NULL and @EdStudSemesterId!=0)
             SET @ED_STUD_SEMESTER_ID=@EdStudSemesterId
            
            
                    
         IF(@ED_STUD_SEMESTER_ID IS NULL)
          BEGIN
          rollback transaction;
                     RAISERROR('(No_Stud_Semester)',16,-1)
					            RETURN 
                      --select @MaxED_STUD_SEMESTER_ID =max(ED_STUD_SEMESTER_ID)from ED_STUD_SEMESTER
                      --if(@MaxED_STUD_SEMESTER_ID is null)
                         --set @MaxED_STUD_SEMESTER_ID =0;
                      -- set @MaxED_STUD_SEMESTER_ID =@MaxED_STUD_SEMESTER_ID +1;
              
         	        -- INSERT INTO [dbo].[ED_STUD_SEMESTER]
				            --(
				             --  [ED_STUD_SEMESTER_ID],[ED_CODE_SEMESTER_ID],[ED_STUD_ID],[ED_ACAD_YEAR_ID]
				              --,[AS_FACULTY_INFO_ID],[IS_LAST]
				           -- )
			             -- VALUES
				           -- (
				              -- @MaxED_STUD_SEMESTER_ID,@EdCodeSemesterId,@EdStudId,@EdAcadYearId
				            --  ,@AsFacultyInfoId,1
				          --  )
                  --SET @ED_STUD_SEMESTER_ID=@MaxED_STUD_SEMESTER_ID;
          END
          
          
         -- SELECT @ED_STUD_STATE_ID=ED_STUD_STATE.ED_STUD_STATE_ID FROM  ED_STUD_STATE INNER JOIN  ED_STUD_SEMESTER ON
          --ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=ED_STUD_STATE.ED_STUD_SEMESTER_ID
          --WHERE
              -- ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId AND ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND
              -- ED_STUD_SEMESTER.ED_ACAD_YEAR_ID=@EdAcadYearId AND ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFacultyInfoId
              -- AND ENT_MAIN_ID=@EntityMainId
          
          
         -- IF(@ED_STUD_STATE_ID IS NULL)
            --BEGIN
                -- select @MaxED_STUD_STATE_ID =max(ED_STUD_STATE_ID)from ED_STUD_STATE
                  -- if(@MaxED_STUD_STATE_ID is null)
                    -- set @MaxED_STUD_STATE_ID =0;
                   --set @MaxED_STUD_STATE_ID =@MaxED_STUD_STATE_ID +1;
                   
                   
                  -- INSERT INTO [dbo].[ED_STUD_STATE]
					         -- (
					         --   [ED_STUD_STATE_ID],[ED_STUD_SEMESTER_ID],[ENT_MAIN_ID],
					          --  [AS_FACULTY_INFO_ID],IS_DECLARED
					         -- )
				         -- VALUES
					        --  (
					         --   @MaxED_STUD_STATE_ID,@ED_STUD_SEMESTER_ID,@EntityMainId,
					         --    @AsFacultyInfoId,0
					         -- )
                   
                  -- SET @ED_STUD_STATE_ID=@MaxED_STUD_STATE_ID
           -- END



     SELECT @ED_STUD_COURSE_REG_ID=ED_STUD_COURSE_REG_ID FROM ED_STUD_COURSE_REG
     where ED_COURSE_ID=@EdCourseId AND ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID
     
     IF(@ED_STUD_COURSE_REG_ID IS NULL)
       BEGIN
          declare @MaxEdStudCourseRegId numeric
          select @MaxEdStudCourseRegId =max(ED_STUD_COURSE_REG_ID)from ED_STUD_COURSE_REG
          if(@MaxEdStudCourseRegId is null)
           set @MaxEdStudCourseRegId =0;
           
           set @MaxEdStudCourseRegId =@MaxEdStudCourseRegId +1;
           
           
            -- check on Equiv subjects  المقررات المتعارضة
                      if exists( select 'a' from ED_COURSE_EQUIV where 
					              ED_COURSE_ID=@EdCourseId and exists
					               (
						              select 'b' from [dbo].[ED_STUD_COURSE_REG] 
                          where
						              [dbo].[ED_STUD_COURSE_REG].ED_COURSE_ID =ED_COURSE_EQUIV.ED_EQUIV_COURSE_ID
						              and [dbo].[ED_STUD_COURSE_REG].[ED_STUD_SEMESTER_ID]=@ED_STUD_SEMESTER_ID
					                )
					              )
                        BEGIN
                        rollback transaction;
                           RAISERROR('(ED_COURSE_EQUIV)',16,-1)
					                    RETURN 
                        END
                        
                         if exists( select 'a' from ED_COURSE_EQUIV where 
					              ED_EQUIV_COURSE_ID=@EdCourseId and exists
					               (
						              select 'b' from [dbo].[ED_STUD_COURSE_REG] 
                                     where
						              [dbo].[ED_STUD_COURSE_REG].ED_COURSE_ID =ED_COURSE_EQUIV.ED_COURSE_ID
						              and [dbo].[ED_STUD_COURSE_REG].[ED_STUD_SEMESTER_ID]=@ED_STUD_SEMESTER_ID
					                )
					              )
                        BEGIN
                        rollback transaction;
                           RAISERROR('(ED_COURSE_EQUIV)',16,-1)
					                    RETURN 
                        END
                        
                        
                        
            --check on academic load       
                  -- التحقق من شروط العبء الدراسى
                      declare @MIN_LOAD numeric(8,3),@MAX_LOAD numeric(8,3),@EXCESS_LOAD numeric(8,3),@ADDED_LOAD numeric(8,3) 
                       declare @Sum_Subjects_Hours numeric(11,3),@TOTAL_MAX_LOAD numeric(9,3),@ED_CODE_LOAD_TYPE_ID numeric,
                       @ED_CODE_SEMESTER_TYPE_ID numeric;
                       
                       select @ED_CODE_SEMESTER_TYPE_ID=ED_CODE_SEMESTER_TYPE_ID from ED_CODE_SEMESTER 
                       where ED_CODE_SEMESTER_ID=@EdCodeSemesterIdP;
                       

                      select @MIN_LOAD=MIN_CH,
                      @MAX_LOAD=MAX_CH from
                      [dbo].[ComputeAcademicLoad](@ED_STUD_SEMESTER_ID)
                      
 
                        
                       if(@MIN_LOAD is null or @MAX_LOAD is null)
                           begin
                           rollback transaction;
                              RAISERROR('(No_Policy_Load_For_Student)',16,-1)
                                   return
                              
                           end

                        set @TOTAL_MAX_LOAD=@MAX_LOAD;

                        select @Sum_Subjects_Hours =SUM(ED_COURSE.CREDIT_HOURS)
                             FROM    
                                      ED_STUD_COURSE_REG  INNER JOIN
                                      ED_COURSE ON ED_STUD_COURSE_REG.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                             WHERE    (ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = @ED_STUD_SEMESTER_ID)AND
                                      (ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID=1)
                             
                         if(@TOTAL_MAX_LOAD is null)
                          set @TOTAL_MAX_LOAD=0;
           
                        
                       --get curent course credit hours
                          declare @CourseCreditHours numeric(8,3),@CoReqCourseCreditHours numeric(8,3)
                          Select @CourseCreditHours=CREDIT_HOURS from ED_COURSE where
                          ED_COURSE_ID=@EdCourseId
                       
                          

                          
                             select @CoReqCourseCreditHours=sum(ed_course.CREDIT_HOURS)
                            from ED_COURSE_COREQ T1
                            inner join ED_COURSE_COREQ T2 on T1.ED_COURSE_GROUP=T2.ED_COURSE_GROUP
                            inner join ED_COURSE on t2.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
                            where T1.ED_COURSE_ID=@EdCourseId and T1.IS_MAIN=1
                            and T2.IS_MAIN=0
                             and not exists(select 'a' from [dbo].[ED_STUD_COURSE_REG] inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
                             where ED_COURSE_ID=T2.ED_COURSE_ID
                             and ED_STUD_SEMESTER.ed_stud_id = @EdStudId)
                              
                             set @Sum_Subjects_Hours=isnull(@Sum_Subjects_Hours,0)+isnull(@CourseCreditHours,0)+isnull(@CoReqCourseCreditHours,0);  

               
                        if(@Sum_Subjects_Hours>@TOTAL_MAX_LOAD)
                               begin
                               rollback transaction;
                                   RAISERROR('(MAX_LOAD)',16,-1)
                                   return
                                end
                             
                          
                      -- نهاية التحقق من شروط العبء الدراسى    
            
            
         declare @count int
            SELECT  @count = COUNT(ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID)
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_CODE_GRADING ON ED_STUD_COURSE_REG.ED_CODE_GRADING_ID = ED_CODE_GRADING.ED_CODE_GRADING_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                      where ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId
                      and ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID=1
                      and ED_STUD_COURSE_REG.ED_COURSE_ID=@EdCourseId
                      and ED_CODE_GRADING.GRAD_ORDER<=6;
                      
        if(@count>0)
                               begin
                               rollback transaction;
                                   RAISERROR('(Passed befor with Grade >= C)',16,-1)
                                   return
                                end
            
          
          ------
          
          declare @CourseCurrentAcadYear numeric(5,0),@CourseCurrentSemester numeric(3,0)
select @CourseCurrentAcadYear=ED_ACAD_YEAR_ID ,@CourseCurrentSemester = ED_CODE_SEMESTER_ID from ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID = @ED_STUD_SEMESTER_ID

declare @RegCount int,@MaxStudCount int

SELECT  @RegCount= COUNT( distinct ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID) ,
		@MaxStudCount=ED_OFFERING_COURSE.MAX_STUD_COUNT
FROM         ED_OFFERING INNER JOIN
                      ED_OFFERING_COURSE ON ED_OFFERING.ED_OFFERING_ID = ED_OFFERING_COURSE.ED_OFFERING_ID INNER JOIN
                      ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID INNER JOIN
                      ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID ON 
                      ED_COURSE.ED_COURSE_ID = ED_STUD_COURSE_REG.ED_COURSE_ID INNER JOIN
                      ED_ACAD_YEAR ON ED_OFFERING.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID AND 
                      ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_OFFERING.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID AND 
                      ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID
WHERE     (ED_STUD_COURSE_REG.ED_COURSE_ID = @EdCourseId)
 AND (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @CourseCurrentAcadYear) 
 AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @CourseCurrentSemester)
 AND (ED_OFFERING.ED_ACAD_YEAR_ID = @CourseCurrentAcadYear) 
 AND (ED_OFFERING.ED_CODE_SEMESTER_ID = @CourseCurrentSemester)
group by ED_STUD_COURSE_REG.ED_COURSE_ID,ED_OFFERING_COURSE.MAX_STUD_COUNT

if(@MaxStudCount is not null and @RegCount>=@MaxStudCount)
begin
                               rollback transaction;
                                   RAISERROR('(can not register in course, it is full)',16,-1)
                                   return
                                end
          
          
            --insert subject itself
 
                    set @EntPolicyAssessHdrId = [dbo].fn_GetCourseAssessHdrId(@ED_STUD_SEMESTER_ID,@EdCourseId);
                    set @EntPolicyGradingHdrId = [dbo].fn_GetCourseGradingHdrId(@ED_STUD_SEMESTER_ID,@EdCourseId);
 
				                INSERT INTO [dbo].[ED_STUD_COURSE_REG]
					                (
				  	                 [ED_STUD_COURSE_REG_ID],[ED_COURSE_ID],[REG_DATE],[AUDIT_FLG],[REPEAT_FLG],
				  	                 [IS_LAST],[IS_APPROVED],[APPROVE_DATE],[AS_FACULTY_INFO_ID],
				  	                 [ED_CODE_COURSE_STATUS_ID],ED_STUD_SEMESTER_ID,
                             ENT_POLICY_GRADING_HDR_ID,ADD_GPA_FLG,ENT_POLICY_ASSESS_HDR_ID,ED_COURSE_SUB_ID,SE_USER_ID,SE_FORM_ID,LAST_DATE
					                )
				                VALUES
					                (
				 	                   @MaxEdStudCourseRegId,@EdCourseId
					                  ,@RegDate,@AuditFlg,@RepeatFlg,@IsLast
					                  ,@IsApproved,@ApproveDate,@AsFacultyInfoIdP,@EdCodeCourseStatusId,@ED_STUD_SEMESTER_ID,
                            @EntPolicyGradingHdrId,@AddGpaFlg,@EntPolicyAssessHdrId,@EdCourseSubId,@SeUserId,@SeFormId,@LastDate
					                )
                          
                          
                          
                          
                          
                          
                       -- to insert agenda fees on student   
                          declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
                           select @FeeEdStudId= ED_STUD_ID,
                                  @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
                                  @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
                                  @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
                           FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID
                          exec  [dbo].[LoadAgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,2,0
                          -- to maintain is_last flag and repeat flag
                          exec [dbo].[Sp_Maint_StudCourseReg] @FeeEdStudId,@EdCourseId 
                    
              --INSERT ALL CONTINOUS COURSES
                 declare @ContinousCount numeric
                 select @ContinousCount=count(*)
                      from ED_COURSE_COREQ T1
                      inner join ED_COURSE_COREQ T2 on T1.ED_COURSE_GROUP=T2.ED_COURSE_GROUP
                      where T1.ED_COURSE_ID=@EdCourseId and T1.IS_MAIN=1
                      and T2.IS_MAIN=0
                       and not exists(select 'a' from [dbo].[ED_STUD_COURSE_REG] inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
                       where ED_COURSE_ID=T2.ED_COURSE_ID
                       and ED_STUD_SEMESTER.ed_stud_id = @EdStudId)
              
                        
					              declare @TempCoreqCourseId numeric
                        DECLARE		Coreq_Courses_CURSOR CURSOR FOR
                      SELECT T2.ED_COURSE_ID
                      from ED_COURSE_COREQ T1
                      inner join ED_COURSE_COREQ T2 on T1.ED_COURSE_GROUP=T2.ED_COURSE_GROUP
                      where T1.ED_COURSE_ID=@EdCourseId and T1.IS_MAIN=1
                      and T2.IS_MAIN=0
                       and not exists(select 'a' from [dbo].[ED_STUD_COURSE_REG] inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
                       where ED_COURSE_ID=T2.ED_COURSE_ID
                       and ED_STUD_SEMESTER.ed_stud_id = @EdStudId)
                					                
                					                
				                  OPEN Coreq_Courses_CURSOR
				                  FETCH NEXT FROM Coreq_Courses_CURSOR INTO @TempCoreqCourseId
				                  WHILE(@@FETCH_STATUS <> -1)
				                  BEGIN 
				                       exec [dbo].[Sp_Maint_StudCourseReg] @FeeEdStudId,@TempCoreqCourseId 
			                      FETCH NEXT FROM Coreq_Courses_CURSOR INTO @TempCoreqCourseId
				                  end
				                  CLOSE Coreq_Courses_CURSOR
				                  DEALLOCATE Coreq_Courses_CURSOR
            
            
					             INSERT INTO [dbo].[ED_STUD_COURSE_REG]
					              (
				  	               [ED_STUD_COURSE_REG_ID],[ED_COURSE_ID]
					                ,[REG_DATE],[AUDIT_FLG],[REPEAT_FLG],[IS_LAST]
				  	              ,[IS_APPROVED],[APPROVE_DATE],[AS_FACULTY_INFO_ID],
				  	              [ED_CODE_COURSE_STATUS_ID],ED_STUD_SEMESTER_ID,SE_USER_ID,SE_FORM_ID,LAST_DATE
                          
					              )
					             SELECT @MaxEdStudCourseRegId+ROW_NUMBER() over(order by
					              (
					                  T2.[ED_COURSE_COREQ_ID]))  as rownum  ,
					                 T2.ED_COURSE_ID
					                ,@RegDate,@AuditFlg,0,@IsLast
					                ,@IsApproved,@ApproveDate,@AsFacultyInfoIdP,@EdCodeCourseStatusId,
					                @ED_STUD_SEMESTER_ID,@SeUserId,@SeFormId,@LastDate
                      from ED_COURSE_COREQ T1
                      inner join ED_COURSE_COREQ T2 on T1.ED_COURSE_GROUP=T2.ED_COURSE_GROUP
                      where T1.ED_COURSE_ID=@EdCourseId and T1.IS_MAIN=1
                      and T2.IS_MAIN=0
                       and not exists(select 'a' from [dbo].[ED_STUD_COURSE_REG] inner join ED_STUD_SEMESTER on ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID
                       where ED_COURSE_ID=T2.ED_COURSE_ID
                       and ED_STUD_SEMESTER.ed_stud_id = @EdStudId)
                           
                      
				END					
		IF @@ERROR <> 0
 BEGIN
    ROLLBACK

    RETURN
 END
commit transaction;			
 --raise error to know that continous subjects are aloaded
                      If(@ContinousCount >0)
                       begin
                       rollback transaction;
                        RAISERROR('(Found_COURSE_COREQ)',16,-1)
					                    RETURN 
                       end
			
			
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_REG_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_COURSE_REG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AuditFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@RepeatFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
       
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseStatusId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CourseDegree" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CoursePoint" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@GsCodePassFailId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@AddGpaFlg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@IncompFlg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@HideFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@HideReason" type="nvarchar" direction="Input" size="250" precision="0" scale="0" param="(250)" nulldefault=""/>
        <parameter name="@EdCourseSubId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_COURSE_REG]
				SET
					[ED_STUD_SEMESTER_ID] = @EdStudSemesterId
					,[ED_COURSE_ID] = @EdCourseId
					,[REG_DATE] = @RegDate
					,[AUDIT_FLG] = @AuditFlg
					,[REPEAT_FLG] = @RepeatFlg
					,[IS_LAST] = @IsLast
			
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[ED_CODE_COURSE_STATUS_ID] = @EdCodeCourseStatusId
          ,[ED_CODE_GRADING_ID]=@EdCodeGradingId
          ,[COURSE_DEGREE]=@CourseDegree
          ,[COURSE_POINT]=@CoursePoint
          ,ENT_POLICY_GRADING_HDR_ID=@EntPolicyGradingHdrId
          ,GS_CODE_PASS_FAIL_ID=@GsCodePassFailId
          ,ENT_POLICY_ASSESS_HDR_ID=@EntPolicyAssessHdrId
          ,ADD_GPA_FLG=@AddGpaFlg
          ,INCOMP_FLG = case @EdCodeCourseStatusId when 3 then 1 else 0 end
          ,[HIDE_FLG] = @HideFlg
          ,[HIDE_REASON] = @HideReason
          ,[ED_COURSE_SUB_ID] = @EdCourseSubId
          ,[SE_USER_ID] = @SeUserId
					,[SE_FORM_ID] = @SeFormId
					,[LAST_DATE] = @LastDate
				WHERE
[ED_STUD_COURSE_REG_ID] = @EdStudCourseRegId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_COURSE_REG_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_STUD_COURSE_REG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
      
      
      DECLARE @ED_STUD_ID NUMERIC,@ED_STUD_SEMESTER_ID NUMERIC,@ED_COURSE_ID NUMERIC
      
      SELECT     @ED_COURSE_ID=ED_STUD_COURSE_REG.ED_COURSE_ID,
                 @ED_STUD_SEMESTER_ID=ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID,
                 @ED_STUD_ID=ED_STUD_SEMESTER.ED_STUD_ID
      FROM       ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                WHERE ED_STUD_COURSE_REG.ED_STUD_COURSE_REG_ID=@EdStudCourseRegId
                
     begin transaction; 
     
     --IN COURSE IS CONTINOUS TO ANOTHER course and another vourse is the main so can't delete second course
         if exists(select 'a' from ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                    where 
                      ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID and
                      ED_STUD_SEMESTER.ED_STUD_ID=@ED_STUD_ID and exists
                       ( 
                           select 'a' from ED_COURSE_COREQ T1 inner join ED_COURSE_COREQ T2 on
                           T1.ED_COURSE_GROUP=T2.ED_COURSE_GROUP
                           where T1.ed_course_id=ED_STUD_COURSE_REG.ed_course_id
                           and T1.IS_MAIN=1 and T2.ed_course_id=@ED_COURSE_ID and
                           T2.IS_MAIN=0
                        )
                   )
                   BEGIN
                       RAISERROR('(COS_DELETE_COURSE_REG_COREQ)',16,-1)
					                    RETURN 
                   END

     
          DELETE FROM ED_STUD_GROUP WHERE
          ED_STUD_ID=@ED_STUD_ID AND ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID AND EXISTS
          (SELECT 'A' FROM SC_SCHEDULE_DTL
          INNER JOIN SC_SCHEDULE_HDR ON SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID=SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID
          INNER JOIN ED_OFFERING_COURSE ON ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID=SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID
          
          WHERE SC_SCHEDULE_DTL_ID=ED_STUD_GROUP.SC_SCHEDULE_DTL_ID
          AND ED_OFFERING_COURSE.ED_COURSE_ID=@ED_COURSE_ID)
          
      

      
				DELETE FROM [dbo].[ED_STUD_COURSE_REG] WITH (ROWLOCK) 
				WHERE
					[ED_STUD_COURSE_REG_ID] = @EdStudCourseRegId
          
          exec [dbo].[Sp_Maint_StudCourseReg] @ED_STUD_ID,@ED_COURSE_ID
         
          
           -- to delete agenda fees on student if available  
                    declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
                     select @FeeEdStudId= ED_STUD_ID,
                            @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
                            @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
                            @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
                     FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID
                    exec  [dbo].[Delete_AgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,2,0
                    
          
  IF @@ERROR <> 0
 BEGIN
    ROLLBACK

    RETURN
 END
commit transaction;
					
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_GROUP_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ED_STUD_GROUP table
-- Table Comment: جدول مجموعات و سكاشن طالب في فصل دراسي
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_STUD_GROUP_ID],
					[STUD_ORDER],
					[SC_SCHEDULE_DTL_ID],
					[ED_STUD_ID],
          AS_FACULTY_INFO_ID,
          ED_STUD_SEMESTER_ID,
          ED_STUD_COURSE_REG_ID
				FROM
					[dbo].[ED_STUD_GROUP]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GROUP_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_GROUP table passing page index and page count parameters
-- Table Comment: جدول مجموعات و سكاشن طالب في فصل دراسي
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_GROUP_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ED_STUD_GROUP_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ED_STUD_GROUP_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_GROUP]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ED_STUD_GROUP_ID], O.[ED_STUD_STATE_ID], O.[STUD_ORDER], O.[SC_SCHEDULE_DTL_ID], O.[ED_STUD_ID]
				FROM
				    [dbo].[ED_STUD_GROUP] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ED_STUD_GROUP_ID] = PageIndex.[ED_STUD_GROUP_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_GROUP]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <!--<procedure owner="dbo" name="ED_STUD_GROUP_Insert" grant="">
      <comment>
        <![CDATA[/* Created By:  ()
                    Purpose: Inserts a record into the ED_STUD_GROUP table
                    Table Comment: جدول مجموعات و سكاشن طالب في فصل دراسي
                */
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudGroupId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@StudOrder" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ScScheduleDtlId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
      
      
       declare @PrevEdStudGroupId numeric,@ScSchedulehdrId numeric;
      select @ScSchedulehdrId=SC_SCHEDULE_HDR_ID from SC_SCHEDULE_Dtl where
      SC_SCHEDULE_Dtl_ID=@ScScheduleDtlId
      
      /*check first if ther are intersection in the day and slot with other subject*/
      declare @CourseCode nvarchar(30)
         SELECT       @CourseCode=ED_COURSE.COURSE_CODE
          FROM         SC_SCHEDULE_DTL INNER JOIN
              SC_SCHEDULE_DTL_DAY ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = SC_SCHEDULE_DTL_DAY.SC_SCHEDULE_DTL_ID INNER JOIN
              ED_STUD_GROUP ON SC_SCHEDULE_DTL.SC_SCHEDULE_DTL_ID = ED_STUD_GROUP.SC_SCHEDULE_DTL_ID INNER JOIN
              SC_SCHEDULE_HDR ON SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID = SC_SCHEDULE_HDR.SC_SCHEDULE_HDR_ID INNER JOIN
              ED_OFFERING_COURSE ON SC_SCHEDULE_HDR.ED_OFFERING_COURSE_ID = ED_OFFERING_COURSE.ED_OFFERING_COURSE_ID INNER JOIN
              ED_COURSE ON ED_OFFERING_COURSE.ED_COURSE_ID = ED_COURSE.ED_COURSE_ID
	        where 
	        ED_STUD_GROUP.ED_STUD_COURSE_REG_ID=@EdStudCourseRegId and
	        SC_SCHEDULE_DTL.SC_SCHEDULE_HDR_ID!=@ScSchedulehdrId
	        and exists
	        (
	           select 'a' from SC_SCHEDULE_DTL_DAY t1 where
	           t1.SC_SCHEDULE_DTL_ID=@ScScheduleDtlId and 
             t1.GS_CODE_WEEK_DAY_ID=SC_SCHEDULE_DTL_DAY.GS_CODE_WEEK_DAY_ID
	           and t1.SC_TCHNG_SLOT_ID=SC_SCHEDULE_DTL_DAY.SC_TCHNG_SLOT_ID
	        )
          
      
       if(@CourseCode is not null)
        begin
          set @CourseCode='Course_Code='+@CourseCode
            RAISERROR(@CourseCode,16,-1)
            RETURN
        end
      
    
      
 
      select  @PrevEdStudGroupId =[dbo].[ED_STUD_GROUP].ED_STUD_GROUP_ID from
      [dbo].[ED_STUD_GROUP] inner join SC_SCHEDULE_Dtl 
      on SC_SCHEDULE_Dtl.SC_SCHEDULE_Dtl_id=[dbo].[ED_STUD_GROUP].SC_SCHEDULE_Dtl_id
      where SC_SCHEDULE_Dtl.SC_SCHEDULE_HDR_ID=@ScSchedulehdrId
      and [dbo].[ED_STUD_GROUP].ED_STUD_COURSE_REG_ID=@EdStudCourseRegId

      
      
      if(@PrevEdStudGroupId is null)
      begin
           declare @MaxEdStudGroupId numeric;
          select @MaxEdStudGroupId =max(ED_STUD_GROUP_ID)from ED_STUD_GROUP
                  if(@MaxEdStudGroupId is null)
                     set @MaxEdStudGroupId =0;
                   set @MaxEdStudGroupId =@MaxEdStudGroupId +1;
      
      
          declare @MaxStudOrder  numeric;
            select @MaxStudOrder=max(STUD_ORDER) from ED_STUD_GROUP
            where  ED_STUD_SEMESTER_ID=@EdStudSemesterId

            if(@MaxStudOrder is null)
            set @MaxStudOrder=0
            set @MaxStudOrder=@MaxStudOrder+1;
            
            declare @TempAsFacultyInfoID numeric
            set @TempAsFacultyInfoID= @AsFacultyInfoId;
            if(@TempAsFacultyInfoID is null)
              set @TempAsFacultyInfoID=0;
              
              if(@TempAsFacultyInfoID =0)
                 select @TempAsFacultyInfoID=as_faculty_info_id from ed_stud_semester where
                 ed_stud_semester_id=@EdStudSemesterId
           
            declare @Group_StudCount int;
            SELECT @Group_StudCount = COUNT(ED_STUD_GROUP_ID) from ED_STUD_GROUP where SC_SCHEDULE_DTL_ID=@ScScheduleDtlId;

            declare @Group_SeatCount int;
            /*select @Group_SeatCount = NO_STUDENTS from SC_SCHEDULE_HDR where SC_SCHEDULE_HDR_ID = @ScSchedulehdrId;*/
			select @Group_SeatCount = NO_STUDENTS from dbo.SC_SCHEDULE_DTL where SC_SCHEDULE_DTL_ID = @ScScheduleDtlId;

            if(@Group_SeatCount>@Group_StudCount)
            begin
				        INSERT INTO [dbo].[ED_STUD_GROUP]
					        (
					            [ED_STUD_GROUP_ID],[AS_FACULTY_INFO_ID],[ED_STUD_SEMESTER_ID],
                      [ED_STUD_COURSE_REG_ID],[STUD_ORDER],[SC_SCHEDULE_DTL_ID],[ED_STUD_ID]
					        )
				        VALUES
					        (
				   	        @MaxEdStudGroupId,@TempAsFacultyInfoID,@EdStudSemesterId,@EdStudCourseRegId,
                    @MaxStudOrder,@ScScheduleDtlId,@EdStudId
					        )
            end
            else
            begin
	              RAISERROR('COS_NoSeatsAvail',16,-1)
                RETURN
            end

				end
        else
                UPDATE
					        [dbo].[ED_STUD_GROUP]
				        SET
					        [SC_SCHEDULE_DTL_ID] = @ScScheduleDtlId
				        WHERE
                [ED_STUD_GROUP_ID] = @PrevEdStudGroupId
        
									
							
			]]>
      </body>
    </procedure>-->

    <procedure owner="dbo" name="ED_CODE_EXCUSE_TYPE_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------
-- Date Created: Tuesday, April 20, 2010

-- Created By:  ()
-- Purpose: Gets all records from the AS_FACULTY_INFO table
-- Table Comment: جدول بيانات الكليات
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
                      [ED_CODE_EXCUSE_ID],
                      [DESCR_AR],
                      [DESCR_EN],
                      [EXCUSE_CODE]
                FROM
                      [dbo].[ED_CODE_EXCUSE_TYPE]
                      
                SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>

    <!--<procedure owner="dbo" name="ENT_POLICY_EXCUSE_Insert" grant="">
      <comment>
        <![CDATA[/*
 Created By:  (Safaa)
 Purpose: Inserts a record into the ENT_POLICY_EXCUSE table
 Table Comment: جدول متغيرات الأعذار للائحة

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyExcuseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdCodeExcuseTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@MaxDays" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@MaxMonths" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@MaxExecuseStudy" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			select @EdBylawId=ED_BYLAW_ID from ENTITY_MAIN	where ENTITY_MAIN.ENT_MAIN_ID=@EntMainId
			UPDATE
					[dbo].[ENT_POLICY_EXCUSE]
				SET
					[ENT_POLICY_EXCUSE_ID] = @EntPolicyExcuseId
					,[ED_BYLAW_ID] = @EdBylawId
					,[ED_CODE_EXCUSE_TYPE_ID] = @EdCodeExcuseTypeId
					,[MAX_DAYS] = @MaxDays
					,[MAX_MONTHS] = @MaxMonths
					,[MAX_EXECUSE_STUDY] = @MaxExecuseStudy
					,[ENT_MAIN_ID] = @EntMainId
				WHERE
@EntPolicyExcuseId<>0 and[ENT_POLICY_EXCUSE_ID] = @EntPolicyExcuseId  

			if(@EntPolicyExcuseId=0)
			begin
		 select @EntPolicyExcuseId = max(ENT_POLICY_EXCUSE_id) from  dbo.[ENT_POLICY_EXCUSE]
		
         if(@EntPolicyExcuseId is null)
             set @EntPolicyExcuseId=0
         set @EntPolicyExcuseId = @EntPolicyExcuseId+1
				INSERT INTO [dbo].[ENT_POLICY_EXCUSE]
					(
					[ENT_POLICY_EXCUSE_ID]
					,[ED_BYLAW_ID]
					,[ED_CODE_EXCUSE_TYPE_ID]
					,[MAX_DAYS]
					,[MAX_MONTHS]
					,[MAX_EXECUSE_STUDY]
					,[ENT_MAIN_ID]
					)
				VALUES
					(
					@EntPolicyExcuseId
					,@EdBylawId
					,@EdCodeExcuseTypeId
					,@MaxDays
					,@MaxMonths
					,@MaxExecuseStudy
					,@EntMainId
					)
				
			End		 				
							
			]]>
      </body>
    </procedure>-->

    <procedure owner="dbo" name="ENT_POLICY_GRADING_HDR_Insert" grant="">
      <comment>
        <![CDATA[/*
Created By:  ()
 Purpose: Inserts a record into the ENT_POLICY_GRADING_HDR table

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@IsGeneral" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           IF exists (select 'a' from [dbo].[ENT_POLICY_GRADING_HDR] where
           (([DESCR_AR]=@DescrAr) or ([DESCR_EN]=@DescrEn)) 
           and [ENT_MAIN_ID] = @EntMainId )
           begin
               RAISERROR('(COS_POLICY_GRADING_HDR_DESCR)',16,-1)
                                   return
           end
           
        
        	declare @MaxEntPolicyGradingId numeric(5,0)
          select  @MaxEntPolicyGradingId =max(ENT_POLICY_GRADING_HDR_ID)from ENT_POLICY_GRADING_HDR;
          if( @MaxEntPolicyGradingId is null)
            set  @MaxEntPolicyGradingId=0;
            
          set  @MaxEntPolicyGradingId= @MaxEntPolicyGradingId+1;  
        
				INSERT INTO [dbo].[ENT_POLICY_GRADING_HDR]
					(
					[ENT_POLICY_GRADING_HDR_ID]
					,[DESCR_EN]
					,[DESCR_AR]
					,[ED_BYLAW_ID]
					,[ENT_MAIN_ID]
					,[IS_GENERAL]
					,[ED_CODE_GRADING_TYPE_ID]
					)
				VALUES
					(
					 @MaxEntPolicyGradingId
					,@DescrEn
					,@DescrAr
					,@EdBylawId
					,@EntMainId
					,@IsGeneral
					,@EdCodeGradingTypeId
					)
				
									
							
			]]>
      </body>
    </procedure>
      
    <procedure owner="dbo" name="ENT_POLICY_GRADING_HDR_Update" grant="">
      <comment>
        <![CDATA[/*
 Created By:  ()
 Purpose: Updates a record in the ENT_POLICY_GRADING_HDR table

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@OriginalEntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EdBylawId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@IsGeneral" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        
        
        IF exists (select 'a' from [dbo].[ENT_POLICY_GRADING_HDR] where
        (([DESCR_AR]=@DescrAr) or ([DESCR_EN]=@DescrEn))
           and [ENT_MAIN_ID] = @EntMainId
           and [ENT_POLICY_GRADING_HDR_ID] <> @EntPolicyGradingHdrId )
           
           begin
               RAISERROR('(COS_POLICY_GRADING_HDR_DESCR)',16,-1)
                                   return
           end
           
        
        
        
        
				
				 Modify the updatable columns
				UPDATE
					[dbo].[ENT_POLICY_GRADING_HDR]
				SET
					[ENT_POLICY_GRADING_HDR_ID] = @EntPolicyGradingHdrId
					,[DESCR_EN] = @DescrEn
					,[DESCR_AR] = @DescrAr
					,[ED_BYLAW_ID] = @EdBylawId
					,[ENT_MAIN_ID] = @EntMainId
					,[IS_GENERAL] = @IsGeneral
					,[ED_CODE_GRADING_TYPE_ID] = @EdCodeGradingTypeId
				WHERE
[ENT_POLICY_GRADING_HDR_ID] = @EntPolicyGradingHdrId
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_GRADING_HDR_GetByEdCodeGradingTypeId">
      <comment>
        <![CDATA[/*
 Created By:  ()
Purpose: Select records from the ENT_POLICY_GRADING_HDR table through a foreign key

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCodeGradingTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ENT_POLICY_GRADING_HDR_ID],
					[DESCR_EN],
					[DESCR_AR],
					[ED_BYLAW_ID],
					[ENT_MAIN_ID],
					[IS_GENERAL],
					[ED_CODE_GRADING_TYPE_ID]
				FROM
					[dbo].[ENT_POLICY_GRADING_HDR]
				WHERE
					[ED_CODE_GRADING_TYPE_ID] = @EdCodeGradingTypeId AND
          [ENT_MAIN_ID] = @EntMainId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <!--<procedure owner="dbo" name="ENT_POLICY_GRADING_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
 Created By:  ()
 Purpose: Inserts a record into the ENT_POLICY_GRADING_COURSE table

*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyGradingCourseId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        declare @MaxEntPolicyGradingCOURSEId numeric(5,0)
          select  @MaxEntPolicyGradingCOURSEId =max(ENT_POLICY_GRADING_COURSE_ID)from ENT_POLICY_GRADING_COURSE;
          if( @MaxEntPolicyGradingCOURSEId is null)
            set  @MaxEntPolicyGradingCOURSEId=0;
            
          set  @MaxEntPolicyGradingCOURSEId= @MaxEntPolicyGradingCOURSEId+1;  
        
        declare @EntMainId numeric
        select @EntMainId=ENT_MAIN_ID from ENT_POLICY_Grading_HDR where 
        ENT_POLICY_Grading_HDR_ID=@EntPolicyGradingHdrId
        
        
        if not exists(   select 'a' from ENT_POLICY_Grading_COURSE inner join 
                     ENT_POLICY_Grading_HDR on ENT_POLICY_Grading_HDR.ENT_POLICY_Grading_HDR_ID=
                     ENT_POLICY_Grading_COURSE.ENT_POLICY_Grading_HDR_ID
        where 
                    ENT_POLICY_Grading_COURSE.ENT_POLICY_GRADING_HDR_ID =@EntPolicyGradingHdrId and
                    ENT_POLICY_Grading_HDR.ENT_MAIN_ID=@EntMainId and
                    ENT_POLICY_Grading_COURSE.ED_COURSE_ID=@EdCourseId AND 
                    ENT_POLICY_Grading_COURSE.ENT_COURSE_PKG_HDR_ID=@EntCoursePkgHdrID 
                    
                    
                 )
          begin
          INSERT INTO [dbo].[ENT_POLICY_GRADING_COURSE]
					(
					[ENT_POLICY_GRADING_COURSE_ID]
					,[ENT_POLICY_GRADING_HDR_ID]
					,[ED_COURSE_ID]
					,[ENT_COURSE_PKG_HDR_ID]
					)
				VALUES
					(@MaxEntPolicyGradingCOURSEId
					,@EntPolicyGradingHdrId
					,@EdCourseId
					,@EntCoursePkgHdrId
					) 
          end


        
				
				
									
							
			]]>
      </body>
    </procedure>-->

    <procedure owner="dbo" name="ENT_POLICY_GRADING_MAIN_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ENT_POLICY_GRADING_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ENT_POLICY_GRADING_RULES_ID],
					[COURSE_MAX_DEG],
					[COURSE_MIN_PRCNT],
					[ENT_MAIN_ID],
					[COURSE_MIN_DEG]
				FROM
					[dbo].[ENT_POLICY_GRADING_MAIN]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_GRADING_MAIN_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_GRADING_MAIN table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ENT_POLICY_GRADING_RULES_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ENT_POLICY_GRADING_RULES_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ENT_POLICY_GRADING_RULES_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_GRADING_MAIN]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ENT_POLICY_GRADING_RULES_ID], O.[COURSE_MAX_DEG], O.[COURSE_MIN_PRCNT], O.[ENT_MAIN_ID], O.[COURSE_MIN_DEG]
				FROM
				    [dbo].[ENT_POLICY_GRADING_MAIN] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ENT_POLICY_GRADING_RULES_ID] = PageIndex.[ENT_POLICY_GRADING_RULES_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_GRADING_MAIN]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ENT_POLICY_GRADING_MAIN_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ENT_POLICY_GRADING_MAIN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyGradingRulesId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				DELETE FROM [dbo].[ENT_POLICY_GRADING_MAIN] WITH (ROWLOCK) 
				WHERE
					[ENT_POLICY_GRADING_RULES_ID] = @EntPolicyGradingRulesId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ENT_POLICY_GRADING_MAIN_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ENT_POLICY_GRADING_MAIN table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EntPolicyGradingRulesId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@CourseMaxDeg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@CourseMinPrcnt" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="null" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@CourseMinDeg" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ENT_POLICY_GRADING_RULES_ID]
	, [COURSE_MAX_DEG]
	, [COURSE_MIN_PRCNT]
	, [ENT_MAIN_ID]
	, [COURSE_MIN_DEG]
    FROM
	[dbo].[ENT_POLICY_GRADING_MAIN]
    WHERE 
	 ([ENT_POLICY_GRADING_RULES_ID] = @EntPolicyGradingRulesId OR @EntPolicyGradingRulesId IS NULL)
	AND ([COURSE_MAX_DEG] = @CourseMaxDeg OR @CourseMaxDeg IS NULL)
	AND ([COURSE_MIN_PRCNT] = @CourseMinPrcnt OR @CourseMinPrcnt IS NULL)
	AND ([ENT_MAIN_ID] = @EntMainId OR @EntMainId IS NULL)
	AND ([COURSE_MIN_DEG] = @CourseMinDeg OR @CourseMinDeg IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ENT_POLICY_GRADING_RULES_ID]
	, [COURSE_MAX_DEG]
	, [COURSE_MIN_PRCNT]
	, [ENT_MAIN_ID]
	, [COURSE_MIN_DEG]
    FROM
	[dbo].[ENT_POLICY_GRADING_MAIN]
    WHERE 
	 ([ENT_POLICY_GRADING_RULES_ID] = @EntPolicyGradingRulesId AND @EntPolicyGradingRulesId is not null)
	OR ([COURSE_MAX_DEG] = @CourseMaxDeg AND @CourseMaxDeg is not null)
	OR ([COURSE_MIN_PRCNT] = @CourseMinPrcnt AND @CourseMinPrcnt is not null)
	OR ([ENT_MAIN_ID] = @EntMainId AND @EntMainId is not null)
	OR ([COURSE_MIN_DEG] = @CourseMinDeg AND @CourseMinDeg is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_GRADING_MAIN_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_GRADING_MAIN table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ENT_POLICY_GRADING_RULES_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ENT_POLICY_GRADING_RULES_ID] )
				SELECT TOP {3} [ENT_POLICY_GRADING_RULES_ID]
				FROM [dbo].[ENT_POLICY_GRADING_MAIN] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ENT_POLICY_GRADING_RULES_ID], O.[COURSE_MAX_DEG], O.[COURSE_MIN_PRCNT], O.[ENT_MAIN_ID], O.[COURSE_MIN_DEG]
				FROM
				    [dbo].[ENT_POLICY_GRADING_MAIN] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ENT_POLICY_GRADING_RULES_ID] = PageIndex.[ENT_POLICY_GRADING_RULES_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ENT_POLICY_GRADING_MAIN] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_GRADING_DTL_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ENT_POLICY_GRADING_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ENT_POLICY_GRADING_DTL_ID],
					[ENT_POLICY_GRADING_HDR_ID],
					[ED_CODE_GRADING_ID],
					[DESCR_AR],
					[DESCR_EN],
					[SYMBOL_AR],
					[SYMBOL_EN],
					[GRAD_ORDER],
					[MIN_RATE],
					[MAX_RATE],
					[GS_CODE_PASS_FAIL_ID],
					[POINTS]
				FROM
					[dbo].[ENT_POLICY_GRADING_DTL]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_GRADING_DTL_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ENT_POLICY_GRADING_DTL table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ENT_POLICY_GRADING_DTL_ID] numeric(7, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ENT_POLICY_GRADING_DTL_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ENT_POLICY_GRADING_DTL_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_GRADING_DTL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ENT_POLICY_GRADING_DTL_ID], O.[ENT_POLICY_GRADING_HDR_ID], O.[ED_CODE_GRADING_ID], O.[DESCR_AR], O.[DESCR_EN], O.[SYMBOL_AR], O.[SYMBOL_EN], O.[GRAD_ORDER], O.[MIN_RATE], O.[MAX_RATE], O.[GS_CODE_PASS_FAIL_ID], O.[POINTS]
				FROM
				    [dbo].[ENT_POLICY_GRADING_DTL] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ENT_POLICY_GRADING_DTL_ID] = PageIndex.[ENT_POLICY_GRADING_DTL_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ENT_POLICY_GRADING_DTL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_POLICY_GRADING_DTL_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ENT_POLICY_GRADING_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntPolicyGradingDtlId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EntPolicyGradingHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@SymbolAr" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@SymbolEn" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@GradOrder" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@MinRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@MaxRate" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
        <parameter name="@GsCodePassFailId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@Points" type="numeric" direction="Input" size="5" precision="8" scale="3" param="(8, 3)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
          declare @MaxEntPolicyGradingDTLId numeric(5,0)
          select  @MaxEntPolicyGradingDTLId  =max(ENT_POLICY_GRADING_DTL_ID)from ENT_POLICY_GRADING_DTL;
          if( @MaxEntPolicyGradingDTLId  is null)
            set  @MaxEntPolicyGradingDTLId =0;
            
          set  @MaxEntPolicyGradingDTLId = @MaxEntPolicyGradingDTLId +1; 
          
           if exists(   select 'a' from ENT_POLICY_GRADING_DTL 
         where       
                    ENT_POLICY_GRADING_DTL.ENT_POLICY_GRADING_HDR_ID=@EntPolicyGradingHdrId and 
                    (
                    ENT_POLICY_GRADING_DTL.GRAD_ORDER=@GradOrder OR 
                    ENT_POLICY_GRADING_DTL.ED_CODE_GRADING_ID =@EdCodeGradingId OR
                    (ENT_POLICY_GRADING_DTL.POINTS = @Points and @Points is not null)
                    )
                 )
          begin
              RAISERROR('(COS_ENT_POLICY_Grading_Dtl)',16,-1)
                                   return
          end
        
				INSERT INTO [dbo].[ENT_POLICY_GRADING_DTL]
					(
					[ENT_POLICY_GRADING_DTL_ID]
					,[ENT_POLICY_GRADING_HDR_ID]
					,[ED_CODE_GRADING_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[SYMBOL_AR]
					,[SYMBOL_EN]
					,[GRAD_ORDER]
					,[MIN_RATE]
					,[MAX_RATE]
					,[GS_CODE_PASS_FAIL_ID]
					,[POINTS]
					)
				VALUES
					(
					@MaxEntPolicyGradingDTLId 
					,@EntPolicyGradingHdrId
					,@EdCodeGradingId
					,@DescrAr
					,@DescrEn
					,@SymbolAr
					,@SymbolEn
					,@GradOrder
					,@MinRate
					,@MaxRate
					,@GsCodePassFailId
					,@Points
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_EXCUSE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_EXCUSE table passing page index and page count parameters
-- Table Comment: جدول اعتذارت الطالب - طلبات الاضافة / الحذف / الانسحاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_EXCUSE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ED_STUD_EXCUSE_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ED_STUD_EXCUSE_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_EXCUSE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ED_STUD_EXCUSE_ID], O.[ED_STUD_SEMESTER_ID], O.[ED_CODE_EXCUSE_TYPE_ID], O.[EXCUSE_NUM], O.[EXCUSE_NOTE], O.[REQ_DATE], O.[GS_CODE_REQ_STATUS_ID], O.[REQ_STATUS_DATE], O.[AS_FACULTY_INFO_ID], O.[ED_STUD_ID], O.[ED_ACAD_YEAR_ID], O.[ED_CODE_SEMESTER_ID]
				FROM
				    [dbo].[ED_STUD_EXCUSE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ED_STUD_EXCUSE_ID] = PageIndex.[ED_STUD_EXCUSE_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_EXCUSE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_EXCUSE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_EXCUSE table
-- Table Comment: جدول اعتذارت الطالب - طلبات الاضافة / الحذف / الانسحاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudExcuseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeExcuseTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ExcuseNum" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ExcuseNote" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			 begin transaction; 
      
					declare @MaxEdStudExcuseId numeric(5,0)
          select  @MaxEdStudExcuseId =max(ED_STUD_EXCUSE_ID)from ED_STUD_EXCUSE;
          if( @MaxEdStudExcuseId is null)
            set  @MaxEdStudExcuseId=0;
            
          set  @MaxEdStudExcuseId= @MaxEdStudExcuseId+1;  
				
				INSERT INTO [dbo].[ED_STUD_EXCUSE]
					(
					[ED_STUD_EXCUSE_ID]
					,[ED_STUD_SEMESTER_ID]
					,[ED_CODE_EXCUSE_TYPE_ID]
					,[EXCUSE_NUM]
					,[EXCUSE_NOTE]
					,[REQ_DATE]
					,[GS_CODE_REQ_STATUS_ID]
					,[REQ_STATUS_DATE]
					,[AS_FACULTY_INFO_ID]
					,[ED_STUD_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					)
				VALUES
					(
					@MaxEdStudExcuseId
					,@EdStudSemesterId
					,@EdCodeExcuseTypeId
					,@ExcuseNum
					,@ExcuseNote
					,@ReqDate
					,@GsCodeReqStatusId
					,@ReqStatusDate
					,@AsFacultyInfoId
					,@EdStudId
					,@EdAcadYearId
					,@EdCodeSemesterId
					)
				
       
          
            -- to insert agenda fees on student   
                      declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
                       select @FeeEdStudId= ED_STUD_ID,
                              @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
                              @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
                              @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
                       FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@EdStudSemesterId
                       
                    if(@EdCodeExcuseTypeId=2)
                      exec  [dbo].[LoadAgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,6,@MaxEdStudExcuseId
                    else if(@EdCodeExcuseTypeId=1)  
                       exec  [dbo].[LoadAgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,7,@MaxEdStudExcuseId
                
				
									
        IF @@ERROR <> 0
       BEGIN
          ROLLBACK

          RETURN
       END
      commit transaction;
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_EXCUSE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_EXCUSE table
-- Table Comment: جدول اعتذارت الطالب - طلبات الاضافة / الحذف / الانسحاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudExcuseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdStudExcuseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeExcuseTypeId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ExcuseNum" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@ExcuseNote" type="nvarchar" direction="Input" size="400" precision="0" scale="0" param="(400)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
declare @feePayed int;
set @feePayed = 1;			

if(@GsCodeReqStatusId=2)
begin

declare @ActiveId int;
if(@EdCodeExcuseTypeId = 1)
	set @ActiveId = 7;
else if(@EdCodeExcuseTypeId = 2)
	set @ActiveId = 6;

set @feePayed = dbo.FN_IsAgendaFeesOnStudentPayed(@EdStudId,@AsFacultyInfoId,@EdAcadYearId,@EdCodeSemesterId,@ActiveId,@EdStudExcuseId);

end

if(@feePayed=1)
begin
				-- Modify the updatable columns
UPDATE
	[dbo].[ED_STUD_EXCUSE]
SET
	[ED_STUD_EXCUSE_ID] = @EdStudExcuseId
	,[ED_STUD_SEMESTER_ID] = @EdStudSemesterId
	,[ED_CODE_EXCUSE_TYPE_ID] = @EdCodeExcuseTypeId
	,[EXCUSE_NUM] = @ExcuseNum
	,[EXCUSE_NOTE] = @ExcuseNote
	,[REQ_DATE] = @ReqDate
	,[GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId
	,[REQ_STATUS_DATE] = @ReqStatusDate
	,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
	,[ED_STUD_ID] = @EdStudId
	,[ED_ACAD_YEAR_ID] = @EdAcadYearId
	,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
WHERE
[ED_STUD_EXCUSE_ID] = @EdStudExcuseId 
end
else
begin
	-- error
	RAISERROR('Check Fees Payed on Student.',16,-1) 
end
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_EXCUSE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_STUD_EXCUSE table
-- Table Comment: جدول اعتذارت الطالب - طلبات الاضافة / الحذف / الانسحاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudExcuseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        Delete from ED_STUD_EXCUSE_COURSE where ED_STUD_EXCUSE_ID = @EdStudExcuseId;
        
				DELETE FROM [dbo].[ED_STUD_EXCUSE] WITH (ROWLOCK) 
				WHERE
					[ED_STUD_EXCUSE_ID] = @EdStudExcuseId
          
          
          declare @ED_STUD_SEMESTER_ID numeric,@ED_CODE_EXCUSE_TYPE_ID numeric
          
          select @ED_STUD_SEMESTER_ID=ED_STUD_SEMESTER_ID from [dbo].[ED_STUD_EXCUSE] where [ED_STUD_EXCUSE_ID] = @EdStudExcuseId
          
					 -- to delete agenda fees on student if available  
                  declare @FeeEdStudId numeric,@FeeEdAcadYearId numeric,@FeeEdCodeSemesterId numeric,@FeeAsfacultyInfoId numeric
                   select @FeeEdStudId= ED_STUD_ID,
                          @FeeEdAcadYearId=ED_ACAD_YEAR_ID,
                          @FeeEdCodeSemesterId=ED_CODE_SEMESTER_ID,
                          @FeeAsfacultyInfoId=AS_FACULTY_INFO_ID
                   FROM  ED_STUD_SEMESTER where ED_STUD_SEMESTER_ID=@ED_STUD_SEMESTER_ID
                   
                 if(@ED_CODE_EXCUSE_TYPE_ID=2)
                  exec  [dbo].[Delete_AgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,6,@EdStudExcuseId
                 else if(@ED_CODE_EXCUSE_TYPE_ID=1)
                  exec  [dbo].[Delete_AgendaFeesOnStudent] @FeeEdStudId,@FeeEdAcadYearId,@FeeEdCodeSemesterId,@FeeAsfacultyInfoId,7,@EdStudExcuseId
                    
          
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_EXCUSE_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_EXCUSE table using a dynamically generated query.
-- Table Comment: جدول اعتذارت الطالب - طلبات الاضافة / الحذف / الانسحاب
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_EXCUSE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ED_STUD_EXCUSE_ID] )
				SELECT TOP {3} [ED_STUD_EXCUSE_ID]
				FROM [dbo].[ED_STUD_EXCUSE] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ED_STUD_EXCUSE_ID], O.[ED_STUD_SEMESTER_ID], O.[ED_CODE_EXCUSE_TYPE_ID], O.[EXCUSE_NUM], O.[EXCUSE_NOTE], O.[REQ_DATE], O.[GS_CODE_REQ_STATUS_ID], O.[REQ_STATUS_DATE], O.[AS_FACULTY_INFO_ID], O.[ED_STUD_ID], O.[ED_ACAD_YEAR_ID], O.[ED_CODE_SEMESTER_ID]
				FROM
				    [dbo].[ED_STUD_EXCUSE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ED_STUD_EXCUSE_ID] = PageIndex.[ED_STUD_EXCUSE_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_STUD_EXCUSE] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="ED_STUD_COURSE_REG_ASSESS_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_COURSE_REG_ASSESS table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudCourseRegAssessId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudCourseRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseAssessId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@AssessDeg" type="numeric" direction="Input" size="5" precision="5" scale="3" param="(5, 3)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseStatusId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EntPolicyAssessHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@LastDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
        DECLARE @TEMP_ID NUMERIC
           select @TEMP_ID =ED_STUD_COURSE_REG_ASSESS_ID from [dbo].[ED_STUD_COURSE_REG_ASSESS] where ED_STUD_COURSE_REG_ID=@EdStudCourseRegId and
           ED_CODE_COURSE_ASSESS_ID=@EdCodeCourseAssessId
           
           
        IF(@TEMP_ID IS  NULL)
         BEGIN 
         
                DECLARE @MAX_ID NUMERIC
              SELECT @MAX_ID=MAX(ED_STUD_COURSE_REG_ASSESS_ID) FROM ED_STUD_COURSE_REG_ASSESS
              IF(@MAX_ID IS NULL)
                 SET @MAX_ID=0;

              SET @MAX_ID=@MAX_ID+1;
         
            	  INSERT INTO [dbo].[ED_STUD_COURSE_REG_ASSESS]
					      (
					          [ED_STUD_COURSE_REG_ASSESS_ID]
					          ,[ED_STUD_COURSE_REG_ID]
					          ,[ED_CODE_COURSE_ASSESS_ID]
					          ,[ASSESS_DEG]
					          ,[AS_FACULTY_INFO_ID]
					          ,[ED_CODE_COURSE_STATUS_ID]
					          ,[ENT_POLICY_ASSESS_HDR_ID]
                    ,[SE_USER_ID]
                    ,[SE_FORM_ID]
                    ,[LAST_DATE]
					      )
				      VALUES
					      (
					           @MAX_ID
					          ,@EdStudCourseRegId
					          ,@EdCodeCourseAssessId
					          ,@AssessDeg
					          ,@AsFacultyInfoId
					          ,@EdCodeCourseStatusId
					          ,@EntPolicyAssessHdrId
                    ,@SeUserId
                    ,@SeFormId
                    ,@LastDate
					      )
         END
        
        ELSE
          BEGIN
               UPDATE
			            [dbo].[ED_STUD_COURSE_REG_ASSESS]
		            SET
			             [ED_STUD_COURSE_REG_ID] = @EdStudCourseRegId
			            ,[ED_CODE_COURSE_ASSESS_ID] = @EdCodeCourseAssessId
			            ,[ASSESS_DEG] = @AssessDeg
			            ,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
			            ,[ED_CODE_COURSE_STATUS_ID] = @EdCodeCourseStatusId
			            ,[ENT_POLICY_ASSESS_HDR_ID] = @EntPolicyAssessHdrId
                  ,[SE_USER_ID] = @SeUserId
                    ,[SE_FORM_ID] = @SeFormId
                    ,[LAST_DATE] = @LastDate
		            WHERE
                     [ED_STUD_COURSE_REG_ASSESS_ID] = @TEMP_ID
          END
			
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_SEMESTER_OPEN_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_SEMESTER_OPEN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@IsCurrent" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsClosed" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
          declare @ErrorMessage nvarchar(max)
        -- set @ErrorMessage='ERR_FOUND_CURRENT';
        -- if exists (select 'a' from [dbo].[ED_SEMESTER_OPEN] where
        -- ED_ACAD_YEAR_ID=@EdAcadYearId and  ENT_MAIN_ID=@EntMainId 
         -- and  IS_CLOSED=0 
         --and ED_CODE_SEMESTER_ID<>@EdCodeSemesterId)
          -- begin
             --   set @ErrorMessage='ERR_FOUND_CURRENT'+','+convert(nvarchar,@EntMainId);
             --   RAISERROR(@ErrorMessage,16,-1)
             --   RETURN 
          -- end
        declare @MaxEdSemOpenID numeric
        select @MaxEdSemOpenID=max(ED_SEMESTER_OPEN_ID)from [dbo].[ED_SEMESTER_OPEN]
        if(@MaxEdSemOpenID is null)
         set @MaxEdSemOpenID=0;
         
         set @MaxEdSemOpenID=@MaxEdSemOpenID+1;

       -- if not exists(select 'a' from [dbo].[ED_SEMESTER_OPEN] where
      --  ED_ACAD_YEAR_ID=@EdAcadYearId and ED_CODE_SEMESTER_ID=@EdCodeSemesterId and ENT_MAIN_ID=@EntMainId)
       -- Begin
           if exists(select 'a' from ED_SEMESTER_OPEN where 
             ((@FromDate>=ED_SEMESTER_OPEN.FROM_DATE and  @FromDate<=ED_SEMESTER_OPEN.TO_DATE)
              or(@ToDate>=ED_SEMESTER_OPEN.FROM_DATE and  @ToDate<=ED_SEMESTER_OPEN.TO_DATE))and
              (ED_SEMESTER_OPEN.ENT_MAIN_ID=@EntMainId) 
              )
              Begin
                 set @ErrorMessage='Open_Semester_Intersection,'+convert(nvarchar,@EntMainId);
                 RAISERROR(@ErrorMessage,16,-1)
                  RETURN 
              End
          
				        if exists (select 'a' from [dbo].[ED_SEMESTER_OPEN] where
         ED_ACAD_YEAR_ID=@EdAcadYearId and  ENT_MAIN_ID=@EntMainId 
          and  IS_CLOSED=0 
         and ED_CODE_SEMESTER_ID=@EdCodeSemesterId )
           begin
                set @ErrorMessage='ERR_FOUND_CURRENT'+','+convert(nvarchar,@EntMainId);
                RAISERROR(@ErrorMessage,16,-1)
                RETURN 
           end
           if not exists(select 'a' from [dbo].[ED_SEMESTER_OPEN] where
         ED_ACAD_YEAR_ID=@EdAcadYearId and  ENT_MAIN_ID=@EntMainId 
          and  IS_CLOSED=0 
         and ED_CODE_SEMESTER_ID=@EdCodeSemesterId )
           begin
				      INSERT INTO [dbo].[ED_SEMESTER_OPEN]
					      (
					      [ED_SEMESTER_OPEN_ID]
					      ,[ED_ACAD_YEAR_ID],[FROM_DATE],[TO_DATE],[DESCR_AR],[DESCR_EN],[ED_CODE_SEMESTER_ID]
					      ,[ED_CODE_SEMESTER_TYPE_ID],[ENT_MAIN_ID],[IS_CURRENT],[IS_CLOSED]
					      )
				      VALUES
					      (
					      @MaxEdSemOpenID,@EdAcadYearId,@FromDate,@ToDate,@DescrAr,@DescrEn
					      ,@EdCodeSemesterId,@EdCodeSemesterTypeId,@EntMainId,@IsCurrent,@IsClosed
					      )
                end
                --  UPDATE [dbo].[ED_SEMESTER_OPEN] set IS_CURRENT=0 where ENT_MAIN_ID=@EntMainId and
               -- ED_SEMESTER_OPEN_ID<>@MaxEdSemOpenID
			--	End
					
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_SEMESTER_OPEN_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_SEMESTER_OPEN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@OriginalEdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@IsCurrent" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsClosed" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@IsAgendaClosed" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        

      --check that semester not intersect with another previous semester
        if exists(select 'a' from ED_SEMESTER_OPEN where 
             ((@FromDate>=ED_SEMESTER_OPEN.FROM_DATE and  @FromDate<=ED_SEMESTER_OPEN.TO_DATE)
              or(@ToDate>=ED_SEMESTER_OPEN.FROM_DATE and  @ToDate<=ED_SEMESTER_OPEN.TO_DATE)) and
              (ED_SEMESTER_OPEN.ENT_MAIN_ID=@EntMainId) and
              (ED_SEMESTER_OPEN.ED_SEMESTER_OPEN_ID<>@OriginalEdSemesterOpenId)
              )
              Begin
                 declare @ErrorMessage nvarchar(max)
                 set @ErrorMessage='';
                 set @ErrorMessage='Open_Semester_Intersection,'+convert(nvarchar,@EntMainId);
                 RAISERROR(@ErrorMessage,16,-1)
                  RETURN 
              End
              
          --check that no agenda will be out semester dates
            if exists(select 'a' from ed_semester_agenda  where 
            ed_semester_agenda.ED_SEMESTER_OPEN_ID=@OriginalEdSemesterOpenId AND
                ( ed_semester_agenda.FROM_DATE<@FromDate or
                  ed_semester_agenda.TO_DATE>@ToDate )
                )
                Begin
                 RAISERROR('Agenda_Out_Of_range_dates',16,-1)
                  RETURN 
                End
                
              
				UPDATE
					[dbo].[ED_SEMESTER_OPEN]
				SET
					[ED_SEMESTER_OPEN_ID] = @EdSemesterOpenId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[FROM_DATE] = @FromDate
					,[TO_DATE] = @ToDate
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[ED_CODE_SEMESTER_TYPE_ID] = @EdCodeSemesterTypeId
					,[ENT_MAIN_ID] = @EntMainId
					,[IS_CURRENT] = @IsCurrent
					,[IS_CLOSED] = @IsClosed
          ,[IS_AGENDA_CLOSED]=@IsAgendaClosed
				WHERE
[ED_SEMESTER_OPEN_ID] = @OriginalEdSemesterOpenId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_SEMESTER_OPEN_GetByEdAcadYearIdEntMainIdEdCodeSemesterId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_SEMESTER_OPEN table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					*
				FROM
					[dbo].[ED_SEMESTER_OPEN]
				WHERE
					[ED_ACAD_YEAR_ID] = @EdAcadYearId
					AND [ENT_MAIN_ID] = @EntMainId
					AND [ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_SEMESTER_OPEN_GetByEdAcadYearIdEntMainIdEdCodeSemesterIdAsCodeDegreeClassId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_SEMESTER_OPEN table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="" />
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					*
				FROM
					[dbo].[ED_SEMESTER_OPEN]
				WHERE
					[ED_ACAD_YEAR_ID] = @EdAcadYearId
					AND [ENT_MAIN_ID] = @EntMainId
					AND [ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
          AND [AS_CODE_DEGREE_CLASS_ID] = @AsCodeDegreeClassId
          
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_SEMESTER_AGENDA_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_SEMESTER_AGENDA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterAgendaId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemActvityId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@FromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ToDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(30)" nulldefault="" />
        <parameter name="@StudFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StfFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EmpFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>

      </parameters>
      <body>
        <![CDATA[
				
              declare @MaxEdSemesterAgenda numeric
              select @MaxEdSemesterAgenda=max(ED_SEMESTER_AGENDA_ID) from ED_SEMESTER_AGENDA
              if(@MaxEdSemesterAgenda is null)
                  set @MaxEdSemesterAgenda=0;
              set @MaxEdSemesterAgenda=@MaxEdSemesterAgenda+1
              
              if exists(select 'a' from [dbo].[ED_SEMESTER_AGENDA] where
              ED_SEMESTER_OPEN_ID=@EdSemesterOpenId and ED_CODE_SEM_ACTVITY_ID=@EdCodeSemActvityId and  AS_CODE_DEGREE_CLASS_ID =@AsCodeDegreeClassId
              and @EdCodeSemActvityId<>15 and @EdCodeSemActvityId<>16)
                 Begin
                     RAISERROR('Found_Sem_And_Activity',16,-1)
                     RETURN 
                 End
              
              
				      INSERT INTO [dbo].[ED_SEMESTER_AGENDA]
					      (
					      [ED_SEMESTER_AGENDA_ID]
					      ,[ED_SEMESTER_OPEN_ID]
					      ,[ED_CODE_SEM_ACTVITY_ID]
					      ,[FROM_DATE]
					      ,[TO_DATE]
                ,[DESCR_EN]
				,[STUD_FLG]
					,[STF_FLG]
					,[EMP_FLG]
          ,[AS_CODE_DEGREE_CLASS_ID]
         
					      )
				      VALUES
					      (
					       @MaxEdSemesterAgenda
					      ,@EdSemesterOpenId
					      ,@EdCodeSemActvityId
					      ,@FromDate
					      ,@ToDate
                ,@DescrEn
				 ,@StudFlg
					,@StfFlg
					,@EmpFlg
          ,@AsCodeDegreeClassId
					      )
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_SEMESTER_AGENDA_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_SEMESTER_AGENDA table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterAgendaId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
       -- must not there any declared states
               declare @EntMainId numeric,@EdCodeSemesterId numeric,@EdAcadYearId numeric,@EdSemesterOpenId numeric,
               @AsFacultyInfoId numeric,@EdCodeSemActvityId numeric
               
               select @EdSemesterOpenId=ed_semester_open_id,@EdCodeSemActvityId=ed_code_sem_actvity_id from [dbo].[ED_SEMESTER_AGENDA]
               	WHERE
					            [ED_SEMESTER_AGENDA_ID] = @EdSemesterAgendaId
               
               if (@EdCodeSemActvityId < 8)
               begin
               
          select @EntMainId=ENT_MAIN_ID,
                 @EdCodeSemesterId=ED_CODE_SEMESTER_ID,
                 @EdAcadYearId=ED_ACAD_YEAR_ID 
           from  ED_SEMESTER_OPEN 
           where 
           ED_SEMESTER_OPEN_ID=@EdSemesterOpenId
           
               
         
       select @AsFacultyInfoId=as_faculty_info_id from entity_main where ent_main_id=@EntMainId
               
        if exists(SELECT  'a'   
                     FROM  ED_STUD_STATE INNER JOIN
                     ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                     WHERE     (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND
                              (ED_STUD_STATE.ENT_MAIN_ID = @EntMainId) AND
                              (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                  )
                  
                  Begin
                      RAISERROR('Errorr_Agenda_Found_Stud_Declaration',16,-1)
                      RETURN 
                  End
                  
      -- here i must write code for stud register in current version and course change
                  if exists(SELECT   'a'  
                        FROM         ED_STUD_COURSE_REG INNER JOIN
                                     ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID 
                                 
                        WHERE            (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND
                                         (ED_STUD_SEMESTER.As_Faculty_Info_Id = @AsFacultyInfoId) AND
                                         (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                         )
          
                  Begin
                      RAISERROR('Errorr_CorseReg_Found_Stud_Declaration',16,-1)
                      RETURN 
                  End
                  
                  
                 if exists(SELECT   'a'  
                        FROM         ED_STUD_COURSE_CHNG INNER JOIN
                                    ED_STUD_SEMESTER ON ED_STUD_COURSE_CHNG.ED_STUD_SEMESTER_ID = 
                                    ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
                                    
                        WHERE      (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId) AND
                                   (ED_STUD_SEMESTER.As_Faculty_Info_Id = @AsFacultyInfoId) AND
                                   (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId)
                         )
          
                  Begin
                      RAISERROR('Errorr_CorseChng_Found_Stud_Declaration',16,-1)
                      RETURN 
                  End
                  
        end
        
				DELETE FROM [dbo].[ED_SEMESTER_AGENDA] WITH (ROWLOCK) 
				WHERE
					[ED_SEMESTER_AGENDA_ID] = @EdSemesterAgendaId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_SEMESTER_AGENDA_GetByEdSemesterOpenId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_SEMESTER_AGENDA table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterOpenId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ED_SEMESTER_AGENDA].*
          
				FROM
					[dbo].[ED_SEMESTER_AGENDA] INNER JOIN ED_CODE_SEM_ACTVITY ON ED_CODE_SEM_ACTVITY.ED_CODE_SEM_ACTVITY_ID=
          [dbo].[ED_SEMESTER_AGENDA].ED_CODE_SEM_ACTVITY_ID
				WHERE
					[dbo].[ED_SEMESTER_AGENDA].[ED_SEMESTER_OPEN_ID] = @EdSemesterOpenId
			ORDER BY FROM_DATE ASC
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_SEMESTER_AGENDA_GetByEdSemesterAgendaId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_SEMESTER_AGENDA table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdSemesterAgendaId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[dbo].[ED_SEMESTER_AGENDA].*
          
				FROM
					[dbo].[ED_SEMESTER_AGENDA]INNER JOIN ED_CODE_SEM_ACTVITY ON ED_CODE_SEM_ACTVITY.ED_CODE_SEM_ACTVITY_ID=
          [dbo].[ED_SEMESTER_AGENDA].ED_CODE_SEM_ACTVITY_ID
				WHERE
					[dbo].[ED_SEMESTER_AGENDA].[ED_SEMESTER_AGENDA_ID] = @EdSemesterAgendaId
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="USR_TOP_LINK_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the USR_TOP_LINK table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@UsrTopLinkId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@SeFormId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
			  declare @MaxUSR_TOP_LINK_ID numeric(3,0)
        select  @MaxUSR_TOP_LINK_ID =max(USR_TOP_LINK_ID)from USR_TOP_LINK;
         if( @MaxUSR_TOP_LINK_ID is null)
            set  @MaxUSR_TOP_LINK_ID=0;
            
          set  @MaxUSR_TOP_LINK_ID= @MaxUSR_TOP_LINK_ID+1; 
				
        if exists(select 'd' from [dbo].[USR_TOP_LINK] where  [SE_FORM_ID]=@SeFormId and [SE_USER_ID]=@SeUserId)
           begin
            	 --RAISERROR('ERR_FORM_USR_REPEAT',16,-1)
               RETURN 
           end
        else
        begin
				  INSERT INTO [dbo].[USR_TOP_LINK]
					  (
					  [USR_TOP_LINK_ID]
					  ,[SE_FORM_ID]
					  ,[SE_USER_ID]
					  )
				  VALUES
					  (
					  @MaxUSR_TOP_LINK_ID
					  ,@SeFormId
					  ,@SeUserId
					  )
				end
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="USR_TOP_LINK_GetBySeUserId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the USR_TOP_LINK table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[USR_TOP_LINK].[USR_TOP_LINK_ID],
					[dbo].[USR_TOP_LINK].[SE_FORM_ID],
					[dbo].[USR_TOP_LINK].[SE_USER_ID],
          SE_FORM.DESC_AR,
          SE_FORM.DESC_EN
				FROM
					[dbo].[USR_TOP_LINK] left outer join SE_FORM on SE_FORM.[SE_FORM_ID]=[dbo].[USR_TOP_LINK].[SE_FORM_ID]
				WHERE
					[SE_USER_ID] = @SeUserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SV_STUD_COMP_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SV_STUD_COMP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[dbo].[SV_STUD_COMP].[SV_STUD_COMP_ID],
					[dbo].[SV_STUD_COMP].[SV_CDE_COMP_TYPE_ID],
					[dbo].[SV_STUD_COMP].[COMP_DATE],
					[dbo].[SV_STUD_COMP].[ED_STUD_ID],
					[dbo].[SV_STUD_COMP].[ED_ACAD_YEAR_ID],
					[dbo].[SV_STUD_COMP].[ED_CODE_SEMESTER_ID],
					[dbo].[SV_STUD_COMP].[SA_STF_MEMBER_ID],
					[dbo].[SV_STUD_COMP].[ED_COURSE_ID],
					[dbo].[SV_STUD_COMP].[COMP_DTL],
					[dbo].[SV_STUD_COMP].[SV_CDE_REQ_STATUS_ID],
          [dbo].[SV_STUD_COMP].[COMP_COMMENTS],
					[dbo].[SV_STUD_COMP].[SV_CDE_COMP_H_ID],
          [dbo].[SV_STUD_COMP].[SV_CDE_COMP_D_ID],
          [dbo].[SV_STUD_COMP].[REPLY_DATE],
          [dbo].[SV_STUD_COMP].[SE_USER_ID],
          SV_CDE_COMP_TYPE.DESCR_AR,
          SV_CDE_COMP_TYPE.DESCR_EN,
          SV_CDE_REQ_STATUS.DESCR_AR,
          SV_CDE_REQ_STATUS.DESCR_EN,
          ED_COURSE.COURSE_DESCR_AR,
          ED_COURSE.COURSE_DESCR_EN,
          SA_STF_MEMBER.STF_FULL_NAME_AR,
          SA_STF_MEMBER.STF_FULL_NAME_EN
				FROM
					[dbo].[SV_STUD_COMP] left outer join ED_COURSE on ED_COURSE.ED_COURSE_ID=[dbo].[SV_STUD_COMP].ED_COURSE_ID
          left outer join SA_STF_MEMBER on SA_STF_MEMBER.SA_STF_MEMBER_ID=[dbo].[SV_STUD_COMP].SA_STF_MEMBER_ID
          left outer join SV_CDE_COMP_TYPE on [dbo].[SV_STUD_COMP].SV_CDE_COMP_TYPE_ID=SV_CDE_COMP_TYPE.SV_CDE_COMP_TYPE_ID
          left outer join SV_CDE_REQ_STATUS on [dbo].[SV_STUD_COMP].SV_CDE_REQ_STATUS_ID=SV_CDE_REQ_STATUS.SV_CDE_REQ_STATUS_ID
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="SV_STUD_COMP_GetByEdStudId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_STUD_COMP table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[SV_STUD_COMP].[SV_STUD_COMP_ID],
					[dbo].[SV_STUD_COMP].[SV_CDE_COMP_TYPE_ID],
					[dbo].[SV_STUD_COMP].[COMP_DATE],
					[dbo].[SV_STUD_COMP].[ED_STUD_ID],
					[dbo].[SV_STUD_COMP].[ED_ACAD_YEAR_ID],
					[dbo].[SV_STUD_COMP].[ED_CODE_SEMESTER_ID],
					[dbo].[SV_STUD_COMP].[SA_STF_MEMBER_ID],
					[dbo].[SV_STUD_COMP].[ED_COURSE_ID],
					[dbo].[SV_STUD_COMP].[COMP_DTL],
					[dbo].[SV_STUD_COMP].[SV_CDE_REQ_STATUS_ID],
					[dbo].[SV_STUD_COMP].[COMP_COMMENTS],
          [dbo].[SV_STUD_COMP].[SV_CDE_COMP_H_ID],
          [dbo].[SV_STUD_COMP].[SV_CDE_COMP_D_ID],
          [dbo].[SV_STUD_COMP].[REPLY_DATE],
          [dbo].[SV_STUD_COMP].[SE_USER_ID],
          SV_CDE_COMP_TYPE.DESCR_AR,
          SV_CDE_COMP_TYPE.DESCR_EN,
          SV_CDE_REQ_STATUS.DESCR_AR,
          SV_CDE_REQ_STATUS.DESCR_EN
          
				FROM
					[dbo].[SV_STUD_COMP] left outer join SV_CDE_COMP_TYPE on [dbo].[SV_STUD_COMP].SV_CDE_COMP_TYPE_ID=SV_CDE_COMP_TYPE.SV_CDE_COMP_TYPE_ID
          left outer join SV_CDE_REQ_STATUS on [dbo].[SV_STUD_COMP].SV_CDE_REQ_STATUS_ID=SV_CDE_REQ_STATUS.SV_CDE_REQ_STATUS_ID
				WHERE
					[ED_STUD_ID] = @EdStudId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SV_STUD_COMP_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SV_STUD_COMP table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@SvStudCompId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@SvCdeCompTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@CompDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@CompDtl" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null" />
        <parameter name="@SvCdeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@CompComments" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null" />
        <parameter name="@fromDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@toDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SV_STUD_COMP_ID]
	, [SV_CDE_COMP_TYPE_ID]
	, [COMP_DATE]
	, [ED_STUD_ID]
	, [ED_ACAD_YEAR_ID]
	, [ED_CODE_SEMESTER_ID]
	, [SA_STF_MEMBER_ID]
	, [ED_COURSE_ID]
	, [COMP_DTL]
	, [SV_CDE_REQ_STATUS_ID]
	, [COMP_COMMENTS]
    FROM
	[dbo].[SV_STUD_COMP]
    WHERE 
	 ([SV_STUD_COMP_ID] = @SvStudCompId OR @SvStudCompId IS NULL)
	AND ([SV_CDE_COMP_TYPE_ID] = @SvCdeCompTypeId OR @SvCdeCompTypeId IS NULL)
	AND ([COMP_DATE] = @CompDate OR @CompDate IS NULL)
	AND ([ED_STUD_ID] = @EdStudId OR @EdStudId IS NULL)
	AND ([ED_ACAD_YEAR_ID] = @EdAcadYearId OR @EdAcadYearId IS NULL)
	AND ([ED_CODE_SEMESTER_ID] = @EdCodeSemesterId OR @EdCodeSemesterId IS NULL)
	AND ([SA_STF_MEMBER_ID] = @SaStfMemberId OR @SaStfMemberId IS NULL)
	AND ([ED_COURSE_ID] = @EdCourseId OR @EdCourseId IS NULL)
	AND ([COMP_DTL] = @CompDtl OR @CompDtl IS NULL)
	AND ([SV_CDE_REQ_STATUS_ID] = @SvCdeReqStatusId OR @SvCdeReqStatusId IS NULL)
	AND ([COMP_COMMENTS] = @CompComments OR @CompComments IS NULL)
  and (@fromDate is null or COMP_DATE>=@fromDate)
  and (@toDate is null or COMP_DATE<=@toDate)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SV_STUD_COMP_ID]
	, [SV_CDE_COMP_TYPE_ID]
	, [COMP_DATE]
	, [ED_STUD_ID]
	, [ED_ACAD_YEAR_ID]
	, [ED_CODE_SEMESTER_ID]
	, [SA_STF_MEMBER_ID]
	, [ED_COURSE_ID]
	, [COMP_DTL]
	, [SV_CDE_REQ_STATUS_ID]
	, [COMP_COMMENTS]
    FROM
	[dbo].[SV_STUD_COMP]
    WHERE 
	 ([SV_STUD_COMP_ID] = @SvStudCompId AND @SvStudCompId is not null)
	OR ([SV_CDE_COMP_TYPE_ID] = @SvCdeCompTypeId AND @SvCdeCompTypeId is not null)
	OR ([COMP_DATE] = @CompDate AND @CompDate is not null)
	OR ([ED_STUD_ID] = @EdStudId AND @EdStudId is not null)
	OR ([ED_ACAD_YEAR_ID] = @EdAcadYearId AND @EdAcadYearId is not null)
	OR ([ED_CODE_SEMESTER_ID] = @EdCodeSemesterId AND @EdCodeSemesterId is not null)
	OR ([SA_STF_MEMBER_ID] = @SaStfMemberId AND @SaStfMemberId is not null)
	OR ([ED_COURSE_ID] = @EdCourseId AND @EdCourseId is not null)
	OR ([COMP_DTL] = @CompDtl AND @CompDtl is not null)
	OR ([SV_CDE_REQ_STATUS_ID] = @SvCdeReqStatusId AND @SvCdeReqStatusId is not null)
	OR ([COMP_COMMENTS] = @CompComments AND @CompComments is not null)
  OR (@fromDate is not null AND COMP_DATE>=@fromDate)
  OR (@toDate is not null AND COMP_DATE<=@toDate)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="SV_STUD_ASK_ADV_RE_GetBySvStudAskAdvId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SV_STUD_ASK_ADV_RE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvStudAskAdvId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[SV_STUD_ASK_ADV_RE_ID],
					[SV_STUD_ASK_ADV_ID],
					[RE_DATE],
					[RE_DTL],
					[SA_STF_MEMBER_ID],
					[ED_STUD_ID],
					[AS_FACULTY_INFO_ID]
				FROM
					[dbo].[SV_STUD_ASK_ADV_RE]
				WHERE
					[SV_STUD_ASK_ADV_ID] = @SvStudAskAdvId
				order by SV_STUD_ASK_ADV_RE_ID desc
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>




    <procedure owner="dbo" name="SV_CODE_EVAL_ITEM_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SV_CODE_EVAL_ITEM table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [SV_CODE_EVAL_ITEM_ID] numeric(6, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([SV_CODE_EVAL_ITEM_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [SV_CODE_EVAL_ITEM_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[SV_CODE_EVAL_ITEM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[SV_CODE_EVAL_ITEM_ID], O.[DESCR_AR], O.[DESCR_EN]
				FROM
				    [dbo].[SV_CODE_EVAL_ITEM] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[SV_CODE_EVAL_ITEM_ID] = PageIndex.[SV_CODE_EVAL_ITEM_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SV_CODE_EVAL_ITEM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="SV_CODE_EVAL_ITEM_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SV_CODE_EVAL_ITEM table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@SvCodeEvalItemId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault="null" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SV_CODE_EVAL_ITEM_ID]
	, [DESCR_AR]
	, [DESCR_EN]
    FROM
	[dbo].[SV_CODE_EVAL_ITEM]
    WHERE 
	 ([SV_CODE_EVAL_ITEM_ID] = @SvCodeEvalItemId OR @SvCodeEvalItemId IS NULL)
	AND ([DESCR_AR] = @DescrAr OR @DescrAr IS NULL)
	AND ([DESCR_EN] = @DescrEn OR @DescrEn IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SV_CODE_EVAL_ITEM_ID]
	, [DESCR_AR]
	, [DESCR_EN]
    FROM
	[dbo].[SV_CODE_EVAL_ITEM]
    WHERE 
	 ([SV_CODE_EVAL_ITEM_ID] = @SvCodeEvalItemId AND @SvCodeEvalItemId is not null)
	OR ([DESCR_AR] = @DescrAr AND @DescrAr is not null)
	OR ([DESCR_EN] = @DescrEn AND @DescrEn is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_CODE_EVAL_ITEM_Find_Dynamicxxx" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SV_CODE_EVAL_ITEM table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [SV_CODE_EVAL_ITEM_ID] numeric(6, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [SV_CODE_EVAL_ITEM_ID] )
				SELECT TOP {3} [SV_CODE_EVAL_ITEM_ID]
				FROM [dbo].[SV_CODE_EVAL_ITEM] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[SV_CODE_EVAL_ITEM_ID], O.[DESCR_AR], O.[DESCR_EN]
				FROM
				    [dbo].[SV_CODE_EVAL_ITEM] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[SV_CODE_EVAL_ITEM_ID] = PageIndex.[SV_CODE_EVAL_ITEM_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[SV_CODE_EVAL_ITEM] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_QUAL_GetByEdStudId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_QUAL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ED_STUD_QUAL].*
				FROM
					[dbo].[ED_STUD_QUAL] left outer join ED_CODE_QUAL on [dbo].[ED_STUD_QUAL].[ED_CODE_QUAL_ID]=ED_CODE_QUAL.ED_CODE_QUAL_ID
				WHERE
					[ED_STUD_ID] = @EdStudId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_CDE_SCHOLARSHIP_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_CDE_SCHOLARSHIP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdeScholarshipId" type="numeric" direction="Output" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@DeducPercent" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@DelFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				declare @flag int 
select @flag=COUNT([ADM_CDE_SCHOLARSHIP].ADM_CDE_SCHOLARSHIP_ID) 
from [ADM_CDE_SCHOLARSHIP]
where [DESCR_AR] = @DescrAr
and [DESCR_EN] = @DescrEn
and [ENT_MAIN_ID] = @EntMainId;

if(@flag=0)
begin
INSERT INTO [dbo].[ADM_CDE_SCHOLARSHIP]
					(
					[DESCR_AR]
					,[DESCR_EN]
					,[DEDUC_PERCENT]
					,[NOTES]
					,[DEL_FLG]
					,[ENT_MAIN_ID]
					)
				VALUES
					(
					@DescrAr
					,@DescrEn
					,@DeducPercent
					,@Notes
					,@DelFlg
					,@EntMainId
					)
					end
					else
					RAISERROR('Don’t repeat data', 16, 1)
				
				-- Get the identity value
				SET @AdmCdeScholarshipId = SCOPE_IDENTITY()
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ADM_CDE_PLACEMENT_EXAM_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_CDE_PLACEMENT_EXAM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				delete from ADM_PLACE_EXAM_COURSE
				where ADM_PLACE_EXAM_COURSE.ADM_CDE_PLACEMENT_EXAM_ID=@AdmCdePlacementExamId;
			
			delete from ADM_APP_PLACEMENT_EXAM
				where ADM_APP_PLACEMENT_EXAM.ADM_PLACE_EXAM_DATETIME_ID in (select  ADM_PLACE_EXAM_DATETIME_ID from ADM_PLACE_EXAM_DATETIME where 
				 ADM_CDE_PLACEMENT_EXAM_ID = @AdmCdePlacementExamId)
			
				DELETE FROM [dbo].[ADM_CDE_PLACEMENT_EXAM] WITH (ROWLOCK) 
				WHERE
					[ADM_CDE_PLACEMENT_EXAM_ID] = @AdmCdePlacementExamId
					
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ADM_REQ_DOC_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_REQ_DOC table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmReqDocId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				delete from ADM_APP_DOC
				where ADM_APP_DOC.ADM_REQ_DOC_ID = @AdmReqDocId;
			
				DELETE FROM [dbo].[ADM_REQ_DOC] WITH (ROWLOCK) 
				WHERE
					[ADM_REQ_DOC_ID] = @AdmReqDocId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ADM_APPLICANT_ID],
					[FULL_NAME_AR],
					[FULL_NAME_EN],
					[BIRTH_DATE],
					[PERM_ADDR],
					[ENT_MAIN_ID],
					[APP_DATE],
					[ED_ACAD_YEAR_ID],
					[ED_CODE_SEMESTER_ID],
					[ADM_CDE_STATUS_ID],
					[IDENT_NUM],
					[GS_CODE_IDENT_TYPE_ID],
					[GS_CODE_GENDER_ID],
					[GS_CDE_MARITAL_STATUS_ID],
					[GS_COUNTRY_INFO_ID_1],
					[GS_COUNTRY_INFO_ID_2],
					[HOSTEL_FLG],
					[ADM_CDE_APP_TYPE_ID],
					[SECONDARY_SCHL_NAME],
					[ADM_CDE_CERT_TYPE_ID],
					[CERTF_DATE],
					[GS_COUNTRY_NODE_ID],
					[STUDY_LANGUAGE],
					[CERTF_DEGREE],
					[CERTF_PERCENT],
					[DOC_RCVD_FLG],
					[FEES_PAYED_FLG],
					[WORK_FLG],
					[ADM_CDE_SCHOLARSHIP_ID],
					[ADM_CDE_SPONSORSHIP_ID],
					[ED_STUD_ID],
					[ADM_APP_REG_ID],
					[ADM_APP_CODE],
          [TRANSFER_FLG],
          [ENT_MAIN_ACCEPT_ID],
          [REFUSE_NOTES]
				FROM
					[dbo].[ADM_APPLICANT]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APPLICANT_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_APPLICANT table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_APPLICANT_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ADM_APPLICANT_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ADM_APPLICANT_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_APPLICANT]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ADM_APPLICANT_ID], O.[FULL_NAME_AR], O.[FULL_NAME_EN], O.[BIRTH_DATE], O.[PERM_ADDR], O.[ENT_MAIN_ID], O.[APP_DATE], O.[ED_ACAD_YEAR_ID], O.[ED_CODE_SEMESTER_ID], O.[ADM_CDE_STATUS_ID], O.[IDENT_NUM], O.[GS_CODE_IDENT_TYPE_ID], O.[GS_CODE_GENDER_ID], O.[GS_CDE_MARITAL_STATUS_ID], O.[GS_COUNTRY_INFO_ID_1], O.[GS_COUNTRY_INFO_ID_2], O.[HOSTEL_FLG], O.[ADM_CDE_APP_TYPE_ID], O.[SECONDARY_SCHL_NAME], O.[ADM_CDE_CERT_TYPE_ID], O.[CERTF_DATE], O.[GS_COUNTRY_NODE_ID], O.[STUDY_LANGUAGE], O.[CERTF_DEGREE], O.[CERTF_PERCENT], O.[DOC_RCVD_FLG], O.[FEES_PAYED_FLG], O.[WORK_FLG], O.[ADM_CDE_SCHOLARSHIP_ID], O.[ADM_CDE_SPONSORSHIP_ID], O.[ED_STUD_ID], O.[ADM_APP_REG_ID], O.[ADM_APP_CODE], O.[TRANSFER_FLG], O.[ENT_MAIN_ACCEPT_ID], O.[REFUSE_NOTES]
				FROM
				    [dbo].[ADM_APPLICANT] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ADM_APPLICANT_ID] = PageIndex.[ADM_APPLICANT_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_APPLICANT]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    


    <procedure owner="dbo" name="ADM_APP_PLACEMENT_EXAM_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ADM_APP_PLACEMENT_EXAM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ADM_APP_PLACEMENT_EXAM_ID],
					[ADM_APPLICANT_ID],
					[ADM_CDE_PLACEMENT_EXAM_ID],
					[EXAM_DATE],
					[MARK],
					[PASS_FLG]
				FROM
					[dbo].[ADM_APP_PLACEMENT_EXAM]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_PLACEMENT_EXAM_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ADM_APP_PLACEMENT_EXAM table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ADM_APP_PLACEMENT_EXAM_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ADM_APP_PLACEMENT_EXAM_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ADM_APP_PLACEMENT_EXAM_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_APP_PLACEMENT_EXAM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ADM_APP_PLACEMENT_EXAM_ID], O.[ADM_APPLICANT_ID], O.[ADM_CDE_PLACEMENT_EXAM_ID], O.[EXAM_DATE], O.[MARK], O.[PASS_FLG]
				FROM
				    [dbo].[ADM_APP_PLACEMENT_EXAM] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ADM_APP_PLACEMENT_EXAM_ID] = PageIndex.[ADM_APP_PLACEMENT_EXAM_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ADM_APP_PLACEMENT_EXAM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="GS_CONTACT_METHOD_D_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the GS_CONTACT_METHOD_D table
-- Table Comment: جدول تفاصيل وسائل الاتصال بجهة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsContactMethodDId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
      
      declare @GsContactMethodHId numeric(9,0)
      
      select @GsContactMethodHId=GS_CONTACT_METHOD_H_ID
      from [dbo].[GS_CONTACT_METHOD_D]
      where [GS_CONTACT_METHOD_D_ID] = @GsContactMethodDId
      
				DELETE FROM [dbo].[GS_CONTACT_METHOD_D] 
				WHERE
					[GS_CONTACT_METHOD_D_ID] = @GsContactMethodDId
          
          if not exists(select 'd' FROM [dbo].[GS_CONTACT_METHOD_D]
          where GS_CONTACT_METHOD_H_ID=@GsContactMethodHId)
          begin
           update SA_STF_MEMBER
           set GS_CONTACT_METHOD_H_ID=null
           where GS_CONTACT_METHOD_H_ID=@GsContactMethodHId
          
           delete from GS_CONTACT_METHOD_H
           where GS_CONTACT_METHOD_H_ID=@GsContactMethodHId
           

          end
          
          
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_REG_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_REG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppRegId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FullName" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@PhoneNum" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@Password" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="" />
        <parameter name="@RegDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
declare @NumE int;
select @NumE = COUNT([ADM_APP_REG].ADM_APP_REG_ID) from [ADM_APP_REG] where [ADM_APP_REG].[E_MAIL] = @EMail ;

declare @NumFN int;
select @NumFN = COUNT([ADM_APP_REG].ADM_APP_REG_ID) from [ADM_APP_REG] where  [ADM_APP_REG].[FULL_NAME] = @FullName;

if(@NumE=0 AND @NumFN=0)
begin
	declare @maxAdmAppRegId numeric(9,0);
	select @maxAdmAppRegId=max(ADM_APP_REG_ID)from ADM_APP_REG 
		if(@maxAdmAppRegId is null)
		  set  @maxAdmAppRegId=0;
		set  @maxAdmAppRegId= @maxAdmAppRegId+1;
		
	INSERT INTO [dbo].[ADM_APP_REG]
		(
		[ADM_APP_REG_ID]
		,[FULL_NAME]
		,[PHONE_NUM]
		,[E_MAIL]
		,[PASSWORD]
		,[REG_DATE]
		)
	VALUES
		(
		@maxAdmAppRegId
		,@FullName
		,@PhoneNum
		,@EMail
		,@Password
		,@RegDate
		)
end
else 
begin
	if(@NumE > 0)
	RAISERROR('Don’t repeat data, This email is already registered befor', 16, 1);
	else
	RAISERROR('Don’t repeat data, This full name is already registered befor', 16, 1);
end
				
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="FEE_CODE_ITEM_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FEE_CODE_ITEM table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [FEE_CODE_ITEM_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([FEE_CODE_ITEM_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [FEE_CODE_ITEM_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_CODE_ITEM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[FEE_CODE_ITEM_ID], O.[FEE_CODE_TYPE_ID], O.[DESCR_AR], O.[DESCR_EN], O.[PG_FLAG]
				FROM
				    [dbo].[FEE_CODE_ITEM] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[FEE_CODE_ITEM_ID] = PageIndex.[FEE_CODE_ITEM_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_CODE_ITEM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_CODE_ITEM_GetByFeeCodeTypeId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_CODE_ITEM table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FEE_CODE_ITEM_ID],
					[FEE_CODE_TYPE_ID],
					[DESCR_AR],
					[DESCR_EN],
					[PG_FLAG]
				FROM
					[dbo].[FEE_CODE_ITEM]
				WHERE
					[FEE_CODE_TYPE_ID] = @FeeCodeTypeId
					and pg_flag=0
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_CODE_ITEM_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FEE_CODE_ITEM table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@FeeCodeItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="null" />
        <parameter name="@PgFlag" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [FEE_CODE_ITEM_ID]
	, [FEE_CODE_TYPE_ID]
	, [DESCR_AR]
	, [DESCR_EN]
	, [PG_FLAG]
    FROM
	[dbo].[FEE_CODE_ITEM]
    WHERE 
	 ([FEE_CODE_ITEM_ID] = @FeeCodeItemId OR @FeeCodeItemId IS NULL)
	AND ([FEE_CODE_TYPE_ID] = @FeeCodeTypeId OR @FeeCodeTypeId IS NULL)
	AND ([DESCR_AR] = @DescrAr OR @DescrAr IS NULL)
	AND ([DESCR_EN] = @DescrEn OR @DescrEn IS NULL)
	AND ([PG_FLAG] = @PgFlag OR @PgFlag IS NULL)
		order by FEE_CODE_ITEM.FEE_CODE_TYPE_ID
,FEE_CODE_ITEM.DESCR_AR
,FEE_CODE_ITEM.DESCR_EN				
  END
  ELSE
  BEGIN
    SELECT
	  [FEE_CODE_ITEM_ID]
	, [FEE_CODE_TYPE_ID]
	, [DESCR_AR]
	, [DESCR_EN]
	, [PG_FLAG]
    FROM
	[dbo].[FEE_CODE_ITEM]
    WHERE 
	 ([FEE_CODE_ITEM_ID] = @FeeCodeItemId AND @FeeCodeItemId is not null)
	OR ([FEE_CODE_TYPE_ID] = @FeeCodeTypeId AND @FeeCodeTypeId is not null)
	OR ([DESCR_AR] = @DescrAr AND @DescrAr is not null)
	OR ([DESCR_EN] = @DescrEn AND @DescrEn is not null)
	OR ([PG_FLAG] = @PgFlag AND @PgFlag is not null)
  order by FEE_CODE_ITEM.FEE_CODE_TYPE_ID
,FEE_CODE_ITEM.DESCR_AR
,FEE_CODE_ITEM.DESCR_EN
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_CDE_DISC_TYPE_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the FEE_CDE_DISC_TYPE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[FEE_CDE_DISC_TYPE_ID],
					[DESCR_AR],
					[DESCR_EN],
					[DISC_PRCNT],
					[STOP_FLG]--,
					--[CONTINUE_FLG]
				FROM
					[dbo].[FEE_CDE_DISC_TYPE]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_CDE_DISC_TYPE_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FEE_CDE_DISC_TYPE table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [FEE_CDE_DISC_TYPE_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([FEE_CDE_DISC_TYPE_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [FEE_CDE_DISC_TYPE_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_CDE_DISC_TYPE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[FEE_CDE_DISC_TYPE_ID], O.[DESCR_AR], O.[DESCR_EN], O.[DISC_PRCNT], O.[STOP_FLG], O.[CONTINUE_FLG]
				FROM
				    [dbo].[FEE_CDE_DISC_TYPE] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[FEE_CDE_DISC_TYPE_ID] = PageIndex.[FEE_CDE_DISC_TYPE_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_CDE_DISC_TYPE]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>

  

    <procedure owner="dbo" name="FEE_STUD_DISC_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FEE_STUD_DISC table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [FEE_STUD_DISC_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([FEE_STUD_DISC_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [FEE_STUD_DISC_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_STUD_DISC]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[FEE_STUD_DISC_ID], O.[DISC_REQ_DATE], O.[AS_FACULTY_INFO_ID], O.[ED_STUD_ID], O.[ED_ACAD_YEAR_ID], O.[ED_CODE_SEMESTER_ID], O.[BROTHER_ED_STUD_ID], O.[FEE_CDE_DISC_TYPE_ID], O.[DISC_PERCENT], O.[START_DATE], O.[END_DATE], O.[CONT_FLG], O.[GS_CODE_REQ_STATUS_ID]
				FROM
				    [dbo].[FEE_STUD_DISC] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[FEE_STUD_DISC_ID] = PageIndex.[FEE_STUD_DISC_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_STUD_DISC]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_STUD_DISC table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudDiscId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@DiscReqDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <!--<parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>-->
        <!--<parameter name="@BrotherEdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>-->
        <parameter name="@FeeCdeDiscTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@DiscPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@StopFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <!--<parameter name="@StartDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>-->
        <!--<parameter name="@EndDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>-->
        <!--<parameter name="@ContFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>-->
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@UpdatedPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@LastUpdated" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxFeeStudDiscId numeric(9,0)
        select  @MaxFeeStudDiscId =max(FEE_STUD_DISC_ID)from FEE_STUD_DISC;
         if( @MaxFeeStudDiscId is null)
            set  @MaxFeeStudDiscId=0;
            
          set  @MaxFeeStudDiscId= @MaxFeeStudDiscId+1;  
          
        
				INSERT INTO [dbo].[FEE_STUD_DISC]
					(
					[FEE_STUD_DISC_ID]
					,[DISC_REQ_DATE]
					,[AS_FACULTY_INFO_ID]
					,[ED_STUD_ID]
					,[ED_ACAD_YEAR_ID]
					--,[ED_CODE_SEMESTER_ID]
					--,[BROTHER_ED_STUD_ID]
					,[FEE_CDE_DISC_TYPE_ID]
					,[DISC_PERCENT]
          ,STOP_FLG
					--,[START_DATE]
					--,[END_DATE]
					--,[CONT_FLG]
					,[GS_CODE_REQ_STATUS_ID]
          ,UPDATED_PERCENT
          ,LAST_UPDATED
					)
				VALUES
					(
					@MaxFeeStudDiscId
					,@DiscReqDate
					,@AsFacultyInfoId
					,@EdStudId
					,@EdAcadYearId
					--,@EdCodeSemesterId
					--,@BrotherEdStudId
					,@FeeCdeDiscTypeId
					,@DiscPercent
          ,@StopFlg
					--,@StartDate
					--,@EndDate
					--,@ContFlg
					,@GsCodeReqStatusId
          ,@UpdatedPercent
          ,@LastUpdated
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_STUD_DISC table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudDiscId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalFeeStudDiscId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@DiscReqDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <!--<parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>-->
        <!--<parameter name="@BrotherEdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>-->
        <parameter name="@FeeCdeDiscTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@DiscPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@StopFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <!--<parameter name="@StartDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>-->
        <!--<parameter name="@EndDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>-->
        <!--<parameter name="@ContFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>-->
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@UpdatedPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@LastUpdated" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[FEE_STUD_DISC]
				SET
					 [DISC_REQ_DATE] = @DiscReqDate
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[ED_STUD_ID] = @EdStudId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					--,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					--,[BROTHER_ED_STUD_ID] = @BrotherEdStudId
					,[FEE_CDE_DISC_TYPE_ID] = @FeeCdeDiscTypeId
					,[DISC_PERCENT] = @DiscPercent
          ,STOP_FLG=@StopFlg
					--,[START_DATE] = @StartDate
					--,[END_DATE] = @EndDate
					--,[CONT_FLG] = @ContFlg
					,[GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId
          ,UPDATED_PERCENT=@UpdatedPercent
          ,LAST_UPDATED=@LastUpdated
				WHERE
[FEE_STUD_DISC_ID] = @FeeStudDiscId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_GetByAsFacultyInfoId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_STUD_DISC table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FEE_STUD_DISC_ID],
					[DISC_REQ_DATE],
					[AS_FACULTY_INFO_ID],
					[ED_STUD_ID],
					[ED_ACAD_YEAR_ID],
					--[ED_CODE_SEMESTER_ID],
					--[BROTHER_ED_STUD_ID],
					[FEE_CDE_DISC_TYPE_ID],
					[DISC_PERCENT],
          STOP_FLG,
					--[START_DATE],
					--[END_DATE],
					--[CONT_FLG],
					[GS_CODE_REQ_STATUS_ID],
          UPDATED_PERCENT,
          LAST_UPDATED
				FROM
					[dbo].[FEE_STUD_DISC]
				WHERE
					[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_GetByEdAcadYearId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_STUD_DISC table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FEE_STUD_DISC_ID],
					[DISC_REQ_DATE],
					[AS_FACULTY_INFO_ID],
					[ED_STUD_ID],
					[ED_ACAD_YEAR_ID],
					--[ED_CODE_SEMESTER_ID],
					--[BROTHER_ED_STUD_ID],
					[FEE_CDE_DISC_TYPE_ID],
					[DISC_PERCENT],
          STOP_FLG
					--[START_DATE],
					--[END_DATE],
					--[CONT_FLG],
					[GS_CODE_REQ_STATUS_ID],
          UPDATED_PERCENT,
          LAST_UPDATED
				FROM
					[dbo].[FEE_STUD_DISC]
				WHERE
					[ED_ACAD_YEAR_ID] = @EdAcadYearId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_GetByFeeCdeDiscTypeId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_STUD_DISC table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeCdeDiscTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FEE_STUD_DISC_ID],
					[DISC_REQ_DATE],
					[AS_FACULTY_INFO_ID],
					[ED_STUD_ID],
					[ED_ACAD_YEAR_ID],
					--[ED_CODE_SEMESTER_ID],
					--[BROTHER_ED_STUD_ID],
					[FEE_CDE_DISC_TYPE_ID],
					[DISC_PERCENT],
          STOP_FLG,
					--[START_DATE],
					--[END_DATE],
					--[CONT_FLG],
					[GS_CODE_REQ_STATUS_ID],
          UPDATED_PERCENT,
          LAST_UPDATED
				FROM
					[dbo].[FEE_STUD_DISC]
				WHERE
					[FEE_CDE_DISC_TYPE_ID] = @FeeCdeDiscTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_GetByGsCodeReqStatusId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FEE_STUD_DISC table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[FEE_STUD_DISC_ID],
					[DISC_REQ_DATE],
					[AS_FACULTY_INFO_ID],
					[ED_STUD_ID],
					[ED_ACAD_YEAR_ID],
					--[ED_CODE_SEMESTER_ID],
					--[BROTHER_ED_STUD_ID],
					[FEE_CDE_DISC_TYPE_ID],
					[DISC_PERCENT],
          STOP_FLG,
					--[START_DATE],
					--[END_DATE],
					--[CONT_FLG],
					[GS_CODE_REQ_STATUS_ID],
          UPDATED_PERCENT,
          LAST_UPDATED
				FROM
					[dbo].[FEE_STUD_DISC]
				WHERE
					[GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>
  
    <procedure owner="dbo" name="FEE_STUD_DISC_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FEE_STUD_DISC table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@FeeStudDiscId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@DiscReqDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@BrotherEdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@FeeCdeDiscTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@DiscPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="null" />
        <parameter name="@StartDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="null" />
        <parameter name="@EndDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="null" />
        <parameter name="@ContFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [FEE_STUD_DISC_ID]
	, [DISC_REQ_DATE]
	, [AS_FACULTY_INFO_ID]
	, [ED_STUD_ID]
	, [ED_ACAD_YEAR_ID]
	--, [ED_CODE_SEMESTER_ID]
	--, [BROTHER_ED_STUD_ID]
	, [FEE_CDE_DISC_TYPE_ID]
	, [DISC_PERCENT]
  ,STOP_FLG
	--, [START_DATE]
	--, [END_DATE]
	--, [CONT_FLG]
	, [GS_CODE_REQ_STATUS_ID]
  ,UPDATED_PERCENT
  ,LAST_UPDATED
    FROM
	[dbo].[FEE_STUD_DISC]
    WHERE 
	 ([FEE_STUD_DISC_ID] = @FeeStudDiscId OR @FeeStudDiscId IS NULL)
	AND ([DISC_REQ_DATE] = @DiscReqDate OR @DiscReqDate IS NULL)
	AND ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
	AND ([ED_STUD_ID] = @EdStudId OR @EdStudId IS NULL)
	AND ([ED_ACAD_YEAR_ID] = @EdAcadYearId OR @EdAcadYearId IS NULL)
	--AND ([ED_CODE_SEMESTER_ID] = @EdCodeSemesterId OR @EdCodeSemesterId IS NULL)
	--AND ([BROTHER_ED_STUD_ID] = @BrotherEdStudId OR @BrotherEdStudId IS NULL)
	AND ([FEE_CDE_DISC_TYPE_ID] = @FeeCdeDiscTypeId OR @FeeCdeDiscTypeId IS NULL)
	AND ([DISC_PERCENT] = @DiscPercent OR @DiscPercent IS NULL)
	--AND ([START_DATE] = @StartDate OR @StartDate IS NULL)
	--AND ([END_DATE] = @EndDate OR @EndDate IS NULL)
	--AND ([CONT_FLG] = @ContFlg OR @ContFlg IS NULL)
	AND ([GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId OR @GsCodeReqStatusId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
		  [FEE_STUD_DISC_ID]
	, [DISC_REQ_DATE]
	, [AS_FACULTY_INFO_ID]
	, [ED_STUD_ID]
	, [ED_ACAD_YEAR_ID]
	--, [ED_CODE_SEMESTER_ID]
	--, [BROTHER_ED_STUD_ID]
	, [FEE_CDE_DISC_TYPE_ID]
	, [DISC_PERCENT]
  ,STOP_FLG
	--, [START_DATE]
	--, [END_DATE]
	--, [CONT_FLG]
	, [GS_CODE_REQ_STATUS_ID]
  ,UPDATED_PERCENT
  ,LAST_UPDATED
    FROM
	[dbo].[FEE_STUD_DISC]
    WHERE 
	 ([FEE_STUD_DISC_ID] = @FeeStudDiscId AND @FeeStudDiscId is not null)
	OR ([DISC_REQ_DATE] = @DiscReqDate AND @DiscReqDate is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	OR ([ED_STUD_ID] = @EdStudId AND @EdStudId is not null)
	OR ([ED_ACAD_YEAR_ID] = @EdAcadYearId AND @EdAcadYearId is not null)
	--OR ([ED_CODE_SEMESTER_ID] = @EdCodeSemesterId AND @EdCodeSemesterId is not null)
	--OR ([BROTHER_ED_STUD_ID] = @BrotherEdStudId AND @BrotherEdStudId is not null)
	OR ([FEE_CDE_DISC_TYPE_ID] = @FeeCdeDiscTypeId AND @FeeCdeDiscTypeId is not null)
	OR ([DISC_PERCENT] = @DiscPercent AND @DiscPercent is not null)
	--OR ([START_DATE] = @StartDate AND @StartDate is not null)
	--OR ([END_DATE] = @EndDate AND @EndDate is not null)
	--OR ([CONT_FLG] = @ContFlg AND @ContFlg is not null)
	OR ([GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId AND @GsCodeReqStatusId is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FEE_STUD_DISC table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [FEE_STUD_DISC_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [FEE_STUD_DISC_ID] )
				SELECT TOP {3} [FEE_STUD_DISC_ID]
				FROM [dbo].[FEE_STUD_DISC] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[FEE_STUD_DISC_ID], O.[DISC_REQ_DATE], O.[AS_FACULTY_INFO_ID], O.[ED_STUD_ID], O.[ED_ACAD_YEAR_ID], O.[ED_CODE_SEMESTER_ID], O.[BROTHER_ED_STUD_ID], O.[FEE_CDE_DISC_TYPE_ID], O.[DISC_PERCENT], O.[START_DATE], O.[END_DATE], O.[CONT_FLG], O.[GS_CODE_REQ_STATUS_ID]
				FROM
				    [dbo].[FEE_STUD_DISC] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[FEE_STUD_DISC_ID] = PageIndex.[FEE_STUD_DISC_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[FEE_STUD_DISC] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_COURSE_TCHNG_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_COURSE_TCHNG table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseTchngId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeCourseTeachingId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@NoHours" type="decimal" direction="Input" size="5" precision="3" scale="1" param="(3, 1)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
  declare @CurrentCourseTchngId numeric
  
   select @CurrentCourseTchngId= ED_COURSE_TCHNG_ID from [dbo].[ED_COURSE_TCHNG] where ED_COURSE_ID=@EdCourseId and
   ED_CODE_COURSE_TEACHING_ID=@EdCodeCourseTeachingId
    if(@CurrentCourseTchngId is not null)
      Begin
            UPDATE
					      [dbo].[ED_COURSE_TCHNG]
				      SET
					      [NO_HOURS] = @NoHours
				      WHERE
              [ED_COURSE_TCHNG_ID] = @CurrentCourseTchngId 
      End
   else
      Begin
          declare @MaxCourseTchngId numeric
               select @MaxCourseTchngId =max(ED_COURSE_TCHNG_ID) from [dbo].[ED_COURSE_TCHNG]
               if(@MaxCourseTchngId  is null)
                 set @MaxCourseTchngId =0;
               set @MaxCourseTchngId =@MaxCourseTchngId +1;
               
               

				        INSERT INTO [dbo].[ED_COURSE_TCHNG]
					        (
					        [ED_COURSE_TCHNG_ID]
					        ,[ED_COURSE_ID]
					        ,[ED_CODE_COURSE_TEACHING_ID]
					        ,[NO_HOURS]
					        )
				        VALUES
					        (
					         @MaxCourseTchngId
					        ,@EdCourseId
					        ,@EdCodeCourseTeachingId
					        ,@NoHours
					        )
			   	End
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="GS_CODE_CURRENCY_GetByCurrencyDescrAr">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GS_CODE_CURRENCY table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@CurrencyDescrAr" type="nvarchar" direction="Input" size="70" precision="0" scale="0" param="(70)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[GS_CODE_CURRENCY_ID],
					[CURRENCY_DESCR_AR],
					[CURRENCY_DESCR_EN],
					[CURRENCY_CODE],
					[IS_CURRENCY_LOCAL]
				FROM
					[dbo].[GS_CODE_CURRENCY]
				WHERE
					[CURRENCY_DESCR_AR] = @CurrencyDescrAr
				SELECT @@ROWCOUNT
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_FACULTY_RULE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_FACULTY_RULE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacultyRuleId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ForeignFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeNatureFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
			  
			   if exists (select 'H' from FEE_FACULTY_RULE where 
						 FEE_FACULTY_RULE.ENT_MAIN_ID= @EntMainId
						 and( FEE_FACULTY_RULE.ED_CODE_LEVEL_ID=@EdCodeLevelId or (FEE_FACULTY_RULE.ED_CODE_LEVEL_ID is null and @EdCodeLevelId is null))
						 and (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=@EdCodeSemesterTypeId or (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID is null and @EdCodeSemesterTypeId is null) )
						 and( FEE_FACULTY_RULE.FEE_CODE_TYPE_ID=@FeeCodeTypeId )
						 and FEE_FACULTY_RULE.FEE_NATURE_FLG=@FeeNatureFlg
						 and  FEE_FACULTY_RULE.FOREIGN_FLG=@ForeignFlg
              )
              begin
                RAISERROR('ERR_FacultyRule_REPEAT',16,-1)
                RETURN 
              end
			  
			    if exists (select 'H' from FEE_FACULTY_RULE where 
						 FEE_FACULTY_RULE.ENT_MAIN_ID= @EntMainId
						 and ((@ForeignFlg=1 and FEE_FACULTY_RULE.FOREIGN_FLG=2) or (@ForeignFlg=0 and FEE_FACULTY_RULE.FOREIGN_FLG=2)or (@ForeignFlg=2 and FEE_FACULTY_RULE.FOREIGN_FLG=1)or (@ForeignFlg=2 and FEE_FACULTY_RULE.FOREIGN_FLG=0))
						 and( FEE_FACULTY_RULE.FEE_CODE_TYPE_ID=@FeeCodeTypeId )
						 and (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=@EdCodeSemesterTypeId or (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID is null and @EdCodeSemesterTypeId is null) )
						 and FEE_FACULTY_RULE.FEE_NATURE_FLG=@FeeNatureFlg
              )
              begin
                RAISERROR('ERR_FacultyRule_REPEAT',16,-1)
                RETURN 
              end
              
                if exists (select 'H' from FEE_FACULTY_RULE where 
						 FEE_FACULTY_RULE.ENT_MAIN_ID= @EntMainId
						 and( FEE_FACULTY_RULE.FEE_CODE_TYPE_ID=@FeeCodeTypeId )
             and FEE_FACULTY_RULE.FEE_NATURE_FLG=@FeeNatureFlg
						 and ((@FeeNatureFlg=0 and  FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=1)or (@FeeNatureFlg=1 and FEE_FACULTY_RULE.FEE_NATURE_FLG=0 and FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=null))
              )
              begin
                RAISERROR('ERR_FacultyRule_REPEAT',16,-1)
                RETURN 
              end
              
              declare @NewAsFacultyInfoId numeric(9,0)
				      select @NewAsFacultyInfoId=as_faculty_info_id from ENTITY_MAIN where ENT_MAIN_ID=@EntMainId 
             declare @newEdCodeLevel numeric(2,0)
             declare @NewEdCodeSemesterType numeric(9,0)
             if(@EdCodeLevelId=0)
               set @newEdCodeLevel=NULL
             else
                 set @newEdCodeLevel=@EdCodeLevelId
                 
             if(@EdCodeSemesterTypeId=0)
               set @NewEdCodeSemesterType=NULL
             else
                 set @NewEdCodeSemesterType=@EdCodeSemesterTypeId
                 
				 declare @MaxFeeFacultyRuleId numeric(9,0)
          select  @MaxFeeFacultyRuleId =max(FEE_FACULTY_RULE_id)from FEE_FACULTY_RULE;
         if( @MaxFeeFacultyRuleId is null)
            set  @MaxFeeFacultyRuleId=0;
          set  @MaxFeeFacultyRuleId= @MaxFeeFacultyRuleId+1;  
				INSERT INTO [dbo].[FEE_FACULTY_RULE]
					(
					[FEE_FACULTY_RULE_ID]
					,[ENT_MAIN_ID]
					,[AS_FACULTY_INFO_ID]
					,[FOREIGN_FLG]
					,[GS_CODE_CURRENCY_ID]
					,[FEE_NATURE_FLG]
					,[ED_CODE_SEMESTER_TYPE_ID]
					,[ED_CODE_LEVEL_ID]
					,[FEE_CODE_TYPE_ID]
					)
				VALUES
					(
					@MaxFeeFacultyRuleId
					,@EntMainId
					,@NewAsFacultyInfoId
					,@ForeignFlg
					,@GsCodeCurrencyId
					,@FeeNatureFlg
					,@NewEdCodeSemesterType
					,@newEdCodeLevel
					,@FeeCodeTypeId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_FACULTY_RULE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_FACULTY_RULE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacultyRuleId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalFeeFacultyRuleId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ForeignFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeNatureFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeLevelId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				declare @TempAsFacultyInfoId numeric(5,0)
				select @TempAsFacultyInfoId=as_faculty_info_id from ENTITY_MAIN where ENT_MAIN_ID=@EntMainId 
			
				-- Modify the updatable columns
				if exists (select 'H' from FEE_FACULTY_RULE where 
						 FEE_FACULTY_RULE.ENT_MAIN_ID= @EntMainId
						 and( FEE_FACULTY_RULE.ED_CODE_LEVEL_ID=@EdCodeLevelId or (FEE_FACULTY_RULE.ED_CODE_LEVEL_ID is null and @EdCodeLevelId is null))
						 and (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=@EdCodeSemesterTypeId or (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID is null and @EdCodeSemesterTypeId is null) )
						 and( FEE_FACULTY_RULE.FEE_CODE_TYPE_ID=@FeeCodeTypeId )
						 and FEE_FACULTY_RULE.FEE_NATURE_FLG=@FeeNatureFlg
						 and  FEE_FACULTY_RULE.FOREIGN_FLG=@ForeignFlg
						 and FEE_FACULTY_RULE.FEE_FACULTY_RULE_id!=@FeeFacultyRuleId
              )
              begin
                RAISERROR('ERR_FacultyRule_REPEAT',16,-1)
                RETURN 
              end
				
				if exists (select 'H' from FEE_FACULTY_RULE where 
						 FEE_FACULTY_RULE.ENT_MAIN_ID= @EntMainId
						 and ((@ForeignFlg=1 and FEE_FACULTY_RULE.FOREIGN_FLG=2) or (@ForeignFlg=0 and FEE_FACULTY_RULE.FOREIGN_FLG=2)or (@ForeignFlg=2 and FEE_FACULTY_RULE.FOREIGN_FLG=1)or (@ForeignFlg=2 and FEE_FACULTY_RULE.FOREIGN_FLG=0))
						 and( FEE_FACULTY_RULE.FEE_CODE_TYPE_ID=@FeeCodeTypeId )
						 and (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=@EdCodeSemesterTypeId or (FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID is null and @EdCodeSemesterTypeId is null) )
						 and FEE_FACULTY_RULE.FEE_NATURE_FLG=@FeeNatureFlg
             and FEE_FACULTY_RULE.FEE_FACULTY_RULE_id!=@FeeFacultyRuleId
              )
              begin
                RAISERROR('ERR_FacultyRule_REPEAT',16,-1)
                RETURN 
              end
				        if exists (select 'H' from FEE_FACULTY_RULE where 
						 FEE_FACULTY_RULE.ENT_MAIN_ID= @EntMainId
						 and( FEE_FACULTY_RULE.FEE_CODE_TYPE_ID=@FeeCodeTypeId )
             and FEE_FACULTY_RULE.FEE_NATURE_FLG=@FeeNatureFlg
             and FEE_FACULTY_RULE.FEE_FACULTY_RULE_id!=@FeeFacultyRuleId
						 and ((@FeeNatureFlg=0 and  FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=1)or (@FeeNatureFlg=1 and FEE_FACULTY_RULE.FEE_NATURE_FLG=0 and FEE_FACULTY_RULE.ED_CODE_SEMESTER_TYPE_ID=null))
              )
              begin
                RAISERROR('ERR_FacultyRule_REPEAT',16,-1)
                RETURN 
              end   
              
               declare @newEdCodeLevel numeric(2,0)
             declare @NewEdCodeSemesterType numeric(9,0)
             if(@EdCodeLevelId=0)
               set @newEdCodeLevel=NULL
             else
                 set @newEdCodeLevel=@EdCodeLevelId
                 
             if(@EdCodeSemesterTypeId=0)
               set @NewEdCodeSemesterType=NULL
             else
                 set @NewEdCodeSemesterType=@EdCodeSemesterTypeId
          
          
              declare @CurrentAcadYear numeric(7,0)
              declare @CurrentSemester numeric(7,0)
              select @CurrentAcadYear=ED_ACAD_YEAR_id from ED_ACAD_YEAR where ED_ACAD_YEAR.CURRENT_YEAR=1
              select @CurrentSemester=ED_CODE_SEMESTER_id from ED_SEMESTER_OPEN 
              where ED_SEMESTER_OPEN.IS_CURRENT=1 and ENT_MAIN_ID = @EntMainId
              
            if exists (select 'H' from FEE_STUD_FEE_ITEM 
                        inner join FEE_FACULTY_ITEM on FEE_FACULTY_ITEM.FEE_FACULTY_ITEM_ID=FEE_STUD_FEE_ITEM.FEE_FACULTY_ITEM_ID
                        where 
                        FEE_STUD_FEE_ITEM.ED_ACAD_YEAR_ID=@CurrentAcadYear
                        and FEE_STUD_FEE_ITEM.ED_CODE_SEMESTER_ID=@CurrentSemester
						and FEE_FACULTY_ITEM.FEE_FACULTY_RULE_ID = @FeeFacultyRuleId 
						 )
              begin
                RAISERROR('ERR_CantUpdateItemsLoaded',16,-1)
                RETURN 
          
          
              end             
          
				UPDATE
					[dbo].[FEE_FACULTY_RULE]
				SET
					[FEE_FACULTY_RULE_ID] = @FeeFacultyRuleId
					,[ENT_MAIN_ID] = @EntMainId
					,[AS_FACULTY_INFO_ID] = @TempAsFacultyInfoId
					,[FOREIGN_FLG] = @ForeignFlg
					,[GS_CODE_CURRENCY_ID] = @GsCodeCurrencyId
					,[FEE_NATURE_FLG] = @FeeNatureFlg
					,[ED_CODE_SEMESTER_TYPE_ID] = @NewEdCodeSemesterType
					,[ED_CODE_LEVEL_ID] = @newEdCodeLevel
					,[FEE_CODE_TYPE_ID] = @FeeCodeTypeId
				WHERE
           [FEE_FACULTY_RULE_ID] = @FeeFacultyRuleId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_FACULTY_RULE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FEE_FACULTY_RULE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacultyRuleId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
                      
              if exists (select 'H' from FEE_FACULTY_ITEM where 
						FEE_FACULTY_RULE_ID = @FeeFacultyRuleId 
						 )
              begin
                RAISERROR('ERR_FeeFacItemExists',16,-1)
                RETURN 
          
          
              end  
        
				DELETE FROM [dbo].[FEE_FACULTY_RULE] WITH (ROWLOCK) 
				WHERE
					[FEE_FACULTY_RULE_ID] = @FeeFacultyRuleId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_FACULTY_ITEM_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_FACULTY_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@FeeFacultyRuleId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@FeeCodeItemId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@FeeItemValue" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
        <parameter name="@ItemOrder" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StopFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StartDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@EndDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@ChFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
        <parameter name="@CourseFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
        <parameter name="@ChBoundary" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AllCourseFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@DiscFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RefundFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AdmYearFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@NewComerFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_FeeFacultyItemId numeric(7, 0)
				SELECT @V_FeeFacultyItemId = ISNULL(MAX(FEE_FACULTY_ITEM_ID), 0) + 1 FROM [dbo].[FEE_FACULTY_ITEM];
        
				DECLARE @V_ItemOrder numeric(7, 0)
				SELECT @V_ItemOrder = ISNULL(MAX(ITEM_ORDER), 0) + 1 FROM [dbo].[FEE_FACULTY_ITEM] WHERE FEE_FACULTY_RULE_ID=@FeeFacultyRuleId;
        
        IF EXISTS(SELECT 1 FROM FEE_FACULTY_ITEM WHERE FEE_CODE_ITEM_ID= @FeeCodeItemId AND FEE_FACULTY_RULE_ID=@FeeFacultyRuleId)
        BEGIN
          RAISERROR('ERR_FeeCodeItem_REPEAT',16,-1)
          RETURN 
        END;
				
				INSERT INTO [dbo].[FEE_FACULTY_ITEM]
					(
					[FEE_FACULTY_ITEM_ID]
					,[ENT_MAIN_ID]
					,[FEE_FACULTY_RULE_ID]
					,[FEE_CODE_ITEM_ID]
					,[FEE_ITEM_VALUE]
					,[ITEM_ORDER]
					,[STOP_FLG]
					,[START_DATE]
					,[END_DATE]
					,[CH_FEE]
					,[COURSE_FEE]
					,[CH_BOUNDARY]
					,[ALL_COURSE_FLG]
					,[DISC_FLG]
					,[REFUND_FLG]
					,[ADM_YEAR_FLG]
					,[NEW_COMER_FLG]
					)
				VALUES
					(
					@V_FeeFacultyItemId
					,@EntMainId
					,@FeeFacultyRuleId
					,@FeeCodeItemId
					,@FeeItemValue
					,@V_ItemOrder
					,@StopFlg
					,@StartDate
					,@EndDate
					,@ChFee
					,@CourseFee
					,@ChBoundary
					,@AllCourseFlg
					,@DiscFlg
					,@RefundFlg
					,@AdmYearFlg
					,@NewComerFlg
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_FACULTY_ITEM_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_FACULTY_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@OriginalFeeFacultyItemId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@FeeFacultyRuleId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@FeeCodeItemId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@FeeItemValue" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
        <parameter name="@ItemOrder" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@StopFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@StartDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@EndDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@ChFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
        <parameter name="@CourseFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault=""/>
        <parameter name="@ChBoundary" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@AllCourseFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@DiscFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@RefundFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AdmYearFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@NewComerFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				  if exists (select 'H' from FEE_FACULTY_ITEM where 
						     FEE_FACULTY_ITEM.ITEM_ORDER= @ItemOrder 
							 and FEE_FACULTY_RULE_ID=@FeeFacultyRuleId
							 and [FEE_FACULTY_ITEM_ID] != @FeeFacultyItemId 
                            )
              begin
                RAISERROR('ERR_RuleItemOrder_REPEAT',16,-1)
                RETURN 
              end
				
				
			  if exists (select 'H' from FEE_FACULTY_ITEM where 
						 FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID= @FeeCodeItemId 
						 and FEE_FACULTY_RULE_ID=@FeeFacultyRuleId
						 and [FEE_FACULTY_ITEM_ID] != @FeeFacultyItemId 
						 )
              begin
                RAISERROR('ERR_FeeCodeItem_REPEAT',16,-1)
                RETURN 
              end
				
        IF EXISTS(SELECT 1 FROM FEE_FACULTY_ITEM WHERE ITEM_ORDER= @ItemOrder AND FEE_FACULTY_RULE_ID=@FeeFacultyRuleId AND FEE_FACULTY_ITEM_ID != @FeeFacultyItemId)
        BEGIN
          RAISERROR('ERR_RuleItemOrder_REPEAT',16,-1)
          RETURN 
        END;
        
        IF EXISTS(SELECT 1 FROM FEE_FACULTY_ITEM WHERE FEE_CODE_ITEM_ID= @FeeCodeItemId AND FEE_FACULTY_RULE_ID=@FeeFacultyRuleId AND FEE_FACULTY_ITEM_ID != @FeeFacultyItemId)
        BEGIN
          RAISERROR('ERR_FeeCodeItem_REPEAT',16,-1)
          RETURN 
        END;
        
				-- Modify the updatable columns
				UPDATE
					[dbo].[FEE_FACULTY_ITEM]
				SET
					[FEE_FACULTY_ITEM_ID] = @FeeFacultyItemId
					,[ENT_MAIN_ID] = @EntMainId
					,[FEE_FACULTY_RULE_ID] = @FeeFacultyRuleId
					,[FEE_CODE_ITEM_ID] = @FeeCodeItemId
					,[FEE_ITEM_VALUE] = @FeeItemValue
					,[ITEM_ORDER] = @ItemOrder
					,[STOP_FLG] = @StopFlg
					,[START_DATE] = @StartDate
					,[END_DATE] = @EndDate
					,[CH_FEE] = @ChFee
					,[COURSE_FEE] = @CourseFee
					,[CH_BOUNDARY] = @ChBoundary
					,[ALL_COURSE_FLG] = @AllCourseFlg
					,[DISC_FLG] = @DiscFlg
					,[REFUND_FLG] = @RefundFlg
					,[ADM_YEAR_FLG] = @AdmYearFlg
					,[NEW_COMER_FLG] = @NewComerFlg
				WHERE
[FEE_FACULTY_ITEM_ID] = @FeeFacultyItemId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_FACULTY_ITEM_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FEE_FACULTY_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
         if exists (select 'H' from FEE_FAC_ITEM_ADM_YEAR where 
						[FEE_FACULTY_ITEM_ID] = @FeeFacultyItemId 
						 )
              begin
                RAISERROR('ERR_FeeFacItemAdmYearExists',16,-1)
                RETURN 
              end
              
         if exists (select 'H' from FEE_STUD_FEE_ITEM where 
						[FEE_FACULTY_ITEM_ID] = @FeeFacultyItemId 
						 )
              begin
                RAISERROR('ERR_FeeStudFeeItemExists',16,-1)
                RETURN 
              end  
        
				DELETE FROM [dbo].[FEE_FACULTY_ITEM] WITH (ROWLOCK) 
				WHERE
					[FEE_FACULTY_ITEM_ID] = @FeeFacultyItemId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_COURSE_EXP_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_COURSE_EXP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeCourseExpId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ChFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="" />
        <parameter name="@CourseFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				if exists (select 'H' from FEE_COURSE_EXP where 
						 FEE_COURSE_EXP.ED_COURSE_ID= @EdCourseId  and FEE_FACULTY_ITEM_ID=@FeeFacultyItemId)
              begin
                RAISERROR('ERR_FeeCourseExp_REPEAT',16,-1)
                RETURN 
              end
				
				declare @maxFeeCourseExpId numeric(9,0);
                select @maxFeeCourseExpId=max(Fee_Course_Exp_ID)from Fee_Course_Exp 
                    if(@maxFeeCourseExpId is null)
                      set  @maxFeeCourseExpId=0;
                    set  @maxFeeCourseExpId= @maxFeeCourseExpId+1;
				
				
				INSERT INTO [dbo].[FEE_COURSE_EXP]
					(
					[FEE_COURSE_EXP_ID]
					,[FEE_FACULTY_ITEM_ID]
					,[ED_COURSE_ID]
					,[CH_FEE]
					,[COURSE_FEE]
					)
				VALUES
					(
					@maxFeeCourseExpId
					,@FeeFacultyItemId
					,@EdCourseId
					,@ChFee
					,@CourseFee
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_COURSE_EXP_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_COURSE_EXP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeCourseExpId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalFeeCourseExpId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@ChFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="" />
        <parameter name="@CourseFee" type="numeric" direction="Input" size="5" precision="8" scale="2" param="(8, 2)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				if exists (select 'H' from FEE_COURSE_EXP where 
						 FEE_COURSE_EXP.ED_COURSE_ID= @EdCourseId  and FEE_FACULTY_ITEM_ID=@FeeFacultyItemId
						 and FEE_COURSE_EXP_ID != @FeeCourseExpId)
              begin
                RAISERROR('ERR_FeeCourseExp_REPEAT',16,-1)
                RETURN 
              end
				-- Modify the updatable columns
				UPDATE
					[dbo].[FEE_COURSE_EXP]
				SET
					[FEE_COURSE_EXP_ID] = @FeeCourseExpId
					,[FEE_FACULTY_ITEM_ID] = @FeeFacultyItemId
					,[ED_COURSE_ID] = @EdCourseId
					,[CH_FEE] = @ChFee
					,[COURSE_FEE] = @CourseFee
				WHERE
[FEE_COURSE_EXP_ID] = @OriginalFeeCourseExpId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_STUD_FEE_ITEM_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_STUD_FEE_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudFeeItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeItemValue" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="" />
        <parameter name="@RemainAmount" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
           declare @MaxFeeStudFeeItemId numeric(9,0)
        select  @MaxFeeStudFeeItemId =max(FEE_STUD_FEE_ITEM_ID)from FEE_STUD_FEE_ITEM;
         if( @MaxFeeStudFeeItemId is null)
            set  @MaxFeeStudFeeItemId=0;
            
          set  @MaxFeeStudFeeItemId= @MaxFeeStudFeeItemId+1;  
          
         declare @FeeCodeItemId numeric(4, 0)
        
        set @FeeCodeItemId=null;
        
        if(@FeeFacultyItemId is not null)
           select @FeeCodeItemId=FEE_FACULTY_ITEM.FEE_CODE_ITEM_ID from FEE_FACULTY_ITEM where FEE_FACULTY_ITEM_ID=@FeeFacultyItemId
        
        
				INSERT INTO [dbo].[FEE_STUD_FEE_ITEM]
					(
					[FEE_STUD_FEE_ITEM_ID]
					,[AS_FACULTY_INFO_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[ED_STUD_ID]
					,[FEE_CODE_TYPE_ID]
					,[FEE_FACULTY_ITEM_ID]
					,[FEE_ITEM_VALUE]
					,[REMAIN_AMOUNT]
					,[GS_CODE_CURRENCY_ID]
          ,FEE_CODE_ITEM_ID
					)
				VALUES
					(
					@MaxFeeStudFeeItemId
					,@AsFacultyInfoId
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@EdStudId
					,@FeeCodeTypeId
					,@FeeFacultyItemId
					,@FeeItemValue
					,@RemainAmount
					,@GsCodeCurrencyId
          ,@FeeCodeItemId
					)
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_STUD_FEE_ITEM_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FEE_STUD_FEE_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudFeeItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
        
        
        if exists (select 'H' from FEE_STUD_VOUCHER_ITEM where FEE_STUD_FEE_ITEM_ID=@FeeStudFeeItemId)
         begin
              RAISERROR('ERR_VouchureExists',16,-1)
              RETURN 
          end
        
				DELETE FROM [dbo].[FEE_STUD_FEE_ITEM] WITH (ROWLOCK) 
				WHERE
					[FEE_STUD_FEE_ITEM_ID] = @FeeStudFeeItemId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_STUD_VOUCHER_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FEE_STUD_VOUCHER table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [FEE_STUD_VOUCHER_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([FEE_STUD_VOUCHER_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [FEE_STUD_VOUCHER_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_STUD_VOUCHER]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[FEE_STUD_VOUCHER_ID], O.[VOUCHER_SERIAL], O.[VOUCHER_DATE], O.[ED_STUD_ID], O.[ED_ACAD_YEAR_ID], O.[AS_FACULTY_INFO_ID], O.[TOTAL_AMOUNT], O.[GS_CODE_CURRENCY_ID], O.[GS_CODE_PAY_METHOD_ID], O.[FEE_CODE_BANK_ID], O.[RECEIPT_DATE], O.[RECEIPT_NUM], O.[PAY_FLG], O.[FEE_CODE_TYPE_ID], O.[BALANCE_FLG]
				FROM
				    [dbo].[FEE_STUD_VOUCHER] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[FEE_STUD_VOUCHER_ID] = PageIndex.[FEE_STUD_VOUCHER_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_STUD_VOUCHER]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_VOUCHER_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_STUD_VOUCHER table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudVoucherId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@VoucherSerial" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@VoucherDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@TotalAmount" type="numeric" direction="Input" size="9" precision="18" scale="2" param="(18, 2)" nulldefault="" />
        <parameter name="@GsCodeCurrencyId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@GsCodePayMethodId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@FeeCodeBankId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ReceiptDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@ReceiptNum" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@PayFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@FeeCodeTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@BalanceFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
           declare @MaxFeeStudVoucherId numeric(9,0)
           select  @MaxFeeStudVoucherId =ISNULL(max(FEE_STUD_VOUCHER_ID), 0) + 1 from FEE_STUD_VOUCHER;
          
          declare @MaxVoucherSerial numeric(9,0)
          select @MaxVoucherSerial=ISNULL(max(VOUCHER_SERIAL), 0) + 1 from FEE_STUD_VOUCHER

          INSERT INTO [dbo].[FEE_STUD_VOUCHER]
					(
					[FEE_STUD_VOUCHER_ID]
					,[VOUCHER_SERIAL]
					,[VOUCHER_DATE]
					,[ED_STUD_ID]
					,[ED_ACAD_YEAR_ID]
					,[AS_FACULTY_INFO_ID]
					,[TOTAL_AMOUNT]
					,[GS_CODE_CURRENCY_ID]
					,[GS_CODE_PAY_METHOD_ID]
					,[FEE_CODE_BANK_ID]
					,[RECEIPT_DATE]
					,[RECEIPT_NUM]
					,[PAY_FLG]
					,[FEE_CODE_TYPE_ID]
					,[BALANCE_FLG]
					)
				VALUES
					(
					@MaxFeeStudVoucherId
					,@MaxVoucherSerial
					,@VoucherDate
					,@EdStudId
					,@EdAcadYearId
					,@AsFacultyInfoId
					,@TotalAmount
					,@GsCodeCurrencyId
					,@GsCodePayMethodId
					,@FeeCodeBankId
					,@ReceiptDate
					,@ReceiptNum
					,@PayFlg
					,@FeeCodeTypeId
					,@BalanceFlg
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_VOUCHER_Update" grant="">

    </procedure>

    <procedure owner="dbo" name="FEE_STUD_VOUCHER_ITEM_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the FEE_STUD_VOUCHER_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[FEE_STUD_VOUCHER_ITEM_ID],
					[FEE_STUD_VOUCHER_ID],
					[FEE_STUD_FEE_ITEM_ID],
					[FEE_CURRENT_AMOUNT],
					[PAY_AMOUNT],
					[DISC_AMOUNT],
					[DUE_DATE],
					[PENALTY_AMOUNT],
          ITEM_COUNT
				FROM
					[dbo].[FEE_STUD_VOUCHER_ITEM]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_VOUCHER_ITEM_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FEE_STUD_VOUCHER_ITEM table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [FEE_STUD_VOUCHER_ITEM_ID] numeric(9, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([FEE_STUD_VOUCHER_ITEM_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [FEE_STUD_VOUCHER_ITEM_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_STUD_VOUCHER_ITEM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[FEE_STUD_VOUCHER_ITEM_ID], O.[FEE_STUD_VOUCHER_ID], O.[FEE_STUD_FEE_ITEM_ID], O.[FEE_CURRENT_AMOUNT], O.[PAY_AMOUNT], O.[DISC_AMOUNT], O.[DUE_DATE], O.[PENALTY_AMOUNT]
				FROM
				    [dbo].[FEE_STUD_VOUCHER_ITEM] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[FEE_STUD_VOUCHER_ITEM_ID] = PageIndex.[FEE_STUD_VOUCHER_ITEM_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FEE_STUD_VOUCHER_ITEM]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_VOUCHER_ITEM_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_STUD_VOUCHER_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudVoucherItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@FeeStudVoucherId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@FeeStudFeeItemId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@FeeCurrentAmount" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
        <parameter name="@PayAmount" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
        <parameter name="@DueDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@PenaltyAmount" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
        <parameter name="@DiscAmount" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault=""/>
        <parameter name="@ItemCount" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
        IF EXISTS (SELECT 1 FROM [FEE_STUD_VOUCHER_ITEM] WHERE [FEE_STUD_VOUCHER_ID]=@FeeStudVoucherId AND [FEE_STUD_FEE_ITEM_ID] = @FeeStudFeeItemId)
        BEGIN
          RAISERROR('ERR_NO_REPEAT_VOUCHER_ITEM',16,-1)
          RETURN 	
        END;
				
				DECLARE @V_FeeStudVoucherItemId numeric(9, 0)
				SELECT @V_FeeStudVoucherItemId = ISNULL(MAX(FEE_STUD_VOUCHER_ITEM_ID), 0) + 1 FROM [dbo].[FEE_STUD_VOUCHER_ITEM];
				
				INSERT INTO [dbo].[FEE_STUD_VOUCHER_ITEM]
					(
					[FEE_STUD_VOUCHER_ITEM_ID]
					,[FEE_STUD_VOUCHER_ID]
					,[FEE_STUD_FEE_ITEM_ID]
					,[FEE_CURRENT_AMOUNT]
					,[PAY_AMOUNT]
					,[DUE_DATE]
					,[PENALTY_AMOUNT]
					,[DISC_AMOUNT]
					,[ITEM_COUNT]
					)
				VALUES
					(
					@V_FeeStudVoucherItemId
					,@FeeStudVoucherId
					,@FeeStudFeeItemId
					,@FeeCurrentAmount
					,@PayAmount
					,@DueDate
					,@PenaltyAmount
					,@DiscAmount
					,@ItemCount
					)
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_CLRNC_REQ_Get_List">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ED_STUD_CLRNC_REQ table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				SELECT
					[ED_STUD_CLRNC_REQ_ID],
					[REQ_DATE],
					[REQ_STATUS_DATE],
					[ED_STUD_SEMESTER_ID],
					[GS_CDE_CLRNC_REASON_ID],
					[GS_CODE_REQ_STATUS_ID],
					[WITHDRAW_DATE],
					[WITHDRAW_NAME],
					[NOTES]
				FROM
					[dbo].[ED_STUD_CLRNC_REQ]
					
				SELECT @@ROWCOUNT
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_CLRNC_REQ_GetPaged">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_CLRNC_REQ table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
        <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
        <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" />
      </parameters>
      <body>
        <![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_CLRNC_REQ_ID] numeric(7, 0) 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ED_STUD_CLRNC_REQ_ID])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ED_STUD_CLRNC_REQ_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_CLRNC_REQ]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ED_STUD_CLRNC_REQ_ID], O.[REQ_DATE], O.[REQ_STATUS_DATE], O.[ED_STUD_SEMESTER_ID], O.[GS_CDE_CLRNC_REASON_ID], O.[GS_CODE_REQ_STATUS_ID], O.[WITHDRAW_DATE], O.[WITHDRAW_NAME], O.[NOTES]
				FROM
				    [dbo].[ED_STUD_CLRNC_REQ] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ED_STUD_CLRNC_REQ_ID] = PageIndex.[ED_STUD_CLRNC_REQ_ID]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ED_STUD_CLRNC_REQ]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_CLRNC_REQ_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_CLRNC_REQ table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudClrncReqId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@GsCdeClrncReasonId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@WithdrawDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@WithdrawName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="240" precision="0" scale="0" param="(240)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        begin transaction
        
        declare @AsFacultyId numeric(9,0)
        
        select @AsFacultyId=AS_FACULTY_INFO_ID
        from ED_STUD_SEMESTER
        where ED_STUD_SEMESTER_ID=@EdStudSemesterId
        
           declare @MaxEdStudClrncReqId numeric(7,0)
        select  @MaxEdStudClrncReqId =max(ED_STUD_CLRNC_REQ_ID)from ED_STUD_CLRNC_REQ;
         if( @MaxEdStudClrncReqId is null)
            set  @MaxEdStudClrncReqId=0;
            
          set  @MaxEdStudClrncReqId= @MaxEdStudClrncReqId+1;  
          
        
				INSERT INTO [dbo].[ED_STUD_CLRNC_REQ]
					(
					[ED_STUD_CLRNC_REQ_ID]
					,[REQ_DATE]
					,[REQ_STATUS_DATE]
					,[ED_STUD_SEMESTER_ID]
					,[GS_CDE_CLRNC_REASON_ID]
					,[GS_CODE_REQ_STATUS_ID]
					,[WITHDRAW_DATE]
					,[WITHDRAW_NAME]
					,[NOTES]
					)
				VALUES
					(
					@MaxEdStudClrncReqId
					,@ReqDate
					,@ReqStatusDate
					,@EdStudSemesterId
					,@GsCdeClrncReasonId
					,@GsCodeReqStatusId
					,@WithdrawDate
					,@WithdrawName
					,@Notes
					)
				
        
          declare @MaxEdStudClrncItemId numeric(7,0)
        select  @MaxEdStudClrncItemId =max(ED_STUD_CLRNC_ITEM_ID)from ED_STUD_CLRNC_ITEM;
         if( @MaxEdStudClrncItemId is null)
            set  @MaxEdStudClrncItemId=0;
        
        insert into ED_STUD_CLRNC_ITEM
        (
        ED_STUD_CLRNC_ITEM_ID,
        ED_STUD_CLRNC_REQ_ID,
        GS_CDE_CLRNC_ITEM_ID,
        OWNER_NAME,
        CONFIRM_DATE,
        NOTES
        )
        
        select @MaxEdStudClrncItemId+ROW_NUMBER()over(order by (dbo.GS_CDE_CLRNC_ITEM.GS_CDE_CLRNC_ITEM_ID))as rownum ,
               @MaxEdStudClrncReqId,
               GS_CDE_CLRNC_ITEM.GS_CDE_CLRNC_ITEM_ID,
               null,
               null,
               null
        from   GS_CDE_CLRNC_ITEM inner join GS_CDE_CLRNC_ITEM_FAC
               on GS_CDE_CLRNC_ITEM.GS_CDE_CLRNC_ITEM_ID=GS_CDE_CLRNC_ITEM_FAC.GS_CDE_CLRNC_ITEM_ID
        where  GS_CDE_CLRNC_ITEM_FAC.AS_FACULTY_INFO_ID=@AsFacultyId
					
             IF @@ERROR <> 0
         BEGIN
            ROLLBACK

            RETURN
         END
        commit transaction;			
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_CLRNC_REQ_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_CLRNC_REQ table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudClrncReqId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@OriginalEdStudClrncReqId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@GsCdeClrncReasonId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@WithdrawDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@WithdrawName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="240" precision="0" scale="0" param="(240)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				begin transaction
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_CLRNC_REQ]
				SET
					 [REQ_DATE] = @ReqDate
					,[REQ_STATUS_DATE] = @ReqStatusDate
					,[ED_STUD_SEMESTER_ID] = @EdStudSemesterId
					,[GS_CDE_CLRNC_REASON_ID] = @GsCdeClrncReasonId
					,[GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId
					,[WITHDRAW_DATE] = @WithdrawDate
					,[WITHDRAW_NAME] = @WithdrawName
					,[NOTES] = @Notes
				WHERE
        [ED_STUD_CLRNC_REQ_ID] = @EdStudClrncReqId 

        if(@GsCodeReqStatusId=2)--accepted
        begin
           declare @AsFacultyId numeric(6,0)
          select @AsFacultyId=ED_STUD_SEMESTER.AS_FACULTY_INFO_ID
          from ED_STUD_SEMESTER
          where ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=@EdStudSemesterId

          UPDATE    ED_STUD_FACULTY
          SET       IS_ACTIVE = 0
          FROM      ED_STUD_FACULTY INNER JOIN
                    ED_STUD ON ED_STUD_FACULTY.ED_STUD_ID = ED_STUD.ED_STUD_ID INNER JOIN
                    ED_STUD_SEMESTER ON ED_STUD.ED_STUD_ID = ED_STUD_SEMESTER.ED_STUD_ID
          where ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=@EdStudSemesterId
          and   ED_STUD_FACULTY.AS_FACULTY_INFO_ID=@AsFacultyId
          
          update ED_STUD_SEMESTER
          set ED_STUD_SEMESTER.ED_CODE_ENROLL_TYPE_ID=7
          where ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID=@EdStudSemesterId

        end

     IF @@ERROR <> 0
         BEGIN
            ROLLBACK

            RETURN
         END
        commit transaction;			
					
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_CLRNC_REQ_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_CLRNC_REQ table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdStudClrncReqId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="null" />
        <parameter name="@GsCdeClrncReasonId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="null" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@WithdrawDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@WithdrawName" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="240" precision="0" scale="0" param="(240)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ED_STUD_CLRNC_REQ_ID]
	, [REQ_DATE]
	, [REQ_STATUS_DATE]
	, [ED_STUD_SEMESTER_ID]
	, [GS_CDE_CLRNC_REASON_ID]
	, [GS_CODE_REQ_STATUS_ID]
	, [WITHDRAW_DATE]
	, [WITHDRAW_NAME]
	, [NOTES]
    FROM
	[dbo].[ED_STUD_CLRNC_REQ]
    WHERE 
	 ([ED_STUD_CLRNC_REQ_ID] = @EdStudClrncReqId OR @EdStudClrncReqId IS NULL)
	AND ([REQ_DATE] = @ReqDate OR @ReqDate IS NULL)
	AND ([REQ_STATUS_DATE] = @ReqStatusDate OR @ReqStatusDate IS NULL)
	AND ([ED_STUD_SEMESTER_ID] = @EdStudSemesterId OR @EdStudSemesterId IS NULL)
	AND ([GS_CDE_CLRNC_REASON_ID] = @GsCdeClrncReasonId OR @GsCdeClrncReasonId IS NULL)
	AND ([GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId OR @GsCodeReqStatusId IS NULL)
	AND ([WITHDRAW_DATE] = @WithdrawDate OR @WithdrawDate IS NULL)
	AND ([WITHDRAW_NAME] = @WithdrawName OR @WithdrawName IS NULL)
	AND ([NOTES] = @Notes OR @Notes IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ED_STUD_CLRNC_REQ_ID]
	, [REQ_DATE]
	, [REQ_STATUS_DATE]
	, [ED_STUD_SEMESTER_ID]
	, [GS_CDE_CLRNC_REASON_ID]
	, [GS_CODE_REQ_STATUS_ID]
	, [WITHDRAW_DATE]
	, [WITHDRAW_NAME]
	, [NOTES]
    FROM
	[dbo].[ED_STUD_CLRNC_REQ]
    WHERE 
	 ([ED_STUD_CLRNC_REQ_ID] = @EdStudClrncReqId AND @EdStudClrncReqId is not null)
	OR ([REQ_DATE] = @ReqDate AND @ReqDate is not null)
	OR ([REQ_STATUS_DATE] = @ReqStatusDate AND @ReqStatusDate is not null)
	OR ([ED_STUD_SEMESTER_ID] = @EdStudSemesterId AND @EdStudSemesterId is not null)
	OR ([GS_CDE_CLRNC_REASON_ID] = @GsCdeClrncReasonId AND @GsCdeClrncReasonId is not null)
	OR ([GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId AND @GsCodeReqStatusId is not null)
	OR ([WITHDRAW_DATE] = @WithdrawDate AND @WithdrawDate is not null)
	OR ([WITHDRAW_NAME] = @WithdrawName AND @WithdrawName is not null)
	OR ([NOTES] = @Notes AND @Notes is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_CLRNC_REQ_Find_Dynamic" skip="true">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ED_STUD_CLRNC_REQ table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters />
      <body>
        <![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ED_STUD_CLRNC_REQ_ID] numeric(7, 0) 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ED_STUD_CLRNC_REQ_ID] )
				SELECT TOP {3} [ED_STUD_CLRNC_REQ_ID]
				FROM [dbo].[ED_STUD_CLRNC_REQ] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ED_STUD_CLRNC_REQ_ID], O.[REQ_DATE], O.[REQ_STATUS_DATE], O.[ED_STUD_SEMESTER_ID], O.[GS_CDE_CLRNC_REASON_ID], O.[GS_CODE_REQ_STATUS_ID], O.[WITHDRAW_DATE], O.[WITHDRAW_NAME], O.[NOTES]
				FROM
				    [dbo].[ED_STUD_CLRNC_REQ] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ED_STUD_CLRNC_REQ_ID] = PageIndex.[ED_STUD_CLRNC_REQ_ID]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[ED_STUD_CLRNC_REQ] {0};
				
				DROP TABLE #PageIndex
				END
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_TRANS_FROM_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_TRANS_FROM_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppTransFromCourseId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmAppTransReqId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@CourseCode" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@CourseCh" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@CourseGrade" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@CoursePoint" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@GsCodePassFailId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@CourseBrief" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
          
           declare @MaxAdmAppTransFromCourseId numeric
        select  @MaxAdmAppTransFromCourseId =max(ADM_APP_TRANS_FROM_COURSE_ID)from ADM_APP_TRANS_FROM_COURSE;
         if( @MaxAdmAppTransFromCourseId is null)
            set  @MaxAdmAppTransFromCourseId=0;
          set  @MaxAdmAppTransFromCourseId= @MaxAdmAppTransFromCourseId+1;  
          
				
				INSERT INTO [dbo].[ADM_APP_TRANS_FROM_COURSE]
					(
					[ADM_APP_TRANS_FROM_COURSE_ID]
					,[ADM_APP_TRANS_REQ_ID]
					,[COURSE_CODE]
					,[COURSE_CH]
					,[DESCR_AR]
					,[DESCR_EN]
					,[COURSE_GRADE]
					,[COURSE_POINT]
					,[GS_CODE_PASS_FAIL_ID]
					,[COURSE_BRIEF]
					,[NOTES]
					)
				VALUES
					(
					@MaxAdmAppTransFromCourseId
					,@AdmAppTransReqId
					,@CourseCode
					,@CourseCh
					,@DescrAr
					,@DescrEn
					,@CourseGrade
					,@CoursePoint
					,@GsCodePassFailId
					,@CourseBrief
					,@Notes
					)
				
					set @AdmAppTransFromCourseId=@MaxAdmAppTransFromCourseId;				
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_TRANS_FROM_COURSE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_APP_TRANS_FROM_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppTransFromCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
          
          delete from ADM_APP_TRANS_BALANCE where [ADM_APP_TRANS_FROM_COURSE_ID] = @AdmAppTransFromCourseId
				DELETE FROM [dbo].[ADM_APP_TRANS_FROM_COURSE] WITH (ROWLOCK) 
				WHERE
					[ADM_APP_TRANS_FROM_COURSE_ID] = @AdmAppTransFromCourseId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_TRANS_TO_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_TRANS_TO_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppTransToCourseId" type="numeric" direction="Output" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmAppTransReqId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeTransCourseTypeId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@EdCodeGradingId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@CoursePoint" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        
          declare @MaxAdmAppTransToCourseId numeric
        select  @MaxAdmAppTransToCourseId =max(ADM_APP_TRANS_TO_COURSE_ID)from ADM_APP_TRANS_TO_COURSE;
         if( @MaxAdmAppTransToCourseId is null)
            set  @MaxAdmAppTransToCourseId=0;
          set  @MaxAdmAppTransToCourseId= @MaxAdmAppTransToCourseId+1;  
          
        
				INSERT INTO [dbo].[ADM_APP_TRANS_TO_COURSE]
					(
					[ADM_APP_TRANS_TO_COURSE_ID]
					,[ADM_APP_TRANS_REQ_ID]
					,[ENT_COURSE_PKG_HDR_ID]
					,[ED_COURSE_ID]
					,[ED_CODE_TRANS_COURSE_TYPE_ID]
					,[ED_CODE_GRADING_ID]
					,[COURSE_POINT]
					)
				VALUES
					(
					@MaxAdmAppTransToCourseId
					,@AdmAppTransReqId
					,@EntCoursePkgHdrId
					,@EdCourseId
					,@EdCodeTransCourseTypeId
					,@EdCodeGradingId
					,@CoursePoint
					)
				
				set @AdmAppTransToCourseId=@MaxAdmAppTransToCourseId			
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_TRANS_TO_COURSE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_APP_TRANS_TO_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppTransToCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
          
          delete from ADM_APP_TRANS_BALANCE where [ADM_APP_TRANS_TO_COURSE_ID] = @AdmAppTransToCourseId
				DELETE FROM [dbo].[ADM_APP_TRANS_TO_COURSE] WITH (ROWLOCK) 
				WHERE
					[ADM_APP_TRANS_TO_COURSE_ID] = @AdmAppTransToCourseId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APP_TRANS_BALANCE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_TRANS_BALANCE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppTransBalanceId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmAppTransReqId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmAppTransFromCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AdmAppTransToCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EquivPercent" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
          
        declare @MaxAdmAppTransBalanceId numeric
        select  @MaxAdmAppTransBalanceId =max(ADM_APP_TRANS_BALANCE_ID)from ADM_APP_TRANS_BALANCE;
         if( @MaxAdmAppTransBalanceId is null)
            set  @MaxAdmAppTransBalanceId=0;
          set  @MaxAdmAppTransBalanceId= @MaxAdmAppTransBalanceId+1;  

				
if not exists(select 'a' from ADM_APP_TRANS_BALANCE where ADM_APP_TRANS_REQ_ID=@AdmAppTransReqId and
ADM_APP_TRANS_FROM_COURSE_ID=@AdmAppTransFromCourseId and
ADM_APP_TRANS_TO_COURSE_ID=@AdmAppTransToCourseId)
  Begin
				INSERT INTO [dbo].[ADM_APP_TRANS_BALANCE]
					(
				  	[ADM_APP_TRANS_BALANCE_ID]
					,[ADM_APP_TRANS_REQ_ID]
					,[ADM_APP_TRANS_FROM_COURSE_ID]
					,[ADM_APP_TRANS_TO_COURSE_ID]
					,[EQUIV_PERCENT]
					,[NOTES]
					)
				VALUES
					(
					@MaxAdmAppTransBalanceId
					,@AdmAppTransReqId
					,@AdmAppTransFromCourseId
					,@AdmAppTransToCourseId
					,@EquivPercent
					,@Notes
					)
			End	
									
							
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_TRANS_FROM_REQ_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_TRANS_FROM_REQ table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudTransFromReqId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@TransferReason" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@IsApplied" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@UnivName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FacName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        
        if exists (select 'H' from ED_STUD_TRANS_FROM_REQ where 
						 ED_STUD_TRANS_FROM_REQ.ED_STUD_ID= @EdStudId
						 and( ED_STUD_TRANS_FROM_REQ.ED_CODE_SEMESTER_ID=@EdCodeSemesterId )
						 and (ED_STUD_TRANS_FROM_REQ.ED_ACAD_YEAR_ID=@EdAcadYearId )
						 and( ED_STUD_TRANS_FROM_REQ.AS_FACULTY_INFO_ID=@AsFacultyInfoId )
             and (GS_CODE_REQ_STATUS_ID=1 or GS_CODE_REQ_STATUS_ID=2)
              )
              begin
                RAISERROR('ERR_TransReqAlreadyExist',16,-1)
                RETURN 
              end
        
         declare @ED_STUD_TRANS_FROM_REQ numeric(9,0)
        select  @ED_STUD_TRANS_FROM_REQ =max(ED_STUD_TRANS_FROM_REQ_id)from ED_STUD_TRANS_FROM_REQ;
         if( @ED_STUD_TRANS_FROM_REQ is null)
            set  @ED_STUD_TRANS_FROM_REQ=0;
            
          set  @ED_STUD_TRANS_FROM_REQ= @ED_STUD_TRANS_FROM_REQ+1;  
        
				INSERT INTO [dbo].[ED_STUD_TRANS_FROM_REQ]
					(
					[ED_STUD_TRANS_FROM_REQ_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[ED_STUD_ID]
					,[AS_FACULTY_INFO_ID]
					,[REQ_DATE]
					,[TRANSFER_REASON]
					,[GS_CODE_REQ_STATUS_ID]
					,[REQ_STATUS_DATE]
					,[IS_APPLIED]
					,[UNIV_NAME]
					,[FAC_NAME]
					)
				VALUES
					(
					@ED_STUD_TRANS_FROM_REQ
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@EdStudId
					,@AsFacultyInfoId
					,@ReqDate
					,@TransferReason
					,@GsCodeReqStatusId
					,@ReqStatusDate
					,@IsApplied
					,@UnivName
					,@FacName
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_TRANS_FROM_REQ_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_TRANS_FROM_REQ table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudTransFromReqId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@OriginalEdStudTransFromReqId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@TransferReason" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="" />
        <parameter name="@IsApplied" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@UnivName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
        <parameter name="@FacName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				declare @IsReqApplied numeric(1,0)
        set @IsReqApplied=0
        if(@GsCodeReqStatusId=2)
        begin
        if not exists (
            SELECT     'H' 
            FROM         ED_STUD_CLRNC_REQ INNER JOIN
                         ED_STUD_SEMESTER ON ED_STUD_CLRNC_REQ.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
            WHERE      (ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId)
			             AND (ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId)  
                         AND (ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId) 
                         AND (ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId)
                         )
                         begin
                           RAISERROR('ERR_NoClearanceFound',16,-1)
                            RETURN 
                         end 
                         
                         else
                         begin
                             set @IsReqApplied=1 
                         end
        end 
			
        
        
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_TRANS_FROM_REQ]
				SET
					[ED_STUD_TRANS_FROM_REQ_ID] = @EdStudTransFromReqId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[ED_STUD_ID] = @EdStudId
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[REQ_DATE] = @ReqDate
					,[TRANSFER_REASON] = @TransferReason
					,[GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId
					,[REQ_STATUS_DATE] = @ReqStatusDate
					,[IS_APPLIED] = @IsReqApplied
					,[UNIV_NAME] = @UnivName
					,[FAC_NAME] = @FacName
				WHERE
[ED_STUD_TRANS_FROM_REQ_ID] = @OriginalEdStudTransFromReqId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_TRANS_FROM_REQ_Find">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ED_STUD_TRANS_FROM_REQ table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null" />
        <parameter name="@EdStudTransFromReqId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="null" />
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="null" />
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault="null" />
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@TransferReason" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null" />
        <parameter name="@IsApplied" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="null" />
        <parameter name="@UnivName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
        <parameter name="@FacName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null" />
      </parameters>
      <body>
        <![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
  select
    [ED_STUD_TRANS_FROM_REQ_ID] 
	, ED_STUD_TRANS_FROM_REQ.[ED_ACAD_YEAR_ID] 
	, [ED_CODE_SEMESTER_ID] 
	, ED_STUD_TRANS_FROM_REQ.[ED_STUD_ID] 
	, ED_STUD_TRANS_FROM_REQ.[AS_FACULTY_INFO_ID] 
	, [REQ_DATE] 
	, ED_STUD_FACULTY.STUD_FACULTY_CODE
	, [GS_CODE_REQ_STATUS_ID] 
	, [REQ_STATUS_DATE] 
	, [IS_APPLIED] 
	,dbo.fn_GetStudDeptMjr(ED_STUD_TRANS_FROM_REQ.ed_stud_id,ED_STUD_TRANS_FROM_REQ.AS_FACULTY_INFO_ID,ED_STUD_TRANS_FROM_REQ.ED_ACAD_YEAR_ID,ED_STUD_TRANS_FROM_REQ.ED_CODE_SEMESTER_ID,1) 
	,dbo.fn_GetStudDeptMjr(ED_STUD_TRANS_FROM_REQ.ed_stud_id,ED_STUD_TRANS_FROM_REQ.AS_FACULTY_INFO_ID,ED_STUD_TRANS_FROM_REQ.ED_ACAD_YEAR_ID,ED_STUD_TRANS_FROM_REQ.ED_CODE_SEMESTER_ID,2) 
    FROM
	[dbo].[ED_STUD_TRANS_FROM_REQ] inner join ED_STUD_FACULTY on (ED_STUD_FACULTY.ED_STUD_ID=ED_STUD_TRANS_FROM_REQ.ED_STUD_ID
	and ED_STUD_FACULTY.AS_FACULTY_INFO_ID=ED_STUD_TRANS_FROM_REQ.AS_FACULTY_INFO_ID)
		 WHERE 
	
	 ([ED_STUD_TRANS_FROM_REQ].[ED_ACAD_YEAR_ID] = @EdAcadYearId OR @EdAcadYearId IS NULL)
	AND ([ED_STUD_TRANS_FROM_REQ].[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId OR @EdCodeSemesterId IS NULL)
	AND ([ED_STUD_TRANS_FROM_REQ].[AS_FACULTY_INFO_ID] = @AsFacultyInfoId OR @AsFacultyInfoId IS NULL)
	AND (  @ReqDate IS NULL  or [REQ_DATE] >= @ReqDate)
	AND (@ReqStatusDate IS NULL OR [REQ_STATUS_DATE] <= @ReqStatusDate  )
	AND ( @GsCodeReqStatusId='0'  OR @GsCodeReqStatusId IS NULL or [GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId )
	
  END
  ELSE
  BEGIN
    SELECT
	  [ED_STUD_TRANS_FROM_REQ_ID]
	, [ED_ACAD_YEAR_ID]
	, [ED_CODE_SEMESTER_ID]
	, [ED_STUD_ID]
	, [AS_FACULTY_INFO_ID]
	, [REQ_DATE]
	, [TRANSFER_REASON]
	, [GS_CODE_REQ_STATUS_ID]
	, [REQ_STATUS_DATE]
	, [IS_APPLIED]
	, [UNIV_NAME]
	, [FAC_NAME]
    FROM
	[dbo].[ED_STUD_TRANS_FROM_REQ]
    WHERE 
	 ([ED_STUD_TRANS_FROM_REQ_ID] = @EdStudTransFromReqId AND @EdStudTransFromReqId is not null)
	OR ([ED_ACAD_YEAR_ID] = @EdAcadYearId AND @EdAcadYearId is not null)
	OR ([ED_CODE_SEMESTER_ID] = @EdCodeSemesterId AND @EdCodeSemesterId is not null)
	OR ([ED_STUD_ID] = @EdStudId AND @EdStudId is not null)
	OR ([AS_FACULTY_INFO_ID] = @AsFacultyInfoId AND @AsFacultyInfoId is not null)
	OR ([REQ_DATE] = @ReqDate AND @ReqDate is not null)
	OR ([TRANSFER_REASON] = @TransferReason AND @TransferReason is not null)
	OR ([GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId AND @GsCodeReqStatusId is not null)
	OR ([REQ_STATUS_DATE] = @ReqStatusDate AND @ReqStatusDate is not null)
	OR ([IS_APPLIED] = @IsApplied AND @IsApplied is not null)
	OR ([UNIV_NAME] = @UnivName AND @UnivName is not null)
	OR ([FAC_NAME] = @FacName AND @FacName is not null)
	SELECT @@ROWCOUNT			
  END
				]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="FEE_FAC_ITEM_ADM_YEAR_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_FAC_ITEM_ADM_YEAR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacItemAdmYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@FeeItemValue" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
          if exists (select 'H' from FEE_FAC_ITEM_ADM_YEAR where 
						 FEE_FAC_ITEM_ADM_YEAR.ED_ACAD_YEAR_ID= @EdAcadYearId  
						 and FEE_FACULTY_ITEM_ID=@FeeFacultyItemId)
              begin
                RAISERROR('ERR_FeeAdmYear_REPEAT',16,-1)
                RETURN 
              end
        
         declare @maxFEE_FAC_ITEM_ADM_YEAR_ID numeric(7,0)
        select @maxFEE_FAC_ITEM_ADM_YEAR_ID=max(FEE_FAC_ITEM_ADM_YEAR_id)
        from FEE_FAC_ITEM_ADM_YEAR
         if(@maxFEE_FAC_ITEM_ADM_YEAR_ID is null)
           set @maxFEE_FAC_ITEM_ADM_YEAR_ID=0
           set  @maxFEE_FAC_ITEM_ADM_YEAR_ID= @maxFEE_FAC_ITEM_ADM_YEAR_ID+1

        
				INSERT INTO [dbo].[FEE_FAC_ITEM_ADM_YEAR]
					(
					[FEE_FAC_ITEM_ADM_YEAR_ID]
					,[FEE_FACULTY_ITEM_ID]
					,[ED_ACAD_YEAR_ID]
					,[FEE_ITEM_VALUE]
					)
				VALUES
					(
					@maxFEE_FAC_ITEM_ADM_YEAR_ID
					,@FeeFacultyItemId
					,@EdAcadYearId
					,@FeeItemValue
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_FAC_ITEM_ADM_YEAR_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_FAC_ITEM_ADM_YEAR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeFacItemAdmYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@OriginalFeeFacItemAdmYearId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@FeeFacultyItemId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@FeeItemValue" type="numeric" direction="Input" size="5" precision="9" scale="2" param="(9, 2)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				 if exists (select 'H' from FEE_FAC_ITEM_ADM_YEAR where 
						 FEE_FAC_ITEM_ADM_YEAR.ED_ACAD_YEAR_ID= @EdAcadYearId  
						 and FEE_FACULTY_ITEM_ID=@FeeFacultyItemId and FEE_FAC_ITEM_ADM_YEAR_ID!=@FeeFacItemAdmYearId)
              begin
                RAISERROR('ERR_FeeAdmYear_REPEAT',16,-1)
                RETURN 
              end
              
				-- Modify the updatable columns
				UPDATE
					[dbo].[FEE_FAC_ITEM_ADM_YEAR]
				SET
					[FEE_FAC_ITEM_ADM_YEAR_ID] = @FeeFacItemAdmYearId
					,[FEE_FACULTY_ITEM_ID] = @FeeFacultyItemId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[FEE_ITEM_VALUE] = @FeeItemValue
				WHERE
[FEE_FAC_ITEM_ADM_YEAR_ID] = @FeeFacItemAdmYearId 
				
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ADM_APP_COURSE_COMP_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_APP_COURSE_COMP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppCourseCompId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AdmCdeCourseCompId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				 declare @MaxADM_APP_COURSE_COMP_ID numeric(7,0)
  select @MaxADM_APP_COURSE_COMP_ID=MAX(ADM_APP_COURSE_COMP_ID) from ADM_APP_COURSE_COMP
  if(@MaxADM_APP_COURSE_COMP_ID is null )
  set @MaxADM_APP_COURSE_COMP_ID=0
  
  set @MaxADM_APP_COURSE_COMP_ID=@MaxADM_APP_COURSE_COMP_ID+1
   if exists(select 'H' from ADM_APP_COURSE_COMP where ADM_APP_COURSE_COMP.ADM_CDE_COURSE_COMP_ID=@AdmCdeCourseCompId and ADM_APPLICANT_ID=@AdmApplicantId  )
           
   begin
              RAISERROR('Err_CanNotRepeatAdmAppCourse',16,-1)
              RETURN 
           end

  
				INSERT INTO [dbo].[ADM_APP_COURSE_COMP]
					(
					[ADM_APP_COURSE_COMP_ID]
					,[ADM_APPLICANT_ID]
					,[ADM_CDE_COURSE_COMP_ID]
					)
				VALUES
					(
					@MaxADM_APP_COURSE_COMP_ID
					,@AdmApplicantId
					,@AdmCdeCourseCompId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_APP_COURSE_COMP_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_APP_COURSE_COMP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmAppCourseCompId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@OriginalAdmAppCourseCompId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@AdmCdeCourseCompId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				 if exists(select 'H' from ADM_APP_COURSE_COMP where ADM_APP_COURSE_COMP.ADM_CDE_COURSE_COMP_ID=@AdmCdeCourseCompId  and  ADM_APP_COURSE_COMP.ADM_APP_COURSE_COMP_ID!=@AdmAppCourseCompId )   
             begin
              RAISERROR('Err_CanNotRepeatAdmAppCourse',16,-1)
              RETURN 
           end
				-- Modify the updatable columns
				UPDATE
					[dbo].[ADM_APP_COURSE_COMP]
				SET
					[ADM_APP_COURSE_COMP_ID] = @AdmAppCourseCompId
					,[ADM_APPLICANT_ID] = @AdmApplicantId
					,[ADM_CDE_COURSE_COMP_ID] = @AdmCdeCourseCompId
				WHERE
[ADM_APP_COURSE_COMP_ID] = @AdmAppCourseCompId 
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_PRECONDITION_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_PRECONDITION table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmPreconditionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        declare @MaxAdmPreconditionId numeric
        select @MaxAdmPreconditionId=max(ADM_PRECONDITION_ID) from [dbo].[ADM_PRECONDITION] 
        if(@MaxAdmPreconditionId is null)
          set  @MaxAdmPreconditionId=0;
        set  @MaxAdmPreconditionId= @MaxAdmPreconditionId+1;
        
        
        if exists(select 'a' from [ADM_PRECONDITION] where ([DESCR_AR]=@DescrAr) or ([DESCR_EN]=@DescrEn))
           Begin
              RAISERROR('ADM_PRECONDITION_REPEAT_DESCR',16,-1)
              RETURN 
           END
        
        
				INSERT INTO [dbo].[ADM_PRECONDITION]
					(
					[ADM_PRECONDITION_ID]
					,[ENT_MAIN_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					)
				VALUES
					(
					@MaxAdmPreconditionId
					,@EntMainId
					,@DescrAr
					,@DescrEn
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_PRECONDITION_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_PRECONDITION table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmPreconditionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@OriginalAdmPreconditionId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault="" />
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        
        
        if exists(select 'a' from [ADM_PRECONDITION] where (([DESCR_AR]=@DescrAr) 
        and ([ADM_PRECONDITION_ID]<>@AdmPreconditionId)) or
        (([DESCR_EN]=@DescrEn) and ([ADM_PRECONDITION_ID]<>@AdmPreconditionId)))
           Begin
              RAISERROR('ADM_PRECONDITION_REPEAT_DESCR',16,-1)
              RETURN 
           END
        
				UPDATE
					[dbo].[ADM_PRECONDITION]
				SET
					[ADM_PRECONDITION_ID] = @AdmPreconditionId
					,[ENT_MAIN_ID] = @EntMainId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
				WHERE
[ADM_PRECONDITION_ID] = @AdmPreconditionId 
				
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_STUD_ENROLL_CHANGE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_ENROLL_CHANGE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudEnrollChangeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ChangeDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeOldId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeNewId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@ApproveFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="240" precision="0" scale="0" param="(240)" nulldefault="" />
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        
        		BEGIN TRANSACTION
        
        declare @AsFaultyInfoId numeric(6,0)
        declare @EdStudId numeric(9,0)
        
        select @AsFaultyInfoId=AS_FACULTY_INFO_ID,@EdStudId=ED_STUD_ID
        from ED_STUD_SEMESTER
        where ED_STUD_SEMESTER_ID=@EdStudSemesterId
        
          UPDATE  ED_STUD_ENROLL_CHANGE
          SET     IS_LAST = 0
          FROM    ED_STUD_ENROLL_CHANGE INNER JOIN
                  ED_STUD_SEMESTER ON ED_STUD_ENROLL_CHANGE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
          where ED_STUD_SEMESTER.ED_STUD_ID=@EdStudId and ED_STUD_SEMESTER.AS_FACULTY_INFO_ID=@AsFaultyInfoId
        
           declare @MaxEdStudEnrollChangeId numeric(7,0)
        select  @MaxEdStudEnrollChangeId =max(ED_STUD_ENROLL_CHANGE_ID)from ED_STUD_ENROLL_CHANGE;
         if( @MaxEdStudEnrollChangeId is null)
            set  @MaxEdStudEnrollChangeId=0;
            
          set  @MaxEdStudEnrollChangeId= @MaxEdStudEnrollChangeId+1;  
          
        
				INSERT INTO [dbo].[ED_STUD_ENROLL_CHANGE]
					(
					[ED_STUD_ENROLL_CHANGE_ID]
					,[ED_STUD_SEMESTER_ID]
					,[CHANGE_DATE]
					,[ED_CODE_ENROLL_TYPE_OLD_ID]
					,[ED_CODE_ENROLL_TYPE_NEW_ID]
					,[APPROVE_FLG]
					,[NOTES]
					,[IS_LAST]
					)
				VALUES
					(
					@MaxEdStudEnrollChangeId
					,@EdStudSemesterId
					,@ChangeDate
					,@EdCodeEnrollTypeOldId
					,@EdCodeEnrollTypeNewId
					,@ApproveFlg
					,@Notes
					,1
					)
          
					 IF @@ERROR <> 0
         BEGIN
            ROLLBACK

            RETURN
         END
        commit transaction;							
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="xxxxxxED_STUD_ENROLL_CHANGE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_STUD_ENROLL_CHANGE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudEnrollChangeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@OriginalEdStudEnrollChangeId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@EdStudSemesterId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault="" />
        <parameter name="@ChangeDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeOldId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@EdCodeEnrollTypeNewId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault="" />
        <parameter name="@ApproveFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
        <parameter name="@Notes" type="nvarchar" direction="Input" size="240" precision="0" scale="0" param="(240)" nulldefault="" />
        <parameter name="@IsLast" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				 		BEGIN TRANSACTION
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ED_STUD_ENROLL_CHANGE]
				SET
					 [ED_STUD_SEMESTER_ID] = @EdStudSemesterId
					,[CHANGE_DATE] = @ChangeDate
					,[ED_CODE_ENROLL_TYPE_OLD_ID] = @EdCodeEnrollTypeOldId
					,[ED_CODE_ENROLL_TYPE_NEW_ID] = @EdCodeEnrollTypeNewId
					,[APPROVE_FLG] = @ApproveFlg
					,[NOTES] = @Notes
					,[IS_LAST] = @IsLast
				WHERE
[ED_STUD_ENROLL_CHANGE_ID] = @EdStudEnrollChangeId 


    if(@ApproveFlg=1)
    begin
     update ED_STUD_SEMESTER
     set ED_CODE_ENROLL_TYPE_ID=@EdCodeEnrollTypeNewId
     where ED_STUD_SEMESTER_ID=@EdStudSemesterId
    end

					 IF @@ERROR <> 0
         BEGIN
            ROLLBACK

            RETURN
         END
        commit transaction;				
      
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_PRECOND_QUAL_GetByEntMainId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_PRECOND_QUAL table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ADM_PRECOND_QUAL].*
				FROM
					[dbo].[ADM_PRECOND_QUAL] inner join ED_CODE_QUAL on ED_CODE_QUAL.ED_CODE_QUAL_ID=
          [dbo].[ADM_PRECOND_QUAL].ADM_CDE_CERT_TYPE_ID
				WHERE
					[ENT_MAIN_ID] = @EntMainId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_PLACE_EXAM_COURSE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ADM_PLACE_EXAM_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmPlaceExamCourseId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@MarkFrom" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@MarkTo" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
        declare @MaxAdmPlaceExamCourseId numeric
        select @MaxAdmPlaceExamCourseId=max(ADM_PLACE_EXAM_COURSE_ID) from [dbo].[ADM_PLACE_EXAM_COURSE]
        if(@MaxAdmPlaceExamCourseId is null)
           set @MaxAdmPlaceExamCourseId=0;
        set @MaxAdmPlaceExamCourseId=@MaxAdmPlaceExamCourseId+1;
        
        
        if exists(select 'a' from [dbo].[ADM_PLACE_EXAM_COURSE] where ED_COURSE_ID=@EdCourseId 
        and ADM_CDE_PLACEMENT_EXAM_ID=@AdmCdePlacementExamId)
          Begin
              RAISERROR('ADM_PLACE_EXAM_COURSE_Repeat_Course',16,-1)
              RETURN 
          End
        
        
				INSERT INTO [dbo].[ADM_PLACE_EXAM_COURSE]
					(
					[ADM_PLACE_EXAM_COURSE_ID]
					,[ADM_CDE_PLACEMENT_EXAM_ID]
					,[MARK_FROM]
					,[MARK_TO]
					,[ED_COURSE_ID]
					)
				VALUES
					(
					@MaxAdmPlaceExamCourseId
					,@AdmCdePlacementExamId
					,@MarkFrom
					,@MarkTo
					,@EdCourseId
					)
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_PLACE_EXAM_COURSE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ADM_PLACE_EXAM_COURSE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmPlaceExamCourseId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@OriginalAdmPlaceExamCourseId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
        <parameter name="@MarkFrom" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@MarkTo" type="numeric" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault="" />
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        
         if exists(select 'a' from [dbo].[ADM_PLACE_EXAM_COURSE] where ED_COURSE_ID=@EdCourseId 
        and ADM_CDE_PLACEMENT_EXAM_ID=@AdmCdePlacementExamId and ADM_PLACE_EXAM_COURSE_ID<>@OriginalAdmPlaceExamCourseId)
          Begin
              RAISERROR('ADM_PLACE_EXAM_COURSE_Repeat_Course',16,-1)
              RETURN 
          End
        
				UPDATE
					[dbo].[ADM_PLACE_EXAM_COURSE]
				SET
					[ADM_PLACE_EXAM_COURSE_ID] = @AdmPlaceExamCourseId
					,[ADM_CDE_PLACEMENT_EXAM_ID] = @AdmCdePlacementExamId
					,[MARK_FROM] = @MarkFrom
					,[MARK_TO] = @MarkTo
					,[ED_COURSE_ID] = @EdCourseId
				WHERE
[ADM_PLACE_EXAM_COURSE_ID] = @OriginalAdmPlaceExamCourseId 
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ADM_PLACE_EXAM_COURSE_GetByAdmCdePlacementExamId">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ADM_PLACE_EXAM_COURSE table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmCdePlacementExamId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault="" />
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[dbo].[ADM_PLACE_EXAM_COURSE].[ADM_PLACE_EXAM_COURSE_ID],
					[dbo].[ADM_PLACE_EXAM_COURSE].[ADM_CDE_PLACEMENT_EXAM_ID],
					[dbo].[ADM_PLACE_EXAM_COURSE].[MARK_FROM],
					[dbo].[ADM_PLACE_EXAM_COURSE].[MARK_TO],
					[dbo].[ADM_PLACE_EXAM_COURSE].[ED_COURSE_ID],
          ed_course.COURSE_DESCR_AR,
           ed_course.COURSE_DESCR_EN
				FROM
					[dbo].[ADM_PLACE_EXAM_COURSE] inner join ed_course on ed_course.ed_course_id=[dbo].[ADM_PLACE_EXAM_COURSE].ed_course_id
				WHERE
					[ADM_CDE_PLACEMENT_EXAM_ID] = @AdmCdePlacementExamId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ADM_APPLICANT_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ADM_APPLICANT table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				BEGIN TRANSACTION MyTran;
        declare @reg numeric;
        select @reg=ADM_APP_REG_ID from ADM_APPLICANT where ADM_APPLICANT_ID = @AdmApplicantId;

        delete from ADM_APP_CONTACT where ADM_APPLICANT_ID = @AdmApplicantId;
        delete from ADM_APP_COURSE_COMP where ADM_APPLICANT_ID = @AdmApplicantId;
        delete from ADM_APP_DOC where ADM_APPLICANT_ID = @AdmApplicantId;
        delete from ADM_APP_FEES where ADM_APPLICANT_ID = @AdmApplicantId;
        delete from ADM_APP_GUARDIAN where ADM_APPLICANT_ID = @AdmApplicantId;
        delete from ADM_APP_LTR_RECOM where ADM_APPLICANT_ID = @AdmApplicantId;
        delete from ADM_APP_MESSAGE where TO_ID = @AdmApplicantId;
        delete from ADM_APP_PLACEMENT_EXAM where ADM_APPLICANT_ID = @AdmApplicantId;
        delete from ADM_APP_PLACE_EXAM_COURSE where ADM_APPLICANT_ID = @AdmApplicantId;
         delete from ADM_APP_TRANS_REQ where ADM_APPLICANT_ID = @AdmApplicantId;
         
         -- Added by Hsabry 20-12-2012
         DELETE FROM [ADM_APP_PREF] WHERE ADM_APPLICANT_ID = @AdmApplicantId;
         DELETE FROM [ADM_PRV_HIGHER_EDU] WHERE ADM_APPLICANT_ID = @AdmApplicantId;
         DELETE FROM [ED_STUD_CONTACT_METHOD] WHERE ADM_APPLICANT_ID = @AdmApplicantId;
         DELETE FROM [ED_STUD_DOCUMENT] WHERE ADM_APPLICANT_ID = @AdmApplicantId;
         DELETE FROM [ED_STUD_GUARD] WHERE ADM_APPLICANT_ID = @AdmApplicantId;
         DELETE FROM [ED_STUD_LANG] WHERE ADM_APPLICANT_ID = @AdmApplicantId;
         
         DELETE FROM [ED_TRAIN_SUPERVISOR] WHERE ED_TRAINING_ID IN (SELECT ed_training_id FROM dbo.ED_TRAINING WHERE dbo.ED_TRAINING.GS_CDE_TRAIN_SITE IN (SELECT GS_CDE_TRAIN_SITE_ID FROM GS_CDE_TRAIN_SITE WHERE GS_ADDRESS_DTL_ID IN (SELECT GS_ADDRESS_DTL_ID FROM [GS_ADDRESS_DTL] WHERE ADM_APPLICANT_ID = @AdmApplicantId))) 
         DELETE FROM [ED_TRAIN_STUD] WHERE ED_TRAINING_ID IN (SELECT ed_training_id FROM dbo.ED_TRAINING WHERE dbo.ED_TRAINING.GS_CDE_TRAIN_SITE IN (SELECT GS_CDE_TRAIN_SITE_ID FROM GS_CDE_TRAIN_SITE WHERE GS_ADDRESS_DTL_ID IN (SELECT GS_ADDRESS_DTL_ID FROM [GS_ADDRESS_DTL] WHERE ADM_APPLICANT_ID = @AdmApplicantId))) 
         DELETE FROM dbo.ED_TRAINING WHERE GS_CDE_TRAIN_SITE IN (SELECT GS_CDE_TRAIN_SITE_ID FROM GS_CDE_TRAIN_SITE WHERE GS_ADDRESS_DTL_ID IN (SELECT GS_ADDRESS_DTL_ID FROM [GS_ADDRESS_DTL] WHERE ADM_APPLICANT_ID = @AdmApplicantId)) 
         DELETE FROM dbo.[GS_CDE_TRAIN_RESP] WHERE GS_CDE_TRAIN_SITE_ID IN (SELECT GS_CDE_TRAIN_SITE_ID FROM GS_CDE_TRAIN_SITE WHERE GS_ADDRESS_DTL_ID IN (SELECT GS_ADDRESS_DTL_ID FROM [GS_ADDRESS_DTL] WHERE ADM_APPLICANT_ID = @AdmApplicantId)) 
         DELETE FROM GS_CDE_TRAIN_SITE WHERE GS_ADDRESS_DTL_ID IN (SELECT GS_ADDRESS_DTL_ID FROM [GS_ADDRESS_DTL] WHERE ADM_APPLICANT_ID = @AdmApplicantId)
         DELETE FROM [GS_ADDRESS_DTL] WHERE ADM_APPLICANT_ID = @AdmApplicantId;
         
        if(@reg is not null)
        begin
	        delete from ADM_APP_REG where ADM_APP_REG_ID = @reg;
        end

        delete from ADM_APPLICANT where ADM_APPLICANT_ID = @AdmApplicantId;
        commit TRANSACTION MyTran;
					
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="ED_ACAD_PLAN_HDR_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_ACAD_PLAN_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadPlanHdrId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
        DELETE FROM [dbo].[ED_ACAD_PLAN_DTL] WITH (ROWLOCK) 
				WHERE
					[ED_ACAD_PLAN_HDR_ID] = @EdAcadPlanHdrId
        
				DELETE FROM [dbo].[ED_ACAD_PLAN_HDR] WITH (ROWLOCK) 
				WHERE
					[ED_ACAD_PLAN_HDR_ID] = @EdAcadPlanHdrId
					
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_INT_TRNS_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_STUD_INT_TRNS table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudIntTrnsId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@ReqStatusDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@Notes" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
        <parameter name="@IsApplied" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[

set @EdStudIntTrnsId=0;

set @ReqDate = getdate();
set @ReqStatusDate = getdate();

DECLARE @V_EdStudIntTrnsId numeric(9, 0)
SELECT @V_EdStudIntTrnsId = ISNULL(MAX(ED_STUD_INT_TRNS_ID), 0) + 1 FROM [dbo].[ED_STUD_INT_TRNS];

if not exists (select 1 from [ED_STUD_INT_TRNS] 
where [ED_STUD_ID] = @EdStudId and
[ED_ACAD_YEAR_ID] = @EdAcadYearId and
[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId and 
[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
)
BEGIN

begin transaction t
begin try

INSERT INTO [dbo].[ED_STUD_INT_TRNS]
	(
	[ED_STUD_INT_TRNS_ID]
	,[ED_STUD_ID]
	,[ED_ACAD_YEAR_ID]
	,[ED_CODE_SEMESTER_ID]
	,[REQ_DATE]
	,[GS_CODE_REQ_STATUS_ID]
	,[REQ_STATUS_DATE]
	,[NOTES]
	,[IS_APPLIED]
	,[AS_FACULTY_INFO_ID]
	)
VALUES
	(
	@V_EdStudIntTrnsId
	,@EdStudId
	,@EdAcadYearId
	,@EdCodeSemesterId
	,@ReqDate
	,@GsCodeReqStatusId
	,@ReqStatusDate
	,@Notes
	,@IsApplied
	,@AsFacultyInfoId
	)

set @EdStudIntTrnsId=@V_EdStudIntTrnsId;

declare @maxCourseFromId numeric(9,0);
SELECT @maxCourseFromId = ISNULL(MAX(ED_STUD_INT_TRNS_COURSE_FROM_ID), 0) + 1 FROM [dbo].[ED_STUD_INT_TRNS_COURSE_FROM];
					
insert into ED_STUD_INT_TRNS_COURSE_FROM
SELECT    ROW_NUMBER() over(order by ED_STUD_COURSE_REG_ID)-1+@maxCourseFromId, 
			ED_STUD_COURSE_REG.ED_COURSE_ID,
			ED_STUD_COURSE_REG.AUDIT_FLG,
			ED_STUD_COURSE_REG.REPEAT_FLG,
			ED_STUD_COURSE_REG.IS_LAST,
			ED_STUD_COURSE_REG.AS_FACULTY_INFO_ID,
			ED_STUD_COURSE_REG.ED_CODE_COURSE_STATUS_ID,
			ED_STUD_COURSE_REG.ED_CODE_GRADING_ID,
			ED_STUD_COURSE_REG.COURSE_DEGREE,
			ED_STUD_COURSE_REG.COURSE_POINT,
			ED_STUD_COURSE_REG.ENT_POLICY_GRADING_HDR_ID,
			ED_STUD_COURSE_REG.GS_CODE_PASS_FAIL_ID,
			ED_STUD_COURSE_REG.ADD_GPA_FLG,
			ED_STUD_COURSE_REG.ENT_POLICY_ASSESS_HDR_ID,
			ED_STUD_COURSE_REG.INCOMP_FLG,
			ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,
			ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,
			ED_STUD_SEMESTER.ED_STUD_ID,
			@V_EdStudIntTrnsId
FROM         ED_STUD_COURSE_REG INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_COURSE_REG.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId;

declare @maxStateFromId numeric(9,0);
SELECT @maxStateFromId = ISNULL(MAX(ED_STUD_INT_TRNS_STATE_FROM_ID), 0) + 1 FROM [dbo].[ED_STUD_INT_TRNS_STATE_FROM];

SELECT TOP 1 @EdAcadYearId = ED_ACAD_YEAR_ID, @EdCodeSemesterId = ED_CODE_SEMESTER_ID 
FROM ED_STUD_SEMESTER WHERE ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId ORDER BY ED_STUD_SEMESTER_ID desc;

insert into ED_STUD_INT_TRNS_STATE_FROM
SELECT    ROW_NUMBER() over(order by ED_STUD_STATE_ID)-1+@maxStateFromId, 
			ED_STUD_STATE.ENT_MAIN_ID,
			ED_STUD_STATE.ED_CODE_STATE_STATUS_ID,
			ED_STUD_STATE.AS_FACULTY_INFO_ID,
			ED_STUD_SEMESTER.ED_STUD_ID,
			ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID,
			ED_STUD_SEMESTER.ED_ACAD_YEAR_ID,
			@V_EdStudIntTrnsId
FROM         ED_STUD_STATE INNER JOIN
                      ED_STUD_SEMESTER ON ED_STUD_STATE.ED_STUD_SEMESTER_ID = ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID
where ED_STUD_SEMESTER.AS_FACULTY_INFO_ID = @AsFacultyInfoId
and ED_STUD_SEMESTER.ED_ACAD_YEAR_ID = @EdAcadYearId
and ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = @EdCodeSemesterId
and ED_STUD_SEMESTER.ED_STUD_ID = @EdStudId;

commit transaction t;

end try
begin CATCH

rollback transaction t;
RAISERROR('Error',16,-1)
end catch	

end
else
begin
RAISERROR('Don not repeat student.',16,-1)
end
			
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_INT_TRNS_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_STUD_INT_TRNS table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudIntTrnsId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
        
begin transaction t
begin try

				delete from ED_STUD_INT_TRNS_COURSE_FROM 
				WHERE
					[ED_STUD_INT_TRNS_ID] = @EdStudIntTrnsId

delete from ED_STUD_INT_TRNS_COURSE_to
				WHERE
					[ED_STUD_INT_TRNS_ID] = @EdStudIntTrnsId

delete from ED_STUD_INT_TRNS_STATE_to
				WHERE
					[ED_STUD_INT_TRNS_ID] = @EdStudIntTrnsId

delete from ED_STUD_INT_TRNS_STATE_FROM  
				WHERE
					[ED_STUD_INT_TRNS_ID] = @EdStudIntTrnsId

DELETE FROM ED_STUD_INT_TRNS 
				WHERE
					[ED_STUD_INT_TRNS_ID] = @EdStudIntTrnsId

commit transaction t;
end try
begin catch
rollback transaction t;
end catch

			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_STUD_INT_TRNS_COURSE_FROM_GetByEdStudIntTrnsId" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ED_STUD_INT_TRNS_COURSE_FROM table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudIntTrnsId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ED_STUD_INT_TRNS_COURSE_FROM_ID],
					[ED_COURSE_ID],
					[AUDIT_FLG],
					[REPEAT_FLG],
					[IS_LAST],
					[AS_FACULTY_INFO_ID],
					[ED_CODE_COURSE_STATUS_ID],
					[ED_CODE_GRADING_ID],
					[COURSE_DEGREE],
					[COURSE_POINT],
					[ENT_POLICY_GRADING_HDR_ID],
					[GS_CODE_PASS_FAIL_ID],
					[ADD_GPA_FLG],
					[ENT_POLICY_ASSESS_HDR_ID],
					[INCOMP_FLG],
					[ED_ACAD_YEAR_ID],
					[ED_CODE_SEMESTER_ID],
					[ED_STUD_ID],
					[ED_STUD_INT_TRNS_ID]
				FROM
					[dbo].[ED_STUD_INT_TRNS_COURSE_FROM]
				WHERE
					[ED_STUD_INT_TRNS_ID] = @EdStudIntTrnsId
          and ED_COURSE_ID not in (
          select ED_COURSE_ID from ED_STUD_INT_TRNS_COURSE_TO
          where [ED_STUD_INT_TRNS_ID] = @EdStudIntTrnsId
          )
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_BRANCH_RULE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_BRANCH_RULE table
-- Table Comment: جدول شروط القبول الرئيسية بشعبة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdBranchRuleId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
if not exists ( 
SELECT     'N'
FROM         ED_BRANCH_RULE INNER JOIN
                      ED_ACAD_YEAR ON ED_BRANCH_RULE.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_BRANCH_RULE.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID AND 
                      ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_STUD_BRANCH_PREF ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_BRANCH_PREF.ED_STUD_SEMESTER_ID
WHERE
					ED_BRANCH_RULE.ED_BRANCH_RULE_ID = @EdBranchRuleId
)
begin
DELETE FROM [dbo].[ED_BRANCH_RULE]
				WHERE
					[ED_BRANCH_RULE_ID] = @EdBranchRuleId
end
else
begin
RAISERROR('Delete Related Data.',16,-1)
end
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_INTTRANS_RULE_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_BRANCH_RULE table
-- Table Comment: جدول شروط القبول الرئيسية بشعبة
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdInttransRuleId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
if not exists ( 
SELECT     'N'
FROM         ED_INTTRANS_RULE INNER JOIN
                      ED_ACAD_YEAR ON ED_INTTRANS_RULE.ED_ACAD_YEAR_ID = ED_ACAD_YEAR.ED_ACAD_YEAR_ID INNER JOIN
                      ED_STUD_SEMESTER ON ED_ACAD_YEAR.ED_ACAD_YEAR_ID = ED_STUD_SEMESTER.ED_ACAD_YEAR_ID INNER JOIN
                      ED_CODE_SEMESTER ON ED_INTTRANS_RULE.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID AND 
                      ED_STUD_SEMESTER.ED_CODE_SEMESTER_ID = ED_CODE_SEMESTER.ED_CODE_SEMESTER_ID INNER JOIN
                      ED_STUD_BRANCH_PREF ON ED_STUD_SEMESTER.ED_STUD_SEMESTER_ID = ED_STUD_BRANCH_PREF.ED_STUD_SEMESTER_ID
WHERE
					ED_INTTRANS_RULE.ED_INTTRANS_RULE_ID = @EdInttransRuleId
)
begin
DELETE FROM [dbo].[ED_INTTRANS_RULE]
				WHERE
					[ED_INTTRANS_RULE_ID] = @EdInttransRuleId
end
else
begin
RAISERROR('Delete Related Data.',16,-1)
end
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_STAFF_EVL_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SV_STAFF_EVL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvStaffEvlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
declare @count int;
SELECT  @count= COUNT(SV_STUD_STAFF_EVAL.ED_STUD_ID)
FROM         SV_STAFF_EVL INNER JOIN
                      SV_STAFF_EVAL_ITEM ON SV_STAFF_EVL.SV_STAFF_EVL_ID = SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID INNER JOIN
                      SV_STUD_STAFF_EVAL ON SV_STAFF_EVAL_ITEM.SV_STAFF_EVAL_ITEM_ID = SV_STUD_STAFF_EVAL.SV_STAFF_EVAL_ITEM_ID
where SV_STAFF_EVL.SV_STAFF_EVL_ID = @SvStaffEvlId
if(@count = 0)
begin

--delete from SV_STUD_STAFF_EVAL where SV_STUD_STAFF_EVAL_ID in (
--SELECT SV_STUD_STAFF_EVAL.SV_STUD_STAFF_EVAL_ID
--FROM         SV_STAFF_EVL INNER JOIN
--                      SV_STAFF_EVAL_ITEM ON SV_STAFF_EVL.SV_STAFF_EVL_ID = SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID INNER JOIN
--                      SV_STUD_STAFF_EVAL ON SV_STAFF_EVAL_ITEM.SV_STAFF_EVAL_ITEM_ID = SV_STUD_STAFF_EVAL.SV_STAFF_EVAL_ITEM_ID
--where SV_STAFF_EVL.SV_STAFF_EVL_ID = @SvStaffEvlId)

delete from SV_STAFF_EVAL_ITEM where SV_STAFF_EVAL_ITEM_ID
in(
SELECT     SV_STAFF_EVAL_ITEM.SV_STAFF_EVAL_ITEM_ID
FROM         SV_STAFF_EVL INNER JOIN
                      SV_STAFF_EVAL_ITEM ON SV_STAFF_EVL.SV_STAFF_EVL_ID = SV_STAFF_EVAL_ITEM.SV_COURSE_STF_EVL_ID
)

DELETE FROM [dbo].[SV_STAFF_EVL]
WHERE
[SV_STAFF_EVL_ID] = @SvStaffEvlId

end
else
begin

 RAISERROR('ERR_Delete_Related_Data.',16,-1)
 RETURN 

end
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ED_STUD_GUARD_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina Mostafa )
-- Purpose: Inserts a record into the ED_STUD_GUARD table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdStudGuardId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@GsCodeRelationId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@FullNameEn" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault=""/>
        <parameter name="@JobTitle" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault=""/>
        <parameter name="@PermAddr" type="nvarchar" direction="Input" size="64" precision="0" scale="0" param="(64)" nulldefault=""/>
        <parameter name="@EMail" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@PhoneNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@MobileNum" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
        <parameter name="@MonthIncome" type="numeric" direction="Input" size="5" precision="7" scale="3" param="(7, 3)" nulldefault=""/>
        <parameter name="@StaffFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@MainFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCountryInfoId" type="numeric" direction="Input" size="5" precision="4" scale="0" param="(4, 0)" nulldefault=""/>
        <parameter name="@AdmApplicantId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@EdStudBroId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SaStfMemberId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_EdStudGuardId numeric(6, 0)
				SELECT @V_EdStudGuardId = ISNULL(MAX(ED_STUD_GUARD_ID), 0) + 1 FROM [dbo].[ED_STUD_GUARD];
				  if Not exists (select * from [dbo].[ED_STUD_GUARD] where [ED_STUD_ID]=@EdStudId and [GS_CODE_RELATION_ID]=@GsCodeRelationId)
          begin
				INSERT INTO [dbo].[ED_STUD_GUARD]
					(
					[ED_STUD_GUARD_ID]
					,[ED_STUD_ID]
					,[GS_CODE_RELATION_ID]
					,[FULL_NAME_EN]
					,[JOB_TITLE]
					,[PERM_ADDR]
					,[E_MAIL]
					,[PHONE_NUM]
					,[MOBILE_NUM]
					,[MONTH_INCOME]
					,[STAFF_FLG]
					,[MAIN_FLG]
					,[GS_COUNTRY_INFO_ID]
					,[ADM_APPLICANT_ID]
					,[ED_STUD_BRO_ID]
					,[SA_STF_MEMBER_ID]
					)
				VALUES
					(
          	@V_EdStudGuardId
					,@EdStudId
					,@GsCodeRelationId
					,@FullNameEn
					,@JobTitle
					,@PermAddr
					,@EMail
					,@PhoneNum
					,@MobileNum
					,@MonthIncome
					,@StaffFlg
					,@MainFlg
					,@GsCountryInfoId
					,@AdmApplicantId
					,@EdStudBroId
					,@SaStfMemberId
					
					)
          end
          else
        begin
 RAISERROR('Do not repeate Relation',16,-1)
 RETURN
             
end
				
									
							
			]]>
      </body>
    </procedure>




    <procedure owner="dbo" name="AS_CODE_DEGREE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina Mostafa)
-- Purpose: Inserts a record into the AS_CODE_DEGREE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DegreeDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DegreeDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DegreeCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_AsCodeDegreeId numeric(9, 0)
				SELECT @V_AsCodeDegreeId = ISNULL(MAX(AS_CODE_DEGREE_ID), 0) + 1 FROM [dbo].[AS_CODE_DEGREE];
				  if not exists (select * from [dbo].[AS_CODE_DEGREE] where AS_CODE_DEGREE_CLASS_ID=@AsCodeDegreeClassId
         and DEGREE_DESCR_AR=@DegreeDescrAr and DEGREE_DESCR_EN=@DegreeDescrEn)
           begin
            
				INSERT INTO [dbo].[AS_CODE_DEGREE]
					(
          [AS_CODE_DEGREE_ID]
					,[AS_CODE_DEGREE_CLASS_ID]
					,[DEGREE_DESCR_AR]
					,[DEGREE_DESCR_EN]
					,[DEGREE_CODE]
					)
				VALUES
					(
					@V_AsCodeDegreeId
					,@AsCodeDegreeClassId
					,@DegreeDescrAr
					,@DegreeDescrEn
					,@DegreeCode
					)
          end 
          else
          begin
            RAISERROR('ERR_Degree_REPEAT',16,-1)
              RETURN 
           end
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="AS_CODE_DEGREE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina Mostafa)
-- Purpose: Updates a record in the AS_CODE_DEGREE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@AsCodeDegreeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalAsCodeDegreeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@AsCodeDegreeClassId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DegreeDescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DegreeDescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DegreeCode" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
          if not exists (select * from [dbo].[AS_CODE_DEGREE] where AS_CODE_DEGREE_CLASS_ID=@AsCodeDegreeClassId
         and DEGREE_DESCR_AR=@DegreeDescrAr and DEGREE_DESCR_EN=@DegreeDescrEn AND AS_CODE_DEGREE_ID <> @AsCodeDegreeId)
           begin
				UPDATE
					[dbo].[AS_CODE_DEGREE]
				SET
					[AS_CODE_DEGREE_ID] = @AsCodeDegreeId
					,[AS_CODE_DEGREE_CLASS_ID] = @AsCodeDegreeClassId
					,[DEGREE_DESCR_AR] = @DegreeDescrAr
					,[DEGREE_DESCR_EN] = @DegreeDescrEn
					,[DEGREE_CODE] = @DegreeCode
				WHERE
[AS_CODE_DEGREE_ID] = @AsCodeDegreeId 
 end 
          else
          begin
            RAISERROR('ERR_Degree_REPEAT',16,-1)
              RETURN 
           end
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="TRNS_LINE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina Mostafa)
-- Purpose: Inserts a record into the TRNS_LINE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@TrnsLineId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@LineNo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@LineDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@TrnsCdeDrvrId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TrnsCdeBusId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_TrnsLineId numeric(5, 0)
				SELECT @V_TrnsLineId = ISNULL(MAX(TRNS_LINE_ID), 0) + 1 FROM [dbo].[TRNS_LINE];
				
          if Not exists (select * from [dbo].[TRNS_LINE] where ED_ACAD_YEAR_ID=@EdAcadYearId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND TRNS_CDE_DRVR_ID=@TrnsCdeDrvrId)
          
           begin
              if Not exists (select * from [dbo].[TRNS_LINE] where ED_ACAD_YEAR_ID=@EdAcadYearId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND TRNS_CDE_BUS_ID=@TrnsCdeBusId)
            begin
           
				INSERT INTO [dbo].[TRNS_LINE]
					(
					[TRNS_LINE_ID]
					,[ED_ACAD_YEAR_ID]
					,[ED_CODE_SEMESTER_ID]
					,[LINE_NO]
					,[LINE_DESCR_AR]
					,[TRNS_CDE_DRVR_ID]
					,[TRNS_CDE_BUS_ID]
					)
				VALUES
					(
					@V_TrnsLineId
					,@EdAcadYearId
					,@EdCodeSemesterId
					,@LineNo
					,@LineDescrAr
					,@TrnsCdeDrvrId
					,@TrnsCdeBusId
					)
          end 
          else
          begin
           RAISERROR('ERR_Bus_REPEAT',16,-1)
              RETURN 
           end
           end
           else
           begin
            RAISERROR('ERR_Driver_REPEAT',16,-1)
              RETURN 
           end
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="TRNS_LINE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (Dina)
-- Purpose: Updates a record in the TRNS_LINE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@TrnsLineId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@OriginalTrnsLineId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@LineNo" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@LineDescrAr" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
        <parameter name="@TrnsCdeDrvrId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TrnsCdeBusId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        
          if Not exists (select * from [dbo].[TRNS_LINE] where ED_ACAD_YEAR_ID=@EdAcadYearId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND TRNS_CDE_DRVR_ID=@TrnsCdeDrvrId AND TRNS_LINE_ID<>@TrnsLineId)
          
           begin
              if Not exists (select * from [dbo].[TRNS_LINE] where ED_ACAD_YEAR_ID=@EdAcadYearId AND ED_CODE_SEMESTER_ID=@EdCodeSemesterId AND TRNS_CDE_BUS_ID=@TrnsCdeBusId AND TRNS_LINE_ID<>@TrnsLineId)
            begin
				UPDATE
					[dbo].[TRNS_LINE]
				SET
					[TRNS_LINE_ID] = @TrnsLineId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[LINE_NO] = @LineNo
					,[LINE_DESCR_AR] = @LineDescrAr
					,[TRNS_CDE_DRVR_ID] = @TrnsCdeDrvrId
					,[TRNS_CDE_BUS_ID] = @TrnsCdeBusId
				WHERE
[TRNS_LINE_ID] = @TrnsLineId 

 end 
          else
          begin
           RAISERROR('ERR_Bus_REPEAT',16,-1)
              RETURN 
           end
           end
           else
           begin
            RAISERROR('ERR_Driver_REPEAT',16,-1)
              RETURN 
           end
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="TRNS_CDE_STOP_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TRNS_CDE_STOP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@TrnsCdeStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@StopNameAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StopNameEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_TrnsCdeStopId numeric(5, 0)
				SELECT @V_TrnsCdeStopId = ISNULL(MAX(TRNS_CDE_STOP_ID), 0) + 1 FROM [dbo].[TRNS_CDE_STOP];
				  if Not exists (select * from [dbo].[TRNS_CDE_STOP] where STOP_NAME_AR=@StopNameAr )
          begin
           if Not exists (select * from [dbo].[TRNS_CDE_STOP] where  STOP_NAME_EN=@StopNameEn)
          begin
				INSERT INTO [dbo].[TRNS_CDE_STOP]
					(
					[TRNS_CDE_STOP_ID]
					,[STOP_NAME_AR]
					,[STOP_NAME_EN]
					)
				VALUES
					(
					@V_TrnsCdeStopId
					,@StopNameAr
					,@StopNameEn
					)
         end 
          else
          begin
           RAISERROR('ERR_StopNameEn_REPEAT',16,-1)
              RETURN
              end
              end
                else
                begin
           RAISERROR('ERR_StopNameAr_REPEAT',16,-1)
              RETURN
              end
				
									
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="TRNS_CDE_STOP_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TRNS_CDE_STOP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@TrnsCdeStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@OriginalTrnsCdeStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@StopNameAr" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
        <parameter name="@StopNameEn" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
          if Not exists (select * from [dbo].[TRNS_CDE_STOP] where STOP_NAME_AR=@StopNameAr )
          begin
           if Not exists (select * from [dbo].[TRNS_CDE_STOP] where  STOP_NAME_EN=@StopNameEn)
          begin
				UPDATE
					[dbo].[TRNS_CDE_STOP]
				SET
					[TRNS_CDE_STOP_ID] = @TrnsCdeStopId
					,[STOP_NAME_AR] = @StopNameAr
					,[STOP_NAME_EN] = @StopNameEn
				WHERE
[TRNS_CDE_STOP_ID] = @TrnsCdeStopId 
 end 
          else
          begin
           RAISERROR('ERR_StopNameEn_REPEAT',16,-1)
              RETURN
              end
              end
                else
                begin
           RAISERROR('ERR_StopNameAr_REPEAT',16,-1)
              RETURN
              end
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="TRNS_LINE_STOP_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TRNS_LINE_STOP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@TrnsLineStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TrnsLineId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TrnsCdeStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_TrnsLineStopId numeric(5, 0)
				SELECT @V_TrnsLineStopId = ISNULL(MAX(TRNS_LINE_STOP_ID), 0) + 1 FROM [dbo].[TRNS_LINE_STOP];
				  if Not exists (select * from [dbo].[TRNS_LINE_STOP] where TRNS_CDE_STOP_ID=@TrnsCdeStopId AND  TRNS_LINE_ID=@TrnsLineId)
          begin
				INSERT INTO [dbo].[TRNS_LINE_STOP]
					(
					[TRNS_LINE_STOP_ID]
					,[TRNS_LINE_ID]
					,[TRNS_CDE_STOP_ID]
					)
				VALUES
					(
					@V_TrnsLineStopId
					,@TrnsLineId
					,@TrnsCdeStopId
					)
				end
									 else
                begin
           RAISERROR('ERR_StopLine_REPEAT',16,-1)
              RETURN
              end
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="TRNS_LINE_STOP_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TRNS_LINE_STOP table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@TrnsLineStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@OriginalTrnsLineStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TrnsLineId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TrnsCdeStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
         if Not exists (select * from [dbo].[TRNS_LINE_STOP] where TRNS_CDE_STOP_ID=@TrnsCdeStopId AND  TRNS_LINE_ID=@TrnsLineId)
          begin
				UPDATE
					[dbo].[TRNS_LINE_STOP]
				SET
					[TRNS_LINE_STOP_ID] = @TrnsLineStopId
					,[TRNS_LINE_ID] = @TrnsLineId
					,[TRNS_CDE_STOP_ID] = @TrnsCdeStopId
				WHERE
[TRNS_LINE_STOP_ID] = @TrnsLineStopId 

	end
									 else
                begin
           RAISERROR('ERR_StopLine_REPEAT',16,-1)
              RETURN
              end
				
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FEE_STUD_DISC table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudDiscId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DiscReqDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@FeeCdeDiscTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DiscPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@StopFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@UpdatedPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@LastUpdated" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				if Not Exists(select 1 from [dbo].[FEE_STUD_DISC] where ED_STUD_ID = @EdStudId and FEE_CDE_DISC_TYPE_ID = @FeeCdeDiscTypeId and ED_ACAD_YEAR_ID = @EdAcadYearId)
        begin
	        DECLARE @V_FeeStudDiscId numeric(9, 0);
	        SELECT @V_FeeStudDiscId = ISNULL(MAX(FEE_STUD_DISC_ID), 0) + 1 FROM [dbo].[FEE_STUD_DISC];

	        INSERT INTO [dbo].[FEE_STUD_DISC]
		        (
		        [FEE_STUD_DISC_ID]
		        ,[DISC_REQ_DATE]
		        ,[AS_FACULTY_INFO_ID]
		        ,[ED_STUD_ID]
		        ,[ED_ACAD_YEAR_ID]
		        ,[FEE_CDE_DISC_TYPE_ID]
		        ,[DISC_PERCENT]
		        ,[STOP_FLG]
		        ,[GS_CODE_REQ_STATUS_ID]
		        ,[UPDATED_PERCENT]
		        ,[LAST_UPDATED]
		        )
	        VALUES
		        (
		        @V_FeeStudDiscId
		        ,@DiscReqDate
		        ,@AsFacultyInfoId
		        ,@EdStudId
		        ,@EdAcadYearId
		        ,@FeeCdeDiscTypeId
		        ,@DiscPercent
		        ,@StopFlg
		        ,@GsCodeReqStatusId
		        ,@UpdatedPercent
		        ,@LastUpdated
		        );
        end
        else
	        RAISERROR('FeeCdeDiscTypeAddError', 16, -1);
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="FEE_STUD_DISC_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FEE_STUD_DISC table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@FeeStudDiscId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalFeeStudDiscId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DiscReqDate" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@FeeCdeDiscTypeId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DiscPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@StopFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GsCodeReqStatusId" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@UpdatedPercent" type="decimal" direction="Input" size="5" precision="5" scale="2" param="(5, 2)" nulldefault=""/>
        <parameter name="@LastUpdated" type="date" direction="Input" size="3" precision="10" scale="0" param="" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
        if Not Exists(select 1 from [dbo].[FEE_STUD_DISC] where ED_STUD_ID = @EdStudId and FEE_CDE_DISC_TYPE_ID = @FeeCdeDiscTypeId 
        and ED_ACAD_YEAR_ID = @EdAcadYearId and FEE_STUD_DISC_ID != @FeeStudDiscId)
        begin
	        UPDATE
		        [dbo].[FEE_STUD_DISC]
	        SET
		        [FEE_STUD_DISC_ID] = @FeeStudDiscId
		        ,[DISC_REQ_DATE] = @DiscReqDate
		        ,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
		        ,[ED_STUD_ID] = @EdStudId
		        ,[ED_ACAD_YEAR_ID] = @EdAcadYearId
		        ,[FEE_CDE_DISC_TYPE_ID] = @FeeCdeDiscTypeId
		        ,[DISC_PERCENT] = @DiscPercent
		        ,[STOP_FLG] = @StopFlg
		        ,[GS_CODE_REQ_STATUS_ID] = @GsCodeReqStatusId
		        ,[UPDATED_PERCENT] = @UpdatedPercent
		        ,[LAST_UPDATED] = @LastUpdated
	        WHERE [FEE_STUD_DISC_ID] = @FeeStudDiscId;
        end
        else
	        RAISERROR('FeeCdeDiscTypeUpdateError', 16, -1);
				
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="GS_CODE_RPT_SIGNATURE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GS_CODE_RPT_SIGNATURE table
-- Table Comment: جدول التوقيعات التي تظهر بالتقارير
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCodeRptSignatureId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@PersonNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@PersonNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@SigOrder" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_GsCodeRptSignatureId numeric(9, 0)
				SELECT @V_GsCodeRptSignatureId = ISNULL(MAX(GS_CODE_RPT_SIGNATURE_ID), 0) + 1 FROM [dbo].[GS_CODE_RPT_SIGNATURE];
				 if Not exists (select * from [dbo].[GS_CODE_RPT_SIGNATURE] where DESCR_AR=@DescrAr AND DESCR_EN=@DESCREN AND PERSON_NAME_AR=@PERSONNAMEAR AND PERSON_NAME_EN=@PERSONNAMEEN )
          begin
				INSERT INTO [dbo].[GS_CODE_RPT_SIGNATURE]
					(
					[GS_CODE_RPT_SIGNATURE_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[AS_FACULTY_INFO_ID]
					,[PERSON_NAME_AR]
					,[PERSON_NAME_EN]
					,[SIG_ORDER]
					)
				VALUES
					(
					@V_GsCodeRptSignatureId
					,@DescrAr
					,@DescrEn
					,@AsFacultyInfoId
					,@PersonNameAr
					,@PersonNameEn
					,@SigOrder
					)
				
							end
				 else
                begin
           RAISERROR('ERR_Sig_REPEAT',16,-1)
              RETURN
              end		
							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="GS_CODE_RPT_SIGNATURE_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GS_CODE_RPT_SIGNATURE table
-- Table Comment: جدول التوقيعات التي تظهر بالتقارير
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@GsCodeRptSignatureId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@OriginalGsCodeRptSignatureId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@AsFacultyInfoId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@PersonNameAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@PersonNameEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@SigOrder" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
         if Not exists (select * from [dbo].[GS_CODE_RPT_SIGNATURE] where DESCR_AR=@DescrAr AND DESCR_EN=@DESCREN AND PERSON_NAME_AR=@PERSONNAMEAR AND PERSON_NAME_EN=@PERSONNAMEEN  AND GS_CODE_RPT_SIGNATURE_ID<>@GSCODERPTSIGNATUREID )
          begin
				UPDATE
					[dbo].[GS_CODE_RPT_SIGNATURE]
				SET
					[GS_CODE_RPT_SIGNATURE_ID] = @GsCodeRptSignatureId
					,[DESCR_AR] = @DescrAr
					,[DESCR_EN] = @DescrEn
					,[AS_FACULTY_INFO_ID] = @AsFacultyInfoId
					,[PERSON_NAME_AR] = @PersonNameAr
					,[PERSON_NAME_EN] = @PersonNameEn
					,[SIG_ORDER] = @SigOrder
				WHERE
[GS_CODE_RPT_SIGNATURE_ID] = @GsCodeRptSignatureId 

					end
				 else
                begin
           RAISERROR('ERR_Sig_REPEAT',16,-1)
              RETURN
              end		
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="TRNS_STUD_REQ_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  (by dalia 3-11-2012)
-- Purpose: Updates a record in the TRNS_STUD_REQ table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@TrnsStudReqId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@OriginalTrnsStudReqId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdStudId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@ReqDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
        <parameter name="@TrnsCdeStopId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@TrnsLineId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TRNS_STUD_REQ]
				SET
				[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[ED_STUD_ID] = @EdStudId
					,[REQ_DATE] = @ReqDate
					,[TRNS_CDE_STOP_ID] = @TrnsCdeStopId
					,[TRNS_LINE_ID] = @TrnsLineId
				WHERE
[TRNS_STUD_REQ_ID] = @TrnsStudReqId 
				
			]]>
      </body>
    </procedure>


    <procedure owner="dbo" name="SC_CDE_HALL_TYPE_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SC_CDE_HALL_TYPE table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@ScCdeHallTypeId" type="numeric" direction="Input" size="5" precision="2" scale="0" param="(2, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_ScCdeHallTypeId numeric(2, 0)
				SELECT @V_ScCdeHallTypeId = ISNULL(MAX(SC_CDE_HALL_TYPE_ID), 0) + 1 FROM [dbo].[SC_CDE_HALL_TYPE];
				  if Not exists (select * from [dbo].[SC_CDE_HALL_TYPE] where DESCR_AR=@DescrAr AND DESCR_EN=@DescrEn )
          begin
				
				INSERT INTO [dbo].[SC_CDE_HALL_TYPE]
					(
					[SC_CDE_HALL_TYPE_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					)
				VALUES
					(
					@V_ScCdeHallTypeId
					,@DescrAr
					,@DescrEn
					)
				
						end
				 else
                begin
           RAISERROR('ERR_Hall_Type_REPEAT',16,-1)
              RETURN
              end			
							
			]]>
      </body>
    </procedure>
    

    <procedure owner="dbo" name="ED_ACAD_PLAN_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ED_ACAD_PLAN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadPlanId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@OriginalEdAcadPlanId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AcdPlnFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@CurrentFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EntMainRltdId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@UnivCouncilDecision" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				BEGIN TRANSACTION;

	      BEGIN TRY
		
		      if @CurrentFlg = 1
			      update ED_ACAD_PLAN set Current_FLG = 0
			      where ENT_MAIN_ID = @EntMainId;
		
		      -- Modify the updatable columns
		      UPDATE
			      [dbo].[ED_ACAD_PLAN]
		      SET
			      [ED_ACAD_PLAN_ID] = @EdAcadPlanId
			      ,[ENT_MAIN_ID] = @EntMainId
			      ,[ED_ACAD_YEAR_ID] = @EdAcadYearId
			      ,[ACD_PLN_FLG] = @AcdPlnFlg
			      ,[Current_FLG] = @CurrentFlg
			      ,[ENT_MAIN_RLTD_ID] = @EntMainRltdId
			      ,[Univ_Council_Decision] = @UnivCouncilDecision
		      WHERE [ED_ACAD_PLAN_ID] = @EdAcadPlanId 
		
		      COMMIT TRANSACTION;
	      END TRY
	      BEGIN CATCH					
		      ROLLBACK TRANSACTION;
		      raiserror('update error', 16, -1);
	      END CATCH;
				
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_ACAD_PLAN_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ED_ACAD_PLAN table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdAcadPlanId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@AcdPlnFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@CurrentFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@EntMainRltdId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@UnivCouncilDecision" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				if not exists(select ED_ACAD_PLAN_ID from ED_ACAD_PLAN where ENT_MAIN_ID = @EntMainId and ED_ACAD_YEAR_ID = @EdAcadYearId)
	      begin
	
		      DECLARE @V_EdAcadPlanId numeric(5, 0)
		      SELECT @V_EdAcadPlanId = ISNULL(MAX(ED_ACAD_PLAN_ID), 0) + 1 FROM [dbo].[ED_ACAD_PLAN];
					
		      BEGIN TRANSACTION;

		      BEGIN TRY
			
			      if @CurrentFlg = 1
				      update ED_ACAD_PLAN set Current_FLG = 0
				      where ENT_MAIN_ID = @EntMainId;
			
			      INSERT INTO [dbo].[ED_ACAD_PLAN]
				      (
				      [ED_ACAD_PLAN_ID]
				      ,[ENT_MAIN_ID]
				      ,[ED_ACAD_YEAR_ID]
				      ,[ACD_PLN_FLG]
				      ,[Current_FLG]
				      ,[ENT_MAIN_RLTD_ID]
				      ,[Univ_Council_Decision]
				      )
			      VALUES
				      (
				      @V_EdAcadPlanId
				      ,@EntMainId
				      ,@EdAcadYearId
				      ,@AcdPlnFlg
				      ,@CurrentFlg
				      ,@EntMainRltdId
				      ,@UnivCouncilDecision
				      );
			
			      COMMIT TRANSACTION;
		      END TRY
		      BEGIN CATCH					
			      ROLLBACK TRANSACTION;
			      raiserror('insert error', 16, -1);
		      END CATCH
	
	      end
	      else
		      raiserror('AddAcadymicYearPlanError', 16, -1);
				
									
							
			]]>
      </body>
    </procedure>

    <procedure owner="dbo" name="ED_COURSE_EXP_HDR_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ED_COURSE_EXP_HDR table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EdCourseExpHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				if not exists(select '' from ENT_COURSE_PKG_DTL where ED_COURSE_EXP_HDR_ID = @EdCourseExpHdrId or ED_COURSE_EXP_PREREQ_HDR_ID = @EdCourseExpHdrId)
	      begin
		      BEGIN TRANSACTION;
		      BEGIN TRY
		
			      Delete From ED_COURSE_EXP_DTL where ED_COURSE_EXP_HDR_ID = @EdCourseExpHdrId;
		
			      DELETE FROM [dbo].[ED_COURSE_EXP_HDR] WITH (ROWLOCK) 
			      WHERE [ED_COURSE_EXP_HDR_ID] = @EdCourseExpHdrId;
			
			      COMMIT TRANSACTION;
		
		      END TRY
		      BEGIN CATCH					
			      ROLLBACK TRANSACTION;
			      raiserror('update error', 16, -1);
		      END CATCH;
	
	      end
	      else
		      raiserror('HeaderExpressionRelatedToCoursePkg', 16, -1);
					
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="ENT_COURSE_PKG_DTL_Delete" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ENT_COURSE_PKG_DTL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCoursePkgDtlId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				declare @ED_COURSE_EXP_HDR_ID numeric(7, 0), @ED_COURSE_EXP_PREREQ_HDR_ID numeric(7, 0);
	
	      select @ED_COURSE_EXP_HDR_ID = ED_COURSE_EXP_HDR_ID, @ED_COURSE_EXP_PREREQ_HDR_ID = ED_COURSE_EXP_PREREQ_HDR_ID
	      from [ENT_COURSE_PKG_DTL] where [ENT_COURSE_PKG_DTL_ID] = @EntCoursePkgDtlId;

	      DELETE FROM [dbo].[ENT_COURSE_PKG_DTL] WITH (ROWLOCK) 
	      WHERE [ENT_COURSE_PKG_DTL_ID] = @EntCoursePkgDtlId
	
	      Delete from dbo.ED_COURSE_EXP_DTL where ED_COURSE_EXP_HDR_ID in (@ED_COURSE_EXP_HDR_ID, @ED_COURSE_EXP_PREREQ_HDR_ID);
	
	      Delete from dbo.ED_COURSE_EXP_HDR where ED_COURSE_EXP_HDR_ID in (@ED_COURSE_EXP_HDR_ID, @ED_COURSE_EXP_PREREQ_HDR_ID);
					
			]]>
      </body>
    </procedure>



    <procedure owner="dbo" name="U_ENT_COURSE_PKG_DTL_GetByEntCoursePkgHdrId" >
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ENT_COURSE_PKG_DTL table through an index
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@EntCoursePkgHdrId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				SELECT
					[ENT_COURSE_PKG_DTL_ID],
					[ED_COURSE_ID],
					[ENT_COURSE_PKG_HDR_ID],
					[ADD_GPA_FLG],
					[ADD_MJRGPA_FLG],
					[CRS_EXP_FLG],
					[CRS_EXP],
					[CRS_EXP_NAME_AR],
					[CRS_EXP_NAME_EN],
					[ED_COURSE_EXP_HDR_ID],
					[ED_COURSE_EXP_PREREQ_HDR_ID]
				FROM
					[dbo].[ENT_COURSE_PKG_DTL]
				WHERE
					[ENT_COURSE_PKG_HDR_ID] = @EntCoursePkgHdrId
          AND ED_COURSE_ID is not Null
				SELECT @@ROWCOUNT
					
			]]>
      </body>

    </procedure>

    <procedure owner="dbo" name="SV_CODE_EVAL_ITEM_Insert" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SV_CODE_EVAL_ITEM table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvCodeEvalItemId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@DescrAr" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@DescrEn" type="nvarchar" direction="Input" size="150" precision="0" scale="0" param="(150)" nulldefault=""/>
        <parameter name="@IsActive" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
        <parameter name="@GroupFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				DECLARE @V_SvCodeEvalItemId numeric(3, 0)
				SELECT @V_SvCodeEvalItemId = ISNULL(MAX(SV_CODE_EVAL_ITEM_ID), 0) + 1 FROM [dbo].[SV_CODE_EVAL_ITEM];
				if not exists (select * from SV_CODE_EVAL_ITEM where [DESCR_AR]= @DescrAr and [DESCR_EN]=@DescrEn )
				begin
				INSERT INTO [dbo].[SV_CODE_EVAL_ITEM]
					(
					[SV_CODE_EVAL_ITEM_ID]
					,[DESCR_AR]
					,[DESCR_EN]
					,[IS_ACTIVE]
					,[GROUP_FLG]
					)
				VALUES
					(
					@V_SvCodeEvalItemId
					,@DescrAr
					,@DescrEn
					,@IsActive
					,@GroupFlg
					)
				end 
				else
				begin
           RAISERROR('ERR_Eval_Item_REPEAT',16,-1)
              RETURN
              end		
									

							
			]]>
      </body>
    </procedure>
    <procedure owner="dbo" name="SV_COURSE_EVAL_Update" grant="">
      <comment>
        <![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SV_COURSE_EVAL table
----------------------------------------------------------------------------------------------------
*/
]]>
      </comment>
      <parameters>
        <parameter name="@SvCourseEvalId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@OriginalSvCourseEvalId" type="numeric" direction="Input" size="5" precision="6" scale="0" param="(6, 0)" nulldefault=""/>
        <parameter name="@EdCodeSemesterId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@EdAcadYearId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EntMainId" type="numeric" direction="Input" size="5" precision="5" scale="0" param="(5, 0)" nulldefault=""/>
        <parameter name="@EdCourseId" type="numeric" direction="Input" size="5" precision="9" scale="0" param="(9, 0)" nulldefault=""/>
        <parameter name="@SvCodeRatingSchmId" type="numeric" direction="Input" size="5" precision="3" scale="0" param="(3, 0)" nulldefault=""/>
        <parameter name="@SeUserId" type="numeric" direction="Input" size="5" precision="7" scale="0" param="(7, 0)" nulldefault=""/>
        <parameter name="@PubFlg" type="numeric" direction="Input" size="5" precision="1" scale="0" param="(1, 0)" nulldefault=""/>
      </parameters>
      <body>
        <![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SV_COURSE_EVAL]
				SET
					[SV_COURSE_EVAL_ID] = @SvCourseEvalId
					,[ED_CODE_SEMESTER_ID] = @EdCodeSemesterId
					,[ED_ACAD_YEAR_ID] = @EdAcadYearId
					,[ENT_MAIN_ID] = @EntMainId
					,[ED_COURSE_ID] = @EdCourseId
					,[SV_CODE_RATING_SCHM_ID] = @SvCodeRatingSchmId
					,[SE_USER_ID] = @SeUserId
					,[PUB_FLG] = @PubFlg
				WHERE
[SV_COURSE_EVAL_ID] = @SvCourseEvalId 
				
			]]>
      </body>
    </procedure>
  </procedures>
</root>
