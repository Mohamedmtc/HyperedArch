/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdCourseProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdCourse"/> entity.
	///</summary>
	public abstract partial class SqlEdCourseProviderBase : EdCourseProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdCourseProviderBase"/> instance.
		/// </summary>
		public SqlEdCourseProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdCourseProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdCourseProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edCourseId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edCourseId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, _edCourseId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdCourse)
					,_edCourseId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
		public override TList<EdCourse> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdCourse>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeCourseId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseCode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseDescrAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseDescrEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreditHours", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseContentsAr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseContentsEn", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsActive", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrereqCodeExp", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PrereqIdExp", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ElectFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCourseElectTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCoursePrfxId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CrsNo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PfFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CrsLvl", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StopMessage", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCourseExpHdrId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoadWithTrain", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExamFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FreeFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IncmpltFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DropFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExamHrs", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CrsWgt", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseDescrFr", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ects", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LoadCrsCount", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExtndFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CourseMod", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeCourseTypeId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_course_id ") || clause.Trim().StartsWith("ed_course_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCourseId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_course_id ") || clause.Trim().StartsWith("ed_code_course_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeCourseId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_code ") || clause.Trim().StartsWith("course_code="))
				{
					database.SetParameterValue(commandWrapper, "@CourseCode", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_descr_ar ") || clause.Trim().StartsWith("course_descr_ar="))
				{
					database.SetParameterValue(commandWrapper, "@CourseDescrAr", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_descr_en ") || clause.Trim().StartsWith("course_descr_en="))
				{
					database.SetParameterValue(commandWrapper, "@CourseDescrEn", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("credit_hours ") || clause.Trim().StartsWith("credit_hours="))
				{
					database.SetParameterValue(commandWrapper, "@CreditHours", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_contents_ar ") || clause.Trim().StartsWith("course_contents_ar="))
				{
					database.SetParameterValue(commandWrapper, "@CourseContentsAr", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_contents_en ") || clause.Trim().StartsWith("course_contents_en="))
				{
					database.SetParameterValue(commandWrapper, "@CourseContentsEn", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_main_id ") || clause.Trim().StartsWith("ent_main_id="))
				{
					database.SetParameterValue(commandWrapper, "@EntMainId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_language_id ") || clause.Trim().StartsWith("gs_code_language_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeLanguageId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_faculty_info_id ") || clause.Trim().StartsWith("as_faculty_info_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsFacultyInfoId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_active ") || clause.Trim().StartsWith("is_active="))
				{
					database.SetParameterValue(commandWrapper, "@IsActive", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("prereq_code_exp ") || clause.Trim().StartsWith("prereq_code_exp="))
				{
					database.SetParameterValue(commandWrapper, "@PrereqCodeExp", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("prereq_id_exp ") || clause.Trim().StartsWith("prereq_id_exp="))
				{
					database.SetParameterValue(commandWrapper, "@PrereqIdExp", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("elect_flg ") || clause.Trim().StartsWith("elect_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ElectFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_course_elect_type_id ") || clause.Trim().StartsWith("gs_course_elect_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCourseElectTypeId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_course_prfx_id ") || clause.Trim().StartsWith("ed_course_prfx_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCoursePrfxId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("crs_no ") || clause.Trim().StartsWith("crs_no="))
				{
					database.SetParameterValue(commandWrapper, "@CrsNo", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pf_flg ") || clause.Trim().StartsWith("pf_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PfFlg", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("crs_lvl ") || clause.Trim().StartsWith("crs_lvl="))
				{
					database.SetParameterValue(commandWrapper, "@CrsLvl", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("online_flg ") || clause.Trim().StartsWith("online_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OnlineFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stop_message ") || clause.Trim().StartsWith("stop_message="))
				{
					database.SetParameterValue(commandWrapper, "@StopMessage", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("as_code_degree_class_id ") || clause.Trim().StartsWith("as_code_degree_class_id="))
				{
					database.SetParameterValue(commandWrapper, "@AsCodeDegreeClassId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_course_exp_hdr_id ") || clause.Trim().StartsWith("ed_course_exp_hdr_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCourseExpHdrId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("load_with_train ") || clause.Trim().StartsWith("load_with_train="))
				{
					database.SetParameterValue(commandWrapper, "@LoadWithTrain", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exam_flg ") || clause.Trim().StartsWith("exam_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ExamFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("free_flg ") || clause.Trim().StartsWith("free_flg="))
				{
					database.SetParameterValue(commandWrapper, "@FreeFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("incmplt_flg ") || clause.Trim().StartsWith("incmplt_flg="))
				{
					database.SetParameterValue(commandWrapper, "@IncmpltFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("drop_flg ") || clause.Trim().StartsWith("drop_flg="))
				{
					database.SetParameterValue(commandWrapper, "@DropFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exam_hrs ") || clause.Trim().StartsWith("exam_hrs="))
				{
					database.SetParameterValue(commandWrapper, "@ExamHrs", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("crs_wgt ") || clause.Trim().StartsWith("crs_wgt="))
				{
					database.SetParameterValue(commandWrapper, "@CrsWgt", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_descr_fr ") || clause.Trim().StartsWith("course_descr_fr="))
				{
					database.SetParameterValue(commandWrapper, "@CourseDescrFr", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ects ") || clause.Trim().StartsWith("ects="))
				{
					database.SetParameterValue(commandWrapper, "@Ects", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("load_crs_count ") || clause.Trim().StartsWith("load_crs_count="))
				{
					database.SetParameterValue(commandWrapper, "@LoadCrsCount", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("extnd_flg ") || clause.Trim().StartsWith("extnd_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ExtndFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("course_mod ") || clause.Trim().StartsWith("course_mod="))
				{
					database.SetParameterValue(commandWrapper, "@CourseMod", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_course_type_id ") || clause.Trim().StartsWith("ed_code_course_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeCourseTypeId", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdCourse> rows = new TList<EdCourse>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
		public override TList<EdCourse> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_Find_Dynamic", typeof(EdCourseColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdCourse> rows = new TList<EdCourse>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdCourse> rows = new TList<EdCourse>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
		public override TList<EdCourse> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdCourse> rows = new TList<EdCourse>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByGsCodeLanguageId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_AUTO_0006 key.
		///		FK_AUTO_0006 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeLanguageId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByGsCodeLanguageId(TransactionManager transactionManager, System.Decimal _gsCodeLanguageId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByGsCodeLanguageId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, _gsCodeLanguageId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeLanguageId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsCodeDegreeClassId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_COURSE_AS_CODE_DEGREE_CLASS key.
		///		FK_ED_COURSE_AS_CODE_DEGREE_CLASS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asCodeDegreeClassId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByAsCodeDegreeClassId(TransactionManager transactionManager, System.Decimal? _asCodeDegreeClassId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByAsCodeDegreeClassId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, _asCodeDegreeClassId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeClassId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsCodeDegreeClassId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAsFacultyInfoId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_COURSE_AS_FACULTY_INFO key.
		///		FK_ED_COURSE_AS_FACULTY_INFO Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_asFacultyInfoId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByAsFacultyInfoId(TransactionManager transactionManager, System.Decimal? _asFacultyInfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByAsFacultyInfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, _asFacultyInfoId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAsFacultyInfoId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeCourseId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_COURSE_ED_CODE_COURSE key.
		///		FK_ED_COURSE_ED_CODE_COURSE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeCourseId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByEdCodeCourseId(TransactionManager transactionManager, System.Decimal? _edCodeCourseId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByEdCodeCourseId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeCourseId", DbType.Decimal, _edCodeCourseId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeCourseTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_COURSE_ED_CODE_COURSE_TYPE key.
		///		FK_ED_COURSE_ED_CODE_COURSE_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeCourseTypeId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByEdCodeCourseTypeId(TransactionManager transactionManager, System.Int32? _edCodeCourseTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByEdCodeCourseTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeCourseTypeId", DbType.Int32, _edCodeCourseTypeId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeCourseTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCourseExpHdrId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_COURSE_ED_COURSE_EXP_HDR key.
		///		FK_ED_COURSE_ED_COURSE_EXP_HDR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCourseExpHdrId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByEdCourseExpHdrId(TransactionManager transactionManager, System.Decimal? _edCourseExpHdrId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByEdCourseExpHdrId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCourseExpHdrId", DbType.Decimal, _edCourseExpHdrId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCourseExpHdrId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCourseExpHdrId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCoursePrfxId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_COURSE_ED_COURSE_PRFX1 key.
		///		FK_ED_COURSE_ED_COURSE_PRFX1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCoursePrfxId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByEdCoursePrfxId(TransactionManager transactionManager, System.Decimal? _edCoursePrfxId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByEdCoursePrfxId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCoursePrfxId", DbType.Decimal, _edCoursePrfxId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCoursePrfxId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCoursePrfxId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntMainId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_COURSE_ENTITY_MAIN key.
		///		FK_ED_COURSE_ENTITY_MAIN Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entMainId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdCourse> GetByEntMainId(TransactionManager transactionManager, System.Decimal? _entMainId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByEntMainId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, _entMainId);
			
			IDataReader reader = null;
			TList<EdCourse> rows = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntMainId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntMainId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByEdCourseId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ED_COURSE index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCourseId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdCourse"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdCourse GetByEdCourseId(TransactionManager transactionManager, System.Decimal _edCourseId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByEdCourseId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, _edCourseId);
			
			IDataReader reader = null;
			TList<EdCourse> tmp = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCourseId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCourseId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByCourseCode
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_COURSE index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_courseCode"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdCourse"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdCourse GetByCourseCode(TransactionManager transactionManager, System.String _courseCode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_GetByCourseCode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CourseCode", DbType.String, _courseCode);
			
			IDataReader reader = null;
			TList<EdCourse> tmp = new TList<EdCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCourseCode", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCourseCode", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdCourse object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdCourse> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_COURSE";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_COURSE_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ED_CODE_COURSE_ID", typeof(System.Decimal));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("COURSE_CODE", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("COURSE_DESCR_AR", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("COURSE_DESCR_EN", typeof(System.String));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("CREDIT_HOURS", typeof(System.Decimal));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("COURSE_CONTENTS_AR", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("COURSE_CONTENTS_EN", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ENT_MAIN_ID", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("GS_CODE_LANGUAGE_ID", typeof(System.Decimal));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("AS_FACULTY_INFO_ID", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("IS_ACTIVE", typeof(System.Decimal));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("PREREQ_CODE_EXP", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("PREREQ_ID_EXP", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("ELECT_FLG", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("GS_COURSE_ELECT_TYPE_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("ED_COURSE_PRFX_ID", typeof(System.Decimal));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("CRS_NO", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("PF_FLG", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("CRS_LVL", typeof(System.Decimal));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ONLINE_FLG", typeof(System.Decimal));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("STOP_MESSAGE", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ED_COURSE_EXP_HDR_ID", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("LOAD_WITH_TRAIN", typeof(System.Decimal));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("EXAM_FLG", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("FREE_FLG", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("INCMPLT_FLG", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("DROP_FLG", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("EXAM_HRS", typeof(System.Decimal));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("CRS_WGT", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("COURSE_DESCR_FR", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("ECTS", typeof(System.Decimal));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("LOAD_CRS_COUNT", typeof(System.Int32));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("EXTND_FLG", typeof(System.Boolean));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("Course_Mod", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("ED_CODE_COURSE_TYPE_ID", typeof(System.Int32));
			col36.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_COURSE_ID", "ED_COURSE_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_COURSE_ID", "ED_CODE_COURSE_ID");
			bulkCopy.ColumnMappings.Add("COURSE_CODE", "COURSE_CODE");
			bulkCopy.ColumnMappings.Add("COURSE_DESCR_AR", "COURSE_DESCR_AR");
			bulkCopy.ColumnMappings.Add("COURSE_DESCR_EN", "COURSE_DESCR_EN");
			bulkCopy.ColumnMappings.Add("CREDIT_HOURS", "CREDIT_HOURS");
			bulkCopy.ColumnMappings.Add("COURSE_CONTENTS_AR", "COURSE_CONTENTS_AR");
			bulkCopy.ColumnMappings.Add("COURSE_CONTENTS_EN", "COURSE_CONTENTS_EN");
			bulkCopy.ColumnMappings.Add("ENT_MAIN_ID", "ENT_MAIN_ID");
			bulkCopy.ColumnMappings.Add("GS_CODE_LANGUAGE_ID", "GS_CODE_LANGUAGE_ID");
			bulkCopy.ColumnMappings.Add("AS_FACULTY_INFO_ID", "AS_FACULTY_INFO_ID");
			bulkCopy.ColumnMappings.Add("IS_ACTIVE", "IS_ACTIVE");
			bulkCopy.ColumnMappings.Add("PREREQ_CODE_EXP", "PREREQ_CODE_EXP");
			bulkCopy.ColumnMappings.Add("PREREQ_ID_EXP", "PREREQ_ID_EXP");
			bulkCopy.ColumnMappings.Add("ELECT_FLG", "ELECT_FLG");
			bulkCopy.ColumnMappings.Add("GS_COURSE_ELECT_TYPE_ID", "GS_COURSE_ELECT_TYPE_ID");
			bulkCopy.ColumnMappings.Add("ED_COURSE_PRFX_ID", "ED_COURSE_PRFX_ID");
			bulkCopy.ColumnMappings.Add("CRS_NO", "CRS_NO");
			bulkCopy.ColumnMappings.Add("PF_FLG", "PF_FLG");
			bulkCopy.ColumnMappings.Add("CRS_LVL", "CRS_LVL");
			bulkCopy.ColumnMappings.Add("ONLINE_FLG", "ONLINE_FLG");
			bulkCopy.ColumnMappings.Add("STOP_MESSAGE", "STOP_MESSAGE");
			bulkCopy.ColumnMappings.Add("AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_CLASS_ID");
			bulkCopy.ColumnMappings.Add("ED_COURSE_EXP_HDR_ID", "ED_COURSE_EXP_HDR_ID");
			bulkCopy.ColumnMappings.Add("LOAD_WITH_TRAIN", "LOAD_WITH_TRAIN");
			bulkCopy.ColumnMappings.Add("EXAM_FLG", "EXAM_FLG");
			bulkCopy.ColumnMappings.Add("FREE_FLG", "FREE_FLG");
			bulkCopy.ColumnMappings.Add("INCMPLT_FLG", "INCMPLT_FLG");
			bulkCopy.ColumnMappings.Add("DROP_FLG", "DROP_FLG");
			bulkCopy.ColumnMappings.Add("EXAM_HRS", "EXAM_HRS");
			bulkCopy.ColumnMappings.Add("CRS_WGT", "CRS_WGT");
			bulkCopy.ColumnMappings.Add("COURSE_DESCR_FR", "COURSE_DESCR_FR");
			bulkCopy.ColumnMappings.Add("ECTS", "ECTS");
			bulkCopy.ColumnMappings.Add("LOAD_CRS_COUNT", "LOAD_CRS_COUNT");
			bulkCopy.ColumnMappings.Add("EXTND_FLG", "EXTND_FLG");
			bulkCopy.ColumnMappings.Add("Course_Mod", "Course_Mod");
			bulkCopy.ColumnMappings.Add("ED_CODE_COURSE_TYPE_ID", "ED_CODE_COURSE_TYPE_ID");
			
			foreach(UMIS_VER2.BusinessLyer.EdCourse entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_COURSE_ID"] = entity.EdCourseId;
							
				
					row["ED_CODE_COURSE_ID"] = entity.EdCodeCourseId.HasValue ? (object) entity.EdCodeCourseId  : System.DBNull.Value;
							
				
					row["COURSE_CODE"] = entity.CourseCode;
							
				
					row["COURSE_DESCR_AR"] = entity.CourseDescrAr;
							
				
					row["COURSE_DESCR_EN"] = entity.CourseDescrEn;
							
				
					row["CREDIT_HOURS"] = entity.CreditHours;
							
				
					row["COURSE_CONTENTS_AR"] = entity.CourseContentsAr;
							
				
					row["COURSE_CONTENTS_EN"] = entity.CourseContentsEn;
							
				
					row["ENT_MAIN_ID"] = entity.EntMainId.HasValue ? (object) entity.EntMainId  : System.DBNull.Value;
							
				
					row["GS_CODE_LANGUAGE_ID"] = entity.GsCodeLanguageId;
							
				
					row["AS_FACULTY_INFO_ID"] = entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value;
							
				
					row["IS_ACTIVE"] = entity.IsActive;
							
				
					row["PREREQ_CODE_EXP"] = entity.PrereqCodeExp;
							
				
					row["PREREQ_ID_EXP"] = entity.PrereqIdExp;
							
				
					row["ELECT_FLG"] = entity.ElectFlg.HasValue ? (object) entity.ElectFlg  : System.DBNull.Value;
							
				
					row["GS_COURSE_ELECT_TYPE_ID"] = entity.GsCourseElectTypeId.HasValue ? (object) entity.GsCourseElectTypeId  : System.DBNull.Value;
							
				
					row["ED_COURSE_PRFX_ID"] = entity.EdCoursePrfxId.HasValue ? (object) entity.EdCoursePrfxId  : System.DBNull.Value;
							
				
					row["CRS_NO"] = entity.CrsNo;
							
				
					row["PF_FLG"] = entity.PfFlg.HasValue ? (object) entity.PfFlg  : System.DBNull.Value;
							
				
					row["CRS_LVL"] = entity.CrsLvl.HasValue ? (object) entity.CrsLvl  : System.DBNull.Value;
							
				
					row["ONLINE_FLG"] = entity.OnlineFlg.HasValue ? (object) entity.OnlineFlg  : System.DBNull.Value;
							
				
					row["STOP_MESSAGE"] = entity.StopMessage;
							
				
					row["AS_CODE_DEGREE_CLASS_ID"] = entity.AsCodeDegreeClassId.HasValue ? (object) entity.AsCodeDegreeClassId  : System.DBNull.Value;
							
				
					row["ED_COURSE_EXP_HDR_ID"] = entity.EdCourseExpHdrId.HasValue ? (object) entity.EdCourseExpHdrId  : System.DBNull.Value;
							
				
					row["LOAD_WITH_TRAIN"] = entity.LoadWithTrain.HasValue ? (object) entity.LoadWithTrain  : System.DBNull.Value;
							
				
					row["EXAM_FLG"] = entity.ExamFlg.HasValue ? (object) entity.ExamFlg  : System.DBNull.Value;
							
				
					row["FREE_FLG"] = entity.FreeFlg.HasValue ? (object) entity.FreeFlg  : System.DBNull.Value;
							
				
					row["INCMPLT_FLG"] = entity.IncmpltFlg.HasValue ? (object) entity.IncmpltFlg  : System.DBNull.Value;
							
				
					row["DROP_FLG"] = entity.DropFlg.HasValue ? (object) entity.DropFlg  : System.DBNull.Value;
							
				
					row["EXAM_HRS"] = entity.ExamHrs.HasValue ? (object) entity.ExamHrs  : System.DBNull.Value;
							
				
					row["CRS_WGT"] = entity.CrsWgt.HasValue ? (object) entity.CrsWgt  : System.DBNull.Value;
							
				
					row["COURSE_DESCR_FR"] = entity.CourseDescrFr;
							
				
					row["ECTS"] = entity.Ects.HasValue ? (object) entity.Ects  : System.DBNull.Value;
							
				
					row["LOAD_CRS_COUNT"] = entity.LoadCrsCount.HasValue ? (object) entity.LoadCrsCount  : System.DBNull.Value;
							
				
					row["EXTND_FLG"] = entity.ExtndFlg.HasValue ? (object) entity.ExtndFlg  : System.DBNull.Value;
							
				
					row["Course_Mod"] = entity.CourseMod;
							
				
					row["ED_CODE_COURSE_TYPE_ID"] = entity.EdCodeCourseTypeId.HasValue ? (object) entity.EdCodeCourseTypeId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdCourse entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdCourse object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdCourse object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdCourse object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdCourse entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdCourseId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@EdCodeCourseId", DbType.Decimal, (entity.EdCodeCourseId.HasValue ? (object) entity.EdCodeCourseId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CourseCode", DbType.String, entity.CourseCode );
			database.AddInParameter(commandWrapper, "@CourseDescrAr", DbType.String, entity.CourseDescrAr );
			database.AddInParameter(commandWrapper, "@CourseDescrEn", DbType.String, entity.CourseDescrEn );
			database.AddInParameter(commandWrapper, "@CreditHours", DbType.Decimal, entity.CreditHours );
			database.AddInParameter(commandWrapper, "@CourseContentsAr", DbType.String, entity.CourseContentsAr );
			database.AddInParameter(commandWrapper, "@CourseContentsEn", DbType.String, entity.CourseContentsEn );
			database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, (entity.EntMainId.HasValue ? (object) entity.EntMainId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, entity.GsCodeLanguageId );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsActive", DbType.Decimal, entity.IsActive );
			database.AddInParameter(commandWrapper, "@PrereqCodeExp", DbType.String, entity.PrereqCodeExp );
			database.AddInParameter(commandWrapper, "@PrereqIdExp", DbType.String, entity.PrereqIdExp );
			database.AddInParameter(commandWrapper, "@ElectFlg", DbType.Decimal, (entity.ElectFlg.HasValue ? (object) entity.ElectFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCourseElectTypeId", DbType.Decimal, (entity.GsCourseElectTypeId.HasValue ? (object) entity.GsCourseElectTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCoursePrfxId", DbType.Decimal, (entity.EdCoursePrfxId.HasValue ? (object) entity.EdCoursePrfxId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CrsNo", DbType.String, entity.CrsNo );
			database.AddInParameter(commandWrapper, "@PfFlg", DbType.Decimal, (entity.PfFlg.HasValue ? (object) entity.PfFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CrsLvl", DbType.Decimal, (entity.CrsLvl.HasValue ? (object) entity.CrsLvl  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, (entity.OnlineFlg.HasValue ? (object) entity.OnlineFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StopMessage", DbType.String, entity.StopMessage );
			database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, (entity.AsCodeDegreeClassId.HasValue ? (object) entity.AsCodeDegreeClassId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCourseExpHdrId", DbType.Decimal, (entity.EdCourseExpHdrId.HasValue ? (object) entity.EdCourseExpHdrId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LoadWithTrain", DbType.Decimal, (entity.LoadWithTrain.HasValue ? (object) entity.LoadWithTrain  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExamFlg", DbType.Decimal, (entity.ExamFlg.HasValue ? (object) entity.ExamFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@FreeFlg", DbType.Decimal, (entity.FreeFlg.HasValue ? (object) entity.FreeFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IncmpltFlg", DbType.Decimal, (entity.IncmpltFlg.HasValue ? (object) entity.IncmpltFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DropFlg", DbType.Decimal, (entity.DropFlg.HasValue ? (object) entity.DropFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExamHrs", DbType.Decimal, (entity.ExamHrs.HasValue ? (object) entity.ExamHrs  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CrsWgt", DbType.Decimal, (entity.CrsWgt.HasValue ? (object) entity.CrsWgt  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CourseDescrFr", DbType.String, entity.CourseDescrFr );
			database.AddInParameter(commandWrapper, "@Ects", DbType.Decimal, (entity.Ects.HasValue ? (object) entity.Ects  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LoadCrsCount", DbType.Int32, (entity.LoadCrsCount.HasValue ? (object) entity.LoadCrsCount  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExtndFlg", DbType.Boolean, (entity.ExtndFlg.HasValue ? (object) entity.ExtndFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CourseMod", DbType.String, entity.CourseMod );
			database.AddInParameter(commandWrapper, "@EdCodeCourseTypeId", DbType.Int32, (entity.EdCodeCourseTypeId.HasValue ? (object) entity.EdCodeCourseTypeId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edCourseId = database.GetParameterValue(commandWrapper, "@EdCourseId");
			entity.EdCourseId = (System.Decimal)_edCourseId;
			
			entity.OriginalEdCourseId = entity.EdCourseId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdCourse object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdCourse object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdCourse entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_COURSE_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, entity.EdCourseId );
			database.AddInParameter(commandWrapper, "@OriginalEdCourseId", DbType.Decimal, entity.OriginalEdCourseId);
			database.AddInParameter(commandWrapper, "@EdCodeCourseId", DbType.Decimal, (entity.EdCodeCourseId.HasValue ? (object) entity.EdCodeCourseId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CourseCode", DbType.String, entity.CourseCode );
			database.AddInParameter(commandWrapper, "@CourseDescrAr", DbType.String, entity.CourseDescrAr );
			database.AddInParameter(commandWrapper, "@CourseDescrEn", DbType.String, entity.CourseDescrEn );
			database.AddInParameter(commandWrapper, "@CreditHours", DbType.Decimal, entity.CreditHours );
			database.AddInParameter(commandWrapper, "@CourseContentsAr", DbType.String, entity.CourseContentsAr );
			database.AddInParameter(commandWrapper, "@CourseContentsEn", DbType.String, entity.CourseContentsEn );
			database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, (entity.EntMainId.HasValue ? (object) entity.EntMainId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeLanguageId", DbType.Decimal, entity.GsCodeLanguageId );
			database.AddInParameter(commandWrapper, "@AsFacultyInfoId", DbType.Decimal, (entity.AsFacultyInfoId.HasValue ? (object) entity.AsFacultyInfoId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsActive", DbType.Decimal, entity.IsActive );
			database.AddInParameter(commandWrapper, "@PrereqCodeExp", DbType.String, entity.PrereqCodeExp );
			database.AddInParameter(commandWrapper, "@PrereqIdExp", DbType.String, entity.PrereqIdExp );
			database.AddInParameter(commandWrapper, "@ElectFlg", DbType.Decimal, (entity.ElectFlg.HasValue ? (object) entity.ElectFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCourseElectTypeId", DbType.Decimal, (entity.GsCourseElectTypeId.HasValue ? (object) entity.GsCourseElectTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCoursePrfxId", DbType.Decimal, (entity.EdCoursePrfxId.HasValue ? (object) entity.EdCoursePrfxId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CrsNo", DbType.String, entity.CrsNo );
			database.AddInParameter(commandWrapper, "@PfFlg", DbType.Decimal, (entity.PfFlg.HasValue ? (object) entity.PfFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CrsLvl", DbType.Decimal, (entity.CrsLvl.HasValue ? (object) entity.CrsLvl : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OnlineFlg", DbType.Decimal, (entity.OnlineFlg.HasValue ? (object) entity.OnlineFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StopMessage", DbType.String, entity.StopMessage );
			database.AddInParameter(commandWrapper, "@AsCodeDegreeClassId", DbType.Decimal, (entity.AsCodeDegreeClassId.HasValue ? (object) entity.AsCodeDegreeClassId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCourseExpHdrId", DbType.Decimal, (entity.EdCourseExpHdrId.HasValue ? (object) entity.EdCourseExpHdrId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LoadWithTrain", DbType.Decimal, (entity.LoadWithTrain.HasValue ? (object) entity.LoadWithTrain : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExamFlg", DbType.Decimal, (entity.ExamFlg.HasValue ? (object) entity.ExamFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@FreeFlg", DbType.Decimal, (entity.FreeFlg.HasValue ? (object) entity.FreeFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IncmpltFlg", DbType.Decimal, (entity.IncmpltFlg.HasValue ? (object) entity.IncmpltFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DropFlg", DbType.Decimal, (entity.DropFlg.HasValue ? (object) entity.DropFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExamHrs", DbType.Decimal, (entity.ExamHrs.HasValue ? (object) entity.ExamHrs : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CrsWgt", DbType.Decimal, (entity.CrsWgt.HasValue ? (object) entity.CrsWgt : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CourseDescrFr", DbType.String, entity.CourseDescrFr );
			database.AddInParameter(commandWrapper, "@Ects", DbType.Decimal, (entity.Ects.HasValue ? (object) entity.Ects : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LoadCrsCount", DbType.Int32, (entity.LoadCrsCount.HasValue ? (object) entity.LoadCrsCount : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExtndFlg", DbType.Boolean, (entity.ExtndFlg.HasValue ? (object) entity.ExtndFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CourseMod", DbType.String, entity.CourseMod );
			database.AddInParameter(commandWrapper, "@EdCodeCourseTypeId", DbType.Int32, (entity.EdCodeCourseTypeId.HasValue ? (object) entity.EdCodeCourseTypeId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdCourseId = entity.EdCourseId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
