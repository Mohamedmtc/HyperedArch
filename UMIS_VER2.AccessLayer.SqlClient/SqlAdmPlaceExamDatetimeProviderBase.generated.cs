/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlAdmPlaceExamDatetimeProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="AdmPlaceExamDatetime"/> entity.
	///</summary>
	public abstract partial class SqlAdmPlaceExamDatetimeProviderBase : AdmPlaceExamDatetimeProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlAdmPlaceExamDatetimeProviderBase"/> instance.
		/// </summary>
		public SqlAdmPlaceExamDatetimeProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlAdmPlaceExamDatetimeProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlAdmPlaceExamDatetimeProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_admPlaceExamDatetimeId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _admPlaceExamDatetimeId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@AdmPlaceExamDatetimeId", DbType.Decimal, _admPlaceExamDatetimeId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(AdmPlaceExamDatetime)
					,_admPlaceExamDatetimeId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
		public override TList<AdmPlaceExamDatetime> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<AdmPlaceExamDatetime>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@AdmPlaceExamDatetimeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExamDate", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExamTimeFrom", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExamTimeTo", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Location", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsOptionalExam", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualPercentageFromPriv", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualPercentageToPriv", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RelatedToProgram", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualPercentageToPub", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QualPercentageFromPub", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScHallId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApproveFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AwkafFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SvSrvyHdrId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("adm_place_exam_datetime_id ") || clause.Trim().StartsWith("adm_place_exam_datetime_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmPlaceExamDatetimeId", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_placement_exam_id ") || clause.Trim().StartsWith("adm_cde_placement_exam_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdePlacementExamId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exam_date ") || clause.Trim().StartsWith("exam_date="))
				{
					database.SetParameterValue(commandWrapper, "@ExamDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exam_time_from ") || clause.Trim().StartsWith("exam_time_from="))
				{
					database.SetParameterValue(commandWrapper, "@ExamTimeFrom", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exam_time_to ") || clause.Trim().StartsWith("exam_time_to="))
				{
					database.SetParameterValue(commandWrapper, "@ExamTimeTo", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_open_acad_semester_id ") || clause.Trim().StartsWith("adm_open_acad_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmOpenAcadSemesterId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("location ") || clause.Trim().StartsWith("location="))
				{
					database.SetParameterValue(commandWrapper, "@Location", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("is_optional_exam ") || clause.Trim().StartsWith("is_optional_exam="))
				{
					database.SetParameterValue(commandWrapper, "@IsOptionalExam", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_percentage_from_priv ") || clause.Trim().StartsWith("qual_percentage_from_priv="))
				{
					database.SetParameterValue(commandWrapper, "@QualPercentageFromPriv", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_percentage_to_priv ") || clause.Trim().StartsWith("qual_percentage_to_priv="))
				{
					database.SetParameterValue(commandWrapper, "@QualPercentageToPriv", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("related_to_program ") || clause.Trim().StartsWith("related_to_program="))
				{
					database.SetParameterValue(commandWrapper, "@RelatedToProgram", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ent_main_id ") || clause.Trim().StartsWith("ent_main_id="))
				{
					database.SetParameterValue(commandWrapper, "@EntMainId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_percentage_to_pub ") || clause.Trim().StartsWith("qual_percentage_to_pub="))
				{
					database.SetParameterValue(commandWrapper, "@QualPercentageToPub", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qual_percentage_from_pub ") || clause.Trim().StartsWith("qual_percentage_from_pub="))
				{
					database.SetParameterValue(commandWrapper, "@QualPercentageFromPub", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sc_building_id ") || clause.Trim().StartsWith("sc_building_id="))
				{
					database.SetParameterValue(commandWrapper, "@ScBuildingId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sc_hall_id ") || clause.Trim().StartsWith("sc_hall_id="))
				{
					database.SetParameterValue(commandWrapper, "@ScHallId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("approve_flg ") || clause.Trim().StartsWith("approve_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ApproveFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_gender_id ") || clause.Trim().StartsWith("gs_code_gender_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeGenderId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_app_type_id ") || clause.Trim().StartsWith("adm_cde_app_type_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeAppTypeId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("awkaf_flg ") || clause.Trim().StartsWith("awkaf_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AwkafFlg", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sv_srvy_hdr_id ") || clause.Trim().StartsWith("sv_srvy_hdr_id="))
				{
					database.SetParameterValue(commandWrapper, "@SvSrvyHdrId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
		public override TList<AdmPlaceExamDatetime> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_Find_Dynamic", typeof(AdmPlaceExamDatetimeColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
		public override TList<AdmPlaceExamDatetime> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAdmCdeAppTypeId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_ADM_CDE_APP_TYPE key.
		///		FK_ADM_PLACE_EXAM_DATETIME_ADM_CDE_APP_TYPE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeAppTypeId">CSS</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetByAdmCdeAppTypeId(TransactionManager transactionManager, System.Decimal? _admCdeAppTypeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByAdmCdeAppTypeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, _admCdeAppTypeId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppTypeId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeAppTypeId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmCdePlacementExamId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_ADM_CDE_PLACEMENT_EXAM key.
		///		FK_ADM_PLACE_EXAM_DATETIME_ADM_CDE_PLACEMENT_EXAM Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdePlacementExamId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetByAdmCdePlacementExamId(TransactionManager transactionManager, System.Decimal _admCdePlacementExamId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByAdmCdePlacementExamId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, _admCdePlacementExamId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdePlacementExamId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdePlacementExamId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByAdmOpenAcadSemesterId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_ADM_OPEN_ACAD_SEMESTER key.
		///		FK_ADM_PLACE_EXAM_DATETIME_ADM_OPEN_ACAD_SEMESTER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admOpenAcadSemesterId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetByAdmOpenAcadSemesterId(TransactionManager transactionManager, System.Decimal? _admOpenAcadSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByAdmOpenAcadSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, _admOpenAcadSemesterId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmOpenAcadSemesterId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmOpenAcadSemesterId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEntMainId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_ENTITY_MAIN key.
		///		FK_ADM_PLACE_EXAM_DATETIME_ENTITY_MAIN Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_entMainId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetByEntMainId(TransactionManager transactionManager, System.Decimal? _entMainId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByEntMainId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, _entMainId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEntMainId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEntMainId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeGenderId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_GS_CODE_GENDER key.
		///		FK_ADM_PLACE_EXAM_DATETIME_GS_CODE_GENDER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeGenderId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetByGsCodeGenderId(TransactionManager transactionManager, System.Decimal? _gsCodeGenderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByGsCodeGenderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, _gsCodeGenderId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeGenderId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByScBuildingId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_SC_BUILDING key.
		///		FK_ADM_PLACE_EXAM_DATETIME_SC_BUILDING Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scBuildingId">XXX</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetByScBuildingId(TransactionManager transactionManager, System.Decimal? _scBuildingId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByScBuildingId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, _scBuildingId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScBuildingId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScBuildingId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByScHallId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_SC_HALL key.
		///		FK_ADM_PLACE_EXAM_DATETIME_SC_HALL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scHallId">XXX</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetByScHallId(TransactionManager transactionManager, System.Decimal? _scHallId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByScHallId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScHallId", DbType.Decimal, _scHallId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScHallId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScHallId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetBySvSrvyHdrId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_DATETIME_SV_SRVY_HDR key.
		///		FK_ADM_PLACE_EXAM_DATETIME_SV_SRVY_HDR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_svSrvyHdrId">Dynamic question Template</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamDatetime> GetBySvSrvyHdrId(TransactionManager transactionManager, System.Int32? _svSrvyHdrId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetBySvSrvyHdrId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@SvSrvyHdrId", DbType.Int32, _svSrvyHdrId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> rows = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetBySvSrvyHdrId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetBySvSrvyHdrId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAdmPlaceExamDatetimeId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ADM_PLACEMENT_EXAM_TIME index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admPlaceExamDatetimeId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime GetByAdmPlaceExamDatetimeId(TransactionManager transactionManager, System.Decimal _admPlaceExamDatetimeId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_GetByAdmPlaceExamDatetimeId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmPlaceExamDatetimeId", DbType.Decimal, _admPlaceExamDatetimeId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamDatetime> tmp = new TList<AdmPlaceExamDatetime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmPlaceExamDatetimeId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmPlaceExamDatetimeId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ADM_PLACE_EXAM_DATETIME";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ADM_PLACE_EXAM_DATETIME_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("EXAM_DATE", typeof(System.DateTime));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("EXAM_TIME_FROM", typeof(System.DateTime));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("EXAM_TIME_TO", typeof(System.DateTime));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("ADM_OPEN_ACAD_SEMESTER_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("LOCATION", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("IS_OPTIONAL_EXAM", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("QUAL_PERCENTAGE_FROM_PRIV", typeof(System.Decimal));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("QUAL_PERCENTAGE_TO_PRIV", typeof(System.Decimal));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("RELATED_To_PROGRAM", typeof(System.Decimal));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ENT_MAIN_ID", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("QUAL_PERCENTAGE_TO_PUB", typeof(System.Decimal));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("QUAL_PERCENTAGE_FROM_PUB", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("SC_BUILDING_ID", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("SC_HALL_ID", typeof(System.Decimal));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("APPROVE_FLG", typeof(System.Boolean));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("GS_CODE_GENDER_ID", typeof(System.Decimal));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ADM_CDE_APP_TYPE_ID", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("AWKAF_FLG", typeof(System.Boolean));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("SV_SRVY_HDR_ID", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col22.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ADM_PLACE_EXAM_DATETIME_ID", "ADM_PLACE_EXAM_DATETIME_ID");
			bulkCopy.ColumnMappings.Add("ADM_CDE_PLACEMENT_EXAM_ID", "ADM_CDE_PLACEMENT_EXAM_ID");
			bulkCopy.ColumnMappings.Add("EXAM_DATE", "EXAM_DATE");
			bulkCopy.ColumnMappings.Add("EXAM_TIME_FROM", "EXAM_TIME_FROM");
			bulkCopy.ColumnMappings.Add("EXAM_TIME_TO", "EXAM_TIME_TO");
			bulkCopy.ColumnMappings.Add("ADM_OPEN_ACAD_SEMESTER_ID", "ADM_OPEN_ACAD_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("LOCATION", "LOCATION");
			bulkCopy.ColumnMappings.Add("IS_OPTIONAL_EXAM", "IS_OPTIONAL_EXAM");
			bulkCopy.ColumnMappings.Add("QUAL_PERCENTAGE_FROM_PRIV", "QUAL_PERCENTAGE_FROM_PRIV");
			bulkCopy.ColumnMappings.Add("QUAL_PERCENTAGE_TO_PRIV", "QUAL_PERCENTAGE_TO_PRIV");
			bulkCopy.ColumnMappings.Add("RELATED_To_PROGRAM", "RELATED_To_PROGRAM");
			bulkCopy.ColumnMappings.Add("ENT_MAIN_ID", "ENT_MAIN_ID");
			bulkCopy.ColumnMappings.Add("QUAL_PERCENTAGE_TO_PUB", "QUAL_PERCENTAGE_TO_PUB");
			bulkCopy.ColumnMappings.Add("QUAL_PERCENTAGE_FROM_PUB", "QUAL_PERCENTAGE_FROM_PUB");
			bulkCopy.ColumnMappings.Add("SC_BUILDING_ID", "SC_BUILDING_ID");
			bulkCopy.ColumnMappings.Add("SC_HALL_ID", "SC_HALL_ID");
			bulkCopy.ColumnMappings.Add("APPROVE_FLG", "APPROVE_FLG");
			bulkCopy.ColumnMappings.Add("GS_CODE_GENDER_ID", "GS_CODE_GENDER_ID");
			bulkCopy.ColumnMappings.Add("ADM_CDE_APP_TYPE_ID", "ADM_CDE_APP_TYPE_ID");
			bulkCopy.ColumnMappings.Add("AWKAF_FLG", "AWKAF_FLG");
			bulkCopy.ColumnMappings.Add("SV_SRVY_HDR_ID", "SV_SRVY_HDR_ID");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			
			foreach(UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ADM_PLACE_EXAM_DATETIME_ID"] = entity.AdmPlaceExamDatetimeId;
							
				
					row["ADM_CDE_PLACEMENT_EXAM_ID"] = entity.AdmCdePlacementExamId;
							
				
					row["EXAM_DATE"] = entity.ExamDate;
							
				
					row["EXAM_TIME_FROM"] = entity.ExamTimeFrom;
							
				
					row["EXAM_TIME_TO"] = entity.ExamTimeTo;
							
				
					row["ADM_OPEN_ACAD_SEMESTER_ID"] = entity.AdmOpenAcadSemesterId.HasValue ? (object) entity.AdmOpenAcadSemesterId  : System.DBNull.Value;
							
				
					row["LOCATION"] = entity.Location;
							
				
					row["IS_OPTIONAL_EXAM"] = entity.IsOptionalExam.HasValue ? (object) entity.IsOptionalExam  : System.DBNull.Value;
							
				
					row["QUAL_PERCENTAGE_FROM_PRIV"] = entity.QualPercentageFromPriv.HasValue ? (object) entity.QualPercentageFromPriv  : System.DBNull.Value;
							
				
					row["QUAL_PERCENTAGE_TO_PRIV"] = entity.QualPercentageToPriv.HasValue ? (object) entity.QualPercentageToPriv  : System.DBNull.Value;
							
				
					row["RELATED_To_PROGRAM"] = entity.RelatedToProgram.HasValue ? (object) entity.RelatedToProgram  : System.DBNull.Value;
							
				
					row["ENT_MAIN_ID"] = entity.EntMainId.HasValue ? (object) entity.EntMainId  : System.DBNull.Value;
							
				
					row["QUAL_PERCENTAGE_TO_PUB"] = entity.QualPercentageToPub.HasValue ? (object) entity.QualPercentageToPub  : System.DBNull.Value;
							
				
					row["QUAL_PERCENTAGE_FROM_PUB"] = entity.QualPercentageFromPub.HasValue ? (object) entity.QualPercentageFromPub  : System.DBNull.Value;
							
				
					row["SC_BUILDING_ID"] = entity.ScBuildingId.HasValue ? (object) entity.ScBuildingId  : System.DBNull.Value;
							
				
					row["SC_HALL_ID"] = entity.ScHallId.HasValue ? (object) entity.ScHallId  : System.DBNull.Value;
							
				
					row["APPROVE_FLG"] = entity.ApproveFlg.HasValue ? (object) entity.ApproveFlg  : System.DBNull.Value;
							
				
					row["GS_CODE_GENDER_ID"] = entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value;
							
				
					row["ADM_CDE_APP_TYPE_ID"] = entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId  : System.DBNull.Value;
							
				
					row["AWKAF_FLG"] = entity.AwkafFlg.HasValue ? (object) entity.AwkafFlg  : System.DBNull.Value;
							
				
					row["SV_SRVY_HDR_ID"] = entity.SvSrvyHdrId.HasValue ? (object) entity.SvSrvyHdrId  : System.DBNull.Value;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@AdmPlaceExamDatetimeId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, entity.AdmCdePlacementExamId );
			database.AddInParameter(commandWrapper, "@ExamDate", DbType.Date, entity.ExamDate );
			database.AddInParameter(commandWrapper, "@ExamTimeFrom", DbType.DateTime, entity.ExamTimeFrom );
			database.AddInParameter(commandWrapper, "@ExamTimeTo", DbType.DateTime, entity.ExamTimeTo );
			database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, (entity.AdmOpenAcadSemesterId.HasValue ? (object) entity.AdmOpenAcadSemesterId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Location", DbType.String, entity.Location );
			database.AddInParameter(commandWrapper, "@IsOptionalExam", DbType.Decimal, (entity.IsOptionalExam.HasValue ? (object) entity.IsOptionalExam  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualPercentageFromPriv", DbType.Decimal, (entity.QualPercentageFromPriv.HasValue ? (object) entity.QualPercentageFromPriv  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualPercentageToPriv", DbType.Decimal, (entity.QualPercentageToPriv.HasValue ? (object) entity.QualPercentageToPriv  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@RelatedToProgram", DbType.Decimal, (entity.RelatedToProgram.HasValue ? (object) entity.RelatedToProgram  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, (entity.EntMainId.HasValue ? (object) entity.EntMainId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualPercentageToPub", DbType.Decimal, (entity.QualPercentageToPub.HasValue ? (object) entity.QualPercentageToPub  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QualPercentageFromPub", DbType.Decimal, (entity.QualPercentageFromPub.HasValue ? (object) entity.QualPercentageFromPub  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, (entity.ScBuildingId.HasValue ? (object) entity.ScBuildingId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ScHallId", DbType.Decimal, (entity.ScHallId.HasValue ? (object) entity.ScHallId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ApproveFlg", DbType.Boolean, (entity.ApproveFlg.HasValue ? (object) entity.ApproveFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, (entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AwkafFlg", DbType.Boolean, (entity.AwkafFlg.HasValue ? (object) entity.AwkafFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SvSrvyHdrId", DbType.Int32, (entity.SvSrvyHdrId.HasValue ? (object) entity.SvSrvyHdrId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _admPlaceExamDatetimeId = database.GetParameterValue(commandWrapper, "@AdmPlaceExamDatetimeId");
			entity.AdmPlaceExamDatetimeId = (System.Decimal)_admPlaceExamDatetimeId;
			
			entity.OriginalAdmPlaceExamDatetimeId = entity.AdmPlaceExamDatetimeId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmPlaceExamDatetime entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_DATETIME_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@AdmPlaceExamDatetimeId", DbType.Decimal, entity.AdmPlaceExamDatetimeId );
			database.AddInParameter(commandWrapper, "@OriginalAdmPlaceExamDatetimeId", DbType.Decimal, entity.OriginalAdmPlaceExamDatetimeId);
			database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, entity.AdmCdePlacementExamId );
			database.AddInParameter(commandWrapper, "@ExamDate", DbType.Date, entity.ExamDate );
			database.AddInParameter(commandWrapper, "@ExamTimeFrom", DbType.DateTime, entity.ExamTimeFrom );
			database.AddInParameter(commandWrapper, "@ExamTimeTo", DbType.DateTime, entity.ExamTimeTo );
			database.AddInParameter(commandWrapper, "@AdmOpenAcadSemesterId", DbType.Decimal, (entity.AdmOpenAcadSemesterId.HasValue ? (object) entity.AdmOpenAcadSemesterId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Location", DbType.String, entity.Location );
			database.AddInParameter(commandWrapper, "@IsOptionalExam", DbType.Decimal, (entity.IsOptionalExam.HasValue ? (object) entity.IsOptionalExam : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualPercentageFromPriv", DbType.Decimal, (entity.QualPercentageFromPriv.HasValue ? (object) entity.QualPercentageFromPriv : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualPercentageToPriv", DbType.Decimal, (entity.QualPercentageToPriv.HasValue ? (object) entity.QualPercentageToPriv : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@RelatedToProgram", DbType.Decimal, (entity.RelatedToProgram.HasValue ? (object) entity.RelatedToProgram : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EntMainId", DbType.Decimal, (entity.EntMainId.HasValue ? (object) entity.EntMainId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualPercentageToPub", DbType.Decimal, (entity.QualPercentageToPub.HasValue ? (object) entity.QualPercentageToPub : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QualPercentageFromPub", DbType.Decimal, (entity.QualPercentageFromPub.HasValue ? (object) entity.QualPercentageFromPub : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, (entity.ScBuildingId.HasValue ? (object) entity.ScBuildingId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ScHallId", DbType.Decimal, (entity.ScHallId.HasValue ? (object) entity.ScHallId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ApproveFlg", DbType.Boolean, (entity.ApproveFlg.HasValue ? (object) entity.ApproveFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodeGenderId", DbType.Decimal, (entity.GsCodeGenderId.HasValue ? (object) entity.GsCodeGenderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeAppTypeId", DbType.Decimal, (entity.AdmCdeAppTypeId.HasValue ? (object) entity.AdmCdeAppTypeId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AwkafFlg", DbType.Boolean, (entity.AwkafFlg.HasValue ? (object) entity.AwkafFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SvSrvyHdrId", DbType.Int32, (entity.SvSrvyHdrId.HasValue ? (object) entity.SvSrvyHdrId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalAdmPlaceExamDatetimeId = entity.AdmPlaceExamDatetimeId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
