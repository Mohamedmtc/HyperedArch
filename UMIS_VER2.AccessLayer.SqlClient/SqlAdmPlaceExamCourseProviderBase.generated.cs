/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlAdmPlaceExamCourseProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="AdmPlaceExamCourse"/> entity.
	///</summary>
	public abstract partial class SqlAdmPlaceExamCourseProviderBase : AdmPlaceExamCourseProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlAdmPlaceExamCourseProviderBase"/> instance.
		/// </summary>
		public SqlAdmPlaceExamCourseProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlAdmPlaceExamCourseProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlAdmPlaceExamCourseProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_admPlaceExamCourseId">المقررات المرتبطة- المقررات المعفية. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _admPlaceExamCourseId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@AdmPlaceExamCourseId", DbType.Decimal, _admPlaceExamCourseId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(AdmPlaceExamCourse)
					,_admPlaceExamCourseId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamCourse objects.</returns>
		public override TList<AdmPlaceExamCourse> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<AdmPlaceExamCourse>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@AdmPlaceExamCourseId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MarkFrom", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MarkTo", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExemptFlg", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrientFlg", DbType.Boolean, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("adm_place_exam_course_id ") || clause.Trim().StartsWith("adm_place_exam_course_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmPlaceExamCourseId", 
						clause.Trim().Remove(0,24).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_placement_exam_id ") || clause.Trim().StartsWith("adm_cde_placement_exam_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdePlacementExamId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mark_from ") || clause.Trim().StartsWith("mark_from="))
				{
					database.SetParameterValue(commandWrapper, "@MarkFrom", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mark_to ") || clause.Trim().StartsWith("mark_to="))
				{
					database.SetParameterValue(commandWrapper, "@MarkTo", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_pass_fail_id ") || clause.Trim().StartsWith("gs_code_pass_fail_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodePassFailId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_course_id ") || clause.Trim().StartsWith("ed_course_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCourseId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("adm_cde_exam_grdng_id ") || clause.Trim().StartsWith("adm_cde_exam_grdng_id="))
				{
					database.SetParameterValue(commandWrapper, "@AdmCdeExamGrdngId", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exempt_flg ") || clause.Trim().StartsWith("exempt_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ExemptFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("orient_flg ") || clause.Trim().StartsWith("orient_flg="))
				{
					database.SetParameterValue(commandWrapper, "@OrientFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<AdmPlaceExamCourse> rows = new TList<AdmPlaceExamCourse>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamCourse objects.</returns>
		public override TList<AdmPlaceExamCourse> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_Find_Dynamic", typeof(AdmPlaceExamCourseColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<AdmPlaceExamCourse> rows = new TList<AdmPlaceExamCourse>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamCourse> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<AdmPlaceExamCourse> rows = new TList<AdmPlaceExamCourse>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamCourse objects.</returns>
		public override TList<AdmPlaceExamCourse> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<AdmPlaceExamCourse> rows = new TList<AdmPlaceExamCourse>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByAdmCdeExamGrdngId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_COURSE_ADM_CDE_EXAM_GRDNG key.
		///		FK_ADM_PLACE_EXAM_COURSE_ADM_CDE_EXAM_GRDNG Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdeExamGrdngId">in case of exam with grade</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamCourse> GetByAdmCdeExamGrdngId(TransactionManager transactionManager, System.Decimal? _admCdeExamGrdngId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_GetByAdmCdeExamGrdngId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, _admCdeExamGrdngId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamCourse> rows = new TList<AdmPlaceExamCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdeExamGrdngId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdeExamGrdngId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodePassFailId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ADM_PLACE_EXAM_COURSE_GS_CODE_PASS_FAIL key.
		///		FK_ADM_PLACE_EXAM_COURSE_GS_CODE_PASS_FAIL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodePassFailId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.AdmPlaceExamCourse objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamCourse> GetByGsCodePassFailId(TransactionManager transactionManager, System.Decimal? _gsCodePassFailId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_GetByGsCodePassFailId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, _gsCodePassFailId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamCourse> rows = new TList<AdmPlaceExamCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodePassFailId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodePassFailId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByAdmCdePlacementExamId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ADM_CDE_PLACEMENT_EX_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdePlacementExamId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmPlaceExamCourse&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamCourse> GetByAdmCdePlacementExamId(TransactionManager transactionManager, System.Decimal _admCdePlacementExamId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_GetByAdmCdePlacementExamId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, _admCdePlacementExamId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamCourse> tmp = new TList<AdmPlaceExamCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdePlacementExamId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdePlacementExamId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByEdCourseId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the IX_ED_COURSE_ID_1 index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCourseId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;AdmPlaceExamCourse&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<AdmPlaceExamCourse> GetByEdCourseId(TransactionManager transactionManager, System.Decimal? _edCourseId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_GetByEdCourseId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, _edCourseId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamCourse> tmp = new TList<AdmPlaceExamCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCourseId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCourseId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmPlaceExamCourseId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ADM_PLACE_EXAM_COURSE index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admPlaceExamCourseId">المقررات المرتبطة- المقررات المعفية</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmPlaceExamCourse"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmPlaceExamCourse GetByAdmPlaceExamCourseId(TransactionManager transactionManager, System.Decimal _admPlaceExamCourseId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_GetByAdmPlaceExamCourseId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmPlaceExamCourseId", DbType.Decimal, _admPlaceExamCourseId);
			
			IDataReader reader = null;
			TList<AdmPlaceExamCourse> tmp = new TList<AdmPlaceExamCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmPlaceExamCourseId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmPlaceExamCourseId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByAdmCdePlacementExamIdEdCourseIdExemptFlg
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ADM_PLACE_EXAM_COURSE index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_admCdePlacementExamId"></param>
		/// <param name="_edCourseId"></param>
		/// <param name="_exemptFlg">0  - مقرر تحميل 
		/// 		/// مقرر معفى  - 1   KU</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.AdmPlaceExamCourse"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.AdmPlaceExamCourse GetByAdmCdePlacementExamIdEdCourseIdExemptFlg(TransactionManager transactionManager, System.Decimal _admCdePlacementExamId, System.Decimal? _edCourseId, System.Boolean _exemptFlg, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_GetByAdmCdePlacementExamIdEdCourseIdExemptFlg", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, _admCdePlacementExamId);
				database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, _edCourseId);
				database.AddInParameter(commandWrapper, "@ExemptFlg", DbType.Boolean, _exemptFlg);
			
			IDataReader reader = null;
			TList<AdmPlaceExamCourse> tmp = new TList<AdmPlaceExamCourse>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByAdmCdePlacementExamIdEdCourseIdExemptFlg", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByAdmCdePlacementExamIdEdCourseIdExemptFlg", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmPlaceExamCourse object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.AdmPlaceExamCourse> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ADM_PLACE_EXAM_COURSE";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ADM_PLACE_EXAM_COURSE_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("MARK_FROM", typeof(System.Decimal));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("MARK_TO", typeof(System.Decimal));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("ED_COURSE_ID", typeof(System.Decimal));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("ADM_CDE_EXAM_GRDNG_ID", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("EXEMPT_FLG", typeof(System.Boolean));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("ORIENT_FLG", typeof(System.Boolean));
			col8.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ADM_PLACE_EXAM_COURSE_ID", "ADM_PLACE_EXAM_COURSE_ID");
			bulkCopy.ColumnMappings.Add("ADM_CDE_PLACEMENT_EXAM_ID", "ADM_CDE_PLACEMENT_EXAM_ID");
			bulkCopy.ColumnMappings.Add("MARK_FROM", "MARK_FROM");
			bulkCopy.ColumnMappings.Add("MARK_TO", "MARK_TO");
			bulkCopy.ColumnMappings.Add("GS_CODE_PASS_FAIL_ID", "GS_CODE_PASS_FAIL_ID");
			bulkCopy.ColumnMappings.Add("ED_COURSE_ID", "ED_COURSE_ID");
			bulkCopy.ColumnMappings.Add("ADM_CDE_EXAM_GRDNG_ID", "ADM_CDE_EXAM_GRDNG_ID");
			bulkCopy.ColumnMappings.Add("EXEMPT_FLG", "EXEMPT_FLG");
			bulkCopy.ColumnMappings.Add("ORIENT_FLG", "ORIENT_FLG");
			
			foreach(UMIS_VER2.BusinessLyer.AdmPlaceExamCourse entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ADM_PLACE_EXAM_COURSE_ID"] = entity.AdmPlaceExamCourseId;
							
				
					row["ADM_CDE_PLACEMENT_EXAM_ID"] = entity.AdmCdePlacementExamId;
							
				
					row["MARK_FROM"] = entity.MarkFrom.HasValue ? (object) entity.MarkFrom  : System.DBNull.Value;
							
				
					row["MARK_TO"] = entity.MarkTo.HasValue ? (object) entity.MarkTo  : System.DBNull.Value;
							
				
					row["GS_CODE_PASS_FAIL_ID"] = entity.GsCodePassFailId.HasValue ? (object) entity.GsCodePassFailId  : System.DBNull.Value;
							
				
					row["ED_COURSE_ID"] = entity.EdCourseId.HasValue ? (object) entity.EdCourseId  : System.DBNull.Value;
							
				
					row["ADM_CDE_EXAM_GRDNG_ID"] = entity.AdmCdeExamGrdngId.HasValue ? (object) entity.AdmCdeExamGrdngId  : System.DBNull.Value;
							
				
					row["EXEMPT_FLG"] = entity.ExemptFlg;
							
				
					row["ORIENT_FLG"] = entity.OrientFlg.HasValue ? (object) entity.OrientFlg  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.AdmPlaceExamCourse entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.AdmPlaceExamCourse object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmPlaceExamCourse object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.AdmPlaceExamCourse object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmPlaceExamCourse entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@AdmPlaceExamCourseId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, entity.AdmCdePlacementExamId );
			database.AddInParameter(commandWrapper, "@MarkFrom", DbType.Decimal, (entity.MarkFrom.HasValue ? (object) entity.MarkFrom  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MarkTo", DbType.Decimal, (entity.MarkTo.HasValue ? (object) entity.MarkTo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, (entity.GsCodePassFailId.HasValue ? (object) entity.GsCodePassFailId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, (entity.EdCourseId.HasValue ? (object) entity.EdCourseId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, (entity.AdmCdeExamGrdngId.HasValue ? (object) entity.AdmCdeExamGrdngId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExemptFlg", DbType.Boolean, entity.ExemptFlg );
			database.AddInParameter(commandWrapper, "@OrientFlg", DbType.Boolean, (entity.OrientFlg.HasValue ? (object) entity.OrientFlg  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _admPlaceExamCourseId = database.GetParameterValue(commandWrapper, "@AdmPlaceExamCourseId");
			entity.AdmPlaceExamCourseId = (System.Decimal)_admPlaceExamCourseId;
			
			entity.OriginalAdmPlaceExamCourseId = entity.AdmPlaceExamCourseId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.AdmPlaceExamCourse object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.AdmPlaceExamCourse object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.AdmPlaceExamCourse entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ADM_PLACE_EXAM_COURSE_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@AdmPlaceExamCourseId", DbType.Decimal, entity.AdmPlaceExamCourseId );
			database.AddInParameter(commandWrapper, "@OriginalAdmPlaceExamCourseId", DbType.Decimal, entity.OriginalAdmPlaceExamCourseId);
			database.AddInParameter(commandWrapper, "@AdmCdePlacementExamId", DbType.Decimal, entity.AdmCdePlacementExamId );
			database.AddInParameter(commandWrapper, "@MarkFrom", DbType.Decimal, (entity.MarkFrom.HasValue ? (object) entity.MarkFrom : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MarkTo", DbType.Decimal, (entity.MarkTo.HasValue ? (object) entity.MarkTo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCodePassFailId", DbType.Decimal, (entity.GsCodePassFailId.HasValue ? (object) entity.GsCodePassFailId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCourseId", DbType.Decimal, (entity.EdCourseId.HasValue ? (object) entity.EdCourseId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AdmCdeExamGrdngId", DbType.Decimal, (entity.AdmCdeExamGrdngId.HasValue ? (object) entity.AdmCdeExamGrdngId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExemptFlg", DbType.Boolean, entity.ExemptFlg );
			database.AddInParameter(commandWrapper, "@OrientFlg", DbType.Boolean, (entity.OrientFlg.HasValue ? (object) entity.OrientFlg : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalAdmPlaceExamCourseId = entity.AdmPlaceExamCourseId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
