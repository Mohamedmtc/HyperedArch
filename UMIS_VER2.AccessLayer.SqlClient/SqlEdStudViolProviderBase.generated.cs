/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlEdStudViolProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using UMIS_VER2.BusinessLyer;
using UMIS_VER2.AccessLayer;
using UMIS_VER2.AccessLayer.Bases;

#endregion

namespace UMIS_VER2.AccessLayer.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="EdStudViol"/> entity.
	///</summary>
	public abstract partial class SqlEdStudViolProviderBase : EdStudViolProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlEdStudViolProviderBase"/> instance.
		/// </summary>
		public SqlEdStudViolProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlEdStudViolProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlEdStudViolProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_edStudViolId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Decimal _edStudViolId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, _edStudViolId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(EdStudViol)
					,_edStudViolId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
		public override TList<EdStudViol> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<EdStudViol>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeCampusId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ViolDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeViolId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GroupId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdePenaltyId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PnltyDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ViolFrom", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ViolTo", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PnltyFrom", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PnltyTo", DbType.Date, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BhvrMark", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AttndMark", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DropDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notes", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ErpOrgTreeFromId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ErpOrgTreeToId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ViolSerial", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BanFee", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BanFeePayFlag", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DropFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeSemesterStopFromId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadYearStopFromId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdCodeSemesterStopToId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdAcadYearStopToId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AppealFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OtherFlag", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OtherSite", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCdeViolCatId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InvestigationCommInOut", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InvestigationDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InvestigationEndDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@InvestigationRecommendation", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApprovedBy", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CancelFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PunishCommFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PunishCommDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PunishCommEndDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PenaltyRelatedFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SemesterNo", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AbsenceFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExecFlg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExeFlgReg", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WarningNo", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Witness", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@GsCodeApprovalId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ApprovedByName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AttchdDocPath", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("ed_stud_viol_id ") || clause.Trim().StartsWith("ed_stud_viol_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudViolId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_id ") || clause.Trim().StartsWith("ed_stud_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_campus_id ") || clause.Trim().StartsWith("gs_cde_campus_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeCampusId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sc_building_id ") || clause.Trim().StartsWith("sc_building_id="))
				{
					database.SetParameterValue(commandWrapper, "@ScBuildingId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("viol_date ") || clause.Trim().StartsWith("viol_date="))
				{
					database.SetParameterValue(commandWrapper, "@ViolDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_viol_id ") || clause.Trim().StartsWith("gs_cde_viol_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeViolId", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("group_id ") || clause.Trim().StartsWith("group_id="))
				{
					database.SetParameterValue(commandWrapper, "@GroupId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_penalty_id ") || clause.Trim().StartsWith("gs_cde_penalty_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdePenaltyId", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pnlty_date ") || clause.Trim().StartsWith("pnlty_date="))
				{
					database.SetParameterValue(commandWrapper, "@PnltyDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("viol_from ") || clause.Trim().StartsWith("viol_from="))
				{
					database.SetParameterValue(commandWrapper, "@ViolFrom", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("viol_to ") || clause.Trim().StartsWith("viol_to="))
				{
					database.SetParameterValue(commandWrapper, "@ViolTo", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pnlty_from ") || clause.Trim().StartsWith("pnlty_from="))
				{
					database.SetParameterValue(commandWrapper, "@PnltyFrom", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pnlty_to ") || clause.Trim().StartsWith("pnlty_to="))
				{
					database.SetParameterValue(commandWrapper, "@PnltyTo", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bhvr_mark ") || clause.Trim().StartsWith("bhvr_mark="))
				{
					database.SetParameterValue(commandWrapper, "@BhvrMark", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("attnd_mark ") || clause.Trim().StartsWith("attnd_mark="))
				{
					database.SetParameterValue(commandWrapper, "@AttndMark", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("drop_date ") || clause.Trim().StartsWith("drop_date="))
				{
					database.SetParameterValue(commandWrapper, "@DropDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notes ") || clause.Trim().StartsWith("notes="))
				{
					database.SetParameterValue(commandWrapper, "@Notes", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("erp_org_tree_from_id ") || clause.Trim().StartsWith("erp_org_tree_from_id="))
				{
					database.SetParameterValue(commandWrapper, "@ErpOrgTreeFromId", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("erp_org_tree_to_id ") || clause.Trim().StartsWith("erp_org_tree_to_id="))
				{
					database.SetParameterValue(commandWrapper, "@ErpOrgTreeToId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_year_id ") || clause.Trim().StartsWith("ed_acad_year_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadYearId", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_semester_id ") || clause.Trim().StartsWith("ed_code_semester_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeSemesterId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("viol_serial ") || clause.Trim().StartsWith("viol_serial="))
				{
					database.SetParameterValue(commandWrapper, "@ViolSerial", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ban_fee ") || clause.Trim().StartsWith("ban_fee="))
				{
					database.SetParameterValue(commandWrapper, "@BanFee", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ban_fee_pay_flag ") || clause.Trim().StartsWith("ban_fee_pay_flag="))
				{
					database.SetParameterValue(commandWrapper, "@BanFeePayFlag", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("drop_flg ") || clause.Trim().StartsWith("drop_flg="))
				{
					database.SetParameterValue(commandWrapper, "@DropFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_semester_stop_from_id ") || clause.Trim().StartsWith("ed_code_semester_stop_from_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeSemesterStopFromId", 
						clause.Trim().Remove(0,29).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_year_stop_from_id ") || clause.Trim().StartsWith("ed_acad_year_stop_from_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadYearStopFromId", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_code_semester_stop_to_id ") || clause.Trim().StartsWith("ed_code_semester_stop_to_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdCodeSemesterStopToId", 
						clause.Trim().Remove(0,27).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_acad_year_stop_to_id ") || clause.Trim().StartsWith("ed_acad_year_stop_to_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdAcadYearStopToId", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("appeal_flg ") || clause.Trim().StartsWith("appeal_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AppealFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("other_flag ") || clause.Trim().StartsWith("other_flag="))
				{
					database.SetParameterValue(commandWrapper, "@OtherFlag", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("other_site ") || clause.Trim().StartsWith("other_site="))
				{
					database.SetParameterValue(commandWrapper, "@OtherSite", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_cde_viol_cat_id ") || clause.Trim().StartsWith("gs_cde_viol_cat_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCdeViolCatId", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("investigation_comm_in_out ") || clause.Trim().StartsWith("investigation_comm_in_out="))
				{
					database.SetParameterValue(commandWrapper, "@InvestigationCommInOut", 
						clause.Trim().Remove(0,25).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("investigation_date ") || clause.Trim().StartsWith("investigation_date="))
				{
					database.SetParameterValue(commandWrapper, "@InvestigationDate", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("investigation_end_date ") || clause.Trim().StartsWith("investigation_end_date="))
				{
					database.SetParameterValue(commandWrapper, "@InvestigationEndDate", 
						clause.Trim().Remove(0,22).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("investigation_recommendation ") || clause.Trim().StartsWith("investigation_recommendation="))
				{
					database.SetParameterValue(commandWrapper, "@InvestigationRecommendation", 
						clause.Trim().Remove(0,28).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("approved_by ") || clause.Trim().StartsWith("approved_by="))
				{
					database.SetParameterValue(commandWrapper, "@ApprovedBy", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cancel_flg ") || clause.Trim().StartsWith("cancel_flg="))
				{
					database.SetParameterValue(commandWrapper, "@CancelFlg", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("punish_comm_flg ") || clause.Trim().StartsWith("punish_comm_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PunishCommFlg", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("punish_comm_date ") || clause.Trim().StartsWith("punish_comm_date="))
				{
					database.SetParameterValue(commandWrapper, "@PunishCommDate", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("punish_comm_end_date ") || clause.Trim().StartsWith("punish_comm_end_date="))
				{
					database.SetParameterValue(commandWrapper, "@PunishCommEndDate", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("penalty_related_flg ") || clause.Trim().StartsWith("penalty_related_flg="))
				{
					database.SetParameterValue(commandWrapper, "@PenaltyRelatedFlg", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("semester_no ") || clause.Trim().StartsWith("semester_no="))
				{
					database.SetParameterValue(commandWrapper, "@SemesterNo", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("absence_flg ") || clause.Trim().StartsWith("absence_flg="))
				{
					database.SetParameterValue(commandWrapper, "@AbsenceFlg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exec_flg ") || clause.Trim().StartsWith("exec_flg="))
				{
					database.SetParameterValue(commandWrapper, "@ExecFlg", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exe_flg_reg ") || clause.Trim().StartsWith("exe_flg_reg="))
				{
					database.SetParameterValue(commandWrapper, "@ExeFlgReg", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("warning_no ") || clause.Trim().StartsWith("warning_no="))
				{
					database.SetParameterValue(commandWrapper, "@WarningNo", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ed_stud_cheat_id ") || clause.Trim().StartsWith("ed_stud_cheat_id="))
				{
					database.SetParameterValue(commandWrapper, "@EdStudCheatId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("witness ") || clause.Trim().StartsWith("witness="))
				{
					database.SetParameterValue(commandWrapper, "@Witness", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("gs_code_approval_id ") || clause.Trim().StartsWith("gs_code_approval_id="))
				{
					database.SetParameterValue(commandWrapper, "@GsCodeApprovalId", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("approved_by_name ") || clause.Trim().StartsWith("approved_by_name="))
				{
					database.SetParameterValue(commandWrapper, "@ApprovedByName", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("attchd_doc_path ") || clause.Trim().StartsWith("attchd_doc_path="))
				{
					database.SetParameterValue(commandWrapper, "@AttchdDocPath", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("se_user_id ") || clause.Trim().StartsWith("se_user_id="))
				{
					database.SetParameterValue(commandWrapper, "@SeUserId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last_date ") || clause.Trim().StartsWith("last_date="))
				{
					database.SetParameterValue(commandWrapper, "@LastDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<EdStudViol> rows = new TList<EdStudViol>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
		public override TList<EdStudViol> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_Find_Dynamic", typeof(EdStudViolColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<EdStudViol> rows = new TList<EdStudViol>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<EdStudViol> rows = new TList<EdStudViol>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
		public override TList<EdStudViol> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<EdStudViol> rows = new TList<EdStudViol>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByEdAcadYearId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_ACAD_YEAR key.
		///		FK_ED_STUD_VIOL_ED_ACAD_YEAR Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdAcadYearId(TransactionManager transactionManager, System.Decimal _edAcadYearId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdAcadYearId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, _edAcadYearId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdAcadYearStopFromId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_ACAD_YEAR1 key.
		///		FK_ED_STUD_VIOL_ED_ACAD_YEAR1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearStopFromId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdAcadYearStopFromId(TransactionManager transactionManager, System.Decimal? _edAcadYearStopFromId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdAcadYearStopFromId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearStopFromId", DbType.Decimal, _edAcadYearStopFromId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearStopFromId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearStopFromId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdAcadYearStopToId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_ACAD_YEAR2 key.
		///		FK_ED_STUD_VIOL_ED_ACAD_YEAR2 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearStopToId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdAcadYearStopToId(TransactionManager transactionManager, System.Decimal? _edAcadYearStopToId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdAcadYearStopToId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearStopToId", DbType.Decimal, _edAcadYearStopToId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearStopToId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearStopToId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeSemesterId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_CODE_SEMESTER key.
		///		FK_ED_STUD_VIOL_ED_CODE_SEMESTER Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdCodeSemesterId(TransactionManager transactionManager, System.Decimal _edCodeSemesterId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdCodeSemesterId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, _edCodeSemesterId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeSemesterStopFromId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_CODE_SEMESTER1 key.
		///		FK_ED_STUD_VIOL_ED_CODE_SEMESTER1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeSemesterStopFromId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdCodeSemesterStopFromId(TransactionManager transactionManager, System.Decimal? _edCodeSemesterStopFromId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdCodeSemesterStopFromId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeSemesterStopFromId", DbType.Decimal, _edCodeSemesterStopFromId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterStopFromId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterStopFromId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdCodeSemesterStopToId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_CODE_SEMESTER2 key.
		///		FK_ED_STUD_VIOL_ED_CODE_SEMESTER2 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edCodeSemesterStopToId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdCodeSemesterStopToId(TransactionManager transactionManager, System.Decimal? _edCodeSemesterStopToId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdCodeSemesterStopToId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdCodeSemesterStopToId", DbType.Decimal, _edCodeSemesterStopToId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterStopToId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdCodeSemesterStopToId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_STUD key.
		///		FK_ED_STUD_VIOL_ED_STUD Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdStudId(TransactionManager transactionManager, System.Decimal _edStudId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdStudId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByEdStudCheatId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ED_STUD_CHEAT key.
		///		FK_ED_STUD_VIOL_ED_STUD_CHEAT Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudCheatId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByEdStudCheatId(TransactionManager transactionManager, System.Decimal? _edStudCheatId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdStudCheatId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, _edStudCheatId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudCheatId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudCheatId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByErpOrgTreeToId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ERP_ORG_TREE key.
		///		FK_ED_STUD_VIOL_ERP_ORG_TREE Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_erpOrgTreeToId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByErpOrgTreeToId(TransactionManager transactionManager, System.Decimal? _erpOrgTreeToId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByErpOrgTreeToId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ErpOrgTreeToId", DbType.Decimal, _erpOrgTreeToId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByErpOrgTreeToId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByErpOrgTreeToId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByErpOrgTreeFromId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_ERP_ORG_TREE1 key.
		///		FK_ED_STUD_VIOL_ERP_ORG_TREE1 Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_erpOrgTreeFromId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByErpOrgTreeFromId(TransactionManager transactionManager, System.Decimal? _erpOrgTreeFromId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByErpOrgTreeFromId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ErpOrgTreeFromId", DbType.Decimal, _erpOrgTreeFromId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByErpOrgTreeFromId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByErpOrgTreeFromId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeCampusId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_GS_CDE_CAMPUS key.
		///		FK_ED_STUD_VIOL_GS_CDE_CAMPUS Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeCampusId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByGsCdeCampusId(TransactionManager transactionManager, System.Decimal? _gsCdeCampusId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByGsCdeCampusId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeCampusId", DbType.Decimal, _gsCdeCampusId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeCampusId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeCampusId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdePenaltyId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_GS_CDE_PENALTY key.
		///		FK_ED_STUD_VIOL_GS_CDE_PENALTY Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdePenaltyId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByGsCdePenaltyId(TransactionManager transactionManager, System.Decimal? _gsCdePenaltyId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByGsCdePenaltyId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdePenaltyId", DbType.Decimal, _gsCdePenaltyId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdePenaltyId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdePenaltyId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeViolId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_GS_CDE_VIOL key.
		///		FK_ED_STUD_VIOL_GS_CDE_VIOL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeViolId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByGsCdeViolId(TransactionManager transactionManager, System.Decimal _gsCdeViolId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByGsCdeViolId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeViolId", DbType.Decimal, _gsCdeViolId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeViolId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeViolId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCdeViolCatId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_GS_CDE_VIOL_CAT key.
		///		FK_ED_STUD_VIOL_GS_CDE_VIOL_CAT Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCdeViolCatId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByGsCdeViolCatId(TransactionManager transactionManager, System.Decimal _gsCdeViolCatId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByGsCdeViolCatId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCdeViolCatId", DbType.Decimal, _gsCdeViolCatId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCdeViolCatId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCdeViolCatId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByGsCodeApprovalId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_GS_CODE_APPROVAL key.
		///		FK_ED_STUD_VIOL_GS_CODE_APPROVAL Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_gsCodeApprovalId">صلاحية</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByGsCodeApprovalId(TransactionManager transactionManager, System.Decimal? _gsCodeApprovalId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByGsCodeApprovalId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@GsCodeApprovalId", DbType.Decimal, _gsCodeApprovalId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByGsCodeApprovalId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByGsCodeApprovalId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByScBuildingId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ED_STUD_VIOL_SC_BUILDING key.
		///		FK_ED_STUD_VIOL_SC_BUILDING Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_scBuildingId"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of UMIS_VER2.BusinessLyer.EdStudViol objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<EdStudViol> GetByScBuildingId(TransactionManager transactionManager, System.Decimal? _scBuildingId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByScBuildingId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, _scBuildingId);
			
			IDataReader reader = null;
			TList<EdStudViol> rows = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByScBuildingId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByScBuildingId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByEdStudViolId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ED_STUD_VIOL index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edStudViolId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudViol"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudViol GetByEdStudViolId(TransactionManager transactionManager, System.Decimal _edStudViolId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdStudViolId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, _edStudViolId);
			
			IDataReader reader = null;
			TList<EdStudViol> tmp = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdStudViolId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdStudViolId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByEdAcadYearIdEdCodeSemesterIdEdStudIdEdStudCheatIdGsCdeViolIdViolDateGsCdeViolCatId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the UK_ED_STUD_VIOL index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_edAcadYearId"></param>
		/// <param name="_edCodeSemesterId"></param>
		/// <param name="_edStudId"></param>
		/// <param name="_edStudCheatId"></param>
		/// <param name="_gsCdeViolId"></param>
		/// <param name="_violDate"></param>
		/// <param name="_gsCdeViolCatId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="UMIS_VER2.BusinessLyer.EdStudViol"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override UMIS_VER2.BusinessLyer.EdStudViol GetByEdAcadYearIdEdCodeSemesterIdEdStudIdEdStudCheatIdGsCdeViolIdViolDateGsCdeViolCatId(TransactionManager transactionManager, System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, System.Decimal _edStudId, System.Decimal? _edStudCheatId, System.Decimal _gsCdeViolId, System.DateTime _violDate, System.Decimal _gsCdeViolCatId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_GetByEdAcadYearIdEdCodeSemesterIdEdStudIdEdStudCheatIdGsCdeViolIdViolDateGsCdeViolCatId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, _edAcadYearId);
				database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, _edCodeSemesterId);
				database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, _edStudId);
				database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, _edStudCheatId);
				database.AddInParameter(commandWrapper, "@GsCdeViolId", DbType.Decimal, _gsCdeViolId);
				database.AddInParameter(commandWrapper, "@ViolDate", DbType.DateTime, _violDate);
				database.AddInParameter(commandWrapper, "@GsCdeViolCatId", DbType.Decimal, _gsCdeViolCatId);
			
			IDataReader reader = null;
			TList<EdStudViol> tmp = new TList<EdStudViol>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByEdAcadYearIdEdCodeSemesterIdEdStudIdEdStudCheatIdGsCdeViolIdViolDateGsCdeViolCatId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByEdAcadYearIdEdCodeSemesterIdEdStudIdEdStudCheatIdGsCdeViolIdViolDateGsCdeViolCatId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudViol object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<UMIS_VER2.BusinessLyer.EdStudViol> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ED_STUD_VIOL";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ED_STUD_VIOL_ID", typeof(System.Decimal));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("ED_STUD_ID", typeof(System.Decimal));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("GS_CDE_CAMPUS_ID", typeof(System.Decimal));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("SC_BUILDING_ID", typeof(System.Decimal));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("VIOL_DATE", typeof(System.DateTime));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("GS_CDE_VIOL_ID", typeof(System.Decimal));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("GROUP_ID", typeof(System.Decimal));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("GS_CDE_PENALTY_ID", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("PNLTY_DATE", typeof(System.DateTime));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("VIOL_FROM", typeof(System.DateTime));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("VIOL_TO", typeof(System.DateTime));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("PNLTY_FROM", typeof(System.DateTime));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("PNLTY_TO", typeof(System.DateTime));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("BHVR_MARK", typeof(System.Decimal));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("ATTND_MARK", typeof(System.Decimal));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("DROP_DATE", typeof(System.DateTime));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("NOTES", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("ERP_ORG_TREE_FROM_ID", typeof(System.Decimal));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ERP_ORG_TREE_TO_ID", typeof(System.Decimal));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("ED_ACAD_YEAR_ID", typeof(System.Decimal));
			col19.AllowDBNull = false;		
			DataColumn col20 = dataTable.Columns.Add("ED_CODE_SEMESTER_ID", typeof(System.Decimal));
			col20.AllowDBNull = false;		
			DataColumn col21 = dataTable.Columns.Add("VIOL_SERIAL", typeof(System.Decimal));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("BAN_FEE", typeof(System.Decimal));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("BAN_FEE_PAY_FLAG", typeof(System.Decimal));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("DROP_FLG", typeof(System.Decimal));
			col24.AllowDBNull = false;		
			DataColumn col25 = dataTable.Columns.Add("ED_CODE_SEMESTER_STOP_FROM_ID", typeof(System.Decimal));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("ED_ACAD_YEAR_STOP_FROM_ID", typeof(System.Decimal));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ED_CODE_SEMESTER_STOP_TO_ID", typeof(System.Decimal));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("ED_ACAD_YEAR_STOP_TO_ID", typeof(System.Decimal));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("APPEAL_FLG", typeof(System.Decimal));
			col29.AllowDBNull = false;		
			DataColumn col30 = dataTable.Columns.Add("OTHER_FLAG", typeof(System.Decimal));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("OTHER_SITE", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("GS_CDE_VIOL_CAT_ID", typeof(System.Decimal));
			col32.AllowDBNull = false;		
			DataColumn col33 = dataTable.Columns.Add("INVESTIGATION_COMM_IN_OUT", typeof(System.Decimal));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("INVESTIGATION_DATE", typeof(System.DateTime));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("INVESTIGATION_END_DATE", typeof(System.DateTime));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("INVESTIGATION_RECOMMENDATION", typeof(System.String));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("APPROVED_BY", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("CANCEL_FLG", typeof(System.Decimal));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("PUNISH_COMM_FLG", typeof(System.Decimal));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("PUNISH_COMM_DATE", typeof(System.DateTime));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("PUNISH_COMM_END_DATE", typeof(System.DateTime));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("PENALTY_RELATED_FLG", typeof(System.Decimal));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("SEMESTER_NO", typeof(System.Decimal));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("ABSENCE_FLG", typeof(System.Decimal));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("EXEC_FLG", typeof(System.Decimal));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("EXE_FLG_REG", typeof(System.Decimal));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("WARNING_NO", typeof(System.Decimal));
			col47.AllowDBNull = false;		
			DataColumn col48 = dataTable.Columns.Add("ED_STUD_CHEAT_ID", typeof(System.Decimal));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("WITNESS", typeof(System.String));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("GS_CODE_APPROVAL_ID", typeof(System.Decimal));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("APPROVED_BY_NAME", typeof(System.String));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("ATTCHD_DOC_PATH", typeof(System.String));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("SE_USER_ID", typeof(System.Decimal));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("LAST_DATE", typeof(System.DateTime));
			col54.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ED_STUD_VIOL_ID", "ED_STUD_VIOL_ID");
			bulkCopy.ColumnMappings.Add("ED_STUD_ID", "ED_STUD_ID");
			bulkCopy.ColumnMappings.Add("GS_CDE_CAMPUS_ID", "GS_CDE_CAMPUS_ID");
			bulkCopy.ColumnMappings.Add("SC_BUILDING_ID", "SC_BUILDING_ID");
			bulkCopy.ColumnMappings.Add("VIOL_DATE", "VIOL_DATE");
			bulkCopy.ColumnMappings.Add("GS_CDE_VIOL_ID", "GS_CDE_VIOL_ID");
			bulkCopy.ColumnMappings.Add("GROUP_ID", "GROUP_ID");
			bulkCopy.ColumnMappings.Add("GS_CDE_PENALTY_ID", "GS_CDE_PENALTY_ID");
			bulkCopy.ColumnMappings.Add("PNLTY_DATE", "PNLTY_DATE");
			bulkCopy.ColumnMappings.Add("VIOL_FROM", "VIOL_FROM");
			bulkCopy.ColumnMappings.Add("VIOL_TO", "VIOL_TO");
			bulkCopy.ColumnMappings.Add("PNLTY_FROM", "PNLTY_FROM");
			bulkCopy.ColumnMappings.Add("PNLTY_TO", "PNLTY_TO");
			bulkCopy.ColumnMappings.Add("BHVR_MARK", "BHVR_MARK");
			bulkCopy.ColumnMappings.Add("ATTND_MARK", "ATTND_MARK");
			bulkCopy.ColumnMappings.Add("DROP_DATE", "DROP_DATE");
			bulkCopy.ColumnMappings.Add("NOTES", "NOTES");
			bulkCopy.ColumnMappings.Add("ERP_ORG_TREE_FROM_ID", "ERP_ORG_TREE_FROM_ID");
			bulkCopy.ColumnMappings.Add("ERP_ORG_TREE_TO_ID", "ERP_ORG_TREE_TO_ID");
			bulkCopy.ColumnMappings.Add("ED_ACAD_YEAR_ID", "ED_ACAD_YEAR_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_SEMESTER_ID", "ED_CODE_SEMESTER_ID");
			bulkCopy.ColumnMappings.Add("VIOL_SERIAL", "VIOL_SERIAL");
			bulkCopy.ColumnMappings.Add("BAN_FEE", "BAN_FEE");
			bulkCopy.ColumnMappings.Add("BAN_FEE_PAY_FLAG", "BAN_FEE_PAY_FLAG");
			bulkCopy.ColumnMappings.Add("DROP_FLG", "DROP_FLG");
			bulkCopy.ColumnMappings.Add("ED_CODE_SEMESTER_STOP_FROM_ID", "ED_CODE_SEMESTER_STOP_FROM_ID");
			bulkCopy.ColumnMappings.Add("ED_ACAD_YEAR_STOP_FROM_ID", "ED_ACAD_YEAR_STOP_FROM_ID");
			bulkCopy.ColumnMappings.Add("ED_CODE_SEMESTER_STOP_TO_ID", "ED_CODE_SEMESTER_STOP_TO_ID");
			bulkCopy.ColumnMappings.Add("ED_ACAD_YEAR_STOP_TO_ID", "ED_ACAD_YEAR_STOP_TO_ID");
			bulkCopy.ColumnMappings.Add("APPEAL_FLG", "APPEAL_FLG");
			bulkCopy.ColumnMappings.Add("OTHER_FLAG", "OTHER_FLAG");
			bulkCopy.ColumnMappings.Add("OTHER_SITE", "OTHER_SITE");
			bulkCopy.ColumnMappings.Add("GS_CDE_VIOL_CAT_ID", "GS_CDE_VIOL_CAT_ID");
			bulkCopy.ColumnMappings.Add("INVESTIGATION_COMM_IN_OUT", "INVESTIGATION_COMM_IN_OUT");
			bulkCopy.ColumnMappings.Add("INVESTIGATION_DATE", "INVESTIGATION_DATE");
			bulkCopy.ColumnMappings.Add("INVESTIGATION_END_DATE", "INVESTIGATION_END_DATE");
			bulkCopy.ColumnMappings.Add("INVESTIGATION_RECOMMENDATION", "INVESTIGATION_RECOMMENDATION");
			bulkCopy.ColumnMappings.Add("APPROVED_BY", "APPROVED_BY");
			bulkCopy.ColumnMappings.Add("CANCEL_FLG", "CANCEL_FLG");
			bulkCopy.ColumnMappings.Add("PUNISH_COMM_FLG", "PUNISH_COMM_FLG");
			bulkCopy.ColumnMappings.Add("PUNISH_COMM_DATE", "PUNISH_COMM_DATE");
			bulkCopy.ColumnMappings.Add("PUNISH_COMM_END_DATE", "PUNISH_COMM_END_DATE");
			bulkCopy.ColumnMappings.Add("PENALTY_RELATED_FLG", "PENALTY_RELATED_FLG");
			bulkCopy.ColumnMappings.Add("SEMESTER_NO", "SEMESTER_NO");
			bulkCopy.ColumnMappings.Add("ABSENCE_FLG", "ABSENCE_FLG");
			bulkCopy.ColumnMappings.Add("EXEC_FLG", "EXEC_FLG");
			bulkCopy.ColumnMappings.Add("EXE_FLG_REG", "EXE_FLG_REG");
			bulkCopy.ColumnMappings.Add("WARNING_NO", "WARNING_NO");
			bulkCopy.ColumnMappings.Add("ED_STUD_CHEAT_ID", "ED_STUD_CHEAT_ID");
			bulkCopy.ColumnMappings.Add("WITNESS", "WITNESS");
			bulkCopy.ColumnMappings.Add("GS_CODE_APPROVAL_ID", "GS_CODE_APPROVAL_ID");
			bulkCopy.ColumnMappings.Add("APPROVED_BY_NAME", "APPROVED_BY_NAME");
			bulkCopy.ColumnMappings.Add("ATTCHD_DOC_PATH", "ATTCHD_DOC_PATH");
			bulkCopy.ColumnMappings.Add("SE_USER_ID", "SE_USER_ID");
			bulkCopy.ColumnMappings.Add("LAST_DATE", "LAST_DATE");
			
			foreach(UMIS_VER2.BusinessLyer.EdStudViol entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ED_STUD_VIOL_ID"] = entity.EdStudViolId;
							
				
					row["ED_STUD_ID"] = entity.EdStudId;
							
				
					row["GS_CDE_CAMPUS_ID"] = entity.GsCdeCampusId.HasValue ? (object) entity.GsCdeCampusId  : System.DBNull.Value;
							
				
					row["SC_BUILDING_ID"] = entity.ScBuildingId.HasValue ? (object) entity.ScBuildingId  : System.DBNull.Value;
							
				
					row["VIOL_DATE"] = entity.ViolDate;
							
				
					row["GS_CDE_VIOL_ID"] = entity.GsCdeViolId;
							
				
					row["GROUP_ID"] = entity.GroupId.HasValue ? (object) entity.GroupId  : System.DBNull.Value;
							
				
					row["GS_CDE_PENALTY_ID"] = entity.GsCdePenaltyId.HasValue ? (object) entity.GsCdePenaltyId  : System.DBNull.Value;
							
				
					row["PNLTY_DATE"] = entity.PnltyDate.HasValue ? (object) entity.PnltyDate  : System.DBNull.Value;
							
				
					row["VIOL_FROM"] = entity.ViolFrom.HasValue ? (object) entity.ViolFrom  : System.DBNull.Value;
							
				
					row["VIOL_TO"] = entity.ViolTo.HasValue ? (object) entity.ViolTo  : System.DBNull.Value;
							
				
					row["PNLTY_FROM"] = entity.PnltyFrom.HasValue ? (object) entity.PnltyFrom  : System.DBNull.Value;
							
				
					row["PNLTY_TO"] = entity.PnltyTo.HasValue ? (object) entity.PnltyTo  : System.DBNull.Value;
							
				
					row["BHVR_MARK"] = entity.BhvrMark.HasValue ? (object) entity.BhvrMark  : System.DBNull.Value;
							
				
					row["ATTND_MARK"] = entity.AttndMark.HasValue ? (object) entity.AttndMark  : System.DBNull.Value;
							
				
					row["DROP_DATE"] = entity.DropDate.HasValue ? (object) entity.DropDate  : System.DBNull.Value;
							
				
					row["NOTES"] = entity.Notes;
							
				
					row["ERP_ORG_TREE_FROM_ID"] = entity.ErpOrgTreeFromId.HasValue ? (object) entity.ErpOrgTreeFromId  : System.DBNull.Value;
							
				
					row["ERP_ORG_TREE_TO_ID"] = entity.ErpOrgTreeToId.HasValue ? (object) entity.ErpOrgTreeToId  : System.DBNull.Value;
							
				
					row["ED_ACAD_YEAR_ID"] = entity.EdAcadYearId;
							
				
					row["ED_CODE_SEMESTER_ID"] = entity.EdCodeSemesterId;
							
				
					row["VIOL_SERIAL"] = entity.ViolSerial.HasValue ? (object) entity.ViolSerial  : System.DBNull.Value;
							
				
					row["BAN_FEE"] = entity.BanFee.HasValue ? (object) entity.BanFee  : System.DBNull.Value;
							
				
					row["BAN_FEE_PAY_FLAG"] = entity.BanFeePayFlag.HasValue ? (object) entity.BanFeePayFlag  : System.DBNull.Value;
							
				
					row["DROP_FLG"] = entity.DropFlg;
							
				
					row["ED_CODE_SEMESTER_STOP_FROM_ID"] = entity.EdCodeSemesterStopFromId.HasValue ? (object) entity.EdCodeSemesterStopFromId  : System.DBNull.Value;
							
				
					row["ED_ACAD_YEAR_STOP_FROM_ID"] = entity.EdAcadYearStopFromId.HasValue ? (object) entity.EdAcadYearStopFromId  : System.DBNull.Value;
							
				
					row["ED_CODE_SEMESTER_STOP_TO_ID"] = entity.EdCodeSemesterStopToId.HasValue ? (object) entity.EdCodeSemesterStopToId  : System.DBNull.Value;
							
				
					row["ED_ACAD_YEAR_STOP_TO_ID"] = entity.EdAcadYearStopToId.HasValue ? (object) entity.EdAcadYearStopToId  : System.DBNull.Value;
							
				
					row["APPEAL_FLG"] = entity.AppealFlg;
							
				
					row["OTHER_FLAG"] = entity.OtherFlag.HasValue ? (object) entity.OtherFlag  : System.DBNull.Value;
							
				
					row["OTHER_SITE"] = entity.OtherSite;
							
				
					row["GS_CDE_VIOL_CAT_ID"] = entity.GsCdeViolCatId;
							
				
					row["INVESTIGATION_COMM_IN_OUT"] = entity.InvestigationCommInOut.HasValue ? (object) entity.InvestigationCommInOut  : System.DBNull.Value;
							
				
					row["INVESTIGATION_DATE"] = entity.InvestigationDate.HasValue ? (object) entity.InvestigationDate  : System.DBNull.Value;
							
				
					row["INVESTIGATION_END_DATE"] = entity.InvestigationEndDate.HasValue ? (object) entity.InvestigationEndDate  : System.DBNull.Value;
							
				
					row["INVESTIGATION_RECOMMENDATION"] = entity.InvestigationRecommendation;
							
				
					row["APPROVED_BY"] = entity.ApprovedBy.HasValue ? (object) entity.ApprovedBy  : System.DBNull.Value;
							
				
					row["CANCEL_FLG"] = entity.CancelFlg.HasValue ? (object) entity.CancelFlg  : System.DBNull.Value;
							
				
					row["PUNISH_COMM_FLG"] = entity.PunishCommFlg.HasValue ? (object) entity.PunishCommFlg  : System.DBNull.Value;
							
				
					row["PUNISH_COMM_DATE"] = entity.PunishCommDate.HasValue ? (object) entity.PunishCommDate  : System.DBNull.Value;
							
				
					row["PUNISH_COMM_END_DATE"] = entity.PunishCommEndDate.HasValue ? (object) entity.PunishCommEndDate  : System.DBNull.Value;
							
				
					row["PENALTY_RELATED_FLG"] = entity.PenaltyRelatedFlg.HasValue ? (object) entity.PenaltyRelatedFlg  : System.DBNull.Value;
							
				
					row["SEMESTER_NO"] = entity.SemesterNo.HasValue ? (object) entity.SemesterNo  : System.DBNull.Value;
							
				
					row["ABSENCE_FLG"] = entity.AbsenceFlg.HasValue ? (object) entity.AbsenceFlg  : System.DBNull.Value;
							
				
					row["EXEC_FLG"] = entity.ExecFlg.HasValue ? (object) entity.ExecFlg  : System.DBNull.Value;
							
				
					row["EXE_FLG_REG"] = entity.ExeFlgReg.HasValue ? (object) entity.ExeFlgReg  : System.DBNull.Value;
							
				
					row["WARNING_NO"] = entity.WarningNo;
							
				
					row["ED_STUD_CHEAT_ID"] = entity.EdStudCheatId.HasValue ? (object) entity.EdStudCheatId  : System.DBNull.Value;
							
				
					row["WITNESS"] = entity.Witness;
							
				
					row["GS_CODE_APPROVAL_ID"] = entity.GsCodeApprovalId.HasValue ? (object) entity.GsCodeApprovalId  : System.DBNull.Value;
							
				
					row["APPROVED_BY_NAME"] = entity.ApprovedByName;
							
				
					row["ATTCHD_DOC_PATH"] = entity.AttchdDocPath;
							
				
					row["SE_USER_ID"] = entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value;
							
				
					row["LAST_DATE"] = entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(UMIS_VER2.BusinessLyer.EdStudViol entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a UMIS_VER2.BusinessLyer.EdStudViol object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudViol object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the UMIS_VER2.BusinessLyer.EdStudViol object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudViol entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, 5);
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, entity.EdStudId );
			database.AddInParameter(commandWrapper, "@GsCdeCampusId", DbType.Decimal, (entity.GsCdeCampusId.HasValue ? (object) entity.GsCdeCampusId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, (entity.ScBuildingId.HasValue ? (object) entity.ScBuildingId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ViolDate", DbType.DateTime, entity.ViolDate );
			database.AddInParameter(commandWrapper, "@GsCdeViolId", DbType.Decimal, entity.GsCdeViolId );
			database.AddInParameter(commandWrapper, "@GroupId", DbType.Decimal, (entity.GroupId.HasValue ? (object) entity.GroupId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@GsCdePenaltyId", DbType.Decimal, (entity.GsCdePenaltyId.HasValue ? (object) entity.GsCdePenaltyId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PnltyDate", DbType.DateTime, (entity.PnltyDate.HasValue ? (object) entity.PnltyDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ViolFrom", DbType.Date, (entity.ViolFrom.HasValue ? (object) entity.ViolFrom  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ViolTo", DbType.Date, (entity.ViolTo.HasValue ? (object) entity.ViolTo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PnltyFrom", DbType.Date, (entity.PnltyFrom.HasValue ? (object) entity.PnltyFrom  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PnltyTo", DbType.Date, (entity.PnltyTo.HasValue ? (object) entity.PnltyTo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BhvrMark", DbType.Decimal, (entity.BhvrMark.HasValue ? (object) entity.BhvrMark  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AttndMark", DbType.Decimal, (entity.AttndMark.HasValue ? (object) entity.AttndMark  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DropDate", DbType.DateTime, (entity.DropDate.HasValue ? (object) entity.DropDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@ErpOrgTreeFromId", DbType.Decimal, (entity.ErpOrgTreeFromId.HasValue ? (object) entity.ErpOrgTreeFromId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ErpOrgTreeToId", DbType.Decimal, (entity.ErpOrgTreeToId.HasValue ? (object) entity.ErpOrgTreeToId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, entity.EdAcadYearId );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, entity.EdCodeSemesterId );
			database.AddInParameter(commandWrapper, "@ViolSerial", DbType.Decimal, (entity.ViolSerial.HasValue ? (object) entity.ViolSerial  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BanFee", DbType.Decimal, (entity.BanFee.HasValue ? (object) entity.BanFee  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BanFeePayFlag", DbType.Decimal, (entity.BanFeePayFlag.HasValue ? (object) entity.BanFeePayFlag  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DropFlg", DbType.Decimal, entity.DropFlg );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterStopFromId", DbType.Decimal, (entity.EdCodeSemesterStopFromId.HasValue ? (object) entity.EdCodeSemesterStopFromId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdAcadYearStopFromId", DbType.Decimal, (entity.EdAcadYearStopFromId.HasValue ? (object) entity.EdAcadYearStopFromId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdCodeSemesterStopToId", DbType.Decimal, (entity.EdCodeSemesterStopToId.HasValue ? (object) entity.EdCodeSemesterStopToId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@EdAcadYearStopToId", DbType.Decimal, (entity.EdAcadYearStopToId.HasValue ? (object) entity.EdAcadYearStopToId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AppealFlg", DbType.Decimal, entity.AppealFlg );
			database.AddInParameter(commandWrapper, "@OtherFlag", DbType.Decimal, (entity.OtherFlag.HasValue ? (object) entity.OtherFlag  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OtherSite", DbType.String, entity.OtherSite );
			database.AddInParameter(commandWrapper, "@GsCdeViolCatId", DbType.Decimal, entity.GsCdeViolCatId );
			database.AddInParameter(commandWrapper, "@InvestigationCommInOut", DbType.Decimal, (entity.InvestigationCommInOut.HasValue ? (object) entity.InvestigationCommInOut  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@InvestigationDate", DbType.DateTime, (entity.InvestigationDate.HasValue ? (object) entity.InvestigationDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@InvestigationEndDate", DbType.DateTime, (entity.InvestigationEndDate.HasValue ? (object) entity.InvestigationEndDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@InvestigationRecommendation", DbType.String, entity.InvestigationRecommendation );
			database.AddInParameter(commandWrapper, "@ApprovedBy", DbType.Decimal, (entity.ApprovedBy.HasValue ? (object) entity.ApprovedBy  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CancelFlg", DbType.Decimal, (entity.CancelFlg.HasValue ? (object) entity.CancelFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PunishCommFlg", DbType.Decimal, (entity.PunishCommFlg.HasValue ? (object) entity.PunishCommFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PunishCommDate", DbType.DateTime, (entity.PunishCommDate.HasValue ? (object) entity.PunishCommDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PunishCommEndDate", DbType.DateTime, (entity.PunishCommEndDate.HasValue ? (object) entity.PunishCommEndDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PenaltyRelatedFlg", DbType.Decimal, (entity.PenaltyRelatedFlg.HasValue ? (object) entity.PenaltyRelatedFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SemesterNo", DbType.Decimal, (entity.SemesterNo.HasValue ? (object) entity.SemesterNo  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AbsenceFlg", DbType.Decimal, (entity.AbsenceFlg.HasValue ? (object) entity.AbsenceFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExecFlg", DbType.Decimal, (entity.ExecFlg.HasValue ? (object) entity.ExecFlg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExeFlgReg", DbType.Decimal, (entity.ExeFlgReg.HasValue ? (object) entity.ExeFlgReg  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@WarningNo", DbType.Decimal, entity.WarningNo );
			database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, (entity.EdStudCheatId.HasValue ? (object) entity.EdStudCheatId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Witness", DbType.String, entity.Witness );
			database.AddInParameter(commandWrapper, "@GsCodeApprovalId", DbType.Decimal, (entity.GsCodeApprovalId.HasValue ? (object) entity.GsCodeApprovalId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ApprovedByName", DbType.String, entity.ApprovedByName );
			database.AddInParameter(commandWrapper, "@AttchdDocPath", DbType.String, entity.AttchdDocPath );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _edStudViolId = database.GetParameterValue(commandWrapper, "@EdStudViolId");
			entity.EdStudViolId = (System.Decimal)_edStudViolId;
			
			entity.OriginalEdStudViolId = entity.EdStudViolId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">UMIS_VER2.BusinessLyer.EdStudViol object to update.</param>
		/// <remarks>
		///		After updating the datasource, the UMIS_VER2.BusinessLyer.EdStudViol object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, UMIS_VER2.BusinessLyer.EdStudViol entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ED_STUD_VIOL_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@EdStudViolId", DbType.Decimal, entity.EdStudViolId );
			database.AddInParameter(commandWrapper, "@OriginalEdStudViolId", DbType.Decimal, entity.OriginalEdStudViolId);
			database.AddInParameter(commandWrapper, "@EdStudId", DbType.Decimal, entity.EdStudId );
			database.AddInParameter(commandWrapper, "@GsCdeCampusId", DbType.Decimal, (entity.GsCdeCampusId.HasValue ? (object) entity.GsCdeCampusId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ScBuildingId", DbType.Decimal, (entity.ScBuildingId.HasValue ? (object) entity.ScBuildingId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ViolDate", DbType.DateTime, entity.ViolDate );
			database.AddInParameter(commandWrapper, "@GsCdeViolId", DbType.Decimal, entity.GsCdeViolId );
			database.AddInParameter(commandWrapper, "@GroupId", DbType.Decimal, (entity.GroupId.HasValue ? (object) entity.GroupId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@GsCdePenaltyId", DbType.Decimal, (entity.GsCdePenaltyId.HasValue ? (object) entity.GsCdePenaltyId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PnltyDate", DbType.DateTime, (entity.PnltyDate.HasValue ? (object) entity.PnltyDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ViolFrom", DbType.Date, (entity.ViolFrom.HasValue ? (object) entity.ViolFrom : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ViolTo", DbType.Date, (entity.ViolTo.HasValue ? (object) entity.ViolTo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PnltyFrom", DbType.Date, (entity.PnltyFrom.HasValue ? (object) entity.PnltyFrom : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PnltyTo", DbType.Date, (entity.PnltyTo.HasValue ? (object) entity.PnltyTo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BhvrMark", DbType.Decimal, (entity.BhvrMark.HasValue ? (object) entity.BhvrMark : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AttndMark", DbType.Decimal, (entity.AttndMark.HasValue ? (object) entity.AttndMark : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DropDate", DbType.DateTime, (entity.DropDate.HasValue ? (object) entity.DropDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Notes", DbType.String, entity.Notes );
			database.AddInParameter(commandWrapper, "@ErpOrgTreeFromId", DbType.Decimal, (entity.ErpOrgTreeFromId.HasValue ? (object) entity.ErpOrgTreeFromId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ErpOrgTreeToId", DbType.Decimal, (entity.ErpOrgTreeToId.HasValue ? (object) entity.ErpOrgTreeToId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdAcadYearId", DbType.Decimal, entity.EdAcadYearId );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterId", DbType.Decimal, entity.EdCodeSemesterId );
			database.AddInParameter(commandWrapper, "@ViolSerial", DbType.Decimal, (entity.ViolSerial.HasValue ? (object) entity.ViolSerial : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BanFee", DbType.Decimal, (entity.BanFee.HasValue ? (object) entity.BanFee : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BanFeePayFlag", DbType.Decimal, (entity.BanFeePayFlag.HasValue ? (object) entity.BanFeePayFlag : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DropFlg", DbType.Decimal, entity.DropFlg );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterStopFromId", DbType.Decimal, (entity.EdCodeSemesterStopFromId.HasValue ? (object) entity.EdCodeSemesterStopFromId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdAcadYearStopFromId", DbType.Decimal, (entity.EdAcadYearStopFromId.HasValue ? (object) entity.EdAcadYearStopFromId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdCodeSemesterStopToId", DbType.Decimal, (entity.EdCodeSemesterStopToId.HasValue ? (object) entity.EdCodeSemesterStopToId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@EdAcadYearStopToId", DbType.Decimal, (entity.EdAcadYearStopToId.HasValue ? (object) entity.EdAcadYearStopToId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AppealFlg", DbType.Decimal, entity.AppealFlg );
			database.AddInParameter(commandWrapper, "@OtherFlag", DbType.Decimal, (entity.OtherFlag.HasValue ? (object) entity.OtherFlag : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OtherSite", DbType.String, entity.OtherSite );
			database.AddInParameter(commandWrapper, "@GsCdeViolCatId", DbType.Decimal, entity.GsCdeViolCatId );
			database.AddInParameter(commandWrapper, "@InvestigationCommInOut", DbType.Decimal, (entity.InvestigationCommInOut.HasValue ? (object) entity.InvestigationCommInOut : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@InvestigationDate", DbType.DateTime, (entity.InvestigationDate.HasValue ? (object) entity.InvestigationDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@InvestigationEndDate", DbType.DateTime, (entity.InvestigationEndDate.HasValue ? (object) entity.InvestigationEndDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@InvestigationRecommendation", DbType.String, entity.InvestigationRecommendation );
			database.AddInParameter(commandWrapper, "@ApprovedBy", DbType.Decimal, (entity.ApprovedBy.HasValue ? (object) entity.ApprovedBy : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CancelFlg", DbType.Decimal, (entity.CancelFlg.HasValue ? (object) entity.CancelFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PunishCommFlg", DbType.Decimal, (entity.PunishCommFlg.HasValue ? (object) entity.PunishCommFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PunishCommDate", DbType.DateTime, (entity.PunishCommDate.HasValue ? (object) entity.PunishCommDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PunishCommEndDate", DbType.DateTime, (entity.PunishCommEndDate.HasValue ? (object) entity.PunishCommEndDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PenaltyRelatedFlg", DbType.Decimal, (entity.PenaltyRelatedFlg.HasValue ? (object) entity.PenaltyRelatedFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SemesterNo", DbType.Decimal, (entity.SemesterNo.HasValue ? (object) entity.SemesterNo : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AbsenceFlg", DbType.Decimal, (entity.AbsenceFlg.HasValue ? (object) entity.AbsenceFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExecFlg", DbType.Decimal, (entity.ExecFlg.HasValue ? (object) entity.ExecFlg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExeFlgReg", DbType.Decimal, (entity.ExeFlgReg.HasValue ? (object) entity.ExeFlgReg : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@WarningNo", DbType.Decimal, entity.WarningNo );
			database.AddInParameter(commandWrapper, "@EdStudCheatId", DbType.Decimal, (entity.EdStudCheatId.HasValue ? (object) entity.EdStudCheatId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Witness", DbType.String, entity.Witness );
			database.AddInParameter(commandWrapper, "@GsCodeApprovalId", DbType.Decimal, (entity.GsCodeApprovalId.HasValue ? (object) entity.GsCodeApprovalId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ApprovedByName", DbType.String, entity.ApprovedByName );
			database.AddInParameter(commandWrapper, "@AttchdDocPath", DbType.String, entity.AttchdDocPath );
			database.AddInParameter(commandWrapper, "@SeUserId", DbType.Decimal, (entity.SeUserId.HasValue ? (object) entity.SeUserId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastDate", DbType.DateTime, (entity.LastDate.HasValue ? (object) entity.LastDate : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalEdStudViolId = entity.EdStudViolId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
