
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudSemesterExt.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_SEMESTER_EXT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudSemesterExtBase : EntityBase, IEdStudSemesterExt, IEntityId<EdStudSemesterExtKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudSemesterExtEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudSemesterExtEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudSemesterExtEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudSemesterExt> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudSemesterExtEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudSemesterExtEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudSemesterExtBase"/> instance.
		///</summary>
		public EdStudSemesterExtBase()
		{
			this.entityData = new EdStudSemesterExtEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudSemesterExtBase"/> instance.
		///</summary>
		///<param name="_edStudSemesterExtId">بيانات اضافية للسجل الدراسي</param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeStudCaseId">مستجد- باقى للاعادة</param>
		///<param name="_entMajorPhaseId">المراحل الدارسية</param>
		///<param name="_edCodeGradingId">تقدير الفصل</param>
		///<param name="_edCodeAccumGradingId">تقدير التراكمى
		/// 		/// تقدير للفرقة الدراسية (الفصل الأول + الفصل الثاني)</param>
		///<param name="_semMark">مجموع الدرجات الفصلى</param>
		///<param name="_accumMark">مجموع الدرجات التراكمى</param>
		///<param name="_accumPercent">نسبة التراكمى</param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EdStudSemesterExtBase(System.Decimal _edStudSemesterExtId, System.Decimal _edStudSemesterId, 
			System.Decimal? _edCodeStudCaseId, System.Decimal? _entMajorPhaseId, System.Decimal? _edCodeGradingId, 
			System.Decimal? _edCodeAccumGradingId, System.Decimal? _semMark, System.Decimal? _accumMark, 
			System.Decimal? _accumPercent, System.Decimal? _seFormId, System.Decimal? _seUserId, 
			System.DateTime _lastDate)
		{
			this.entityData = new EdStudSemesterExtEntityData();
			this.backupData = null;

			this.EdStudSemesterExtId = _edStudSemesterExtId;
			this.EdStudSemesterId = _edStudSemesterId;
			this.EdCodeStudCaseId = _edCodeStudCaseId;
			this.EntMajorPhaseId = _entMajorPhaseId;
			this.EdCodeGradingId = _edCodeGradingId;
			this.EdCodeAccumGradingId = _edCodeAccumGradingId;
			this.SemMark = _semMark;
			this.AccumMark = _accumMark;
			this.AccumPercent = _accumPercent;
			this.SeFormId = _seFormId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudSemesterExt"/> instance.
		///</summary>
		///<param name="_edStudSemesterExtId">بيانات اضافية للسجل الدراسي</param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeStudCaseId">مستجد- باقى للاعادة</param>
		///<param name="_entMajorPhaseId">المراحل الدارسية</param>
		///<param name="_edCodeGradingId">تقدير الفصل</param>
		///<param name="_edCodeAccumGradingId">تقدير التراكمى
		/// 		/// تقدير للفرقة الدراسية (الفصل الأول + الفصل الثاني)</param>
		///<param name="_semMark">مجموع الدرجات الفصلى</param>
		///<param name="_accumMark">مجموع الدرجات التراكمى</param>
		///<param name="_accumPercent">نسبة التراكمى</param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EdStudSemesterExt CreateEdStudSemesterExt(System.Decimal _edStudSemesterExtId, System.Decimal _edStudSemesterId, 
			System.Decimal? _edCodeStudCaseId, System.Decimal? _entMajorPhaseId, System.Decimal? _edCodeGradingId, 
			System.Decimal? _edCodeAccumGradingId, System.Decimal? _semMark, System.Decimal? _accumMark, 
			System.Decimal? _accumPercent, System.Decimal? _seFormId, System.Decimal? _seUserId, 
			System.DateTime _lastDate)
		{
			EdStudSemesterExt newEdStudSemesterExt = new EdStudSemesterExt();
			newEdStudSemesterExt.EdStudSemesterExtId = _edStudSemesterExtId;
			newEdStudSemesterExt.EdStudSemesterId = _edStudSemesterId;
			newEdStudSemesterExt.EdCodeStudCaseId = _edCodeStudCaseId;
			newEdStudSemesterExt.EntMajorPhaseId = _entMajorPhaseId;
			newEdStudSemesterExt.EdCodeGradingId = _edCodeGradingId;
			newEdStudSemesterExt.EdCodeAccumGradingId = _edCodeAccumGradingId;
			newEdStudSemesterExt.SemMark = _semMark;
			newEdStudSemesterExt.AccumMark = _accumMark;
			newEdStudSemesterExt.AccumPercent = _accumPercent;
			newEdStudSemesterExt.SeFormId = _seFormId;
			newEdStudSemesterExt.SeUserId = _seUserId;
			newEdStudSemesterExt.LastDate = _lastDate;
			return newEdStudSemesterExt;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterExtId property. 
		///		بيانات اضافية للسجل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بيانات اضافية للسجل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudSemesterExtId
		{
			get
			{
				return this.entityData.EdStudSemesterExtId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterExtId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.EdStudSemesterExtId, this.entityData.EdStudSemesterExtId);
				this.entityData.EdStudSemesterExtId = value;
				this.EntityId.EdStudSemesterExtId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.EdStudSemesterExtId, this.entityData.EdStudSemesterExtId);
				OnPropertyChanged("EdStudSemesterExtId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_SEMESTER_EXT_ID property.
		///		بيانات اضافية للسجل الدراسي
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_SEMESTER_EXT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudSemesterExtId
		{
			get { return this.entityData.OriginalEdStudSemesterExtId; }
			set { this.entityData.OriginalEdStudSemesterExtId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeStudCaseId property. 
		///		مستجد- باقى للاعادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeStudCaseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مستجد- باقى للاعادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeStudCaseId
		{
			get
			{
				return this.entityData.EdCodeStudCaseId; 
			}
			
			set
			{
				if (this.entityData.EdCodeStudCaseId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.EdCodeStudCaseId, this.entityData.EdCodeStudCaseId);
				this.entityData.EdCodeStudCaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.EdCodeStudCaseId, this.entityData.EdCodeStudCaseId);
				OnPropertyChanged("EdCodeStudCaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMajorPhaseId property. 
		///		المراحل الدارسية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMajorPhaseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المراحل الدارسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMajorPhaseId
		{
			get
			{
				return this.entityData.EntMajorPhaseId; 
			}
			
			set
			{
				if (this.entityData.EntMajorPhaseId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.EntMajorPhaseId, this.entityData.EntMajorPhaseId);
				this.entityData.EntMajorPhaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.EntMajorPhaseId, this.entityData.EntMajorPhaseId);
				OnPropertyChanged("EntMajorPhaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		تقدير الفصل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تقدير الفصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeAccumGradingId property. 
		///		تقدير التراكمى
		/// 		/// تقدير للفرقة الدراسية (الفصل الأول + الفصل الثاني)
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeAccumGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تقدير التراكمى تقدير للفرقة الدراسية (الفصل الأول + الفصل الثاني)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeAccumGradingId
		{
			get
			{
				return this.entityData.EdCodeAccumGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeAccumGradingId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.EdCodeAccumGradingId, this.entityData.EdCodeAccumGradingId);
				this.entityData.EdCodeAccumGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.EdCodeAccumGradingId, this.entityData.EdCodeAccumGradingId);
				OnPropertyChanged("EdCodeAccumGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemMark property. 
		///		مجموع الدرجات الفصلى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموع الدرجات الفصلى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemMark
		{
			get
			{
				return this.entityData.SemMark; 
			}
			
			set
			{
				if (this.entityData.SemMark == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.SemMark, this.entityData.SemMark);
				this.entityData.SemMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.SemMark, this.entityData.SemMark);
				OnPropertyChanged("SemMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumMark property. 
		///		مجموع الدرجات التراكمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموع الدرجات التراكمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumMark
		{
			get
			{
				return this.entityData.AccumMark; 
			}
			
			set
			{
				if (this.entityData.AccumMark == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.AccumMark, this.entityData.AccumMark);
				this.entityData.AccumMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.AccumMark, this.entityData.AccumMark);
				OnPropertyChanged("AccumMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumPercent property. 
		///		نسبة التراكمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نسبة التراكمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumPercent
		{
			get
			{
				return this.entityData.AccumPercent; 
			}
			
			set
			{
				if (this.entityData.AccumPercent == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.AccumPercent, this.entityData.AccumPercent);
				this.entityData.AccumPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.AccumPercent, this.entityData.AccumPercent);
				OnPropertyChanged("AccumPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudSemesterExtColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterExtColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeAccumGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeAccumGradingIdSource
      	{
            get { return entityData.EdCodeAccumGradingIdSource; }
            set { entityData.EdCodeAccumGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudCase"/>.
		/// </summary>
		/// <value>The source EdCodeStudCase for EdCodeStudCaseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeStudCase EdCodeStudCaseIdSource
      	{
            get { return entityData.EdCodeStudCaseIdSource; }
            set { entityData.EdCodeStudCaseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntMajorPhase"/>.
		/// </summary>
		/// <value>The source EntMajorPhase for EntMajorPhaseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntMajorPhase EntMajorPhaseIdSource
      	{
            get { return entityData.EntMajorPhaseIdSource; }
            set { entityData.EntMajorPhaseIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_SEMESTER_EXT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_SEMESTER_EXT_ID", "ED_STUD_SEMESTER_ID", "ED_CODE_STUD_CASE_ID", "ENT_MAJOR_PHASE_ID", "ED_CODE_GRADING_ID", "ED_CODE_ACCUM_GRADING_ID", "SEM_MARK", "ACCUM_MARK", "ACCUM_PERCENT", "SE_FORM_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudSemesterExtEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudSemesterExt) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudSemesterExt>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudSemesterExt);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudSemesterExt Entity 
		///</summary>
		protected virtual EdStudSemesterExt Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudSemesterExt copy = new EdStudSemesterExt();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudSemesterExtId = this.EdStudSemesterExtId;
					copy.OriginalEdStudSemesterExtId = this.OriginalEdStudSemesterExtId;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.EdCodeStudCaseId = this.EdCodeStudCaseId;
				copy.EntMajorPhaseId = this.EntMajorPhaseId;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.EdCodeAccumGradingId = this.EdCodeAccumGradingId;
				copy.SemMark = this.SemMark;
				copy.AccumMark = this.AccumMark;
				copy.AccumPercent = this.AccumPercent;
				copy.SeFormId = this.SeFormId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeAccumGradingIdSource != null && existingCopies.Contains(this.EdCodeAccumGradingIdSource))
				copy.EdCodeAccumGradingIdSource = existingCopies[this.EdCodeAccumGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeAccumGradingIdSource = MakeCopyOf(this.EdCodeAccumGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeStudCaseIdSource != null && existingCopies.Contains(this.EdCodeStudCaseIdSource))
				copy.EdCodeStudCaseIdSource = existingCopies[this.EdCodeStudCaseIdSource] as EdCodeStudCase;
			else
				copy.EdCodeStudCaseIdSource = MakeCopyOf(this.EdCodeStudCaseIdSource, existingCopies) as EdCodeStudCase;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EntMajorPhaseIdSource != null && existingCopies.Contains(this.EntMajorPhaseIdSource))
				copy.EntMajorPhaseIdSource = existingCopies[this.EntMajorPhaseIdSource] as EntMajorPhase;
			else
				copy.EntMajorPhaseIdSource = MakeCopyOf(this.EntMajorPhaseIdSource, existingCopies) as EntMajorPhase;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudSemesterExt Entity 
		///</summary>
		public virtual EdStudSemesterExt Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudSemesterExt Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudSemesterExt DeepCopy()
		{
			return EntityHelper.Clone<EdStudSemesterExt>(this as EdStudSemesterExt);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudSemesterExtEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudSemesterExtEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudSemesterExtEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudSemesterExtColumn column)
		{
			switch(column)
			{
					case EdStudSemesterExtColumn.EdStudSemesterExtId:
					return entityData.EdStudSemesterExtId != _originalData.EdStudSemesterExtId;
					case EdStudSemesterExtColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudSemesterExtColumn.EdCodeStudCaseId:
					return entityData.EdCodeStudCaseId != _originalData.EdCodeStudCaseId;
					case EdStudSemesterExtColumn.EntMajorPhaseId:
					return entityData.EntMajorPhaseId != _originalData.EntMajorPhaseId;
					case EdStudSemesterExtColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EdStudSemesterExtColumn.EdCodeAccumGradingId:
					return entityData.EdCodeAccumGradingId != _originalData.EdCodeAccumGradingId;
					case EdStudSemesterExtColumn.SemMark:
					return entityData.SemMark != _originalData.SemMark;
					case EdStudSemesterExtColumn.AccumMark:
					return entityData.AccumMark != _originalData.AccumMark;
					case EdStudSemesterExtColumn.AccumPercent:
					return entityData.AccumPercent != _originalData.AccumPercent;
					case EdStudSemesterExtColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdStudSemesterExtColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudSemesterExtColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudSemesterExtColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudSemesterExtId != _originalData.EdStudSemesterExtId;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.EdCodeStudCaseId != _originalData.EdCodeStudCaseId;
			result = result || entityData.EntMajorPhaseId != _originalData.EntMajorPhaseId;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.EdCodeAccumGradingId != _originalData.EdCodeAccumGradingId;
			result = result || entityData.SemMark != _originalData.SemMark;
			result = result || entityData.AccumMark != _originalData.AccumMark;
			result = result || entityData.AccumPercent != _originalData.AccumPercent;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudSemesterExt Entity with the original data.
		///</summary>
		public EdStudSemesterExt GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudSemesterExt(
				_originalData.EdStudSemesterExtId,
				_originalData.EdStudSemesterId,
				_originalData.EdCodeStudCaseId,
				_originalData.EntMajorPhaseId,
				_originalData.EdCodeGradingId,
				_originalData.EdCodeAccumGradingId,
				_originalData.SemMark,
				_originalData.AccumMark,
				_originalData.AccumPercent,
				_originalData.SeFormId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EdStudSemesterExt)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudSemesterExtBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudSemesterExtBase)
				return ValueEquals(this, (EdStudSemesterExtBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudSemesterExtBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudSemesterExtId.GetHashCode() ^ 
					this.EdStudSemesterId.GetHashCode() ^ 
					((this.EdCodeStudCaseId == null) ? string.Empty : this.EdCodeStudCaseId.ToString()).GetHashCode() ^ 
					((this.EntMajorPhaseId == null) ? string.Empty : this.EntMajorPhaseId.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.EdCodeAccumGradingId == null) ? string.Empty : this.EdCodeAccumGradingId.ToString()).GetHashCode() ^ 
					((this.SemMark == null) ? string.Empty : this.SemMark.ToString()).GetHashCode() ^ 
					((this.AccumMark == null) ? string.Empty : this.AccumMark.ToString()).GetHashCode() ^ 
					((this.AccumPercent == null) ? string.Empty : this.AccumPercent.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					this.LastDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudSemesterExtBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudSemesterExtBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudSemesterExtBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudSemesterExtBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudSemesterExtBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudSemesterExtBase Object1, EdStudSemesterExtBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudSemesterExtId != Object2.EdStudSemesterExtId)
				equal = false;
			if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
				equal = false;
			if ( Object1.EdCodeStudCaseId != null && Object2.EdCodeStudCaseId != null )
			{
				if (Object1.EdCodeStudCaseId != Object2.EdCodeStudCaseId)
					equal = false;
			}
			else if (Object1.EdCodeStudCaseId == null ^ Object2.EdCodeStudCaseId == null )
			{
				equal = false;
			}
			if ( Object1.EntMajorPhaseId != null && Object2.EntMajorPhaseId != null )
			{
				if (Object1.EntMajorPhaseId != Object2.EntMajorPhaseId)
					equal = false;
			}
			else if (Object1.EntMajorPhaseId == null ^ Object2.EntMajorPhaseId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeAccumGradingId != null && Object2.EdCodeAccumGradingId != null )
			{
				if (Object1.EdCodeAccumGradingId != Object2.EdCodeAccumGradingId)
					equal = false;
			}
			else if (Object1.EdCodeAccumGradingId == null ^ Object2.EdCodeAccumGradingId == null )
			{
				equal = false;
			}
			if ( Object1.SemMark != null && Object2.SemMark != null )
			{
				if (Object1.SemMark != Object2.SemMark)
					equal = false;
			}
			else if (Object1.SemMark == null ^ Object2.SemMark == null )
			{
				equal = false;
			}
			if ( Object1.AccumMark != null && Object2.AccumMark != null )
			{
				if (Object1.AccumMark != Object2.AccumMark)
					equal = false;
			}
			else if (Object1.AccumMark == null ^ Object2.AccumMark == null )
			{
				equal = false;
			}
			if ( Object1.AccumPercent != null && Object2.AccumPercent != null )
			{
				if (Object1.AccumPercent != Object2.AccumPercent)
					equal = false;
			}
			else if (Object1.AccumPercent == null ^ Object2.AccumPercent == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if (Object1.LastDate != Object2.LastDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudSemesterExtBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudSemesterExtComparer GetComparer()
        {
            return new EdStudSemesterExtComparer();
        }
        */

        // Comparer delegates back to EdStudSemesterExt
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudSemesterExt rhs, EdStudSemesterExtColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudSemesterExtColumn.EdStudSemesterExtId:
            		return this.EdStudSemesterExtId.CompareTo(rhs.EdStudSemesterExtId);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.CompareTo(rhs.EdStudSemesterId);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.EdCodeStudCaseId:
            		return this.EdCodeStudCaseId.Value.CompareTo(rhs.EdCodeStudCaseId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.EntMajorPhaseId:
            		return this.EntMajorPhaseId.Value.CompareTo(rhs.EntMajorPhaseId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.EdCodeAccumGradingId:
            		return this.EdCodeAccumGradingId.Value.CompareTo(rhs.EdCodeAccumGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.SemMark:
            		return this.SemMark.Value.CompareTo(rhs.SemMark.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.AccumMark:
            		return this.AccumMark.Value.CompareTo(rhs.AccumMark.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.AccumPercent:
            		return this.AccumPercent.Value.CompareTo(rhs.AccumPercent.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterExtColumn.LastDate:
            		return this.LastDate.CompareTo(rhs.LastDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudSemesterExtKey> Members
		
		// member variable for the EntityId property
		private EdStudSemesterExtKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudSemesterExtKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudSemesterExtKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudSemesterExt")
					.Append("|").Append( this.EdStudSemesterExtId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- EdStudSemesterExtId: {0}{12}- EdStudSemesterId: {1}{12}- EdCodeStudCaseId: {2}{12}- EntMajorPhaseId: {3}{12}- EdCodeGradingId: {4}{12}- EdCodeAccumGradingId: {5}{12}- SemMark: {6}{12}- AccumMark: {7}{12}- AccumPercent: {8}{12}- SeFormId: {9}{12}- SeUserId: {10}{12}- LastDate: {11}{12}{14}", 
				this.EdStudSemesterExtId,
				this.EdStudSemesterId,
				(this.EdCodeStudCaseId == null) ? string.Empty : this.EdCodeStudCaseId.ToString(),
				(this.EntMajorPhaseId == null) ? string.Empty : this.EntMajorPhaseId.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				(this.EdCodeAccumGradingId == null) ? string.Empty : this.EdCodeAccumGradingId.ToString(),
				(this.SemMark == null) ? string.Empty : this.SemMark.ToString(),
				(this.AccumMark == null) ? string.Empty : this.AccumMark.ToString(),
				(this.AccumPercent == null) ? string.Empty : this.AccumPercent.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				this.LastDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_SEMESTER_EXT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudSemesterExtEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_SEMESTER_EXT_ID : بيانات اضافية للسجل الدراسي
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_SEMESTER_EXT"</remarks>
		public System.Decimal EdStudSemesterExtId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudSemesterExtId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdStudSemesterId = 0.0m;
		
		/// <summary>
		/// ED_CODE_STUD_CASE_ID : مستجد- باقى للاعادة
		/// </summary>
		public System.Decimal?		  EdCodeStudCaseId = null;
		
		/// <summary>
		/// ENT_MAJOR_PHASE_ID : المراحل الدارسية
		/// </summary>
		public System.Decimal?		  EntMajorPhaseId = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : تقدير الفصل
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// ED_CODE_ACCUM_GRADING_ID : تقدير التراكمى
		/// 		/// تقدير للفرقة الدراسية (الفصل الأول + الفصل الثاني)
		/// </summary>
		public System.Decimal?		  EdCodeAccumGradingId = null;
		
		/// <summary>
		/// SEM_MARK : مجموع الدرجات الفصلى
		/// </summary>
		public System.Decimal?		  SemMark = null;
		
		/// <summary>
		/// ACCUM_MARK : مجموع الدرجات التراكمى
		/// </summary>
		public System.Decimal?		  AccumMark = null;
		
		/// <summary>
		/// ACCUM_PERCENT : نسبة التراكمى
		/// </summary>
		public System.Decimal?		  AccumPercent = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime		  LastDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdCodeGrading _edCodeAccumGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeAccumGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeAccumGradingIdSource
      	{
            get { return this._edCodeAccumGradingIdSource; }
            set { this._edCodeAccumGradingIdSource = value; }
      	}
		private EdCodeStudCase _edCodeStudCaseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudCase"/>.
		/// </summary>
		/// <value>The source EdCodeStudCase for EdCodeStudCaseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeStudCase EdCodeStudCaseIdSource
      	{
            get { return this._edCodeStudCaseIdSource; }
            set { this._edCodeStudCaseIdSource = value; }
      	}
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		private EntMajorPhase _entMajorPhaseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntMajorPhase"/>.
		/// </summary>
		/// <value>The source EntMajorPhase for EntMajorPhaseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntMajorPhase EntMajorPhaseIdSource
      	{
            get { return this._entMajorPhaseIdSource; }
            set { this._entMajorPhaseIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudSemesterExtEntityData _tmp = new EdStudSemesterExtEntityData();
						
			_tmp.EdStudSemesterExtId = this.EdStudSemesterExtId;
			_tmp.OriginalEdStudSemesterExtId = this.OriginalEdStudSemesterExtId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.EdCodeStudCaseId = this.EdCodeStudCaseId;
			_tmp.EntMajorPhaseId = this.EntMajorPhaseId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.EdCodeAccumGradingId = this.EdCodeAccumGradingId;
			_tmp.SemMark = this.SemMark;
			_tmp.AccumMark = this.AccumMark;
			_tmp.AccumPercent = this.AccumPercent;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdCodeAccumGradingIdSource != null)
				_tmp.EdCodeAccumGradingIdSource = MakeCopyOf(this.EdCodeAccumGradingIdSource) as EdCodeGrading;
			if (this.EdCodeStudCaseIdSource != null)
				_tmp.EdCodeStudCaseIdSource = MakeCopyOf(this.EdCodeStudCaseIdSource) as EdCodeStudCase;
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			if (this.EntMajorPhaseIdSource != null)
				_tmp.EntMajorPhaseIdSource = MakeCopyOf(this.EntMajorPhaseIdSource) as EntMajorPhase;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudSemesterExtEntityData _tmp = new EdStudSemesterExtEntityData();
						
			_tmp.EdStudSemesterExtId = this.EdStudSemesterExtId;
			_tmp.OriginalEdStudSemesterExtId = this.OriginalEdStudSemesterExtId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.EdCodeStudCaseId = this.EdCodeStudCaseId;
			_tmp.EntMajorPhaseId = this.EntMajorPhaseId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.EdCodeAccumGradingId = this.EdCodeAccumGradingId;
			_tmp.SemMark = this.SemMark;
			_tmp.AccumMark = this.AccumMark;
			_tmp.AccumPercent = this.AccumPercent;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeAccumGradingIdSource != null && existingCopies.Contains(this.EdCodeAccumGradingIdSource))
				_tmp.EdCodeAccumGradingIdSource = existingCopies[this.EdCodeAccumGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeAccumGradingIdSource = MakeCopyOf(this.EdCodeAccumGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeStudCaseIdSource != null && existingCopies.Contains(this.EdCodeStudCaseIdSource))
				_tmp.EdCodeStudCaseIdSource = existingCopies[this.EdCodeStudCaseIdSource] as EdCodeStudCase;
			else
				_tmp.EdCodeStudCaseIdSource = MakeCopyOf(this.EdCodeStudCaseIdSource, existingCopies) as EdCodeStudCase;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EntMajorPhaseIdSource != null && existingCopies.Contains(this.EntMajorPhaseIdSource))
				_tmp.EntMajorPhaseIdSource = existingCopies[this.EntMajorPhaseIdSource] as EntMajorPhase;
			else
				_tmp.EntMajorPhaseIdSource = MakeCopyOf(this.EntMajorPhaseIdSource, existingCopies) as EntMajorPhase;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterExtColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudSemesterExtColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterExtColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudSemesterExtColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterExtColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudSemesterExtColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudSemesterExtEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudSemesterExtEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterExtColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudSemesterExtColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudSemesterExtEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudSemesterExtEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudSemesterExtEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudSemesterExt"/> object.
	/// </remarks>
	public class EdStudSemesterExtEventArgs : System.EventArgs
	{
		private EdStudSemesterExtColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudSemesterExtEventArgs class.
		///</summary>
		public EdStudSemesterExtEventArgs(EdStudSemesterExtColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudSemesterExtEventArgs class.
		///</summary>
		public EdStudSemesterExtEventArgs(EdStudSemesterExtColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudSemesterExtColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudSemesterExtColumn" />
		public EdStudSemesterExtColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudSemesterExt related events.
	///</summary>
	public delegate void EdStudSemesterExtEventHandler(object sender, EdStudSemesterExtEventArgs e);
	
	#region EdStudSemesterExtComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudSemesterExtComparer : System.Collections.Generic.IComparer<EdStudSemesterExt>
	{
		EdStudSemesterExtColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudSemesterExtComparer"/> class.
        /// </summary>
		public EdStudSemesterExtComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudSemesterExtComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudSemesterExtComparer(EdStudSemesterExtColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudSemesterExt"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudSemesterExt"/> to compare.</param>
        /// <param name="b">The second <c>EdStudSemesterExt</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudSemesterExt a, EdStudSemesterExt b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudSemesterExt entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudSemesterExt a, EdStudSemesterExt b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudSemesterExtColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudSemesterExtKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudSemesterExt"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudSemesterExtKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtKey class.
		/// </summary>
		public EdStudSemesterExtKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtKey class.
		/// </summary>
		public EdStudSemesterExtKey(EdStudSemesterExtBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudSemesterExtId = entity.EdStudSemesterExtId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterExtKey class.
		/// </summary>
		public EdStudSemesterExtKey(System.Decimal _edStudSemesterExtId)
		{
			#region Init Properties

			this.EdStudSemesterExtId = _edStudSemesterExtId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudSemesterExtBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudSemesterExtBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudSemesterExtId property
		private System.Decimal _edStudSemesterExtId;
		
		/// <summary>
		/// Gets or sets the EdStudSemesterExtId property.
		/// </summary>
		public System.Decimal EdStudSemesterExtId
		{
			get { return _edStudSemesterExtId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudSemesterExtId = value;
				
				_edStudSemesterExtId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudSemesterExtId = ( values["EdStudSemesterExtId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudSemesterExtId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudSemesterExtId", EdStudSemesterExtId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudSemesterExtId: {0}{1}",
								EdStudSemesterExtId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudSemesterExtColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudSemesterExt columns.
	/// </summary>
	[Serializable]
	public enum EdStudSemesterExtColumn : int
	{
		/// <summary>
		/// EdStudSemesterExtId : بيانات اضافية للسجل الدراسي
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_EXT_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_EXT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudSemesterExtId = 1,
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudSemesterId = 2,
		/// <summary>
		/// EdCodeStudCaseId : مستجد- باقى للاعادة
		/// </summary>
		[EnumTextValue("ED_CODE_STUD_CASE_ID")]
		[ColumnEnum("ED_CODE_STUD_CASE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeStudCaseId = 3,
		/// <summary>
		/// EntMajorPhaseId : المراحل الدارسية
		/// </summary>
		[EnumTextValue("ENT_MAJOR_PHASE_ID")]
		[ColumnEnum("ENT_MAJOR_PHASE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMajorPhaseId = 4,
		/// <summary>
		/// EdCodeGradingId : تقدير الفصل
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 5,
		/// <summary>
		/// EdCodeAccumGradingId : تقدير التراكمى
		/// 		/// تقدير للفرقة الدراسية (الفصل الأول + الفصل الثاني)
		/// </summary>
		[EnumTextValue("ED_CODE_ACCUM_GRADING_ID")]
		[ColumnEnum("ED_CODE_ACCUM_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeAccumGradingId = 6,
		/// <summary>
		/// SemMark : مجموع الدرجات الفصلى
		/// </summary>
		[EnumTextValue("SEM_MARK")]
		[ColumnEnum("SEM_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemMark = 7,
		/// <summary>
		/// AccumMark : مجموع الدرجات التراكمى
		/// </summary>
		[EnumTextValue("ACCUM_MARK")]
		[ColumnEnum("ACCUM_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumMark = 8,
		/// <summary>
		/// AccumPercent : نسبة التراكمى
		/// </summary>
		[EnumTextValue("ACCUM_PERCENT")]
		[ColumnEnum("ACCUM_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumPercent = 9,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 10,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastDate = 12
	}//End enum

	#endregion EdStudSemesterExtColumn Enum

} // end namespace
