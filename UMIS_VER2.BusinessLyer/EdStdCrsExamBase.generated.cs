
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStdCrsExam.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STD_CRS_EXAM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStdCrsExamBase : EntityBase, IEdStdCrsExam, IEntityId<EdStdCrsExamKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStdCrsExamEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStdCrsExamEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStdCrsExamEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStdCrsExam> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStdCrsExamEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStdCrsExamEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStdCrsExamBase"/> instance.
		///</summary>
		public EdStdCrsExamBase()
		{
			this.entityData = new EdStdCrsExamEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStdCrsExamBase"/> instance.
		///</summary>
		///<param name="_edStdCrsExamId">درجات اعادة امتحان امتحان طالب</param>
		///<param name="_edStudCourseRegId">مسلسل تسجيل طالب مقرر</param>
		///<param name="_edCdeExamTypeId">نوع اعادة الامتحان</param>
		///<param name="_examDate">تاريخ الامتجان</param>
		///<param name="_crsMarkOld">الدرجة السابقة</param>
		///<param name="_edCodeCourseStatusOldId"></param>
		///<param name="_edCodeGradingOldId">التقدير السابق</param>
		///<param name="_gsCodePassFailOldId">مؤشر النجاح</param>
		///<param name="_clemencyMark">درجة الرافة</param>
		///<param name="_raiseMark">Increase Markدرجة الرفع</param>
		///<param name="_crsMarkNew">الدرجة الجديدة</param>
		///<param name="_crsPoint">نقاط الطالب فى المادة</param>
		///<param name="_edCodeCourseStatusNewId"></param>
		///<param name="_edCodeGradingNewId">التقدير الجديد</param>
		///<param name="_gsCodePassFailNewId">مؤشر النجاح</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_absFlg">مؤشر غياب فى امتحان</param>
		///<param name="_celemApplyFlg">تطبيق قواعد الرافة</param>
		public EdStdCrsExamBase(System.Decimal _edStdCrsExamId, System.Decimal _edStudCourseRegId, 
			System.Decimal _edCdeExamTypeId, System.DateTime? _examDate, System.Decimal? _crsMarkOld, 
			System.Decimal? _edCodeCourseStatusOldId, System.Decimal? _edCodeGradingOldId, System.Decimal? _gsCodePassFailOldId, 
			System.Decimal? _clemencyMark, System.Decimal? _raiseMark, System.Decimal? _crsMarkNew, 
			System.Decimal? _crsPoint, System.Decimal? _edCodeCourseStatusNewId, System.Decimal? _edCodeGradingNewId, 
			System.Decimal? _gsCodePassFailNewId, System.Decimal? _approveFlg, System.Decimal? _absFlg, 
			System.Decimal? _celemApplyFlg)
		{
			this.entityData = new EdStdCrsExamEntityData();
			this.backupData = null;

			this.EdStdCrsExamId = _edStdCrsExamId;
			this.EdStudCourseRegId = _edStudCourseRegId;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
			this.ExamDate = _examDate;
			this.CrsMarkOld = _crsMarkOld;
			this.EdCodeCourseStatusOldId = _edCodeCourseStatusOldId;
			this.EdCodeGradingOldId = _edCodeGradingOldId;
			this.GsCodePassFailOldId = _gsCodePassFailOldId;
			this.ClemencyMark = _clemencyMark;
			this.RaiseMark = _raiseMark;
			this.CrsMarkNew = _crsMarkNew;
			this.CrsPoint = _crsPoint;
			this.EdCodeCourseStatusNewId = _edCodeCourseStatusNewId;
			this.EdCodeGradingNewId = _edCodeGradingNewId;
			this.GsCodePassFailNewId = _gsCodePassFailNewId;
			this.ApproveFlg = _approveFlg;
			this.AbsFlg = _absFlg;
			this.CelemApplyFlg = _celemApplyFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStdCrsExam"/> instance.
		///</summary>
		///<param name="_edStdCrsExamId">درجات اعادة امتحان امتحان طالب</param>
		///<param name="_edStudCourseRegId">مسلسل تسجيل طالب مقرر</param>
		///<param name="_edCdeExamTypeId">نوع اعادة الامتحان</param>
		///<param name="_examDate">تاريخ الامتجان</param>
		///<param name="_crsMarkOld">الدرجة السابقة</param>
		///<param name="_edCodeCourseStatusOldId"></param>
		///<param name="_edCodeGradingOldId">التقدير السابق</param>
		///<param name="_gsCodePassFailOldId">مؤشر النجاح</param>
		///<param name="_clemencyMark">درجة الرافة</param>
		///<param name="_raiseMark">Increase Markدرجة الرفع</param>
		///<param name="_crsMarkNew">الدرجة الجديدة</param>
		///<param name="_crsPoint">نقاط الطالب فى المادة</param>
		///<param name="_edCodeCourseStatusNewId"></param>
		///<param name="_edCodeGradingNewId">التقدير الجديد</param>
		///<param name="_gsCodePassFailNewId">مؤشر النجاح</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_absFlg">مؤشر غياب فى امتحان</param>
		///<param name="_celemApplyFlg">تطبيق قواعد الرافة</param>
		public static EdStdCrsExam CreateEdStdCrsExam(System.Decimal _edStdCrsExamId, System.Decimal _edStudCourseRegId, 
			System.Decimal _edCdeExamTypeId, System.DateTime? _examDate, System.Decimal? _crsMarkOld, 
			System.Decimal? _edCodeCourseStatusOldId, System.Decimal? _edCodeGradingOldId, System.Decimal? _gsCodePassFailOldId, 
			System.Decimal? _clemencyMark, System.Decimal? _raiseMark, System.Decimal? _crsMarkNew, 
			System.Decimal? _crsPoint, System.Decimal? _edCodeCourseStatusNewId, System.Decimal? _edCodeGradingNewId, 
			System.Decimal? _gsCodePassFailNewId, System.Decimal? _approveFlg, System.Decimal? _absFlg, 
			System.Decimal? _celemApplyFlg)
		{
			EdStdCrsExam newEdStdCrsExam = new EdStdCrsExam();
			newEdStdCrsExam.EdStdCrsExamId = _edStdCrsExamId;
			newEdStdCrsExam.EdStudCourseRegId = _edStudCourseRegId;
			newEdStdCrsExam.EdCdeExamTypeId = _edCdeExamTypeId;
			newEdStdCrsExam.ExamDate = _examDate;
			newEdStdCrsExam.CrsMarkOld = _crsMarkOld;
			newEdStdCrsExam.EdCodeCourseStatusOldId = _edCodeCourseStatusOldId;
			newEdStdCrsExam.EdCodeGradingOldId = _edCodeGradingOldId;
			newEdStdCrsExam.GsCodePassFailOldId = _gsCodePassFailOldId;
			newEdStdCrsExam.ClemencyMark = _clemencyMark;
			newEdStdCrsExam.RaiseMark = _raiseMark;
			newEdStdCrsExam.CrsMarkNew = _crsMarkNew;
			newEdStdCrsExam.CrsPoint = _crsPoint;
			newEdStdCrsExam.EdCodeCourseStatusNewId = _edCodeCourseStatusNewId;
			newEdStdCrsExam.EdCodeGradingNewId = _edCodeGradingNewId;
			newEdStdCrsExam.GsCodePassFailNewId = _gsCodePassFailNewId;
			newEdStdCrsExam.ApproveFlg = _approveFlg;
			newEdStdCrsExam.AbsFlg = _absFlg;
			newEdStdCrsExam.CelemApplyFlg = _celemApplyFlg;
			return newEdStdCrsExam;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStdCrsExamId property. 
		///		درجات اعادة امتحان امتحان طالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"درجات اعادة امتحان امتحان طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStdCrsExamId
		{
			get
			{
				return this.entityData.EdStdCrsExamId; 
			}
			
			set
			{
				if (this.entityData.EdStdCrsExamId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.EdStdCrsExamId, this.entityData.EdStdCrsExamId);
				this.entityData.EdStdCrsExamId = value;
				this.EntityId.EdStdCrsExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.EdStdCrsExamId, this.entityData.EdStdCrsExamId);
				OnPropertyChanged("EdStdCrsExamId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STD_CRS_EXAM_ID property.
		///		درجات اعادة امتحان امتحان طالب
		/// </summary>
		/// <remarks>This is the original value of the ED_STD_CRS_EXAM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStdCrsExamId
		{
			get { return this.entityData.OriginalEdStdCrsExamId; }
			set { this.entityData.OriginalEdStdCrsExamId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegId property. 
		///		مسلسل تسجيل طالب مقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل تسجيل طالب مقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudCourseRegId
		{
			get
			{
				return this.entityData.EdStudCourseRegId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				this.entityData.EdStudCourseRegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				OnPropertyChanged("EdStudCourseRegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		نوع اعادة الامتحان
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع اعادة الامتحان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamDate property. 
		///		تاريخ الامتجان
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExamDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الامتجان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExamDate
		{
			get
			{
				return this.entityData.ExamDate; 
			}
			
			set
			{
				if (this.entityData.ExamDate == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.ExamDate, this.entityData.ExamDate);
				this.entityData.ExamDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.ExamDate, this.entityData.ExamDate);
				OnPropertyChanged("ExamDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsMarkOld property. 
		///		الدرجة السابقة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsMarkOldNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الدرجة السابقة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsMarkOld
		{
			get
			{
				return this.entityData.CrsMarkOld; 
			}
			
			set
			{
				if (this.entityData.CrsMarkOld == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.CrsMarkOld, this.entityData.CrsMarkOld);
				this.entityData.CrsMarkOld = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.CrsMarkOld, this.entityData.CrsMarkOld);
				OnPropertyChanged("CrsMarkOld");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseStatusOldId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseStatusOldIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseStatusOldId
		{
			get
			{
				return this.entityData.EdCodeCourseStatusOldId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseStatusOldId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.EdCodeCourseStatusOldId, this.entityData.EdCodeCourseStatusOldId);
				this.entityData.EdCodeCourseStatusOldId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.EdCodeCourseStatusOldId, this.entityData.EdCodeCourseStatusOldId);
				OnPropertyChanged("EdCodeCourseStatusOldId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingOldId property. 
		///		التقدير السابق
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingOldIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"التقدير السابق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingOldId
		{
			get
			{
				return this.entityData.EdCodeGradingOldId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingOldId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.EdCodeGradingOldId, this.entityData.EdCodeGradingOldId);
				this.entityData.EdCodeGradingOldId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.EdCodeGradingOldId, this.entityData.EdCodeGradingOldId);
				OnPropertyChanged("EdCodeGradingOldId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailOldId property. 
		///		مؤشر النجاح
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePassFailOldIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر النجاح"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePassFailOldId
		{
			get
			{
				return this.entityData.GsCodePassFailOldId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailOldId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.GsCodePassFailOldId, this.entityData.GsCodePassFailOldId);
				this.entityData.GsCodePassFailOldId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.GsCodePassFailOldId, this.entityData.GsCodePassFailOldId);
				OnPropertyChanged("GsCodePassFailOldId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClemencyMark property. 
		///		درجة الرافة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsClemencyMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجة الرافة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ClemencyMark
		{
			get
			{
				return this.entityData.ClemencyMark; 
			}
			
			set
			{
				if (this.entityData.ClemencyMark == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.ClemencyMark, this.entityData.ClemencyMark);
				this.entityData.ClemencyMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.ClemencyMark, this.entityData.ClemencyMark);
				OnPropertyChanged("ClemencyMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RaiseMark property. 
		///		Increase Markدرجة الرفع
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRaiseMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Increase Markدرجة الرفع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RaiseMark
		{
			get
			{
				return this.entityData.RaiseMark; 
			}
			
			set
			{
				if (this.entityData.RaiseMark == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.RaiseMark, this.entityData.RaiseMark);
				this.entityData.RaiseMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.RaiseMark, this.entityData.RaiseMark);
				OnPropertyChanged("RaiseMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsMarkNew property. 
		///		الدرجة الجديدة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsMarkNewNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الدرجة الجديدة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsMarkNew
		{
			get
			{
				return this.entityData.CrsMarkNew; 
			}
			
			set
			{
				if (this.entityData.CrsMarkNew == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.CrsMarkNew, this.entityData.CrsMarkNew);
				this.entityData.CrsMarkNew = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.CrsMarkNew, this.entityData.CrsMarkNew);
				OnPropertyChanged("CrsMarkNew");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsPoint property. 
		///		نقاط الطالب فى المادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsPointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نقاط الطالب فى المادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsPoint
		{
			get
			{
				return this.entityData.CrsPoint; 
			}
			
			set
			{
				if (this.entityData.CrsPoint == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.CrsPoint, this.entityData.CrsPoint);
				this.entityData.CrsPoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.CrsPoint, this.entityData.CrsPoint);
				OnPropertyChanged("CrsPoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseStatusNewId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseStatusNewIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseStatusNewId
		{
			get
			{
				return this.entityData.EdCodeCourseStatusNewId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseStatusNewId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.EdCodeCourseStatusNewId, this.entityData.EdCodeCourseStatusNewId);
				this.entityData.EdCodeCourseStatusNewId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.EdCodeCourseStatusNewId, this.entityData.EdCodeCourseStatusNewId);
				OnPropertyChanged("EdCodeCourseStatusNewId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingNewId property. 
		///		التقدير الجديد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingNewIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"التقدير الجديد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingNewId
		{
			get
			{
				return this.entityData.EdCodeGradingNewId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingNewId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.EdCodeGradingNewId, this.entityData.EdCodeGradingNewId);
				this.entityData.EdCodeGradingNewId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.EdCodeGradingNewId, this.entityData.EdCodeGradingNewId);
				OnPropertyChanged("EdCodeGradingNewId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailNewId property. 
		///		مؤشر النجاح
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePassFailNewIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر النجاح"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePassFailNewId
		{
			get
			{
				return this.entityData.GsCodePassFailNewId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailNewId == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.GsCodePassFailNewId, this.entityData.GsCodePassFailNewId);
				this.entityData.GsCodePassFailNewId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.GsCodePassFailNewId, this.entityData.GsCodePassFailNewId);
				OnPropertyChanged("GsCodePassFailNewId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		مؤشر اعتماد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsFlg property. 
		///		مؤشر غياب فى امتحان
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAbsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر غياب فى امتحان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AbsFlg
		{
			get
			{
				return this.entityData.AbsFlg; 
			}
			
			set
			{
				if (this.entityData.AbsFlg == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.AbsFlg, this.entityData.AbsFlg);
				this.entityData.AbsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.AbsFlg, this.entityData.AbsFlg);
				OnPropertyChanged("AbsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CelemApplyFlg property. 
		///		تطبيق قواعد الرافة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCelemApplyFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تطبيق قواعد الرافة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CelemApplyFlg
		{
			get
			{
				return this.entityData.CelemApplyFlg; 
			}
			
			set
			{
				if (this.entityData.CelemApplyFlg == value)
					return;
					
				OnColumnChanging(EdStdCrsExamColumn.CelemApplyFlg, this.entityData.CelemApplyFlg);
				this.entityData.CelemApplyFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdCrsExamColumn.CelemApplyFlg, this.entityData.CelemApplyFlg);
				OnPropertyChanged("CelemApplyFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusOldId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusOldIdSource
      	{
            get { return entityData.EdCodeCourseStatusOldIdSource; }
            set { entityData.EdCodeCourseStatusOldIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusNewId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusNewIdSource
      	{
            get { return entityData.EdCodeCourseStatusNewIdSource; }
            set { entityData.EdCodeCourseStatusNewIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingOldId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingOldIdSource
      	{
            get { return entityData.EdCodeGradingOldIdSource; }
            set { entityData.EdCodeGradingOldIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingNewId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingNewIdSource
      	{
            get { return entityData.EdCodeGradingNewIdSource; }
            set { entityData.EdCodeGradingNewIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailOldId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailOldIdSource
      	{
            get { return entityData.GsCodePassFailOldIdSource; }
            set { entityData.GsCodePassFailOldIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailNewId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailNewIdSource
      	{
            get { return entityData.GsCodePassFailNewIdSource; }
            set { entityData.GsCodePassFailNewIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return entityData.EdStudCourseRegIdSource; }
            set { entityData.EdStudCourseRegIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStdCrsExamAssess objects
		///	which are related to this object through the relation FK_ED_STD_CRS_EXAM_ASSESS_ED_STD_CRS_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStdCrsExamAssess> EdStdCrsExamAssessCollection
		{
			get { return entityData.EdStdCrsExamAssessCollection; }
			set { entityData.EdStdCrsExamAssessCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STD_CRS_EXAM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STD_CRS_EXAM_ID", "ED_STUD_COURSE_REG_ID", "ED_CDE_EXAM_TYPE_ID", "EXAM_DATE", "CRS_MARK_OLD", "ED_CODE_COURSE_STATUS_OLD_ID", "ED_CODE_GRADING_OLD_ID", "GS_CODE_PASS_FAIL_OLD_ID", "CLEMENCY_MARK", "RAISE_MARK", "CRS_MARK_NEW", "CRS_POINT", "ED_CODE_COURSE_STATUS_NEW_ID", "ED_CODE_GRADING_NEW_ID", "GS_CODE_PASS_FAIL_NEW_ID", "APPROVE_FLG", "ABS_FLG", "CELEM_APPLY_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStdCrsExamEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStdCrsExam) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStdCrsExam>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStdCrsExam);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStdCrsExam Entity 
		///</summary>
		protected virtual EdStdCrsExam Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStdCrsExam copy = new EdStdCrsExam();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStdCrsExamId = this.EdStdCrsExamId;
					copy.OriginalEdStdCrsExamId = this.OriginalEdStdCrsExamId;
				copy.EdStudCourseRegId = this.EdStudCourseRegId;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
				copy.ExamDate = this.ExamDate;
				copy.CrsMarkOld = this.CrsMarkOld;
				copy.EdCodeCourseStatusOldId = this.EdCodeCourseStatusOldId;
				copy.EdCodeGradingOldId = this.EdCodeGradingOldId;
				copy.GsCodePassFailOldId = this.GsCodePassFailOldId;
				copy.ClemencyMark = this.ClemencyMark;
				copy.RaiseMark = this.RaiseMark;
				copy.CrsMarkNew = this.CrsMarkNew;
				copy.CrsPoint = this.CrsPoint;
				copy.EdCodeCourseStatusNewId = this.EdCodeCourseStatusNewId;
				copy.EdCodeGradingNewId = this.EdCodeGradingNewId;
				copy.GsCodePassFailNewId = this.GsCodePassFailNewId;
				copy.ApproveFlg = this.ApproveFlg;
				copy.AbsFlg = this.AbsFlg;
				copy.CelemApplyFlg = this.CelemApplyFlg;
			
			if (this.EdCodeCourseStatusOldIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusOldIdSource))
				copy.EdCodeCourseStatusOldIdSource = existingCopies[this.EdCodeCourseStatusOldIdSource] as EdCodeCourseStatus;
			else
				copy.EdCodeCourseStatusOldIdSource = MakeCopyOf(this.EdCodeCourseStatusOldIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeCourseStatusNewIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusNewIdSource))
				copy.EdCodeCourseStatusNewIdSource = existingCopies[this.EdCodeCourseStatusNewIdSource] as EdCodeCourseStatus;
			else
				copy.EdCodeCourseStatusNewIdSource = MakeCopyOf(this.EdCodeCourseStatusNewIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingOldIdSource != null && existingCopies.Contains(this.EdCodeGradingOldIdSource))
				copy.EdCodeGradingOldIdSource = existingCopies[this.EdCodeGradingOldIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingOldIdSource = MakeCopyOf(this.EdCodeGradingOldIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeGradingNewIdSource != null && existingCopies.Contains(this.EdCodeGradingNewIdSource))
				copy.EdCodeGradingNewIdSource = existingCopies[this.EdCodeGradingNewIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingNewIdSource = MakeCopyOf(this.EdCodeGradingNewIdSource, existingCopies) as EdCodeGrading;
			if (this.GsCodePassFailOldIdSource != null && existingCopies.Contains(this.GsCodePassFailOldIdSource))
				copy.GsCodePassFailOldIdSource = existingCopies[this.GsCodePassFailOldIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailOldIdSource = MakeCopyOf(this.GsCodePassFailOldIdSource, existingCopies) as GsCodePassFail;
			if (this.GsCodePassFailNewIdSource != null && existingCopies.Contains(this.GsCodePassFailNewIdSource))
				copy.GsCodePassFailNewIdSource = existingCopies[this.GsCodePassFailNewIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailNewIdSource = MakeCopyOf(this.GsCodePassFailNewIdSource, existingCopies) as GsCodePassFail;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				copy.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				copy.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
		
			//deep copy nested objects
			copy.EdStdCrsExamAssessCollection = (TList<EdStdCrsExamAssess>) MakeCopyOf(this.EdStdCrsExamAssessCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStdCrsExam Entity 
		///</summary>
		public virtual EdStdCrsExam Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStdCrsExam Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStdCrsExam DeepCopy()
		{
			return EntityHelper.Clone<EdStdCrsExam>(this as EdStdCrsExam);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStdCrsExamEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStdCrsExamEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStdCrsExamEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStdCrsExamColumn column)
		{
			switch(column)
			{
					case EdStdCrsExamColumn.EdStdCrsExamId:
					return entityData.EdStdCrsExamId != _originalData.EdStdCrsExamId;
					case EdStdCrsExamColumn.EdStudCourseRegId:
					return entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
					case EdStdCrsExamColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
					case EdStdCrsExamColumn.ExamDate:
					return entityData.ExamDate != _originalData.ExamDate;
					case EdStdCrsExamColumn.CrsMarkOld:
					return entityData.CrsMarkOld != _originalData.CrsMarkOld;
					case EdStdCrsExamColumn.EdCodeCourseStatusOldId:
					return entityData.EdCodeCourseStatusOldId != _originalData.EdCodeCourseStatusOldId;
					case EdStdCrsExamColumn.EdCodeGradingOldId:
					return entityData.EdCodeGradingOldId != _originalData.EdCodeGradingOldId;
					case EdStdCrsExamColumn.GsCodePassFailOldId:
					return entityData.GsCodePassFailOldId != _originalData.GsCodePassFailOldId;
					case EdStdCrsExamColumn.ClemencyMark:
					return entityData.ClemencyMark != _originalData.ClemencyMark;
					case EdStdCrsExamColumn.RaiseMark:
					return entityData.RaiseMark != _originalData.RaiseMark;
					case EdStdCrsExamColumn.CrsMarkNew:
					return entityData.CrsMarkNew != _originalData.CrsMarkNew;
					case EdStdCrsExamColumn.CrsPoint:
					return entityData.CrsPoint != _originalData.CrsPoint;
					case EdStdCrsExamColumn.EdCodeCourseStatusNewId:
					return entityData.EdCodeCourseStatusNewId != _originalData.EdCodeCourseStatusNewId;
					case EdStdCrsExamColumn.EdCodeGradingNewId:
					return entityData.EdCodeGradingNewId != _originalData.EdCodeGradingNewId;
					case EdStdCrsExamColumn.GsCodePassFailNewId:
					return entityData.GsCodePassFailNewId != _originalData.GsCodePassFailNewId;
					case EdStdCrsExamColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case EdStdCrsExamColumn.AbsFlg:
					return entityData.AbsFlg != _originalData.AbsFlg;
					case EdStdCrsExamColumn.CelemApplyFlg:
					return entityData.CelemApplyFlg != _originalData.CelemApplyFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStdCrsExamColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStdCrsExamId != _originalData.EdStdCrsExamId;
			result = result || entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			result = result || entityData.ExamDate != _originalData.ExamDate;
			result = result || entityData.CrsMarkOld != _originalData.CrsMarkOld;
			result = result || entityData.EdCodeCourseStatusOldId != _originalData.EdCodeCourseStatusOldId;
			result = result || entityData.EdCodeGradingOldId != _originalData.EdCodeGradingOldId;
			result = result || entityData.GsCodePassFailOldId != _originalData.GsCodePassFailOldId;
			result = result || entityData.ClemencyMark != _originalData.ClemencyMark;
			result = result || entityData.RaiseMark != _originalData.RaiseMark;
			result = result || entityData.CrsMarkNew != _originalData.CrsMarkNew;
			result = result || entityData.CrsPoint != _originalData.CrsPoint;
			result = result || entityData.EdCodeCourseStatusNewId != _originalData.EdCodeCourseStatusNewId;
			result = result || entityData.EdCodeGradingNewId != _originalData.EdCodeGradingNewId;
			result = result || entityData.GsCodePassFailNewId != _originalData.GsCodePassFailNewId;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.AbsFlg != _originalData.AbsFlg;
			result = result || entityData.CelemApplyFlg != _originalData.CelemApplyFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStdCrsExam Entity with the original data.
		///</summary>
		public EdStdCrsExam GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStdCrsExam(
				_originalData.EdStdCrsExamId,
				_originalData.EdStudCourseRegId,
				_originalData.EdCdeExamTypeId,
				_originalData.ExamDate,
				_originalData.CrsMarkOld,
				_originalData.EdCodeCourseStatusOldId,
				_originalData.EdCodeGradingOldId,
				_originalData.GsCodePassFailOldId,
				_originalData.ClemencyMark,
				_originalData.RaiseMark,
				_originalData.CrsMarkNew,
				_originalData.CrsPoint,
				_originalData.EdCodeCourseStatusNewId,
				_originalData.EdCodeGradingNewId,
				_originalData.GsCodePassFailNewId,
				_originalData.ApproveFlg,
				_originalData.AbsFlg,
				_originalData.CelemApplyFlg
				);
				
			return (EdStdCrsExam)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStdCrsExamBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStdCrsExamBase)
				return ValueEquals(this, (EdStdCrsExamBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStdCrsExamBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStdCrsExamId.GetHashCode() ^ 
					this.EdStudCourseRegId.GetHashCode() ^ 
					this.EdCdeExamTypeId.GetHashCode() ^ 
					((this.ExamDate == null) ? string.Empty : this.ExamDate.ToString()).GetHashCode() ^ 
					((this.CrsMarkOld == null) ? string.Empty : this.CrsMarkOld.ToString()).GetHashCode() ^ 
					((this.EdCodeCourseStatusOldId == null) ? string.Empty : this.EdCodeCourseStatusOldId.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingOldId == null) ? string.Empty : this.EdCodeGradingOldId.ToString()).GetHashCode() ^ 
					((this.GsCodePassFailOldId == null) ? string.Empty : this.GsCodePassFailOldId.ToString()).GetHashCode() ^ 
					((this.ClemencyMark == null) ? string.Empty : this.ClemencyMark.ToString()).GetHashCode() ^ 
					((this.RaiseMark == null) ? string.Empty : this.RaiseMark.ToString()).GetHashCode() ^ 
					((this.CrsMarkNew == null) ? string.Empty : this.CrsMarkNew.ToString()).GetHashCode() ^ 
					((this.CrsPoint == null) ? string.Empty : this.CrsPoint.ToString()).GetHashCode() ^ 
					((this.EdCodeCourseStatusNewId == null) ? string.Empty : this.EdCodeCourseStatusNewId.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingNewId == null) ? string.Empty : this.EdCodeGradingNewId.ToString()).GetHashCode() ^ 
					((this.GsCodePassFailNewId == null) ? string.Empty : this.GsCodePassFailNewId.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString()).GetHashCode() ^ 
					((this.CelemApplyFlg == null) ? string.Empty : this.CelemApplyFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStdCrsExamBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStdCrsExamBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStdCrsExamBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStdCrsExamBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStdCrsExamBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStdCrsExamBase Object1, EdStdCrsExamBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStdCrsExamId != Object2.EdStdCrsExamId)
				equal = false;
			if (Object1.EdStudCourseRegId != Object2.EdStudCourseRegId)
				equal = false;
			if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
				equal = false;
			if ( Object1.ExamDate != null && Object2.ExamDate != null )
			{
				if (Object1.ExamDate != Object2.ExamDate)
					equal = false;
			}
			else if (Object1.ExamDate == null ^ Object2.ExamDate == null )
			{
				equal = false;
			}
			if ( Object1.CrsMarkOld != null && Object2.CrsMarkOld != null )
			{
				if (Object1.CrsMarkOld != Object2.CrsMarkOld)
					equal = false;
			}
			else if (Object1.CrsMarkOld == null ^ Object2.CrsMarkOld == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeCourseStatusOldId != null && Object2.EdCodeCourseStatusOldId != null )
			{
				if (Object1.EdCodeCourseStatusOldId != Object2.EdCodeCourseStatusOldId)
					equal = false;
			}
			else if (Object1.EdCodeCourseStatusOldId == null ^ Object2.EdCodeCourseStatusOldId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingOldId != null && Object2.EdCodeGradingOldId != null )
			{
				if (Object1.EdCodeGradingOldId != Object2.EdCodeGradingOldId)
					equal = false;
			}
			else if (Object1.EdCodeGradingOldId == null ^ Object2.EdCodeGradingOldId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodePassFailOldId != null && Object2.GsCodePassFailOldId != null )
			{
				if (Object1.GsCodePassFailOldId != Object2.GsCodePassFailOldId)
					equal = false;
			}
			else if (Object1.GsCodePassFailOldId == null ^ Object2.GsCodePassFailOldId == null )
			{
				equal = false;
			}
			if ( Object1.ClemencyMark != null && Object2.ClemencyMark != null )
			{
				if (Object1.ClemencyMark != Object2.ClemencyMark)
					equal = false;
			}
			else if (Object1.ClemencyMark == null ^ Object2.ClemencyMark == null )
			{
				equal = false;
			}
			if ( Object1.RaiseMark != null && Object2.RaiseMark != null )
			{
				if (Object1.RaiseMark != Object2.RaiseMark)
					equal = false;
			}
			else if (Object1.RaiseMark == null ^ Object2.RaiseMark == null )
			{
				equal = false;
			}
			if ( Object1.CrsMarkNew != null && Object2.CrsMarkNew != null )
			{
				if (Object1.CrsMarkNew != Object2.CrsMarkNew)
					equal = false;
			}
			else if (Object1.CrsMarkNew == null ^ Object2.CrsMarkNew == null )
			{
				equal = false;
			}
			if ( Object1.CrsPoint != null && Object2.CrsPoint != null )
			{
				if (Object1.CrsPoint != Object2.CrsPoint)
					equal = false;
			}
			else if (Object1.CrsPoint == null ^ Object2.CrsPoint == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeCourseStatusNewId != null && Object2.EdCodeCourseStatusNewId != null )
			{
				if (Object1.EdCodeCourseStatusNewId != Object2.EdCodeCourseStatusNewId)
					equal = false;
			}
			else if (Object1.EdCodeCourseStatusNewId == null ^ Object2.EdCodeCourseStatusNewId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingNewId != null && Object2.EdCodeGradingNewId != null )
			{
				if (Object1.EdCodeGradingNewId != Object2.EdCodeGradingNewId)
					equal = false;
			}
			else if (Object1.EdCodeGradingNewId == null ^ Object2.EdCodeGradingNewId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodePassFailNewId != null && Object2.GsCodePassFailNewId != null )
			{
				if (Object1.GsCodePassFailNewId != Object2.GsCodePassFailNewId)
					equal = false;
			}
			else if (Object1.GsCodePassFailNewId == null ^ Object2.GsCodePassFailNewId == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.AbsFlg != null && Object2.AbsFlg != null )
			{
				if (Object1.AbsFlg != Object2.AbsFlg)
					equal = false;
			}
			else if (Object1.AbsFlg == null ^ Object2.AbsFlg == null )
			{
				equal = false;
			}
			if ( Object1.CelemApplyFlg != null && Object2.CelemApplyFlg != null )
			{
				if (Object1.CelemApplyFlg != Object2.CelemApplyFlg)
					equal = false;
			}
			else if (Object1.CelemApplyFlg == null ^ Object2.CelemApplyFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStdCrsExamBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStdCrsExamComparer GetComparer()
        {
            return new EdStdCrsExamComparer();
        }
        */

        // Comparer delegates back to EdStdCrsExam
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStdCrsExam rhs, EdStdCrsExamColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStdCrsExamColumn.EdStdCrsExamId:
            		return this.EdStdCrsExamId.CompareTo(rhs.EdStdCrsExamId);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.EdStudCourseRegId:
            		return this.EdStudCourseRegId.CompareTo(rhs.EdStudCourseRegId);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.CompareTo(rhs.EdCdeExamTypeId);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.ExamDate:
            		return this.ExamDate.Value.CompareTo(rhs.ExamDate.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.CrsMarkOld:
            		return this.CrsMarkOld.Value.CompareTo(rhs.CrsMarkOld.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.EdCodeCourseStatusOldId:
            		return this.EdCodeCourseStatusOldId.Value.CompareTo(rhs.EdCodeCourseStatusOldId.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.EdCodeGradingOldId:
            		return this.EdCodeGradingOldId.Value.CompareTo(rhs.EdCodeGradingOldId.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.GsCodePassFailOldId:
            		return this.GsCodePassFailOldId.Value.CompareTo(rhs.GsCodePassFailOldId.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.ClemencyMark:
            		return this.ClemencyMark.Value.CompareTo(rhs.ClemencyMark.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.RaiseMark:
            		return this.RaiseMark.Value.CompareTo(rhs.RaiseMark.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.CrsMarkNew:
            		return this.CrsMarkNew.Value.CompareTo(rhs.CrsMarkNew.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.CrsPoint:
            		return this.CrsPoint.Value.CompareTo(rhs.CrsPoint.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.EdCodeCourseStatusNewId:
            		return this.EdCodeCourseStatusNewId.Value.CompareTo(rhs.EdCodeCourseStatusNewId.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.EdCodeGradingNewId:
            		return this.EdCodeGradingNewId.Value.CompareTo(rhs.EdCodeGradingNewId.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.GsCodePassFailNewId:
            		return this.GsCodePassFailNewId.Value.CompareTo(rhs.GsCodePassFailNewId.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.AbsFlg:
            		return this.AbsFlg.Value.CompareTo(rhs.AbsFlg.Value);
            		
            		                 
            	
            	
            	case EdStdCrsExamColumn.CelemApplyFlg:
            		return this.CelemApplyFlg.Value.CompareTo(rhs.CelemApplyFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStdCrsExamKey> Members
		
		// member variable for the EntityId property
		private EdStdCrsExamKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStdCrsExamKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStdCrsExamKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStdCrsExam")
					.Append("|").Append( this.EdStdCrsExamId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- EdStdCrsExamId: {0}{18}- EdStudCourseRegId: {1}{18}- EdCdeExamTypeId: {2}{18}- ExamDate: {3}{18}- CrsMarkOld: {4}{18}- EdCodeCourseStatusOldId: {5}{18}- EdCodeGradingOldId: {6}{18}- GsCodePassFailOldId: {7}{18}- ClemencyMark: {8}{18}- RaiseMark: {9}{18}- CrsMarkNew: {10}{18}- CrsPoint: {11}{18}- EdCodeCourseStatusNewId: {12}{18}- EdCodeGradingNewId: {13}{18}- GsCodePassFailNewId: {14}{18}- ApproveFlg: {15}{18}- AbsFlg: {16}{18}- CelemApplyFlg: {17}{18}{20}", 
				this.EdStdCrsExamId,
				this.EdStudCourseRegId,
				this.EdCdeExamTypeId,
				(this.ExamDate == null) ? string.Empty : this.ExamDate.ToString(),
				(this.CrsMarkOld == null) ? string.Empty : this.CrsMarkOld.ToString(),
				(this.EdCodeCourseStatusOldId == null) ? string.Empty : this.EdCodeCourseStatusOldId.ToString(),
				(this.EdCodeGradingOldId == null) ? string.Empty : this.EdCodeGradingOldId.ToString(),
				(this.GsCodePassFailOldId == null) ? string.Empty : this.GsCodePassFailOldId.ToString(),
				(this.ClemencyMark == null) ? string.Empty : this.ClemencyMark.ToString(),
				(this.RaiseMark == null) ? string.Empty : this.RaiseMark.ToString(),
				(this.CrsMarkNew == null) ? string.Empty : this.CrsMarkNew.ToString(),
				(this.CrsPoint == null) ? string.Empty : this.CrsPoint.ToString(),
				(this.EdCodeCourseStatusNewId == null) ? string.Empty : this.EdCodeCourseStatusNewId.ToString(),
				(this.EdCodeGradingNewId == null) ? string.Empty : this.EdCodeGradingNewId.ToString(),
				(this.GsCodePassFailNewId == null) ? string.Empty : this.GsCodePassFailNewId.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString(),
				(this.CelemApplyFlg == null) ? string.Empty : this.CelemApplyFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STD_CRS_EXAM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStdCrsExamEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STD_CRS_EXAM_ID : درجات اعادة امتحان امتحان طالب
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STD_CRS_EXAM"</remarks>
		public System.Decimal EdStdCrsExamId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStdCrsExamId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_COURSE_REG_ID : مسلسل تسجيل طالب مقرر
		/// </summary>
		public System.Decimal		  EdStudCourseRegId = 0.0m;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : نوع اعادة الامتحان
		/// </summary>
		public System.Decimal		  EdCdeExamTypeId = 0.0m;
		
		/// <summary>
		/// EXAM_DATE : تاريخ الامتجان
		/// </summary>
		public System.DateTime?		  ExamDate = null;
		
		/// <summary>
		/// CRS_MARK_OLD : الدرجة السابقة
		/// </summary>
		public System.Decimal?		  CrsMarkOld = null;
		
		/// <summary>
		/// ED_CODE_COURSE_STATUS_OLD_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseStatusOldId = null;
		
		/// <summary>
		/// ED_CODE_GRADING_OLD_ID : التقدير السابق
		/// </summary>
		public System.Decimal?		  EdCodeGradingOldId = null;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_OLD_ID : مؤشر النجاح
		/// </summary>
		public System.Decimal?		  GsCodePassFailOldId = null;
		
		/// <summary>
		/// CLEMENCY_MARK : درجة الرافة
		/// </summary>
		public System.Decimal?		  ClemencyMark = null;
		
		/// <summary>
		/// RAISE_MARK : Increase Markدرجة الرفع
		/// </summary>
		public System.Decimal?		  RaiseMark = null;
		
		/// <summary>
		/// CRS_MARK_NEW : الدرجة الجديدة
		/// </summary>
		public System.Decimal?		  CrsMarkNew = null;
		
		/// <summary>
		/// CRS_POINT : نقاط الطالب فى المادة
		/// </summary>
		public System.Decimal?		  CrsPoint = null;
		
		/// <summary>
		/// ED_CODE_COURSE_STATUS_NEW_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseStatusNewId = null;
		
		/// <summary>
		/// ED_CODE_GRADING_NEW_ID : التقدير الجديد
		/// </summary>
		public System.Decimal?		  EdCodeGradingNewId = null;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_NEW_ID : مؤشر النجاح
		/// </summary>
		public System.Decimal?		  GsCodePassFailNewId = null;
		
		/// <summary>
		/// APPROVE_FLG : مؤشر اعتماد
		/// </summary>
		public System.Decimal?		  ApproveFlg = null;
		
		/// <summary>
		/// ABS_FLG : مؤشر غياب فى امتحان
		/// </summary>
		public System.Decimal?		  AbsFlg = null;
		
		/// <summary>
		/// CELEM_APPLY_FLG : تطبيق قواعد الرافة
		/// </summary>
		public System.Decimal?		  CelemApplyFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeCourseStatus _edCodeCourseStatusOldIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusOldId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusOldIdSource
      	{
            get { return this._edCodeCourseStatusOldIdSource; }
            set { this._edCodeCourseStatusOldIdSource = value; }
      	}
		private EdCodeCourseStatus _edCodeCourseStatusNewIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusNewId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusNewIdSource
      	{
            get { return this._edCodeCourseStatusNewIdSource; }
            set { this._edCodeCourseStatusNewIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingOldIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingOldId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingOldIdSource
      	{
            get { return this._edCodeGradingOldIdSource; }
            set { this._edCodeGradingOldIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingNewIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingNewId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingNewIdSource
      	{
            get { return this._edCodeGradingNewIdSource; }
            set { this._edCodeGradingNewIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailOldIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailOldId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailOldIdSource
      	{
            get { return this._gsCodePassFailOldIdSource; }
            set { this._gsCodePassFailOldIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailNewIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailNewId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailNewIdSource
      	{
            get { return this._gsCodePassFailNewIdSource; }
            set { this._gsCodePassFailNewIdSource = value; }
      	}
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		private EdStudCourseReg _edStudCourseRegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return this._edStudCourseRegIdSource; }
            set { this._edStudCourseRegIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStdCrsExamAssessCollection
		
		private TList<EdStdCrsExamAssess> _edStdCrsExamAssessEdStdCrsExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStdCrsExamAssessEdStdCrsExamId
		/// </summary>
		
		public TList<EdStdCrsExamAssess> EdStdCrsExamAssessCollection
		{
			get
			{
				if (_edStdCrsExamAssessEdStdCrsExamId == null)
				{
				_edStdCrsExamAssessEdStdCrsExamId = new TList<EdStdCrsExamAssess>();
				}
	
				return _edStdCrsExamAssessEdStdCrsExamId;
			}
			set { _edStdCrsExamAssessEdStdCrsExamId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStdCrsExamEntityData _tmp = new EdStdCrsExamEntityData();
						
			_tmp.EdStdCrsExamId = this.EdStdCrsExamId;
			_tmp.OriginalEdStdCrsExamId = this.OriginalEdStdCrsExamId;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.CrsMarkOld = this.CrsMarkOld;
			_tmp.EdCodeCourseStatusOldId = this.EdCodeCourseStatusOldId;
			_tmp.EdCodeGradingOldId = this.EdCodeGradingOldId;
			_tmp.GsCodePassFailOldId = this.GsCodePassFailOldId;
			_tmp.ClemencyMark = this.ClemencyMark;
			_tmp.RaiseMark = this.RaiseMark;
			_tmp.CrsMarkNew = this.CrsMarkNew;
			_tmp.CrsPoint = this.CrsPoint;
			_tmp.EdCodeCourseStatusNewId = this.EdCodeCourseStatusNewId;
			_tmp.EdCodeGradingNewId = this.EdCodeGradingNewId;
			_tmp.GsCodePassFailNewId = this.GsCodePassFailNewId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.CelemApplyFlg = this.CelemApplyFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseStatusOldIdSource != null)
				_tmp.EdCodeCourseStatusOldIdSource = MakeCopyOf(this.EdCodeCourseStatusOldIdSource) as EdCodeCourseStatus;
			if (this.EdCodeCourseStatusNewIdSource != null)
				_tmp.EdCodeCourseStatusNewIdSource = MakeCopyOf(this.EdCodeCourseStatusNewIdSource) as EdCodeCourseStatus;
			if (this.EdCodeGradingOldIdSource != null)
				_tmp.EdCodeGradingOldIdSource = MakeCopyOf(this.EdCodeGradingOldIdSource) as EdCodeGrading;
			if (this.EdCodeGradingNewIdSource != null)
				_tmp.EdCodeGradingNewIdSource = MakeCopyOf(this.EdCodeGradingNewIdSource) as EdCodeGrading;
			if (this.GsCodePassFailOldIdSource != null)
				_tmp.GsCodePassFailOldIdSource = MakeCopyOf(this.GsCodePassFailOldIdSource) as GsCodePassFail;
			if (this.GsCodePassFailNewIdSource != null)
				_tmp.GsCodePassFailNewIdSource = MakeCopyOf(this.GsCodePassFailNewIdSource) as GsCodePassFail;
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			if (this.EdStudCourseRegIdSource != null)
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource) as EdStudCourseReg;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStdCrsExamAssessEdStdCrsExamId != null)
				_tmp.EdStdCrsExamAssessCollection = (TList<EdStdCrsExamAssess>) MakeCopyOf(this.EdStdCrsExamAssessCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStdCrsExamEntityData _tmp = new EdStdCrsExamEntityData();
						
			_tmp.EdStdCrsExamId = this.EdStdCrsExamId;
			_tmp.OriginalEdStdCrsExamId = this.OriginalEdStdCrsExamId;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.CrsMarkOld = this.CrsMarkOld;
			_tmp.EdCodeCourseStatusOldId = this.EdCodeCourseStatusOldId;
			_tmp.EdCodeGradingOldId = this.EdCodeGradingOldId;
			_tmp.GsCodePassFailOldId = this.GsCodePassFailOldId;
			_tmp.ClemencyMark = this.ClemencyMark;
			_tmp.RaiseMark = this.RaiseMark;
			_tmp.CrsMarkNew = this.CrsMarkNew;
			_tmp.CrsPoint = this.CrsPoint;
			_tmp.EdCodeCourseStatusNewId = this.EdCodeCourseStatusNewId;
			_tmp.EdCodeGradingNewId = this.EdCodeGradingNewId;
			_tmp.GsCodePassFailNewId = this.GsCodePassFailNewId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.CelemApplyFlg = this.CelemApplyFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseStatusOldIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusOldIdSource))
				_tmp.EdCodeCourseStatusOldIdSource = existingCopies[this.EdCodeCourseStatusOldIdSource] as EdCodeCourseStatus;
			else
				_tmp.EdCodeCourseStatusOldIdSource = MakeCopyOf(this.EdCodeCourseStatusOldIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeCourseStatusNewIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusNewIdSource))
				_tmp.EdCodeCourseStatusNewIdSource = existingCopies[this.EdCodeCourseStatusNewIdSource] as EdCodeCourseStatus;
			else
				_tmp.EdCodeCourseStatusNewIdSource = MakeCopyOf(this.EdCodeCourseStatusNewIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingOldIdSource != null && existingCopies.Contains(this.EdCodeGradingOldIdSource))
				_tmp.EdCodeGradingOldIdSource = existingCopies[this.EdCodeGradingOldIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingOldIdSource = MakeCopyOf(this.EdCodeGradingOldIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeGradingNewIdSource != null && existingCopies.Contains(this.EdCodeGradingNewIdSource))
				_tmp.EdCodeGradingNewIdSource = existingCopies[this.EdCodeGradingNewIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingNewIdSource = MakeCopyOf(this.EdCodeGradingNewIdSource, existingCopies) as EdCodeGrading;
			if (this.GsCodePassFailOldIdSource != null && existingCopies.Contains(this.GsCodePassFailOldIdSource))
				_tmp.GsCodePassFailOldIdSource = existingCopies[this.GsCodePassFailOldIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailOldIdSource = MakeCopyOf(this.GsCodePassFailOldIdSource, existingCopies) as GsCodePassFail;
			if (this.GsCodePassFailNewIdSource != null && existingCopies.Contains(this.GsCodePassFailNewIdSource))
				_tmp.GsCodePassFailNewIdSource = existingCopies[this.GsCodePassFailNewIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailNewIdSource = MakeCopyOf(this.GsCodePassFailNewIdSource, existingCopies) as GsCodePassFail;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				_tmp.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStdCrsExamAssessCollection = (TList<EdStdCrsExamAssess>) MakeCopyOf(this.EdStdCrsExamAssessCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdCrsExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStdCrsExamColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdCrsExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStdCrsExamColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdCrsExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStdCrsExamColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStdCrsExamEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStdCrsExamEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdCrsExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStdCrsExamColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStdCrsExamEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStdCrsExamEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStdCrsExamEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStdCrsExam"/> object.
	/// </remarks>
	public class EdStdCrsExamEventArgs : System.EventArgs
	{
		private EdStdCrsExamColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStdCrsExamEventArgs class.
		///</summary>
		public EdStdCrsExamEventArgs(EdStdCrsExamColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStdCrsExamEventArgs class.
		///</summary>
		public EdStdCrsExamEventArgs(EdStdCrsExamColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStdCrsExamColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStdCrsExamColumn" />
		public EdStdCrsExamColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStdCrsExam related events.
	///</summary>
	public delegate void EdStdCrsExamEventHandler(object sender, EdStdCrsExamEventArgs e);
	
	#region EdStdCrsExamComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStdCrsExamComparer : System.Collections.Generic.IComparer<EdStdCrsExam>
	{
		EdStdCrsExamColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStdCrsExamComparer"/> class.
        /// </summary>
		public EdStdCrsExamComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStdCrsExamComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStdCrsExamComparer(EdStdCrsExamColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStdCrsExam"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStdCrsExam"/> to compare.</param>
        /// <param name="b">The second <c>EdStdCrsExam</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStdCrsExam a, EdStdCrsExam b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStdCrsExam entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStdCrsExam a, EdStdCrsExam b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStdCrsExamColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStdCrsExamKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStdCrsExam"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStdCrsExamKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamKey class.
		/// </summary>
		public EdStdCrsExamKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamKey class.
		/// </summary>
		public EdStdCrsExamKey(EdStdCrsExamBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStdCrsExamId = entity.EdStdCrsExamId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStdCrsExamKey class.
		/// </summary>
		public EdStdCrsExamKey(System.Decimal _edStdCrsExamId)
		{
			#region Init Properties

			this.EdStdCrsExamId = _edStdCrsExamId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStdCrsExamBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStdCrsExamBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStdCrsExamId property
		private System.Decimal _edStdCrsExamId;
		
		/// <summary>
		/// Gets or sets the EdStdCrsExamId property.
		/// </summary>
		public System.Decimal EdStdCrsExamId
		{
			get { return _edStdCrsExamId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStdCrsExamId = value;
				
				_edStdCrsExamId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStdCrsExamId = ( values["EdStdCrsExamId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStdCrsExamId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStdCrsExamId", EdStdCrsExamId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStdCrsExamId: {0}{1}",
								EdStdCrsExamId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStdCrsExamColumn Enum
	
	/// <summary>
	/// Enumerate the EdStdCrsExam columns.
	/// </summary>
	[Serializable]
	public enum EdStdCrsExamColumn : int
	{
		/// <summary>
		/// EdStdCrsExamId : درجات اعادة امتحان امتحان طالب
		/// </summary>
		[EnumTextValue("ED_STD_CRS_EXAM_ID")]
		[ColumnEnum("ED_STD_CRS_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStdCrsExamId = 1,
		/// <summary>
		/// EdStudCourseRegId : مسلسل تسجيل طالب مقرر
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudCourseRegId = 2,
		/// <summary>
		/// EdCdeExamTypeId : نوع اعادة الامتحان
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCdeExamTypeId = 3,
		/// <summary>
		/// ExamDate : تاريخ الامتجان
		/// </summary>
		[EnumTextValue("EXAM_DATE")]
		[ColumnEnum("EXAM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExamDate = 4,
		/// <summary>
		/// CrsMarkOld : الدرجة السابقة
		/// </summary>
		[EnumTextValue("CRS_MARK_OLD")]
		[ColumnEnum("CRS_MARK_OLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsMarkOld = 5,
		/// <summary>
		/// EdCodeCourseStatusOldId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_STATUS_OLD_ID")]
		[ColumnEnum("ED_CODE_COURSE_STATUS_OLD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseStatusOldId = 6,
		/// <summary>
		/// EdCodeGradingOldId : التقدير السابق
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_OLD_ID")]
		[ColumnEnum("ED_CODE_GRADING_OLD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingOldId = 7,
		/// <summary>
		/// GsCodePassFailOldId : مؤشر النجاح
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_OLD_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_OLD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePassFailOldId = 8,
		/// <summary>
		/// ClemencyMark : درجة الرافة
		/// </summary>
		[EnumTextValue("CLEMENCY_MARK")]
		[ColumnEnum("CLEMENCY_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ClemencyMark = 9,
		/// <summary>
		/// RaiseMark : Increase Markدرجة الرفع
		/// </summary>
		[EnumTextValue("RAISE_MARK")]
		[ColumnEnum("RAISE_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RaiseMark = 10,
		/// <summary>
		/// CrsMarkNew : الدرجة الجديدة
		/// </summary>
		[EnumTextValue("CRS_MARK_NEW")]
		[ColumnEnum("CRS_MARK_NEW", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsMarkNew = 11,
		/// <summary>
		/// CrsPoint : نقاط الطالب فى المادة
		/// </summary>
		[EnumTextValue("CRS_POINT")]
		[ColumnEnum("CRS_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsPoint = 12,
		/// <summary>
		/// EdCodeCourseStatusNewId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_STATUS_NEW_ID")]
		[ColumnEnum("ED_CODE_COURSE_STATUS_NEW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseStatusNewId = 13,
		/// <summary>
		/// EdCodeGradingNewId : التقدير الجديد
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_NEW_ID")]
		[ColumnEnum("ED_CODE_GRADING_NEW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingNewId = 14,
		/// <summary>
		/// GsCodePassFailNewId : مؤشر النجاح
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_NEW_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_NEW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePassFailNewId = 15,
		/// <summary>
		/// ApproveFlg : مؤشر اعتماد
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ApproveFlg = 16,
		/// <summary>
		/// AbsFlg : مؤشر غياب فى امتحان
		/// </summary>
		[EnumTextValue("ABS_FLG")]
		[ColumnEnum("ABS_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AbsFlg = 17,
		/// <summary>
		/// CelemApplyFlg : تطبيق قواعد الرافة
		/// </summary>
		[EnumTextValue("CELEM_APPLY_FLG")]
		[ColumnEnum("CELEM_APPLY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CelemApplyFlg = 18
	}//End enum

	#endregion EdStdCrsExamColumn Enum

} // end namespace
