
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IntegUserAdLogDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'INTEG_USER_AD_LOG_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class IntegUserAdLogDtlBase : EntityBase, IIntegUserAdLogDtl, IEntityId<IntegUserAdLogDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IntegUserAdLogDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IntegUserAdLogDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IntegUserAdLogDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<IntegUserAdLogDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegUserAdLogDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegUserAdLogDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IntegUserAdLogDtlBase"/> instance.
		///</summary>
		public IntegUserAdLogDtlBase()
		{
			this.entityData = new IntegUserAdLogDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IntegUserAdLogDtlBase"/> instance.
		///</summary>
		///<param name="_integUserAdLogDtlId"></param>
		///<param name="_integUserAdLogHdrId"></param>
		///<param name="_seUserId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_edStudId"></param>
		///<param name="_failFlg"></param>
		///<param name="_integCdeErrorTypeId"></param>
		///<param name="_errorMsg"></param>
		public IntegUserAdLogDtlBase(System.Decimal _integUserAdLogDtlId, System.Decimal _integUserAdLogHdrId, 
			System.Decimal? _seUserId, System.Decimal? _saStfMemberId, System.Decimal? _edStudId, 
			System.Boolean? _failFlg, System.Int32 _integCdeErrorTypeId, System.String _errorMsg)
		{
			this.entityData = new IntegUserAdLogDtlEntityData();
			this.backupData = null;

			this.IntegUserAdLogDtlId = _integUserAdLogDtlId;
			this.IntegUserAdLogHdrId = _integUserAdLogHdrId;
			this.SeUserId = _seUserId;
			this.SaStfMemberId = _saStfMemberId;
			this.EdStudId = _edStudId;
			this.FailFlg = _failFlg;
			this.IntegCdeErrorTypeId = _integCdeErrorTypeId;
			this.ErrorMsg = _errorMsg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IntegUserAdLogDtl"/> instance.
		///</summary>
		///<param name="_integUserAdLogDtlId"></param>
		///<param name="_integUserAdLogHdrId"></param>
		///<param name="_seUserId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_edStudId"></param>
		///<param name="_failFlg"></param>
		///<param name="_integCdeErrorTypeId"></param>
		///<param name="_errorMsg"></param>
		public static IntegUserAdLogDtl CreateIntegUserAdLogDtl(System.Decimal _integUserAdLogDtlId, System.Decimal _integUserAdLogHdrId, 
			System.Decimal? _seUserId, System.Decimal? _saStfMemberId, System.Decimal? _edStudId, 
			System.Boolean? _failFlg, System.Int32 _integCdeErrorTypeId, System.String _errorMsg)
		{
			IntegUserAdLogDtl newIntegUserAdLogDtl = new IntegUserAdLogDtl();
			newIntegUserAdLogDtl.IntegUserAdLogDtlId = _integUserAdLogDtlId;
			newIntegUserAdLogDtl.IntegUserAdLogHdrId = _integUserAdLogHdrId;
			newIntegUserAdLogDtl.SeUserId = _seUserId;
			newIntegUserAdLogDtl.SaStfMemberId = _saStfMemberId;
			newIntegUserAdLogDtl.EdStudId = _edStudId;
			newIntegUserAdLogDtl.FailFlg = _failFlg;
			newIntegUserAdLogDtl.IntegCdeErrorTypeId = _integCdeErrorTypeId;
			newIntegUserAdLogDtl.ErrorMsg = _errorMsg;
			return newIntegUserAdLogDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IntegUserAdLogDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal IntegUserAdLogDtlId
		{
			get
			{
				return this.entityData.IntegUserAdLogDtlId; 
			}
			
			set
			{
				if (this.entityData.IntegUserAdLogDtlId == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.IntegUserAdLogDtlId, this.entityData.IntegUserAdLogDtlId);
				this.entityData.IntegUserAdLogDtlId = value;
				this.EntityId.IntegUserAdLogDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.IntegUserAdLogDtlId, this.entityData.IntegUserAdLogDtlId);
				OnPropertyChanged("IntegUserAdLogDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the INTEG_USER_AD_LOG_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the INTEG_USER_AD_LOG_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalIntegUserAdLogDtlId
		{
			get { return this.entityData.OriginalIntegUserAdLogDtlId; }
			set { this.entityData.OriginalIntegUserAdLogDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the IntegUserAdLogHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IntegUserAdLogHdrId
		{
			get
			{
				return this.entityData.IntegUserAdLogHdrId; 
			}
			
			set
			{
				if (this.entityData.IntegUserAdLogHdrId == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.IntegUserAdLogHdrId, this.entityData.IntegUserAdLogHdrId);
				this.entityData.IntegUserAdLogHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.IntegUserAdLogHdrId, this.entityData.IntegUserAdLogHdrId);
				OnPropertyChanged("IntegUserAdLogHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaStfMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsFailFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? FailFlg
		{
			get
			{
				return this.entityData.FailFlg; 
			}
			
			set
			{
				if (this.entityData.FailFlg == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.FailFlg, this.entityData.FailFlg);
				this.entityData.FailFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.FailFlg, this.entityData.FailFlg);
				OnPropertyChanged("FailFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IntegCdeErrorTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 IntegCdeErrorTypeId
		{
			get
			{
				return this.entityData.IntegCdeErrorTypeId; 
			}
			
			set
			{
				if (this.entityData.IntegCdeErrorTypeId == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.IntegCdeErrorTypeId, this.entityData.IntegCdeErrorTypeId);
				this.entityData.IntegCdeErrorTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.IntegCdeErrorTypeId, this.entityData.IntegCdeErrorTypeId);
				OnPropertyChanged("IntegCdeErrorTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorMsg property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ErrorMsg
		{
			get
			{
				return this.entityData.ErrorMsg; 
			}
			
			set
			{
				if (this.entityData.ErrorMsg == value)
					return;
					
				OnColumnChanging(IntegUserAdLogDtlColumn.ErrorMsg, this.entityData.ErrorMsg);
				this.entityData.ErrorMsg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegUserAdLogDtlColumn.ErrorMsg, this.entityData.ErrorMsg);
				OnPropertyChanged("ErrorMsg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="IntegCdeErrorType"/>.
		/// </summary>
		/// <value>The source IntegCdeErrorType for IntegCdeErrorTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual IntegCdeErrorType IntegCdeErrorTypeIdSource
      	{
            get { return entityData.IntegCdeErrorTypeIdSource; }
            set { entityData.IntegCdeErrorTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="IntegUserAdLogHdr"/>.
		/// </summary>
		/// <value>The source IntegUserAdLogHdr for IntegUserAdLogHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual IntegUserAdLogHdr IntegUserAdLogHdrIdSource
      	{
            get { return entityData.IntegUserAdLogHdrIdSource; }
            set { entityData.IntegUserAdLogHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "INTEG_USER_AD_LOG_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"INTEG_USER_AD_LOG_DTL_ID", "INTEG_USER_AD_LOG_HDR_ID", "SE_USER_ID", "SA_STF_MEMBER_ID", "ED_STUD_ID", "FAIL_FLG", "INTEG_CDE_ERROR_TYPE_ID", "ERROR_MSG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IntegUserAdLogDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IntegUserAdLogDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IntegUserAdLogDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IntegUserAdLogDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IntegUserAdLogDtl Entity 
		///</summary>
		protected virtual IntegUserAdLogDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			IntegUserAdLogDtl copy = new IntegUserAdLogDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.IntegUserAdLogDtlId = this.IntegUserAdLogDtlId;
					copy.OriginalIntegUserAdLogDtlId = this.OriginalIntegUserAdLogDtlId;
				copy.IntegUserAdLogHdrId = this.IntegUserAdLogHdrId;
				copy.SeUserId = this.SeUserId;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.EdStudId = this.EdStudId;
				copy.FailFlg = this.FailFlg;
				copy.IntegCdeErrorTypeId = this.IntegCdeErrorTypeId;
				copy.ErrorMsg = this.ErrorMsg;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.IntegCdeErrorTypeIdSource != null && existingCopies.Contains(this.IntegCdeErrorTypeIdSource))
				copy.IntegCdeErrorTypeIdSource = existingCopies[this.IntegCdeErrorTypeIdSource] as IntegCdeErrorType;
			else
				copy.IntegCdeErrorTypeIdSource = MakeCopyOf(this.IntegCdeErrorTypeIdSource, existingCopies) as IntegCdeErrorType;
			if (this.IntegUserAdLogHdrIdSource != null && existingCopies.Contains(this.IntegUserAdLogHdrIdSource))
				copy.IntegUserAdLogHdrIdSource = existingCopies[this.IntegUserAdLogHdrIdSource] as IntegUserAdLogHdr;
			else
				copy.IntegUserAdLogHdrIdSource = MakeCopyOf(this.IntegUserAdLogHdrIdSource, existingCopies) as IntegUserAdLogHdr;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed IntegUserAdLogDtl Entity 
		///</summary>
		public virtual IntegUserAdLogDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed IntegUserAdLogDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IntegUserAdLogDtl DeepCopy()
		{
			return EntityHelper.Clone<IntegUserAdLogDtl>(this as IntegUserAdLogDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IntegUserAdLogDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new IntegUserAdLogDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IntegUserAdLogDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IntegUserAdLogDtlColumn column)
		{
			switch(column)
			{
					case IntegUserAdLogDtlColumn.IntegUserAdLogDtlId:
					return entityData.IntegUserAdLogDtlId != _originalData.IntegUserAdLogDtlId;
					case IntegUserAdLogDtlColumn.IntegUserAdLogHdrId:
					return entityData.IntegUserAdLogHdrId != _originalData.IntegUserAdLogHdrId;
					case IntegUserAdLogDtlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case IntegUserAdLogDtlColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case IntegUserAdLogDtlColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case IntegUserAdLogDtlColumn.FailFlg:
					return entityData.FailFlg != _originalData.FailFlg;
					case IntegUserAdLogDtlColumn.IntegCdeErrorTypeId:
					return entityData.IntegCdeErrorTypeId != _originalData.IntegCdeErrorTypeId;
					case IntegUserAdLogDtlColumn.ErrorMsg:
					return entityData.ErrorMsg != _originalData.ErrorMsg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< IntegUserAdLogDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IntegUserAdLogDtlId != _originalData.IntegUserAdLogDtlId;
			result = result || entityData.IntegUserAdLogHdrId != _originalData.IntegUserAdLogHdrId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.FailFlg != _originalData.FailFlg;
			result = result || entityData.IntegCdeErrorTypeId != _originalData.IntegCdeErrorTypeId;
			result = result || entityData.ErrorMsg != _originalData.ErrorMsg;
			return result;
		}	
		
		///<summary>
		///  Returns a IntegUserAdLogDtl Entity with the original data.
		///</summary>
		public IntegUserAdLogDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateIntegUserAdLogDtl(
				_originalData.IntegUserAdLogDtlId,
				_originalData.IntegUserAdLogHdrId,
				_originalData.SeUserId,
				_originalData.SaStfMemberId,
				_originalData.EdStudId,
				_originalData.FailFlg,
				_originalData.IntegCdeErrorTypeId,
				_originalData.ErrorMsg
				);
				
			return (IntegUserAdLogDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IntegUserAdLogDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is IntegUserAdLogDtlBase)
				return ValueEquals(this, (IntegUserAdLogDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IntegUserAdLogDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IntegUserAdLogDtlId.GetHashCode() ^ 
					this.IntegUserAdLogHdrId.GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString()).GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					((this.FailFlg == null) ? string.Empty : this.FailFlg.ToString()).GetHashCode() ^ 
					this.IntegCdeErrorTypeId.GetHashCode() ^ 
					((this.ErrorMsg == null) ? string.Empty : this.ErrorMsg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IntegUserAdLogDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IntegUserAdLogDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="IntegUserAdLogDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="IntegUserAdLogDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IntegUserAdLogDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(IntegUserAdLogDtlBase Object1, IntegUserAdLogDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IntegUserAdLogDtlId != Object2.IntegUserAdLogDtlId)
				equal = false;
			if (Object1.IntegUserAdLogHdrId != Object2.IntegUserAdLogHdrId)
				equal = false;
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.SaStfMemberId != null && Object2.SaStfMemberId != null )
			{
				if (Object1.SaStfMemberId != Object2.SaStfMemberId)
					equal = false;
			}
			else if (Object1.SaStfMemberId == null ^ Object2.SaStfMemberId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if ( Object1.FailFlg != null && Object2.FailFlg != null )
			{
				if (Object1.FailFlg != Object2.FailFlg)
					equal = false;
			}
			else if (Object1.FailFlg == null ^ Object2.FailFlg == null )
			{
				equal = false;
			}
			if (Object1.IntegCdeErrorTypeId != Object2.IntegCdeErrorTypeId)
				equal = false;
			if ( Object1.ErrorMsg != null && Object2.ErrorMsg != null )
			{
				if (Object1.ErrorMsg != Object2.ErrorMsg)
					equal = false;
			}
			else if (Object1.ErrorMsg == null ^ Object2.ErrorMsg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IntegUserAdLogDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IntegUserAdLogDtlComparer GetComparer()
        {
            return new IntegUserAdLogDtlComparer();
        }
        */

        // Comparer delegates back to IntegUserAdLogDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IntegUserAdLogDtl rhs, IntegUserAdLogDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case IntegUserAdLogDtlColumn.IntegUserAdLogDtlId:
            		return this.IntegUserAdLogDtlId.CompareTo(rhs.IntegUserAdLogDtlId);
            		
            		                 
            	
            	
            	case IntegUserAdLogDtlColumn.IntegUserAdLogHdrId:
            		return this.IntegUserAdLogHdrId.CompareTo(rhs.IntegUserAdLogHdrId);
            		
            		                 
            	
            	
            	case IntegUserAdLogDtlColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case IntegUserAdLogDtlColumn.SaStfMemberId:
            		return this.SaStfMemberId.Value.CompareTo(rhs.SaStfMemberId.Value);
            		
            		                 
            	
            	
            	case IntegUserAdLogDtlColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case IntegUserAdLogDtlColumn.FailFlg:
            		return this.FailFlg.Value.CompareTo(rhs.FailFlg.Value);
            		
            		                 
            	
            	
            	case IntegUserAdLogDtlColumn.IntegCdeErrorTypeId:
            		return this.IntegCdeErrorTypeId.CompareTo(rhs.IntegCdeErrorTypeId);
            		
            		                 
            	
            	
            	case IntegUserAdLogDtlColumn.ErrorMsg:
            		return this.ErrorMsg.CompareTo(rhs.ErrorMsg);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IntegUserAdLogDtlKey> Members
		
		// member variable for the EntityId property
		private IntegUserAdLogDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual IntegUserAdLogDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IntegUserAdLogDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("IntegUserAdLogDtl")
					.Append("|").Append( this.IntegUserAdLogDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- IntegUserAdLogDtlId: {0}{8}- IntegUserAdLogHdrId: {1}{8}- SeUserId: {2}{8}- SaStfMemberId: {3}{8}- EdStudId: {4}{8}- FailFlg: {5}{8}- IntegCdeErrorTypeId: {6}{8}- ErrorMsg: {7}{8}{10}", 
				this.IntegUserAdLogDtlId,
				this.IntegUserAdLogHdrId,
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString(),
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				(this.FailFlg == null) ? string.Empty : this.FailFlg.ToString(),
				this.IntegCdeErrorTypeId,
				(this.ErrorMsg == null) ? string.Empty : this.ErrorMsg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'INTEG_USER_AD_LOG_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IntegUserAdLogDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// INTEG_USER_AD_LOG_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "INTEG_USER_AD_LOG_DTL"</remarks>
		public System.Decimal IntegUserAdLogDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalIntegUserAdLogDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// INTEG_USER_AD_LOG_HDR_ID : 
		/// </summary>
		public System.Decimal		  IntegUserAdLogHdrId = 0.0m;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal?		  SaStfMemberId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// FAIL_FLG : 
		/// </summary>
		public System.Boolean?		  FailFlg = null;
		
		/// <summary>
		/// INTEG_CDE_ERROR_TYPE_ID : 
		/// </summary>
		public System.Int32		  IntegCdeErrorTypeId = (int)0;
		
		/// <summary>
		/// ERROR_MSG : 
		/// </summary>
		public System.String		  ErrorMsg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private IntegCdeErrorType _integCdeErrorTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="IntegCdeErrorType"/>.
		/// </summary>
		/// <value>The source IntegCdeErrorType for IntegCdeErrorTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual IntegCdeErrorType IntegCdeErrorTypeIdSource
      	{
            get { return this._integCdeErrorTypeIdSource; }
            set { this._integCdeErrorTypeIdSource = value; }
      	}
		private IntegUserAdLogHdr _integUserAdLogHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="IntegUserAdLogHdr"/>.
		/// </summary>
		/// <value>The source IntegUserAdLogHdr for IntegUserAdLogHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual IntegUserAdLogHdr IntegUserAdLogHdrIdSource
      	{
            get { return this._integUserAdLogHdrIdSource; }
            set { this._integUserAdLogHdrIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IntegUserAdLogDtlEntityData _tmp = new IntegUserAdLogDtlEntityData();
						
			_tmp.IntegUserAdLogDtlId = this.IntegUserAdLogDtlId;
			_tmp.OriginalIntegUserAdLogDtlId = this.OriginalIntegUserAdLogDtlId;
			
			_tmp.IntegUserAdLogHdrId = this.IntegUserAdLogHdrId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.FailFlg = this.FailFlg;
			_tmp.IntegCdeErrorTypeId = this.IntegCdeErrorTypeId;
			_tmp.ErrorMsg = this.ErrorMsg;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.IntegCdeErrorTypeIdSource != null)
				_tmp.IntegCdeErrorTypeIdSource = MakeCopyOf(this.IntegCdeErrorTypeIdSource) as IntegCdeErrorType;
			if (this.IntegUserAdLogHdrIdSource != null)
				_tmp.IntegUserAdLogHdrIdSource = MakeCopyOf(this.IntegUserAdLogHdrIdSource) as IntegUserAdLogHdr;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			IntegUserAdLogDtlEntityData _tmp = new IntegUserAdLogDtlEntityData();
						
			_tmp.IntegUserAdLogDtlId = this.IntegUserAdLogDtlId;
			_tmp.OriginalIntegUserAdLogDtlId = this.OriginalIntegUserAdLogDtlId;
			
			_tmp.IntegUserAdLogHdrId = this.IntegUserAdLogHdrId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.FailFlg = this.FailFlg;
			_tmp.IntegCdeErrorTypeId = this.IntegCdeErrorTypeId;
			_tmp.ErrorMsg = this.ErrorMsg;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.IntegCdeErrorTypeIdSource != null && existingCopies.Contains(this.IntegCdeErrorTypeIdSource))
				_tmp.IntegCdeErrorTypeIdSource = existingCopies[this.IntegCdeErrorTypeIdSource] as IntegCdeErrorType;
			else
				_tmp.IntegCdeErrorTypeIdSource = MakeCopyOf(this.IntegCdeErrorTypeIdSource, existingCopies) as IntegCdeErrorType;
			if (this.IntegUserAdLogHdrIdSource != null && existingCopies.Contains(this.IntegUserAdLogHdrIdSource))
				_tmp.IntegUserAdLogHdrIdSource = existingCopies[this.IntegUserAdLogHdrIdSource] as IntegUserAdLogHdr;
			else
				_tmp.IntegUserAdLogHdrIdSource = MakeCopyOf(this.IntegUserAdLogHdrIdSource, existingCopies) as IntegUserAdLogHdr;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegUserAdLogDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(IntegUserAdLogDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegUserAdLogDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(IntegUserAdLogDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegUserAdLogDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(IntegUserAdLogDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IntegUserAdLogDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IntegUserAdLogDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegUserAdLogDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(IntegUserAdLogDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IntegUserAdLogDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IntegUserAdLogDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IntegUserAdLogDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IntegUserAdLogDtl"/> object.
	/// </remarks>
	public class IntegUserAdLogDtlEventArgs : System.EventArgs
	{
		private IntegUserAdLogDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IntegUserAdLogDtlEventArgs class.
		///</summary>
		public IntegUserAdLogDtlEventArgs(IntegUserAdLogDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IntegUserAdLogDtlEventArgs class.
		///</summary>
		public IntegUserAdLogDtlEventArgs(IntegUserAdLogDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IntegUserAdLogDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IntegUserAdLogDtlColumn" />
		public IntegUserAdLogDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all IntegUserAdLogDtl related events.
	///</summary>
	public delegate void IntegUserAdLogDtlEventHandler(object sender, IntegUserAdLogDtlEventArgs e);
	
	#region IntegUserAdLogDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IntegUserAdLogDtlComparer : System.Collections.Generic.IComparer<IntegUserAdLogDtl>
	{
		IntegUserAdLogDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IntegUserAdLogDtlComparer"/> class.
        /// </summary>
		public IntegUserAdLogDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IntegUserAdLogDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IntegUserAdLogDtlComparer(IntegUserAdLogDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IntegUserAdLogDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IntegUserAdLogDtl"/> to compare.</param>
        /// <param name="b">The second <c>IntegUserAdLogDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IntegUserAdLogDtl a, IntegUserAdLogDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IntegUserAdLogDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IntegUserAdLogDtl a, IntegUserAdLogDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IntegUserAdLogDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IntegUserAdLogDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IntegUserAdLogDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IntegUserAdLogDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlKey class.
		/// </summary>
		public IntegUserAdLogDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlKey class.
		/// </summary>
		public IntegUserAdLogDtlKey(IntegUserAdLogDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IntegUserAdLogDtlId = entity.IntegUserAdLogDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegUserAdLogDtlKey class.
		/// </summary>
		public IntegUserAdLogDtlKey(System.Decimal _integUserAdLogDtlId)
		{
			#region Init Properties

			this.IntegUserAdLogDtlId = _integUserAdLogDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IntegUserAdLogDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IntegUserAdLogDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IntegUserAdLogDtlId property
		private System.Decimal _integUserAdLogDtlId;
		
		/// <summary>
		/// Gets or sets the IntegUserAdLogDtlId property.
		/// </summary>
		public System.Decimal IntegUserAdLogDtlId
		{
			get { return _integUserAdLogDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IntegUserAdLogDtlId = value;
				
				_integUserAdLogDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IntegUserAdLogDtlId = ( values["IntegUserAdLogDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["IntegUserAdLogDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IntegUserAdLogDtlId", IntegUserAdLogDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IntegUserAdLogDtlId: {0}{1}",
								IntegUserAdLogDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IntegUserAdLogDtlColumn Enum
	
	/// <summary>
	/// Enumerate the IntegUserAdLogDtl columns.
	/// </summary>
	[Serializable]
	public enum IntegUserAdLogDtlColumn : int
	{
		/// <summary>
		/// IntegUserAdLogDtlId : 
		/// </summary>
		[EnumTextValue("INTEG_USER_AD_LOG_DTL_ID")]
		[ColumnEnum("INTEG_USER_AD_LOG_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		IntegUserAdLogDtlId = 1,
		/// <summary>
		/// IntegUserAdLogHdrId : 
		/// </summary>
		[EnumTextValue("INTEG_USER_AD_LOG_HDR_ID")]
		[ColumnEnum("INTEG_USER_AD_LOG_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IntegUserAdLogHdrId = 2,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 3,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaStfMemberId = 4,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 5,
		/// <summary>
		/// FailFlg : 
		/// </summary>
		[EnumTextValue("FAIL_FLG")]
		[ColumnEnum("FAIL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		FailFlg = 6,
		/// <summary>
		/// IntegCdeErrorTypeId : 
		/// </summary>
		[EnumTextValue("INTEG_CDE_ERROR_TYPE_ID")]
		[ColumnEnum("INTEG_CDE_ERROR_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IntegCdeErrorTypeId = 7,
		/// <summary>
		/// ErrorMsg : 
		/// </summary>
		[EnumTextValue("ERROR_MSG")]
		[ColumnEnum("ERROR_MSG", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ErrorMsg = 8
	}//End enum

	#endregion IntegUserAdLogDtlColumn Enum

} // end namespace
