
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeStudFund.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_STUD_FUND' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeStudFundBase : EntityBase, IFeeStudFund, IEntityId<FeeStudFundKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeStudFundEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeStudFundEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeStudFundEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeStudFund> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudFundEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudFundEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeStudFundBase"/> instance.
		///</summary>
		public FeeStudFundBase()
		{
			this.entityData = new FeeStudFundEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeStudFundBase"/> instance.
		///</summary>
		///<param name="_feeStudFundId"></param>
		///<param name="_edStudId">PG Sponsored Student</param>
		///<param name="_edAcadYearId">العام الاكاديمى</param>
		///<param name="_edCodeSemesterId">الفصل الدراسي</param>
		///<param name="_feeCdeFundId"></param>
		///<param name="_eventFromDate">فترة المؤتمر (من تاريخ – الي تاريخ)</param>
		///<param name="_eventToDate"></param>
		///<param name="_eventNameEn">اسم المؤتمر/جهة النشر/اسم الدورية العلمية</param>
		///<param name="_paperNameEn">اسم الورقة البحثية</param>
		///<param name="_totalAmount">التكلفة الإجمالية</param>
		///<param name="_fundAmount">لمبلغ المدعم من EJUST  (اقل من او يساوي التكلفة الاجمالية)</param>
		///<param name="_gsCountryNodeId">الدولة</param>
		///<param name="_memoDate">تاريخ المذكرة</param>
		///<param name="_transferFlg">تم تحويل المبلغ  نعم/لا</param>
		///<param name="_notes">description</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public FeeStudFundBase(System.Decimal _feeStudFundId, System.Decimal _edStudId, 
			System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Int32 _feeCdeFundId, 
			System.DateTime? _eventFromDate, System.DateTime? _eventToDate, System.String _eventNameEn, 
			System.String _paperNameEn, System.Decimal? _totalAmount, System.Decimal? _fundAmount, 
			System.Decimal? _gsCountryNodeId, System.DateTime? _memoDate, System.Boolean? _transferFlg, 
			System.String _notes, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new FeeStudFundEntityData();
			this.backupData = null;

			this.FeeStudFundId = _feeStudFundId;
			this.EdStudId = _edStudId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.FeeCdeFundId = _feeCdeFundId;
			this.EventFromDate = _eventFromDate;
			this.EventToDate = _eventToDate;
			this.EventNameEn = _eventNameEn;
			this.PaperNameEn = _paperNameEn;
			this.TotalAmount = _totalAmount;
			this.FundAmount = _fundAmount;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.MemoDate = _memoDate;
			this.TransferFlg = _transferFlg;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeStudFund"/> instance.
		///</summary>
		///<param name="_feeStudFundId"></param>
		///<param name="_edStudId">PG Sponsored Student</param>
		///<param name="_edAcadYearId">العام الاكاديمى</param>
		///<param name="_edCodeSemesterId">الفصل الدراسي</param>
		///<param name="_feeCdeFundId"></param>
		///<param name="_eventFromDate">فترة المؤتمر (من تاريخ – الي تاريخ)</param>
		///<param name="_eventToDate"></param>
		///<param name="_eventNameEn">اسم المؤتمر/جهة النشر/اسم الدورية العلمية</param>
		///<param name="_paperNameEn">اسم الورقة البحثية</param>
		///<param name="_totalAmount">التكلفة الإجمالية</param>
		///<param name="_fundAmount">لمبلغ المدعم من EJUST  (اقل من او يساوي التكلفة الاجمالية)</param>
		///<param name="_gsCountryNodeId">الدولة</param>
		///<param name="_memoDate">تاريخ المذكرة</param>
		///<param name="_transferFlg">تم تحويل المبلغ  نعم/لا</param>
		///<param name="_notes">description</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static FeeStudFund CreateFeeStudFund(System.Decimal _feeStudFundId, System.Decimal _edStudId, 
			System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Int32 _feeCdeFundId, 
			System.DateTime? _eventFromDate, System.DateTime? _eventToDate, System.String _eventNameEn, 
			System.String _paperNameEn, System.Decimal? _totalAmount, System.Decimal? _fundAmount, 
			System.Decimal? _gsCountryNodeId, System.DateTime? _memoDate, System.Boolean? _transferFlg, 
			System.String _notes, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			FeeStudFund newFeeStudFund = new FeeStudFund();
			newFeeStudFund.FeeStudFundId = _feeStudFundId;
			newFeeStudFund.EdStudId = _edStudId;
			newFeeStudFund.EdAcadYearId = _edAcadYearId;
			newFeeStudFund.EdCodeSemesterId = _edCodeSemesterId;
			newFeeStudFund.FeeCdeFundId = _feeCdeFundId;
			newFeeStudFund.EventFromDate = _eventFromDate;
			newFeeStudFund.EventToDate = _eventToDate;
			newFeeStudFund.EventNameEn = _eventNameEn;
			newFeeStudFund.PaperNameEn = _paperNameEn;
			newFeeStudFund.TotalAmount = _totalAmount;
			newFeeStudFund.FundAmount = _fundAmount;
			newFeeStudFund.GsCountryNodeId = _gsCountryNodeId;
			newFeeStudFund.MemoDate = _memoDate;
			newFeeStudFund.TransferFlg = _transferFlg;
			newFeeStudFund.Notes = _notes;
			newFeeStudFund.SeUserId = _seUserId;
			newFeeStudFund.LastDate = _lastDate;
			return newFeeStudFund;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeStudFundId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeStudFundId
		{
			get
			{
				return this.entityData.FeeStudFundId; 
			}
			
			set
			{
				if (this.entityData.FeeStudFundId == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.FeeStudFundId, this.entityData.FeeStudFundId);
				this.entityData.FeeStudFundId = value;
				this.EntityId.FeeStudFundId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.FeeStudFundId, this.entityData.FeeStudFundId);
				OnPropertyChanged("FeeStudFundId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_STUD_FUND_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FEE_STUD_FUND_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeStudFundId
		{
			get { return this.entityData.OriginalFeeStudFundId; }
			set { this.entityData.OriginalFeeStudFundId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		PG Sponsored Student
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"PG Sponsored Student"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		العام الاكاديمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"العام الاكاديمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeFundId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FeeCdeFundId
		{
			get
			{
				return this.entityData.FeeCdeFundId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeFundId == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.FeeCdeFundId, this.entityData.FeeCdeFundId);
				this.entityData.FeeCdeFundId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.FeeCdeFundId, this.entityData.FeeCdeFundId);
				OnPropertyChanged("FeeCdeFundId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventFromDate property. 
		///		فترة المؤتمر (من تاريخ – الي تاريخ)
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEventFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"فترة المؤتمر (من تاريخ – الي تاريخ)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EventFromDate
		{
			get
			{
				return this.entityData.EventFromDate; 
			}
			
			set
			{
				if (this.entityData.EventFromDate == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.EventFromDate, this.entityData.EventFromDate);
				this.entityData.EventFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.EventFromDate, this.entityData.EventFromDate);
				OnPropertyChanged("EventFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventToDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEventToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EventToDate
		{
			get
			{
				return this.entityData.EventToDate; 
			}
			
			set
			{
				if (this.entityData.EventToDate == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.EventToDate, this.entityData.EventToDate);
				this.entityData.EventToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.EventToDate, this.entityData.EventToDate);
				OnPropertyChanged("EventToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventNameEn property. 
		///		اسم المؤتمر/جهة النشر/اسم الدورية العلمية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم المؤتمر/جهة النشر/اسم الدورية العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String EventNameEn
		{
			get
			{
				return this.entityData.EventNameEn; 
			}
			
			set
			{
				if (this.entityData.EventNameEn == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.EventNameEn, this.entityData.EventNameEn);
				this.entityData.EventNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.EventNameEn, this.entityData.EventNameEn);
				OnPropertyChanged("EventNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaperNameEn property. 
		///		اسم الورقة البحثية
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم الورقة البحثية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String PaperNameEn
		{
			get
			{
				return this.entityData.PaperNameEn; 
			}
			
			set
			{
				if (this.entityData.PaperNameEn == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.PaperNameEn, this.entityData.PaperNameEn);
				this.entityData.PaperNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.PaperNameEn, this.entityData.PaperNameEn);
				OnPropertyChanged("PaperNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalAmount property. 
		///		التكلفة الإجمالية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"التكلفة الإجمالية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalAmount
		{
			get
			{
				return this.entityData.TotalAmount; 
			}
			
			set
			{
				if (this.entityData.TotalAmount == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.TotalAmount, this.entityData.TotalAmount);
				this.entityData.TotalAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.TotalAmount, this.entityData.TotalAmount);
				OnPropertyChanged("TotalAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FundAmount property. 
		///		لمبلغ المدعم من EJUST  (اقل من او يساوي التكلفة الاجمالية)
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFundAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"لمبلغ المدعم من EJUST  (اقل من او يساوي التكلفة الاجمالية)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FundAmount
		{
			get
			{
				return this.entityData.FundAmount; 
			}
			
			set
			{
				if (this.entityData.FundAmount == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.FundAmount, this.entityData.FundAmount);
				this.entityData.FundAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.FundAmount, this.entityData.FundAmount);
				OnPropertyChanged("FundAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		الدولة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الدولة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemoDate property. 
		///		تاريخ المذكرة
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMemoDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ المذكرة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MemoDate
		{
			get
			{
				return this.entityData.MemoDate; 
			}
			
			set
			{
				if (this.entityData.MemoDate == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.MemoDate, this.entityData.MemoDate);
				this.entityData.MemoDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.MemoDate, this.entityData.MemoDate);
				OnPropertyChanged("MemoDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransferFlg property. 
		///		تم تحويل المبلغ  نعم/لا
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTransferFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تم تحويل المبلغ  نعم/لا"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TransferFlg
		{
			get
			{
				return this.entityData.TransferFlg; 
			}
			
			set
			{
				if (this.entityData.TransferFlg == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.TransferFlg, this.entityData.TransferFlg);
				this.entityData.TransferFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.TransferFlg, this.entityData.TransferFlg);
				OnPropertyChanged("TransferFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		description
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"description"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeStudFundColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFundColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeFund"/>.
		/// </summary>
		/// <value>The source FeeCdeFund for FeeCdeFundId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeFund FeeCdeFundIdSource
      	{
            get { return entityData.FeeCdeFundIdSource; }
            set { entityData.FeeCdeFundIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EventNameEn", "Event Name En", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaperNameEn", "Paper Name En", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_STUD_FUND"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_STUD_FUND_ID", "ED_STUD_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "FEE_CDE_FUND_ID", "EVENT_FROM_DATE", "EVENT_TO_DATE", "EVENT_NAME_EN", "PAPER_NAME_EN", "TOTAL_AMOUNT", "FUND_AMOUNT", "GS_COUNTRY_NODE_ID", "MEMO_DATE", "TRANSFER_FLG", "NOTES", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeStudFundEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeStudFund) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeStudFund>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeStudFund);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeStudFund Entity 
		///</summary>
		protected virtual FeeStudFund Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeStudFund copy = new FeeStudFund();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeStudFundId = this.FeeStudFundId;
					copy.OriginalFeeStudFundId = this.OriginalFeeStudFundId;
				copy.EdStudId = this.EdStudId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.FeeCdeFundId = this.FeeCdeFundId;
				copy.EventFromDate = this.EventFromDate;
				copy.EventToDate = this.EventToDate;
				copy.EventNameEn = this.EventNameEn;
				copy.PaperNameEn = this.PaperNameEn;
				copy.TotalAmount = this.TotalAmount;
				copy.FundAmount = this.FundAmount;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.MemoDate = this.MemoDate;
				copy.TransferFlg = this.TransferFlg;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCdeFundIdSource != null && existingCopies.Contains(this.FeeCdeFundIdSource))
				copy.FeeCdeFundIdSource = existingCopies[this.FeeCdeFundIdSource] as FeeCdeFund;
			else
				copy.FeeCdeFundIdSource = MakeCopyOf(this.FeeCdeFundIdSource, existingCopies) as FeeCdeFund;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeStudFund Entity 
		///</summary>
		public virtual FeeStudFund Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeStudFund Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeStudFund DeepCopy()
		{
			return EntityHelper.Clone<FeeStudFund>(this as FeeStudFund);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeStudFundEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeStudFundEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeStudFundEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeStudFundColumn column)
		{
			switch(column)
			{
					case FeeStudFundColumn.FeeStudFundId:
					return entityData.FeeStudFundId != _originalData.FeeStudFundId;
					case FeeStudFundColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case FeeStudFundColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeStudFundColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case FeeStudFundColumn.FeeCdeFundId:
					return entityData.FeeCdeFundId != _originalData.FeeCdeFundId;
					case FeeStudFundColumn.EventFromDate:
					return entityData.EventFromDate != _originalData.EventFromDate;
					case FeeStudFundColumn.EventToDate:
					return entityData.EventToDate != _originalData.EventToDate;
					case FeeStudFundColumn.EventNameEn:
					return entityData.EventNameEn != _originalData.EventNameEn;
					case FeeStudFundColumn.PaperNameEn:
					return entityData.PaperNameEn != _originalData.PaperNameEn;
					case FeeStudFundColumn.TotalAmount:
					return entityData.TotalAmount != _originalData.TotalAmount;
					case FeeStudFundColumn.FundAmount:
					return entityData.FundAmount != _originalData.FundAmount;
					case FeeStudFundColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case FeeStudFundColumn.MemoDate:
					return entityData.MemoDate != _originalData.MemoDate;
					case FeeStudFundColumn.TransferFlg:
					return entityData.TransferFlg != _originalData.TransferFlg;
					case FeeStudFundColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeStudFundColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeStudFundColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeStudFundColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeStudFundId != _originalData.FeeStudFundId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.FeeCdeFundId != _originalData.FeeCdeFundId;
			result = result || entityData.EventFromDate != _originalData.EventFromDate;
			result = result || entityData.EventToDate != _originalData.EventToDate;
			result = result || entityData.EventNameEn != _originalData.EventNameEn;
			result = result || entityData.PaperNameEn != _originalData.PaperNameEn;
			result = result || entityData.TotalAmount != _originalData.TotalAmount;
			result = result || entityData.FundAmount != _originalData.FundAmount;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.MemoDate != _originalData.MemoDate;
			result = result || entityData.TransferFlg != _originalData.TransferFlg;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeStudFund Entity with the original data.
		///</summary>
		public FeeStudFund GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeStudFund(
				_originalData.FeeStudFundId,
				_originalData.EdStudId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.FeeCdeFundId,
				_originalData.EventFromDate,
				_originalData.EventToDate,
				_originalData.EventNameEn,
				_originalData.PaperNameEn,
				_originalData.TotalAmount,
				_originalData.FundAmount,
				_originalData.GsCountryNodeId,
				_originalData.MemoDate,
				_originalData.TransferFlg,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (FeeStudFund)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeStudFundBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeStudFundBase)
				return ValueEquals(this, (FeeStudFundBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeStudFundBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeStudFundId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					this.FeeCdeFundId.GetHashCode() ^ 
					((this.EventFromDate == null) ? string.Empty : this.EventFromDate.ToString()).GetHashCode() ^ 
					((this.EventToDate == null) ? string.Empty : this.EventToDate.ToString()).GetHashCode() ^ 
					((this.EventNameEn == null) ? string.Empty : this.EventNameEn.ToString()).GetHashCode() ^ 
					((this.PaperNameEn == null) ? string.Empty : this.PaperNameEn.ToString()).GetHashCode() ^ 
					((this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString()).GetHashCode() ^ 
					((this.FundAmount == null) ? string.Empty : this.FundAmount.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					((this.MemoDate == null) ? string.Empty : this.MemoDate.ToString()).GetHashCode() ^ 
					((this.TransferFlg == null) ? string.Empty : this.TransferFlg.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeStudFundBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeStudFundBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeStudFundBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeStudFundBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeStudFundBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeStudFundBase Object1, FeeStudFundBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeStudFundId != Object2.FeeStudFundId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if (Object1.FeeCdeFundId != Object2.FeeCdeFundId)
				equal = false;
			if ( Object1.EventFromDate != null && Object2.EventFromDate != null )
			{
				if (Object1.EventFromDate != Object2.EventFromDate)
					equal = false;
			}
			else if (Object1.EventFromDate == null ^ Object2.EventFromDate == null )
			{
				equal = false;
			}
			if ( Object1.EventToDate != null && Object2.EventToDate != null )
			{
				if (Object1.EventToDate != Object2.EventToDate)
					equal = false;
			}
			else if (Object1.EventToDate == null ^ Object2.EventToDate == null )
			{
				equal = false;
			}
			if ( Object1.EventNameEn != null && Object2.EventNameEn != null )
			{
				if (Object1.EventNameEn != Object2.EventNameEn)
					equal = false;
			}
			else if (Object1.EventNameEn == null ^ Object2.EventNameEn == null )
			{
				equal = false;
			}
			if ( Object1.PaperNameEn != null && Object2.PaperNameEn != null )
			{
				if (Object1.PaperNameEn != Object2.PaperNameEn)
					equal = false;
			}
			else if (Object1.PaperNameEn == null ^ Object2.PaperNameEn == null )
			{
				equal = false;
			}
			if ( Object1.TotalAmount != null && Object2.TotalAmount != null )
			{
				if (Object1.TotalAmount != Object2.TotalAmount)
					equal = false;
			}
			else if (Object1.TotalAmount == null ^ Object2.TotalAmount == null )
			{
				equal = false;
			}
			if ( Object1.FundAmount != null && Object2.FundAmount != null )
			{
				if (Object1.FundAmount != Object2.FundAmount)
					equal = false;
			}
			else if (Object1.FundAmount == null ^ Object2.FundAmount == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if ( Object1.MemoDate != null && Object2.MemoDate != null )
			{
				if (Object1.MemoDate != Object2.MemoDate)
					equal = false;
			}
			else if (Object1.MemoDate == null ^ Object2.MemoDate == null )
			{
				equal = false;
			}
			if ( Object1.TransferFlg != null && Object2.TransferFlg != null )
			{
				if (Object1.TransferFlg != Object2.TransferFlg)
					equal = false;
			}
			else if (Object1.TransferFlg == null ^ Object2.TransferFlg == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeStudFundBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeStudFundComparer GetComparer()
        {
            return new FeeStudFundComparer();
        }
        */

        // Comparer delegates back to FeeStudFund
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeStudFund rhs, FeeStudFundColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeStudFundColumn.FeeStudFundId:
            		return this.FeeStudFundId.CompareTo(rhs.FeeStudFundId);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.FeeCdeFundId:
            		return this.FeeCdeFundId.CompareTo(rhs.FeeCdeFundId);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.EventFromDate:
            		return this.EventFromDate.Value.CompareTo(rhs.EventFromDate.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.EventToDate:
            		return this.EventToDate.Value.CompareTo(rhs.EventToDate.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.EventNameEn:
            		return this.EventNameEn.CompareTo(rhs.EventNameEn);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.PaperNameEn:
            		return this.PaperNameEn.CompareTo(rhs.PaperNameEn);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.TotalAmount:
            		return this.TotalAmount.Value.CompareTo(rhs.TotalAmount.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.FundAmount:
            		return this.FundAmount.Value.CompareTo(rhs.FundAmount.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.MemoDate:
            		return this.MemoDate.Value.CompareTo(rhs.MemoDate.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.TransferFlg:
            		return this.TransferFlg.Value.CompareTo(rhs.TransferFlg.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeStudFundColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeStudFundKey> Members
		
		// member variable for the EntityId property
		private FeeStudFundKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeStudFundKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeStudFundKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeStudFund")
					.Append("|").Append( this.FeeStudFundId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- FeeStudFundId: {0}{17}- EdStudId: {1}{17}- EdAcadYearId: {2}{17}- EdCodeSemesterId: {3}{17}- FeeCdeFundId: {4}{17}- EventFromDate: {5}{17}- EventToDate: {6}{17}- EventNameEn: {7}{17}- PaperNameEn: {8}{17}- TotalAmount: {9}{17}- FundAmount: {10}{17}- GsCountryNodeId: {11}{17}- MemoDate: {12}{17}- TransferFlg: {13}{17}- Notes: {14}{17}- SeUserId: {15}{17}- LastDate: {16}{17}{19}", 
				this.FeeStudFundId,
				this.EdStudId,
				this.EdAcadYearId,
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				this.FeeCdeFundId,
				(this.EventFromDate == null) ? string.Empty : this.EventFromDate.ToString(),
				(this.EventToDate == null) ? string.Empty : this.EventToDate.ToString(),
				(this.EventNameEn == null) ? string.Empty : this.EventNameEn.ToString(),
				(this.PaperNameEn == null) ? string.Empty : this.PaperNameEn.ToString(),
				(this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString(),
				(this.FundAmount == null) ? string.Empty : this.FundAmount.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				(this.MemoDate == null) ? string.Empty : this.MemoDate.ToString(),
				(this.TransferFlg == null) ? string.Empty : this.TransferFlg.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_STUD_FUND' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeStudFundEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_STUD_FUND_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_STUD_FUND"</remarks>
		public System.Decimal FeeStudFundId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeStudFundId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : PG Sponsored Student
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : العام الاكاديمى
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : الفصل الدراسي
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// FEE_CDE_FUND_ID : 
		/// </summary>
		public System.Int32		  FeeCdeFundId = (int)0;
		
		/// <summary>
		/// EVENT_FROM_DATE : فترة المؤتمر (من تاريخ – الي تاريخ)
		/// </summary>
		public System.DateTime?		  EventFromDate = null;
		
		/// <summary>
		/// EVENT_TO_DATE : 
		/// </summary>
		public System.DateTime?		  EventToDate = null;
		
		/// <summary>
		/// EVENT_NAME_EN : اسم المؤتمر/جهة النشر/اسم الدورية العلمية
		/// </summary>
		public System.String		  EventNameEn = null;
		
		/// <summary>
		/// PAPER_NAME_EN : اسم الورقة البحثية
		/// </summary>
		public System.String		  PaperNameEn = null;
		
		/// <summary>
		/// TOTAL_AMOUNT : التكلفة الإجمالية
		/// </summary>
		public System.Decimal?		  TotalAmount = null;
		
		/// <summary>
		/// FUND_AMOUNT : لمبلغ المدعم من EJUST  (اقل من او يساوي التكلفة الاجمالية)
		/// </summary>
		public System.Decimal?		  FundAmount = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : الدولة
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// MEMO_DATE : تاريخ المذكرة
		/// </summary>
		public System.DateTime?		  MemoDate = null;
		
		/// <summary>
		/// TRANSFER_FLG : تم تحويل المبلغ  نعم/لا
		/// </summary>
		public System.Boolean?		  TransferFlg = null;
		
		/// <summary>
		/// NOTES : description
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private FeeCdeFund _feeCdeFundIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeFund"/>.
		/// </summary>
		/// <value>The source FeeCdeFund for FeeCdeFundId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeFund FeeCdeFundIdSource
      	{
            get { return this._feeCdeFundIdSource; }
            set { this._feeCdeFundIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeStudFundEntityData _tmp = new FeeStudFundEntityData();
						
			_tmp.FeeStudFundId = this.FeeStudFundId;
			_tmp.OriginalFeeStudFundId = this.OriginalFeeStudFundId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.FeeCdeFundId = this.FeeCdeFundId;
			_tmp.EventFromDate = this.EventFromDate;
			_tmp.EventToDate = this.EventToDate;
			_tmp.EventNameEn = this.EventNameEn;
			_tmp.PaperNameEn = this.PaperNameEn;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.FundAmount = this.FundAmount;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.MemoDate = this.MemoDate;
			_tmp.TransferFlg = this.TransferFlg;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.FeeCdeFundIdSource != null)
				_tmp.FeeCdeFundIdSource = MakeCopyOf(this.FeeCdeFundIdSource) as FeeCdeFund;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeStudFundEntityData _tmp = new FeeStudFundEntityData();
						
			_tmp.FeeStudFundId = this.FeeStudFundId;
			_tmp.OriginalFeeStudFundId = this.OriginalFeeStudFundId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.FeeCdeFundId = this.FeeCdeFundId;
			_tmp.EventFromDate = this.EventFromDate;
			_tmp.EventToDate = this.EventToDate;
			_tmp.EventNameEn = this.EventNameEn;
			_tmp.PaperNameEn = this.PaperNameEn;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.FundAmount = this.FundAmount;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.MemoDate = this.MemoDate;
			_tmp.TransferFlg = this.TransferFlg;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCdeFundIdSource != null && existingCopies.Contains(this.FeeCdeFundIdSource))
				_tmp.FeeCdeFundIdSource = existingCopies[this.FeeCdeFundIdSource] as FeeCdeFund;
			else
				_tmp.FeeCdeFundIdSource = MakeCopyOf(this.FeeCdeFundIdSource, existingCopies) as FeeCdeFund;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFundColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeStudFundColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFundColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeStudFundColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFundColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeStudFundColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeStudFundEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeStudFundEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFundColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeStudFundColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeStudFundEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeStudFundEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeStudFundEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeStudFund"/> object.
	/// </remarks>
	public class FeeStudFundEventArgs : System.EventArgs
	{
		private FeeStudFundColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudFundEventArgs class.
		///</summary>
		public FeeStudFundEventArgs(FeeStudFundColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudFundEventArgs class.
		///</summary>
		public FeeStudFundEventArgs(FeeStudFundColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeStudFundColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeStudFundColumn" />
		public FeeStudFundColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeStudFund related events.
	///</summary>
	public delegate void FeeStudFundEventHandler(object sender, FeeStudFundEventArgs e);
	
	#region FeeStudFundComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeStudFundComparer : System.Collections.Generic.IComparer<FeeStudFund>
	{
		FeeStudFundColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudFundComparer"/> class.
        /// </summary>
		public FeeStudFundComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudFundComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeStudFundComparer(FeeStudFundColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeStudFund"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeStudFund"/> to compare.</param>
        /// <param name="b">The second <c>FeeStudFund</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeStudFund a, FeeStudFund b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeStudFund entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeStudFund a, FeeStudFund b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeStudFundColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeStudFundKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeStudFund"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeStudFundKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeStudFundKey class.
		/// </summary>
		public FeeStudFundKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudFundKey class.
		/// </summary>
		public FeeStudFundKey(FeeStudFundBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeStudFundId = entity.FeeStudFundId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudFundKey class.
		/// </summary>
		public FeeStudFundKey(System.Decimal _feeStudFundId)
		{
			#region Init Properties

			this.FeeStudFundId = _feeStudFundId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeStudFundBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeStudFundBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeStudFundId property
		private System.Decimal _feeStudFundId;
		
		/// <summary>
		/// Gets or sets the FeeStudFundId property.
		/// </summary>
		public System.Decimal FeeStudFundId
		{
			get { return _feeStudFundId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeStudFundId = value;
				
				_feeStudFundId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeStudFundId = ( values["FeeStudFundId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeStudFundId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeStudFundId", FeeStudFundId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeStudFundId: {0}{1}",
								FeeStudFundId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeStudFundColumn Enum
	
	/// <summary>
	/// Enumerate the FeeStudFund columns.
	/// </summary>
	[Serializable]
	public enum FeeStudFundColumn : int
	{
		/// <summary>
		/// FeeStudFundId : 
		/// </summary>
		[EnumTextValue("FEE_STUD_FUND_ID")]
		[ColumnEnum("FEE_STUD_FUND_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeStudFundId = 1,
		/// <summary>
		/// EdStudId : PG Sponsored Student
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 2,
		/// <summary>
		/// EdAcadYearId : العام الاكاديمى
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 3,
		/// <summary>
		/// EdCodeSemesterId : الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 4,
		/// <summary>
		/// FeeCdeFundId : 
		/// </summary>
		[EnumTextValue("FEE_CDE_FUND_ID")]
		[ColumnEnum("FEE_CDE_FUND_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FeeCdeFundId = 5,
		/// <summary>
		/// EventFromDate : فترة المؤتمر (من تاريخ – الي تاريخ)
		/// </summary>
		[EnumTextValue("EVENT_FROM_DATE")]
		[ColumnEnum("EVENT_FROM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		EventFromDate = 6,
		/// <summary>
		/// EventToDate : 
		/// </summary>
		[EnumTextValue("EVENT_TO_DATE")]
		[ColumnEnum("EVENT_TO_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		EventToDate = 7,
		/// <summary>
		/// EventNameEn : اسم المؤتمر/جهة النشر/اسم الدورية العلمية
		/// </summary>
		[EnumTextValue("EVENT_NAME_EN")]
		[ColumnEnum("EVENT_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		EventNameEn = 8,
		/// <summary>
		/// PaperNameEn : اسم الورقة البحثية
		/// </summary>
		[EnumTextValue("PAPER_NAME_EN")]
		[ColumnEnum("PAPER_NAME_EN", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		PaperNameEn = 9,
		/// <summary>
		/// TotalAmount : التكلفة الإجمالية
		/// </summary>
		[EnumTextValue("TOTAL_AMOUNT")]
		[ColumnEnum("TOTAL_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalAmount = 10,
		/// <summary>
		/// FundAmount : لمبلغ المدعم من EJUST  (اقل من او يساوي التكلفة الاجمالية)
		/// </summary>
		[EnumTextValue("FUND_AMOUNT")]
		[ColumnEnum("FUND_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FundAmount = 11,
		/// <summary>
		/// GsCountryNodeId : الدولة
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 12,
		/// <summary>
		/// MemoDate : تاريخ المذكرة
		/// </summary>
		[EnumTextValue("MEMO_DATE")]
		[ColumnEnum("MEMO_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		MemoDate = 13,
		/// <summary>
		/// TransferFlg : تم تحويل المبلغ  نعم/لا
		/// </summary>
		[EnumTextValue("TRANSFER_FLG")]
		[ColumnEnum("TRANSFER_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TransferFlg = 14,
		/// <summary>
		/// Notes : description
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 15,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 16,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 17
	}//End enum

	#endregion FeeStudFundColumn Enum

} // end namespace
