
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmCdeExamGrdng.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_CDE_EXAM_GRDNG' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmCdeExamGrdngBase : EntityBase, IAdmCdeExamGrdng, IEntityId<AdmCdeExamGrdngKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmCdeExamGrdngEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmCdeExamGrdngEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmCdeExamGrdngEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmCdeExamGrdng> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdeExamGrdngEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdeExamGrdngEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmCdeExamGrdngBase"/> instance.
		///</summary>
		public AdmCdeExamGrdngBase()
		{
			this.entityData = new AdmCdeExamGrdngEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmCdeExamGrdngBase"/> instance.
		///</summary>
		///<param name="_admCdeExamGrdngId"></param>
		///<param name="_grdngAr"></param>
		///<param name="_grdngEn"></param>
		///<param name="_gradeWeight"></param>
		///<param name="_admQualFlg"></param>
		///<param name="_activeFlg"></param>
		public AdmCdeExamGrdngBase(System.Decimal _admCdeExamGrdngId, System.String _grdngAr, 
			System.String _grdngEn, System.Decimal? _gradeWeight, System.Boolean? _admQualFlg, 
			System.Boolean? _activeFlg)
		{
			this.entityData = new AdmCdeExamGrdngEntityData();
			this.backupData = null;

			this.AdmCdeExamGrdngId = _admCdeExamGrdngId;
			this.GrdngAr = _grdngAr;
			this.GrdngEn = _grdngEn;
			this.GradeWeight = _gradeWeight;
			this.AdmQualFlg = _admQualFlg;
			this.ActiveFlg = _activeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmCdeExamGrdng"/> instance.
		///</summary>
		///<param name="_admCdeExamGrdngId"></param>
		///<param name="_grdngAr"></param>
		///<param name="_grdngEn"></param>
		///<param name="_gradeWeight"></param>
		///<param name="_admQualFlg"></param>
		///<param name="_activeFlg"></param>
		public static AdmCdeExamGrdng CreateAdmCdeExamGrdng(System.Decimal _admCdeExamGrdngId, System.String _grdngAr, 
			System.String _grdngEn, System.Decimal? _gradeWeight, System.Boolean? _admQualFlg, 
			System.Boolean? _activeFlg)
		{
			AdmCdeExamGrdng newAdmCdeExamGrdng = new AdmCdeExamGrdng();
			newAdmCdeExamGrdng.AdmCdeExamGrdngId = _admCdeExamGrdngId;
			newAdmCdeExamGrdng.GrdngAr = _grdngAr;
			newAdmCdeExamGrdng.GrdngEn = _grdngEn;
			newAdmCdeExamGrdng.GradeWeight = _gradeWeight;
			newAdmCdeExamGrdng.AdmQualFlg = _admQualFlg;
			newAdmCdeExamGrdng.ActiveFlg = _activeFlg;
			return newAdmCdeExamGrdng;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmCdeExamGrdngId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmCdeExamGrdngId
		{
			get
			{
				return this.entityData.AdmCdeExamGrdngId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeExamGrdngId == value)
					return;
					
				OnColumnChanging(AdmCdeExamGrdngColumn.AdmCdeExamGrdngId, this.entityData.AdmCdeExamGrdngId);
				this.entityData.AdmCdeExamGrdngId = value;
				this.EntityId.AdmCdeExamGrdngId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeExamGrdngColumn.AdmCdeExamGrdngId, this.entityData.AdmCdeExamGrdngId);
				OnPropertyChanged("AdmCdeExamGrdngId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_CDE_EXAM_GRDNG_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_CDE_EXAM_GRDNG_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmCdeExamGrdngId
		{
			get { return this.entityData.OriginalAdmCdeExamGrdngId; }
			set { this.entityData.OriginalAdmCdeExamGrdngId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the GrdngAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String GrdngAr
		{
			get
			{
				return this.entityData.GrdngAr; 
			}
			
			set
			{
				if (this.entityData.GrdngAr == value)
					return;
					
				OnColumnChanging(AdmCdeExamGrdngColumn.GrdngAr, this.entityData.GrdngAr);
				this.entityData.GrdngAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeExamGrdngColumn.GrdngAr, this.entityData.GrdngAr);
				OnPropertyChanged("GrdngAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrdngEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String GrdngEn
		{
			get
			{
				return this.entityData.GrdngEn; 
			}
			
			set
			{
				if (this.entityData.GrdngEn == value)
					return;
					
				OnColumnChanging(AdmCdeExamGrdngColumn.GrdngEn, this.entityData.GrdngEn);
				this.entityData.GrdngEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeExamGrdngColumn.GrdngEn, this.entityData.GrdngEn);
				OnPropertyChanged("GrdngEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GradeWeight property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGradeWeightNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GradeWeight
		{
			get
			{
				return this.entityData.GradeWeight; 
			}
			
			set
			{
				if (this.entityData.GradeWeight == value)
					return;
					
				OnColumnChanging(AdmCdeExamGrdngColumn.GradeWeight, this.entityData.GradeWeight);
				this.entityData.GradeWeight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeExamGrdngColumn.GradeWeight, this.entityData.GradeWeight);
				OnPropertyChanged("GradeWeight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmQualFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAdmQualFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AdmQualFlg
		{
			get
			{
				return this.entityData.AdmQualFlg; 
			}
			
			set
			{
				if (this.entityData.AdmQualFlg == value)
					return;
					
				OnColumnChanging(AdmCdeExamGrdngColumn.AdmQualFlg, this.entityData.AdmQualFlg);
				this.entityData.AdmQualFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeExamGrdngColumn.AdmQualFlg, this.entityData.AdmQualFlg);
				OnPropertyChanged("AdmQualFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActiveFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsActiveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ActiveFlg
		{
			get
			{
				return this.entityData.ActiveFlg; 
			}
			
			set
			{
				if (this.entityData.ActiveFlg == value)
					return;
					
				OnColumnChanging(AdmCdeExamGrdngColumn.ActiveFlg, this.entityData.ActiveFlg);
				this.entityData.ActiveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeExamGrdngColumn.ActiveFlg, this.entityData.ActiveFlg);
				OnPropertyChanged("ActiveFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmPrecondQual objects
		///	which are related to this object through the relation FK_ADM_PRECOND_QUAL_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get { return entityData.AdmPrecondQualCollection; }
			set { entityData.AdmPrecondQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamCourse objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_COURSE_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamCourse> AdmPlaceExamCourseCollection
		{
			get { return entityData.AdmPlaceExamCourseCollection; }
			set { entityData.AdmPlaceExamCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCodeQualGroup objects
		///	which are related to this object through the relation FK_ED_CODE_QUAL_GROUP_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCodeQualGroup> EdCodeQualGroupCollection
		{
			get { return entityData.EdCodeQualGroupCollection; }
			set { entityData.EdCodeQualGroupCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmExamGrdngPkgDtl objects
		///	which are related to this object through the relation FK_ADM_EXAM_GRDNG_PKG_DTL_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmExamGrdngPkgDtl> AdmExamGrdngPkgDtlCollection
		{
			get { return entityData.AdmExamGrdngPkgDtlCollection; }
			set { entityData.AdmExamGrdngPkgDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppPlacementExam objects
		///	which are related to this object through the relation FK_ADM_APP_PLACEMENT_EXAM_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppPlacementExam> AdmAppPlacementExamCollection
		{
			get { return entityData.AdmAppPlacementExamCollection; }
			set { entityData.AdmAppPlacementExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudQualSubject objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_SUBJECT_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQualSubject> EdStudQualSubjectCollection
		{
			get { return entityData.EdStudQualSubjectCollection; }
			set { entityData.EdStudQualSubjectCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdePlacementExam objects
		///	which are related to this object through the relation FK_ADM_CDE_PLACEMENT_EXAM_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get { return entityData.AdmCdePlacementExamCollection; }
			set { entityData.AdmCdePlacementExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudQual objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_ADM_CDE_EXAM_GRDNG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQual> EdStudQualCollection
		{
			get { return entityData.EdStudQualCollection; }
			set { entityData.EdStudQualCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GrdngAr", "Grdng Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GrdngAr", "Grdng Ar", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GrdngEn", "Grdng En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GrdngEn", "Grdng En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_CDE_EXAM_GRDNG"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_CDE_EXAM_GRDNG_ID", "GRDNG_AR", "GRDNG_EN", "GRADE_WEIGHT", "ADM_QUAL_FLG", "ACTIVE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmCdeExamGrdngEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmCdeExamGrdng) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmCdeExamGrdng>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmCdeExamGrdng);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmCdeExamGrdng Entity 
		///</summary>
		protected virtual AdmCdeExamGrdng Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmCdeExamGrdng copy = new AdmCdeExamGrdng();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
					copy.OriginalAdmCdeExamGrdngId = this.OriginalAdmCdeExamGrdngId;
				copy.GrdngAr = this.GrdngAr;
				copy.GrdngEn = this.GrdngEn;
				copy.GradeWeight = this.GradeWeight;
				copy.AdmQualFlg = this.AdmQualFlg;
				copy.ActiveFlg = this.ActiveFlg;
			
		
			//deep copy nested objects
			copy.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			copy.AdmPlaceExamCourseCollection = (TList<AdmPlaceExamCourse>) MakeCopyOf(this.AdmPlaceExamCourseCollection, existingCopies); 
			copy.EdCodeQualGroupCollection = (TList<EdCodeQualGroup>) MakeCopyOf(this.EdCodeQualGroupCollection, existingCopies); 
			copy.AdmExamGrdngPkgDtlCollection = (TList<AdmExamGrdngPkgDtl>) MakeCopyOf(this.AdmExamGrdngPkgDtlCollection, existingCopies); 
			copy.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection, existingCopies); 
			copy.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection, existingCopies); 
			copy.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			copy.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmCdeExamGrdng Entity 
		///</summary>
		public virtual AdmCdeExamGrdng Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmCdeExamGrdng Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmCdeExamGrdng DeepCopy()
		{
			return EntityHelper.Clone<AdmCdeExamGrdng>(this as AdmCdeExamGrdng);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmCdeExamGrdngEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmCdeExamGrdngEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmCdeExamGrdngEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmCdeExamGrdngColumn column)
		{
			switch(column)
			{
					case AdmCdeExamGrdngColumn.AdmCdeExamGrdngId:
					return entityData.AdmCdeExamGrdngId != _originalData.AdmCdeExamGrdngId;
					case AdmCdeExamGrdngColumn.GrdngAr:
					return entityData.GrdngAr != _originalData.GrdngAr;
					case AdmCdeExamGrdngColumn.GrdngEn:
					return entityData.GrdngEn != _originalData.GrdngEn;
					case AdmCdeExamGrdngColumn.GradeWeight:
					return entityData.GradeWeight != _originalData.GradeWeight;
					case AdmCdeExamGrdngColumn.AdmQualFlg:
					return entityData.AdmQualFlg != _originalData.AdmQualFlg;
					case AdmCdeExamGrdngColumn.ActiveFlg:
					return entityData.ActiveFlg != _originalData.ActiveFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmCdeExamGrdngColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmCdeExamGrdngId != _originalData.AdmCdeExamGrdngId;
			result = result || entityData.GrdngAr != _originalData.GrdngAr;
			result = result || entityData.GrdngEn != _originalData.GrdngEn;
			result = result || entityData.GradeWeight != _originalData.GradeWeight;
			result = result || entityData.AdmQualFlg != _originalData.AdmQualFlg;
			result = result || entityData.ActiveFlg != _originalData.ActiveFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmCdeExamGrdng Entity with the original data.
		///</summary>
		public AdmCdeExamGrdng GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmCdeExamGrdng(
				_originalData.AdmCdeExamGrdngId,
				_originalData.GrdngAr,
				_originalData.GrdngEn,
				_originalData.GradeWeight,
				_originalData.AdmQualFlg,
				_originalData.ActiveFlg
				);
				
			return (AdmCdeExamGrdng)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmCdeExamGrdngBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmCdeExamGrdngBase)
				return ValueEquals(this, (AdmCdeExamGrdngBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmCdeExamGrdngBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmCdeExamGrdngId.GetHashCode() ^ 
					this.GrdngAr.GetHashCode() ^ 
					this.GrdngEn.GetHashCode() ^ 
					((this.GradeWeight == null) ? string.Empty : this.GradeWeight.ToString()).GetHashCode() ^ 
					((this.AdmQualFlg == null) ? string.Empty : this.AdmQualFlg.ToString()).GetHashCode() ^ 
					((this.ActiveFlg == null) ? string.Empty : this.ActiveFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmCdeExamGrdngBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmCdeExamGrdngBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmCdeExamGrdngBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmCdeExamGrdngBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmCdeExamGrdngBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmCdeExamGrdngBase Object1, AdmCdeExamGrdngBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmCdeExamGrdngId != Object2.AdmCdeExamGrdngId)
				equal = false;
			if (Object1.GrdngAr != Object2.GrdngAr)
				equal = false;
			if (Object1.GrdngEn != Object2.GrdngEn)
				equal = false;
			if ( Object1.GradeWeight != null && Object2.GradeWeight != null )
			{
				if (Object1.GradeWeight != Object2.GradeWeight)
					equal = false;
			}
			else if (Object1.GradeWeight == null ^ Object2.GradeWeight == null )
			{
				equal = false;
			}
			if ( Object1.AdmQualFlg != null && Object2.AdmQualFlg != null )
			{
				if (Object1.AdmQualFlg != Object2.AdmQualFlg)
					equal = false;
			}
			else if (Object1.AdmQualFlg == null ^ Object2.AdmQualFlg == null )
			{
				equal = false;
			}
			if ( Object1.ActiveFlg != null && Object2.ActiveFlg != null )
			{
				if (Object1.ActiveFlg != Object2.ActiveFlg)
					equal = false;
			}
			else if (Object1.ActiveFlg == null ^ Object2.ActiveFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmCdeExamGrdngBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmCdeExamGrdngComparer GetComparer()
        {
            return new AdmCdeExamGrdngComparer();
        }
        */

        // Comparer delegates back to AdmCdeExamGrdng
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmCdeExamGrdng rhs, AdmCdeExamGrdngColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmCdeExamGrdngColumn.AdmCdeExamGrdngId:
            		return this.AdmCdeExamGrdngId.CompareTo(rhs.AdmCdeExamGrdngId);
            		
            		                 
            	
            	
            	case AdmCdeExamGrdngColumn.GrdngAr:
            		return this.GrdngAr.CompareTo(rhs.GrdngAr);
            		
            		                 
            	
            	
            	case AdmCdeExamGrdngColumn.GrdngEn:
            		return this.GrdngEn.CompareTo(rhs.GrdngEn);
            		
            		                 
            	
            	
            	case AdmCdeExamGrdngColumn.GradeWeight:
            		return this.GradeWeight.Value.CompareTo(rhs.GradeWeight.Value);
            		
            		                 
            	
            	
            	case AdmCdeExamGrdngColumn.AdmQualFlg:
            		return this.AdmQualFlg.Value.CompareTo(rhs.AdmQualFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdeExamGrdngColumn.ActiveFlg:
            		return this.ActiveFlg.Value.CompareTo(rhs.ActiveFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmCdeExamGrdngKey> Members
		
		// member variable for the EntityId property
		private AdmCdeExamGrdngKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmCdeExamGrdngKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmCdeExamGrdngKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmCdeExamGrdng")
					.Append("|").Append( this.AdmCdeExamGrdngId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- AdmCdeExamGrdngId: {0}{6}- GrdngAr: {1}{6}- GrdngEn: {2}{6}- GradeWeight: {3}{6}- AdmQualFlg: {4}{6}- ActiveFlg: {5}{6}{8}", 
				this.AdmCdeExamGrdngId,
				this.GrdngAr,
				this.GrdngEn,
				(this.GradeWeight == null) ? string.Empty : this.GradeWeight.ToString(),
				(this.AdmQualFlg == null) ? string.Empty : this.AdmQualFlg.ToString(),
				(this.ActiveFlg == null) ? string.Empty : this.ActiveFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_CDE_EXAM_GRDNG' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmCdeExamGrdngEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_CDE_EXAM_GRDNG_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_CDE_EXAM_GRDNG"</remarks>
		public System.Decimal AdmCdeExamGrdngId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmCdeExamGrdngId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GRDNG_AR : 
		/// </summary>
		public System.String		  GrdngAr = string.Empty;
		
		/// <summary>
		/// GRDNG_EN : 
		/// </summary>
		public System.String		  GrdngEn = string.Empty;
		
		/// <summary>
		/// GRADE_WEIGHT : 
		/// </summary>
		public System.Decimal?		  GradeWeight = null;
		
		/// <summary>
		/// ADM_QUAL_FLG : 
		/// </summary>
		public System.Boolean?		  AdmQualFlg = null;
		
		/// <summary>
		/// ACTIVE_FLG : 
		/// </summary>
		public System.Boolean?		  ActiveFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmPrecondQualCollection
		
		private TList<AdmPrecondQual> _admPrecondQualAdmCdeExamGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPrecondQualAdmCdeExamGrdngId
		/// </summary>
		
		public TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get
			{
				if (_admPrecondQualAdmCdeExamGrdngId == null)
				{
				_admPrecondQualAdmCdeExamGrdngId = new TList<AdmPrecondQual>();
				}
	
				return _admPrecondQualAdmCdeExamGrdngId;
			}
			set { _admPrecondQualAdmCdeExamGrdngId = value; }
		}
		
		#endregion

		#region AdmPlaceExamCourseCollection
		
		private TList<AdmPlaceExamCourse> _admPlaceExamCourseAdmCdeExamGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamCourseAdmCdeExamGrdngId
		/// </summary>
		
		public TList<AdmPlaceExamCourse> AdmPlaceExamCourseCollection
		{
			get
			{
				if (_admPlaceExamCourseAdmCdeExamGrdngId == null)
				{
				_admPlaceExamCourseAdmCdeExamGrdngId = new TList<AdmPlaceExamCourse>();
				}
	
				return _admPlaceExamCourseAdmCdeExamGrdngId;
			}
			set { _admPlaceExamCourseAdmCdeExamGrdngId = value; }
		}
		
		#endregion

		#region EdCodeQualGroupCollection
		
		private TList<EdCodeQualGroup> _edCodeQualGroupAdmCdeExamMinGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCodeQualGroupAdmCdeExamMinGrdngId
		/// </summary>
		
		public TList<EdCodeQualGroup> EdCodeQualGroupCollection
		{
			get
			{
				if (_edCodeQualGroupAdmCdeExamMinGrdngId == null)
				{
				_edCodeQualGroupAdmCdeExamMinGrdngId = new TList<EdCodeQualGroup>();
				}
	
				return _edCodeQualGroupAdmCdeExamMinGrdngId;
			}
			set { _edCodeQualGroupAdmCdeExamMinGrdngId = value; }
		}
		
		#endregion

		#region AdmExamGrdngPkgDtlCollection
		
		private TList<AdmExamGrdngPkgDtl> _admExamGrdngPkgDtlAdmCdeExamGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admExamGrdngPkgDtlAdmCdeExamGrdngId
		/// </summary>
		
		public TList<AdmExamGrdngPkgDtl> AdmExamGrdngPkgDtlCollection
		{
			get
			{
				if (_admExamGrdngPkgDtlAdmCdeExamGrdngId == null)
				{
				_admExamGrdngPkgDtlAdmCdeExamGrdngId = new TList<AdmExamGrdngPkgDtl>();
				}
	
				return _admExamGrdngPkgDtlAdmCdeExamGrdngId;
			}
			set { _admExamGrdngPkgDtlAdmCdeExamGrdngId = value; }
		}
		
		#endregion

		#region AdmAppPlacementExamCollection
		
		private TList<AdmAppPlacementExam> _admAppPlacementExamAdmCdeExamGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppPlacementExamAdmCdeExamGrdngId
		/// </summary>
		
		public TList<AdmAppPlacementExam> AdmAppPlacementExamCollection
		{
			get
			{
				if (_admAppPlacementExamAdmCdeExamGrdngId == null)
				{
				_admAppPlacementExamAdmCdeExamGrdngId = new TList<AdmAppPlacementExam>();
				}
	
				return _admAppPlacementExamAdmCdeExamGrdngId;
			}
			set { _admAppPlacementExamAdmCdeExamGrdngId = value; }
		}
		
		#endregion

		#region EdStudQualSubjectCollection
		
		private TList<EdStudQualSubject> _edStudQualSubjectAdmCdeExamGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualSubjectAdmCdeExamGrdngId
		/// </summary>
		
		public TList<EdStudQualSubject> EdStudQualSubjectCollection
		{
			get
			{
				if (_edStudQualSubjectAdmCdeExamGrdngId == null)
				{
				_edStudQualSubjectAdmCdeExamGrdngId = new TList<EdStudQualSubject>();
				}
	
				return _edStudQualSubjectAdmCdeExamGrdngId;
			}
			set { _edStudQualSubjectAdmCdeExamGrdngId = value; }
		}
		
		#endregion

		#region AdmCdePlacementExamCollection
		
		private TList<AdmCdePlacementExam> _admCdePlacementExamAdmCdeExamMinGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdePlacementExamAdmCdeExamMinGrdngId
		/// </summary>
		
		public TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get
			{
				if (_admCdePlacementExamAdmCdeExamMinGrdngId == null)
				{
				_admCdePlacementExamAdmCdeExamMinGrdngId = new TList<AdmCdePlacementExam>();
				}
	
				return _admCdePlacementExamAdmCdeExamMinGrdngId;
			}
			set { _admCdePlacementExamAdmCdeExamMinGrdngId = value; }
		}
		
		#endregion

		#region EdStudQualCollection
		
		private TList<EdStudQual> _edStudQualAdmCdeExamGrdngId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualAdmCdeExamGrdngId
		/// </summary>
		
		public TList<EdStudQual> EdStudQualCollection
		{
			get
			{
				if (_edStudQualAdmCdeExamGrdngId == null)
				{
				_edStudQualAdmCdeExamGrdngId = new TList<EdStudQual>();
				}
	
				return _edStudQualAdmCdeExamGrdngId;
			}
			set { _edStudQualAdmCdeExamGrdngId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmCdeExamGrdngEntityData _tmp = new AdmCdeExamGrdngEntityData();
						
			_tmp.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
			_tmp.OriginalAdmCdeExamGrdngId = this.OriginalAdmCdeExamGrdngId;
			
			_tmp.GrdngAr = this.GrdngAr;
			_tmp.GrdngEn = this.GrdngEn;
			_tmp.GradeWeight = this.GradeWeight;
			_tmp.AdmQualFlg = this.AdmQualFlg;
			_tmp.ActiveFlg = this.ActiveFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admPrecondQualAdmCdeExamGrdngId != null)
				_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection); 
			if (this._admPlaceExamCourseAdmCdeExamGrdngId != null)
				_tmp.AdmPlaceExamCourseCollection = (TList<AdmPlaceExamCourse>) MakeCopyOf(this.AdmPlaceExamCourseCollection); 
			if (this._edCodeQualGroupAdmCdeExamMinGrdngId != null)
				_tmp.EdCodeQualGroupCollection = (TList<EdCodeQualGroup>) MakeCopyOf(this.EdCodeQualGroupCollection); 
			if (this._admExamGrdngPkgDtlAdmCdeExamGrdngId != null)
				_tmp.AdmExamGrdngPkgDtlCollection = (TList<AdmExamGrdngPkgDtl>) MakeCopyOf(this.AdmExamGrdngPkgDtlCollection); 
			if (this._admAppPlacementExamAdmCdeExamGrdngId != null)
				_tmp.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection); 
			if (this._edStudQualSubjectAdmCdeExamGrdngId != null)
				_tmp.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection); 
			if (this._admCdePlacementExamAdmCdeExamMinGrdngId != null)
				_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection); 
			if (this._edStudQualAdmCdeExamGrdngId != null)
				_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmCdeExamGrdngEntityData _tmp = new AdmCdeExamGrdngEntityData();
						
			_tmp.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
			_tmp.OriginalAdmCdeExamGrdngId = this.OriginalAdmCdeExamGrdngId;
			
			_tmp.GrdngAr = this.GrdngAr;
			_tmp.GrdngEn = this.GrdngEn;
			_tmp.GradeWeight = this.GradeWeight;
			_tmp.AdmQualFlg = this.AdmQualFlg;
			_tmp.ActiveFlg = this.ActiveFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			_tmp.AdmPlaceExamCourseCollection = (TList<AdmPlaceExamCourse>) MakeCopyOf(this.AdmPlaceExamCourseCollection, existingCopies); 
			_tmp.EdCodeQualGroupCollection = (TList<EdCodeQualGroup>) MakeCopyOf(this.EdCodeQualGroupCollection, existingCopies); 
			_tmp.AdmExamGrdngPkgDtlCollection = (TList<AdmExamGrdngPkgDtl>) MakeCopyOf(this.AdmExamGrdngPkgDtlCollection, existingCopies); 
			_tmp.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection, existingCopies); 
			_tmp.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection, existingCopies); 
			_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeExamGrdngColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmCdeExamGrdngColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeExamGrdngColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmCdeExamGrdngColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeExamGrdngColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmCdeExamGrdngColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmCdeExamGrdngEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmCdeExamGrdngEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeExamGrdngColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmCdeExamGrdngColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmCdeExamGrdngEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmCdeExamGrdngEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmCdeExamGrdngEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmCdeExamGrdng"/> object.
	/// </remarks>
	public class AdmCdeExamGrdngEventArgs : System.EventArgs
	{
		private AdmCdeExamGrdngColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdeExamGrdngEventArgs class.
		///</summary>
		public AdmCdeExamGrdngEventArgs(AdmCdeExamGrdngColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdeExamGrdngEventArgs class.
		///</summary>
		public AdmCdeExamGrdngEventArgs(AdmCdeExamGrdngColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmCdeExamGrdngColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmCdeExamGrdngColumn" />
		public AdmCdeExamGrdngColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmCdeExamGrdng related events.
	///</summary>
	public delegate void AdmCdeExamGrdngEventHandler(object sender, AdmCdeExamGrdngEventArgs e);
	
	#region AdmCdeExamGrdngComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmCdeExamGrdngComparer : System.Collections.Generic.IComparer<AdmCdeExamGrdng>
	{
		AdmCdeExamGrdngColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdeExamGrdngComparer"/> class.
        /// </summary>
		public AdmCdeExamGrdngComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdeExamGrdngComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmCdeExamGrdngComparer(AdmCdeExamGrdngColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmCdeExamGrdng"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmCdeExamGrdng"/> to compare.</param>
        /// <param name="b">The second <c>AdmCdeExamGrdng</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmCdeExamGrdng a, AdmCdeExamGrdng b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmCdeExamGrdng entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmCdeExamGrdng a, AdmCdeExamGrdng b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmCdeExamGrdngColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmCdeExamGrdngKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmCdeExamGrdng"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmCdeExamGrdngKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngKey class.
		/// </summary>
		public AdmCdeExamGrdngKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngKey class.
		/// </summary>
		public AdmCdeExamGrdngKey(AdmCdeExamGrdngBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmCdeExamGrdngId = entity.AdmCdeExamGrdngId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeExamGrdngKey class.
		/// </summary>
		public AdmCdeExamGrdngKey(System.Decimal _admCdeExamGrdngId)
		{
			#region Init Properties

			this.AdmCdeExamGrdngId = _admCdeExamGrdngId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmCdeExamGrdngBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmCdeExamGrdngBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmCdeExamGrdngId property
		private System.Decimal _admCdeExamGrdngId;
		
		/// <summary>
		/// Gets or sets the AdmCdeExamGrdngId property.
		/// </summary>
		public System.Decimal AdmCdeExamGrdngId
		{
			get { return _admCdeExamGrdngId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmCdeExamGrdngId = value;
				
				_admCdeExamGrdngId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmCdeExamGrdngId = ( values["AdmCdeExamGrdngId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmCdeExamGrdngId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmCdeExamGrdngId", AdmCdeExamGrdngId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmCdeExamGrdngId: {0}{1}",
								AdmCdeExamGrdngId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmCdeExamGrdngColumn Enum
	
	/// <summary>
	/// Enumerate the AdmCdeExamGrdng columns.
	/// </summary>
	[Serializable]
	public enum AdmCdeExamGrdngColumn : int
	{
		/// <summary>
		/// AdmCdeExamGrdngId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_EXAM_GRDNG_ID")]
		[ColumnEnum("ADM_CDE_EXAM_GRDNG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmCdeExamGrdngId = 1,
		/// <summary>
		/// GrdngAr : 
		/// </summary>
		[EnumTextValue("GRDNG_AR")]
		[ColumnEnum("GRDNG_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		GrdngAr = 2,
		/// <summary>
		/// GrdngEn : 
		/// </summary>
		[EnumTextValue("GRDNG_EN")]
		[ColumnEnum("GRDNG_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		GrdngEn = 3,
		/// <summary>
		/// GradeWeight : 
		/// </summary>
		[EnumTextValue("GRADE_WEIGHT")]
		[ColumnEnum("GRADE_WEIGHT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GradeWeight = 4,
		/// <summary>
		/// AdmQualFlg : 
		/// </summary>
		[EnumTextValue("ADM_QUAL_FLG")]
		[ColumnEnum("ADM_QUAL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AdmQualFlg = 5,
		/// <summary>
		/// ActiveFlg : 
		/// </summary>
		[EnumTextValue("ACTIVE_FLG")]
		[ColumnEnum("ACTIVE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ActiveFlg = 6
	}//End enum

	#endregion AdmCdeExamGrdngColumn Enum

} // end namespace
