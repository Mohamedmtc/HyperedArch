
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCodeQualGroup.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_CODE_QUAL_GROUP' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCodeQualGroupBase : EntityBase, IEdCodeQualGroup, IEntityId<EdCodeQualGroupKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCodeQualGroupEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCodeQualGroupEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCodeQualGroupEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCodeQualGroup> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeQualGroupEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeQualGroupEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCodeQualGroupBase"/> instance.
		///</summary>
		public EdCodeQualGroupBase()
		{
			this.entityData = new EdCodeQualGroupEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCodeQualGroupBase"/> instance.
		///</summary>
		///<param name="_edCodeQualGroupId">SAT1-Sat2-OL-AS-AL</param>
		///<param name="_edCodeQualBranId"></param>
		///<param name="_qualGrpAr">OL /AS/AL</param>
		///<param name="_qualGrpEn"></param>
		///<param name="_minPrcnt">if app qual group sub%>70</param>
		///<param name="_grpPrcnt">take 15 % from this group mark total</param>
		///<param name="_gradeTypeId">درجات - تقديرات</param>
		///<param name="_admExamGrdngPkgId">IG Group Grdng Pkg OL AS AL</param>
		///<param name="_admCdeExamMinGrdngId">اقل تقدير نجاح</param>
		///<param name="_minCrsCount"></param>
		///<param name="_maxCrsCount"></param>
		///<param name="_grpMaxMark">النهاية العظمى للمجموعة فى حالة درجات</param>
		///<param name="_editFlg">يمك للطالب تعديل نسبة المجموعة</param>
		///<param name="_qualGroupEquation"></param>
		public EdCodeQualGroupBase(System.Decimal _edCodeQualGroupId, System.Decimal _edCodeQualBranId, 
			System.String _qualGrpAr, System.String _qualGrpEn, System.Decimal? _minPrcnt, 
			System.Decimal? _grpPrcnt, System.Int32? _gradeTypeId, System.Decimal? _admExamGrdngPkgId, 
			System.Decimal? _admCdeExamMinGrdngId, System.Int32? _minCrsCount, System.Int32? _maxCrsCount, 
			System.Int32? _grpMaxMark, System.Boolean? _editFlg, System.String _qualGroupEquation)
		{
			this.entityData = new EdCodeQualGroupEntityData();
			this.backupData = null;

			this.EdCodeQualGroupId = _edCodeQualGroupId;
			this.EdCodeQualBranId = _edCodeQualBranId;
			this.QualGrpAr = _qualGrpAr;
			this.QualGrpEn = _qualGrpEn;
			this.MinPrcnt = _minPrcnt;
			this.GrpPrcnt = _grpPrcnt;
			this.GradeTypeId = _gradeTypeId;
			this.AdmExamGrdngPkgId = _admExamGrdngPkgId;
			this.AdmCdeExamMinGrdngId = _admCdeExamMinGrdngId;
			this.MinCrsCount = _minCrsCount;
			this.MaxCrsCount = _maxCrsCount;
			this.GrpMaxMark = _grpMaxMark;
			this.EditFlg = _editFlg;
			this.QualGroupEquation = _qualGroupEquation;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCodeQualGroup"/> instance.
		///</summary>
		///<param name="_edCodeQualGroupId">SAT1-Sat2-OL-AS-AL</param>
		///<param name="_edCodeQualBranId"></param>
		///<param name="_qualGrpAr">OL /AS/AL</param>
		///<param name="_qualGrpEn"></param>
		///<param name="_minPrcnt">if app qual group sub%>70</param>
		///<param name="_grpPrcnt">take 15 % from this group mark total</param>
		///<param name="_gradeTypeId">درجات - تقديرات</param>
		///<param name="_admExamGrdngPkgId">IG Group Grdng Pkg OL AS AL</param>
		///<param name="_admCdeExamMinGrdngId">اقل تقدير نجاح</param>
		///<param name="_minCrsCount"></param>
		///<param name="_maxCrsCount"></param>
		///<param name="_grpMaxMark">النهاية العظمى للمجموعة فى حالة درجات</param>
		///<param name="_editFlg">يمك للطالب تعديل نسبة المجموعة</param>
		///<param name="_qualGroupEquation"></param>
		public static EdCodeQualGroup CreateEdCodeQualGroup(System.Decimal _edCodeQualGroupId, System.Decimal _edCodeQualBranId, 
			System.String _qualGrpAr, System.String _qualGrpEn, System.Decimal? _minPrcnt, 
			System.Decimal? _grpPrcnt, System.Int32? _gradeTypeId, System.Decimal? _admExamGrdngPkgId, 
			System.Decimal? _admCdeExamMinGrdngId, System.Int32? _minCrsCount, System.Int32? _maxCrsCount, 
			System.Int32? _grpMaxMark, System.Boolean? _editFlg, System.String _qualGroupEquation)
		{
			EdCodeQualGroup newEdCodeQualGroup = new EdCodeQualGroup();
			newEdCodeQualGroup.EdCodeQualGroupId = _edCodeQualGroupId;
			newEdCodeQualGroup.EdCodeQualBranId = _edCodeQualBranId;
			newEdCodeQualGroup.QualGrpAr = _qualGrpAr;
			newEdCodeQualGroup.QualGrpEn = _qualGrpEn;
			newEdCodeQualGroup.MinPrcnt = _minPrcnt;
			newEdCodeQualGroup.GrpPrcnt = _grpPrcnt;
			newEdCodeQualGroup.GradeTypeId = _gradeTypeId;
			newEdCodeQualGroup.AdmExamGrdngPkgId = _admExamGrdngPkgId;
			newEdCodeQualGroup.AdmCdeExamMinGrdngId = _admCdeExamMinGrdngId;
			newEdCodeQualGroup.MinCrsCount = _minCrsCount;
			newEdCodeQualGroup.MaxCrsCount = _maxCrsCount;
			newEdCodeQualGroup.GrpMaxMark = _grpMaxMark;
			newEdCodeQualGroup.EditFlg = _editFlg;
			newEdCodeQualGroup.QualGroupEquation = _qualGroupEquation;
			return newEdCodeQualGroup;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCodeQualGroupId property. 
		///		SAT1-Sat2-OL-AS-AL
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"SAT1-Sat2-OL-AS-AL"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCodeQualGroupId
		{
			get
			{
				return this.entityData.EdCodeQualGroupId; 
			}
			
			set
			{
				if (this.entityData.EdCodeQualGroupId == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.EdCodeQualGroupId, this.entityData.EdCodeQualGroupId);
				this.entityData.EdCodeQualGroupId = value;
				this.EntityId.EdCodeQualGroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.EdCodeQualGroupId, this.entityData.EdCodeQualGroupId);
				OnPropertyChanged("EdCodeQualGroupId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_CODE_QUAL_GROUP_ID property.
		///		SAT1-Sat2-OL-AS-AL
		/// </summary>
		/// <remarks>This is the original value of the ED_CODE_QUAL_GROUP_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCodeQualGroupId
		{
			get { return this.entityData.OriginalEdCodeQualGroupId; }
			set { this.entityData.OriginalEdCodeQualGroupId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeQualBranId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeQualBranId
		{
			get
			{
				return this.entityData.EdCodeQualBranId; 
			}
			
			set
			{
				if (this.entityData.EdCodeQualBranId == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.EdCodeQualBranId, this.entityData.EdCodeQualBranId);
				this.entityData.EdCodeQualBranId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.EdCodeQualBranId, this.entityData.EdCodeQualBranId);
				OnPropertyChanged("EdCodeQualBranId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualGrpAr property. 
		///		OL /AS/AL
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"OL /AS/AL"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String QualGrpAr
		{
			get
			{
				return this.entityData.QualGrpAr; 
			}
			
			set
			{
				if (this.entityData.QualGrpAr == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.QualGrpAr, this.entityData.QualGrpAr);
				this.entityData.QualGrpAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.QualGrpAr, this.entityData.QualGrpAr);
				OnPropertyChanged("QualGrpAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualGrpEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String QualGrpEn
		{
			get
			{
				return this.entityData.QualGrpEn; 
			}
			
			set
			{
				if (this.entityData.QualGrpEn == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.QualGrpEn, this.entityData.QualGrpEn);
				this.entityData.QualGrpEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.QualGrpEn, this.entityData.QualGrpEn);
				OnPropertyChanged("QualGrpEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinPrcnt property. 
		///		if app qual group sub%>70
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"if app qual group sub%>70"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinPrcnt
		{
			get
			{
				return this.entityData.MinPrcnt; 
			}
			
			set
			{
				if (this.entityData.MinPrcnt == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.MinPrcnt, this.entityData.MinPrcnt);
				this.entityData.MinPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.MinPrcnt, this.entityData.MinPrcnt);
				OnPropertyChanged("MinPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrpPrcnt property. 
		///		take 15 % from this group mark total
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGrpPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"take 15 % from this group mark total"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GrpPrcnt
		{
			get
			{
				return this.entityData.GrpPrcnt; 
			}
			
			set
			{
				if (this.entityData.GrpPrcnt == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.GrpPrcnt, this.entityData.GrpPrcnt);
				this.entityData.GrpPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.GrpPrcnt, this.entityData.GrpPrcnt);
				OnPropertyChanged("GrpPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GradeTypeId property. 
		///		درجات - تقديرات
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGradeTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجات - تقديرات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GradeTypeId
		{
			get
			{
				return this.entityData.GradeTypeId; 
			}
			
			set
			{
				if (this.entityData.GradeTypeId == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.GradeTypeId, this.entityData.GradeTypeId);
				this.entityData.GradeTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.GradeTypeId, this.entityData.GradeTypeId);
				OnPropertyChanged("GradeTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmExamGrdngPkgId property. 
		///		IG Group Grdng Pkg OL AS AL
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmExamGrdngPkgIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"IG Group Grdng Pkg OL AS AL"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmExamGrdngPkgId
		{
			get
			{
				return this.entityData.AdmExamGrdngPkgId; 
			}
			
			set
			{
				if (this.entityData.AdmExamGrdngPkgId == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.AdmExamGrdngPkgId, this.entityData.AdmExamGrdngPkgId);
				this.entityData.AdmExamGrdngPkgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.AdmExamGrdngPkgId, this.entityData.AdmExamGrdngPkgId);
				OnPropertyChanged("AdmExamGrdngPkgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeExamMinGrdngId property. 
		///		اقل تقدير نجاح
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeExamMinGrdngIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اقل تقدير نجاح"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeExamMinGrdngId
		{
			get
			{
				return this.entityData.AdmCdeExamMinGrdngId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeExamMinGrdngId == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.AdmCdeExamMinGrdngId, this.entityData.AdmCdeExamMinGrdngId);
				this.entityData.AdmCdeExamMinGrdngId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.AdmCdeExamMinGrdngId, this.entityData.AdmCdeExamMinGrdngId);
				OnPropertyChanged("AdmCdeExamMinGrdngId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinCrsCount property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMinCrsCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MinCrsCount
		{
			get
			{
				return this.entityData.MinCrsCount; 
			}
			
			set
			{
				if (this.entityData.MinCrsCount == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.MinCrsCount, this.entityData.MinCrsCount);
				this.entityData.MinCrsCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.MinCrsCount, this.entityData.MinCrsCount);
				OnPropertyChanged("MinCrsCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCrsCount property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaxCrsCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaxCrsCount
		{
			get
			{
				return this.entityData.MaxCrsCount; 
			}
			
			set
			{
				if (this.entityData.MaxCrsCount == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.MaxCrsCount, this.entityData.MaxCrsCount);
				this.entityData.MaxCrsCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.MaxCrsCount, this.entityData.MaxCrsCount);
				OnPropertyChanged("MaxCrsCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrpMaxMark property. 
		///		النهاية العظمى للمجموعة فى حالة درجات
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGrpMaxMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"النهاية العظمى للمجموعة فى حالة درجات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GrpMaxMark
		{
			get
			{
				return this.entityData.GrpMaxMark; 
			}
			
			set
			{
				if (this.entityData.GrpMaxMark == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.GrpMaxMark, this.entityData.GrpMaxMark);
				this.entityData.GrpMaxMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.GrpMaxMark, this.entityData.GrpMaxMark);
				OnPropertyChanged("GrpMaxMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EditFlg property. 
		///		يمك للطالب تعديل نسبة المجموعة
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEditFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يمك للطالب تعديل نسبة المجموعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EditFlg
		{
			get
			{
				return this.entityData.EditFlg; 
			}
			
			set
			{
				if (this.entityData.EditFlg == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.EditFlg, this.entityData.EditFlg);
				this.entityData.EditFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.EditFlg, this.entityData.EditFlg);
				OnPropertyChanged("EditFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualGroupEquation property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String QualGroupEquation
		{
			get
			{
				return this.entityData.QualGroupEquation; 
			}
			
			set
			{
				if (this.entityData.QualGroupEquation == value)
					return;
					
				OnColumnChanging(EdCodeQualGroupColumn.QualGroupEquation, this.entityData.QualGroupEquation);
				this.entityData.QualGroupEquation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualGroupColumn.QualGroupEquation, this.entityData.QualGroupEquation);
				OnPropertyChanged("QualGroupEquation");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamMinGrdngId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeExamGrdng AdmCdeExamMinGrdngIdSource
      	{
            get { return entityData.AdmCdeExamMinGrdngIdSource; }
            set { entityData.AdmCdeExamMinGrdngIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmExamGrdngPkg"/>.
		/// </summary>
		/// <value>The source AdmExamGrdngPkg for AdmExamGrdngPkgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmExamGrdngPkg AdmExamGrdngPkgIdSource
      	{
            get { return entityData.AdmExamGrdngPkgIdSource; }
            set { entityData.AdmExamGrdngPkgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualBrn"/>.
		/// </summary>
		/// <value>The source EdCdeQualBrn for EdCodeQualBranId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeQualBrn EdCodeQualBranIdSource
      	{
            get { return entityData.EdCodeQualBranIdSource; }
            set { entityData.EdCodeQualBranIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdCodeQualSubject objects
		///	which are related to this object through the relation FK_ED_CODE_QUAL_SUBJECT_ED_CODE_QUAL_GROUP
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCodeQualSubject> EdCodeQualSubjectCollection
		{
			get { return entityData.EdCodeQualSubjectCollection; }
			set { entityData.EdCodeQualSubjectCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudQualGroup objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_GROUP_ED_CODE_QUAL_GROUP
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQualGroup> EdStudQualGroupCollection
		{
			get { return entityData.EdStudQualGroupCollection; }
			set { entityData.EdStudQualGroupCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudQualSubject objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_SUBJECT_ED_CODE_QUAL_GROUP
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQualSubject> EdStudQualSubjectCollection
		{
			get { return entityData.EdStudQualSubjectCollection; }
			set { entityData.EdStudQualSubjectCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QualGrpAr", "Qual Grp Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QualGrpEn", "Qual Grp En", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_CODE_QUAL_GROUP"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_CODE_QUAL_GROUP_ID", "ED_CODE_QUAL_BRAN_ID", "QUAL_GRP_AR", "QUAL_GRP_EN", "MIN_PRCNT", "GRP_PRCNT", "GRADE_TYPE_ID", "ADM_EXAM_GRDNG_PKG_ID", "ADM_CDE_EXAM_MIN_GRDNG_ID", "MIN_CRS_COUNT", "MAX_CRS_COUNT", "GRP_MAX_MARK", "EDIT_FLG", "QUAL_GROUP_EQUATION"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCodeQualGroupEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCodeQualGroup) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCodeQualGroup>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCodeQualGroup);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCodeQualGroup Entity 
		///</summary>
		protected virtual EdCodeQualGroup Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCodeQualGroup copy = new EdCodeQualGroup();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCodeQualGroupId = this.EdCodeQualGroupId;
					copy.OriginalEdCodeQualGroupId = this.OriginalEdCodeQualGroupId;
				copy.EdCodeQualBranId = this.EdCodeQualBranId;
				copy.QualGrpAr = this.QualGrpAr;
				copy.QualGrpEn = this.QualGrpEn;
				copy.MinPrcnt = this.MinPrcnt;
				copy.GrpPrcnt = this.GrpPrcnt;
				copy.GradeTypeId = this.GradeTypeId;
				copy.AdmExamGrdngPkgId = this.AdmExamGrdngPkgId;
				copy.AdmCdeExamMinGrdngId = this.AdmCdeExamMinGrdngId;
				copy.MinCrsCount = this.MinCrsCount;
				copy.MaxCrsCount = this.MaxCrsCount;
				copy.GrpMaxMark = this.GrpMaxMark;
				copy.EditFlg = this.EditFlg;
				copy.QualGroupEquation = this.QualGroupEquation;
			
			if (this.AdmCdeExamMinGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamMinGrdngIdSource))
				copy.AdmCdeExamMinGrdngIdSource = existingCopies[this.AdmCdeExamMinGrdngIdSource] as AdmCdeExamGrdng;
			else
				copy.AdmCdeExamMinGrdngIdSource = MakeCopyOf(this.AdmCdeExamMinGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AdmExamGrdngPkgIdSource != null && existingCopies.Contains(this.AdmExamGrdngPkgIdSource))
				copy.AdmExamGrdngPkgIdSource = existingCopies[this.AdmExamGrdngPkgIdSource] as AdmExamGrdngPkg;
			else
				copy.AdmExamGrdngPkgIdSource = MakeCopyOf(this.AdmExamGrdngPkgIdSource, existingCopies) as AdmExamGrdngPkg;
			if (this.EdCodeQualBranIdSource != null && existingCopies.Contains(this.EdCodeQualBranIdSource))
				copy.EdCodeQualBranIdSource = existingCopies[this.EdCodeQualBranIdSource] as EdCdeQualBrn;
			else
				copy.EdCodeQualBranIdSource = MakeCopyOf(this.EdCodeQualBranIdSource, existingCopies) as EdCdeQualBrn;
		
			//deep copy nested objects
			copy.EdCodeQualSubjectCollection = (TList<EdCodeQualSubject>) MakeCopyOf(this.EdCodeQualSubjectCollection, existingCopies); 
			copy.EdStudQualGroupCollection = (TList<EdStudQualGroup>) MakeCopyOf(this.EdStudQualGroupCollection, existingCopies); 
			copy.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCodeQualGroup Entity 
		///</summary>
		public virtual EdCodeQualGroup Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCodeQualGroup Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCodeQualGroup DeepCopy()
		{
			return EntityHelper.Clone<EdCodeQualGroup>(this as EdCodeQualGroup);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCodeQualGroupEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCodeQualGroupEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCodeQualGroupEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCodeQualGroupColumn column)
		{
			switch(column)
			{
					case EdCodeQualGroupColumn.EdCodeQualGroupId:
					return entityData.EdCodeQualGroupId != _originalData.EdCodeQualGroupId;
					case EdCodeQualGroupColumn.EdCodeQualBranId:
					return entityData.EdCodeQualBranId != _originalData.EdCodeQualBranId;
					case EdCodeQualGroupColumn.QualGrpAr:
					return entityData.QualGrpAr != _originalData.QualGrpAr;
					case EdCodeQualGroupColumn.QualGrpEn:
					return entityData.QualGrpEn != _originalData.QualGrpEn;
					case EdCodeQualGroupColumn.MinPrcnt:
					return entityData.MinPrcnt != _originalData.MinPrcnt;
					case EdCodeQualGroupColumn.GrpPrcnt:
					return entityData.GrpPrcnt != _originalData.GrpPrcnt;
					case EdCodeQualGroupColumn.GradeTypeId:
					return entityData.GradeTypeId != _originalData.GradeTypeId;
					case EdCodeQualGroupColumn.AdmExamGrdngPkgId:
					return entityData.AdmExamGrdngPkgId != _originalData.AdmExamGrdngPkgId;
					case EdCodeQualGroupColumn.AdmCdeExamMinGrdngId:
					return entityData.AdmCdeExamMinGrdngId != _originalData.AdmCdeExamMinGrdngId;
					case EdCodeQualGroupColumn.MinCrsCount:
					return entityData.MinCrsCount != _originalData.MinCrsCount;
					case EdCodeQualGroupColumn.MaxCrsCount:
					return entityData.MaxCrsCount != _originalData.MaxCrsCount;
					case EdCodeQualGroupColumn.GrpMaxMark:
					return entityData.GrpMaxMark != _originalData.GrpMaxMark;
					case EdCodeQualGroupColumn.EditFlg:
					return entityData.EditFlg != _originalData.EditFlg;
					case EdCodeQualGroupColumn.QualGroupEquation:
					return entityData.QualGroupEquation != _originalData.QualGroupEquation;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCodeQualGroupColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCodeQualGroupId != _originalData.EdCodeQualGroupId;
			result = result || entityData.EdCodeQualBranId != _originalData.EdCodeQualBranId;
			result = result || entityData.QualGrpAr != _originalData.QualGrpAr;
			result = result || entityData.QualGrpEn != _originalData.QualGrpEn;
			result = result || entityData.MinPrcnt != _originalData.MinPrcnt;
			result = result || entityData.GrpPrcnt != _originalData.GrpPrcnt;
			result = result || entityData.GradeTypeId != _originalData.GradeTypeId;
			result = result || entityData.AdmExamGrdngPkgId != _originalData.AdmExamGrdngPkgId;
			result = result || entityData.AdmCdeExamMinGrdngId != _originalData.AdmCdeExamMinGrdngId;
			result = result || entityData.MinCrsCount != _originalData.MinCrsCount;
			result = result || entityData.MaxCrsCount != _originalData.MaxCrsCount;
			result = result || entityData.GrpMaxMark != _originalData.GrpMaxMark;
			result = result || entityData.EditFlg != _originalData.EditFlg;
			result = result || entityData.QualGroupEquation != _originalData.QualGroupEquation;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCodeQualGroup Entity with the original data.
		///</summary>
		public EdCodeQualGroup GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCodeQualGroup(
				_originalData.EdCodeQualGroupId,
				_originalData.EdCodeQualBranId,
				_originalData.QualGrpAr,
				_originalData.QualGrpEn,
				_originalData.MinPrcnt,
				_originalData.GrpPrcnt,
				_originalData.GradeTypeId,
				_originalData.AdmExamGrdngPkgId,
				_originalData.AdmCdeExamMinGrdngId,
				_originalData.MinCrsCount,
				_originalData.MaxCrsCount,
				_originalData.GrpMaxMark,
				_originalData.EditFlg,
				_originalData.QualGroupEquation
				);
				
			return (EdCodeQualGroup)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCodeQualGroupBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCodeQualGroupBase)
				return ValueEquals(this, (EdCodeQualGroupBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCodeQualGroupBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCodeQualGroupId.GetHashCode() ^ 
					this.EdCodeQualBranId.GetHashCode() ^ 
					((this.QualGrpAr == null) ? string.Empty : this.QualGrpAr.ToString()).GetHashCode() ^ 
					((this.QualGrpEn == null) ? string.Empty : this.QualGrpEn.ToString()).GetHashCode() ^ 
					((this.MinPrcnt == null) ? string.Empty : this.MinPrcnt.ToString()).GetHashCode() ^ 
					((this.GrpPrcnt == null) ? string.Empty : this.GrpPrcnt.ToString()).GetHashCode() ^ 
					((this.GradeTypeId == null) ? string.Empty : this.GradeTypeId.ToString()).GetHashCode() ^ 
					((this.AdmExamGrdngPkgId == null) ? string.Empty : this.AdmExamGrdngPkgId.ToString()).GetHashCode() ^ 
					((this.AdmCdeExamMinGrdngId == null) ? string.Empty : this.AdmCdeExamMinGrdngId.ToString()).GetHashCode() ^ 
					((this.MinCrsCount == null) ? string.Empty : this.MinCrsCount.ToString()).GetHashCode() ^ 
					((this.MaxCrsCount == null) ? string.Empty : this.MaxCrsCount.ToString()).GetHashCode() ^ 
					((this.GrpMaxMark == null) ? string.Empty : this.GrpMaxMark.ToString()).GetHashCode() ^ 
					((this.EditFlg == null) ? string.Empty : this.EditFlg.ToString()).GetHashCode() ^ 
					((this.QualGroupEquation == null) ? string.Empty : this.QualGroupEquation.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCodeQualGroupBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCodeQualGroupBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCodeQualGroupBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCodeQualGroupBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCodeQualGroupBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCodeQualGroupBase Object1, EdCodeQualGroupBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCodeQualGroupId != Object2.EdCodeQualGroupId)
				equal = false;
			if (Object1.EdCodeQualBranId != Object2.EdCodeQualBranId)
				equal = false;
			if ( Object1.QualGrpAr != null && Object2.QualGrpAr != null )
			{
				if (Object1.QualGrpAr != Object2.QualGrpAr)
					equal = false;
			}
			else if (Object1.QualGrpAr == null ^ Object2.QualGrpAr == null )
			{
				equal = false;
			}
			if ( Object1.QualGrpEn != null && Object2.QualGrpEn != null )
			{
				if (Object1.QualGrpEn != Object2.QualGrpEn)
					equal = false;
			}
			else if (Object1.QualGrpEn == null ^ Object2.QualGrpEn == null )
			{
				equal = false;
			}
			if ( Object1.MinPrcnt != null && Object2.MinPrcnt != null )
			{
				if (Object1.MinPrcnt != Object2.MinPrcnt)
					equal = false;
			}
			else if (Object1.MinPrcnt == null ^ Object2.MinPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.GrpPrcnt != null && Object2.GrpPrcnt != null )
			{
				if (Object1.GrpPrcnt != Object2.GrpPrcnt)
					equal = false;
			}
			else if (Object1.GrpPrcnt == null ^ Object2.GrpPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.GradeTypeId != null && Object2.GradeTypeId != null )
			{
				if (Object1.GradeTypeId != Object2.GradeTypeId)
					equal = false;
			}
			else if (Object1.GradeTypeId == null ^ Object2.GradeTypeId == null )
			{
				equal = false;
			}
			if ( Object1.AdmExamGrdngPkgId != null && Object2.AdmExamGrdngPkgId != null )
			{
				if (Object1.AdmExamGrdngPkgId != Object2.AdmExamGrdngPkgId)
					equal = false;
			}
			else if (Object1.AdmExamGrdngPkgId == null ^ Object2.AdmExamGrdngPkgId == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeExamMinGrdngId != null && Object2.AdmCdeExamMinGrdngId != null )
			{
				if (Object1.AdmCdeExamMinGrdngId != Object2.AdmCdeExamMinGrdngId)
					equal = false;
			}
			else if (Object1.AdmCdeExamMinGrdngId == null ^ Object2.AdmCdeExamMinGrdngId == null )
			{
				equal = false;
			}
			if ( Object1.MinCrsCount != null && Object2.MinCrsCount != null )
			{
				if (Object1.MinCrsCount != Object2.MinCrsCount)
					equal = false;
			}
			else if (Object1.MinCrsCount == null ^ Object2.MinCrsCount == null )
			{
				equal = false;
			}
			if ( Object1.MaxCrsCount != null && Object2.MaxCrsCount != null )
			{
				if (Object1.MaxCrsCount != Object2.MaxCrsCount)
					equal = false;
			}
			else if (Object1.MaxCrsCount == null ^ Object2.MaxCrsCount == null )
			{
				equal = false;
			}
			if ( Object1.GrpMaxMark != null && Object2.GrpMaxMark != null )
			{
				if (Object1.GrpMaxMark != Object2.GrpMaxMark)
					equal = false;
			}
			else if (Object1.GrpMaxMark == null ^ Object2.GrpMaxMark == null )
			{
				equal = false;
			}
			if ( Object1.EditFlg != null && Object2.EditFlg != null )
			{
				if (Object1.EditFlg != Object2.EditFlg)
					equal = false;
			}
			else if (Object1.EditFlg == null ^ Object2.EditFlg == null )
			{
				equal = false;
			}
			if ( Object1.QualGroupEquation != null && Object2.QualGroupEquation != null )
			{
				if (Object1.QualGroupEquation != Object2.QualGroupEquation)
					equal = false;
			}
			else if (Object1.QualGroupEquation == null ^ Object2.QualGroupEquation == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCodeQualGroupBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCodeQualGroupComparer GetComparer()
        {
            return new EdCodeQualGroupComparer();
        }
        */

        // Comparer delegates back to EdCodeQualGroup
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCodeQualGroup rhs, EdCodeQualGroupColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCodeQualGroupColumn.EdCodeQualGroupId:
            		return this.EdCodeQualGroupId.CompareTo(rhs.EdCodeQualGroupId);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.EdCodeQualBranId:
            		return this.EdCodeQualBranId.CompareTo(rhs.EdCodeQualBranId);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.QualGrpAr:
            		return this.QualGrpAr.CompareTo(rhs.QualGrpAr);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.QualGrpEn:
            		return this.QualGrpEn.CompareTo(rhs.QualGrpEn);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.MinPrcnt:
            		return this.MinPrcnt.Value.CompareTo(rhs.MinPrcnt.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.GrpPrcnt:
            		return this.GrpPrcnt.Value.CompareTo(rhs.GrpPrcnt.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.GradeTypeId:
            		return this.GradeTypeId.Value.CompareTo(rhs.GradeTypeId.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.AdmExamGrdngPkgId:
            		return this.AdmExamGrdngPkgId.Value.CompareTo(rhs.AdmExamGrdngPkgId.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.AdmCdeExamMinGrdngId:
            		return this.AdmCdeExamMinGrdngId.Value.CompareTo(rhs.AdmCdeExamMinGrdngId.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.MinCrsCount:
            		return this.MinCrsCount.Value.CompareTo(rhs.MinCrsCount.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.MaxCrsCount:
            		return this.MaxCrsCount.Value.CompareTo(rhs.MaxCrsCount.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.GrpMaxMark:
            		return this.GrpMaxMark.Value.CompareTo(rhs.GrpMaxMark.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.EditFlg:
            		return this.EditFlg.Value.CompareTo(rhs.EditFlg.Value);
            		
            		                 
            	
            	
            	case EdCodeQualGroupColumn.QualGroupEquation:
            		return this.QualGroupEquation.CompareTo(rhs.QualGroupEquation);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCodeQualGroupKey> Members
		
		// member variable for the EntityId property
		private EdCodeQualGroupKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCodeQualGroupKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCodeQualGroupKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCodeQualGroup")
					.Append("|").Append( this.EdCodeQualGroupId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- EdCodeQualGroupId: {0}{14}- EdCodeQualBranId: {1}{14}- QualGrpAr: {2}{14}- QualGrpEn: {3}{14}- MinPrcnt: {4}{14}- GrpPrcnt: {5}{14}- GradeTypeId: {6}{14}- AdmExamGrdngPkgId: {7}{14}- AdmCdeExamMinGrdngId: {8}{14}- MinCrsCount: {9}{14}- MaxCrsCount: {10}{14}- GrpMaxMark: {11}{14}- EditFlg: {12}{14}- QualGroupEquation: {13}{14}{16}", 
				this.EdCodeQualGroupId,
				this.EdCodeQualBranId,
				(this.QualGrpAr == null) ? string.Empty : this.QualGrpAr.ToString(),
				(this.QualGrpEn == null) ? string.Empty : this.QualGrpEn.ToString(),
				(this.MinPrcnt == null) ? string.Empty : this.MinPrcnt.ToString(),
				(this.GrpPrcnt == null) ? string.Empty : this.GrpPrcnt.ToString(),
				(this.GradeTypeId == null) ? string.Empty : this.GradeTypeId.ToString(),
				(this.AdmExamGrdngPkgId == null) ? string.Empty : this.AdmExamGrdngPkgId.ToString(),
				(this.AdmCdeExamMinGrdngId == null) ? string.Empty : this.AdmCdeExamMinGrdngId.ToString(),
				(this.MinCrsCount == null) ? string.Empty : this.MinCrsCount.ToString(),
				(this.MaxCrsCount == null) ? string.Empty : this.MaxCrsCount.ToString(),
				(this.GrpMaxMark == null) ? string.Empty : this.GrpMaxMark.ToString(),
				(this.EditFlg == null) ? string.Empty : this.EditFlg.ToString(),
				(this.QualGroupEquation == null) ? string.Empty : this.QualGroupEquation.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_CODE_QUAL_GROUP' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCodeQualGroupEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_CODE_QUAL_GROUP_ID : SAT1-Sat2-OL-AS-AL
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_CODE_QUAL_GROUP"</remarks>
		public System.Decimal EdCodeQualGroupId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCodeQualGroupId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_QUAL_BRAN_ID : 
		/// </summary>
		public System.Decimal		  EdCodeQualBranId = 0.0m;
		
		/// <summary>
		/// QUAL_GRP_AR : OL /AS/AL
		/// </summary>
		public System.String		  QualGrpAr = null;
		
		/// <summary>
		/// QUAL_GRP_EN : 
		/// </summary>
		public System.String		  QualGrpEn = null;
		
		/// <summary>
		/// MIN_PRCNT : if app qual group sub%>70
		/// </summary>
		public System.Decimal?		  MinPrcnt = null;
		
		/// <summary>
		/// GRP_PRCNT : take 15 % from this group mark total
		/// </summary>
		public System.Decimal?		  GrpPrcnt = null;
		
		/// <summary>
		/// GRADE_TYPE_ID : درجات - تقديرات
		/// </summary>
		public System.Int32?		  GradeTypeId = null;
		
		/// <summary>
		/// ADM_EXAM_GRDNG_PKG_ID : IG Group Grdng Pkg OL AS AL
		/// </summary>
		public System.Decimal?		  AdmExamGrdngPkgId = null;
		
		/// <summary>
		/// ADM_CDE_EXAM_MIN_GRDNG_ID : اقل تقدير نجاح
		/// </summary>
		public System.Decimal?		  AdmCdeExamMinGrdngId = null;
		
		/// <summary>
		/// MIN_CRS_COUNT : 
		/// </summary>
		public System.Int32?		  MinCrsCount = null;
		
		/// <summary>
		/// MAX_CRS_COUNT : 
		/// </summary>
		public System.Int32?		  MaxCrsCount = null;
		
		/// <summary>
		/// GRP_MAX_MARK : النهاية العظمى للمجموعة فى حالة درجات
		/// </summary>
		public System.Int32?		  GrpMaxMark = null;
		
		/// <summary>
		/// EDIT_FLG : يمك للطالب تعديل نسبة المجموعة
		/// </summary>
		public System.Boolean?		  EditFlg = null;
		
		/// <summary>
		/// QUAL_GROUP_EQUATION : 
		/// </summary>
		public System.String		  QualGroupEquation = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdeExamGrdng _admCdeExamMinGrdngIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamMinGrdngId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeExamGrdng AdmCdeExamMinGrdngIdSource
      	{
            get { return this._admCdeExamMinGrdngIdSource; }
            set { this._admCdeExamMinGrdngIdSource = value; }
      	}
		private AdmExamGrdngPkg _admExamGrdngPkgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmExamGrdngPkg"/>.
		/// </summary>
		/// <value>The source AdmExamGrdngPkg for AdmExamGrdngPkgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmExamGrdngPkg AdmExamGrdngPkgIdSource
      	{
            get { return this._admExamGrdngPkgIdSource; }
            set { this._admExamGrdngPkgIdSource = value; }
      	}
		private EdCdeQualBrn _edCodeQualBranIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualBrn"/>.
		/// </summary>
		/// <value>The source EdCdeQualBrn for EdCodeQualBranId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeQualBrn EdCodeQualBranIdSource
      	{
            get { return this._edCodeQualBranIdSource; }
            set { this._edCodeQualBranIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdCodeQualSubjectCollection
		
		private TList<EdCodeQualSubject> _edCodeQualSubjectEdCodeQualGroupId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCodeQualSubjectEdCodeQualGroupId
		/// </summary>
		
		public TList<EdCodeQualSubject> EdCodeQualSubjectCollection
		{
			get
			{
				if (_edCodeQualSubjectEdCodeQualGroupId == null)
				{
				_edCodeQualSubjectEdCodeQualGroupId = new TList<EdCodeQualSubject>();
				}
	
				return _edCodeQualSubjectEdCodeQualGroupId;
			}
			set { _edCodeQualSubjectEdCodeQualGroupId = value; }
		}
		
		#endregion

		#region EdStudQualGroupCollection
		
		private TList<EdStudQualGroup> _edStudQualGroupEdCodeQualGroupId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualGroupEdCodeQualGroupId
		/// </summary>
		
		public TList<EdStudQualGroup> EdStudQualGroupCollection
		{
			get
			{
				if (_edStudQualGroupEdCodeQualGroupId == null)
				{
				_edStudQualGroupEdCodeQualGroupId = new TList<EdStudQualGroup>();
				}
	
				return _edStudQualGroupEdCodeQualGroupId;
			}
			set { _edStudQualGroupEdCodeQualGroupId = value; }
		}
		
		#endregion

		#region EdStudQualSubjectCollection
		
		private TList<EdStudQualSubject> _edStudQualSubjectEdCodeQualGroupId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualSubjectEdCodeQualGroupId
		/// </summary>
		
		public TList<EdStudQualSubject> EdStudQualSubjectCollection
		{
			get
			{
				if (_edStudQualSubjectEdCodeQualGroupId == null)
				{
				_edStudQualSubjectEdCodeQualGroupId = new TList<EdStudQualSubject>();
				}
	
				return _edStudQualSubjectEdCodeQualGroupId;
			}
			set { _edStudQualSubjectEdCodeQualGroupId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCodeQualGroupEntityData _tmp = new EdCodeQualGroupEntityData();
						
			_tmp.EdCodeQualGroupId = this.EdCodeQualGroupId;
			_tmp.OriginalEdCodeQualGroupId = this.OriginalEdCodeQualGroupId;
			
			_tmp.EdCodeQualBranId = this.EdCodeQualBranId;
			_tmp.QualGrpAr = this.QualGrpAr;
			_tmp.QualGrpEn = this.QualGrpEn;
			_tmp.MinPrcnt = this.MinPrcnt;
			_tmp.GrpPrcnt = this.GrpPrcnt;
			_tmp.GradeTypeId = this.GradeTypeId;
			_tmp.AdmExamGrdngPkgId = this.AdmExamGrdngPkgId;
			_tmp.AdmCdeExamMinGrdngId = this.AdmCdeExamMinGrdngId;
			_tmp.MinCrsCount = this.MinCrsCount;
			_tmp.MaxCrsCount = this.MaxCrsCount;
			_tmp.GrpMaxMark = this.GrpMaxMark;
			_tmp.EditFlg = this.EditFlg;
			_tmp.QualGroupEquation = this.QualGroupEquation;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeExamMinGrdngIdSource != null)
				_tmp.AdmCdeExamMinGrdngIdSource = MakeCopyOf(this.AdmCdeExamMinGrdngIdSource) as AdmCdeExamGrdng;
			if (this.AdmExamGrdngPkgIdSource != null)
				_tmp.AdmExamGrdngPkgIdSource = MakeCopyOf(this.AdmExamGrdngPkgIdSource) as AdmExamGrdngPkg;
			if (this.EdCodeQualBranIdSource != null)
				_tmp.EdCodeQualBranIdSource = MakeCopyOf(this.EdCodeQualBranIdSource) as EdCdeQualBrn;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edCodeQualSubjectEdCodeQualGroupId != null)
				_tmp.EdCodeQualSubjectCollection = (TList<EdCodeQualSubject>) MakeCopyOf(this.EdCodeQualSubjectCollection); 
			if (this._edStudQualGroupEdCodeQualGroupId != null)
				_tmp.EdStudQualGroupCollection = (TList<EdStudQualGroup>) MakeCopyOf(this.EdStudQualGroupCollection); 
			if (this._edStudQualSubjectEdCodeQualGroupId != null)
				_tmp.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCodeQualGroupEntityData _tmp = new EdCodeQualGroupEntityData();
						
			_tmp.EdCodeQualGroupId = this.EdCodeQualGroupId;
			_tmp.OriginalEdCodeQualGroupId = this.OriginalEdCodeQualGroupId;
			
			_tmp.EdCodeQualBranId = this.EdCodeQualBranId;
			_tmp.QualGrpAr = this.QualGrpAr;
			_tmp.QualGrpEn = this.QualGrpEn;
			_tmp.MinPrcnt = this.MinPrcnt;
			_tmp.GrpPrcnt = this.GrpPrcnt;
			_tmp.GradeTypeId = this.GradeTypeId;
			_tmp.AdmExamGrdngPkgId = this.AdmExamGrdngPkgId;
			_tmp.AdmCdeExamMinGrdngId = this.AdmCdeExamMinGrdngId;
			_tmp.MinCrsCount = this.MinCrsCount;
			_tmp.MaxCrsCount = this.MaxCrsCount;
			_tmp.GrpMaxMark = this.GrpMaxMark;
			_tmp.EditFlg = this.EditFlg;
			_tmp.QualGroupEquation = this.QualGroupEquation;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeExamMinGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamMinGrdngIdSource))
				_tmp.AdmCdeExamMinGrdngIdSource = existingCopies[this.AdmCdeExamMinGrdngIdSource] as AdmCdeExamGrdng;
			else
				_tmp.AdmCdeExamMinGrdngIdSource = MakeCopyOf(this.AdmCdeExamMinGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AdmExamGrdngPkgIdSource != null && existingCopies.Contains(this.AdmExamGrdngPkgIdSource))
				_tmp.AdmExamGrdngPkgIdSource = existingCopies[this.AdmExamGrdngPkgIdSource] as AdmExamGrdngPkg;
			else
				_tmp.AdmExamGrdngPkgIdSource = MakeCopyOf(this.AdmExamGrdngPkgIdSource, existingCopies) as AdmExamGrdngPkg;
			if (this.EdCodeQualBranIdSource != null && existingCopies.Contains(this.EdCodeQualBranIdSource))
				_tmp.EdCodeQualBranIdSource = existingCopies[this.EdCodeQualBranIdSource] as EdCdeQualBrn;
			else
				_tmp.EdCodeQualBranIdSource = MakeCopyOf(this.EdCodeQualBranIdSource, existingCopies) as EdCdeQualBrn;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdCodeQualSubjectCollection = (TList<EdCodeQualSubject>) MakeCopyOf(this.EdCodeQualSubjectCollection, existingCopies); 
			_tmp.EdStudQualGroupCollection = (TList<EdStudQualGroup>) MakeCopyOf(this.EdStudQualGroupCollection, existingCopies); 
			_tmp.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualGroupColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCodeQualGroupColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualGroupColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCodeQualGroupColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualGroupColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCodeQualGroupColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCodeQualGroupEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCodeQualGroupEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualGroupColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCodeQualGroupColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCodeQualGroupEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCodeQualGroupEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCodeQualGroupEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCodeQualGroup"/> object.
	/// </remarks>
	public class EdCodeQualGroupEventArgs : System.EventArgs
	{
		private EdCodeQualGroupColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeQualGroupEventArgs class.
		///</summary>
		public EdCodeQualGroupEventArgs(EdCodeQualGroupColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeQualGroupEventArgs class.
		///</summary>
		public EdCodeQualGroupEventArgs(EdCodeQualGroupColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCodeQualGroupColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCodeQualGroupColumn" />
		public EdCodeQualGroupColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCodeQualGroup related events.
	///</summary>
	public delegate void EdCodeQualGroupEventHandler(object sender, EdCodeQualGroupEventArgs e);
	
	#region EdCodeQualGroupComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCodeQualGroupComparer : System.Collections.Generic.IComparer<EdCodeQualGroup>
	{
		EdCodeQualGroupColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeQualGroupComparer"/> class.
        /// </summary>
		public EdCodeQualGroupComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeQualGroupComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCodeQualGroupComparer(EdCodeQualGroupColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCodeQualGroup"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCodeQualGroup"/> to compare.</param>
        /// <param name="b">The second <c>EdCodeQualGroup</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCodeQualGroup a, EdCodeQualGroup b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCodeQualGroup entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCodeQualGroup a, EdCodeQualGroup b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCodeQualGroupColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCodeQualGroupKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCodeQualGroup"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCodeQualGroupKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupKey class.
		/// </summary>
		public EdCodeQualGroupKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupKey class.
		/// </summary>
		public EdCodeQualGroupKey(EdCodeQualGroupBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCodeQualGroupId = entity.EdCodeQualGroupId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeQualGroupKey class.
		/// </summary>
		public EdCodeQualGroupKey(System.Decimal _edCodeQualGroupId)
		{
			#region Init Properties

			this.EdCodeQualGroupId = _edCodeQualGroupId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCodeQualGroupBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCodeQualGroupBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCodeQualGroupId property
		private System.Decimal _edCodeQualGroupId;
		
		/// <summary>
		/// Gets or sets the EdCodeQualGroupId property.
		/// </summary>
		public System.Decimal EdCodeQualGroupId
		{
			get { return _edCodeQualGroupId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCodeQualGroupId = value;
				
				_edCodeQualGroupId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCodeQualGroupId = ( values["EdCodeQualGroupId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCodeQualGroupId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCodeQualGroupId", EdCodeQualGroupId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCodeQualGroupId: {0}{1}",
								EdCodeQualGroupId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCodeQualGroupColumn Enum
	
	/// <summary>
	/// Enumerate the EdCodeQualGroup columns.
	/// </summary>
	[Serializable]
	public enum EdCodeQualGroupColumn : int
	{
		/// <summary>
		/// EdCodeQualGroupId : SAT1-Sat2-OL-AS-AL
		/// </summary>
		[EnumTextValue("ED_CODE_QUAL_GROUP_ID")]
		[ColumnEnum("ED_CODE_QUAL_GROUP_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCodeQualGroupId = 1,
		/// <summary>
		/// EdCodeQualBranId : 
		/// </summary>
		[EnumTextValue("ED_CODE_QUAL_BRAN_ID")]
		[ColumnEnum("ED_CODE_QUAL_BRAN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeQualBranId = 2,
		/// <summary>
		/// QualGrpAr : OL /AS/AL
		/// </summary>
		[EnumTextValue("QUAL_GRP_AR")]
		[ColumnEnum("QUAL_GRP_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		QualGrpAr = 3,
		/// <summary>
		/// QualGrpEn : 
		/// </summary>
		[EnumTextValue("QUAL_GRP_EN")]
		[ColumnEnum("QUAL_GRP_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		QualGrpEn = 4,
		/// <summary>
		/// MinPrcnt : if app qual group sub%>70
		/// </summary>
		[EnumTextValue("MIN_PRCNT")]
		[ColumnEnum("MIN_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinPrcnt = 5,
		/// <summary>
		/// GrpPrcnt : take 15 % from this group mark total
		/// </summary>
		[EnumTextValue("GRP_PRCNT")]
		[ColumnEnum("GRP_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GrpPrcnt = 6,
		/// <summary>
		/// GradeTypeId : درجات - تقديرات
		/// </summary>
		[EnumTextValue("GRADE_TYPE_ID")]
		[ColumnEnum("GRADE_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GradeTypeId = 7,
		/// <summary>
		/// AdmExamGrdngPkgId : IG Group Grdng Pkg OL AS AL
		/// </summary>
		[EnumTextValue("ADM_EXAM_GRDNG_PKG_ID")]
		[ColumnEnum("ADM_EXAM_GRDNG_PKG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmExamGrdngPkgId = 8,
		/// <summary>
		/// AdmCdeExamMinGrdngId : اقل تقدير نجاح
		/// </summary>
		[EnumTextValue("ADM_CDE_EXAM_MIN_GRDNG_ID")]
		[ColumnEnum("ADM_CDE_EXAM_MIN_GRDNG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeExamMinGrdngId = 9,
		/// <summary>
		/// MinCrsCount : 
		/// </summary>
		[EnumTextValue("MIN_CRS_COUNT")]
		[ColumnEnum("MIN_CRS_COUNT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MinCrsCount = 10,
		/// <summary>
		/// MaxCrsCount : 
		/// </summary>
		[EnumTextValue("MAX_CRS_COUNT")]
		[ColumnEnum("MAX_CRS_COUNT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaxCrsCount = 11,
		/// <summary>
		/// GrpMaxMark : النهاية العظمى للمجموعة فى حالة درجات
		/// </summary>
		[EnumTextValue("GRP_MAX_MARK")]
		[ColumnEnum("GRP_MAX_MARK", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GrpMaxMark = 12,
		/// <summary>
		/// EditFlg : يمك للطالب تعديل نسبة المجموعة
		/// </summary>
		[EnumTextValue("EDIT_FLG")]
		[ColumnEnum("EDIT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EditFlg = 13,
		/// <summary>
		/// QualGroupEquation : 
		/// </summary>
		[EnumTextValue("QUAL_GROUP_EQUATION")]
		[ColumnEnum("QUAL_GROUP_EQUATION", typeof(System.String), System.Data.DbType.String, false, false, true)]
		QualGroupEquation = 14
	}//End enum

	#endregion EdCodeQualGroupColumn Enum

} // end namespace
