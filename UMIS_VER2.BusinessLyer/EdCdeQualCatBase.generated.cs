
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCdeQualCat.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_CDE_QUAL_CAT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCdeQualCatBase : EntityBase, IEdCdeQualCat, IEntityId<EdCdeQualCatKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCdeQualCatEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCdeQualCatEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCdeQualCatEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCdeQualCat> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCdeQualCatEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCdeQualCatEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCdeQualCatBase"/> instance.
		///</summary>
		public EdCdeQualCatBase()
		{
			this.entityData = new EdCdeQualCatEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCdeQualCatBase"/> instance.
		///</summary>
		///<param name="_edCdeQualCatId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_seatNoFlg"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_admRegStepsId"></param>
		///<param name="_usrPwdFlg"></param>
		///<param name="_schoolTypeFlg"></param>
		public EdCdeQualCatBase(System.Decimal _edCdeQualCatId, System.String _descrAr, 
			System.String _descrEn, System.Boolean? _seatNoFlg, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _asCodeDegreeId, System.Decimal? _admRegStepsId, System.Boolean? _usrPwdFlg, 
			System.Boolean? _schoolTypeFlg)
		{
			this.entityData = new EdCdeQualCatEntityData();
			this.backupData = null;

			this.EdCdeQualCatId = _edCdeQualCatId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.SeatNoFlg = _seatNoFlg;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AdmRegStepsId = _admRegStepsId;
			this.UsrPwdFlg = _usrPwdFlg;
			this.SchoolTypeFlg = _schoolTypeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCdeQualCat"/> instance.
		///</summary>
		///<param name="_edCdeQualCatId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_seatNoFlg"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_admRegStepsId"></param>
		///<param name="_usrPwdFlg"></param>
		///<param name="_schoolTypeFlg"></param>
		public static EdCdeQualCat CreateEdCdeQualCat(System.Decimal _edCdeQualCatId, System.String _descrAr, 
			System.String _descrEn, System.Boolean? _seatNoFlg, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _asCodeDegreeId, System.Decimal? _admRegStepsId, System.Boolean? _usrPwdFlg, 
			System.Boolean? _schoolTypeFlg)
		{
			EdCdeQualCat newEdCdeQualCat = new EdCdeQualCat();
			newEdCdeQualCat.EdCdeQualCatId = _edCdeQualCatId;
			newEdCdeQualCat.DescrAr = _descrAr;
			newEdCdeQualCat.DescrEn = _descrEn;
			newEdCdeQualCat.SeatNoFlg = _seatNoFlg;
			newEdCdeQualCat.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newEdCdeQualCat.AsCodeDegreeId = _asCodeDegreeId;
			newEdCdeQualCat.AdmRegStepsId = _admRegStepsId;
			newEdCdeQualCat.UsrPwdFlg = _usrPwdFlg;
			newEdCdeQualCat.SchoolTypeFlg = _schoolTypeFlg;
			return newEdCdeQualCat;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCdeQualCatId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCdeQualCatId
		{
			get
			{
				return this.entityData.EdCdeQualCatId; 
			}
			
			set
			{
				if (this.entityData.EdCdeQualCatId == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.EdCdeQualCatId, this.entityData.EdCdeQualCatId);
				this.entityData.EdCdeQualCatId = value;
				this.EntityId.EdCdeQualCatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.EdCdeQualCatId, this.entityData.EdCdeQualCatId);
				OnPropertyChanged("EdCdeQualCatId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_CDE_QUAL_CAT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_CDE_QUAL_CAT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCdeQualCatId
		{
			get { return this.entityData.OriginalEdCdeQualCatId; }
			set { this.entityData.OriginalEdCdeQualCatId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeatNoFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSeatNoFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? SeatNoFlg
		{
			get
			{
				return this.entityData.SeatNoFlg; 
			}
			
			set
			{
				if (this.entityData.SeatNoFlg == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.SeatNoFlg, this.entityData.SeatNoFlg);
				this.entityData.SeatNoFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.SeatNoFlg, this.entityData.SeatNoFlg);
				OnPropertyChanged("SeatNoFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		مسلسل الدرجة العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الدرجة العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmRegStepsId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmRegStepsIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmRegStepsId
		{
			get
			{
				return this.entityData.AdmRegStepsId; 
			}
			
			set
			{
				if (this.entityData.AdmRegStepsId == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.AdmRegStepsId, this.entityData.AdmRegStepsId);
				this.entityData.AdmRegStepsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.AdmRegStepsId, this.entityData.AdmRegStepsId);
				OnPropertyChanged("AdmRegStepsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UsrPwdFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsUsrPwdFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? UsrPwdFlg
		{
			get
			{
				return this.entityData.UsrPwdFlg; 
			}
			
			set
			{
				if (this.entityData.UsrPwdFlg == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.UsrPwdFlg, this.entityData.UsrPwdFlg);
				this.entityData.UsrPwdFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.UsrPwdFlg, this.entityData.UsrPwdFlg);
				OnPropertyChanged("UsrPwdFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchoolTypeFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSchoolTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? SchoolTypeFlg
		{
			get
			{
				return this.entityData.SchoolTypeFlg; 
			}
			
			set
			{
				if (this.entityData.SchoolTypeFlg == value)
					return;
					
				OnColumnChanging(EdCdeQualCatColumn.SchoolTypeFlg, this.entityData.SchoolTypeFlg);
				this.entityData.SchoolTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCdeQualCatColumn.SchoolTypeFlg, this.entityData.SchoolTypeFlg);
				OnPropertyChanged("SchoolTypeFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmRegSteps"/>.
		/// </summary>
		/// <value>The source AdmRegSteps for AdmRegStepsId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmRegSteps AdmRegStepsIdSource
      	{
            get { return entityData.AdmRegStepsIdSource; }
            set { entityData.AdmRegStepsIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeCdeDiscType objects
		///	which are related to this object through the relation FK_FEE_CDE_DISC_TYPE_ED_CDE_QUAL_CAT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCdeDiscType> FeeCdeDiscTypeCollection
		{
			get { return entityData.FeeCdeDiscTypeCollection; }
			set { entityData.FeeCdeDiscTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudQual objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_ED_CDE_QUAL_CAT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQual> EdStudQualCollection
		{
			get { return entityData.EdStudQualCollection; }
			set { entityData.EdStudQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCodeQual objects
		///	which are related to this object through the relation FK_ED_CODE_QUAL_ED_CDE_QUAL_CAT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCodeQual> EdCodeQualCollection
		{
			get { return entityData.EdCodeQualCollection; }
			set { entityData.EdCodeQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmFeeQualCat objects
		///	which are related to this object through the relation FK_ADM_FEE_QUAL_CAT_ED_CDE_QUAL_CAT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmFeeQualCat> AdmFeeQualCatCollection
		{
			get { return entityData.AdmFeeQualCatCollection; }
			set { entityData.AdmFeeQualCatCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_CDE_QUAL_CAT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_CDE_QUAL_CAT_ID", "DESCR_AR", "DESCR_EN", "SEAT_NO_FLG", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "ADM_REG_STEPS_ID", "USR_PWD_FLG", "SCHOOL_TYPE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCdeQualCatEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCdeQualCat) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCdeQualCat>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCdeQualCat);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCdeQualCat Entity 
		///</summary>
		protected virtual EdCdeQualCat Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCdeQualCat copy = new EdCdeQualCat();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCdeQualCatId = this.EdCdeQualCatId;
					copy.OriginalEdCdeQualCatId = this.OriginalEdCdeQualCatId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.SeatNoFlg = this.SeatNoFlg;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.AdmRegStepsId = this.AdmRegStepsId;
				copy.UsrPwdFlg = this.UsrPwdFlg;
				copy.SchoolTypeFlg = this.SchoolTypeFlg;
			
			if (this.AdmRegStepsIdSource != null && existingCopies.Contains(this.AdmRegStepsIdSource))
				copy.AdmRegStepsIdSource = existingCopies[this.AdmRegStepsIdSource] as AdmRegSteps;
			else
				copy.AdmRegStepsIdSource = MakeCopyOf(this.AdmRegStepsIdSource, existingCopies) as AdmRegSteps;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
		
			//deep copy nested objects
			copy.FeeCdeDiscTypeCollection = (TList<FeeCdeDiscType>) MakeCopyOf(this.FeeCdeDiscTypeCollection, existingCopies); 
			copy.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			copy.EdCodeQualCollection = (TList<EdCodeQual>) MakeCopyOf(this.EdCodeQualCollection, existingCopies); 
			copy.AdmFeeQualCatCollection = (TList<AdmFeeQualCat>) MakeCopyOf(this.AdmFeeQualCatCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCdeQualCat Entity 
		///</summary>
		public virtual EdCdeQualCat Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCdeQualCat Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCdeQualCat DeepCopy()
		{
			return EntityHelper.Clone<EdCdeQualCat>(this as EdCdeQualCat);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCdeQualCatEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCdeQualCatEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCdeQualCatEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCdeQualCatColumn column)
		{
			switch(column)
			{
					case EdCdeQualCatColumn.EdCdeQualCatId:
					return entityData.EdCdeQualCatId != _originalData.EdCdeQualCatId;
					case EdCdeQualCatColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EdCdeQualCatColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EdCdeQualCatColumn.SeatNoFlg:
					return entityData.SeatNoFlg != _originalData.SeatNoFlg;
					case EdCdeQualCatColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case EdCdeQualCatColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case EdCdeQualCatColumn.AdmRegStepsId:
					return entityData.AdmRegStepsId != _originalData.AdmRegStepsId;
					case EdCdeQualCatColumn.UsrPwdFlg:
					return entityData.UsrPwdFlg != _originalData.UsrPwdFlg;
					case EdCdeQualCatColumn.SchoolTypeFlg:
					return entityData.SchoolTypeFlg != _originalData.SchoolTypeFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCdeQualCatColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCdeQualCatId != _originalData.EdCdeQualCatId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.SeatNoFlg != _originalData.SeatNoFlg;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AdmRegStepsId != _originalData.AdmRegStepsId;
			result = result || entityData.UsrPwdFlg != _originalData.UsrPwdFlg;
			result = result || entityData.SchoolTypeFlg != _originalData.SchoolTypeFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCdeQualCat Entity with the original data.
		///</summary>
		public EdCdeQualCat GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCdeQualCat(
				_originalData.EdCdeQualCatId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.SeatNoFlg,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.AdmRegStepsId,
				_originalData.UsrPwdFlg,
				_originalData.SchoolTypeFlg
				);
				
			return (EdCdeQualCat)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCdeQualCatBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCdeQualCatBase)
				return ValueEquals(this, (EdCdeQualCatBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCdeQualCatBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCdeQualCatId.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					((this.SeatNoFlg == null) ? string.Empty : this.SeatNoFlg.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.AdmRegStepsId == null) ? string.Empty : this.AdmRegStepsId.ToString()).GetHashCode() ^ 
					((this.UsrPwdFlg == null) ? string.Empty : this.UsrPwdFlg.ToString()).GetHashCode() ^ 
					((this.SchoolTypeFlg == null) ? string.Empty : this.SchoolTypeFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCdeQualCatBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCdeQualCatBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCdeQualCatBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCdeQualCatBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCdeQualCatBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCdeQualCatBase Object1, EdCdeQualCatBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCdeQualCatId != Object2.EdCdeQualCatId)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if ( Object1.SeatNoFlg != null && Object2.SeatNoFlg != null )
			{
				if (Object1.SeatNoFlg != Object2.SeatNoFlg)
					equal = false;
			}
			else if (Object1.SeatNoFlg == null ^ Object2.SeatNoFlg == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.AdmRegStepsId != null && Object2.AdmRegStepsId != null )
			{
				if (Object1.AdmRegStepsId != Object2.AdmRegStepsId)
					equal = false;
			}
			else if (Object1.AdmRegStepsId == null ^ Object2.AdmRegStepsId == null )
			{
				equal = false;
			}
			if ( Object1.UsrPwdFlg != null && Object2.UsrPwdFlg != null )
			{
				if (Object1.UsrPwdFlg != Object2.UsrPwdFlg)
					equal = false;
			}
			else if (Object1.UsrPwdFlg == null ^ Object2.UsrPwdFlg == null )
			{
				equal = false;
			}
			if ( Object1.SchoolTypeFlg != null && Object2.SchoolTypeFlg != null )
			{
				if (Object1.SchoolTypeFlg != Object2.SchoolTypeFlg)
					equal = false;
			}
			else if (Object1.SchoolTypeFlg == null ^ Object2.SchoolTypeFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCdeQualCatBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCdeQualCatComparer GetComparer()
        {
            return new EdCdeQualCatComparer();
        }
        */

        // Comparer delegates back to EdCdeQualCat
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCdeQualCat rhs, EdCdeQualCatColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCdeQualCatColumn.EdCdeQualCatId:
            		return this.EdCdeQualCatId.CompareTo(rhs.EdCdeQualCatId);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.SeatNoFlg:
            		return this.SeatNoFlg.Value.CompareTo(rhs.SeatNoFlg.Value);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.AdmRegStepsId:
            		return this.AdmRegStepsId.Value.CompareTo(rhs.AdmRegStepsId.Value);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.UsrPwdFlg:
            		return this.UsrPwdFlg.Value.CompareTo(rhs.UsrPwdFlg.Value);
            		
            		                 
            	
            	
            	case EdCdeQualCatColumn.SchoolTypeFlg:
            		return this.SchoolTypeFlg.Value.CompareTo(rhs.SchoolTypeFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCdeQualCatKey> Members
		
		// member variable for the EntityId property
		private EdCdeQualCatKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCdeQualCatKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCdeQualCatKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCdeQualCat")
					.Append("|").Append( this.EdCdeQualCatId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- EdCdeQualCatId: {0}{9}- DescrAr: {1}{9}- DescrEn: {2}{9}- SeatNoFlg: {3}{9}- AsCodeDegreeClassId: {4}{9}- AsCodeDegreeId: {5}{9}- AdmRegStepsId: {6}{9}- UsrPwdFlg: {7}{9}- SchoolTypeFlg: {8}{9}{11}", 
				this.EdCdeQualCatId,
				this.DescrAr,
				this.DescrEn,
				(this.SeatNoFlg == null) ? string.Empty : this.SeatNoFlg.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.AdmRegStepsId == null) ? string.Empty : this.AdmRegStepsId.ToString(),
				(this.UsrPwdFlg == null) ? string.Empty : this.UsrPwdFlg.ToString(),
				(this.SchoolTypeFlg == null) ? string.Empty : this.SchoolTypeFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_CDE_QUAL_CAT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCdeQualCatEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_CDE_QUAL_CAT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_CDE_QUAL_CAT"</remarks>
		public System.Decimal EdCdeQualCatId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCdeQualCatId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// SEAT_NO_FLG : 
		/// </summary>
		public System.Boolean?		  SeatNoFlg = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : مسلسل الدرجة العلمية
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// ADM_REG_STEPS_ID : 
		/// </summary>
		public System.Decimal?		  AdmRegStepsId = null;
		
		/// <summary>
		/// USR_PWD_FLG : 
		/// </summary>
		public System.Boolean?		  UsrPwdFlg = null;
		
		/// <summary>
		/// SCHOOL_TYPE_FLG : 
		/// </summary>
		public System.Boolean?		  SchoolTypeFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmRegSteps _admRegStepsIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmRegSteps"/>.
		/// </summary>
		/// <value>The source AdmRegSteps for AdmRegStepsId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmRegSteps AdmRegStepsIdSource
      	{
            get { return this._admRegStepsIdSource; }
            set { this._admRegStepsIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeCdeDiscTypeCollection
		
		private TList<FeeCdeDiscType> _feeCdeDiscTypeEdCdeQualCatId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCdeDiscTypeEdCdeQualCatId
		/// </summary>
		
		public TList<FeeCdeDiscType> FeeCdeDiscTypeCollection
		{
			get
			{
				if (_feeCdeDiscTypeEdCdeQualCatId == null)
				{
				_feeCdeDiscTypeEdCdeQualCatId = new TList<FeeCdeDiscType>();
				}
	
				return _feeCdeDiscTypeEdCdeQualCatId;
			}
			set { _feeCdeDiscTypeEdCdeQualCatId = value; }
		}
		
		#endregion

		#region EdStudQualCollection
		
		private TList<EdStudQual> _edStudQualEdCdeQualCatId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualEdCdeQualCatId
		/// </summary>
		
		public TList<EdStudQual> EdStudQualCollection
		{
			get
			{
				if (_edStudQualEdCdeQualCatId == null)
				{
				_edStudQualEdCdeQualCatId = new TList<EdStudQual>();
				}
	
				return _edStudQualEdCdeQualCatId;
			}
			set { _edStudQualEdCdeQualCatId = value; }
		}
		
		#endregion

		#region EdCodeQualCollection
		
		private TList<EdCodeQual> _edCodeQualEdCdeQualCatId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCodeQualEdCdeQualCatId
		/// </summary>
		
		public TList<EdCodeQual> EdCodeQualCollection
		{
			get
			{
				if (_edCodeQualEdCdeQualCatId == null)
				{
				_edCodeQualEdCdeQualCatId = new TList<EdCodeQual>();
				}
	
				return _edCodeQualEdCdeQualCatId;
			}
			set { _edCodeQualEdCdeQualCatId = value; }
		}
		
		#endregion

		#region AdmFeeQualCatCollection
		
		private TList<AdmFeeQualCat> _admFeeQualCatEdCdeQualCatId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admFeeQualCatEdCdeQualCatId
		/// </summary>
		
		public TList<AdmFeeQualCat> AdmFeeQualCatCollection
		{
			get
			{
				if (_admFeeQualCatEdCdeQualCatId == null)
				{
				_admFeeQualCatEdCdeQualCatId = new TList<AdmFeeQualCat>();
				}
	
				return _admFeeQualCatEdCdeQualCatId;
			}
			set { _admFeeQualCatEdCdeQualCatId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCdeQualCatEntityData _tmp = new EdCdeQualCatEntityData();
						
			_tmp.EdCdeQualCatId = this.EdCdeQualCatId;
			_tmp.OriginalEdCdeQualCatId = this.OriginalEdCdeQualCatId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.SeatNoFlg = this.SeatNoFlg;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AdmRegStepsId = this.AdmRegStepsId;
			_tmp.UsrPwdFlg = this.UsrPwdFlg;
			_tmp.SchoolTypeFlg = this.SchoolTypeFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmRegStepsIdSource != null)
				_tmp.AdmRegStepsIdSource = MakeCopyOf(this.AdmRegStepsIdSource) as AdmRegSteps;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeCdeDiscTypeEdCdeQualCatId != null)
				_tmp.FeeCdeDiscTypeCollection = (TList<FeeCdeDiscType>) MakeCopyOf(this.FeeCdeDiscTypeCollection); 
			if (this._edStudQualEdCdeQualCatId != null)
				_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection); 
			if (this._edCodeQualEdCdeQualCatId != null)
				_tmp.EdCodeQualCollection = (TList<EdCodeQual>) MakeCopyOf(this.EdCodeQualCollection); 
			if (this._admFeeQualCatEdCdeQualCatId != null)
				_tmp.AdmFeeQualCatCollection = (TList<AdmFeeQualCat>) MakeCopyOf(this.AdmFeeQualCatCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCdeQualCatEntityData _tmp = new EdCdeQualCatEntityData();
						
			_tmp.EdCdeQualCatId = this.EdCdeQualCatId;
			_tmp.OriginalEdCdeQualCatId = this.OriginalEdCdeQualCatId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.SeatNoFlg = this.SeatNoFlg;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AdmRegStepsId = this.AdmRegStepsId;
			_tmp.UsrPwdFlg = this.UsrPwdFlg;
			_tmp.SchoolTypeFlg = this.SchoolTypeFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmRegStepsIdSource != null && existingCopies.Contains(this.AdmRegStepsIdSource))
				_tmp.AdmRegStepsIdSource = existingCopies[this.AdmRegStepsIdSource] as AdmRegSteps;
			else
				_tmp.AdmRegStepsIdSource = MakeCopyOf(this.AdmRegStepsIdSource, existingCopies) as AdmRegSteps;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeCdeDiscTypeCollection = (TList<FeeCdeDiscType>) MakeCopyOf(this.FeeCdeDiscTypeCollection, existingCopies); 
			_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			_tmp.EdCodeQualCollection = (TList<EdCodeQual>) MakeCopyOf(this.EdCodeQualCollection, existingCopies); 
			_tmp.AdmFeeQualCatCollection = (TList<AdmFeeQualCat>) MakeCopyOf(this.AdmFeeQualCatCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCdeQualCatColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCdeQualCatColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCdeQualCatColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCdeQualCatColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCdeQualCatColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCdeQualCatColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCdeQualCatEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCdeQualCatEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCdeQualCatColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCdeQualCatColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCdeQualCatEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCdeQualCatEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCdeQualCatEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCdeQualCat"/> object.
	/// </remarks>
	public class EdCdeQualCatEventArgs : System.EventArgs
	{
		private EdCdeQualCatColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCdeQualCatEventArgs class.
		///</summary>
		public EdCdeQualCatEventArgs(EdCdeQualCatColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCdeQualCatEventArgs class.
		///</summary>
		public EdCdeQualCatEventArgs(EdCdeQualCatColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCdeQualCatColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCdeQualCatColumn" />
		public EdCdeQualCatColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCdeQualCat related events.
	///</summary>
	public delegate void EdCdeQualCatEventHandler(object sender, EdCdeQualCatEventArgs e);
	
	#region EdCdeQualCatComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCdeQualCatComparer : System.Collections.Generic.IComparer<EdCdeQualCat>
	{
		EdCdeQualCatColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCdeQualCatComparer"/> class.
        /// </summary>
		public EdCdeQualCatComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCdeQualCatComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCdeQualCatComparer(EdCdeQualCatColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCdeQualCat"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCdeQualCat"/> to compare.</param>
        /// <param name="b">The second <c>EdCdeQualCat</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCdeQualCat a, EdCdeQualCat b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCdeQualCat entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCdeQualCat a, EdCdeQualCat b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCdeQualCatColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCdeQualCatKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCdeQualCat"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCdeQualCatKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatKey class.
		/// </summary>
		public EdCdeQualCatKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatKey class.
		/// </summary>
		public EdCdeQualCatKey(EdCdeQualCatBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCdeQualCatId = entity.EdCdeQualCatId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCdeQualCatKey class.
		/// </summary>
		public EdCdeQualCatKey(System.Decimal _edCdeQualCatId)
		{
			#region Init Properties

			this.EdCdeQualCatId = _edCdeQualCatId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCdeQualCatBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCdeQualCatBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCdeQualCatId property
		private System.Decimal _edCdeQualCatId;
		
		/// <summary>
		/// Gets or sets the EdCdeQualCatId property.
		/// </summary>
		public System.Decimal EdCdeQualCatId
		{
			get { return _edCdeQualCatId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCdeQualCatId = value;
				
				_edCdeQualCatId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCdeQualCatId = ( values["EdCdeQualCatId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCdeQualCatId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCdeQualCatId", EdCdeQualCatId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCdeQualCatId: {0}{1}",
								EdCdeQualCatId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCdeQualCatColumn Enum
	
	/// <summary>
	/// Enumerate the EdCdeQualCat columns.
	/// </summary>
	[Serializable]
	public enum EdCdeQualCatColumn : int
	{
		/// <summary>
		/// EdCdeQualCatId : 
		/// </summary>
		[EnumTextValue("ED_CDE_QUAL_CAT_ID")]
		[ColumnEnum("ED_CDE_QUAL_CAT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCdeQualCatId = 1,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrAr = 2,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrEn = 3,
		/// <summary>
		/// SeatNoFlg : 
		/// </summary>
		[EnumTextValue("SEAT_NO_FLG")]
		[ColumnEnum("SEAT_NO_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		SeatNoFlg = 4,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 5,
		/// <summary>
		/// AsCodeDegreeId : مسلسل الدرجة العلمية
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 6,
		/// <summary>
		/// AdmRegStepsId : 
		/// </summary>
		[EnumTextValue("ADM_REG_STEPS_ID")]
		[ColumnEnum("ADM_REG_STEPS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmRegStepsId = 7,
		/// <summary>
		/// UsrPwdFlg : 
		/// </summary>
		[EnumTextValue("USR_PWD_FLG")]
		[ColumnEnum("USR_PWD_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		UsrPwdFlg = 8,
		/// <summary>
		/// SchoolTypeFlg : 
		/// </summary>
		[EnumTextValue("SCHOOL_TYPE_FLG")]
		[ColumnEnum("SCHOOL_TYPE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		SchoolTypeFlg = 9
	}//End enum

	#endregion EdCdeQualCatColumn Enum

} // end namespace
