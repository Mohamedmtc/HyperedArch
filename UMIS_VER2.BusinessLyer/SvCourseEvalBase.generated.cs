
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvCourseEval.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_COURSE_EVAL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvCourseEvalBase : EntityBase, ISvCourseEval, IEntityId<SvCourseEvalKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvCourseEvalEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvCourseEvalEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvCourseEvalEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvCourseEval> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvCourseEvalEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvCourseEvalEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvCourseEvalBase"/> instance.
		///</summary>
		public SvCourseEvalBase()
		{
			this.entityData = new SvCourseEvalEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvCourseEvalBase"/> instance.
		///</summary>
		///<param name="_svCourseEvalId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_entMainId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_svCodeRatingSchmId"></param>
		///<param name="_seUserId"></param>
		///<param name="_pubFlg"></param>
		///<param name="_evalTitle"></param>
		///<param name="_evalDate"></param>
		///<param name="_evalDueDate"></param>
		///<param name="_regFlg">استبيان اجبارى قبل دخول فيو طالب</param>
		///<param name="_waitFlg">يمكن تاجيل استبيان اجبارى</param>
		///<param name="_rsltFlg">XXXXX</param>
		///<param name="_tmpltFlg">Template survey</param>
		///<param name="_lastDate"></param>
		public SvCourseEvalBase(System.Decimal _svCourseEvalId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edAcadYearId, System.Decimal? _entMainId, System.Decimal? _edCourseId, 
			System.Decimal _svCodeRatingSchmId, System.Decimal? _seUserId, System.Decimal _pubFlg, 
			System.String _evalTitle, System.DateTime? _evalDate, System.DateTime? _evalDueDate, 
			System.Boolean? _regFlg, System.Boolean? _waitFlg, System.Boolean? _rsltFlg, System.Boolean? _tmpltFlg, 
			System.DateTime? _lastDate)
		{
			this.entityData = new SvCourseEvalEntityData();
			this.backupData = null;

			this.SvCourseEvalId = _svCourseEvalId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdAcadYearId = _edAcadYearId;
			this.EntMainId = _entMainId;
			this.EdCourseId = _edCourseId;
			this.SvCodeRatingSchmId = _svCodeRatingSchmId;
			this.SeUserId = _seUserId;
			this.PubFlg = _pubFlg;
			this.EvalTitle = _evalTitle;
			this.EvalDate = _evalDate;
			this.EvalDueDate = _evalDueDate;
			this.RegFlg = _regFlg;
			this.WaitFlg = _waitFlg;
			this.RsltFlg = _rsltFlg;
			this.TmpltFlg = _tmpltFlg;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvCourseEval"/> instance.
		///</summary>
		///<param name="_svCourseEvalId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_entMainId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_svCodeRatingSchmId"></param>
		///<param name="_seUserId"></param>
		///<param name="_pubFlg"></param>
		///<param name="_evalTitle"></param>
		///<param name="_evalDate"></param>
		///<param name="_evalDueDate"></param>
		///<param name="_regFlg">استبيان اجبارى قبل دخول فيو طالب</param>
		///<param name="_waitFlg">يمكن تاجيل استبيان اجبارى</param>
		///<param name="_rsltFlg">XXXXX</param>
		///<param name="_tmpltFlg">Template survey</param>
		///<param name="_lastDate"></param>
		public static SvCourseEval CreateSvCourseEval(System.Decimal _svCourseEvalId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edAcadYearId, System.Decimal? _entMainId, System.Decimal? _edCourseId, 
			System.Decimal _svCodeRatingSchmId, System.Decimal? _seUserId, System.Decimal _pubFlg, 
			System.String _evalTitle, System.DateTime? _evalDate, System.DateTime? _evalDueDate, 
			System.Boolean? _regFlg, System.Boolean? _waitFlg, System.Boolean? _rsltFlg, System.Boolean? _tmpltFlg, 
			System.DateTime? _lastDate)
		{
			SvCourseEval newSvCourseEval = new SvCourseEval();
			newSvCourseEval.SvCourseEvalId = _svCourseEvalId;
			newSvCourseEval.EdCodeSemesterId = _edCodeSemesterId;
			newSvCourseEval.EdAcadYearId = _edAcadYearId;
			newSvCourseEval.EntMainId = _entMainId;
			newSvCourseEval.EdCourseId = _edCourseId;
			newSvCourseEval.SvCodeRatingSchmId = _svCodeRatingSchmId;
			newSvCourseEval.SeUserId = _seUserId;
			newSvCourseEval.PubFlg = _pubFlg;
			newSvCourseEval.EvalTitle = _evalTitle;
			newSvCourseEval.EvalDate = _evalDate;
			newSvCourseEval.EvalDueDate = _evalDueDate;
			newSvCourseEval.RegFlg = _regFlg;
			newSvCourseEval.WaitFlg = _waitFlg;
			newSvCourseEval.RsltFlg = _rsltFlg;
			newSvCourseEval.TmpltFlg = _tmpltFlg;
			newSvCourseEval.LastDate = _lastDate;
			return newSvCourseEval;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvCourseEvalId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SvCourseEvalId
		{
			get
			{
				return this.entityData.SvCourseEvalId; 
			}
			
			set
			{
				if (this.entityData.SvCourseEvalId == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.SvCourseEvalId, this.entityData.SvCourseEvalId);
				this.entityData.SvCourseEvalId = value;
				this.EntityId.SvCourseEvalId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.SvCourseEvalId, this.entityData.SvCourseEvalId);
				OnPropertyChanged("SvCourseEvalId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_COURSE_EVAL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_COURSE_EVAL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSvCourseEvalId
		{
			get { return this.entityData.OriginalSvCourseEvalId; }
			set { this.entityData.OriginalSvCourseEvalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCodeRatingSchmId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SvCodeRatingSchmId
		{
			get
			{
				return this.entityData.SvCodeRatingSchmId; 
			}
			
			set
			{
				if (this.entityData.SvCodeRatingSchmId == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.SvCodeRatingSchmId, this.entityData.SvCodeRatingSchmId);
				this.entityData.SvCodeRatingSchmId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.SvCodeRatingSchmId, this.entityData.SvCodeRatingSchmId);
				OnPropertyChanged("SvCodeRatingSchmId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PubFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PubFlg
		{
			get
			{
				return this.entityData.PubFlg; 
			}
			
			set
			{
				if (this.entityData.PubFlg == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.PubFlg, this.entityData.PubFlg);
				this.entityData.PubFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.PubFlg, this.entityData.PubFlg);
				OnPropertyChanged("PubFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EvalTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String EvalTitle
		{
			get
			{
				return this.entityData.EvalTitle; 
			}
			
			set
			{
				if (this.entityData.EvalTitle == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.EvalTitle, this.entityData.EvalTitle);
				this.entityData.EvalTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.EvalTitle, this.entityData.EvalTitle);
				OnPropertyChanged("EvalTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EvalDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEvalDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EvalDate
		{
			get
			{
				return this.entityData.EvalDate; 
			}
			
			set
			{
				if (this.entityData.EvalDate == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.EvalDate, this.entityData.EvalDate);
				this.entityData.EvalDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.EvalDate, this.entityData.EvalDate);
				OnPropertyChanged("EvalDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EvalDueDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEvalDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EvalDueDate
		{
			get
			{
				return this.entityData.EvalDueDate; 
			}
			
			set
			{
				if (this.entityData.EvalDueDate == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.EvalDueDate, this.entityData.EvalDueDate);
				this.entityData.EvalDueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.EvalDueDate, this.entityData.EvalDueDate);
				OnPropertyChanged("EvalDueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegFlg property. 
		///		استبيان اجبارى قبل دخول فيو طالب
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsRegFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"استبيان اجبارى قبل دخول فيو طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? RegFlg
		{
			get
			{
				return this.entityData.RegFlg; 
			}
			
			set
			{
				if (this.entityData.RegFlg == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.RegFlg, this.entityData.RegFlg);
				this.entityData.RegFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.RegFlg, this.entityData.RegFlg);
				OnPropertyChanged("RegFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WaitFlg property. 
		///		يمكن تاجيل استبيان اجبارى
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsWaitFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يمكن تاجيل استبيان اجبارى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? WaitFlg
		{
			get
			{
				return this.entityData.WaitFlg; 
			}
			
			set
			{
				if (this.entityData.WaitFlg == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.WaitFlg, this.entityData.WaitFlg);
				this.entityData.WaitFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.WaitFlg, this.entityData.WaitFlg);
				OnPropertyChanged("WaitFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsltFlg property. 
		///		XXXXX
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsRsltFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? RsltFlg
		{
			get
			{
				return this.entityData.RsltFlg; 
			}
			
			set
			{
				if (this.entityData.RsltFlg == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.RsltFlg, this.entityData.RsltFlg);
				this.entityData.RsltFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.RsltFlg, this.entityData.RsltFlg);
				OnPropertyChanged("RsltFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TmpltFlg property. 
		///		Template survey
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTmpltFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Template survey"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TmpltFlg
		{
			get
			{
				return this.entityData.TmpltFlg; 
			}
			
			set
			{
				if (this.entityData.TmpltFlg == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.TmpltFlg, this.entityData.TmpltFlg);
				this.entityData.TmpltFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.TmpltFlg, this.entityData.TmpltFlg);
				OnPropertyChanged("TmpltFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SvCourseEvalColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvCourseEvalColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCodeRatingSchm"/>.
		/// </summary>
		/// <value>The source SvCodeRatingSchm for SvCodeRatingSchmId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCodeRatingSchm SvCodeRatingSchmIdSource
      	{
            get { return entityData.SvCodeRatingSchmIdSource; }
            set { entityData.SvCodeRatingSchmIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SvCourseEvalExt objects
		///	which are related to this object through the relation FK_SV_COURSE_EVAL_EXT_SV_COURSE_EVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvCourseEvalExt> SvCourseEvalExtCollection
		{
			get { return entityData.SvCourseEvalExtCollection; }
			set { entityData.SvCourseEvalExtCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvCourseEvalItem objects
		///	which are related to this object through the relation FK_SV_COURSE_EVAL_ITEM_SV_COURSE_EVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvCourseEvalItem> SvCourseEvalItemCollection
		{
			get { return entityData.SvCourseEvalItemCollection; }
			set { entityData.SvCourseEvalItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EvalTitle", "Eval Title", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_COURSE_EVAL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_COURSE_EVAL_ID", "ED_CODE_SEMESTER_ID", "ED_ACAD_YEAR_ID", "ENT_MAIN_ID", "ED_COURSE_ID", "SV_CODE_RATING_SCHM_ID", "SE_USER_ID", "PUB_FLG", "EVAL_TITLE", "EVAL_DATE", "EVAL_DUE_DATE", "REG_FLG", "WAIT_FLG", "RSLT_FLG", "TMPLT_FLG", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvCourseEvalEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvCourseEval) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvCourseEval>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvCourseEval);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvCourseEval Entity 
		///</summary>
		protected virtual SvCourseEval Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvCourseEval copy = new SvCourseEval();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvCourseEvalId = this.SvCourseEvalId;
					copy.OriginalSvCourseEvalId = this.OriginalSvCourseEvalId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EntMainId = this.EntMainId;
				copy.EdCourseId = this.EdCourseId;
				copy.SvCodeRatingSchmId = this.SvCodeRatingSchmId;
				copy.SeUserId = this.SeUserId;
				copy.PubFlg = this.PubFlg;
				copy.EvalTitle = this.EvalTitle;
				copy.EvalDate = this.EvalDate;
				copy.EvalDueDate = this.EvalDueDate;
				copy.RegFlg = this.RegFlg;
				copy.WaitFlg = this.WaitFlg;
				copy.RsltFlg = this.RsltFlg;
				copy.TmpltFlg = this.TmpltFlg;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCodeRatingSchmIdSource != null && existingCopies.Contains(this.SvCodeRatingSchmIdSource))
				copy.SvCodeRatingSchmIdSource = existingCopies[this.SvCodeRatingSchmIdSource] as SvCodeRatingSchm;
			else
				copy.SvCodeRatingSchmIdSource = MakeCopyOf(this.SvCodeRatingSchmIdSource, existingCopies) as SvCodeRatingSchm;
		
			//deep copy nested objects
			copy.SvCourseEvalExtCollection = (TList<SvCourseEvalExt>) MakeCopyOf(this.SvCourseEvalExtCollection, existingCopies); 
			copy.SvCourseEvalItemCollection = (TList<SvCourseEvalItem>) MakeCopyOf(this.SvCourseEvalItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvCourseEval Entity 
		///</summary>
		public virtual SvCourseEval Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvCourseEval Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvCourseEval DeepCopy()
		{
			return EntityHelper.Clone<SvCourseEval>(this as SvCourseEval);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvCourseEvalEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvCourseEvalEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvCourseEvalEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvCourseEvalColumn column)
		{
			switch(column)
			{
					case SvCourseEvalColumn.SvCourseEvalId:
					return entityData.SvCourseEvalId != _originalData.SvCourseEvalId;
					case SvCourseEvalColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case SvCourseEvalColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case SvCourseEvalColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case SvCourseEvalColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case SvCourseEvalColumn.SvCodeRatingSchmId:
					return entityData.SvCodeRatingSchmId != _originalData.SvCodeRatingSchmId;
					case SvCourseEvalColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SvCourseEvalColumn.PubFlg:
					return entityData.PubFlg != _originalData.PubFlg;
					case SvCourseEvalColumn.EvalTitle:
					return entityData.EvalTitle != _originalData.EvalTitle;
					case SvCourseEvalColumn.EvalDate:
					return entityData.EvalDate != _originalData.EvalDate;
					case SvCourseEvalColumn.EvalDueDate:
					return entityData.EvalDueDate != _originalData.EvalDueDate;
					case SvCourseEvalColumn.RegFlg:
					return entityData.RegFlg != _originalData.RegFlg;
					case SvCourseEvalColumn.WaitFlg:
					return entityData.WaitFlg != _originalData.WaitFlg;
					case SvCourseEvalColumn.RsltFlg:
					return entityData.RsltFlg != _originalData.RsltFlg;
					case SvCourseEvalColumn.TmpltFlg:
					return entityData.TmpltFlg != _originalData.TmpltFlg;
					case SvCourseEvalColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvCourseEvalColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvCourseEvalId != _originalData.SvCourseEvalId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.SvCodeRatingSchmId != _originalData.SvCodeRatingSchmId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.PubFlg != _originalData.PubFlg;
			result = result || entityData.EvalTitle != _originalData.EvalTitle;
			result = result || entityData.EvalDate != _originalData.EvalDate;
			result = result || entityData.EvalDueDate != _originalData.EvalDueDate;
			result = result || entityData.RegFlg != _originalData.RegFlg;
			result = result || entityData.WaitFlg != _originalData.WaitFlg;
			result = result || entityData.RsltFlg != _originalData.RsltFlg;
			result = result || entityData.TmpltFlg != _originalData.TmpltFlg;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a SvCourseEval Entity with the original data.
		///</summary>
		public SvCourseEval GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvCourseEval(
				_originalData.SvCourseEvalId,
				_originalData.EdCodeSemesterId,
				_originalData.EdAcadYearId,
				_originalData.EntMainId,
				_originalData.EdCourseId,
				_originalData.SvCodeRatingSchmId,
				_originalData.SeUserId,
				_originalData.PubFlg,
				_originalData.EvalTitle,
				_originalData.EvalDate,
				_originalData.EvalDueDate,
				_originalData.RegFlg,
				_originalData.WaitFlg,
				_originalData.RsltFlg,
				_originalData.TmpltFlg,
				_originalData.LastDate
				);
				
			return (SvCourseEval)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvCourseEvalBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvCourseEvalBase)
				return ValueEquals(this, (SvCourseEvalBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvCourseEvalBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvCourseEvalId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					this.SvCodeRatingSchmId.GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					this.PubFlg.GetHashCode() ^ 
					((this.EvalTitle == null) ? string.Empty : this.EvalTitle.ToString()).GetHashCode() ^ 
					((this.EvalDate == null) ? string.Empty : this.EvalDate.ToString()).GetHashCode() ^ 
					((this.EvalDueDate == null) ? string.Empty : this.EvalDueDate.ToString()).GetHashCode() ^ 
					((this.RegFlg == null) ? string.Empty : this.RegFlg.ToString()).GetHashCode() ^ 
					((this.WaitFlg == null) ? string.Empty : this.WaitFlg.ToString()).GetHashCode() ^ 
					((this.RsltFlg == null) ? string.Empty : this.RsltFlg.ToString()).GetHashCode() ^ 
					((this.TmpltFlg == null) ? string.Empty : this.TmpltFlg.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvCourseEvalBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvCourseEvalBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvCourseEvalBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvCourseEvalBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvCourseEvalBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvCourseEvalBase Object1, SvCourseEvalBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvCourseEvalId != Object2.SvCourseEvalId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if (Object1.SvCodeRatingSchmId != Object2.SvCodeRatingSchmId)
				equal = false;
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if (Object1.PubFlg != Object2.PubFlg)
				equal = false;
			if ( Object1.EvalTitle != null && Object2.EvalTitle != null )
			{
				if (Object1.EvalTitle != Object2.EvalTitle)
					equal = false;
			}
			else if (Object1.EvalTitle == null ^ Object2.EvalTitle == null )
			{
				equal = false;
			}
			if ( Object1.EvalDate != null && Object2.EvalDate != null )
			{
				if (Object1.EvalDate != Object2.EvalDate)
					equal = false;
			}
			else if (Object1.EvalDate == null ^ Object2.EvalDate == null )
			{
				equal = false;
			}
			if ( Object1.EvalDueDate != null && Object2.EvalDueDate != null )
			{
				if (Object1.EvalDueDate != Object2.EvalDueDate)
					equal = false;
			}
			else if (Object1.EvalDueDate == null ^ Object2.EvalDueDate == null )
			{
				equal = false;
			}
			if ( Object1.RegFlg != null && Object2.RegFlg != null )
			{
				if (Object1.RegFlg != Object2.RegFlg)
					equal = false;
			}
			else if (Object1.RegFlg == null ^ Object2.RegFlg == null )
			{
				equal = false;
			}
			if ( Object1.WaitFlg != null && Object2.WaitFlg != null )
			{
				if (Object1.WaitFlg != Object2.WaitFlg)
					equal = false;
			}
			else if (Object1.WaitFlg == null ^ Object2.WaitFlg == null )
			{
				equal = false;
			}
			if ( Object1.RsltFlg != null && Object2.RsltFlg != null )
			{
				if (Object1.RsltFlg != Object2.RsltFlg)
					equal = false;
			}
			else if (Object1.RsltFlg == null ^ Object2.RsltFlg == null )
			{
				equal = false;
			}
			if ( Object1.TmpltFlg != null && Object2.TmpltFlg != null )
			{
				if (Object1.TmpltFlg != Object2.TmpltFlg)
					equal = false;
			}
			else if (Object1.TmpltFlg == null ^ Object2.TmpltFlg == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvCourseEvalBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvCourseEvalComparer GetComparer()
        {
            return new SvCourseEvalComparer();
        }
        */

        // Comparer delegates back to SvCourseEval
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvCourseEval rhs, SvCourseEvalColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvCourseEvalColumn.SvCourseEvalId:
            		return this.SvCourseEvalId.CompareTo(rhs.SvCourseEvalId);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.SvCodeRatingSchmId:
            		return this.SvCodeRatingSchmId.CompareTo(rhs.SvCodeRatingSchmId);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.PubFlg:
            		return this.PubFlg.CompareTo(rhs.PubFlg);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.EvalTitle:
            		return this.EvalTitle.CompareTo(rhs.EvalTitle);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.EvalDate:
            		return this.EvalDate.Value.CompareTo(rhs.EvalDate.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.EvalDueDate:
            		return this.EvalDueDate.Value.CompareTo(rhs.EvalDueDate.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.RegFlg:
            		return this.RegFlg.Value.CompareTo(rhs.RegFlg.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.WaitFlg:
            		return this.WaitFlg.Value.CompareTo(rhs.WaitFlg.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.RsltFlg:
            		return this.RsltFlg.Value.CompareTo(rhs.RsltFlg.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.TmpltFlg:
            		return this.TmpltFlg.Value.CompareTo(rhs.TmpltFlg.Value);
            		
            		                 
            	
            	
            	case SvCourseEvalColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvCourseEvalKey> Members
		
		// member variable for the EntityId property
		private SvCourseEvalKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvCourseEvalKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvCourseEvalKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvCourseEval")
					.Append("|").Append( this.SvCourseEvalId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- SvCourseEvalId: {0}{16}- EdCodeSemesterId: {1}{16}- EdAcadYearId: {2}{16}- EntMainId: {3}{16}- EdCourseId: {4}{16}- SvCodeRatingSchmId: {5}{16}- SeUserId: {6}{16}- PubFlg: {7}{16}- EvalTitle: {8}{16}- EvalDate: {9}{16}- EvalDueDate: {10}{16}- RegFlg: {11}{16}- WaitFlg: {12}{16}- RsltFlg: {13}{16}- TmpltFlg: {14}{16}- LastDate: {15}{16}{18}", 
				this.SvCourseEvalId,
				this.EdCodeSemesterId,
				this.EdAcadYearId,
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				this.SvCodeRatingSchmId,
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				this.PubFlg,
				(this.EvalTitle == null) ? string.Empty : this.EvalTitle.ToString(),
				(this.EvalDate == null) ? string.Empty : this.EvalDate.ToString(),
				(this.EvalDueDate == null) ? string.Empty : this.EvalDueDate.ToString(),
				(this.RegFlg == null) ? string.Empty : this.RegFlg.ToString(),
				(this.WaitFlg == null) ? string.Empty : this.WaitFlg.ToString(),
				(this.RsltFlg == null) ? string.Empty : this.RsltFlg.ToString(),
				(this.TmpltFlg == null) ? string.Empty : this.TmpltFlg.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_COURSE_EVAL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvCourseEvalEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_COURSE_EVAL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_COURSE_EVAL"</remarks>
		public System.Decimal SvCourseEvalId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSvCourseEvalId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// SV_CODE_RATING_SCHM_ID : 
		/// </summary>
		public System.Decimal		  SvCodeRatingSchmId = 0.0m;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// PUB_FLG : 
		/// </summary>
		public System.Decimal		  PubFlg = 0.0m;
		
		/// <summary>
		/// EVAL_TITLE : 
		/// </summary>
		public System.String		  EvalTitle = null;
		
		/// <summary>
		/// EVAL_DATE : 
		/// </summary>
		public System.DateTime?		  EvalDate = null;
		
		/// <summary>
		/// EVAL_DUE_DATE : 
		/// </summary>
		public System.DateTime?		  EvalDueDate = null;
		
		/// <summary>
		/// REG_FLG : استبيان اجبارى قبل دخول فيو طالب
		/// </summary>
		public System.Boolean?		  RegFlg = null;
		
		/// <summary>
		/// WAIT_FLG : يمكن تاجيل استبيان اجبارى
		/// </summary>
		public System.Boolean?		  WaitFlg = null;
		
		/// <summary>
		/// RSLT_FLG : XXXXX
		/// </summary>
		public System.Boolean?		  RsltFlg = null;
		
		/// <summary>
		/// TMPLT_FLG : Template survey
		/// </summary>
		public System.Boolean?		  TmpltFlg = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private SvCodeRatingSchm _svCodeRatingSchmIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCodeRatingSchm"/>.
		/// </summary>
		/// <value>The source SvCodeRatingSchm for SvCodeRatingSchmId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCodeRatingSchm SvCodeRatingSchmIdSource
      	{
            get { return this._svCodeRatingSchmIdSource; }
            set { this._svCodeRatingSchmIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SvCourseEvalExtCollection
		
		private TList<SvCourseEvalExt> _svCourseEvalExtSvCourseEvalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svCourseEvalExtSvCourseEvalId
		/// </summary>
		
		public TList<SvCourseEvalExt> SvCourseEvalExtCollection
		{
			get
			{
				if (_svCourseEvalExtSvCourseEvalId == null)
				{
				_svCourseEvalExtSvCourseEvalId = new TList<SvCourseEvalExt>();
				}
	
				return _svCourseEvalExtSvCourseEvalId;
			}
			set { _svCourseEvalExtSvCourseEvalId = value; }
		}
		
		#endregion

		#region SvCourseEvalItemCollection
		
		private TList<SvCourseEvalItem> _svCourseEvalItemSvCourseEvalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svCourseEvalItemSvCourseEvalId
		/// </summary>
		
		public TList<SvCourseEvalItem> SvCourseEvalItemCollection
		{
			get
			{
				if (_svCourseEvalItemSvCourseEvalId == null)
				{
				_svCourseEvalItemSvCourseEvalId = new TList<SvCourseEvalItem>();
				}
	
				return _svCourseEvalItemSvCourseEvalId;
			}
			set { _svCourseEvalItemSvCourseEvalId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvCourseEvalEntityData _tmp = new SvCourseEvalEntityData();
						
			_tmp.SvCourseEvalId = this.SvCourseEvalId;
			_tmp.OriginalSvCourseEvalId = this.OriginalSvCourseEvalId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.SvCodeRatingSchmId = this.SvCodeRatingSchmId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.PubFlg = this.PubFlg;
			_tmp.EvalTitle = this.EvalTitle;
			_tmp.EvalDate = this.EvalDate;
			_tmp.EvalDueDate = this.EvalDueDate;
			_tmp.RegFlg = this.RegFlg;
			_tmp.WaitFlg = this.WaitFlg;
			_tmp.RsltFlg = this.RsltFlg;
			_tmp.TmpltFlg = this.TmpltFlg;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.SvCodeRatingSchmIdSource != null)
				_tmp.SvCodeRatingSchmIdSource = MakeCopyOf(this.SvCodeRatingSchmIdSource) as SvCodeRatingSchm;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._svCourseEvalExtSvCourseEvalId != null)
				_tmp.SvCourseEvalExtCollection = (TList<SvCourseEvalExt>) MakeCopyOf(this.SvCourseEvalExtCollection); 
			if (this._svCourseEvalItemSvCourseEvalId != null)
				_tmp.SvCourseEvalItemCollection = (TList<SvCourseEvalItem>) MakeCopyOf(this.SvCourseEvalItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvCourseEvalEntityData _tmp = new SvCourseEvalEntityData();
						
			_tmp.SvCourseEvalId = this.SvCourseEvalId;
			_tmp.OriginalSvCourseEvalId = this.OriginalSvCourseEvalId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.SvCodeRatingSchmId = this.SvCodeRatingSchmId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.PubFlg = this.PubFlg;
			_tmp.EvalTitle = this.EvalTitle;
			_tmp.EvalDate = this.EvalDate;
			_tmp.EvalDueDate = this.EvalDueDate;
			_tmp.RegFlg = this.RegFlg;
			_tmp.WaitFlg = this.WaitFlg;
			_tmp.RsltFlg = this.RsltFlg;
			_tmp.TmpltFlg = this.TmpltFlg;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCodeRatingSchmIdSource != null && existingCopies.Contains(this.SvCodeRatingSchmIdSource))
				_tmp.SvCodeRatingSchmIdSource = existingCopies[this.SvCodeRatingSchmIdSource] as SvCodeRatingSchm;
			else
				_tmp.SvCodeRatingSchmIdSource = MakeCopyOf(this.SvCodeRatingSchmIdSource, existingCopies) as SvCodeRatingSchm;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SvCourseEvalExtCollection = (TList<SvCourseEvalExt>) MakeCopyOf(this.SvCourseEvalExtCollection, existingCopies); 
			_tmp.SvCourseEvalItemCollection = (TList<SvCourseEvalItem>) MakeCopyOf(this.SvCourseEvalItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvCourseEvalColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvCourseEvalColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvCourseEvalColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvCourseEvalColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvCourseEvalColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvCourseEvalColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvCourseEvalEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvCourseEvalEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvCourseEvalColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvCourseEvalColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvCourseEvalEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvCourseEvalEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvCourseEvalEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvCourseEval"/> object.
	/// </remarks>
	public class SvCourseEvalEventArgs : System.EventArgs
	{
		private SvCourseEvalColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvCourseEvalEventArgs class.
		///</summary>
		public SvCourseEvalEventArgs(SvCourseEvalColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvCourseEvalEventArgs class.
		///</summary>
		public SvCourseEvalEventArgs(SvCourseEvalColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvCourseEvalColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvCourseEvalColumn" />
		public SvCourseEvalColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvCourseEval related events.
	///</summary>
	public delegate void SvCourseEvalEventHandler(object sender, SvCourseEvalEventArgs e);
	
	#region SvCourseEvalComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvCourseEvalComparer : System.Collections.Generic.IComparer<SvCourseEval>
	{
		SvCourseEvalColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvCourseEvalComparer"/> class.
        /// </summary>
		public SvCourseEvalComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvCourseEvalComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvCourseEvalComparer(SvCourseEvalColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvCourseEval"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvCourseEval"/> to compare.</param>
        /// <param name="b">The second <c>SvCourseEval</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvCourseEval a, SvCourseEval b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvCourseEval entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvCourseEval a, SvCourseEval b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvCourseEvalColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvCourseEvalKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvCourseEval"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvCourseEvalKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvCourseEvalKey class.
		/// </summary>
		public SvCourseEvalKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvCourseEvalKey class.
		/// </summary>
		public SvCourseEvalKey(SvCourseEvalBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvCourseEvalId = entity.SvCourseEvalId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvCourseEvalKey class.
		/// </summary>
		public SvCourseEvalKey(System.Decimal _svCourseEvalId)
		{
			#region Init Properties

			this.SvCourseEvalId = _svCourseEvalId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvCourseEvalBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvCourseEvalBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvCourseEvalId property
		private System.Decimal _svCourseEvalId;
		
		/// <summary>
		/// Gets or sets the SvCourseEvalId property.
		/// </summary>
		public System.Decimal SvCourseEvalId
		{
			get { return _svCourseEvalId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvCourseEvalId = value;
				
				_svCourseEvalId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvCourseEvalId = ( values["SvCourseEvalId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SvCourseEvalId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvCourseEvalId", SvCourseEvalId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvCourseEvalId: {0}{1}",
								SvCourseEvalId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvCourseEvalColumn Enum
	
	/// <summary>
	/// Enumerate the SvCourseEval columns.
	/// </summary>
	[Serializable]
	public enum SvCourseEvalColumn : int
	{
		/// <summary>
		/// SvCourseEvalId : 
		/// </summary>
		[EnumTextValue("SV_COURSE_EVAL_ID")]
		[ColumnEnum("SV_COURSE_EVAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SvCourseEvalId = 1,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 2,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 3,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 4,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 5,
		/// <summary>
		/// SvCodeRatingSchmId : 
		/// </summary>
		[EnumTextValue("SV_CODE_RATING_SCHM_ID")]
		[ColumnEnum("SV_CODE_RATING_SCHM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SvCodeRatingSchmId = 6,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 7,
		/// <summary>
		/// PubFlg : 
		/// </summary>
		[EnumTextValue("PUB_FLG")]
		[ColumnEnum("PUB_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PubFlg = 8,
		/// <summary>
		/// EvalTitle : 
		/// </summary>
		[EnumTextValue("EVAL_TITLE")]
		[ColumnEnum("EVAL_TITLE", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		EvalTitle = 9,
		/// <summary>
		/// EvalDate : 
		/// </summary>
		[EnumTextValue("EVAL_DATE")]
		[ColumnEnum("EVAL_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EvalDate = 10,
		/// <summary>
		/// EvalDueDate : 
		/// </summary>
		[EnumTextValue("EVAL_DUE_DATE")]
		[ColumnEnum("EVAL_DUE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EvalDueDate = 11,
		/// <summary>
		/// RegFlg : استبيان اجبارى قبل دخول فيو طالب
		/// </summary>
		[EnumTextValue("REG_FLG")]
		[ColumnEnum("REG_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		RegFlg = 12,
		/// <summary>
		/// WaitFlg : يمكن تاجيل استبيان اجبارى
		/// </summary>
		[EnumTextValue("WAIT_FLG")]
		[ColumnEnum("WAIT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		WaitFlg = 13,
		/// <summary>
		/// RsltFlg : XXXXX
		/// </summary>
		[EnumTextValue("RSLT_FLG")]
		[ColumnEnum("RSLT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		RsltFlg = 14,
		/// <summary>
		/// TmpltFlg : Template survey
		/// </summary>
		[EnumTextValue("TMPLT_FLG")]
		[ColumnEnum("TMPLT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TmpltFlg = 15,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 16
	}//End enum

	#endregion SvCourseEvalColumn Enum

} // end namespace
