
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeTreasury.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_TREASURY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeTreasuryBase : EntityBase, IFeeTreasury, IEntityId<FeeTreasuryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeTreasuryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeTreasuryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeTreasuryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeTreasury> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeTreasuryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeTreasuryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeTreasuryBase"/> instance.
		///</summary>
		public FeeTreasuryBase()
		{
			this.entityData = new FeeTreasuryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeTreasuryBase"/> instance.
		///</summary>
		///<param name="_feeTreasuryId">الخزنة  الايرادات والمنصرف</param>
		///<param name="_edAcadYearId">العام الاكاديمى</param>
		///<param name="_trsNumber"></param>
		///<param name="_trsName"></param>
		///<param name="_trsDescrAr">XXX</param>
		///<param name="_trsDescrEn">XXX</param>
		///<param name="_outAmount">XXX</param>
		///<param name="_inAmount">المبلغ ايداع اول العام الاكاديمى مرة واحده</param>
		///<param name="_remainAmount">المبلغ الحالى المتبقى فى الخزنه</param>
		///<param name="_transDate"></param>
		///<param name="_transSeUserId"></param>
		///<param name="_transUsrName"></param>
		///<param name="_feeStudVoucherId">XXXاذن دفع/ايصال سدادXXX</param>
		///<param name="_feeCdeTrsryId">XXX</param>
		public FeeTreasuryBase(System.Decimal _feeTreasuryId, System.Decimal _edAcadYearId, 
			System.String _trsNumber, System.String _trsName, System.String _trsDescrAr, System.String _trsDescrEn, 
			System.Decimal? _outAmount, System.Decimal? _inAmount, System.Decimal? _remainAmount, 
			System.DateTime? _transDate, System.Decimal? _transSeUserId, System.String _transUsrName, 
			System.Decimal? _feeStudVoucherId, System.Int32? _feeCdeTrsryId)
		{
			this.entityData = new FeeTreasuryEntityData();
			this.backupData = null;

			this.FeeTreasuryId = _feeTreasuryId;
			this.EdAcadYearId = _edAcadYearId;
			this.TrsNumber = _trsNumber;
			this.TrsName = _trsName;
			this.TrsDescrAr = _trsDescrAr;
			this.TrsDescrEn = _trsDescrEn;
			this.OutAmount = _outAmount;
			this.InAmount = _inAmount;
			this.RemainAmount = _remainAmount;
			this.TransDate = _transDate;
			this.TransSeUserId = _transSeUserId;
			this.TransUsrName = _transUsrName;
			this.FeeStudVoucherId = _feeStudVoucherId;
			this.FeeCdeTrsryId = _feeCdeTrsryId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeTreasury"/> instance.
		///</summary>
		///<param name="_feeTreasuryId">الخزنة  الايرادات والمنصرف</param>
		///<param name="_edAcadYearId">العام الاكاديمى</param>
		///<param name="_trsNumber"></param>
		///<param name="_trsName"></param>
		///<param name="_trsDescrAr">XXX</param>
		///<param name="_trsDescrEn">XXX</param>
		///<param name="_outAmount">XXX</param>
		///<param name="_inAmount">المبلغ ايداع اول العام الاكاديمى مرة واحده</param>
		///<param name="_remainAmount">المبلغ الحالى المتبقى فى الخزنه</param>
		///<param name="_transDate"></param>
		///<param name="_transSeUserId"></param>
		///<param name="_transUsrName"></param>
		///<param name="_feeStudVoucherId">XXXاذن دفع/ايصال سدادXXX</param>
		///<param name="_feeCdeTrsryId">XXX</param>
		public static FeeTreasury CreateFeeTreasury(System.Decimal _feeTreasuryId, System.Decimal _edAcadYearId, 
			System.String _trsNumber, System.String _trsName, System.String _trsDescrAr, System.String _trsDescrEn, 
			System.Decimal? _outAmount, System.Decimal? _inAmount, System.Decimal? _remainAmount, 
			System.DateTime? _transDate, System.Decimal? _transSeUserId, System.String _transUsrName, 
			System.Decimal? _feeStudVoucherId, System.Int32? _feeCdeTrsryId)
		{
			FeeTreasury newFeeTreasury = new FeeTreasury();
			newFeeTreasury.FeeTreasuryId = _feeTreasuryId;
			newFeeTreasury.EdAcadYearId = _edAcadYearId;
			newFeeTreasury.TrsNumber = _trsNumber;
			newFeeTreasury.TrsName = _trsName;
			newFeeTreasury.TrsDescrAr = _trsDescrAr;
			newFeeTreasury.TrsDescrEn = _trsDescrEn;
			newFeeTreasury.OutAmount = _outAmount;
			newFeeTreasury.InAmount = _inAmount;
			newFeeTreasury.RemainAmount = _remainAmount;
			newFeeTreasury.TransDate = _transDate;
			newFeeTreasury.TransSeUserId = _transSeUserId;
			newFeeTreasury.TransUsrName = _transUsrName;
			newFeeTreasury.FeeStudVoucherId = _feeStudVoucherId;
			newFeeTreasury.FeeCdeTrsryId = _feeCdeTrsryId;
			return newFeeTreasury;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeTreasuryId property. 
		///		الخزنة  الايرادات والمنصرف
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الخزنة  الايرادات والمنصرف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeTreasuryId
		{
			get
			{
				return this.entityData.FeeTreasuryId; 
			}
			
			set
			{
				if (this.entityData.FeeTreasuryId == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.FeeTreasuryId, this.entityData.FeeTreasuryId);
				this.entityData.FeeTreasuryId = value;
				this.EntityId.FeeTreasuryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.FeeTreasuryId, this.entityData.FeeTreasuryId);
				OnPropertyChanged("FeeTreasuryId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_TREASURY_ID property.
		///		الخزنة  الايرادات والمنصرف
		/// </summary>
		/// <remarks>This is the original value of the FEE_TREASURY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeTreasuryId
		{
			get { return this.entityData.OriginalFeeTreasuryId; }
			set { this.entityData.OriginalFeeTreasuryId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		العام الاكاديمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"العام الاكاديمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrsNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TrsNumber
		{
			get
			{
				return this.entityData.TrsNumber; 
			}
			
			set
			{
				if (this.entityData.TrsNumber == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.TrsNumber, this.entityData.TrsNumber);
				this.entityData.TrsNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.TrsNumber, this.entityData.TrsNumber);
				OnPropertyChanged("TrsNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrsName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TrsName
		{
			get
			{
				return this.entityData.TrsName; 
			}
			
			set
			{
				if (this.entityData.TrsName == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.TrsName, this.entityData.TrsName);
				this.entityData.TrsName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.TrsName, this.entityData.TrsName);
				OnPropertyChanged("TrsName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrsDescrAr property. 
		///		XXX
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String TrsDescrAr
		{
			get
			{
				return this.entityData.TrsDescrAr; 
			}
			
			set
			{
				if (this.entityData.TrsDescrAr == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.TrsDescrAr, this.entityData.TrsDescrAr);
				this.entityData.TrsDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.TrsDescrAr, this.entityData.TrsDescrAr);
				OnPropertyChanged("TrsDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrsDescrEn property. 
		///		XXX
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String TrsDescrEn
		{
			get
			{
				return this.entityData.TrsDescrEn; 
			}
			
			set
			{
				if (this.entityData.TrsDescrEn == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.TrsDescrEn, this.entityData.TrsDescrEn);
				this.entityData.TrsDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.TrsDescrEn, this.entityData.TrsDescrEn);
				OnPropertyChanged("TrsDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutAmount property. 
		///		XXX
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOutAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OutAmount
		{
			get
			{
				return this.entityData.OutAmount; 
			}
			
			set
			{
				if (this.entityData.OutAmount == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.OutAmount, this.entityData.OutAmount);
				this.entityData.OutAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.OutAmount, this.entityData.OutAmount);
				OnPropertyChanged("OutAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InAmount property. 
		///		المبلغ ايداع اول العام الاكاديمى مرة واحده
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المبلغ ايداع اول العام الاكاديمى مرة واحده"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InAmount
		{
			get
			{
				return this.entityData.InAmount; 
			}
			
			set
			{
				if (this.entityData.InAmount == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.InAmount, this.entityData.InAmount);
				this.entityData.InAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.InAmount, this.entityData.InAmount);
				OnPropertyChanged("InAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RemainAmount property. 
		///		المبلغ الحالى المتبقى فى الخزنه
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRemainAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المبلغ الحالى المتبقى فى الخزنه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RemainAmount
		{
			get
			{
				return this.entityData.RemainAmount; 
			}
			
			set
			{
				if (this.entityData.RemainAmount == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.RemainAmount, this.entityData.RemainAmount);
				this.entityData.RemainAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.RemainAmount, this.entityData.RemainAmount);
				OnPropertyChanged("RemainAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTransDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TransDate
		{
			get
			{
				return this.entityData.TransDate; 
			}
			
			set
			{
				if (this.entityData.TransDate == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.TransDate, this.entityData.TransDate);
				this.entityData.TransDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.TransDate, this.entityData.TransDate);
				OnPropertyChanged("TransDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransSeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransSeUserId
		{
			get
			{
				return this.entityData.TransSeUserId; 
			}
			
			set
			{
				if (this.entityData.TransSeUserId == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.TransSeUserId, this.entityData.TransSeUserId);
				this.entityData.TransSeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.TransSeUserId, this.entityData.TransSeUserId);
				OnPropertyChanged("TransSeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransUsrName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TransUsrName
		{
			get
			{
				return this.entityData.TransUsrName; 
			}
			
			set
			{
				if (this.entityData.TransUsrName == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.TransUsrName, this.entityData.TransUsrName);
				this.entityData.TransUsrName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.TransUsrName, this.entityData.TransUsrName);
				OnPropertyChanged("TransUsrName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeStudVoucherId property. 
		///		XXXاذن دفع/ايصال سدادXXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeStudVoucherIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXاذن دفع/ايصال سدادXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeStudVoucherId
		{
			get
			{
				return this.entityData.FeeStudVoucherId; 
			}
			
			set
			{
				if (this.entityData.FeeStudVoucherId == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.FeeStudVoucherId, this.entityData.FeeStudVoucherId);
				this.entityData.FeeStudVoucherId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.FeeStudVoucherId, this.entityData.FeeStudVoucherId);
				OnPropertyChanged("FeeStudVoucherId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeTrsryId property. 
		///		XXX
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFeeCdeTrsryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FeeCdeTrsryId
		{
			get
			{
				return this.entityData.FeeCdeTrsryId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeTrsryId == value)
					return;
					
				OnColumnChanging(FeeTreasuryColumn.FeeCdeTrsryId, this.entityData.FeeCdeTrsryId);
				this.entityData.FeeCdeTrsryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeTreasuryColumn.FeeCdeTrsryId, this.entityData.FeeCdeTrsryId);
				OnPropertyChanged("FeeCdeTrsryId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeTrsry"/>.
		/// </summary>
		/// <value>The source FeeCdeTrsry for FeeCdeTrsryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeTrsry FeeCdeTrsryIdSource
      	{
            get { return entityData.FeeCdeTrsryIdSource; }
            set { entityData.FeeCdeTrsryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudVoucher"/>.
		/// </summary>
		/// <value>The source FeeStudVoucher for FeeStudVoucherId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeStudVoucher FeeStudVoucherIdSource
      	{
            get { return entityData.FeeStudVoucherIdSource; }
            set { entityData.FeeStudVoucherIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrsNumber", "Trs Number", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrsName", "Trs Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrsDescrAr", "Trs Descr Ar", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrsDescrEn", "Trs Descr En", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransUsrName", "Trans Usr Name", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_TREASURY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_TREASURY_ID", "ED_ACAD_YEAR_ID", "TRS_NUMBER", "TRS_NAME", "TRS_DESCR_AR", "TRS_DESCR_EN", "OUT_AMOUNT", "IN_AMOUNT", "REMAIN_AMOUNT", "TRANS_DATE", "TRANS_SE_USER_ID", "TRANS_USR_NAME", "FEE_STUD_VOUCHER_ID", "FEE_CDE_TRSRY_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeTreasuryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeTreasury) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeTreasury>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeTreasury);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeTreasury Entity 
		///</summary>
		protected virtual FeeTreasury Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeTreasury copy = new FeeTreasury();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeTreasuryId = this.FeeTreasuryId;
					copy.OriginalFeeTreasuryId = this.OriginalFeeTreasuryId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.TrsNumber = this.TrsNumber;
				copy.TrsName = this.TrsName;
				copy.TrsDescrAr = this.TrsDescrAr;
				copy.TrsDescrEn = this.TrsDescrEn;
				copy.OutAmount = this.OutAmount;
				copy.InAmount = this.InAmount;
				copy.RemainAmount = this.RemainAmount;
				copy.TransDate = this.TransDate;
				copy.TransSeUserId = this.TransSeUserId;
				copy.TransUsrName = this.TransUsrName;
				copy.FeeStudVoucherId = this.FeeStudVoucherId;
				copy.FeeCdeTrsryId = this.FeeCdeTrsryId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.FeeCdeTrsryIdSource != null && existingCopies.Contains(this.FeeCdeTrsryIdSource))
				copy.FeeCdeTrsryIdSource = existingCopies[this.FeeCdeTrsryIdSource] as FeeCdeTrsry;
			else
				copy.FeeCdeTrsryIdSource = MakeCopyOf(this.FeeCdeTrsryIdSource, existingCopies) as FeeCdeTrsry;
			if (this.FeeStudVoucherIdSource != null && existingCopies.Contains(this.FeeStudVoucherIdSource))
				copy.FeeStudVoucherIdSource = existingCopies[this.FeeStudVoucherIdSource] as FeeStudVoucher;
			else
				copy.FeeStudVoucherIdSource = MakeCopyOf(this.FeeStudVoucherIdSource, existingCopies) as FeeStudVoucher;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeTreasury Entity 
		///</summary>
		public virtual FeeTreasury Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeTreasury Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeTreasury DeepCopy()
		{
			return EntityHelper.Clone<FeeTreasury>(this as FeeTreasury);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeTreasuryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeTreasuryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeTreasuryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeTreasuryColumn column)
		{
			switch(column)
			{
					case FeeTreasuryColumn.FeeTreasuryId:
					return entityData.FeeTreasuryId != _originalData.FeeTreasuryId;
					case FeeTreasuryColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeTreasuryColumn.TrsNumber:
					return entityData.TrsNumber != _originalData.TrsNumber;
					case FeeTreasuryColumn.TrsName:
					return entityData.TrsName != _originalData.TrsName;
					case FeeTreasuryColumn.TrsDescrAr:
					return entityData.TrsDescrAr != _originalData.TrsDescrAr;
					case FeeTreasuryColumn.TrsDescrEn:
					return entityData.TrsDescrEn != _originalData.TrsDescrEn;
					case FeeTreasuryColumn.OutAmount:
					return entityData.OutAmount != _originalData.OutAmount;
					case FeeTreasuryColumn.InAmount:
					return entityData.InAmount != _originalData.InAmount;
					case FeeTreasuryColumn.RemainAmount:
					return entityData.RemainAmount != _originalData.RemainAmount;
					case FeeTreasuryColumn.TransDate:
					return entityData.TransDate != _originalData.TransDate;
					case FeeTreasuryColumn.TransSeUserId:
					return entityData.TransSeUserId != _originalData.TransSeUserId;
					case FeeTreasuryColumn.TransUsrName:
					return entityData.TransUsrName != _originalData.TransUsrName;
					case FeeTreasuryColumn.FeeStudVoucherId:
					return entityData.FeeStudVoucherId != _originalData.FeeStudVoucherId;
					case FeeTreasuryColumn.FeeCdeTrsryId:
					return entityData.FeeCdeTrsryId != _originalData.FeeCdeTrsryId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeTreasuryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeTreasuryId != _originalData.FeeTreasuryId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.TrsNumber != _originalData.TrsNumber;
			result = result || entityData.TrsName != _originalData.TrsName;
			result = result || entityData.TrsDescrAr != _originalData.TrsDescrAr;
			result = result || entityData.TrsDescrEn != _originalData.TrsDescrEn;
			result = result || entityData.OutAmount != _originalData.OutAmount;
			result = result || entityData.InAmount != _originalData.InAmount;
			result = result || entityData.RemainAmount != _originalData.RemainAmount;
			result = result || entityData.TransDate != _originalData.TransDate;
			result = result || entityData.TransSeUserId != _originalData.TransSeUserId;
			result = result || entityData.TransUsrName != _originalData.TransUsrName;
			result = result || entityData.FeeStudVoucherId != _originalData.FeeStudVoucherId;
			result = result || entityData.FeeCdeTrsryId != _originalData.FeeCdeTrsryId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeTreasury Entity with the original data.
		///</summary>
		public FeeTreasury GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeTreasury(
				_originalData.FeeTreasuryId,
				_originalData.EdAcadYearId,
				_originalData.TrsNumber,
				_originalData.TrsName,
				_originalData.TrsDescrAr,
				_originalData.TrsDescrEn,
				_originalData.OutAmount,
				_originalData.InAmount,
				_originalData.RemainAmount,
				_originalData.TransDate,
				_originalData.TransSeUserId,
				_originalData.TransUsrName,
				_originalData.FeeStudVoucherId,
				_originalData.FeeCdeTrsryId
				);
				
			return (FeeTreasury)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeTreasuryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeTreasuryBase)
				return ValueEquals(this, (FeeTreasuryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeTreasuryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeTreasuryId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.TrsNumber == null) ? string.Empty : this.TrsNumber.ToString()).GetHashCode() ^ 
					((this.TrsName == null) ? string.Empty : this.TrsName.ToString()).GetHashCode() ^ 
					((this.TrsDescrAr == null) ? string.Empty : this.TrsDescrAr.ToString()).GetHashCode() ^ 
					((this.TrsDescrEn == null) ? string.Empty : this.TrsDescrEn.ToString()).GetHashCode() ^ 
					((this.OutAmount == null) ? string.Empty : this.OutAmount.ToString()).GetHashCode() ^ 
					((this.InAmount == null) ? string.Empty : this.InAmount.ToString()).GetHashCode() ^ 
					((this.RemainAmount == null) ? string.Empty : this.RemainAmount.ToString()).GetHashCode() ^ 
					((this.TransDate == null) ? string.Empty : this.TransDate.ToString()).GetHashCode() ^ 
					((this.TransSeUserId == null) ? string.Empty : this.TransSeUserId.ToString()).GetHashCode() ^ 
					((this.TransUsrName == null) ? string.Empty : this.TransUsrName.ToString()).GetHashCode() ^ 
					((this.FeeStudVoucherId == null) ? string.Empty : this.FeeStudVoucherId.ToString()).GetHashCode() ^ 
					((this.FeeCdeTrsryId == null) ? string.Empty : this.FeeCdeTrsryId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeTreasuryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeTreasuryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeTreasuryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeTreasuryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeTreasuryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeTreasuryBase Object1, FeeTreasuryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeTreasuryId != Object2.FeeTreasuryId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.TrsNumber != null && Object2.TrsNumber != null )
			{
				if (Object1.TrsNumber != Object2.TrsNumber)
					equal = false;
			}
			else if (Object1.TrsNumber == null ^ Object2.TrsNumber == null )
			{
				equal = false;
			}
			if ( Object1.TrsName != null && Object2.TrsName != null )
			{
				if (Object1.TrsName != Object2.TrsName)
					equal = false;
			}
			else if (Object1.TrsName == null ^ Object2.TrsName == null )
			{
				equal = false;
			}
			if ( Object1.TrsDescrAr != null && Object2.TrsDescrAr != null )
			{
				if (Object1.TrsDescrAr != Object2.TrsDescrAr)
					equal = false;
			}
			else if (Object1.TrsDescrAr == null ^ Object2.TrsDescrAr == null )
			{
				equal = false;
			}
			if ( Object1.TrsDescrEn != null && Object2.TrsDescrEn != null )
			{
				if (Object1.TrsDescrEn != Object2.TrsDescrEn)
					equal = false;
			}
			else if (Object1.TrsDescrEn == null ^ Object2.TrsDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.OutAmount != null && Object2.OutAmount != null )
			{
				if (Object1.OutAmount != Object2.OutAmount)
					equal = false;
			}
			else if (Object1.OutAmount == null ^ Object2.OutAmount == null )
			{
				equal = false;
			}
			if ( Object1.InAmount != null && Object2.InAmount != null )
			{
				if (Object1.InAmount != Object2.InAmount)
					equal = false;
			}
			else if (Object1.InAmount == null ^ Object2.InAmount == null )
			{
				equal = false;
			}
			if ( Object1.RemainAmount != null && Object2.RemainAmount != null )
			{
				if (Object1.RemainAmount != Object2.RemainAmount)
					equal = false;
			}
			else if (Object1.RemainAmount == null ^ Object2.RemainAmount == null )
			{
				equal = false;
			}
			if ( Object1.TransDate != null && Object2.TransDate != null )
			{
				if (Object1.TransDate != Object2.TransDate)
					equal = false;
			}
			else if (Object1.TransDate == null ^ Object2.TransDate == null )
			{
				equal = false;
			}
			if ( Object1.TransSeUserId != null && Object2.TransSeUserId != null )
			{
				if (Object1.TransSeUserId != Object2.TransSeUserId)
					equal = false;
			}
			else if (Object1.TransSeUserId == null ^ Object2.TransSeUserId == null )
			{
				equal = false;
			}
			if ( Object1.TransUsrName != null && Object2.TransUsrName != null )
			{
				if (Object1.TransUsrName != Object2.TransUsrName)
					equal = false;
			}
			else if (Object1.TransUsrName == null ^ Object2.TransUsrName == null )
			{
				equal = false;
			}
			if ( Object1.FeeStudVoucherId != null && Object2.FeeStudVoucherId != null )
			{
				if (Object1.FeeStudVoucherId != Object2.FeeStudVoucherId)
					equal = false;
			}
			else if (Object1.FeeStudVoucherId == null ^ Object2.FeeStudVoucherId == null )
			{
				equal = false;
			}
			if ( Object1.FeeCdeTrsryId != null && Object2.FeeCdeTrsryId != null )
			{
				if (Object1.FeeCdeTrsryId != Object2.FeeCdeTrsryId)
					equal = false;
			}
			else if (Object1.FeeCdeTrsryId == null ^ Object2.FeeCdeTrsryId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeTreasuryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeTreasuryComparer GetComparer()
        {
            return new FeeTreasuryComparer();
        }
        */

        // Comparer delegates back to FeeTreasury
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeTreasury rhs, FeeTreasuryColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeTreasuryColumn.FeeTreasuryId:
            		return this.FeeTreasuryId.CompareTo(rhs.FeeTreasuryId);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.TrsNumber:
            		return this.TrsNumber.CompareTo(rhs.TrsNumber);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.TrsName:
            		return this.TrsName.CompareTo(rhs.TrsName);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.TrsDescrAr:
            		return this.TrsDescrAr.CompareTo(rhs.TrsDescrAr);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.TrsDescrEn:
            		return this.TrsDescrEn.CompareTo(rhs.TrsDescrEn);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.OutAmount:
            		return this.OutAmount.Value.CompareTo(rhs.OutAmount.Value);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.InAmount:
            		return this.InAmount.Value.CompareTo(rhs.InAmount.Value);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.RemainAmount:
            		return this.RemainAmount.Value.CompareTo(rhs.RemainAmount.Value);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.TransDate:
            		return this.TransDate.Value.CompareTo(rhs.TransDate.Value);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.TransSeUserId:
            		return this.TransSeUserId.Value.CompareTo(rhs.TransSeUserId.Value);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.TransUsrName:
            		return this.TransUsrName.CompareTo(rhs.TransUsrName);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.FeeStudVoucherId:
            		return this.FeeStudVoucherId.Value.CompareTo(rhs.FeeStudVoucherId.Value);
            		
            		                 
            	
            	
            	case FeeTreasuryColumn.FeeCdeTrsryId:
            		return this.FeeCdeTrsryId.Value.CompareTo(rhs.FeeCdeTrsryId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeTreasuryKey> Members
		
		// member variable for the EntityId property
		private FeeTreasuryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeTreasuryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeTreasuryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeTreasury")
					.Append("|").Append( this.FeeTreasuryId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- FeeTreasuryId: {0}{14}- EdAcadYearId: {1}{14}- TrsNumber: {2}{14}- TrsName: {3}{14}- TrsDescrAr: {4}{14}- TrsDescrEn: {5}{14}- OutAmount: {6}{14}- InAmount: {7}{14}- RemainAmount: {8}{14}- TransDate: {9}{14}- TransSeUserId: {10}{14}- TransUsrName: {11}{14}- FeeStudVoucherId: {12}{14}- FeeCdeTrsryId: {13}{14}{16}", 
				this.FeeTreasuryId,
				this.EdAcadYearId,
				(this.TrsNumber == null) ? string.Empty : this.TrsNumber.ToString(),
				(this.TrsName == null) ? string.Empty : this.TrsName.ToString(),
				(this.TrsDescrAr == null) ? string.Empty : this.TrsDescrAr.ToString(),
				(this.TrsDescrEn == null) ? string.Empty : this.TrsDescrEn.ToString(),
				(this.OutAmount == null) ? string.Empty : this.OutAmount.ToString(),
				(this.InAmount == null) ? string.Empty : this.InAmount.ToString(),
				(this.RemainAmount == null) ? string.Empty : this.RemainAmount.ToString(),
				(this.TransDate == null) ? string.Empty : this.TransDate.ToString(),
				(this.TransSeUserId == null) ? string.Empty : this.TransSeUserId.ToString(),
				(this.TransUsrName == null) ? string.Empty : this.TransUsrName.ToString(),
				(this.FeeStudVoucherId == null) ? string.Empty : this.FeeStudVoucherId.ToString(),
				(this.FeeCdeTrsryId == null) ? string.Empty : this.FeeCdeTrsryId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_TREASURY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeTreasuryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_TREASURY_ID : الخزنة  الايرادات والمنصرف
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_TREASURY"</remarks>
		public System.Decimal FeeTreasuryId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeTreasuryId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : العام الاكاديمى
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// TRS_NUMBER : 
		/// </summary>
		public System.String		  TrsNumber = null;
		
		/// <summary>
		/// TRS_NAME : 
		/// </summary>
		public System.String		  TrsName = null;
		
		/// <summary>
		/// TRS_DESCR_AR : XXX
		/// </summary>
		public System.String		  TrsDescrAr = null;
		
		/// <summary>
		/// TRS_DESCR_EN : XXX
		/// </summary>
		public System.String		  TrsDescrEn = null;
		
		/// <summary>
		/// OUT_AMOUNT : XXX
		/// </summary>
		public System.Decimal?		  OutAmount = null;
		
		/// <summary>
		/// IN_AMOUNT : المبلغ ايداع اول العام الاكاديمى مرة واحده
		/// </summary>
		public System.Decimal?		  InAmount = null;
		
		/// <summary>
		/// REMAIN_AMOUNT : المبلغ الحالى المتبقى فى الخزنه
		/// </summary>
		public System.Decimal?		  RemainAmount = null;
		
		/// <summary>
		/// TRANS_DATE : 
		/// </summary>
		public System.DateTime?		  TransDate = null;
		
		/// <summary>
		/// TRANS_SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  TransSeUserId = null;
		
		/// <summary>
		/// TRANS_USR_NAME : 
		/// </summary>
		public System.String		  TransUsrName = null;
		
		/// <summary>
		/// FEE_STUD_VOUCHER_ID : XXXاذن دفع/ايصال سدادXXX
		/// </summary>
		public System.Decimal?		  FeeStudVoucherId = null;
		
		/// <summary>
		/// FEE_CDE_TRSRY_ID : XXX
		/// </summary>
		public System.Int32?		  FeeCdeTrsryId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private FeeCdeTrsry _feeCdeTrsryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeTrsry"/>.
		/// </summary>
		/// <value>The source FeeCdeTrsry for FeeCdeTrsryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeTrsry FeeCdeTrsryIdSource
      	{
            get { return this._feeCdeTrsryIdSource; }
            set { this._feeCdeTrsryIdSource = value; }
      	}
		private FeeStudVoucher _feeStudVoucherIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudVoucher"/>.
		/// </summary>
		/// <value>The source FeeStudVoucher for FeeStudVoucherId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeStudVoucher FeeStudVoucherIdSource
      	{
            get { return this._feeStudVoucherIdSource; }
            set { this._feeStudVoucherIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeTreasuryEntityData _tmp = new FeeTreasuryEntityData();
						
			_tmp.FeeTreasuryId = this.FeeTreasuryId;
			_tmp.OriginalFeeTreasuryId = this.OriginalFeeTreasuryId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.TrsNumber = this.TrsNumber;
			_tmp.TrsName = this.TrsName;
			_tmp.TrsDescrAr = this.TrsDescrAr;
			_tmp.TrsDescrEn = this.TrsDescrEn;
			_tmp.OutAmount = this.OutAmount;
			_tmp.InAmount = this.InAmount;
			_tmp.RemainAmount = this.RemainAmount;
			_tmp.TransDate = this.TransDate;
			_tmp.TransSeUserId = this.TransSeUserId;
			_tmp.TransUsrName = this.TransUsrName;
			_tmp.FeeStudVoucherId = this.FeeStudVoucherId;
			_tmp.FeeCdeTrsryId = this.FeeCdeTrsryId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.FeeCdeTrsryIdSource != null)
				_tmp.FeeCdeTrsryIdSource = MakeCopyOf(this.FeeCdeTrsryIdSource) as FeeCdeTrsry;
			if (this.FeeStudVoucherIdSource != null)
				_tmp.FeeStudVoucherIdSource = MakeCopyOf(this.FeeStudVoucherIdSource) as FeeStudVoucher;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeTreasuryEntityData _tmp = new FeeTreasuryEntityData();
						
			_tmp.FeeTreasuryId = this.FeeTreasuryId;
			_tmp.OriginalFeeTreasuryId = this.OriginalFeeTreasuryId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.TrsNumber = this.TrsNumber;
			_tmp.TrsName = this.TrsName;
			_tmp.TrsDescrAr = this.TrsDescrAr;
			_tmp.TrsDescrEn = this.TrsDescrEn;
			_tmp.OutAmount = this.OutAmount;
			_tmp.InAmount = this.InAmount;
			_tmp.RemainAmount = this.RemainAmount;
			_tmp.TransDate = this.TransDate;
			_tmp.TransSeUserId = this.TransSeUserId;
			_tmp.TransUsrName = this.TransUsrName;
			_tmp.FeeStudVoucherId = this.FeeStudVoucherId;
			_tmp.FeeCdeTrsryId = this.FeeCdeTrsryId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.FeeCdeTrsryIdSource != null && existingCopies.Contains(this.FeeCdeTrsryIdSource))
				_tmp.FeeCdeTrsryIdSource = existingCopies[this.FeeCdeTrsryIdSource] as FeeCdeTrsry;
			else
				_tmp.FeeCdeTrsryIdSource = MakeCopyOf(this.FeeCdeTrsryIdSource, existingCopies) as FeeCdeTrsry;
			if (this.FeeStudVoucherIdSource != null && existingCopies.Contains(this.FeeStudVoucherIdSource))
				_tmp.FeeStudVoucherIdSource = existingCopies[this.FeeStudVoucherIdSource] as FeeStudVoucher;
			else
				_tmp.FeeStudVoucherIdSource = MakeCopyOf(this.FeeStudVoucherIdSource, existingCopies) as FeeStudVoucher;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeTreasuryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeTreasuryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeTreasuryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeTreasuryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeTreasuryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeTreasuryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeTreasuryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeTreasuryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeTreasuryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeTreasuryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeTreasuryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeTreasuryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeTreasuryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeTreasury"/> object.
	/// </remarks>
	public class FeeTreasuryEventArgs : System.EventArgs
	{
		private FeeTreasuryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeTreasuryEventArgs class.
		///</summary>
		public FeeTreasuryEventArgs(FeeTreasuryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeTreasuryEventArgs class.
		///</summary>
		public FeeTreasuryEventArgs(FeeTreasuryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeTreasuryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeTreasuryColumn" />
		public FeeTreasuryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeTreasury related events.
	///</summary>
	public delegate void FeeTreasuryEventHandler(object sender, FeeTreasuryEventArgs e);
	
	#region FeeTreasuryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeTreasuryComparer : System.Collections.Generic.IComparer<FeeTreasury>
	{
		FeeTreasuryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeTreasuryComparer"/> class.
        /// </summary>
		public FeeTreasuryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeTreasuryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeTreasuryComparer(FeeTreasuryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeTreasury"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeTreasury"/> to compare.</param>
        /// <param name="b">The second <c>FeeTreasury</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeTreasury a, FeeTreasury b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeTreasury entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeTreasury a, FeeTreasury b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeTreasuryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeTreasuryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeTreasury"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeTreasuryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeTreasuryKey class.
		/// </summary>
		public FeeTreasuryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeTreasuryKey class.
		/// </summary>
		public FeeTreasuryKey(FeeTreasuryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeTreasuryId = entity.FeeTreasuryId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeTreasuryKey class.
		/// </summary>
		public FeeTreasuryKey(System.Decimal _feeTreasuryId)
		{
			#region Init Properties

			this.FeeTreasuryId = _feeTreasuryId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeTreasuryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeTreasuryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeTreasuryId property
		private System.Decimal _feeTreasuryId;
		
		/// <summary>
		/// Gets or sets the FeeTreasuryId property.
		/// </summary>
		public System.Decimal FeeTreasuryId
		{
			get { return _feeTreasuryId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeTreasuryId = value;
				
				_feeTreasuryId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeTreasuryId = ( values["FeeTreasuryId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeTreasuryId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeTreasuryId", FeeTreasuryId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeTreasuryId: {0}{1}",
								FeeTreasuryId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeTreasuryColumn Enum
	
	/// <summary>
	/// Enumerate the FeeTreasury columns.
	/// </summary>
	[Serializable]
	public enum FeeTreasuryColumn : int
	{
		/// <summary>
		/// FeeTreasuryId : الخزنة  الايرادات والمنصرف
		/// </summary>
		[EnumTextValue("FEE_TREASURY_ID")]
		[ColumnEnum("FEE_TREASURY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeTreasuryId = 1,
		/// <summary>
		/// EdAcadYearId : العام الاكاديمى
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// TrsNumber : 
		/// </summary>
		[EnumTextValue("TRS_NUMBER")]
		[ColumnEnum("TRS_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TrsNumber = 3,
		/// <summary>
		/// TrsName : 
		/// </summary>
		[EnumTextValue("TRS_NAME")]
		[ColumnEnum("TRS_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TrsName = 4,
		/// <summary>
		/// TrsDescrAr : XXX
		/// </summary>
		[EnumTextValue("TRS_DESCR_AR")]
		[ColumnEnum("TRS_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TrsDescrAr = 5,
		/// <summary>
		/// TrsDescrEn : XXX
		/// </summary>
		[EnumTextValue("TRS_DESCR_EN")]
		[ColumnEnum("TRS_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		TrsDescrEn = 6,
		/// <summary>
		/// OutAmount : XXX
		/// </summary>
		[EnumTextValue("OUT_AMOUNT")]
		[ColumnEnum("OUT_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OutAmount = 7,
		/// <summary>
		/// InAmount : المبلغ ايداع اول العام الاكاديمى مرة واحده
		/// </summary>
		[EnumTextValue("IN_AMOUNT")]
		[ColumnEnum("IN_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InAmount = 8,
		/// <summary>
		/// RemainAmount : المبلغ الحالى المتبقى فى الخزنه
		/// </summary>
		[EnumTextValue("REMAIN_AMOUNT")]
		[ColumnEnum("REMAIN_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RemainAmount = 9,
		/// <summary>
		/// TransDate : 
		/// </summary>
		[EnumTextValue("TRANS_DATE")]
		[ColumnEnum("TRANS_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TransDate = 10,
		/// <summary>
		/// TransSeUserId : 
		/// </summary>
		[EnumTextValue("TRANS_SE_USER_ID")]
		[ColumnEnum("TRANS_SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransSeUserId = 11,
		/// <summary>
		/// TransUsrName : 
		/// </summary>
		[EnumTextValue("TRANS_USR_NAME")]
		[ColumnEnum("TRANS_USR_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TransUsrName = 12,
		/// <summary>
		/// FeeStudVoucherId : XXXاذن دفع/ايصال سدادXXX
		/// </summary>
		[EnumTextValue("FEE_STUD_VOUCHER_ID")]
		[ColumnEnum("FEE_STUD_VOUCHER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeStudVoucherId = 13,
		/// <summary>
		/// FeeCdeTrsryId : XXX
		/// </summary>
		[EnumTextValue("FEE_CDE_TRSRY_ID")]
		[ColumnEnum("FEE_CDE_TRSRY_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FeeCdeTrsryId = 14
	}//End enum

	#endregion FeeTreasuryColumn Enum

} // end namespace
