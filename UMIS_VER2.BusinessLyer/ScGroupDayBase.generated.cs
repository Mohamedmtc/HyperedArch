
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScGroupDay.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_GROUP_DAY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScGroupDayBase : EntityBase, IScGroupDay, IEntityId<ScGroupDayKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScGroupDayEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScGroupDayEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScGroupDayEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScGroupDay> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScGroupDayEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScGroupDayEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScGroupDayBase"/> instance.
		///</summary>
		public ScGroupDayBase()
		{
			this.entityData = new ScGroupDayEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScGroupDayBase"/> instance.
		///</summary>
		///<param name="_scGroupDayId"></param>
		///<param name="_scGroupInfoId"></param>
		///<param name="_scTchngDayId"></param>
		///<param name="_scTchngSlotFrmId"></param>
		///<param name="_scTchngSlotToId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCdeTchngMthdId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_notes"></param>
		///<param name="_courseTopic"></param>
		///<param name="_groupId"></param>
		public ScGroupDayBase(System.Decimal _scGroupDayId, System.Decimal _scGroupInfoId, 
			System.Decimal _scTchngDayId, System.Decimal? _scTchngSlotFrmId, System.Decimal? _scTchngSlotToId, 
			System.Decimal? _edCourseId, System.Decimal? _edCdeTchngMthdId, System.Decimal? _scBuildingId, 
			System.Decimal? _scHallId, System.String _notes, System.String _courseTopic, System.Decimal? _groupId)
		{
			this.entityData = new ScGroupDayEntityData();
			this.backupData = null;

			this.ScGroupDayId = _scGroupDayId;
			this.ScGroupInfoId = _scGroupInfoId;
			this.ScTchngDayId = _scTchngDayId;
			this.ScTchngSlotFrmId = _scTchngSlotFrmId;
			this.ScTchngSlotToId = _scTchngSlotToId;
			this.EdCourseId = _edCourseId;
			this.EdCdeTchngMthdId = _edCdeTchngMthdId;
			this.ScBuildingId = _scBuildingId;
			this.ScHallId = _scHallId;
			this.Notes = _notes;
			this.CourseTopic = _courseTopic;
			this.GroupId = _groupId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScGroupDay"/> instance.
		///</summary>
		///<param name="_scGroupDayId"></param>
		///<param name="_scGroupInfoId"></param>
		///<param name="_scTchngDayId"></param>
		///<param name="_scTchngSlotFrmId"></param>
		///<param name="_scTchngSlotToId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCdeTchngMthdId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_notes"></param>
		///<param name="_courseTopic"></param>
		///<param name="_groupId"></param>
		public static ScGroupDay CreateScGroupDay(System.Decimal _scGroupDayId, System.Decimal _scGroupInfoId, 
			System.Decimal _scTchngDayId, System.Decimal? _scTchngSlotFrmId, System.Decimal? _scTchngSlotToId, 
			System.Decimal? _edCourseId, System.Decimal? _edCdeTchngMthdId, System.Decimal? _scBuildingId, 
			System.Decimal? _scHallId, System.String _notes, System.String _courseTopic, System.Decimal? _groupId)
		{
			ScGroupDay newScGroupDay = new ScGroupDay();
			newScGroupDay.ScGroupDayId = _scGroupDayId;
			newScGroupDay.ScGroupInfoId = _scGroupInfoId;
			newScGroupDay.ScTchngDayId = _scTchngDayId;
			newScGroupDay.ScTchngSlotFrmId = _scTchngSlotFrmId;
			newScGroupDay.ScTchngSlotToId = _scTchngSlotToId;
			newScGroupDay.EdCourseId = _edCourseId;
			newScGroupDay.EdCdeTchngMthdId = _edCdeTchngMthdId;
			newScGroupDay.ScBuildingId = _scBuildingId;
			newScGroupDay.ScHallId = _scHallId;
			newScGroupDay.Notes = _notes;
			newScGroupDay.CourseTopic = _courseTopic;
			newScGroupDay.GroupId = _groupId;
			return newScGroupDay;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScGroupDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScGroupDayId
		{
			get
			{
				return this.entityData.ScGroupDayId; 
			}
			
			set
			{
				if (this.entityData.ScGroupDayId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.ScGroupDayId, this.entityData.ScGroupDayId);
				this.entityData.ScGroupDayId = value;
				this.EntityId.ScGroupDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.ScGroupDayId, this.entityData.ScGroupDayId);
				OnPropertyChanged("ScGroupDayId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_GROUP_DAY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SC_GROUP_DAY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScGroupDayId
		{
			get { return this.entityData.OriginalScGroupDayId; }
			set { this.entityData.OriginalScGroupDayId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScGroupInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScGroupInfoId
		{
			get
			{
				return this.entityData.ScGroupInfoId; 
			}
			
			set
			{
				if (this.entityData.ScGroupInfoId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.ScGroupInfoId, this.entityData.ScGroupInfoId);
				this.entityData.ScGroupInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.ScGroupInfoId, this.entityData.ScGroupInfoId);
				OnPropertyChanged("ScGroupInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScTchngDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScTchngDayId
		{
			get
			{
				return this.entityData.ScTchngDayId; 
			}
			
			set
			{
				if (this.entityData.ScTchngDayId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.ScTchngDayId, this.entityData.ScTchngDayId);
				this.entityData.ScTchngDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.ScTchngDayId, this.entityData.ScTchngDayId);
				OnPropertyChanged("ScTchngDayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScTchngSlotFrmId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScTchngSlotFrmIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScTchngSlotFrmId
		{
			get
			{
				return this.entityData.ScTchngSlotFrmId; 
			}
			
			set
			{
				if (this.entityData.ScTchngSlotFrmId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.ScTchngSlotFrmId, this.entityData.ScTchngSlotFrmId);
				this.entityData.ScTchngSlotFrmId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.ScTchngSlotFrmId, this.entityData.ScTchngSlotFrmId);
				OnPropertyChanged("ScTchngSlotFrmId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScTchngSlotToId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScTchngSlotToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScTchngSlotToId
		{
			get
			{
				return this.entityData.ScTchngSlotToId; 
			}
			
			set
			{
				if (this.entityData.ScTchngSlotToId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.ScTchngSlotToId, this.entityData.ScTchngSlotToId);
				this.entityData.ScTchngSlotToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.ScTchngSlotToId, this.entityData.ScTchngSlotToId);
				OnPropertyChanged("ScTchngSlotToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeTchngMthdId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeTchngMthdIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeTchngMthdId
		{
			get
			{
				return this.entityData.EdCdeTchngMthdId; 
			}
			
			set
			{
				if (this.entityData.EdCdeTchngMthdId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.EdCdeTchngMthdId, this.entityData.EdCdeTchngMthdId);
				this.entityData.EdCdeTchngMthdId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.EdCdeTchngMthdId, this.entityData.EdCdeTchngMthdId);
				OnPropertyChanged("EdCdeTchngMthdId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseTopic property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String CourseTopic
		{
			get
			{
				return this.entityData.CourseTopic; 
			}
			
			set
			{
				if (this.entityData.CourseTopic == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.CourseTopic, this.entityData.CourseTopic);
				this.entityData.CourseTopic = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.CourseTopic, this.entityData.CourseTopic);
				OnPropertyChanged("CourseTopic");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGroupIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
				OnColumnChanging(ScGroupDayColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScGroupDayColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeTchngMthd"/>.
		/// </summary>
		/// <value>The source EdCdeTchngMthd for EdCdeTchngMthdId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeTchngMthd EdCdeTchngMthdIdSource
      	{
            get { return entityData.EdCdeTchngMthdIdSource; }
            set { entityData.EdCdeTchngMthdIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScGroupInfo"/>.
		/// </summary>
		/// <value>The source ScGroupInfo for ScGroupInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScGroupInfo ScGroupInfoIdSource
      	{
            get { return entityData.ScGroupInfoIdSource; }
            set { entityData.ScGroupInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngDay"/>.
		/// </summary>
		/// <value>The source ScTchngDay for ScTchngDayId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScTchngDay ScTchngDayIdSource
      	{
            get { return entityData.ScTchngDayIdSource; }
            set { entityData.ScTchngDayIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotFrmId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScTchngSlot ScTchngSlotFrmIdSource
      	{
            get { return entityData.ScTchngSlotFrmIdSource; }
            set { entityData.ScTchngSlotFrmIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScTchngSlot ScTchngSlotToIdSource
      	{
            get { return entityData.ScTchngSlotToIdSource; }
            set { entityData.ScTchngSlotToIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ScGroupStaff objects
		///	which are related to this object through the relation FK_SC_GROUP_STAFF_SC_GROUP_DAY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScGroupStaff> ScGroupStaffCollection
		{
			get { return entityData.ScGroupStaffCollection; }
			set { entityData.ScGroupStaffCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CourseTopic", "Course Topic", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_GROUP_DAY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_GROUP_DAY_ID", "SC_GROUP_INFO_ID", "SC_TCHNG_DAY_ID", "SC_TCHNG_SLOT_FRM_ID", "SC_TCHNG_SLOT_TO_ID", "ED_COURSE_ID", "ED_CDE_TCHNG_MTHD_ID", "SC_BUILDING_ID", "SC_HALL_ID", "NOTES", "COURSE_TOPIC", "GROUP_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScGroupDayEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScGroupDay) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScGroupDay>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScGroupDay);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScGroupDay Entity 
		///</summary>
		protected virtual ScGroupDay Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScGroupDay copy = new ScGroupDay();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScGroupDayId = this.ScGroupDayId;
					copy.OriginalScGroupDayId = this.OriginalScGroupDayId;
				copy.ScGroupInfoId = this.ScGroupInfoId;
				copy.ScTchngDayId = this.ScTchngDayId;
				copy.ScTchngSlotFrmId = this.ScTchngSlotFrmId;
				copy.ScTchngSlotToId = this.ScTchngSlotToId;
				copy.EdCourseId = this.EdCourseId;
				copy.EdCdeTchngMthdId = this.EdCdeTchngMthdId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ScHallId = this.ScHallId;
				copy.Notes = this.Notes;
				copy.CourseTopic = this.CourseTopic;
				copy.GroupId = this.GroupId;
			
			if (this.EdCdeTchngMthdIdSource != null && existingCopies.Contains(this.EdCdeTchngMthdIdSource))
				copy.EdCdeTchngMthdIdSource = existingCopies[this.EdCdeTchngMthdIdSource] as EdCdeTchngMthd;
			else
				copy.EdCdeTchngMthdIdSource = MakeCopyOf(this.EdCdeTchngMthdIdSource, existingCopies) as EdCdeTchngMthd;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScGroupInfoIdSource != null && existingCopies.Contains(this.ScGroupInfoIdSource))
				copy.ScGroupInfoIdSource = existingCopies[this.ScGroupInfoIdSource] as ScGroupInfo;
			else
				copy.ScGroupInfoIdSource = MakeCopyOf(this.ScGroupInfoIdSource, existingCopies) as ScGroupInfo;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScTchngDayIdSource != null && existingCopies.Contains(this.ScTchngDayIdSource))
				copy.ScTchngDayIdSource = existingCopies[this.ScTchngDayIdSource] as ScTchngDay;
			else
				copy.ScTchngDayIdSource = MakeCopyOf(this.ScTchngDayIdSource, existingCopies) as ScTchngDay;
			if (this.ScTchngSlotFrmIdSource != null && existingCopies.Contains(this.ScTchngSlotFrmIdSource))
				copy.ScTchngSlotFrmIdSource = existingCopies[this.ScTchngSlotFrmIdSource] as ScTchngSlot;
			else
				copy.ScTchngSlotFrmIdSource = MakeCopyOf(this.ScTchngSlotFrmIdSource, existingCopies) as ScTchngSlot;
			if (this.ScTchngSlotToIdSource != null && existingCopies.Contains(this.ScTchngSlotToIdSource))
				copy.ScTchngSlotToIdSource = existingCopies[this.ScTchngSlotToIdSource] as ScTchngSlot;
			else
				copy.ScTchngSlotToIdSource = MakeCopyOf(this.ScTchngSlotToIdSource, existingCopies) as ScTchngSlot;
		
			//deep copy nested objects
			copy.ScGroupStaffCollection = (TList<ScGroupStaff>) MakeCopyOf(this.ScGroupStaffCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScGroupDay Entity 
		///</summary>
		public virtual ScGroupDay Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScGroupDay Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScGroupDay DeepCopy()
		{
			return EntityHelper.Clone<ScGroupDay>(this as ScGroupDay);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScGroupDayEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScGroupDayEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScGroupDayEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScGroupDayColumn column)
		{
			switch(column)
			{
					case ScGroupDayColumn.ScGroupDayId:
					return entityData.ScGroupDayId != _originalData.ScGroupDayId;
					case ScGroupDayColumn.ScGroupInfoId:
					return entityData.ScGroupInfoId != _originalData.ScGroupInfoId;
					case ScGroupDayColumn.ScTchngDayId:
					return entityData.ScTchngDayId != _originalData.ScTchngDayId;
					case ScGroupDayColumn.ScTchngSlotFrmId:
					return entityData.ScTchngSlotFrmId != _originalData.ScTchngSlotFrmId;
					case ScGroupDayColumn.ScTchngSlotToId:
					return entityData.ScTchngSlotToId != _originalData.ScTchngSlotToId;
					case ScGroupDayColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case ScGroupDayColumn.EdCdeTchngMthdId:
					return entityData.EdCdeTchngMthdId != _originalData.EdCdeTchngMthdId;
					case ScGroupDayColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case ScGroupDayColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case ScGroupDayColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case ScGroupDayColumn.CourseTopic:
					return entityData.CourseTopic != _originalData.CourseTopic;
					case ScGroupDayColumn.GroupId:
					return entityData.GroupId != _originalData.GroupId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScGroupDayColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScGroupDayId != _originalData.ScGroupDayId;
			result = result || entityData.ScGroupInfoId != _originalData.ScGroupInfoId;
			result = result || entityData.ScTchngDayId != _originalData.ScTchngDayId;
			result = result || entityData.ScTchngSlotFrmId != _originalData.ScTchngSlotFrmId;
			result = result || entityData.ScTchngSlotToId != _originalData.ScTchngSlotToId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EdCdeTchngMthdId != _originalData.EdCdeTchngMthdId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.CourseTopic != _originalData.CourseTopic;
			result = result || entityData.GroupId != _originalData.GroupId;
			return result;
		}	
		
		///<summary>
		///  Returns a ScGroupDay Entity with the original data.
		///</summary>
		public ScGroupDay GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScGroupDay(
				_originalData.ScGroupDayId,
				_originalData.ScGroupInfoId,
				_originalData.ScTchngDayId,
				_originalData.ScTchngSlotFrmId,
				_originalData.ScTchngSlotToId,
				_originalData.EdCourseId,
				_originalData.EdCdeTchngMthdId,
				_originalData.ScBuildingId,
				_originalData.ScHallId,
				_originalData.Notes,
				_originalData.CourseTopic,
				_originalData.GroupId
				);
				
			return (ScGroupDay)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScGroupDayBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScGroupDayBase)
				return ValueEquals(this, (ScGroupDayBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScGroupDayBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScGroupDayId.GetHashCode() ^ 
					this.ScGroupInfoId.GetHashCode() ^ 
					this.ScTchngDayId.GetHashCode() ^ 
					((this.ScTchngSlotFrmId == null) ? string.Empty : this.ScTchngSlotFrmId.ToString()).GetHashCode() ^ 
					((this.ScTchngSlotToId == null) ? string.Empty : this.ScTchngSlotToId.ToString()).GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.EdCdeTchngMthdId == null) ? string.Empty : this.EdCdeTchngMthdId.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.CourseTopic == null) ? string.Empty : this.CourseTopic.ToString()).GetHashCode() ^ 
					((this.GroupId == null) ? string.Empty : this.GroupId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScGroupDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScGroupDayBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScGroupDayBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScGroupDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScGroupDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScGroupDayBase Object1, ScGroupDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScGroupDayId != Object2.ScGroupDayId)
				equal = false;
			if (Object1.ScGroupInfoId != Object2.ScGroupInfoId)
				equal = false;
			if (Object1.ScTchngDayId != Object2.ScTchngDayId)
				equal = false;
			if ( Object1.ScTchngSlotFrmId != null && Object2.ScTchngSlotFrmId != null )
			{
				if (Object1.ScTchngSlotFrmId != Object2.ScTchngSlotFrmId)
					equal = false;
			}
			else if (Object1.ScTchngSlotFrmId == null ^ Object2.ScTchngSlotFrmId == null )
			{
				equal = false;
			}
			if ( Object1.ScTchngSlotToId != null && Object2.ScTchngSlotToId != null )
			{
				if (Object1.ScTchngSlotToId != Object2.ScTchngSlotToId)
					equal = false;
			}
			else if (Object1.ScTchngSlotToId == null ^ Object2.ScTchngSlotToId == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeTchngMthdId != null && Object2.EdCdeTchngMthdId != null )
			{
				if (Object1.EdCdeTchngMthdId != Object2.EdCdeTchngMthdId)
					equal = false;
			}
			else if (Object1.EdCdeTchngMthdId == null ^ Object2.EdCdeTchngMthdId == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.CourseTopic != null && Object2.CourseTopic != null )
			{
				if (Object1.CourseTopic != Object2.CourseTopic)
					equal = false;
			}
			else if (Object1.CourseTopic == null ^ Object2.CourseTopic == null )
			{
				equal = false;
			}
			if ( Object1.GroupId != null && Object2.GroupId != null )
			{
				if (Object1.GroupId != Object2.GroupId)
					equal = false;
			}
			else if (Object1.GroupId == null ^ Object2.GroupId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScGroupDayBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScGroupDayComparer GetComparer()
        {
            return new ScGroupDayComparer();
        }
        */

        // Comparer delegates back to ScGroupDay
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScGroupDay rhs, ScGroupDayColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScGroupDayColumn.ScGroupDayId:
            		return this.ScGroupDayId.CompareTo(rhs.ScGroupDayId);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.ScGroupInfoId:
            		return this.ScGroupInfoId.CompareTo(rhs.ScGroupInfoId);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.ScTchngDayId:
            		return this.ScTchngDayId.CompareTo(rhs.ScTchngDayId);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.ScTchngSlotFrmId:
            		return this.ScTchngSlotFrmId.Value.CompareTo(rhs.ScTchngSlotFrmId.Value);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.ScTchngSlotToId:
            		return this.ScTchngSlotToId.Value.CompareTo(rhs.ScTchngSlotToId.Value);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.EdCdeTchngMthdId:
            		return this.EdCdeTchngMthdId.Value.CompareTo(rhs.EdCdeTchngMthdId.Value);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.CourseTopic:
            		return this.CourseTopic.CompareTo(rhs.CourseTopic);
            		
            		                 
            	
            	
            	case ScGroupDayColumn.GroupId:
            		return this.GroupId.Value.CompareTo(rhs.GroupId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScGroupDayKey> Members
		
		// member variable for the EntityId property
		private ScGroupDayKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScGroupDayKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScGroupDayKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScGroupDay")
					.Append("|").Append( this.ScGroupDayId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- ScGroupDayId: {0}{12}- ScGroupInfoId: {1}{12}- ScTchngDayId: {2}{12}- ScTchngSlotFrmId: {3}{12}- ScTchngSlotToId: {4}{12}- EdCourseId: {5}{12}- EdCdeTchngMthdId: {6}{12}- ScBuildingId: {7}{12}- ScHallId: {8}{12}- Notes: {9}{12}- CourseTopic: {10}{12}- GroupId: {11}{12}{14}", 
				this.ScGroupDayId,
				this.ScGroupInfoId,
				this.ScTchngDayId,
				(this.ScTchngSlotFrmId == null) ? string.Empty : this.ScTchngSlotFrmId.ToString(),
				(this.ScTchngSlotToId == null) ? string.Empty : this.ScTchngSlotToId.ToString(),
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.EdCdeTchngMthdId == null) ? string.Empty : this.EdCdeTchngMthdId.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.CourseTopic == null) ? string.Empty : this.CourseTopic.ToString(),
				(this.GroupId == null) ? string.Empty : this.GroupId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_GROUP_DAY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScGroupDayEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_GROUP_DAY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_GROUP_DAY"</remarks>
		public System.Decimal ScGroupDayId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScGroupDayId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_GROUP_INFO_ID : 
		/// </summary>
		public System.Decimal		  ScGroupInfoId = 0.0m;
		
		/// <summary>
		/// SC_TCHNG_DAY_ID : 
		/// </summary>
		public System.Decimal		  ScTchngDayId = 0.0m;
		
		/// <summary>
		/// SC_TCHNG_SLOT_FRM_ID : 
		/// </summary>
		public System.Decimal?		  ScTchngSlotFrmId = null;
		
		/// <summary>
		/// SC_TCHNG_SLOT_TO_ID : 
		/// </summary>
		public System.Decimal?		  ScTchngSlotToId = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// ED_CDE_TCHNG_MTHD_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeTchngMthdId = null;
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// SC_HALL_ID : 
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// COURSE_TOPIC : 
		/// </summary>
		public System.String		  CourseTopic = null;
		
		/// <summary>
		/// GROUP_ID : 
		/// </summary>
		public System.Decimal?		  GroupId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCdeTchngMthd _edCdeTchngMthdIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeTchngMthd"/>.
		/// </summary>
		/// <value>The source EdCdeTchngMthd for EdCdeTchngMthdId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeTchngMthd EdCdeTchngMthdIdSource
      	{
            get { return this._edCdeTchngMthdIdSource; }
            set { this._edCdeTchngMthdIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScGroupInfo _scGroupInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScGroupInfo"/>.
		/// </summary>
		/// <value>The source ScGroupInfo for ScGroupInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScGroupInfo ScGroupInfoIdSource
      	{
            get { return this._scGroupInfoIdSource; }
            set { this._scGroupInfoIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		private ScTchngDay _scTchngDayIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngDay"/>.
		/// </summary>
		/// <value>The source ScTchngDay for ScTchngDayId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScTchngDay ScTchngDayIdSource
      	{
            get { return this._scTchngDayIdSource; }
            set { this._scTchngDayIdSource = value; }
      	}
		private ScTchngSlot _scTchngSlotFrmIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotFrmId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScTchngSlot ScTchngSlotFrmIdSource
      	{
            get { return this._scTchngSlotFrmIdSource; }
            set { this._scTchngSlotFrmIdSource = value; }
      	}
		private ScTchngSlot _scTchngSlotToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScTchngSlot ScTchngSlotToIdSource
      	{
            get { return this._scTchngSlotToIdSource; }
            set { this._scTchngSlotToIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ScGroupStaffCollection
		
		private TList<ScGroupStaff> _scGroupStaffScGroupDayId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scGroupStaffScGroupDayId
		/// </summary>
		
		public TList<ScGroupStaff> ScGroupStaffCollection
		{
			get
			{
				if (_scGroupStaffScGroupDayId == null)
				{
				_scGroupStaffScGroupDayId = new TList<ScGroupStaff>();
				}
	
				return _scGroupStaffScGroupDayId;
			}
			set { _scGroupStaffScGroupDayId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScGroupDayEntityData _tmp = new ScGroupDayEntityData();
						
			_tmp.ScGroupDayId = this.ScGroupDayId;
			_tmp.OriginalScGroupDayId = this.OriginalScGroupDayId;
			
			_tmp.ScGroupInfoId = this.ScGroupInfoId;
			_tmp.ScTchngDayId = this.ScTchngDayId;
			_tmp.ScTchngSlotFrmId = this.ScTchngSlotFrmId;
			_tmp.ScTchngSlotToId = this.ScTchngSlotToId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCdeTchngMthdId = this.EdCdeTchngMthdId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.Notes = this.Notes;
			_tmp.CourseTopic = this.CourseTopic;
			_tmp.GroupId = this.GroupId;
			
			#region Source Parent Composite Entities
			if (this.EdCdeTchngMthdIdSource != null)
				_tmp.EdCdeTchngMthdIdSource = MakeCopyOf(this.EdCdeTchngMthdIdSource) as EdCdeTchngMthd;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScGroupInfoIdSource != null)
				_tmp.ScGroupInfoIdSource = MakeCopyOf(this.ScGroupInfoIdSource) as ScGroupInfo;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			if (this.ScTchngDayIdSource != null)
				_tmp.ScTchngDayIdSource = MakeCopyOf(this.ScTchngDayIdSource) as ScTchngDay;
			if (this.ScTchngSlotFrmIdSource != null)
				_tmp.ScTchngSlotFrmIdSource = MakeCopyOf(this.ScTchngSlotFrmIdSource) as ScTchngSlot;
			if (this.ScTchngSlotToIdSource != null)
				_tmp.ScTchngSlotToIdSource = MakeCopyOf(this.ScTchngSlotToIdSource) as ScTchngSlot;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._scGroupStaffScGroupDayId != null)
				_tmp.ScGroupStaffCollection = (TList<ScGroupStaff>) MakeCopyOf(this.ScGroupStaffCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScGroupDayEntityData _tmp = new ScGroupDayEntityData();
						
			_tmp.ScGroupDayId = this.ScGroupDayId;
			_tmp.OriginalScGroupDayId = this.OriginalScGroupDayId;
			
			_tmp.ScGroupInfoId = this.ScGroupInfoId;
			_tmp.ScTchngDayId = this.ScTchngDayId;
			_tmp.ScTchngSlotFrmId = this.ScTchngSlotFrmId;
			_tmp.ScTchngSlotToId = this.ScTchngSlotToId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCdeTchngMthdId = this.EdCdeTchngMthdId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.Notes = this.Notes;
			_tmp.CourseTopic = this.CourseTopic;
			_tmp.GroupId = this.GroupId;
			
			#region Source Parent Composite Entities
			if (this.EdCdeTchngMthdIdSource != null && existingCopies.Contains(this.EdCdeTchngMthdIdSource))
				_tmp.EdCdeTchngMthdIdSource = existingCopies[this.EdCdeTchngMthdIdSource] as EdCdeTchngMthd;
			else
				_tmp.EdCdeTchngMthdIdSource = MakeCopyOf(this.EdCdeTchngMthdIdSource, existingCopies) as EdCdeTchngMthd;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScGroupInfoIdSource != null && existingCopies.Contains(this.ScGroupInfoIdSource))
				_tmp.ScGroupInfoIdSource = existingCopies[this.ScGroupInfoIdSource] as ScGroupInfo;
			else
				_tmp.ScGroupInfoIdSource = MakeCopyOf(this.ScGroupInfoIdSource, existingCopies) as ScGroupInfo;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScTchngDayIdSource != null && existingCopies.Contains(this.ScTchngDayIdSource))
				_tmp.ScTchngDayIdSource = existingCopies[this.ScTchngDayIdSource] as ScTchngDay;
			else
				_tmp.ScTchngDayIdSource = MakeCopyOf(this.ScTchngDayIdSource, existingCopies) as ScTchngDay;
			if (this.ScTchngSlotFrmIdSource != null && existingCopies.Contains(this.ScTchngSlotFrmIdSource))
				_tmp.ScTchngSlotFrmIdSource = existingCopies[this.ScTchngSlotFrmIdSource] as ScTchngSlot;
			else
				_tmp.ScTchngSlotFrmIdSource = MakeCopyOf(this.ScTchngSlotFrmIdSource, existingCopies) as ScTchngSlot;
			if (this.ScTchngSlotToIdSource != null && existingCopies.Contains(this.ScTchngSlotToIdSource))
				_tmp.ScTchngSlotToIdSource = existingCopies[this.ScTchngSlotToIdSource] as ScTchngSlot;
			else
				_tmp.ScTchngSlotToIdSource = MakeCopyOf(this.ScTchngSlotToIdSource, existingCopies) as ScTchngSlot;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ScGroupStaffCollection = (TList<ScGroupStaff>) MakeCopyOf(this.ScGroupStaffCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScGroupDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScGroupDayColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScGroupDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScGroupDayColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScGroupDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScGroupDayColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScGroupDayEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScGroupDayEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScGroupDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScGroupDayColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScGroupDayEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScGroupDayEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScGroupDayEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScGroupDay"/> object.
	/// </remarks>
	public class ScGroupDayEventArgs : System.EventArgs
	{
		private ScGroupDayColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScGroupDayEventArgs class.
		///</summary>
		public ScGroupDayEventArgs(ScGroupDayColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScGroupDayEventArgs class.
		///</summary>
		public ScGroupDayEventArgs(ScGroupDayColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScGroupDayColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScGroupDayColumn" />
		public ScGroupDayColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScGroupDay related events.
	///</summary>
	public delegate void ScGroupDayEventHandler(object sender, ScGroupDayEventArgs e);
	
	#region ScGroupDayComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScGroupDayComparer : System.Collections.Generic.IComparer<ScGroupDay>
	{
		ScGroupDayColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScGroupDayComparer"/> class.
        /// </summary>
		public ScGroupDayComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScGroupDayComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScGroupDayComparer(ScGroupDayColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScGroupDay"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScGroupDay"/> to compare.</param>
        /// <param name="b">The second <c>ScGroupDay</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScGroupDay a, ScGroupDay b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScGroupDay entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScGroupDay a, ScGroupDay b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScGroupDayColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScGroupDayKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScGroupDay"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScGroupDayKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScGroupDayKey class.
		/// </summary>
		public ScGroupDayKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScGroupDayKey class.
		/// </summary>
		public ScGroupDayKey(ScGroupDayBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScGroupDayId = entity.ScGroupDayId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScGroupDayKey class.
		/// </summary>
		public ScGroupDayKey(System.Decimal _scGroupDayId)
		{
			#region Init Properties

			this.ScGroupDayId = _scGroupDayId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScGroupDayBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScGroupDayBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScGroupDayId property
		private System.Decimal _scGroupDayId;
		
		/// <summary>
		/// Gets or sets the ScGroupDayId property.
		/// </summary>
		public System.Decimal ScGroupDayId
		{
			get { return _scGroupDayId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScGroupDayId = value;
				
				_scGroupDayId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScGroupDayId = ( values["ScGroupDayId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScGroupDayId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScGroupDayId", ScGroupDayId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScGroupDayId: {0}{1}",
								ScGroupDayId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScGroupDayColumn Enum
	
	/// <summary>
	/// Enumerate the ScGroupDay columns.
	/// </summary>
	[Serializable]
	public enum ScGroupDayColumn : int
	{
		/// <summary>
		/// ScGroupDayId : 
		/// </summary>
		[EnumTextValue("SC_GROUP_DAY_ID")]
		[ColumnEnum("SC_GROUP_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScGroupDayId = 1,
		/// <summary>
		/// ScGroupInfoId : 
		/// </summary>
		[EnumTextValue("SC_GROUP_INFO_ID")]
		[ColumnEnum("SC_GROUP_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScGroupInfoId = 2,
		/// <summary>
		/// ScTchngDayId : 
		/// </summary>
		[EnumTextValue("SC_TCHNG_DAY_ID")]
		[ColumnEnum("SC_TCHNG_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScTchngDayId = 3,
		/// <summary>
		/// ScTchngSlotFrmId : 
		/// </summary>
		[EnumTextValue("SC_TCHNG_SLOT_FRM_ID")]
		[ColumnEnum("SC_TCHNG_SLOT_FRM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScTchngSlotFrmId = 4,
		/// <summary>
		/// ScTchngSlotToId : 
		/// </summary>
		[EnumTextValue("SC_TCHNG_SLOT_TO_ID")]
		[ColumnEnum("SC_TCHNG_SLOT_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScTchngSlotToId = 5,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 6,
		/// <summary>
		/// EdCdeTchngMthdId : 
		/// </summary>
		[EnumTextValue("ED_CDE_TCHNG_MTHD_ID")]
		[ColumnEnum("ED_CDE_TCHNG_MTHD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeTchngMthdId = 7,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 8,
		/// <summary>
		/// ScHallId : 
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 9,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 10,
		/// <summary>
		/// CourseTopic : 
		/// </summary>
		[EnumTextValue("COURSE_TOPIC")]
		[ColumnEnum("COURSE_TOPIC", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		CourseTopic = 11,
		/// <summary>
		/// GroupId : 
		/// </summary>
		[EnumTextValue("GROUP_ID")]
		[ColumnEnum("GROUP_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GroupId = 12
	}//End enum

	#endregion ScGroupDayColumn Enum

} // end namespace
