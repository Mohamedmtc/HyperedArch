
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudIntTrnsCourseFrom.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_INT_TRNS_COURSE_FROM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudIntTrnsCourseFromBase : EntityBase, IEdStudIntTrnsCourseFrom, IEntityId<EdStudIntTrnsCourseFromKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudIntTrnsCourseFromEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudIntTrnsCourseFromEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudIntTrnsCourseFromEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudIntTrnsCourseFrom> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudIntTrnsCourseFromEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudIntTrnsCourseFromEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudIntTrnsCourseFromBase"/> instance.
		///</summary>
		public EdStudIntTrnsCourseFromBase()
		{
			this.entityData = new EdStudIntTrnsCourseFromEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudIntTrnsCourseFromBase"/> instance.
		///</summary>
		///<param name="_edStudIntTrnsCourseFromId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_auditFlg"></param>
		///<param name="_repeatFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_courseDegree"></param>
		///<param name="_coursePoint"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_addGpaFlg"></param>
		///<param name="_addMjrgpaFlg"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_incompFlg"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edStudIntTrnsId"></param>
		public EdStudIntTrnsCourseFromBase(System.Decimal _edStudIntTrnsCourseFromId, System.Decimal _edCourseId, 
			System.Decimal _auditFlg, System.Decimal _repeatFlg, System.Decimal _isLast, 
			System.Decimal _asFacultyInfoId, System.Decimal? _edCodeCourseStatusId, 
			System.Decimal? _edCodeGradingId, System.Decimal? _courseDegree, 
			System.Decimal? _coursePoint, System.Decimal? _entPolicyGradingHdrId, 
			System.Decimal? _gsCodePassFailId, System.Decimal _addGpaFlg, System.Decimal _addMjrgpaFlg, 
			System.Decimal? _entPolicyAssessHdrId, System.Decimal _incompFlg, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, 
			System.Decimal? _edStudId, System.Decimal _edStudIntTrnsId)
		{
			this.entityData = new EdStudIntTrnsCourseFromEntityData();
			this.backupData = null;

			this.EdStudIntTrnsCourseFromId = _edStudIntTrnsCourseFromId;
			this.EdCourseId = _edCourseId;
			this.AuditFlg = _auditFlg;
			this.RepeatFlg = _repeatFlg;
			this.IsLast = _isLast;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCodeCourseStatusId = _edCodeCourseStatusId;
			this.EdCodeGradingId = _edCodeGradingId;
			this.CourseDegree = _courseDegree;
			this.CoursePoint = _coursePoint;
			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			this.GsCodePassFailId = _gsCodePassFailId;
			this.AddGpaFlg = _addGpaFlg;
			this.AddMjrgpaFlg = _addMjrgpaFlg;
			this.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			this.IncompFlg = _incompFlg;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdStudId = _edStudId;
			this.EdStudIntTrnsId = _edStudIntTrnsId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudIntTrnsCourseFrom"/> instance.
		///</summary>
		///<param name="_edStudIntTrnsCourseFromId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_auditFlg"></param>
		///<param name="_repeatFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_courseDegree"></param>
		///<param name="_coursePoint"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_addGpaFlg"></param>
		///<param name="_addMjrgpaFlg"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_incompFlg"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edStudIntTrnsId"></param>
		public static EdStudIntTrnsCourseFrom CreateEdStudIntTrnsCourseFrom(System.Decimal _edStudIntTrnsCourseFromId, System.Decimal _edCourseId, 
			System.Decimal _auditFlg, System.Decimal _repeatFlg, System.Decimal _isLast, 
			System.Decimal _asFacultyInfoId, System.Decimal? _edCodeCourseStatusId, 
			System.Decimal? _edCodeGradingId, System.Decimal? _courseDegree, 
			System.Decimal? _coursePoint, System.Decimal? _entPolicyGradingHdrId, 
			System.Decimal? _gsCodePassFailId, System.Decimal _addGpaFlg, System.Decimal _addMjrgpaFlg, 
			System.Decimal? _entPolicyAssessHdrId, System.Decimal _incompFlg, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, 
			System.Decimal? _edStudId, System.Decimal _edStudIntTrnsId)
		{
			EdStudIntTrnsCourseFrom newEdStudIntTrnsCourseFrom = new EdStudIntTrnsCourseFrom();
			newEdStudIntTrnsCourseFrom.EdStudIntTrnsCourseFromId = _edStudIntTrnsCourseFromId;
			newEdStudIntTrnsCourseFrom.EdCourseId = _edCourseId;
			newEdStudIntTrnsCourseFrom.AuditFlg = _auditFlg;
			newEdStudIntTrnsCourseFrom.RepeatFlg = _repeatFlg;
			newEdStudIntTrnsCourseFrom.IsLast = _isLast;
			newEdStudIntTrnsCourseFrom.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudIntTrnsCourseFrom.EdCodeCourseStatusId = _edCodeCourseStatusId;
			newEdStudIntTrnsCourseFrom.EdCodeGradingId = _edCodeGradingId;
			newEdStudIntTrnsCourseFrom.CourseDegree = _courseDegree;
			newEdStudIntTrnsCourseFrom.CoursePoint = _coursePoint;
			newEdStudIntTrnsCourseFrom.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			newEdStudIntTrnsCourseFrom.GsCodePassFailId = _gsCodePassFailId;
			newEdStudIntTrnsCourseFrom.AddGpaFlg = _addGpaFlg;
			newEdStudIntTrnsCourseFrom.AddMjrgpaFlg = _addMjrgpaFlg;
			newEdStudIntTrnsCourseFrom.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			newEdStudIntTrnsCourseFrom.IncompFlg = _incompFlg;
			newEdStudIntTrnsCourseFrom.EdAcadYearId = _edAcadYearId;
			newEdStudIntTrnsCourseFrom.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudIntTrnsCourseFrom.EdStudId = _edStudId;
			newEdStudIntTrnsCourseFrom.EdStudIntTrnsId = _edStudIntTrnsId;
			return newEdStudIntTrnsCourseFrom;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudIntTrnsCourseFromId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudIntTrnsCourseFromId
		{
			get
			{
				return this.entityData.EdStudIntTrnsCourseFromId; 
			}
			
			set
			{
				if (this.entityData.EdStudIntTrnsCourseFromId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdStudIntTrnsCourseFromId, this.entityData.EdStudIntTrnsCourseFromId);
				this.entityData.EdStudIntTrnsCourseFromId = value;
				this.EntityId.EdStudIntTrnsCourseFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdStudIntTrnsCourseFromId, this.entityData.EdStudIntTrnsCourseFromId);
				OnPropertyChanged("EdStudIntTrnsCourseFromId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_INT_TRNS_COURSE_FROM_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_INT_TRNS_COURSE_FROM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudIntTrnsCourseFromId
		{
			get { return this.entityData.OriginalEdStudIntTrnsCourseFromId; }
			set { this.entityData.OriginalEdStudIntTrnsCourseFromId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AuditFlg
		{
			get
			{
				return this.entityData.AuditFlg; 
			}
			
			set
			{
				if (this.entityData.AuditFlg == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.AuditFlg, this.entityData.AuditFlg);
				this.entityData.AuditFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.AuditFlg, this.entityData.AuditFlg);
				OnPropertyChanged("AuditFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RepeatFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RepeatFlg
		{
			get
			{
				return this.entityData.RepeatFlg; 
			}
			
			set
			{
				if (this.entityData.RepeatFlg == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.RepeatFlg, this.entityData.RepeatFlg);
				this.entityData.RepeatFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.RepeatFlg, this.entityData.RepeatFlg);
				OnPropertyChanged("RepeatFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseStatusId
		{
			get
			{
				return this.entityData.EdCodeCourseStatusId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseStatusId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				this.entityData.EdCodeCourseStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				OnPropertyChanged("EdCodeCourseStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseDegree property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCourseDegreeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CourseDegree
		{
			get
			{
				return this.entityData.CourseDegree; 
			}
			
			set
			{
				if (this.entityData.CourseDegree == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.CourseDegree, this.entityData.CourseDegree);
				this.entityData.CourseDegree = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.CourseDegree, this.entityData.CourseDegree);
				OnPropertyChanged("CourseDegree");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoursePoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoursePointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoursePoint
		{
			get
			{
				return this.entityData.CoursePoint; 
			}
			
			set
			{
				if (this.entityData.CoursePoint == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.CoursePoint, this.entityData.CoursePoint);
				this.entityData.CoursePoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.CoursePoint, this.entityData.CoursePoint);
				OnPropertyChanged("CoursePoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyGradingHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyGradingHdrId
		{
			get
			{
				return this.entityData.EntPolicyGradingHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingHdrId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				this.entityData.EntPolicyGradingHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				OnPropertyChanged("EntPolicyGradingHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePassFailIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePassFailId
		{
			get
			{
				return this.entityData.GsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				this.entityData.GsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				OnPropertyChanged("GsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddGpaFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AddGpaFlg
		{
			get
			{
				return this.entityData.AddGpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddGpaFlg == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				this.entityData.AddGpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				OnPropertyChanged("AddGpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddMjrgpaFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AddMjrgpaFlg
		{
			get
			{
				return this.entityData.AddMjrgpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddMjrgpaFlg == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.AddMjrgpaFlg, this.entityData.AddMjrgpaFlg);
				this.entityData.AddMjrgpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.AddMjrgpaFlg, this.entityData.AddMjrgpaFlg);
				OnPropertyChanged("AddMjrgpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyAssessHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyAssessHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyAssessHdrId
		{
			get
			{
				return this.entityData.EntPolicyAssessHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyAssessHdrId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				this.entityData.EntPolicyAssessHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				OnPropertyChanged("EntPolicyAssessHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IncompFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IncompFlg
		{
			get
			{
				return this.entityData.IncompFlg; 
			}
			
			set
			{
				if (this.entityData.IncompFlg == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.IncompFlg, this.entityData.IncompFlg);
				this.entityData.IncompFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.IncompFlg, this.entityData.IncompFlg);
				OnPropertyChanged("IncompFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudIntTrnsId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudIntTrnsId
		{
			get
			{
				return this.entityData.EdStudIntTrnsId; 
			}
			
			set
			{
				if (this.entityData.EdStudIntTrnsId == value)
					return;
					
				OnColumnChanging(EdStudIntTrnsCourseFromColumn.EdStudIntTrnsId, this.entityData.EdStudIntTrnsId);
				this.entityData.EdStudIntTrnsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudIntTrnsCourseFromColumn.EdStudIntTrnsId, this.entityData.EdStudIntTrnsId);
				OnPropertyChanged("EdStudIntTrnsId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return entityData.EdCodeCourseStatusIdSource; }
            set { entityData.EdCodeCourseStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return entityData.EntPolicyAssessHdrIdSource; }
            set { entityData.EntPolicyAssessHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return entityData.EntPolicyGradingHdrIdSource; }
            set { entityData.EntPolicyGradingHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return entityData.GsCodePassFailIdSource; }
            set { entityData.GsCodePassFailIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudIntTrns"/>.
		/// </summary>
		/// <value>The source EdStudIntTrns for EdStudIntTrnsId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudIntTrns EdStudIntTrnsIdSource
      	{
            get { return entityData.EdStudIntTrnsIdSource; }
            set { entityData.EdStudIntTrnsIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_INT_TRNS_COURSE_FROM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_INT_TRNS_COURSE_FROM_ID", "ED_COURSE_ID", "AUDIT_FLG", "REPEAT_FLG", "IS_LAST", "AS_FACULTY_INFO_ID", "ED_CODE_COURSE_STATUS_ID", "ED_CODE_GRADING_ID", "COURSE_DEGREE", "COURSE_POINT", "ENT_POLICY_GRADING_HDR_ID", "GS_CODE_PASS_FAIL_ID", "ADD_GPA_FLG", "ADD_MJRGPA_FLG", "ENT_POLICY_ASSESS_HDR_ID", "INCOMP_FLG", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_STUD_ID", "ED_STUD_INT_TRNS_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudIntTrnsCourseFromEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudIntTrnsCourseFrom) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudIntTrnsCourseFrom>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudIntTrnsCourseFrom);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudIntTrnsCourseFrom Entity 
		///</summary>
		protected virtual EdStudIntTrnsCourseFrom Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudIntTrnsCourseFrom copy = new EdStudIntTrnsCourseFrom();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudIntTrnsCourseFromId = this.EdStudIntTrnsCourseFromId;
					copy.OriginalEdStudIntTrnsCourseFromId = this.OriginalEdStudIntTrnsCourseFromId;
				copy.EdCourseId = this.EdCourseId;
				copy.AuditFlg = this.AuditFlg;
				copy.RepeatFlg = this.RepeatFlg;
				copy.IsLast = this.IsLast;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.CourseDegree = this.CourseDegree;
				copy.CoursePoint = this.CoursePoint;
				copy.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
				copy.GsCodePassFailId = this.GsCodePassFailId;
				copy.AddGpaFlg = this.AddGpaFlg;
				copy.AddMjrgpaFlg = this.AddMjrgpaFlg;
				copy.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
				copy.IncompFlg = this.IncompFlg;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdStudId = this.EdStudId;
				copy.EdStudIntTrnsId = this.EdStudIntTrnsId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				copy.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				copy.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				copy.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				copy.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				copy.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				copy.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				copy.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.EdStudIntTrnsIdSource != null && existingCopies.Contains(this.EdStudIntTrnsIdSource))
				copy.EdStudIntTrnsIdSource = existingCopies[this.EdStudIntTrnsIdSource] as EdStudIntTrns;
			else
				copy.EdStudIntTrnsIdSource = MakeCopyOf(this.EdStudIntTrnsIdSource, existingCopies) as EdStudIntTrns;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudIntTrnsCourseFrom Entity 
		///</summary>
		public virtual EdStudIntTrnsCourseFrom Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudIntTrnsCourseFrom Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudIntTrnsCourseFrom DeepCopy()
		{
			return EntityHelper.Clone<EdStudIntTrnsCourseFrom>(this as EdStudIntTrnsCourseFrom);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudIntTrnsCourseFromEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudIntTrnsCourseFromEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudIntTrnsCourseFromEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudIntTrnsCourseFromColumn column)
		{
			switch(column)
			{
					case EdStudIntTrnsCourseFromColumn.EdStudIntTrnsCourseFromId:
					return entityData.EdStudIntTrnsCourseFromId != _originalData.EdStudIntTrnsCourseFromId;
					case EdStudIntTrnsCourseFromColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdStudIntTrnsCourseFromColumn.AuditFlg:
					return entityData.AuditFlg != _originalData.AuditFlg;
					case EdStudIntTrnsCourseFromColumn.RepeatFlg:
					return entityData.RepeatFlg != _originalData.RepeatFlg;
					case EdStudIntTrnsCourseFromColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudIntTrnsCourseFromColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudIntTrnsCourseFromColumn.EdCodeCourseStatusId:
					return entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
					case EdStudIntTrnsCourseFromColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EdStudIntTrnsCourseFromColumn.CourseDegree:
					return entityData.CourseDegree != _originalData.CourseDegree;
					case EdStudIntTrnsCourseFromColumn.CoursePoint:
					return entityData.CoursePoint != _originalData.CoursePoint;
					case EdStudIntTrnsCourseFromColumn.EntPolicyGradingHdrId:
					return entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
					case EdStudIntTrnsCourseFromColumn.GsCodePassFailId:
					return entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
					case EdStudIntTrnsCourseFromColumn.AddGpaFlg:
					return entityData.AddGpaFlg != _originalData.AddGpaFlg;
					case EdStudIntTrnsCourseFromColumn.AddMjrgpaFlg:
					return entityData.AddMjrgpaFlg != _originalData.AddMjrgpaFlg;
					case EdStudIntTrnsCourseFromColumn.EntPolicyAssessHdrId:
					return entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
					case EdStudIntTrnsCourseFromColumn.IncompFlg:
					return entityData.IncompFlg != _originalData.IncompFlg;
					case EdStudIntTrnsCourseFromColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudIntTrnsCourseFromColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudIntTrnsCourseFromColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudIntTrnsCourseFromColumn.EdStudIntTrnsId:
					return entityData.EdStudIntTrnsId != _originalData.EdStudIntTrnsId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudIntTrnsCourseFromColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudIntTrnsCourseFromId != _originalData.EdStudIntTrnsCourseFromId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.AuditFlg != _originalData.AuditFlg;
			result = result || entityData.RepeatFlg != _originalData.RepeatFlg;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.CourseDegree != _originalData.CourseDegree;
			result = result || entityData.CoursePoint != _originalData.CoursePoint;
			result = result || entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			result = result || entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
			result = result || entityData.AddGpaFlg != _originalData.AddGpaFlg;
			result = result || entityData.AddMjrgpaFlg != _originalData.AddMjrgpaFlg;
			result = result || entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
			result = result || entityData.IncompFlg != _originalData.IncompFlg;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdStudIntTrnsId != _originalData.EdStudIntTrnsId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudIntTrnsCourseFrom Entity with the original data.
		///</summary>
		public EdStudIntTrnsCourseFrom GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudIntTrnsCourseFrom(
				_originalData.EdStudIntTrnsCourseFromId,
				_originalData.EdCourseId,
				_originalData.AuditFlg,
				_originalData.RepeatFlg,
				_originalData.IsLast,
				_originalData.AsFacultyInfoId,
				_originalData.EdCodeCourseStatusId,
				_originalData.EdCodeGradingId,
				_originalData.CourseDegree,
				_originalData.CoursePoint,
				_originalData.EntPolicyGradingHdrId,
				_originalData.GsCodePassFailId,
				_originalData.AddGpaFlg,
				_originalData.AddMjrgpaFlg,
				_originalData.EntPolicyAssessHdrId,
				_originalData.IncompFlg,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdStudId,
				_originalData.EdStudIntTrnsId
				);
				
			return (EdStudIntTrnsCourseFrom)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudIntTrnsCourseFromBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudIntTrnsCourseFromBase)
				return ValueEquals(this, (EdStudIntTrnsCourseFromBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudIntTrnsCourseFromBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudIntTrnsCourseFromId.GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					this.AuditFlg.GetHashCode() ^ 
					this.RepeatFlg.GetHashCode() ^ 
					this.IsLast.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.CourseDegree == null) ? string.Empty : this.CourseDegree.ToString()).GetHashCode() ^ 
					((this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString()).GetHashCode() ^ 
					((this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString()).GetHashCode() ^ 
					((this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString()).GetHashCode() ^ 
					this.AddGpaFlg.GetHashCode() ^ 
					this.AddMjrgpaFlg.GetHashCode() ^ 
					((this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString()).GetHashCode() ^ 
					this.IncompFlg.GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					this.EdStudIntTrnsId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudIntTrnsCourseFromBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudIntTrnsCourseFromBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudIntTrnsCourseFromBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudIntTrnsCourseFromBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudIntTrnsCourseFromBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudIntTrnsCourseFromBase Object1, EdStudIntTrnsCourseFromBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudIntTrnsCourseFromId != Object2.EdStudIntTrnsCourseFromId)
				equal = false;
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if (Object1.AuditFlg != Object2.AuditFlg)
				equal = false;
			if (Object1.RepeatFlg != Object2.RepeatFlg)
				equal = false;
			if (Object1.IsLast != Object2.IsLast)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.EdCodeCourseStatusId != null && Object2.EdCodeCourseStatusId != null )
			{
				if (Object1.EdCodeCourseStatusId != Object2.EdCodeCourseStatusId)
					equal = false;
			}
			else if (Object1.EdCodeCourseStatusId == null ^ Object2.EdCodeCourseStatusId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.CourseDegree != null && Object2.CourseDegree != null )
			{
				if (Object1.CourseDegree != Object2.CourseDegree)
					equal = false;
			}
			else if (Object1.CourseDegree == null ^ Object2.CourseDegree == null )
			{
				equal = false;
			}
			if ( Object1.CoursePoint != null && Object2.CoursePoint != null )
			{
				if (Object1.CoursePoint != Object2.CoursePoint)
					equal = false;
			}
			else if (Object1.CoursePoint == null ^ Object2.CoursePoint == null )
			{
				equal = false;
			}
			if ( Object1.EntPolicyGradingHdrId != null && Object2.EntPolicyGradingHdrId != null )
			{
				if (Object1.EntPolicyGradingHdrId != Object2.EntPolicyGradingHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyGradingHdrId == null ^ Object2.EntPolicyGradingHdrId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodePassFailId != null && Object2.GsCodePassFailId != null )
			{
				if (Object1.GsCodePassFailId != Object2.GsCodePassFailId)
					equal = false;
			}
			else if (Object1.GsCodePassFailId == null ^ Object2.GsCodePassFailId == null )
			{
				equal = false;
			}
			if (Object1.AddGpaFlg != Object2.AddGpaFlg)
				equal = false;
			if (Object1.AddMjrgpaFlg != Object2.AddMjrgpaFlg)
				equal = false;
			if ( Object1.EntPolicyAssessHdrId != null && Object2.EntPolicyAssessHdrId != null )
			{
				if (Object1.EntPolicyAssessHdrId != Object2.EntPolicyAssessHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyAssessHdrId == null ^ Object2.EntPolicyAssessHdrId == null )
			{
				equal = false;
			}
			if (Object1.IncompFlg != Object2.IncompFlg)
				equal = false;
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if (Object1.EdStudIntTrnsId != Object2.EdStudIntTrnsId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudIntTrnsCourseFromBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudIntTrnsCourseFromComparer GetComparer()
        {
            return new EdStudIntTrnsCourseFromComparer();
        }
        */

        // Comparer delegates back to EdStudIntTrnsCourseFrom
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudIntTrnsCourseFrom rhs, EdStudIntTrnsCourseFromColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdStudIntTrnsCourseFromId:
            		return this.EdStudIntTrnsCourseFromId.CompareTo(rhs.EdStudIntTrnsCourseFromId);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.AuditFlg:
            		return this.AuditFlg.CompareTo(rhs.AuditFlg);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.RepeatFlg:
            		return this.RepeatFlg.CompareTo(rhs.RepeatFlg);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.IsLast:
            		return this.IsLast.CompareTo(rhs.IsLast);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdCodeCourseStatusId:
            		return this.EdCodeCourseStatusId.Value.CompareTo(rhs.EdCodeCourseStatusId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.CourseDegree:
            		return this.CourseDegree.Value.CompareTo(rhs.CourseDegree.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.CoursePoint:
            		return this.CoursePoint.Value.CompareTo(rhs.CoursePoint.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EntPolicyGradingHdrId:
            		return this.EntPolicyGradingHdrId.Value.CompareTo(rhs.EntPolicyGradingHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.GsCodePassFailId:
            		return this.GsCodePassFailId.Value.CompareTo(rhs.GsCodePassFailId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.AddGpaFlg:
            		return this.AddGpaFlg.CompareTo(rhs.AddGpaFlg);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.AddMjrgpaFlg:
            		return this.AddMjrgpaFlg.CompareTo(rhs.AddMjrgpaFlg);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EntPolicyAssessHdrId:
            		return this.EntPolicyAssessHdrId.Value.CompareTo(rhs.EntPolicyAssessHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.IncompFlg:
            		return this.IncompFlg.CompareTo(rhs.IncompFlg);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case EdStudIntTrnsCourseFromColumn.EdStudIntTrnsId:
            		return this.EdStudIntTrnsId.CompareTo(rhs.EdStudIntTrnsId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudIntTrnsCourseFromKey> Members
		
		// member variable for the EntityId property
		private EdStudIntTrnsCourseFromKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudIntTrnsCourseFromKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudIntTrnsCourseFromKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudIntTrnsCourseFrom")
					.Append("|").Append( this.EdStudIntTrnsCourseFromId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- EdStudIntTrnsCourseFromId: {0}{20}- EdCourseId: {1}{20}- AuditFlg: {2}{20}- RepeatFlg: {3}{20}- IsLast: {4}{20}- AsFacultyInfoId: {5}{20}- EdCodeCourseStatusId: {6}{20}- EdCodeGradingId: {7}{20}- CourseDegree: {8}{20}- CoursePoint: {9}{20}- EntPolicyGradingHdrId: {10}{20}- GsCodePassFailId: {11}{20}- AddGpaFlg: {12}{20}- AddMjrgpaFlg: {13}{20}- EntPolicyAssessHdrId: {14}{20}- IncompFlg: {15}{20}- EdAcadYearId: {16}{20}- EdCodeSemesterId: {17}{20}- EdStudId: {18}{20}- EdStudIntTrnsId: {19}{20}{22}", 
				this.EdStudIntTrnsCourseFromId,
				this.EdCourseId,
				this.AuditFlg,
				this.RepeatFlg,
				this.IsLast,
				this.AsFacultyInfoId,
				(this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				(this.CourseDegree == null) ? string.Empty : this.CourseDegree.ToString(),
				(this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString(),
				(this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString(),
				(this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString(),
				this.AddGpaFlg,
				this.AddMjrgpaFlg,
				(this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString(),
				this.IncompFlg,
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				this.EdStudIntTrnsId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_INT_TRNS_COURSE_FROM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudIntTrnsCourseFromEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_INT_TRNS_COURSE_FROM_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_INT_TRNS_COURSE_FROM"</remarks>
		public System.Decimal EdStudIntTrnsCourseFromId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudIntTrnsCourseFromId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// AUDIT_FLG : 
		/// </summary>
		public System.Decimal		  AuditFlg = 0.0m;
		
		/// <summary>
		/// REPEAT_FLG : 
		/// </summary>
		public System.Decimal		  RepeatFlg = 0.0m;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Decimal		  IsLast = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// ED_CODE_COURSE_STATUS_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseStatusId = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// COURSE_DEGREE : 
		/// </summary>
		public System.Decimal?		  CourseDegree = null;
		
		/// <summary>
		/// COURSE_POINT : 
		/// </summary>
		public System.Decimal?		  CoursePoint = null;
		
		/// <summary>
		/// ENT_POLICY_GRADING_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyGradingHdrId = null;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal?		  GsCodePassFailId = null;
		
		/// <summary>
		/// ADD_GPA_FLG : 
		/// </summary>
		public System.Decimal		  AddGpaFlg = 0.0m;
		
		/// <summary>
		/// ADD_MJRGPA_FLG : 
		/// </summary>
		public System.Decimal		  AddMjrgpaFlg = 0.0m;
		
		/// <summary>
		/// ENT_POLICY_ASSESS_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyAssessHdrId = null;
		
		/// <summary>
		/// INCOMP_FLG : 
		/// </summary>
		public System.Decimal		  IncompFlg = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// ED_STUD_INT_TRNS_ID : 
		/// </summary>
		public System.Decimal		  EdStudIntTrnsId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeCourseStatus _edCodeCourseStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return this._edCodeCourseStatusIdSource; }
            set { this._edCodeCourseStatusIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EntPolicyAssessHdr _entPolicyAssessHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return this._entPolicyAssessHdrIdSource; }
            set { this._entPolicyAssessHdrIdSource = value; }
      	}
		private EntPolicyGradingHdr _entPolicyGradingHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return this._entPolicyGradingHdrIdSource; }
            set { this._entPolicyGradingHdrIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return this._gsCodePassFailIdSource; }
            set { this._gsCodePassFailIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private EdStudIntTrns _edStudIntTrnsIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudIntTrns"/>.
		/// </summary>
		/// <value>The source EdStudIntTrns for EdStudIntTrnsId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudIntTrns EdStudIntTrnsIdSource
      	{
            get { return this._edStudIntTrnsIdSource; }
            set { this._edStudIntTrnsIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudIntTrnsCourseFromEntityData _tmp = new EdStudIntTrnsCourseFromEntityData();
						
			_tmp.EdStudIntTrnsCourseFromId = this.EdStudIntTrnsCourseFromId;
			_tmp.OriginalEdStudIntTrnsCourseFromId = this.OriginalEdStudIntTrnsCourseFromId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CourseDegree = this.CourseDegree;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.AddMjrgpaFlg = this.AddMjrgpaFlg;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.IncompFlg = this.IncompFlg;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdStudIntTrnsId = this.EdStudIntTrnsId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeCourseStatusIdSource != null)
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EntPolicyAssessHdrIdSource != null)
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null)
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null)
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource) as GsCodePassFail;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.EdStudIntTrnsIdSource != null)
				_tmp.EdStudIntTrnsIdSource = MakeCopyOf(this.EdStudIntTrnsIdSource) as EdStudIntTrns;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudIntTrnsCourseFromEntityData _tmp = new EdStudIntTrnsCourseFromEntityData();
						
			_tmp.EdStudIntTrnsCourseFromId = this.EdStudIntTrnsCourseFromId;
			_tmp.OriginalEdStudIntTrnsCourseFromId = this.OriginalEdStudIntTrnsCourseFromId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CourseDegree = this.CourseDegree;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.AddMjrgpaFlg = this.AddMjrgpaFlg;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.IncompFlg = this.IncompFlg;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdStudIntTrnsId = this.EdStudIntTrnsId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				_tmp.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				_tmp.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				_tmp.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				_tmp.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.EdStudIntTrnsIdSource != null && existingCopies.Contains(this.EdStudIntTrnsIdSource))
				_tmp.EdStudIntTrnsIdSource = existingCopies[this.EdStudIntTrnsIdSource] as EdStudIntTrns;
			else
				_tmp.EdStudIntTrnsIdSource = MakeCopyOf(this.EdStudIntTrnsIdSource, existingCopies) as EdStudIntTrns;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudIntTrnsCourseFromColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudIntTrnsCourseFromColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudIntTrnsCourseFromColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudIntTrnsCourseFromColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudIntTrnsCourseFromColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudIntTrnsCourseFromColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudIntTrnsCourseFromEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudIntTrnsCourseFromEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudIntTrnsCourseFromColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudIntTrnsCourseFromColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudIntTrnsCourseFromEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudIntTrnsCourseFromEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudIntTrnsCourseFromEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudIntTrnsCourseFrom"/> object.
	/// </remarks>
	public class EdStudIntTrnsCourseFromEventArgs : System.EventArgs
	{
		private EdStudIntTrnsCourseFromColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudIntTrnsCourseFromEventArgs class.
		///</summary>
		public EdStudIntTrnsCourseFromEventArgs(EdStudIntTrnsCourseFromColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudIntTrnsCourseFromEventArgs class.
		///</summary>
		public EdStudIntTrnsCourseFromEventArgs(EdStudIntTrnsCourseFromColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudIntTrnsCourseFromColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudIntTrnsCourseFromColumn" />
		public EdStudIntTrnsCourseFromColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudIntTrnsCourseFrom related events.
	///</summary>
	public delegate void EdStudIntTrnsCourseFromEventHandler(object sender, EdStudIntTrnsCourseFromEventArgs e);
	
	#region EdStudIntTrnsCourseFromComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudIntTrnsCourseFromComparer : System.Collections.Generic.IComparer<EdStudIntTrnsCourseFrom>
	{
		EdStudIntTrnsCourseFromColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudIntTrnsCourseFromComparer"/> class.
        /// </summary>
		public EdStudIntTrnsCourseFromComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudIntTrnsCourseFromComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudIntTrnsCourseFromComparer(EdStudIntTrnsCourseFromColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudIntTrnsCourseFrom"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudIntTrnsCourseFrom"/> to compare.</param>
        /// <param name="b">The second <c>EdStudIntTrnsCourseFrom</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudIntTrnsCourseFrom a, EdStudIntTrnsCourseFrom b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudIntTrnsCourseFrom entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudIntTrnsCourseFrom a, EdStudIntTrnsCourseFrom b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudIntTrnsCourseFromColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudIntTrnsCourseFromKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudIntTrnsCourseFrom"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudIntTrnsCourseFromKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromKey class.
		/// </summary>
		public EdStudIntTrnsCourseFromKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromKey class.
		/// </summary>
		public EdStudIntTrnsCourseFromKey(EdStudIntTrnsCourseFromBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudIntTrnsCourseFromId = entity.EdStudIntTrnsCourseFromId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudIntTrnsCourseFromKey class.
		/// </summary>
		public EdStudIntTrnsCourseFromKey(System.Decimal _edStudIntTrnsCourseFromId)
		{
			#region Init Properties

			this.EdStudIntTrnsCourseFromId = _edStudIntTrnsCourseFromId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudIntTrnsCourseFromBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudIntTrnsCourseFromBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudIntTrnsCourseFromId property
		private System.Decimal _edStudIntTrnsCourseFromId;
		
		/// <summary>
		/// Gets or sets the EdStudIntTrnsCourseFromId property.
		/// </summary>
		public System.Decimal EdStudIntTrnsCourseFromId
		{
			get { return _edStudIntTrnsCourseFromId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudIntTrnsCourseFromId = value;
				
				_edStudIntTrnsCourseFromId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudIntTrnsCourseFromId = ( values["EdStudIntTrnsCourseFromId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudIntTrnsCourseFromId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudIntTrnsCourseFromId", EdStudIntTrnsCourseFromId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudIntTrnsCourseFromId: {0}{1}",
								EdStudIntTrnsCourseFromId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudIntTrnsCourseFromColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudIntTrnsCourseFrom columns.
	/// </summary>
	[Serializable]
	public enum EdStudIntTrnsCourseFromColumn : int
	{
		/// <summary>
		/// EdStudIntTrnsCourseFromId : 
		/// </summary>
		[EnumTextValue("ED_STUD_INT_TRNS_COURSE_FROM_ID")]
		[ColumnEnum("ED_STUD_INT_TRNS_COURSE_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudIntTrnsCourseFromId = 1,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 2,
		/// <summary>
		/// AuditFlg : 
		/// </summary>
		[EnumTextValue("AUDIT_FLG")]
		[ColumnEnum("AUDIT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AuditFlg = 3,
		/// <summary>
		/// RepeatFlg : 
		/// </summary>
		[EnumTextValue("REPEAT_FLG")]
		[ColumnEnum("REPEAT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RepeatFlg = 4,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsLast = 5,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 6,
		/// <summary>
		/// EdCodeCourseStatusId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_STATUS_ID")]
		[ColumnEnum("ED_CODE_COURSE_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseStatusId = 7,
		/// <summary>
		/// EdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 8,
		/// <summary>
		/// CourseDegree : 
		/// </summary>
		[EnumTextValue("COURSE_DEGREE")]
		[ColumnEnum("COURSE_DEGREE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CourseDegree = 9,
		/// <summary>
		/// CoursePoint : 
		/// </summary>
		[EnumTextValue("COURSE_POINT")]
		[ColumnEnum("COURSE_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoursePoint = 10,
		/// <summary>
		/// EntPolicyGradingHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_HDR_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyGradingHdrId = 11,
		/// <summary>
		/// GsCodePassFailId : 
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePassFailId = 12,
		/// <summary>
		/// AddGpaFlg : 
		/// </summary>
		[EnumTextValue("ADD_GPA_FLG")]
		[ColumnEnum("ADD_GPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AddGpaFlg = 13,
		/// <summary>
		/// AddMjrgpaFlg : 
		/// </summary>
		[EnumTextValue("ADD_MJRGPA_FLG")]
		[ColumnEnum("ADD_MJRGPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AddMjrgpaFlg = 14,
		/// <summary>
		/// EntPolicyAssessHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_ASSESS_HDR_ID")]
		[ColumnEnum("ENT_POLICY_ASSESS_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyAssessHdrId = 15,
		/// <summary>
		/// IncompFlg : 
		/// </summary>
		[EnumTextValue("INCOMP_FLG")]
		[ColumnEnum("INCOMP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IncompFlg = 16,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 17,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 18,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 19,
		/// <summary>
		/// EdStudIntTrnsId : 
		/// </summary>
		[EnumTextValue("ED_STUD_INT_TRNS_ID")]
		[ColumnEnum("ED_STUD_INT_TRNS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudIntTrnsId = 20
	}//End enum

	#endregion EdStudIntTrnsCourseFromColumn Enum

} // end namespace
