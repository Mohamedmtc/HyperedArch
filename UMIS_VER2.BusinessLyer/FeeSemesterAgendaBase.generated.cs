
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeSemesterAgenda.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_SEMESTER_AGENDA' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeSemesterAgendaBase : EntityBase, IFeeSemesterAgenda, IEntityId<FeeSemesterAgendaKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeSemesterAgendaEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeSemesterAgendaEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeSemesterAgendaEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeSemesterAgenda> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeSemesterAgendaEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeSemesterAgendaEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeSemesterAgendaBase"/> instance.
		///</summary>
		public FeeSemesterAgendaBase()
		{
			this.entityData = new FeeSemesterAgendaEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeSemesterAgendaBase"/> instance.
		///</summary>
		///<param name="_feeSemesterAgendaId">XXXXX not used</param>
		///<param name="_edCodeSemActvityId"></param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_amount">قيمة او نسبة</param>
		///<param name="_amntPrcntFlg">قيمة او نسبة</param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_entMainId"></param>
		public FeeSemesterAgendaBase(System.Decimal _feeSemesterAgendaId, System.Decimal _edCodeSemActvityId, 
			System.Decimal _feeCodeItemId, System.Decimal _amount, System.Boolean _amntPrcntFlg, 
			System.Decimal _gsCodeCurrencyId, System.Decimal? _entMainId)
		{
			this.entityData = new FeeSemesterAgendaEntityData();
			this.backupData = null;

			this.FeeSemesterAgendaId = _feeSemesterAgendaId;
			this.EdCodeSemActvityId = _edCodeSemActvityId;
			this.FeeCodeItemId = _feeCodeItemId;
			this.Amount = _amount;
			this.AmntPrcntFlg = _amntPrcntFlg;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.EntMainId = _entMainId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeSemesterAgenda"/> instance.
		///</summary>
		///<param name="_feeSemesterAgendaId">XXXXX not used</param>
		///<param name="_edCodeSemActvityId"></param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_amount">قيمة او نسبة</param>
		///<param name="_amntPrcntFlg">قيمة او نسبة</param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_entMainId"></param>
		public static FeeSemesterAgenda CreateFeeSemesterAgenda(System.Decimal _feeSemesterAgendaId, System.Decimal _edCodeSemActvityId, 
			System.Decimal _feeCodeItemId, System.Decimal _amount, System.Boolean _amntPrcntFlg, 
			System.Decimal _gsCodeCurrencyId, System.Decimal? _entMainId)
		{
			FeeSemesterAgenda newFeeSemesterAgenda = new FeeSemesterAgenda();
			newFeeSemesterAgenda.FeeSemesterAgendaId = _feeSemesterAgendaId;
			newFeeSemesterAgenda.EdCodeSemActvityId = _edCodeSemActvityId;
			newFeeSemesterAgenda.FeeCodeItemId = _feeCodeItemId;
			newFeeSemesterAgenda.Amount = _amount;
			newFeeSemesterAgenda.AmntPrcntFlg = _amntPrcntFlg;
			newFeeSemesterAgenda.GsCodeCurrencyId = _gsCodeCurrencyId;
			newFeeSemesterAgenda.EntMainId = _entMainId;
			return newFeeSemesterAgenda;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeSemesterAgendaId property. 
		///		XXXXX not used
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXXXX not used"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeSemesterAgendaId
		{
			get
			{
				return this.entityData.FeeSemesterAgendaId; 
			}
			
			set
			{
				if (this.entityData.FeeSemesterAgendaId == value)
					return;
					
				OnColumnChanging(FeeSemesterAgendaColumn.FeeSemesterAgendaId, this.entityData.FeeSemesterAgendaId);
				this.entityData.FeeSemesterAgendaId = value;
				this.EntityId.FeeSemesterAgendaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeSemesterAgendaColumn.FeeSemesterAgendaId, this.entityData.FeeSemesterAgendaId);
				OnPropertyChanged("FeeSemesterAgendaId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_SEMESTER_AGENDA_ID property.
		///		XXXXX not used
		/// </summary>
		/// <remarks>This is the original value of the FEE_SEMESTER_AGENDA_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeSemesterAgendaId
		{
			get { return this.entityData.OriginalFeeSemesterAgendaId; }
			set { this.entityData.OriginalFeeSemesterAgendaId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemActvityId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemActvityId
		{
			get
			{
				return this.entityData.EdCodeSemActvityId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemActvityId == value)
					return;
					
				OnColumnChanging(FeeSemesterAgendaColumn.EdCodeSemActvityId, this.entityData.EdCodeSemActvityId);
				this.entityData.EdCodeSemActvityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeSemesterAgendaColumn.EdCodeSemActvityId, this.entityData.EdCodeSemActvityId);
				OnPropertyChanged("EdCodeSemActvityId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(FeeSemesterAgendaColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeSemesterAgendaColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Amount property. 
		///		قيمة او نسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"قيمة او نسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this.entityData.Amount; 
			}
			
			set
			{
				if (this.entityData.Amount == value)
					return;
					
				OnColumnChanging(FeeSemesterAgendaColumn.Amount, this.entityData.Amount);
				this.entityData.Amount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeSemesterAgendaColumn.Amount, this.entityData.Amount);
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AmntPrcntFlg property. 
		///		قيمة او نسبة
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"قيمة او نسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean AmntPrcntFlg
		{
			get
			{
				return this.entityData.AmntPrcntFlg; 
			}
			
			set
			{
				if (this.entityData.AmntPrcntFlg == value)
					return;
					
				OnColumnChanging(FeeSemesterAgendaColumn.AmntPrcntFlg, this.entityData.AmntPrcntFlg);
				this.entityData.AmntPrcntFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeSemesterAgendaColumn.AmntPrcntFlg, this.entityData.AmntPrcntFlg);
				OnPropertyChanged("AmntPrcntFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(FeeSemesterAgendaColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeSemesterAgendaColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(FeeSemesterAgendaColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeSemesterAgendaColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemActvity"/>.
		/// </summary>
		/// <value>The source EdCodeSemActvity for EdCodeSemActvityId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemActvity EdCodeSemActvityIdSource
      	{
            get { return entityData.EdCodeSemActvityIdSource; }
            set { entityData.EdCodeSemActvityIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return entityData.FeeCodeItemIdSource; }
            set { entityData.FeeCodeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_SEMESTER_AGENDA"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_SEMESTER_AGENDA_ID", "ED_CODE_SEM_ACTVITY_ID", "FEE_CODE_ITEM_ID", "AMOUNT", "AMNT_PRCNT_FLG", "GS_CODE_CURRENCY_ID", "ENT_MAIN_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeSemesterAgendaEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeSemesterAgenda) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeSemesterAgenda>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeSemesterAgenda);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeSemesterAgenda Entity 
		///</summary>
		protected virtual FeeSemesterAgenda Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeSemesterAgenda copy = new FeeSemesterAgenda();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeSemesterAgendaId = this.FeeSemesterAgendaId;
					copy.OriginalFeeSemesterAgendaId = this.OriginalFeeSemesterAgendaId;
				copy.EdCodeSemActvityId = this.EdCodeSemActvityId;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.Amount = this.Amount;
				copy.AmntPrcntFlg = this.AmntPrcntFlg;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.EntMainId = this.EntMainId;
			
			if (this.EdCodeSemActvityIdSource != null && existingCopies.Contains(this.EdCodeSemActvityIdSource))
				copy.EdCodeSemActvityIdSource = existingCopies[this.EdCodeSemActvityIdSource] as EdCodeSemActvity;
			else
				copy.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource, existingCopies) as EdCodeSemActvity;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				copy.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeSemesterAgenda Entity 
		///</summary>
		public virtual FeeSemesterAgenda Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeSemesterAgenda Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeSemesterAgenda DeepCopy()
		{
			return EntityHelper.Clone<FeeSemesterAgenda>(this as FeeSemesterAgenda);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeSemesterAgendaEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeSemesterAgendaEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeSemesterAgendaEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeSemesterAgendaColumn column)
		{
			switch(column)
			{
					case FeeSemesterAgendaColumn.FeeSemesterAgendaId:
					return entityData.FeeSemesterAgendaId != _originalData.FeeSemesterAgendaId;
					case FeeSemesterAgendaColumn.EdCodeSemActvityId:
					return entityData.EdCodeSemActvityId != _originalData.EdCodeSemActvityId;
					case FeeSemesterAgendaColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case FeeSemesterAgendaColumn.Amount:
					return entityData.Amount != _originalData.Amount;
					case FeeSemesterAgendaColumn.AmntPrcntFlg:
					return entityData.AmntPrcntFlg != _originalData.AmntPrcntFlg;
					case FeeSemesterAgendaColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case FeeSemesterAgendaColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeSemesterAgendaColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeSemesterAgendaId != _originalData.FeeSemesterAgendaId;
			result = result || entityData.EdCodeSemActvityId != _originalData.EdCodeSemActvityId;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.Amount != _originalData.Amount;
			result = result || entityData.AmntPrcntFlg != _originalData.AmntPrcntFlg;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeSemesterAgenda Entity with the original data.
		///</summary>
		public FeeSemesterAgenda GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeSemesterAgenda(
				_originalData.FeeSemesterAgendaId,
				_originalData.EdCodeSemActvityId,
				_originalData.FeeCodeItemId,
				_originalData.Amount,
				_originalData.AmntPrcntFlg,
				_originalData.GsCodeCurrencyId,
				_originalData.EntMainId
				);
				
			return (FeeSemesterAgenda)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeSemesterAgendaBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeSemesterAgendaBase)
				return ValueEquals(this, (FeeSemesterAgendaBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeSemesterAgendaBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeSemesterAgendaId.GetHashCode() ^ 
					this.EdCodeSemActvityId.GetHashCode() ^ 
					this.FeeCodeItemId.GetHashCode() ^ 
					this.Amount.GetHashCode() ^ 
					this.AmntPrcntFlg.GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeSemesterAgendaBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeSemesterAgendaBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeSemesterAgendaBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeSemesterAgendaBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeSemesterAgendaBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeSemesterAgendaBase Object1, FeeSemesterAgendaBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeSemesterAgendaId != Object2.FeeSemesterAgendaId)
				equal = false;
			if (Object1.EdCodeSemActvityId != Object2.EdCodeSemActvityId)
				equal = false;
			if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
				equal = false;
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if (Object1.AmntPrcntFlg != Object2.AmntPrcntFlg)
				equal = false;
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeSemesterAgendaBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeSemesterAgendaComparer GetComparer()
        {
            return new FeeSemesterAgendaComparer();
        }
        */

        // Comparer delegates back to FeeSemesterAgenda
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeSemesterAgenda rhs, FeeSemesterAgendaColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeSemesterAgendaColumn.FeeSemesterAgendaId:
            		return this.FeeSemesterAgendaId.CompareTo(rhs.FeeSemesterAgendaId);
            		
            		                 
            	
            	
            	case FeeSemesterAgendaColumn.EdCodeSemActvityId:
            		return this.EdCodeSemActvityId.CompareTo(rhs.EdCodeSemActvityId);
            		
            		                 
            	
            	
            	case FeeSemesterAgendaColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.CompareTo(rhs.FeeCodeItemId);
            		
            		                 
            	
            	
            	case FeeSemesterAgendaColumn.Amount:
            		return this.Amount.CompareTo(rhs.Amount);
            		
            		                 
            	
            	
            	case FeeSemesterAgendaColumn.AmntPrcntFlg:
            		return this.AmntPrcntFlg.CompareTo(rhs.AmntPrcntFlg);
            		
            		                 
            	
            	
            	case FeeSemesterAgendaColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case FeeSemesterAgendaColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeSemesterAgendaKey> Members
		
		// member variable for the EntityId property
		private FeeSemesterAgendaKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeSemesterAgendaKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeSemesterAgendaKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeSemesterAgenda")
					.Append("|").Append( this.FeeSemesterAgendaId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- FeeSemesterAgendaId: {0}{7}- EdCodeSemActvityId: {1}{7}- FeeCodeItemId: {2}{7}- Amount: {3}{7}- AmntPrcntFlg: {4}{7}- GsCodeCurrencyId: {5}{7}- EntMainId: {6}{7}{9}", 
				this.FeeSemesterAgendaId,
				this.EdCodeSemActvityId,
				this.FeeCodeItemId,
				this.Amount,
				this.AmntPrcntFlg,
				this.GsCodeCurrencyId,
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_SEMESTER_AGENDA' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeSemesterAgendaEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_SEMESTER_AGENDA_ID : XXXXX not used
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_SEMESTER_AGENDA"</remarks>
		public System.Decimal FeeSemesterAgendaId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeSemesterAgendaId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_SEM_ACTVITY_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemActvityId = 0.0m;
		
		/// <summary>
		/// FEE_CODE_ITEM_ID : 
		/// </summary>
		public System.Decimal		  FeeCodeItemId = 0.0m;
		
		/// <summary>
		/// AMOUNT : قيمة او نسبة
		/// </summary>
		public System.Decimal		  Amount = 0.0m;
		
		/// <summary>
		/// AMNT_PRCNT_FLG : قيمة او نسبة
		/// </summary>
		public System.Boolean		  AmntPrcntFlg = false;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeSemActvity _edCodeSemActvityIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemActvity"/>.
		/// </summary>
		/// <value>The source EdCodeSemActvity for EdCodeSemActvityId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemActvity EdCodeSemActvityIdSource
      	{
            get { return this._edCodeSemActvityIdSource; }
            set { this._edCodeSemActvityIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private FeeCodeItem _feeCodeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return this._feeCodeItemIdSource; }
            set { this._feeCodeItemIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeSemesterAgendaEntityData _tmp = new FeeSemesterAgendaEntityData();
						
			_tmp.FeeSemesterAgendaId = this.FeeSemesterAgendaId;
			_tmp.OriginalFeeSemesterAgendaId = this.OriginalFeeSemesterAgendaId;
			
			_tmp.EdCodeSemActvityId = this.EdCodeSemActvityId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.Amount = this.Amount;
			_tmp.AmntPrcntFlg = this.AmntPrcntFlg;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.EntMainId = this.EntMainId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeSemActvityIdSource != null)
				_tmp.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource) as EdCodeSemActvity;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.FeeCodeItemIdSource != null)
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource) as FeeCodeItem;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeSemesterAgendaEntityData _tmp = new FeeSemesterAgendaEntityData();
						
			_tmp.FeeSemesterAgendaId = this.FeeSemesterAgendaId;
			_tmp.OriginalFeeSemesterAgendaId = this.OriginalFeeSemesterAgendaId;
			
			_tmp.EdCodeSemActvityId = this.EdCodeSemActvityId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.Amount = this.Amount;
			_tmp.AmntPrcntFlg = this.AmntPrcntFlg;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.EntMainId = this.EntMainId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeSemActvityIdSource != null && existingCopies.Contains(this.EdCodeSemActvityIdSource))
				_tmp.EdCodeSemActvityIdSource = existingCopies[this.EdCodeSemActvityIdSource] as EdCodeSemActvity;
			else
				_tmp.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource, existingCopies) as EdCodeSemActvity;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				_tmp.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeSemesterAgendaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeSemesterAgendaColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeSemesterAgendaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeSemesterAgendaColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeSemesterAgendaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeSemesterAgendaColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeSemesterAgendaEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeSemesterAgendaEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeSemesterAgendaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeSemesterAgendaColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeSemesterAgendaEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeSemesterAgendaEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeSemesterAgendaEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeSemesterAgenda"/> object.
	/// </remarks>
	public class FeeSemesterAgendaEventArgs : System.EventArgs
	{
		private FeeSemesterAgendaColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeSemesterAgendaEventArgs class.
		///</summary>
		public FeeSemesterAgendaEventArgs(FeeSemesterAgendaColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeSemesterAgendaEventArgs class.
		///</summary>
		public FeeSemesterAgendaEventArgs(FeeSemesterAgendaColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeSemesterAgendaColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeSemesterAgendaColumn" />
		public FeeSemesterAgendaColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeSemesterAgenda related events.
	///</summary>
	public delegate void FeeSemesterAgendaEventHandler(object sender, FeeSemesterAgendaEventArgs e);
	
	#region FeeSemesterAgendaComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeSemesterAgendaComparer : System.Collections.Generic.IComparer<FeeSemesterAgenda>
	{
		FeeSemesterAgendaColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeSemesterAgendaComparer"/> class.
        /// </summary>
		public FeeSemesterAgendaComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeSemesterAgendaComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeSemesterAgendaComparer(FeeSemesterAgendaColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeSemesterAgenda"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeSemesterAgenda"/> to compare.</param>
        /// <param name="b">The second <c>FeeSemesterAgenda</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeSemesterAgenda a, FeeSemesterAgenda b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeSemesterAgenda entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeSemesterAgenda a, FeeSemesterAgenda b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeSemesterAgendaColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeSemesterAgendaKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeSemesterAgenda"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeSemesterAgendaKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaKey class.
		/// </summary>
		public FeeSemesterAgendaKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaKey class.
		/// </summary>
		public FeeSemesterAgendaKey(FeeSemesterAgendaBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeSemesterAgendaId = entity.FeeSemesterAgendaId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeSemesterAgendaKey class.
		/// </summary>
		public FeeSemesterAgendaKey(System.Decimal _feeSemesterAgendaId)
		{
			#region Init Properties

			this.FeeSemesterAgendaId = _feeSemesterAgendaId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeSemesterAgendaBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeSemesterAgendaBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeSemesterAgendaId property
		private System.Decimal _feeSemesterAgendaId;
		
		/// <summary>
		/// Gets or sets the FeeSemesterAgendaId property.
		/// </summary>
		public System.Decimal FeeSemesterAgendaId
		{
			get { return _feeSemesterAgendaId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeSemesterAgendaId = value;
				
				_feeSemesterAgendaId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeSemesterAgendaId = ( values["FeeSemesterAgendaId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeSemesterAgendaId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeSemesterAgendaId", FeeSemesterAgendaId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeSemesterAgendaId: {0}{1}",
								FeeSemesterAgendaId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeSemesterAgendaColumn Enum
	
	/// <summary>
	/// Enumerate the FeeSemesterAgenda columns.
	/// </summary>
	[Serializable]
	public enum FeeSemesterAgendaColumn : int
	{
		/// <summary>
		/// FeeSemesterAgendaId : XXXXX not used
		/// </summary>
		[EnumTextValue("FEE_SEMESTER_AGENDA_ID")]
		[ColumnEnum("FEE_SEMESTER_AGENDA_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeSemesterAgendaId = 1,
		/// <summary>
		/// EdCodeSemActvityId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEM_ACTVITY_ID")]
		[ColumnEnum("ED_CODE_SEM_ACTVITY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemActvityId = 2,
		/// <summary>
		/// FeeCodeItemId : 
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeItemId = 3,
		/// <summary>
		/// Amount : قيمة او نسبة
		/// </summary>
		[EnumTextValue("AMOUNT")]
		[ColumnEnum("AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount = 4,
		/// <summary>
		/// AmntPrcntFlg : قيمة او نسبة
		/// </summary>
		[EnumTextValue("AMNT_PRCNT_FLG")]
		[ColumnEnum("AMNT_PRCNT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		AmntPrcntFlg = 5,
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 6,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 7
	}//End enum

	#endregion FeeSemesterAgendaColumn Enum

} // end namespace
