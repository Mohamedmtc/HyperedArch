
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaEmployment.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_EMPLOYMENT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaEmploymentBase : EntityBase, ISaEmployment, IEntityId<SaEmploymentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaEmploymentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaEmploymentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaEmploymentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaEmployment> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaEmploymentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaEmploymentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaEmploymentBase"/> instance.
		///</summary>
		public SaEmploymentBase()
		{
			this.entityData = new SaEmploymentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaEmploymentBase"/> instance.
		///</summary>
		///<param name="_saEmploymentId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_advertNum"></param>
		///<param name="_advertDate"></param>
		///<param name="_validTilDate"></param>
		///<param name="_empDatePre"></param>
		///<param name="_insuranceNum"></param>
		///<param name="_allEmpIssuesDone"></param>
		///<param name="_basicSalary"></param>
		///<param name="_comments"></param>
		///<param name="_affectsStaffState"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeEmpMethodId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_saJobStartStatmentId"></param>
		///<param name="_pgThesisGeneralSpecId"></param>
		///<param name="_pgThesisDetailedSpecId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_gsCodeHealthStateId"></param>
		///<param name="_employmentDate"></param>
		///<param name="_decisionType"></param>
		///<param name="_scDegDate"></param>
		///<param name="_saScQualId"></param>
		///<param name="_elawa"></param>
		public SaEmploymentBase(System.Decimal _saEmploymentId, System.String _decisionNum, 
			System.DateTime _decisionDate, System.String _decisionSumm, System.String _advertNum, 
			System.DateTime? _advertDate, System.DateTime? _validTilDate, System.DateTime? _empDatePre, 
			System.String _insuranceNum, System.Decimal _allEmpIssuesDone, System.Decimal _basicSalary, 
			System.String _comments, System.Decimal _affectsStaffState, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeEmpMethodId, System.Decimal _asNodeId, System.Decimal _saCodeScDegId, 
			System.Decimal? _gsApprovalHId, System.Decimal? _saJobStartStatmentId, System.Decimal? _pgThesisGeneralSpecId, 
			System.Decimal? _pgThesisDetailedSpecId, System.Decimal _asFacultyInfoId, System.Decimal? _gsCodeHealthStateId, 
			System.DateTime _employmentDate, System.Decimal _decisionType, System.DateTime? _scDegDate, 
			System.Decimal? _saScQualId, System.Decimal _elawa)
		{
			this.entityData = new SaEmploymentEntityData();
			this.backupData = null;

			this.SaEmploymentId = _saEmploymentId;
			this.DecisionNum = _decisionNum;
			this.DecisionDate = _decisionDate;
			this.DecisionSumm = _decisionSumm;
			this.AdvertNum = _advertNum;
			this.AdvertDate = _advertDate;
			this.ValidTilDate = _validTilDate;
			this.EmpDatePre = _empDatePre;
			this.InsuranceNum = _insuranceNum;
			this.AllEmpIssuesDone = _allEmpIssuesDone;
			this.BasicSalary = _basicSalary;
			this.Comments = _comments;
			this.AffectsStaffState = _affectsStaffState;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodeEmpMethodId = _saCodeEmpMethodId;
			this.AsNodeId = _asNodeId;
			this.SaCodeScDegId = _saCodeScDegId;
			this.GsApprovalHId = _gsApprovalHId;
			this.SaJobStartStatmentId = _saJobStartStatmentId;
			this.PgThesisGeneralSpecId = _pgThesisGeneralSpecId;
			this.PgThesisDetailedSpecId = _pgThesisDetailedSpecId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.GsCodeHealthStateId = _gsCodeHealthStateId;
			this.EmploymentDate = _employmentDate;
			this.DecisionType = _decisionType;
			this.ScDegDate = _scDegDate;
			this.SaScQualId = _saScQualId;
			this.Elawa = _elawa;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaEmployment"/> instance.
		///</summary>
		///<param name="_saEmploymentId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_advertNum"></param>
		///<param name="_advertDate"></param>
		///<param name="_validTilDate"></param>
		///<param name="_empDatePre"></param>
		///<param name="_insuranceNum"></param>
		///<param name="_allEmpIssuesDone"></param>
		///<param name="_basicSalary"></param>
		///<param name="_comments"></param>
		///<param name="_affectsStaffState"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeEmpMethodId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_saJobStartStatmentId"></param>
		///<param name="_pgThesisGeneralSpecId"></param>
		///<param name="_pgThesisDetailedSpecId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_gsCodeHealthStateId"></param>
		///<param name="_employmentDate"></param>
		///<param name="_decisionType"></param>
		///<param name="_scDegDate"></param>
		///<param name="_saScQualId"></param>
		///<param name="_elawa"></param>
		public static SaEmployment CreateSaEmployment(System.Decimal _saEmploymentId, System.String _decisionNum, 
			System.DateTime _decisionDate, System.String _decisionSumm, System.String _advertNum, 
			System.DateTime? _advertDate, System.DateTime? _validTilDate, System.DateTime? _empDatePre, 
			System.String _insuranceNum, System.Decimal _allEmpIssuesDone, System.Decimal _basicSalary, 
			System.String _comments, System.Decimal _affectsStaffState, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeEmpMethodId, System.Decimal _asNodeId, System.Decimal _saCodeScDegId, 
			System.Decimal? _gsApprovalHId, System.Decimal? _saJobStartStatmentId, System.Decimal? _pgThesisGeneralSpecId, 
			System.Decimal? _pgThesisDetailedSpecId, System.Decimal _asFacultyInfoId, System.Decimal? _gsCodeHealthStateId, 
			System.DateTime _employmentDate, System.Decimal _decisionType, System.DateTime? _scDegDate, 
			System.Decimal? _saScQualId, System.Decimal _elawa)
		{
			SaEmployment newSaEmployment = new SaEmployment();
			newSaEmployment.SaEmploymentId = _saEmploymentId;
			newSaEmployment.DecisionNum = _decisionNum;
			newSaEmployment.DecisionDate = _decisionDate;
			newSaEmployment.DecisionSumm = _decisionSumm;
			newSaEmployment.AdvertNum = _advertNum;
			newSaEmployment.AdvertDate = _advertDate;
			newSaEmployment.ValidTilDate = _validTilDate;
			newSaEmployment.EmpDatePre = _empDatePre;
			newSaEmployment.InsuranceNum = _insuranceNum;
			newSaEmployment.AllEmpIssuesDone = _allEmpIssuesDone;
			newSaEmployment.BasicSalary = _basicSalary;
			newSaEmployment.Comments = _comments;
			newSaEmployment.AffectsStaffState = _affectsStaffState;
			newSaEmployment.SaStfMemberId = _saStfMemberId;
			newSaEmployment.SaCodeEmpMethodId = _saCodeEmpMethodId;
			newSaEmployment.AsNodeId = _asNodeId;
			newSaEmployment.SaCodeScDegId = _saCodeScDegId;
			newSaEmployment.GsApprovalHId = _gsApprovalHId;
			newSaEmployment.SaJobStartStatmentId = _saJobStartStatmentId;
			newSaEmployment.PgThesisGeneralSpecId = _pgThesisGeneralSpecId;
			newSaEmployment.PgThesisDetailedSpecId = _pgThesisDetailedSpecId;
			newSaEmployment.AsFacultyInfoId = _asFacultyInfoId;
			newSaEmployment.GsCodeHealthStateId = _gsCodeHealthStateId;
			newSaEmployment.EmploymentDate = _employmentDate;
			newSaEmployment.DecisionType = _decisionType;
			newSaEmployment.ScDegDate = _scDegDate;
			newSaEmployment.SaScQualId = _saScQualId;
			newSaEmployment.Elawa = _elawa;
			return newSaEmployment;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaEmploymentId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaEmploymentId
		{
			get
			{
				return this.entityData.SaEmploymentId; 
			}
			
			set
			{
				if (this.entityData.SaEmploymentId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.SaEmploymentId, this.entityData.SaEmploymentId);
				this.entityData.SaEmploymentId = value;
				this.EntityId.SaEmploymentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.SaEmploymentId, this.entityData.SaEmploymentId);
				OnPropertyChanged("SaEmploymentId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_EMPLOYMENT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_EMPLOYMENT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaEmploymentId
		{
			get { return this.entityData.OriginalSaEmploymentId; }
			set { this.entityData.OriginalSaEmploymentId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String DecisionNum
		{
			get
			{
				return this.entityData.DecisionNum; 
			}
			
			set
			{
				if (this.entityData.DecisionNum == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.DecisionNum, this.entityData.DecisionNum);
				this.entityData.DecisionNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.DecisionNum, this.entityData.DecisionNum);
				OnPropertyChanged("DecisionNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DecisionDate
		{
			get
			{
				return this.entityData.DecisionDate; 
			}
			
			set
			{
				if (this.entityData.DecisionDate == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.DecisionDate, this.entityData.DecisionDate);
				this.entityData.DecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.DecisionDate, this.entityData.DecisionDate);
				OnPropertyChanged("DecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionSumm property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DecisionSumm
		{
			get
			{
				return this.entityData.DecisionSumm; 
			}
			
			set
			{
				if (this.entityData.DecisionSumm == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.DecisionSumm, this.entityData.DecisionSumm);
				this.entityData.DecisionSumm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.DecisionSumm, this.entityData.DecisionSumm);
				OnPropertyChanged("DecisionSumm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvertNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String AdvertNum
		{
			get
			{
				return this.entityData.AdvertNum; 
			}
			
			set
			{
				if (this.entityData.AdvertNum == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.AdvertNum, this.entityData.AdvertNum);
				this.entityData.AdvertNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.AdvertNum, this.entityData.AdvertNum);
				OnPropertyChanged("AdvertNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvertDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAdvertDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AdvertDate
		{
			get
			{
				return this.entityData.AdvertDate; 
			}
			
			set
			{
				if (this.entityData.AdvertDate == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.AdvertDate, this.entityData.AdvertDate);
				this.entityData.AdvertDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.AdvertDate, this.entityData.AdvertDate);
				OnPropertyChanged("AdvertDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValidTilDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsValidTilDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ValidTilDate
		{
			get
			{
				return this.entityData.ValidTilDate; 
			}
			
			set
			{
				if (this.entityData.ValidTilDate == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.ValidTilDate, this.entityData.ValidTilDate);
				this.entityData.ValidTilDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.ValidTilDate, this.entityData.ValidTilDate);
				OnPropertyChanged("ValidTilDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmpDatePre property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEmpDatePreNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EmpDatePre
		{
			get
			{
				return this.entityData.EmpDatePre; 
			}
			
			set
			{
				if (this.entityData.EmpDatePre == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.EmpDatePre, this.entityData.EmpDatePre);
				this.entityData.EmpDatePre = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.EmpDatePre, this.entityData.EmpDatePre);
				OnPropertyChanged("EmpDatePre");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InsuranceNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String InsuranceNum
		{
			get
			{
				return this.entityData.InsuranceNum; 
			}
			
			set
			{
				if (this.entityData.InsuranceNum == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.InsuranceNum, this.entityData.InsuranceNum);
				this.entityData.InsuranceNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.InsuranceNum, this.entityData.InsuranceNum);
				OnPropertyChanged("InsuranceNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllEmpIssuesDone property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AllEmpIssuesDone
		{
			get
			{
				return this.entityData.AllEmpIssuesDone; 
			}
			
			set
			{
				if (this.entityData.AllEmpIssuesDone == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.AllEmpIssuesDone, this.entityData.AllEmpIssuesDone);
				this.entityData.AllEmpIssuesDone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.AllEmpIssuesDone, this.entityData.AllEmpIssuesDone);
				OnPropertyChanged("AllEmpIssuesDone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BasicSalary property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal BasicSalary
		{
			get
			{
				return this.entityData.BasicSalary; 
			}
			
			set
			{
				if (this.entityData.BasicSalary == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.BasicSalary, this.entityData.BasicSalary);
				this.entityData.BasicSalary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.BasicSalary, this.entityData.BasicSalary);
				OnPropertyChanged("BasicSalary");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AffectsStaffState property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AffectsStaffState
		{
			get
			{
				return this.entityData.AffectsStaffState; 
			}
			
			set
			{
				if (this.entityData.AffectsStaffState == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.AffectsStaffState, this.entityData.AffectsStaffState);
				this.entityData.AffectsStaffState = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.AffectsStaffState, this.entityData.AffectsStaffState);
				OnPropertyChanged("AffectsStaffState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeEmpMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeEmpMethodId
		{
			get
			{
				return this.entityData.SaCodeEmpMethodId; 
			}
			
			set
			{
				if (this.entityData.SaCodeEmpMethodId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.SaCodeEmpMethodId, this.entityData.SaCodeEmpMethodId);
				this.entityData.SaCodeEmpMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.SaCodeEmpMethodId, this.entityData.SaCodeEmpMethodId);
				OnPropertyChanged("SaCodeEmpMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeScDegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeScDegId
		{
			get
			{
				return this.entityData.SaCodeScDegId; 
			}
			
			set
			{
				if (this.entityData.SaCodeScDegId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				this.entityData.SaCodeScDegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				OnPropertyChanged("SaCodeScDegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsApprovalHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsApprovalHIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsApprovalHId
		{
			get
			{
				return this.entityData.GsApprovalHId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalHId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				this.entityData.GsApprovalHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				OnPropertyChanged("GsApprovalHId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaJobStartStatmentId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaJobStartStatmentIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaJobStartStatmentId
		{
			get
			{
				return this.entityData.SaJobStartStatmentId; 
			}
			
			set
			{
				if (this.entityData.SaJobStartStatmentId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.SaJobStartStatmentId, this.entityData.SaJobStartStatmentId);
				this.entityData.SaJobStartStatmentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.SaJobStartStatmentId, this.entityData.SaJobStartStatmentId);
				OnPropertyChanged("SaJobStartStatmentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisGeneralSpecId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPgThesisGeneralSpecIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PgThesisGeneralSpecId
		{
			get
			{
				return this.entityData.PgThesisGeneralSpecId; 
			}
			
			set
			{
				if (this.entityData.PgThesisGeneralSpecId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.PgThesisGeneralSpecId, this.entityData.PgThesisGeneralSpecId);
				this.entityData.PgThesisGeneralSpecId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.PgThesisGeneralSpecId, this.entityData.PgThesisGeneralSpecId);
				OnPropertyChanged("PgThesisGeneralSpecId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisDetailedSpecId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPgThesisDetailedSpecIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PgThesisDetailedSpecId
		{
			get
			{
				return this.entityData.PgThesisDetailedSpecId; 
			}
			
			set
			{
				if (this.entityData.PgThesisDetailedSpecId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.PgThesisDetailedSpecId, this.entityData.PgThesisDetailedSpecId);
				this.entityData.PgThesisDetailedSpecId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.PgThesisDetailedSpecId, this.entityData.PgThesisDetailedSpecId);
				OnPropertyChanged("PgThesisDetailedSpecId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeHealthStateId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeHealthStateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeHealthStateId
		{
			get
			{
				return this.entityData.GsCodeHealthStateId; 
			}
			
			set
			{
				if (this.entityData.GsCodeHealthStateId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.GsCodeHealthStateId, this.entityData.GsCodeHealthStateId);
				this.entityData.GsCodeHealthStateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.GsCodeHealthStateId, this.entityData.GsCodeHealthStateId);
				OnPropertyChanged("GsCodeHealthStateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmploymentDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EmploymentDate
		{
			get
			{
				return this.entityData.EmploymentDate; 
			}
			
			set
			{
				if (this.entityData.EmploymentDate == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.EmploymentDate, this.entityData.EmploymentDate);
				this.entityData.EmploymentDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.EmploymentDate, this.entityData.EmploymentDate);
				OnPropertyChanged("EmploymentDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionType property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DecisionType
		{
			get
			{
				return this.entityData.DecisionType; 
			}
			
			set
			{
				if (this.entityData.DecisionType == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.DecisionType, this.entityData.DecisionType);
				this.entityData.DecisionType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.DecisionType, this.entityData.DecisionType);
				OnPropertyChanged("DecisionType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScDegDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsScDegDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ScDegDate
		{
			get
			{
				return this.entityData.ScDegDate; 
			}
			
			set
			{
				if (this.entityData.ScDegDate == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.ScDegDate, this.entityData.ScDegDate);
				this.entityData.ScDegDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.ScDegDate, this.entityData.ScDegDate);
				OnPropertyChanged("ScDegDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaScQualId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaScQualIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaScQualId
		{
			get
			{
				return this.entityData.SaScQualId; 
			}
			
			set
			{
				if (this.entityData.SaScQualId == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.SaScQualId, this.entityData.SaScQualId);
				this.entityData.SaScQualId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.SaScQualId, this.entityData.SaScQualId);
				OnPropertyChanged("SaScQualId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Elawa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Elawa
		{
			get
			{
				return this.entityData.Elawa; 
			}
			
			set
			{
				if (this.entityData.Elawa == value)
					return;
					
				OnColumnChanging(SaEmploymentColumn.Elawa, this.entityData.Elawa);
				this.entityData.Elawa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaEmploymentColumn.Elawa, this.entityData.Elawa);
				OnPropertyChanged("Elawa");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisGeneralSpec"/>.
		/// </summary>
		/// <value>The source PgThesisGeneralSpec for PgThesisGeneralSpecId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisGeneralSpec PgThesisGeneralSpecIdSource
      	{
            get { return entityData.PgThesisGeneralSpecIdSource; }
            set { entityData.PgThesisGeneralSpecIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaScQual"/>.
		/// </summary>
		/// <value>The source SaScQual for SaScQualId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaScQual SaScQualIdSource
      	{
            get { return entityData.SaScQualIdSource; }
            set { entityData.SaScQualIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return entityData.GsApprovalHIdSource; }
            set { entityData.GsApprovalHIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisDetailedSpec"/>.
		/// </summary>
		/// <value>The source PgThesisDetailedSpec for PgThesisDetailedSpecId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisDetailedSpec PgThesisDetailedSpecIdSource
      	{
            get { return entityData.PgThesisDetailedSpecIdSource; }
            set { entityData.PgThesisDetailedSpecIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeEmpMethod"/>.
		/// </summary>
		/// <value>The source SaCodeEmpMethod for SaCodeEmpMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeEmpMethod SaCodeEmpMethodIdSource
      	{
            get { return entityData.SaCodeEmpMethodIdSource; }
            set { entityData.SaCodeEmpMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return entityData.SaCodeScDegIdSource; }
            set { entityData.SaCodeScDegIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaJobStartStatment"/>.
		/// </summary>
		/// <value>The source SaJobStartStatment for SaJobStartStatmentId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaJobStartStatment SaJobStartStatmentIdSource
      	{
            get { return entityData.SaJobStartStatmentIdSource; }
            set { entityData.SaJobStartStatmentIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DecisionNum", "Decision Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionNum", "Decision Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionSumm", "Decision Summ", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AdvertNum", "Advert Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InsuranceNum", "Insurance Num", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_EMPLOYMENT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_EMPLOYMENT_ID", "DECISION_NUM", "DECISION_DATE", "DECISION_SUMM", "ADVERT_NUM", "ADVERT_DATE", "VALID_TIL_DATE", "EMP_DATE_PRE", "INSURANCE_NUM", "ALL_EMP_ISSUES_DONE", "BASIC_SALARY", "COMMENTS", "AFFECTS_STAFF_STATE", "SA_STF_MEMBER_ID", "SA_CODE_EMP_METHOD_ID", "AS_NODE_ID", "SA_CODE_SC_DEG_ID", "GS_APPROVAL_H_ID", "SA_JOB_START_STATMENT_ID", "PG_THESIS_GENERAL_SPEC_ID", "PG_THESIS_DETAILED_SPEC_ID", "AS_FACULTY_INFO_ID", "GS_CODE_HEALTH_STATE_ID", "EMPLOYMENT_DATE", "DECISION_TYPE", "SC_DEG_DATE", "SA_SC_QUAL_ID", "ELAWA"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaEmploymentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaEmployment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaEmployment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaEmployment);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaEmployment Entity 
		///</summary>
		protected virtual SaEmployment Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaEmployment copy = new SaEmployment();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaEmploymentId = this.SaEmploymentId;
					copy.OriginalSaEmploymentId = this.OriginalSaEmploymentId;
				copy.DecisionNum = this.DecisionNum;
				copy.DecisionDate = this.DecisionDate;
				copy.DecisionSumm = this.DecisionSumm;
				copy.AdvertNum = this.AdvertNum;
				copy.AdvertDate = this.AdvertDate;
				copy.ValidTilDate = this.ValidTilDate;
				copy.EmpDatePre = this.EmpDatePre;
				copy.InsuranceNum = this.InsuranceNum;
				copy.AllEmpIssuesDone = this.AllEmpIssuesDone;
				copy.BasicSalary = this.BasicSalary;
				copy.Comments = this.Comments;
				copy.AffectsStaffState = this.AffectsStaffState;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodeEmpMethodId = this.SaCodeEmpMethodId;
				copy.AsNodeId = this.AsNodeId;
				copy.SaCodeScDegId = this.SaCodeScDegId;
				copy.GsApprovalHId = this.GsApprovalHId;
				copy.SaJobStartStatmentId = this.SaJobStartStatmentId;
				copy.PgThesisGeneralSpecId = this.PgThesisGeneralSpecId;
				copy.PgThesisDetailedSpecId = this.PgThesisDetailedSpecId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.GsCodeHealthStateId = this.GsCodeHealthStateId;
				copy.EmploymentDate = this.EmploymentDate;
				copy.DecisionType = this.DecisionType;
				copy.ScDegDate = this.ScDegDate;
				copy.SaScQualId = this.SaScQualId;
				copy.Elawa = this.Elawa;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.PgThesisGeneralSpecIdSource != null && existingCopies.Contains(this.PgThesisGeneralSpecIdSource))
				copy.PgThesisGeneralSpecIdSource = existingCopies[this.PgThesisGeneralSpecIdSource] as PgThesisGeneralSpec;
			else
				copy.PgThesisGeneralSpecIdSource = MakeCopyOf(this.PgThesisGeneralSpecIdSource, existingCopies) as PgThesisGeneralSpec;
			if (this.SaScQualIdSource != null && existingCopies.Contains(this.SaScQualIdSource))
				copy.SaScQualIdSource = existingCopies[this.SaScQualIdSource] as SaScQual;
			else
				copy.SaScQualIdSource = MakeCopyOf(this.SaScQualIdSource, existingCopies) as SaScQual;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				copy.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				copy.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.PgThesisDetailedSpecIdSource != null && existingCopies.Contains(this.PgThesisDetailedSpecIdSource))
				copy.PgThesisDetailedSpecIdSource = existingCopies[this.PgThesisDetailedSpecIdSource] as PgThesisDetailedSpec;
			else
				copy.PgThesisDetailedSpecIdSource = MakeCopyOf(this.PgThesisDetailedSpecIdSource, existingCopies) as PgThesisDetailedSpec;
			if (this.SaCodeEmpMethodIdSource != null && existingCopies.Contains(this.SaCodeEmpMethodIdSource))
				copy.SaCodeEmpMethodIdSource = existingCopies[this.SaCodeEmpMethodIdSource] as SaCodeEmpMethod;
			else
				copy.SaCodeEmpMethodIdSource = MakeCopyOf(this.SaCodeEmpMethodIdSource, existingCopies) as SaCodeEmpMethod;
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				copy.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				copy.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaJobStartStatmentIdSource != null && existingCopies.Contains(this.SaJobStartStatmentIdSource))
				copy.SaJobStartStatmentIdSource = existingCopies[this.SaJobStartStatmentIdSource] as SaJobStartStatment;
			else
				copy.SaJobStartStatmentIdSource = MakeCopyOf(this.SaJobStartStatmentIdSource, existingCopies) as SaJobStartStatment;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaEmployment Entity 
		///</summary>
		public virtual SaEmployment Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaEmployment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaEmployment DeepCopy()
		{
			return EntityHelper.Clone<SaEmployment>(this as SaEmployment);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaEmploymentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaEmploymentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaEmploymentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaEmploymentColumn column)
		{
			switch(column)
			{
					case SaEmploymentColumn.SaEmploymentId:
					return entityData.SaEmploymentId != _originalData.SaEmploymentId;
					case SaEmploymentColumn.DecisionNum:
					return entityData.DecisionNum != _originalData.DecisionNum;
					case SaEmploymentColumn.DecisionDate:
					return entityData.DecisionDate != _originalData.DecisionDate;
					case SaEmploymentColumn.DecisionSumm:
					return entityData.DecisionSumm != _originalData.DecisionSumm;
					case SaEmploymentColumn.AdvertNum:
					return entityData.AdvertNum != _originalData.AdvertNum;
					case SaEmploymentColumn.AdvertDate:
					return entityData.AdvertDate != _originalData.AdvertDate;
					case SaEmploymentColumn.ValidTilDate:
					return entityData.ValidTilDate != _originalData.ValidTilDate;
					case SaEmploymentColumn.EmpDatePre:
					return entityData.EmpDatePre != _originalData.EmpDatePre;
					case SaEmploymentColumn.InsuranceNum:
					return entityData.InsuranceNum != _originalData.InsuranceNum;
					case SaEmploymentColumn.AllEmpIssuesDone:
					return entityData.AllEmpIssuesDone != _originalData.AllEmpIssuesDone;
					case SaEmploymentColumn.BasicSalary:
					return entityData.BasicSalary != _originalData.BasicSalary;
					case SaEmploymentColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaEmploymentColumn.AffectsStaffState:
					return entityData.AffectsStaffState != _originalData.AffectsStaffState;
					case SaEmploymentColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaEmploymentColumn.SaCodeEmpMethodId:
					return entityData.SaCodeEmpMethodId != _originalData.SaCodeEmpMethodId;
					case SaEmploymentColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaEmploymentColumn.SaCodeScDegId:
					return entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
					case SaEmploymentColumn.GsApprovalHId:
					return entityData.GsApprovalHId != _originalData.GsApprovalHId;
					case SaEmploymentColumn.SaJobStartStatmentId:
					return entityData.SaJobStartStatmentId != _originalData.SaJobStartStatmentId;
					case SaEmploymentColumn.PgThesisGeneralSpecId:
					return entityData.PgThesisGeneralSpecId != _originalData.PgThesisGeneralSpecId;
					case SaEmploymentColumn.PgThesisDetailedSpecId:
					return entityData.PgThesisDetailedSpecId != _originalData.PgThesisDetailedSpecId;
					case SaEmploymentColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaEmploymentColumn.GsCodeHealthStateId:
					return entityData.GsCodeHealthStateId != _originalData.GsCodeHealthStateId;
					case SaEmploymentColumn.EmploymentDate:
					return entityData.EmploymentDate != _originalData.EmploymentDate;
					case SaEmploymentColumn.DecisionType:
					return entityData.DecisionType != _originalData.DecisionType;
					case SaEmploymentColumn.ScDegDate:
					return entityData.ScDegDate != _originalData.ScDegDate;
					case SaEmploymentColumn.SaScQualId:
					return entityData.SaScQualId != _originalData.SaScQualId;
					case SaEmploymentColumn.Elawa:
					return entityData.Elawa != _originalData.Elawa;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaEmploymentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaEmploymentId != _originalData.SaEmploymentId;
			result = result || entityData.DecisionNum != _originalData.DecisionNum;
			result = result || entityData.DecisionDate != _originalData.DecisionDate;
			result = result || entityData.DecisionSumm != _originalData.DecisionSumm;
			result = result || entityData.AdvertNum != _originalData.AdvertNum;
			result = result || entityData.AdvertDate != _originalData.AdvertDate;
			result = result || entityData.ValidTilDate != _originalData.ValidTilDate;
			result = result || entityData.EmpDatePre != _originalData.EmpDatePre;
			result = result || entityData.InsuranceNum != _originalData.InsuranceNum;
			result = result || entityData.AllEmpIssuesDone != _originalData.AllEmpIssuesDone;
			result = result || entityData.BasicSalary != _originalData.BasicSalary;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.AffectsStaffState != _originalData.AffectsStaffState;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodeEmpMethodId != _originalData.SaCodeEmpMethodId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
			result = result || entityData.GsApprovalHId != _originalData.GsApprovalHId;
			result = result || entityData.SaJobStartStatmentId != _originalData.SaJobStartStatmentId;
			result = result || entityData.PgThesisGeneralSpecId != _originalData.PgThesisGeneralSpecId;
			result = result || entityData.PgThesisDetailedSpecId != _originalData.PgThesisDetailedSpecId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.GsCodeHealthStateId != _originalData.GsCodeHealthStateId;
			result = result || entityData.EmploymentDate != _originalData.EmploymentDate;
			result = result || entityData.DecisionType != _originalData.DecisionType;
			result = result || entityData.ScDegDate != _originalData.ScDegDate;
			result = result || entityData.SaScQualId != _originalData.SaScQualId;
			result = result || entityData.Elawa != _originalData.Elawa;
			return result;
		}	
		
		///<summary>
		///  Returns a SaEmployment Entity with the original data.
		///</summary>
		public SaEmployment GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaEmployment(
				_originalData.SaEmploymentId,
				_originalData.DecisionNum,
				_originalData.DecisionDate,
				_originalData.DecisionSumm,
				_originalData.AdvertNum,
				_originalData.AdvertDate,
				_originalData.ValidTilDate,
				_originalData.EmpDatePre,
				_originalData.InsuranceNum,
				_originalData.AllEmpIssuesDone,
				_originalData.BasicSalary,
				_originalData.Comments,
				_originalData.AffectsStaffState,
				_originalData.SaStfMemberId,
				_originalData.SaCodeEmpMethodId,
				_originalData.AsNodeId,
				_originalData.SaCodeScDegId,
				_originalData.GsApprovalHId,
				_originalData.SaJobStartStatmentId,
				_originalData.PgThesisGeneralSpecId,
				_originalData.PgThesisDetailedSpecId,
				_originalData.AsFacultyInfoId,
				_originalData.GsCodeHealthStateId,
				_originalData.EmploymentDate,
				_originalData.DecisionType,
				_originalData.ScDegDate,
				_originalData.SaScQualId,
				_originalData.Elawa
				);
				
			return (SaEmployment)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaEmploymentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaEmploymentBase)
				return ValueEquals(this, (SaEmploymentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaEmploymentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaEmploymentId.GetHashCode() ^ 
					this.DecisionNum.GetHashCode() ^ 
					this.DecisionDate.GetHashCode() ^ 
					((this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString()).GetHashCode() ^ 
					((this.AdvertNum == null) ? string.Empty : this.AdvertNum.ToString()).GetHashCode() ^ 
					((this.AdvertDate == null) ? string.Empty : this.AdvertDate.ToString()).GetHashCode() ^ 
					((this.ValidTilDate == null) ? string.Empty : this.ValidTilDate.ToString()).GetHashCode() ^ 
					((this.EmpDatePre == null) ? string.Empty : this.EmpDatePre.ToString()).GetHashCode() ^ 
					((this.InsuranceNum == null) ? string.Empty : this.InsuranceNum.ToString()).GetHashCode() ^ 
					this.AllEmpIssuesDone.GetHashCode() ^ 
					this.BasicSalary.GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.AffectsStaffState.GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.SaCodeEmpMethodId.GetHashCode() ^ 
					this.AsNodeId.GetHashCode() ^ 
					this.SaCodeScDegId.GetHashCode() ^ 
					((this.GsApprovalHId == null) ? string.Empty : this.GsApprovalHId.ToString()).GetHashCode() ^ 
					((this.SaJobStartStatmentId == null) ? string.Empty : this.SaJobStartStatmentId.ToString()).GetHashCode() ^ 
					((this.PgThesisGeneralSpecId == null) ? string.Empty : this.PgThesisGeneralSpecId.ToString()).GetHashCode() ^ 
					((this.PgThesisDetailedSpecId == null) ? string.Empty : this.PgThesisDetailedSpecId.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.GsCodeHealthStateId == null) ? string.Empty : this.GsCodeHealthStateId.ToString()).GetHashCode() ^ 
					this.EmploymentDate.GetHashCode() ^ 
					this.DecisionType.GetHashCode() ^ 
					((this.ScDegDate == null) ? string.Empty : this.ScDegDate.ToString()).GetHashCode() ^ 
					((this.SaScQualId == null) ? string.Empty : this.SaScQualId.ToString()).GetHashCode() ^ 
					this.Elawa.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaEmploymentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaEmploymentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaEmploymentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaEmploymentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaEmploymentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaEmploymentBase Object1, SaEmploymentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaEmploymentId != Object2.SaEmploymentId)
				equal = false;
			if (Object1.DecisionNum != Object2.DecisionNum)
				equal = false;
			if (Object1.DecisionDate != Object2.DecisionDate)
				equal = false;
			if ( Object1.DecisionSumm != null && Object2.DecisionSumm != null )
			{
				if (Object1.DecisionSumm != Object2.DecisionSumm)
					equal = false;
			}
			else if (Object1.DecisionSumm == null ^ Object2.DecisionSumm == null )
			{
				equal = false;
			}
			if ( Object1.AdvertNum != null && Object2.AdvertNum != null )
			{
				if (Object1.AdvertNum != Object2.AdvertNum)
					equal = false;
			}
			else if (Object1.AdvertNum == null ^ Object2.AdvertNum == null )
			{
				equal = false;
			}
			if ( Object1.AdvertDate != null && Object2.AdvertDate != null )
			{
				if (Object1.AdvertDate != Object2.AdvertDate)
					equal = false;
			}
			else if (Object1.AdvertDate == null ^ Object2.AdvertDate == null )
			{
				equal = false;
			}
			if ( Object1.ValidTilDate != null && Object2.ValidTilDate != null )
			{
				if (Object1.ValidTilDate != Object2.ValidTilDate)
					equal = false;
			}
			else if (Object1.ValidTilDate == null ^ Object2.ValidTilDate == null )
			{
				equal = false;
			}
			if ( Object1.EmpDatePre != null && Object2.EmpDatePre != null )
			{
				if (Object1.EmpDatePre != Object2.EmpDatePre)
					equal = false;
			}
			else if (Object1.EmpDatePre == null ^ Object2.EmpDatePre == null )
			{
				equal = false;
			}
			if ( Object1.InsuranceNum != null && Object2.InsuranceNum != null )
			{
				if (Object1.InsuranceNum != Object2.InsuranceNum)
					equal = false;
			}
			else if (Object1.InsuranceNum == null ^ Object2.InsuranceNum == null )
			{
				equal = false;
			}
			if (Object1.AllEmpIssuesDone != Object2.AllEmpIssuesDone)
				equal = false;
			if (Object1.BasicSalary != Object2.BasicSalary)
				equal = false;
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.AffectsStaffState != Object2.AffectsStaffState)
				equal = false;
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.SaCodeEmpMethodId != Object2.SaCodeEmpMethodId)
				equal = false;
			if (Object1.AsNodeId != Object2.AsNodeId)
				equal = false;
			if (Object1.SaCodeScDegId != Object2.SaCodeScDegId)
				equal = false;
			if ( Object1.GsApprovalHId != null && Object2.GsApprovalHId != null )
			{
				if (Object1.GsApprovalHId != Object2.GsApprovalHId)
					equal = false;
			}
			else if (Object1.GsApprovalHId == null ^ Object2.GsApprovalHId == null )
			{
				equal = false;
			}
			if ( Object1.SaJobStartStatmentId != null && Object2.SaJobStartStatmentId != null )
			{
				if (Object1.SaJobStartStatmentId != Object2.SaJobStartStatmentId)
					equal = false;
			}
			else if (Object1.SaJobStartStatmentId == null ^ Object2.SaJobStartStatmentId == null )
			{
				equal = false;
			}
			if ( Object1.PgThesisGeneralSpecId != null && Object2.PgThesisGeneralSpecId != null )
			{
				if (Object1.PgThesisGeneralSpecId != Object2.PgThesisGeneralSpecId)
					equal = false;
			}
			else if (Object1.PgThesisGeneralSpecId == null ^ Object2.PgThesisGeneralSpecId == null )
			{
				equal = false;
			}
			if ( Object1.PgThesisDetailedSpecId != null && Object2.PgThesisDetailedSpecId != null )
			{
				if (Object1.PgThesisDetailedSpecId != Object2.PgThesisDetailedSpecId)
					equal = false;
			}
			else if (Object1.PgThesisDetailedSpecId == null ^ Object2.PgThesisDetailedSpecId == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.GsCodeHealthStateId != null && Object2.GsCodeHealthStateId != null )
			{
				if (Object1.GsCodeHealthStateId != Object2.GsCodeHealthStateId)
					equal = false;
			}
			else if (Object1.GsCodeHealthStateId == null ^ Object2.GsCodeHealthStateId == null )
			{
				equal = false;
			}
			if (Object1.EmploymentDate != Object2.EmploymentDate)
				equal = false;
			if (Object1.DecisionType != Object2.DecisionType)
				equal = false;
			if ( Object1.ScDegDate != null && Object2.ScDegDate != null )
			{
				if (Object1.ScDegDate != Object2.ScDegDate)
					equal = false;
			}
			else if (Object1.ScDegDate == null ^ Object2.ScDegDate == null )
			{
				equal = false;
			}
			if ( Object1.SaScQualId != null && Object2.SaScQualId != null )
			{
				if (Object1.SaScQualId != Object2.SaScQualId)
					equal = false;
			}
			else if (Object1.SaScQualId == null ^ Object2.SaScQualId == null )
			{
				equal = false;
			}
			if (Object1.Elawa != Object2.Elawa)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaEmploymentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaEmploymentComparer GetComparer()
        {
            return new SaEmploymentComparer();
        }
        */

        // Comparer delegates back to SaEmployment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaEmployment rhs, SaEmploymentColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaEmploymentColumn.SaEmploymentId:
            		return this.SaEmploymentId.CompareTo(rhs.SaEmploymentId);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.DecisionNum:
            		return this.DecisionNum.CompareTo(rhs.DecisionNum);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.DecisionDate:
            		return this.DecisionDate.CompareTo(rhs.DecisionDate);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.DecisionSumm:
            		return this.DecisionSumm.CompareTo(rhs.DecisionSumm);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.AdvertNum:
            		return this.AdvertNum.CompareTo(rhs.AdvertNum);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.AdvertDate:
            		return this.AdvertDate.Value.CompareTo(rhs.AdvertDate.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.ValidTilDate:
            		return this.ValidTilDate.Value.CompareTo(rhs.ValidTilDate.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.EmpDatePre:
            		return this.EmpDatePre.Value.CompareTo(rhs.EmpDatePre.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.InsuranceNum:
            		return this.InsuranceNum.CompareTo(rhs.InsuranceNum);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.AllEmpIssuesDone:
            		return this.AllEmpIssuesDone.CompareTo(rhs.AllEmpIssuesDone);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.BasicSalary:
            		return this.BasicSalary.CompareTo(rhs.BasicSalary);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.AffectsStaffState:
            		return this.AffectsStaffState.CompareTo(rhs.AffectsStaffState);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.SaCodeEmpMethodId:
            		return this.SaCodeEmpMethodId.CompareTo(rhs.SaCodeEmpMethodId);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.AsNodeId:
            		return this.AsNodeId.CompareTo(rhs.AsNodeId);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.SaCodeScDegId:
            		return this.SaCodeScDegId.CompareTo(rhs.SaCodeScDegId);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.GsApprovalHId:
            		return this.GsApprovalHId.Value.CompareTo(rhs.GsApprovalHId.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.SaJobStartStatmentId:
            		return this.SaJobStartStatmentId.Value.CompareTo(rhs.SaJobStartStatmentId.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.PgThesisGeneralSpecId:
            		return this.PgThesisGeneralSpecId.Value.CompareTo(rhs.PgThesisGeneralSpecId.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.PgThesisDetailedSpecId:
            		return this.PgThesisDetailedSpecId.Value.CompareTo(rhs.PgThesisDetailedSpecId.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.GsCodeHealthStateId:
            		return this.GsCodeHealthStateId.Value.CompareTo(rhs.GsCodeHealthStateId.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.EmploymentDate:
            		return this.EmploymentDate.CompareTo(rhs.EmploymentDate);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.DecisionType:
            		return this.DecisionType.CompareTo(rhs.DecisionType);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.ScDegDate:
            		return this.ScDegDate.Value.CompareTo(rhs.ScDegDate.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.SaScQualId:
            		return this.SaScQualId.Value.CompareTo(rhs.SaScQualId.Value);
            		
            		                 
            	
            	
            	case SaEmploymentColumn.Elawa:
            		return this.Elawa.CompareTo(rhs.Elawa);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaEmploymentKey> Members
		
		// member variable for the EntityId property
		private SaEmploymentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaEmploymentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaEmploymentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaEmployment")
					.Append("|").Append( this.SaEmploymentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{29}{28}- SaEmploymentId: {0}{28}- DecisionNum: {1}{28}- DecisionDate: {2}{28}- DecisionSumm: {3}{28}- AdvertNum: {4}{28}- AdvertDate: {5}{28}- ValidTilDate: {6}{28}- EmpDatePre: {7}{28}- InsuranceNum: {8}{28}- AllEmpIssuesDone: {9}{28}- BasicSalary: {10}{28}- Comments: {11}{28}- AffectsStaffState: {12}{28}- SaStfMemberId: {13}{28}- SaCodeEmpMethodId: {14}{28}- AsNodeId: {15}{28}- SaCodeScDegId: {16}{28}- GsApprovalHId: {17}{28}- SaJobStartStatmentId: {18}{28}- PgThesisGeneralSpecId: {19}{28}- PgThesisDetailedSpecId: {20}{28}- AsFacultyInfoId: {21}{28}- GsCodeHealthStateId: {22}{28}- EmploymentDate: {23}{28}- DecisionType: {24}{28}- ScDegDate: {25}{28}- SaScQualId: {26}{28}- Elawa: {27}{28}{30}", 
				this.SaEmploymentId,
				this.DecisionNum,
				this.DecisionDate,
				(this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString(),
				(this.AdvertNum == null) ? string.Empty : this.AdvertNum.ToString(),
				(this.AdvertDate == null) ? string.Empty : this.AdvertDate.ToString(),
				(this.ValidTilDate == null) ? string.Empty : this.ValidTilDate.ToString(),
				(this.EmpDatePre == null) ? string.Empty : this.EmpDatePre.ToString(),
				(this.InsuranceNum == null) ? string.Empty : this.InsuranceNum.ToString(),
				this.AllEmpIssuesDone,
				this.BasicSalary,
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.AffectsStaffState,
				this.SaStfMemberId,
				this.SaCodeEmpMethodId,
				this.AsNodeId,
				this.SaCodeScDegId,
				(this.GsApprovalHId == null) ? string.Empty : this.GsApprovalHId.ToString(),
				(this.SaJobStartStatmentId == null) ? string.Empty : this.SaJobStartStatmentId.ToString(),
				(this.PgThesisGeneralSpecId == null) ? string.Empty : this.PgThesisGeneralSpecId.ToString(),
				(this.PgThesisDetailedSpecId == null) ? string.Empty : this.PgThesisDetailedSpecId.ToString(),
				this.AsFacultyInfoId,
				(this.GsCodeHealthStateId == null) ? string.Empty : this.GsCodeHealthStateId.ToString(),
				this.EmploymentDate,
				this.DecisionType,
				(this.ScDegDate == null) ? string.Empty : this.ScDegDate.ToString(),
				(this.SaScQualId == null) ? string.Empty : this.SaScQualId.ToString(),
				this.Elawa,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_EMPLOYMENT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaEmploymentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_EMPLOYMENT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_EMPLOYMENT"</remarks>
		public System.Decimal SaEmploymentId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaEmploymentId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DECISION_NUM : 
		/// </summary>
		public System.String		  DecisionNum = string.Empty;
		
		/// <summary>
		/// DECISION_DATE : 
		/// </summary>
		public System.DateTime		  DecisionDate = DateTime.MinValue;
		
		/// <summary>
		/// DECISION_SUMM : 
		/// </summary>
		public System.String		  DecisionSumm = null;
		
		/// <summary>
		/// ADVERT_NUM : 
		/// </summary>
		public System.String		  AdvertNum = null;
		
		/// <summary>
		/// ADVERT_DATE : 
		/// </summary>
		public System.DateTime?		  AdvertDate = null;
		
		/// <summary>
		/// VALID_TIL_DATE : 
		/// </summary>
		public System.DateTime?		  ValidTilDate = null;
		
		/// <summary>
		/// EMP_DATE_PRE : 
		/// </summary>
		public System.DateTime?		  EmpDatePre = null;
		
		/// <summary>
		/// INSURANCE_NUM : 
		/// </summary>
		public System.String		  InsuranceNum = null;
		
		/// <summary>
		/// ALL_EMP_ISSUES_DONE : 
		/// </summary>
		public System.Decimal		  AllEmpIssuesDone = 0.0m;
		
		/// <summary>
		/// BASIC_SALARY : 
		/// </summary>
		public System.Decimal		  BasicSalary = 0.0m;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// AFFECTS_STAFF_STATE : 
		/// </summary>
		public System.Decimal		  AffectsStaffState = 0.0m;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// SA_CODE_EMP_METHOD_ID : 
		/// </summary>
		public System.Decimal		  SaCodeEmpMethodId = 0.0m;
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal		  AsNodeId = 0.0m;
		
		/// <summary>
		/// SA_CODE_SC_DEG_ID : 
		/// </summary>
		public System.Decimal		  SaCodeScDegId = 0.0m;
		
		/// <summary>
		/// GS_APPROVAL_H_ID : 
		/// </summary>
		public System.Decimal?		  GsApprovalHId = null;
		
		/// <summary>
		/// SA_JOB_START_STATMENT_ID : 
		/// </summary>
		public System.Decimal?		  SaJobStartStatmentId = null;
		
		/// <summary>
		/// PG_THESIS_GENERAL_SPEC_ID : 
		/// </summary>
		public System.Decimal?		  PgThesisGeneralSpecId = null;
		
		/// <summary>
		/// PG_THESIS_DETAILED_SPEC_ID : 
		/// </summary>
		public System.Decimal?		  PgThesisDetailedSpecId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// GS_CODE_HEALTH_STATE_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeHealthStateId = null;
		
		/// <summary>
		/// EMPLOYMENT_DATE : 
		/// </summary>
		public System.DateTime		  EmploymentDate = DateTime.MinValue;
		
		/// <summary>
		/// DECISION_TYPE : 
		/// </summary>
		public System.Decimal		  DecisionType = 0.0m;
		
		/// <summary>
		/// SC_DEG_DATE : 
		/// </summary>
		public System.DateTime?		  ScDegDate = null;
		
		/// <summary>
		/// SA_SC_QUAL_ID : 
		/// </summary>
		public System.Decimal?		  SaScQualId = null;
		
		/// <summary>
		/// ELAWA : 
		/// </summary>
		public System.Decimal		  Elawa = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private PgThesisGeneralSpec _pgThesisGeneralSpecIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisGeneralSpec"/>.
		/// </summary>
		/// <value>The source PgThesisGeneralSpec for PgThesisGeneralSpecId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisGeneralSpec PgThesisGeneralSpecIdSource
      	{
            get { return this._pgThesisGeneralSpecIdSource; }
            set { this._pgThesisGeneralSpecIdSource = value; }
      	}
		private SaScQual _saScQualIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaScQual"/>.
		/// </summary>
		/// <value>The source SaScQual for SaScQualId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaScQual SaScQualIdSource
      	{
            get { return this._saScQualIdSource; }
            set { this._saScQualIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		private GsApprovalH _gsApprovalHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return this._gsApprovalHidSource; }
            set { this._gsApprovalHidSource = value; }
      	}
		private PgThesisDetailedSpec _pgThesisDetailedSpecIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisDetailedSpec"/>.
		/// </summary>
		/// <value>The source PgThesisDetailedSpec for PgThesisDetailedSpecId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisDetailedSpec PgThesisDetailedSpecIdSource
      	{
            get { return this._pgThesisDetailedSpecIdSource; }
            set { this._pgThesisDetailedSpecIdSource = value; }
      	}
		private SaCodeEmpMethod _saCodeEmpMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeEmpMethod"/>.
		/// </summary>
		/// <value>The source SaCodeEmpMethod for SaCodeEmpMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeEmpMethod SaCodeEmpMethodIdSource
      	{
            get { return this._saCodeEmpMethodIdSource; }
            set { this._saCodeEmpMethodIdSource = value; }
      	}
		private SaCodeScDeg _saCodeScDegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return this._saCodeScDegIdSource; }
            set { this._saCodeScDegIdSource = value; }
      	}
		private SaJobStartStatment _saJobStartStatmentIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaJobStartStatment"/>.
		/// </summary>
		/// <value>The source SaJobStartStatment for SaJobStartStatmentId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaJobStartStatment SaJobStartStatmentIdSource
      	{
            get { return this._saJobStartStatmentIdSource; }
            set { this._saJobStartStatmentIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaEmploymentEntityData _tmp = new SaEmploymentEntityData();
						
			_tmp.SaEmploymentId = this.SaEmploymentId;
			_tmp.OriginalSaEmploymentId = this.OriginalSaEmploymentId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.AdvertNum = this.AdvertNum;
			_tmp.AdvertDate = this.AdvertDate;
			_tmp.ValidTilDate = this.ValidTilDate;
			_tmp.EmpDatePre = this.EmpDatePre;
			_tmp.InsuranceNum = this.InsuranceNum;
			_tmp.AllEmpIssuesDone = this.AllEmpIssuesDone;
			_tmp.BasicSalary = this.BasicSalary;
			_tmp.Comments = this.Comments;
			_tmp.AffectsStaffState = this.AffectsStaffState;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeEmpMethodId = this.SaCodeEmpMethodId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.SaJobStartStatmentId = this.SaJobStartStatmentId;
			_tmp.PgThesisGeneralSpecId = this.PgThesisGeneralSpecId;
			_tmp.PgThesisDetailedSpecId = this.PgThesisDetailedSpecId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsCodeHealthStateId = this.GsCodeHealthStateId;
			_tmp.EmploymentDate = this.EmploymentDate;
			_tmp.DecisionType = this.DecisionType;
			_tmp.ScDegDate = this.ScDegDate;
			_tmp.SaScQualId = this.SaScQualId;
			_tmp.Elawa = this.Elawa;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.PgThesisGeneralSpecIdSource != null)
				_tmp.PgThesisGeneralSpecIdSource = MakeCopyOf(this.PgThesisGeneralSpecIdSource) as PgThesisGeneralSpec;
			if (this.SaScQualIdSource != null)
				_tmp.SaScQualIdSource = MakeCopyOf(this.SaScQualIdSource) as SaScQual;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			if (this.GsApprovalHIdSource != null)
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource) as GsApprovalH;
			if (this.PgThesisDetailedSpecIdSource != null)
				_tmp.PgThesisDetailedSpecIdSource = MakeCopyOf(this.PgThesisDetailedSpecIdSource) as PgThesisDetailedSpec;
			if (this.SaCodeEmpMethodIdSource != null)
				_tmp.SaCodeEmpMethodIdSource = MakeCopyOf(this.SaCodeEmpMethodIdSource) as SaCodeEmpMethod;
			if (this.SaCodeScDegIdSource != null)
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource) as SaCodeScDeg;
			if (this.SaJobStartStatmentIdSource != null)
				_tmp.SaJobStartStatmentIdSource = MakeCopyOf(this.SaJobStartStatmentIdSource) as SaJobStartStatment;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaEmploymentEntityData _tmp = new SaEmploymentEntityData();
						
			_tmp.SaEmploymentId = this.SaEmploymentId;
			_tmp.OriginalSaEmploymentId = this.OriginalSaEmploymentId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.AdvertNum = this.AdvertNum;
			_tmp.AdvertDate = this.AdvertDate;
			_tmp.ValidTilDate = this.ValidTilDate;
			_tmp.EmpDatePre = this.EmpDatePre;
			_tmp.InsuranceNum = this.InsuranceNum;
			_tmp.AllEmpIssuesDone = this.AllEmpIssuesDone;
			_tmp.BasicSalary = this.BasicSalary;
			_tmp.Comments = this.Comments;
			_tmp.AffectsStaffState = this.AffectsStaffState;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeEmpMethodId = this.SaCodeEmpMethodId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.SaJobStartStatmentId = this.SaJobStartStatmentId;
			_tmp.PgThesisGeneralSpecId = this.PgThesisGeneralSpecId;
			_tmp.PgThesisDetailedSpecId = this.PgThesisDetailedSpecId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsCodeHealthStateId = this.GsCodeHealthStateId;
			_tmp.EmploymentDate = this.EmploymentDate;
			_tmp.DecisionType = this.DecisionType;
			_tmp.ScDegDate = this.ScDegDate;
			_tmp.SaScQualId = this.SaScQualId;
			_tmp.Elawa = this.Elawa;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.PgThesisGeneralSpecIdSource != null && existingCopies.Contains(this.PgThesisGeneralSpecIdSource))
				_tmp.PgThesisGeneralSpecIdSource = existingCopies[this.PgThesisGeneralSpecIdSource] as PgThesisGeneralSpec;
			else
				_tmp.PgThesisGeneralSpecIdSource = MakeCopyOf(this.PgThesisGeneralSpecIdSource, existingCopies) as PgThesisGeneralSpec;
			if (this.SaScQualIdSource != null && existingCopies.Contains(this.SaScQualIdSource))
				_tmp.SaScQualIdSource = existingCopies[this.SaScQualIdSource] as SaScQual;
			else
				_tmp.SaScQualIdSource = MakeCopyOf(this.SaScQualIdSource, existingCopies) as SaScQual;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				_tmp.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.PgThesisDetailedSpecIdSource != null && existingCopies.Contains(this.PgThesisDetailedSpecIdSource))
				_tmp.PgThesisDetailedSpecIdSource = existingCopies[this.PgThesisDetailedSpecIdSource] as PgThesisDetailedSpec;
			else
				_tmp.PgThesisDetailedSpecIdSource = MakeCopyOf(this.PgThesisDetailedSpecIdSource, existingCopies) as PgThesisDetailedSpec;
			if (this.SaCodeEmpMethodIdSource != null && existingCopies.Contains(this.SaCodeEmpMethodIdSource))
				_tmp.SaCodeEmpMethodIdSource = existingCopies[this.SaCodeEmpMethodIdSource] as SaCodeEmpMethod;
			else
				_tmp.SaCodeEmpMethodIdSource = MakeCopyOf(this.SaCodeEmpMethodIdSource, existingCopies) as SaCodeEmpMethod;
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				_tmp.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaJobStartStatmentIdSource != null && existingCopies.Contains(this.SaJobStartStatmentIdSource))
				_tmp.SaJobStartStatmentIdSource = existingCopies[this.SaJobStartStatmentIdSource] as SaJobStartStatment;
			else
				_tmp.SaJobStartStatmentIdSource = MakeCopyOf(this.SaJobStartStatmentIdSource, existingCopies) as SaJobStartStatment;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaEmploymentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaEmploymentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaEmploymentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaEmploymentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaEmploymentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaEmploymentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaEmploymentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaEmploymentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaEmploymentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaEmploymentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaEmploymentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaEmploymentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaEmploymentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaEmployment"/> object.
	/// </remarks>
	public class SaEmploymentEventArgs : System.EventArgs
	{
		private SaEmploymentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaEmploymentEventArgs class.
		///</summary>
		public SaEmploymentEventArgs(SaEmploymentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaEmploymentEventArgs class.
		///</summary>
		public SaEmploymentEventArgs(SaEmploymentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaEmploymentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaEmploymentColumn" />
		public SaEmploymentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaEmployment related events.
	///</summary>
	public delegate void SaEmploymentEventHandler(object sender, SaEmploymentEventArgs e);
	
	#region SaEmploymentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaEmploymentComparer : System.Collections.Generic.IComparer<SaEmployment>
	{
		SaEmploymentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaEmploymentComparer"/> class.
        /// </summary>
		public SaEmploymentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaEmploymentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaEmploymentComparer(SaEmploymentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaEmployment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaEmployment"/> to compare.</param>
        /// <param name="b">The second <c>SaEmployment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaEmployment a, SaEmployment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaEmployment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaEmployment a, SaEmployment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaEmploymentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaEmploymentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaEmployment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaEmploymentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaEmploymentKey class.
		/// </summary>
		public SaEmploymentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaEmploymentKey class.
		/// </summary>
		public SaEmploymentKey(SaEmploymentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaEmploymentId = entity.SaEmploymentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaEmploymentKey class.
		/// </summary>
		public SaEmploymentKey(System.Decimal _saEmploymentId)
		{
			#region Init Properties

			this.SaEmploymentId = _saEmploymentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaEmploymentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaEmploymentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaEmploymentId property
		private System.Decimal _saEmploymentId;
		
		/// <summary>
		/// Gets or sets the SaEmploymentId property.
		/// </summary>
		public System.Decimal SaEmploymentId
		{
			get { return _saEmploymentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaEmploymentId = value;
				
				_saEmploymentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaEmploymentId = ( values["SaEmploymentId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaEmploymentId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaEmploymentId", SaEmploymentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaEmploymentId: {0}{1}",
								SaEmploymentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaEmploymentColumn Enum
	
	/// <summary>
	/// Enumerate the SaEmployment columns.
	/// </summary>
	[Serializable]
	public enum SaEmploymentColumn : int
	{
		/// <summary>
		/// SaEmploymentId : 
		/// </summary>
		[EnumTextValue("SA_EMPLOYMENT_ID")]
		[ColumnEnum("SA_EMPLOYMENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaEmploymentId = 1,
		/// <summary>
		/// DecisionNum : 
		/// </summary>
		[EnumTextValue("DECISION_NUM")]
		[ColumnEnum("DECISION_NUM", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		DecisionNum = 2,
		/// <summary>
		/// DecisionDate : 
		/// </summary>
		[EnumTextValue("DECISION_DATE")]
		[ColumnEnum("DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DecisionDate = 3,
		/// <summary>
		/// DecisionSumm : 
		/// </summary>
		[EnumTextValue("DECISION_SUMM")]
		[ColumnEnum("DECISION_SUMM", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DecisionSumm = 4,
		/// <summary>
		/// AdvertNum : 
		/// </summary>
		[EnumTextValue("ADVERT_NUM")]
		[ColumnEnum("ADVERT_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		AdvertNum = 5,
		/// <summary>
		/// AdvertDate : 
		/// </summary>
		[EnumTextValue("ADVERT_DATE")]
		[ColumnEnum("ADVERT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AdvertDate = 6,
		/// <summary>
		/// ValidTilDate : 
		/// </summary>
		[EnumTextValue("VALID_TIL_DATE")]
		[ColumnEnum("VALID_TIL_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ValidTilDate = 7,
		/// <summary>
		/// EmpDatePre : 
		/// </summary>
		[EnumTextValue("EMP_DATE_PRE")]
		[ColumnEnum("EMP_DATE_PRE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EmpDatePre = 8,
		/// <summary>
		/// InsuranceNum : 
		/// </summary>
		[EnumTextValue("INSURANCE_NUM")]
		[ColumnEnum("INSURANCE_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		InsuranceNum = 9,
		/// <summary>
		/// AllEmpIssuesDone : 
		/// </summary>
		[EnumTextValue("ALL_EMP_ISSUES_DONE")]
		[ColumnEnum("ALL_EMP_ISSUES_DONE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AllEmpIssuesDone = 10,
		/// <summary>
		/// BasicSalary : 
		/// </summary>
		[EnumTextValue("BASIC_SALARY")]
		[ColumnEnum("BASIC_SALARY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BasicSalary = 11,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Comments = 12,
		/// <summary>
		/// AffectsStaffState : 
		/// </summary>
		[EnumTextValue("AFFECTS_STAFF_STATE")]
		[ColumnEnum("AFFECTS_STAFF_STATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AffectsStaffState = 13,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 14,
		/// <summary>
		/// SaCodeEmpMethodId : 
		/// </summary>
		[EnumTextValue("SA_CODE_EMP_METHOD_ID")]
		[ColumnEnum("SA_CODE_EMP_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeEmpMethodId = 15,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsNodeId = 16,
		/// <summary>
		/// SaCodeScDegId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SC_DEG_ID")]
		[ColumnEnum("SA_CODE_SC_DEG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeScDegId = 17,
		/// <summary>
		/// GsApprovalHId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_H_ID")]
		[ColumnEnum("GS_APPROVAL_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsApprovalHId = 18,
		/// <summary>
		/// SaJobStartStatmentId : 
		/// </summary>
		[EnumTextValue("SA_JOB_START_STATMENT_ID")]
		[ColumnEnum("SA_JOB_START_STATMENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaJobStartStatmentId = 19,
		/// <summary>
		/// PgThesisGeneralSpecId : 
		/// </summary>
		[EnumTextValue("PG_THESIS_GENERAL_SPEC_ID")]
		[ColumnEnum("PG_THESIS_GENERAL_SPEC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PgThesisGeneralSpecId = 20,
		/// <summary>
		/// PgThesisDetailedSpecId : 
		/// </summary>
		[EnumTextValue("PG_THESIS_DETAILED_SPEC_ID")]
		[ColumnEnum("PG_THESIS_DETAILED_SPEC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PgThesisDetailedSpecId = 21,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 22,
		/// <summary>
		/// GsCodeHealthStateId : 
		/// </summary>
		[EnumTextValue("GS_CODE_HEALTH_STATE_ID")]
		[ColumnEnum("GS_CODE_HEALTH_STATE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeHealthStateId = 23,
		/// <summary>
		/// EmploymentDate : 
		/// </summary>
		[EnumTextValue("EMPLOYMENT_DATE")]
		[ColumnEnum("EMPLOYMENT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EmploymentDate = 24,
		/// <summary>
		/// DecisionType : 
		/// </summary>
		[EnumTextValue("DECISION_TYPE")]
		[ColumnEnum("DECISION_TYPE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DecisionType = 25,
		/// <summary>
		/// ScDegDate : 
		/// </summary>
		[EnumTextValue("SC_DEG_DATE")]
		[ColumnEnum("SC_DEG_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ScDegDate = 26,
		/// <summary>
		/// SaScQualId : 
		/// </summary>
		[EnumTextValue("SA_SC_QUAL_ID")]
		[ColumnEnum("SA_SC_QUAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaScQualId = 27,
		/// <summary>
		/// Elawa : 
		/// </summary>
		[EnumTextValue("ELAWA")]
		[ColumnEnum("ELAWA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Elawa = 28
	}//End enum

	#endregion SaEmploymentColumn Enum

} // end namespace
