
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntPolicyCourseRepeat.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_POLICY_COURSE_REPEAT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntPolicyCourseRepeatBase : EntityBase, IEntPolicyCourseRepeat, IEntityId<EntPolicyCourseRepeatKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntPolicyCourseRepeatEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntPolicyCourseRepeatEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntPolicyCourseRepeatEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntPolicyCourseRepeat> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyCourseRepeatEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyCourseRepeatEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntPolicyCourseRepeatBase"/> instance.
		///</summary>
		public EntPolicyCourseRepeatBase()
		{
			this.entityData = new EntPolicyCourseRepeatEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntPolicyCourseRepeatBase"/> instance.
		///</summary>
		///<param name="_entPolicyCourseRepeatId"></param>
		///<param name="_maxRepeatCoreNo">عدد مرات اعادة المقرر الواحد</param>
		///<param name="_maxRepeatElctNo">XXX not used عدد مرات اعادة المقرر الواحد</param>
		///<param name="_edCodeRepeatRuleId"></param>
		///<param name="_edBylawId"></param>
		///<param name="_repeatFlg">0:RepeatSucceed- 1:RepeatFail</param>
		///<param name="_edCodeMinGradId">اقل تقدير لتسجيل المقرر</param>
		///<param name="_edCodeGradingId">اقصى تقدير  للمقرر -اعلى المقبول</param>
		///<param name="_entPolicyGradingHdrId">related to current bylaw</param>
		///<param name="_maxReptCourse">اقصى عدد مرات اعادة كل المقررات كل الفصول لنفس الطالب</param>
		///<param name="_maxReptCh">NUB</param>
		///<param name="_edCodeSemesterTypeId">نوع الفصل : اجبارى- اختيارى</param>
		///<param name="_execuseFlg">الغياب عذر في المقرر المعاد</param>
		///<param name="_failedCountFlag"></param>
		///<param name="_gradingMoreThanOneId"></param>
		public EntPolicyCourseRepeatBase(System.Decimal _entPolicyCourseRepeatId, System.Decimal _maxRepeatCoreNo, 
			System.Decimal _maxRepeatElctNo, System.Decimal _edCodeRepeatRuleId, System.Decimal? _edBylawId, 
			System.Decimal? _repeatFlg, System.Decimal? _edCodeMinGradId, System.Decimal? _edCodeGradingId, 
			System.Decimal? _entPolicyGradingHdrId, System.Decimal? _maxReptCourse, 
			System.Int32? _maxReptCh, System.Decimal? _edCodeSemesterTypeId, System.Decimal? _execuseFlg, 
			System.Boolean? _failedCountFlag, System.Decimal? _gradingMoreThanOneId)
		{
			this.entityData = new EntPolicyCourseRepeatEntityData();
			this.backupData = null;

			this.EntPolicyCourseRepeatId = _entPolicyCourseRepeatId;
			this.MaxRepeatCoreNo = _maxRepeatCoreNo;
			this.MaxRepeatElctNo = _maxRepeatElctNo;
			this.EdCodeRepeatRuleId = _edCodeRepeatRuleId;
			this.EdBylawId = _edBylawId;
			this.RepeatFlg = _repeatFlg;
			this.EdCodeMinGradId = _edCodeMinGradId;
			this.EdCodeGradingId = _edCodeGradingId;
			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			this.MaxReptCourse = _maxReptCourse;
			this.MaxReptCh = _maxReptCh;
			this.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			this.ExecuseFlg = _execuseFlg;
			this.FailedCountFlag = _failedCountFlag;
			this.GradingMoreThanOneId = _gradingMoreThanOneId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntPolicyCourseRepeat"/> instance.
		///</summary>
		///<param name="_entPolicyCourseRepeatId"></param>
		///<param name="_maxRepeatCoreNo">عدد مرات اعادة المقرر الواحد</param>
		///<param name="_maxRepeatElctNo">XXX not used عدد مرات اعادة المقرر الواحد</param>
		///<param name="_edCodeRepeatRuleId"></param>
		///<param name="_edBylawId"></param>
		///<param name="_repeatFlg">0:RepeatSucceed- 1:RepeatFail</param>
		///<param name="_edCodeMinGradId">اقل تقدير لتسجيل المقرر</param>
		///<param name="_edCodeGradingId">اقصى تقدير  للمقرر -اعلى المقبول</param>
		///<param name="_entPolicyGradingHdrId">related to current bylaw</param>
		///<param name="_maxReptCourse">اقصى عدد مرات اعادة كل المقررات كل الفصول لنفس الطالب</param>
		///<param name="_maxReptCh">NUB</param>
		///<param name="_edCodeSemesterTypeId">نوع الفصل : اجبارى- اختيارى</param>
		///<param name="_execuseFlg">الغياب عذر في المقرر المعاد</param>
		///<param name="_failedCountFlag"></param>
		///<param name="_gradingMoreThanOneId"></param>
		public static EntPolicyCourseRepeat CreateEntPolicyCourseRepeat(System.Decimal _entPolicyCourseRepeatId, System.Decimal _maxRepeatCoreNo, 
			System.Decimal _maxRepeatElctNo, System.Decimal _edCodeRepeatRuleId, System.Decimal? _edBylawId, 
			System.Decimal? _repeatFlg, System.Decimal? _edCodeMinGradId, System.Decimal? _edCodeGradingId, 
			System.Decimal? _entPolicyGradingHdrId, System.Decimal? _maxReptCourse, 
			System.Int32? _maxReptCh, System.Decimal? _edCodeSemesterTypeId, System.Decimal? _execuseFlg, 
			System.Boolean? _failedCountFlag, System.Decimal? _gradingMoreThanOneId)
		{
			EntPolicyCourseRepeat newEntPolicyCourseRepeat = new EntPolicyCourseRepeat();
			newEntPolicyCourseRepeat.EntPolicyCourseRepeatId = _entPolicyCourseRepeatId;
			newEntPolicyCourseRepeat.MaxRepeatCoreNo = _maxRepeatCoreNo;
			newEntPolicyCourseRepeat.MaxRepeatElctNo = _maxRepeatElctNo;
			newEntPolicyCourseRepeat.EdCodeRepeatRuleId = _edCodeRepeatRuleId;
			newEntPolicyCourseRepeat.EdBylawId = _edBylawId;
			newEntPolicyCourseRepeat.RepeatFlg = _repeatFlg;
			newEntPolicyCourseRepeat.EdCodeMinGradId = _edCodeMinGradId;
			newEntPolicyCourseRepeat.EdCodeGradingId = _edCodeGradingId;
			newEntPolicyCourseRepeat.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			newEntPolicyCourseRepeat.MaxReptCourse = _maxReptCourse;
			newEntPolicyCourseRepeat.MaxReptCh = _maxReptCh;
			newEntPolicyCourseRepeat.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			newEntPolicyCourseRepeat.ExecuseFlg = _execuseFlg;
			newEntPolicyCourseRepeat.FailedCountFlag = _failedCountFlag;
			newEntPolicyCourseRepeat.GradingMoreThanOneId = _gradingMoreThanOneId;
			return newEntPolicyCourseRepeat;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntPolicyCourseRepeatId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntPolicyCourseRepeatId
		{
			get
			{
				return this.entityData.EntPolicyCourseRepeatId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyCourseRepeatId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.EntPolicyCourseRepeatId, this.entityData.EntPolicyCourseRepeatId);
				this.entityData.EntPolicyCourseRepeatId = value;
				this.EntityId.EntPolicyCourseRepeatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.EntPolicyCourseRepeatId, this.entityData.EntPolicyCourseRepeatId);
				OnPropertyChanged("EntPolicyCourseRepeatId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_POLICY_COURSE_REPEAT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_POLICY_COURSE_REPEAT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntPolicyCourseRepeatId
		{
			get { return this.entityData.OriginalEntPolicyCourseRepeatId; }
			set { this.entityData.OriginalEntPolicyCourseRepeatId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the MaxRepeatCoreNo property. 
		///		عدد مرات اعادة المقرر الواحد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"عدد مرات اعادة المقرر الواحد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MaxRepeatCoreNo
		{
			get
			{
				return this.entityData.MaxRepeatCoreNo; 
			}
			
			set
			{
				if (this.entityData.MaxRepeatCoreNo == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.MaxRepeatCoreNo, this.entityData.MaxRepeatCoreNo);
				this.entityData.MaxRepeatCoreNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.MaxRepeatCoreNo, this.entityData.MaxRepeatCoreNo);
				OnPropertyChanged("MaxRepeatCoreNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxRepeatElctNo property. 
		///		XXX not used عدد مرات اعادة المقرر الواحد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXX not used عدد مرات اعادة المقرر الواحد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MaxRepeatElctNo
		{
			get
			{
				return this.entityData.MaxRepeatElctNo; 
			}
			
			set
			{
				if (this.entityData.MaxRepeatElctNo == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.MaxRepeatElctNo, this.entityData.MaxRepeatElctNo);
				this.entityData.MaxRepeatElctNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.MaxRepeatElctNo, this.entityData.MaxRepeatElctNo);
				OnPropertyChanged("MaxRepeatElctNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeRepeatRuleId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeRepeatRuleId
		{
			get
			{
				return this.entityData.EdCodeRepeatRuleId; 
			}
			
			set
			{
				if (this.entityData.EdCodeRepeatRuleId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.EdCodeRepeatRuleId, this.entityData.EdCodeRepeatRuleId);
				this.entityData.EdCodeRepeatRuleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.EdCodeRepeatRuleId, this.entityData.EdCodeRepeatRuleId);
				OnPropertyChanged("EdCodeRepeatRuleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdBylawId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdBylawIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdBylawId
		{
			get
			{
				return this.entityData.EdBylawId; 
			}
			
			set
			{
				if (this.entityData.EdBylawId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.EdBylawId, this.entityData.EdBylawId);
				this.entityData.EdBylawId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.EdBylawId, this.entityData.EdBylawId);
				OnPropertyChanged("EdBylawId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RepeatFlg property. 
		///		0:RepeatSucceed- 1:RepeatFail
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRepeatFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"0:RepeatSucceed- 1:RepeatFail"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RepeatFlg
		{
			get
			{
				return this.entityData.RepeatFlg; 
			}
			
			set
			{
				if (this.entityData.RepeatFlg == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.RepeatFlg, this.entityData.RepeatFlg);
				this.entityData.RepeatFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.RepeatFlg, this.entityData.RepeatFlg);
				OnPropertyChanged("RepeatFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeMinGradId property. 
		///		اقل تقدير لتسجيل المقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeMinGradIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اقل تقدير لتسجيل المقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeMinGradId
		{
			get
			{
				return this.entityData.EdCodeMinGradId; 
			}
			
			set
			{
				if (this.entityData.EdCodeMinGradId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.EdCodeMinGradId, this.entityData.EdCodeMinGradId);
				this.entityData.EdCodeMinGradId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.EdCodeMinGradId, this.entityData.EdCodeMinGradId);
				OnPropertyChanged("EdCodeMinGradId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		اقصى تقدير  للمقرر -اعلى المقبول
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اقصى تقدير  للمقرر -اعلى المقبول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingHdrId property. 
		///		related to current bylaw
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyGradingHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"related to current bylaw"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyGradingHdrId
		{
			get
			{
				return this.entityData.EntPolicyGradingHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingHdrId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				this.entityData.EntPolicyGradingHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				OnPropertyChanged("EntPolicyGradingHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxReptCourse property. 
		///		اقصى عدد مرات اعادة كل المقررات كل الفصول لنفس الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxReptCourseNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اقصى عدد مرات اعادة كل المقررات كل الفصول لنفس الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxReptCourse
		{
			get
			{
				return this.entityData.MaxReptCourse; 
			}
			
			set
			{
				if (this.entityData.MaxReptCourse == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.MaxReptCourse, this.entityData.MaxReptCourse);
				this.entityData.MaxReptCourse = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.MaxReptCourse, this.entityData.MaxReptCourse);
				OnPropertyChanged("MaxReptCourse");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxReptCh property. 
		///		NUB
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaxReptChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NUB"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaxReptCh
		{
			get
			{
				return this.entityData.MaxReptCh; 
			}
			
			set
			{
				if (this.entityData.MaxReptCh == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.MaxReptCh, this.entityData.MaxReptCh);
				this.entityData.MaxReptCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.MaxReptCh, this.entityData.MaxReptCh);
				OnPropertyChanged("MaxReptCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterTypeId property. 
		///		نوع الفصل : اجبارى- اختيارى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الفصل : اجبارى- اختيارى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterTypeId
		{
			get
			{
				return this.entityData.EdCodeSemesterTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterTypeId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				this.entityData.EdCodeSemesterTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				OnPropertyChanged("EdCodeSemesterTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecuseFlg property. 
		///		الغياب عذر في المقرر المعاد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExecuseFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الغياب عذر في المقرر المعاد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExecuseFlg
		{
			get
			{
				return this.entityData.ExecuseFlg; 
			}
			
			set
			{
				if (this.entityData.ExecuseFlg == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.ExecuseFlg, this.entityData.ExecuseFlg);
				this.entityData.ExecuseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.ExecuseFlg, this.entityData.ExecuseFlg);
				OnPropertyChanged("ExecuseFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailedCountFlag property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsFailedCountFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? FailedCountFlag
		{
			get
			{
				return this.entityData.FailedCountFlag; 
			}
			
			set
			{
				if (this.entityData.FailedCountFlag == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.FailedCountFlag, this.entityData.FailedCountFlag);
				this.entityData.FailedCountFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.FailedCountFlag, this.entityData.FailedCountFlag);
				OnPropertyChanged("FailedCountFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GradingMoreThanOneId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGradingMoreThanOneIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GradingMoreThanOneId
		{
			get
			{
				return this.entityData.GradingMoreThanOneId; 
			}
			
			set
			{
				if (this.entityData.GradingMoreThanOneId == value)
					return;
					
				OnColumnChanging(EntPolicyCourseRepeatColumn.GradingMoreThanOneId, this.entityData.GradingMoreThanOneId);
				this.entityData.GradingMoreThanOneId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyCourseRepeatColumn.GradingMoreThanOneId, this.entityData.GradingMoreThanOneId);
				OnPropertyChanged("GradingMoreThanOneId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return entityData.EdBylawIdSource; }
            set { entityData.EdBylawIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeMinGradId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeMinGradIdSource
      	{
            get { return entityData.EdCodeMinGradIdSource; }
            set { entityData.EdCodeMinGradIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for GradingMoreThanOneId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading GradingMoreThanOneIdSource
      	{
            get { return entityData.GradingMoreThanOneIdSource; }
            set { entityData.GradingMoreThanOneIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeRepeatRule"/>.
		/// </summary>
		/// <value>The source EdCodeRepeatRule for EdCodeRepeatRuleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeRepeatRule EdCodeRepeatRuleIdSource
      	{
            get { return entityData.EdCodeRepeatRuleIdSource; }
            set { entityData.EdCodeRepeatRuleIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return entityData.EdCodeSemesterTypeIdSource; }
            set { entityData.EdCodeSemesterTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return entityData.EntPolicyGradingHdrIdSource; }
            set { entityData.EntPolicyGradingHdrIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_POLICY_COURSE_REPEAT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_POLICY_COURSE_REPEAT_ID", "MAX_REPEAT_CORE_NO", "MAX_REPEAT_ELCT_NO", "ED_CODE_REPEAT_RULE_ID", "ED_BYLAW_ID", "REPEAT_FLG", "ED_CODE_MIN_GRAD_ID", "ED_CODE_GRADING_ID", "ENT_POLICY_GRADING_HDR_ID", "MAX_REPT_COURSE", "MAX_REPT_CH", "ED_CODE_SEMESTER_TYPE_ID", "EXECUSE_FLG", "FailedCount_Flag", "GradingMoreThanOne_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntPolicyCourseRepeatEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntPolicyCourseRepeat) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntPolicyCourseRepeat>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntPolicyCourseRepeat);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntPolicyCourseRepeat Entity 
		///</summary>
		protected virtual EntPolicyCourseRepeat Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntPolicyCourseRepeat copy = new EntPolicyCourseRepeat();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntPolicyCourseRepeatId = this.EntPolicyCourseRepeatId;
					copy.OriginalEntPolicyCourseRepeatId = this.OriginalEntPolicyCourseRepeatId;
				copy.MaxRepeatCoreNo = this.MaxRepeatCoreNo;
				copy.MaxRepeatElctNo = this.MaxRepeatElctNo;
				copy.EdCodeRepeatRuleId = this.EdCodeRepeatRuleId;
				copy.EdBylawId = this.EdBylawId;
				copy.RepeatFlg = this.RepeatFlg;
				copy.EdCodeMinGradId = this.EdCodeMinGradId;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
				copy.MaxReptCourse = this.MaxReptCourse;
				copy.MaxReptCh = this.MaxReptCh;
				copy.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
				copy.ExecuseFlg = this.ExecuseFlg;
				copy.FailedCountFlag = this.FailedCountFlag;
				copy.GradingMoreThanOneId = this.GradingMoreThanOneId;
			
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				copy.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				copy.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeMinGradIdSource != null && existingCopies.Contains(this.EdCodeMinGradIdSource))
				copy.EdCodeMinGradIdSource = existingCopies[this.EdCodeMinGradIdSource] as EdCodeGrading;
			else
				copy.EdCodeMinGradIdSource = MakeCopyOf(this.EdCodeMinGradIdSource, existingCopies) as EdCodeGrading;
			if (this.GradingMoreThanOneIdSource != null && existingCopies.Contains(this.GradingMoreThanOneIdSource))
				copy.GradingMoreThanOneIdSource = existingCopies[this.GradingMoreThanOneIdSource] as EdCodeGrading;
			else
				copy.GradingMoreThanOneIdSource = MakeCopyOf(this.GradingMoreThanOneIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeRepeatRuleIdSource != null && existingCopies.Contains(this.EdCodeRepeatRuleIdSource))
				copy.EdCodeRepeatRuleIdSource = existingCopies[this.EdCodeRepeatRuleIdSource] as EdCodeRepeatRule;
			else
				copy.EdCodeRepeatRuleIdSource = MakeCopyOf(this.EdCodeRepeatRuleIdSource, existingCopies) as EdCodeRepeatRule;
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				copy.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				copy.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				copy.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				copy.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntPolicyCourseRepeat Entity 
		///</summary>
		public virtual EntPolicyCourseRepeat Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntPolicyCourseRepeat Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntPolicyCourseRepeat DeepCopy()
		{
			return EntityHelper.Clone<EntPolicyCourseRepeat>(this as EntPolicyCourseRepeat);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntPolicyCourseRepeatEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntPolicyCourseRepeatEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntPolicyCourseRepeatEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntPolicyCourseRepeatColumn column)
		{
			switch(column)
			{
					case EntPolicyCourseRepeatColumn.EntPolicyCourseRepeatId:
					return entityData.EntPolicyCourseRepeatId != _originalData.EntPolicyCourseRepeatId;
					case EntPolicyCourseRepeatColumn.MaxRepeatCoreNo:
					return entityData.MaxRepeatCoreNo != _originalData.MaxRepeatCoreNo;
					case EntPolicyCourseRepeatColumn.MaxRepeatElctNo:
					return entityData.MaxRepeatElctNo != _originalData.MaxRepeatElctNo;
					case EntPolicyCourseRepeatColumn.EdCodeRepeatRuleId:
					return entityData.EdCodeRepeatRuleId != _originalData.EdCodeRepeatRuleId;
					case EntPolicyCourseRepeatColumn.EdBylawId:
					return entityData.EdBylawId != _originalData.EdBylawId;
					case EntPolicyCourseRepeatColumn.RepeatFlg:
					return entityData.RepeatFlg != _originalData.RepeatFlg;
					case EntPolicyCourseRepeatColumn.EdCodeMinGradId:
					return entityData.EdCodeMinGradId != _originalData.EdCodeMinGradId;
					case EntPolicyCourseRepeatColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EntPolicyCourseRepeatColumn.EntPolicyGradingHdrId:
					return entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
					case EntPolicyCourseRepeatColumn.MaxReptCourse:
					return entityData.MaxReptCourse != _originalData.MaxReptCourse;
					case EntPolicyCourseRepeatColumn.MaxReptCh:
					return entityData.MaxReptCh != _originalData.MaxReptCh;
					case EntPolicyCourseRepeatColumn.EdCodeSemesterTypeId:
					return entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
					case EntPolicyCourseRepeatColumn.ExecuseFlg:
					return entityData.ExecuseFlg != _originalData.ExecuseFlg;
					case EntPolicyCourseRepeatColumn.FailedCountFlag:
					return entityData.FailedCountFlag != _originalData.FailedCountFlag;
					case EntPolicyCourseRepeatColumn.GradingMoreThanOneId:
					return entityData.GradingMoreThanOneId != _originalData.GradingMoreThanOneId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntPolicyCourseRepeatColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntPolicyCourseRepeatId != _originalData.EntPolicyCourseRepeatId;
			result = result || entityData.MaxRepeatCoreNo != _originalData.MaxRepeatCoreNo;
			result = result || entityData.MaxRepeatElctNo != _originalData.MaxRepeatElctNo;
			result = result || entityData.EdCodeRepeatRuleId != _originalData.EdCodeRepeatRuleId;
			result = result || entityData.EdBylawId != _originalData.EdBylawId;
			result = result || entityData.RepeatFlg != _originalData.RepeatFlg;
			result = result || entityData.EdCodeMinGradId != _originalData.EdCodeMinGradId;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			result = result || entityData.MaxReptCourse != _originalData.MaxReptCourse;
			result = result || entityData.MaxReptCh != _originalData.MaxReptCh;
			result = result || entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
			result = result || entityData.ExecuseFlg != _originalData.ExecuseFlg;
			result = result || entityData.FailedCountFlag != _originalData.FailedCountFlag;
			result = result || entityData.GradingMoreThanOneId != _originalData.GradingMoreThanOneId;
			return result;
		}	
		
		///<summary>
		///  Returns a EntPolicyCourseRepeat Entity with the original data.
		///</summary>
		public EntPolicyCourseRepeat GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntPolicyCourseRepeat(
				_originalData.EntPolicyCourseRepeatId,
				_originalData.MaxRepeatCoreNo,
				_originalData.MaxRepeatElctNo,
				_originalData.EdCodeRepeatRuleId,
				_originalData.EdBylawId,
				_originalData.RepeatFlg,
				_originalData.EdCodeMinGradId,
				_originalData.EdCodeGradingId,
				_originalData.EntPolicyGradingHdrId,
				_originalData.MaxReptCourse,
				_originalData.MaxReptCh,
				_originalData.EdCodeSemesterTypeId,
				_originalData.ExecuseFlg,
				_originalData.FailedCountFlag,
				_originalData.GradingMoreThanOneId
				);
				
			return (EntPolicyCourseRepeat)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntPolicyCourseRepeatBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntPolicyCourseRepeatBase)
				return ValueEquals(this, (EntPolicyCourseRepeatBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntPolicyCourseRepeatBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntPolicyCourseRepeatId.GetHashCode() ^ 
					this.MaxRepeatCoreNo.GetHashCode() ^ 
					this.MaxRepeatElctNo.GetHashCode() ^ 
					this.EdCodeRepeatRuleId.GetHashCode() ^ 
					((this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString()).GetHashCode() ^ 
					((this.RepeatFlg == null) ? string.Empty : this.RepeatFlg.ToString()).GetHashCode() ^ 
					((this.EdCodeMinGradId == null) ? string.Empty : this.EdCodeMinGradId.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString()).GetHashCode() ^ 
					((this.MaxReptCourse == null) ? string.Empty : this.MaxReptCourse.ToString()).GetHashCode() ^ 
					((this.MaxReptCh == null) ? string.Empty : this.MaxReptCh.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterTypeId == null) ? string.Empty : this.EdCodeSemesterTypeId.ToString()).GetHashCode() ^ 
					((this.ExecuseFlg == null) ? string.Empty : this.ExecuseFlg.ToString()).GetHashCode() ^ 
					((this.FailedCountFlag == null) ? string.Empty : this.FailedCountFlag.ToString()).GetHashCode() ^ 
					((this.GradingMoreThanOneId == null) ? string.Empty : this.GradingMoreThanOneId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntPolicyCourseRepeatBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntPolicyCourseRepeatBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntPolicyCourseRepeatBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntPolicyCourseRepeatBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntPolicyCourseRepeatBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntPolicyCourseRepeatBase Object1, EntPolicyCourseRepeatBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntPolicyCourseRepeatId != Object2.EntPolicyCourseRepeatId)
				equal = false;
			if (Object1.MaxRepeatCoreNo != Object2.MaxRepeatCoreNo)
				equal = false;
			if (Object1.MaxRepeatElctNo != Object2.MaxRepeatElctNo)
				equal = false;
			if (Object1.EdCodeRepeatRuleId != Object2.EdCodeRepeatRuleId)
				equal = false;
			if ( Object1.EdBylawId != null && Object2.EdBylawId != null )
			{
				if (Object1.EdBylawId != Object2.EdBylawId)
					equal = false;
			}
			else if (Object1.EdBylawId == null ^ Object2.EdBylawId == null )
			{
				equal = false;
			}
			if ( Object1.RepeatFlg != null && Object2.RepeatFlg != null )
			{
				if (Object1.RepeatFlg != Object2.RepeatFlg)
					equal = false;
			}
			else if (Object1.RepeatFlg == null ^ Object2.RepeatFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeMinGradId != null && Object2.EdCodeMinGradId != null )
			{
				if (Object1.EdCodeMinGradId != Object2.EdCodeMinGradId)
					equal = false;
			}
			else if (Object1.EdCodeMinGradId == null ^ Object2.EdCodeMinGradId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.EntPolicyGradingHdrId != null && Object2.EntPolicyGradingHdrId != null )
			{
				if (Object1.EntPolicyGradingHdrId != Object2.EntPolicyGradingHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyGradingHdrId == null ^ Object2.EntPolicyGradingHdrId == null )
			{
				equal = false;
			}
			if ( Object1.MaxReptCourse != null && Object2.MaxReptCourse != null )
			{
				if (Object1.MaxReptCourse != Object2.MaxReptCourse)
					equal = false;
			}
			else if (Object1.MaxReptCourse == null ^ Object2.MaxReptCourse == null )
			{
				equal = false;
			}
			if ( Object1.MaxReptCh != null && Object2.MaxReptCh != null )
			{
				if (Object1.MaxReptCh != Object2.MaxReptCh)
					equal = false;
			}
			else if (Object1.MaxReptCh == null ^ Object2.MaxReptCh == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterTypeId != null && Object2.EdCodeSemesterTypeId != null )
			{
				if (Object1.EdCodeSemesterTypeId != Object2.EdCodeSemesterTypeId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterTypeId == null ^ Object2.EdCodeSemesterTypeId == null )
			{
				equal = false;
			}
			if ( Object1.ExecuseFlg != null && Object2.ExecuseFlg != null )
			{
				if (Object1.ExecuseFlg != Object2.ExecuseFlg)
					equal = false;
			}
			else if (Object1.ExecuseFlg == null ^ Object2.ExecuseFlg == null )
			{
				equal = false;
			}
			if ( Object1.FailedCountFlag != null && Object2.FailedCountFlag != null )
			{
				if (Object1.FailedCountFlag != Object2.FailedCountFlag)
					equal = false;
			}
			else if (Object1.FailedCountFlag == null ^ Object2.FailedCountFlag == null )
			{
				equal = false;
			}
			if ( Object1.GradingMoreThanOneId != null && Object2.GradingMoreThanOneId != null )
			{
				if (Object1.GradingMoreThanOneId != Object2.GradingMoreThanOneId)
					equal = false;
			}
			else if (Object1.GradingMoreThanOneId == null ^ Object2.GradingMoreThanOneId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntPolicyCourseRepeatBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntPolicyCourseRepeatComparer GetComparer()
        {
            return new EntPolicyCourseRepeatComparer();
        }
        */

        // Comparer delegates back to EntPolicyCourseRepeat
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntPolicyCourseRepeat rhs, EntPolicyCourseRepeatColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntPolicyCourseRepeatColumn.EntPolicyCourseRepeatId:
            		return this.EntPolicyCourseRepeatId.CompareTo(rhs.EntPolicyCourseRepeatId);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.MaxRepeatCoreNo:
            		return this.MaxRepeatCoreNo.CompareTo(rhs.MaxRepeatCoreNo);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.MaxRepeatElctNo:
            		return this.MaxRepeatElctNo.CompareTo(rhs.MaxRepeatElctNo);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.EdCodeRepeatRuleId:
            		return this.EdCodeRepeatRuleId.CompareTo(rhs.EdCodeRepeatRuleId);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.EdBylawId:
            		return this.EdBylawId.Value.CompareTo(rhs.EdBylawId.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.RepeatFlg:
            		return this.RepeatFlg.Value.CompareTo(rhs.RepeatFlg.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.EdCodeMinGradId:
            		return this.EdCodeMinGradId.Value.CompareTo(rhs.EdCodeMinGradId.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.EntPolicyGradingHdrId:
            		return this.EntPolicyGradingHdrId.Value.CompareTo(rhs.EntPolicyGradingHdrId.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.MaxReptCourse:
            		return this.MaxReptCourse.Value.CompareTo(rhs.MaxReptCourse.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.MaxReptCh:
            		return this.MaxReptCh.Value.CompareTo(rhs.MaxReptCh.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.EdCodeSemesterTypeId:
            		return this.EdCodeSemesterTypeId.Value.CompareTo(rhs.EdCodeSemesterTypeId.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.ExecuseFlg:
            		return this.ExecuseFlg.Value.CompareTo(rhs.ExecuseFlg.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.FailedCountFlag:
            		return this.FailedCountFlag.Value.CompareTo(rhs.FailedCountFlag.Value);
            		
            		                 
            	
            	
            	case EntPolicyCourseRepeatColumn.GradingMoreThanOneId:
            		return this.GradingMoreThanOneId.Value.CompareTo(rhs.GradingMoreThanOneId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntPolicyCourseRepeatKey> Members
		
		// member variable for the EntityId property
		private EntPolicyCourseRepeatKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntPolicyCourseRepeatKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntPolicyCourseRepeatKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntPolicyCourseRepeat")
					.Append("|").Append( this.EntPolicyCourseRepeatId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- EntPolicyCourseRepeatId: {0}{15}- MaxRepeatCoreNo: {1}{15}- MaxRepeatElctNo: {2}{15}- EdCodeRepeatRuleId: {3}{15}- EdBylawId: {4}{15}- RepeatFlg: {5}{15}- EdCodeMinGradId: {6}{15}- EdCodeGradingId: {7}{15}- EntPolicyGradingHdrId: {8}{15}- MaxReptCourse: {9}{15}- MaxReptCh: {10}{15}- EdCodeSemesterTypeId: {11}{15}- ExecuseFlg: {12}{15}- FailedCountFlag: {13}{15}- GradingMoreThanOneId: {14}{15}{17}", 
				this.EntPolicyCourseRepeatId,
				this.MaxRepeatCoreNo,
				this.MaxRepeatElctNo,
				this.EdCodeRepeatRuleId,
				(this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString(),
				(this.RepeatFlg == null) ? string.Empty : this.RepeatFlg.ToString(),
				(this.EdCodeMinGradId == null) ? string.Empty : this.EdCodeMinGradId.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				(this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString(),
				(this.MaxReptCourse == null) ? string.Empty : this.MaxReptCourse.ToString(),
				(this.MaxReptCh == null) ? string.Empty : this.MaxReptCh.ToString(),
				(this.EdCodeSemesterTypeId == null) ? string.Empty : this.EdCodeSemesterTypeId.ToString(),
				(this.ExecuseFlg == null) ? string.Empty : this.ExecuseFlg.ToString(),
				(this.FailedCountFlag == null) ? string.Empty : this.FailedCountFlag.ToString(),
				(this.GradingMoreThanOneId == null) ? string.Empty : this.GradingMoreThanOneId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_POLICY_COURSE_REPEAT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntPolicyCourseRepeatEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_POLICY_COURSE_REPEAT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_POLICY_COURSE_REPEAT"</remarks>
		public System.Decimal EntPolicyCourseRepeatId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntPolicyCourseRepeatId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MAX_REPEAT_CORE_NO : عدد مرات اعادة المقرر الواحد
		/// </summary>
		public System.Decimal		  MaxRepeatCoreNo = 0.0m;
		
		/// <summary>
		/// MAX_REPEAT_ELCT_NO : XXX not used عدد مرات اعادة المقرر الواحد
		/// </summary>
		public System.Decimal		  MaxRepeatElctNo = 0.0m;
		
		/// <summary>
		/// ED_CODE_REPEAT_RULE_ID : 
		/// </summary>
		public System.Decimal		  EdCodeRepeatRuleId = 0.0m;
		
		/// <summary>
		/// ED_BYLAW_ID : 
		/// </summary>
		public System.Decimal?		  EdBylawId = null;
		
		/// <summary>
		/// REPEAT_FLG : 0:RepeatSucceed- 1:RepeatFail
		/// </summary>
		public System.Decimal?		  RepeatFlg = null;
		
		/// <summary>
		/// ED_CODE_MIN_GRAD_ID : اقل تقدير لتسجيل المقرر
		/// </summary>
		public System.Decimal?		  EdCodeMinGradId = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : اقصى تقدير  للمقرر -اعلى المقبول
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// ENT_POLICY_GRADING_HDR_ID : related to current bylaw
		/// </summary>
		public System.Decimal?		  EntPolicyGradingHdrId = null;
		
		/// <summary>
		/// MAX_REPT_COURSE : اقصى عدد مرات اعادة كل المقررات كل الفصول لنفس الطالب
		/// </summary>
		public System.Decimal?		  MaxReptCourse = null;
		
		/// <summary>
		/// MAX_REPT_CH : NUB
		/// </summary>
		public System.Int32?		  MaxReptCh = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_TYPE_ID : نوع الفصل : اجبارى- اختيارى
		/// </summary>
		public System.Decimal?		  EdCodeSemesterTypeId = null;
		
		/// <summary>
		/// EXECUSE_FLG : الغياب عذر في المقرر المعاد
		/// </summary>
		public System.Decimal?		  ExecuseFlg = null;
		
		/// <summary>
		/// FailedCount_Flag : 
		/// </summary>
		public System.Boolean?		  FailedCountFlag = null;
		
		/// <summary>
		/// GradingMoreThanOne_ID : 
		/// </summary>
		public System.Decimal?		  GradingMoreThanOneId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdBylaw _edBylawIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return this._edBylawIdSource; }
            set { this._edBylawIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdCodeGrading _edCodeMinGradIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeMinGradId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeMinGradIdSource
      	{
            get { return this._edCodeMinGradIdSource; }
            set { this._edCodeMinGradIdSource = value; }
      	}
		private EdCodeGrading _gradingMoreThanOneIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for GradingMoreThanOneId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading GradingMoreThanOneIdSource
      	{
            get { return this._gradingMoreThanOneIdSource; }
            set { this._gradingMoreThanOneIdSource = value; }
      	}
		private EdCodeRepeatRule _edCodeRepeatRuleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeRepeatRule"/>.
		/// </summary>
		/// <value>The source EdCodeRepeatRule for EdCodeRepeatRuleId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeRepeatRule EdCodeRepeatRuleIdSource
      	{
            get { return this._edCodeRepeatRuleIdSource; }
            set { this._edCodeRepeatRuleIdSource = value; }
      	}
		private EdCodeSemesterType _edCodeSemesterTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return this._edCodeSemesterTypeIdSource; }
            set { this._edCodeSemesterTypeIdSource = value; }
      	}
		private EntPolicyGradingHdr _entPolicyGradingHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return this._entPolicyGradingHdrIdSource; }
            set { this._entPolicyGradingHdrIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntPolicyCourseRepeatEntityData _tmp = new EntPolicyCourseRepeatEntityData();
						
			_tmp.EntPolicyCourseRepeatId = this.EntPolicyCourseRepeatId;
			_tmp.OriginalEntPolicyCourseRepeatId = this.OriginalEntPolicyCourseRepeatId;
			
			_tmp.MaxRepeatCoreNo = this.MaxRepeatCoreNo;
			_tmp.MaxRepeatElctNo = this.MaxRepeatElctNo;
			_tmp.EdCodeRepeatRuleId = this.EdCodeRepeatRuleId;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.EdCodeMinGradId = this.EdCodeMinGradId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.MaxReptCourse = this.MaxReptCourse;
			_tmp.MaxReptCh = this.MaxReptCh;
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.ExecuseFlg = this.ExecuseFlg;
			_tmp.FailedCountFlag = this.FailedCountFlag;
			_tmp.GradingMoreThanOneId = this.GradingMoreThanOneId;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null)
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource) as EdBylaw;
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdCodeMinGradIdSource != null)
				_tmp.EdCodeMinGradIdSource = MakeCopyOf(this.EdCodeMinGradIdSource) as EdCodeGrading;
			if (this.GradingMoreThanOneIdSource != null)
				_tmp.GradingMoreThanOneIdSource = MakeCopyOf(this.GradingMoreThanOneIdSource) as EdCodeGrading;
			if (this.EdCodeRepeatRuleIdSource != null)
				_tmp.EdCodeRepeatRuleIdSource = MakeCopyOf(this.EdCodeRepeatRuleIdSource) as EdCodeRepeatRule;
			if (this.EdCodeSemesterTypeIdSource != null)
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource) as EdCodeSemesterType;
			if (this.EntPolicyGradingHdrIdSource != null)
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource) as EntPolicyGradingHdr;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntPolicyCourseRepeatEntityData _tmp = new EntPolicyCourseRepeatEntityData();
						
			_tmp.EntPolicyCourseRepeatId = this.EntPolicyCourseRepeatId;
			_tmp.OriginalEntPolicyCourseRepeatId = this.OriginalEntPolicyCourseRepeatId;
			
			_tmp.MaxRepeatCoreNo = this.MaxRepeatCoreNo;
			_tmp.MaxRepeatElctNo = this.MaxRepeatElctNo;
			_tmp.EdCodeRepeatRuleId = this.EdCodeRepeatRuleId;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.EdCodeMinGradId = this.EdCodeMinGradId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.MaxReptCourse = this.MaxReptCourse;
			_tmp.MaxReptCh = this.MaxReptCh;
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.ExecuseFlg = this.ExecuseFlg;
			_tmp.FailedCountFlag = this.FailedCountFlag;
			_tmp.GradingMoreThanOneId = this.GradingMoreThanOneId;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				_tmp.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeMinGradIdSource != null && existingCopies.Contains(this.EdCodeMinGradIdSource))
				_tmp.EdCodeMinGradIdSource = existingCopies[this.EdCodeMinGradIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeMinGradIdSource = MakeCopyOf(this.EdCodeMinGradIdSource, existingCopies) as EdCodeGrading;
			if (this.GradingMoreThanOneIdSource != null && existingCopies.Contains(this.GradingMoreThanOneIdSource))
				_tmp.GradingMoreThanOneIdSource = existingCopies[this.GradingMoreThanOneIdSource] as EdCodeGrading;
			else
				_tmp.GradingMoreThanOneIdSource = MakeCopyOf(this.GradingMoreThanOneIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeRepeatRuleIdSource != null && existingCopies.Contains(this.EdCodeRepeatRuleIdSource))
				_tmp.EdCodeRepeatRuleIdSource = existingCopies[this.EdCodeRepeatRuleIdSource] as EdCodeRepeatRule;
			else
				_tmp.EdCodeRepeatRuleIdSource = MakeCopyOf(this.EdCodeRepeatRuleIdSource, existingCopies) as EdCodeRepeatRule;
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				_tmp.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				_tmp.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyCourseRepeatColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntPolicyCourseRepeatColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyCourseRepeatColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntPolicyCourseRepeatColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyCourseRepeatColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntPolicyCourseRepeatColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntPolicyCourseRepeatEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntPolicyCourseRepeatEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyCourseRepeatColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntPolicyCourseRepeatColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntPolicyCourseRepeatEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntPolicyCourseRepeatEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntPolicyCourseRepeatEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntPolicyCourseRepeat"/> object.
	/// </remarks>
	public class EntPolicyCourseRepeatEventArgs : System.EventArgs
	{
		private EntPolicyCourseRepeatColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyCourseRepeatEventArgs class.
		///</summary>
		public EntPolicyCourseRepeatEventArgs(EntPolicyCourseRepeatColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyCourseRepeatEventArgs class.
		///</summary>
		public EntPolicyCourseRepeatEventArgs(EntPolicyCourseRepeatColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntPolicyCourseRepeatColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntPolicyCourseRepeatColumn" />
		public EntPolicyCourseRepeatColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntPolicyCourseRepeat related events.
	///</summary>
	public delegate void EntPolicyCourseRepeatEventHandler(object sender, EntPolicyCourseRepeatEventArgs e);
	
	#region EntPolicyCourseRepeatComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntPolicyCourseRepeatComparer : System.Collections.Generic.IComparer<EntPolicyCourseRepeat>
	{
		EntPolicyCourseRepeatColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyCourseRepeatComparer"/> class.
        /// </summary>
		public EntPolicyCourseRepeatComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyCourseRepeatComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntPolicyCourseRepeatComparer(EntPolicyCourseRepeatColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntPolicyCourseRepeat"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntPolicyCourseRepeat"/> to compare.</param>
        /// <param name="b">The second <c>EntPolicyCourseRepeat</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntPolicyCourseRepeat a, EntPolicyCourseRepeat b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntPolicyCourseRepeat entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntPolicyCourseRepeat a, EntPolicyCourseRepeat b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntPolicyCourseRepeatColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntPolicyCourseRepeatKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntPolicyCourseRepeat"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntPolicyCourseRepeatKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatKey class.
		/// </summary>
		public EntPolicyCourseRepeatKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatKey class.
		/// </summary>
		public EntPolicyCourseRepeatKey(EntPolicyCourseRepeatBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntPolicyCourseRepeatId = entity.EntPolicyCourseRepeatId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyCourseRepeatKey class.
		/// </summary>
		public EntPolicyCourseRepeatKey(System.Decimal _entPolicyCourseRepeatId)
		{
			#region Init Properties

			this.EntPolicyCourseRepeatId = _entPolicyCourseRepeatId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntPolicyCourseRepeatBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntPolicyCourseRepeatBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntPolicyCourseRepeatId property
		private System.Decimal _entPolicyCourseRepeatId;
		
		/// <summary>
		/// Gets or sets the EntPolicyCourseRepeatId property.
		/// </summary>
		public System.Decimal EntPolicyCourseRepeatId
		{
			get { return _entPolicyCourseRepeatId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntPolicyCourseRepeatId = value;
				
				_entPolicyCourseRepeatId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntPolicyCourseRepeatId = ( values["EntPolicyCourseRepeatId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntPolicyCourseRepeatId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntPolicyCourseRepeatId", EntPolicyCourseRepeatId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntPolicyCourseRepeatId: {0}{1}",
								EntPolicyCourseRepeatId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntPolicyCourseRepeatColumn Enum
	
	/// <summary>
	/// Enumerate the EntPolicyCourseRepeat columns.
	/// </summary>
	[Serializable]
	public enum EntPolicyCourseRepeatColumn : int
	{
		/// <summary>
		/// EntPolicyCourseRepeatId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_COURSE_REPEAT_ID")]
		[ColumnEnum("ENT_POLICY_COURSE_REPEAT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntPolicyCourseRepeatId = 1,
		/// <summary>
		/// MaxRepeatCoreNo : عدد مرات اعادة المقرر الواحد
		/// </summary>
		[EnumTextValue("MAX_REPEAT_CORE_NO")]
		[ColumnEnum("MAX_REPEAT_CORE_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MaxRepeatCoreNo = 2,
		/// <summary>
		/// MaxRepeatElctNo : XXX not used عدد مرات اعادة المقرر الواحد
		/// </summary>
		[EnumTextValue("MAX_REPEAT_ELCT_NO")]
		[ColumnEnum("MAX_REPEAT_ELCT_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MaxRepeatElctNo = 3,
		/// <summary>
		/// EdCodeRepeatRuleId : 
		/// </summary>
		[EnumTextValue("ED_CODE_REPEAT_RULE_ID")]
		[ColumnEnum("ED_CODE_REPEAT_RULE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeRepeatRuleId = 4,
		/// <summary>
		/// EdBylawId : 
		/// </summary>
		[EnumTextValue("ED_BYLAW_ID")]
		[ColumnEnum("ED_BYLAW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdBylawId = 5,
		/// <summary>
		/// RepeatFlg : 0:RepeatSucceed- 1:RepeatFail
		/// </summary>
		[EnumTextValue("REPEAT_FLG")]
		[ColumnEnum("REPEAT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RepeatFlg = 6,
		/// <summary>
		/// EdCodeMinGradId : اقل تقدير لتسجيل المقرر
		/// </summary>
		[EnumTextValue("ED_CODE_MIN_GRAD_ID")]
		[ColumnEnum("ED_CODE_MIN_GRAD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeMinGradId = 7,
		/// <summary>
		/// EdCodeGradingId : اقصى تقدير  للمقرر -اعلى المقبول
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 8,
		/// <summary>
		/// EntPolicyGradingHdrId : related to current bylaw
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_HDR_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyGradingHdrId = 9,
		/// <summary>
		/// MaxReptCourse : اقصى عدد مرات اعادة كل المقررات كل الفصول لنفس الطالب
		/// </summary>
		[EnumTextValue("MAX_REPT_COURSE")]
		[ColumnEnum("MAX_REPT_COURSE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxReptCourse = 10,
		/// <summary>
		/// MaxReptCh : NUB
		/// </summary>
		[EnumTextValue("MAX_REPT_CH")]
		[ColumnEnum("MAX_REPT_CH", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaxReptCh = 11,
		/// <summary>
		/// EdCodeSemesterTypeId : نوع الفصل : اجبارى- اختيارى
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TYPE_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterTypeId = 12,
		/// <summary>
		/// ExecuseFlg : الغياب عذر في المقرر المعاد
		/// </summary>
		[EnumTextValue("EXECUSE_FLG")]
		[ColumnEnum("EXECUSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExecuseFlg = 13,
		/// <summary>
		/// FailedCountFlag : 
		/// </summary>
		[EnumTextValue("FailedCount_Flag")]
		[ColumnEnum("FailedCount_Flag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		FailedCountFlag = 14,
		/// <summary>
		/// GradingMoreThanOneId : 
		/// </summary>
		[EnumTextValue("GradingMoreThanOne_ID")]
		[ColumnEnum("GradingMoreThanOne_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GradingMoreThanOneId = 15
	}//End enum

	#endregion EntPolicyCourseRepeatColumn Enum

} // end namespace
