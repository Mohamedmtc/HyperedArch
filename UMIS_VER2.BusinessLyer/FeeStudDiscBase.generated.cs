
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeStudDisc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_STUD_DISC' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeStudDiscBase : EntityBase, IFeeStudDisc, IEntityId<FeeStudDiscKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeStudDiscEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeStudDiscEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeStudDiscEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeStudDisc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudDiscEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudDiscEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeStudDiscBase"/> instance.
		///</summary>
		public FeeStudDiscBase()
		{
			this.entityData = new FeeStudDiscEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeStudDiscBase"/> instance.
		///</summary>
		///<param name="_feeStudDiscId"></param>
		///<param name="_discReqDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edStudId">NU:applicant request</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_feeCdeDiscTypeId"></param>
		///<param name="_discPercent"></param>
		///<param name="_stopFlg"></param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_updatedPercent"></param>
		///<param name="_lastUpdated"></param>
		///<param name="_discAmnt"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId">Applied only on %:
		/// 		/// 1- Total
		/// 		/// 2- Net
		/// 		/// 3- Remain</param>
		///<param name="_typeFlg">FROM TOTAL
		/// 		///  FROM ITEM_VALUE 
		/// 		///  ITEM_NET VALUE after Discount</param>
		///<param name="_admAppRegHistoryId">NU:applicant disc req.XXX</param>
		///<param name="_spoSponsorId">NU:Sponsor RelatedXXX</param>
		///<param name="_seUserApproveId"></param>
		///<param name="_approveDate"></param>
		///<param name="_semYearFlg">XXX
		/// 		/// replaced by ed_code_semester
		/// 		/// 1 once semester ,2: Year every mandatory semester</param>
		///<param name="_loadFlg">1 student loaded fees ,0 from fee_code_item allow discount</param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي
		/// 		/// فى حالة التخفيض على فصل وليس عام</param>
		public FeeStudDiscBase(System.Decimal _feeStudDiscId, System.DateTime _discReqDate, 
			System.Decimal? _asFacultyInfoId, System.Decimal? _edStudId, System.Decimal _edAcadYearId, 
			System.Decimal _feeCdeDiscTypeId, System.Decimal _discPercent, System.Decimal _stopFlg, 
			System.Decimal _gsCodeReqStatusId, System.Decimal _updatedPercent, System.DateTime _lastUpdated, 
			System.Decimal? _discAmnt, System.String _notes, System.Decimal? _seUserId, System.Int32? _typeFlg, 
			System.Decimal? _admAppRegHistoryId, System.Decimal? _spoSponsorId, System.Decimal? _seUserApproveId, 
			System.DateTime? _approveDate, System.Int32? _semYearFlg, System.Boolean? _loadFlg, 
			System.Decimal? _edCodeSemesterId)
		{
			this.entityData = new FeeStudDiscEntityData();
			this.backupData = null;

			this.FeeStudDiscId = _feeStudDiscId;
			this.DiscReqDate = _discReqDate;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdStudId = _edStudId;
			this.EdAcadYearId = _edAcadYearId;
			this.FeeCdeDiscTypeId = _feeCdeDiscTypeId;
			this.DiscPercent = _discPercent;
			this.StopFlg = _stopFlg;
			this.GsCodeReqStatusId = _gsCodeReqStatusId;
			this.UpdatedPercent = _updatedPercent;
			this.LastUpdated = _lastUpdated;
			this.DiscAmnt = _discAmnt;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.TypeFlg = _typeFlg;
			this.AdmAppRegHistoryId = _admAppRegHistoryId;
			this.SpoSponsorId = _spoSponsorId;
			this.SeUserApproveId = _seUserApproveId;
			this.ApproveDate = _approveDate;
			this.SemYearFlg = _semYearFlg;
			this.LoadFlg = _loadFlg;
			this.EdCodeSemesterId = _edCodeSemesterId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeStudDisc"/> instance.
		///</summary>
		///<param name="_feeStudDiscId"></param>
		///<param name="_discReqDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edStudId">NU:applicant request</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_feeCdeDiscTypeId"></param>
		///<param name="_discPercent"></param>
		///<param name="_stopFlg"></param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_updatedPercent"></param>
		///<param name="_lastUpdated"></param>
		///<param name="_discAmnt"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId">Applied only on %:
		/// 		/// 1- Total
		/// 		/// 2- Net
		/// 		/// 3- Remain</param>
		///<param name="_typeFlg">FROM TOTAL
		/// 		///  FROM ITEM_VALUE 
		/// 		///  ITEM_NET VALUE after Discount</param>
		///<param name="_admAppRegHistoryId">NU:applicant disc req.XXX</param>
		///<param name="_spoSponsorId">NU:Sponsor RelatedXXX</param>
		///<param name="_seUserApproveId"></param>
		///<param name="_approveDate"></param>
		///<param name="_semYearFlg">XXX
		/// 		/// replaced by ed_code_semester
		/// 		/// 1 once semester ,2: Year every mandatory semester</param>
		///<param name="_loadFlg">1 student loaded fees ,0 from fee_code_item allow discount</param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي
		/// 		/// فى حالة التخفيض على فصل وليس عام</param>
		public static FeeStudDisc CreateFeeStudDisc(System.Decimal _feeStudDiscId, System.DateTime _discReqDate, 
			System.Decimal? _asFacultyInfoId, System.Decimal? _edStudId, System.Decimal _edAcadYearId, 
			System.Decimal _feeCdeDiscTypeId, System.Decimal _discPercent, System.Decimal _stopFlg, 
			System.Decimal _gsCodeReqStatusId, System.Decimal _updatedPercent, System.DateTime _lastUpdated, 
			System.Decimal? _discAmnt, System.String _notes, System.Decimal? _seUserId, System.Int32? _typeFlg, 
			System.Decimal? _admAppRegHistoryId, System.Decimal? _spoSponsorId, System.Decimal? _seUserApproveId, 
			System.DateTime? _approveDate, System.Int32? _semYearFlg, System.Boolean? _loadFlg, 
			System.Decimal? _edCodeSemesterId)
		{
			FeeStudDisc newFeeStudDisc = new FeeStudDisc();
			newFeeStudDisc.FeeStudDiscId = _feeStudDiscId;
			newFeeStudDisc.DiscReqDate = _discReqDate;
			newFeeStudDisc.AsFacultyInfoId = _asFacultyInfoId;
			newFeeStudDisc.EdStudId = _edStudId;
			newFeeStudDisc.EdAcadYearId = _edAcadYearId;
			newFeeStudDisc.FeeCdeDiscTypeId = _feeCdeDiscTypeId;
			newFeeStudDisc.DiscPercent = _discPercent;
			newFeeStudDisc.StopFlg = _stopFlg;
			newFeeStudDisc.GsCodeReqStatusId = _gsCodeReqStatusId;
			newFeeStudDisc.UpdatedPercent = _updatedPercent;
			newFeeStudDisc.LastUpdated = _lastUpdated;
			newFeeStudDisc.DiscAmnt = _discAmnt;
			newFeeStudDisc.Notes = _notes;
			newFeeStudDisc.SeUserId = _seUserId;
			newFeeStudDisc.TypeFlg = _typeFlg;
			newFeeStudDisc.AdmAppRegHistoryId = _admAppRegHistoryId;
			newFeeStudDisc.SpoSponsorId = _spoSponsorId;
			newFeeStudDisc.SeUserApproveId = _seUserApproveId;
			newFeeStudDisc.ApproveDate = _approveDate;
			newFeeStudDisc.SemYearFlg = _semYearFlg;
			newFeeStudDisc.LoadFlg = _loadFlg;
			newFeeStudDisc.EdCodeSemesterId = _edCodeSemesterId;
			return newFeeStudDisc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeStudDiscId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeStudDiscId
		{
			get
			{
				return this.entityData.FeeStudDiscId; 
			}
			
			set
			{
				if (this.entityData.FeeStudDiscId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.FeeStudDiscId, this.entityData.FeeStudDiscId);
				this.entityData.FeeStudDiscId = value;
				this.EntityId.FeeStudDiscId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.FeeStudDiscId, this.entityData.FeeStudDiscId);
				OnPropertyChanged("FeeStudDiscId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_STUD_DISC_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FEE_STUD_DISC_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeStudDiscId
		{
			get { return this.entityData.OriginalFeeStudDiscId; }
			set { this.entityData.OriginalFeeStudDiscId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DiscReqDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DiscReqDate
		{
			get
			{
				return this.entityData.DiscReqDate; 
			}
			
			set
			{
				if (this.entityData.DiscReqDate == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.DiscReqDate, this.entityData.DiscReqDate);
				this.entityData.DiscReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.DiscReqDate, this.entityData.DiscReqDate);
				OnPropertyChanged("DiscReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		NU:applicant request
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU:applicant request"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeDiscTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCdeDiscTypeId
		{
			get
			{
				return this.entityData.FeeCdeDiscTypeId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeDiscTypeId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.FeeCdeDiscTypeId, this.entityData.FeeCdeDiscTypeId);
				this.entityData.FeeCdeDiscTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.FeeCdeDiscTypeId, this.entityData.FeeCdeDiscTypeId);
				OnPropertyChanged("FeeCdeDiscTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscPercent property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DiscPercent
		{
			get
			{
				return this.entityData.DiscPercent; 
			}
			
			set
			{
				if (this.entityData.DiscPercent == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.DiscPercent, this.entityData.DiscPercent);
				this.entityData.DiscPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.DiscPercent, this.entityData.DiscPercent);
				OnPropertyChanged("DiscPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StopFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal StopFlg
		{
			get
			{
				return this.entityData.StopFlg; 
			}
			
			set
			{
				if (this.entityData.StopFlg == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.StopFlg, this.entityData.StopFlg);
				this.entityData.StopFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.StopFlg, this.entityData.StopFlg);
				OnPropertyChanged("StopFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeReqStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeReqStatusId
		{
			get
			{
				return this.entityData.GsCodeReqStatusId; 
			}
			
			set
			{
				if (this.entityData.GsCodeReqStatusId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				this.entityData.GsCodeReqStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				OnPropertyChanged("GsCodeReqStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedPercent property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal UpdatedPercent
		{
			get
			{
				return this.entityData.UpdatedPercent; 
			}
			
			set
			{
				if (this.entityData.UpdatedPercent == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.UpdatedPercent, this.entityData.UpdatedPercent);
				this.entityData.UpdatedPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.UpdatedPercent, this.entityData.UpdatedPercent);
				OnPropertyChanged("UpdatedPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastUpdated property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastUpdated
		{
			get
			{
				return this.entityData.LastUpdated; 
			}
			
			set
			{
				if (this.entityData.LastUpdated == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.LastUpdated, this.entityData.LastUpdated);
				this.entityData.LastUpdated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.LastUpdated, this.entityData.LastUpdated);
				OnPropertyChanged("LastUpdated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscAmnt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscAmnt
		{
			get
			{
				return this.entityData.DiscAmnt; 
			}
			
			set
			{
				if (this.entityData.DiscAmnt == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.DiscAmnt, this.entityData.DiscAmnt);
				this.entityData.DiscAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.DiscAmnt, this.entityData.DiscAmnt);
				OnPropertyChanged("DiscAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		Applied only on %:
		/// 		/// 1- Total
		/// 		/// 2- Net
		/// 		/// 3- Remain
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Applied only on %: 1- Total 2- Net 3- Remain"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TypeFlg property. 
		///		FROM TOTAL
		/// 		///  FROM ITEM_VALUE 
		/// 		///  ITEM_NET VALUE after Discount
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"FROM TOTAL  FROM ITEM_VALUE   ITEM_NET VALUE after Discount"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TypeFlg
		{
			get
			{
				return this.entityData.TypeFlg; 
			}
			
			set
			{
				if (this.entityData.TypeFlg == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.TypeFlg, this.entityData.TypeFlg);
				this.entityData.TypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.TypeFlg, this.entityData.TypeFlg);
				OnPropertyChanged("TypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppRegHistoryId property. 
		///		NU:applicant disc req.XXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmAppRegHistoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU:applicant disc req.XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmAppRegHistoryId
		{
			get
			{
				return this.entityData.AdmAppRegHistoryId; 
			}
			
			set
			{
				if (this.entityData.AdmAppRegHistoryId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				this.entityData.AdmAppRegHistoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				OnPropertyChanged("AdmAppRegHistoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoSponsorId property. 
		///		NU:Sponsor RelatedXXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoSponsorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU:Sponsor RelatedXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoSponsorId
		{
			get
			{
				return this.entityData.SpoSponsorId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				this.entityData.SpoSponsorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				OnPropertyChanged("SpoSponsorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserApproveId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserApproveIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserApproveId
		{
			get
			{
				return this.entityData.SeUserApproveId; 
			}
			
			set
			{
				if (this.entityData.SeUserApproveId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.SeUserApproveId, this.entityData.SeUserApproveId);
				this.entityData.SeUserApproveId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.SeUserApproveId, this.entityData.SeUserApproveId);
				OnPropertyChanged("SeUserApproveId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApproveDate
		{
			get
			{
				return this.entityData.ApproveDate; 
			}
			
			set
			{
				if (this.entityData.ApproveDate == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.ApproveDate, this.entityData.ApproveDate);
				this.entityData.ApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.ApproveDate, this.entityData.ApproveDate);
				OnPropertyChanged("ApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemYearFlg property. 
		///		XXX
		/// 		/// replaced by ed_code_semester
		/// 		/// 1 once semester ,2: Year every mandatory semester
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSemYearFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX replaced by ed_code_semester 1 once semester ,2: Year every mandatory semester"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SemYearFlg
		{
			get
			{
				return this.entityData.SemYearFlg; 
			}
			
			set
			{
				if (this.entityData.SemYearFlg == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.SemYearFlg, this.entityData.SemYearFlg);
				this.entityData.SemYearFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.SemYearFlg, this.entityData.SemYearFlg);
				OnPropertyChanged("SemYearFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoadFlg property. 
		///		1 student loaded fees ,0 from fee_code_item allow discount
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsLoadFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1 student loaded fees ,0 from fee_code_item allow discount"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? LoadFlg
		{
			get
			{
				return this.entityData.LoadFlg; 
			}
			
			set
			{
				if (this.entityData.LoadFlg == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.LoadFlg, this.entityData.LoadFlg);
				this.entityData.LoadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.LoadFlg, this.entityData.LoadFlg);
				OnPropertyChanged("LoadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		مسلسل الفصل الدراسي
		/// 		/// فى حالة التخفيض على فصل وليس عام
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي فى حالة التخفيض على فصل وليس عام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(FeeStudDiscColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudDiscColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return entityData.AdmAppRegHistoryIdSource; }
            set { entityData.AdmAppRegHistoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeDiscType"/>.
		/// </summary>
		/// <value>The source FeeCdeDiscType for FeeCdeDiscTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeDiscType FeeCdeDiscTypeIdSource
      	{
            get { return entityData.FeeCdeDiscTypeIdSource; }
            set { entityData.FeeCdeDiscTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return entityData.GsCodeReqStatusIdSource; }
            set { entityData.GsCodeReqStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsor"/>.
		/// </summary>
		/// <value>The source SpoSponsor for SpoSponsorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SpoSponsor SpoSponsorIdSource
      	{
            get { return entityData.SpoSponsorIdSource; }
            set { entityData.SpoSponsorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeItemTrnsBlnc objects
		///	which are related to this object through the relation FK_FEE_ITEM_TRNS_BLNC_FEE_STUD_DISC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get { return entityData.FeeItemTrnsBlncCollection; }
			set { entityData.FeeItemTrnsBlncCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDiscSemester objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_SEMESTER_FEE_STUD_DISC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDiscSemester> FeeStudDiscSemesterCollection
		{
			get { return entityData.FeeStudDiscSemesterCollection; }
			set { entityData.FeeStudDiscSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_FEE_STUD_DISC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDiscFeeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_FEE_ITEM_FEE_STUD_DISC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDiscFeeItem> FeeStudDiscFeeItemCollection
		{
			get { return entityData.FeeStudDiscFeeItemCollection; }
			set { entityData.FeeStudDiscFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDiscCodeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_CODE_ITEM_FEE_STUD_DISC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDiscCodeItem> FeeStudDiscCodeItemCollection
		{
			get { return entityData.FeeStudDiscCodeItemCollection; }
			set { entityData.FeeStudDiscCodeItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_STUD_DISC"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_STUD_DISC_ID", "DISC_REQ_DATE", "AS_FACULTY_INFO_ID", "ED_STUD_ID", "ED_ACAD_YEAR_ID", "FEE_CDE_DISC_TYPE_ID", "DISC_PERCENT", "STOP_FLG", "GS_CODE_REQ_STATUS_ID", "UPDATED_PERCENT", "LAST_UPDATED", "DISC_AMNT", "NOTES", "SE_USER_ID", "TYPE_FLG", "ADM_APP_REG_HISTORY_ID", "SPO_SPONSOR_ID", "SE_USER_APPROVE_ID", "APPROVE_DATE", "SEM_YEAR_FLG", "LOAD_FLG", "ED_CODE_SEMESTER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeStudDiscEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeStudDisc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeStudDisc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeStudDisc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeStudDisc Entity 
		///</summary>
		protected virtual FeeStudDisc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeStudDisc copy = new FeeStudDisc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeStudDiscId = this.FeeStudDiscId;
					copy.OriginalFeeStudDiscId = this.OriginalFeeStudDiscId;
				copy.DiscReqDate = this.DiscReqDate;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdStudId = this.EdStudId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.FeeCdeDiscTypeId = this.FeeCdeDiscTypeId;
				copy.DiscPercent = this.DiscPercent;
				copy.StopFlg = this.StopFlg;
				copy.GsCodeReqStatusId = this.GsCodeReqStatusId;
				copy.UpdatedPercent = this.UpdatedPercent;
				copy.LastUpdated = this.LastUpdated;
				copy.DiscAmnt = this.DiscAmnt;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.TypeFlg = this.TypeFlg;
				copy.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
				copy.SpoSponsorId = this.SpoSponsorId;
				copy.SeUserApproveId = this.SeUserApproveId;
				copy.ApproveDate = this.ApproveDate;
				copy.SemYearFlg = this.SemYearFlg;
				copy.LoadFlg = this.LoadFlg;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				copy.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				copy.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.FeeCdeDiscTypeIdSource != null && existingCopies.Contains(this.FeeCdeDiscTypeIdSource))
				copy.FeeCdeDiscTypeIdSource = existingCopies[this.FeeCdeDiscTypeIdSource] as FeeCdeDiscType;
			else
				copy.FeeCdeDiscTypeIdSource = MakeCopyOf(this.FeeCdeDiscTypeIdSource, existingCopies) as FeeCdeDiscType;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				copy.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				copy.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			if (this.SpoSponsorIdSource != null && existingCopies.Contains(this.SpoSponsorIdSource))
				copy.SpoSponsorIdSource = existingCopies[this.SpoSponsorIdSource] as SpoSponsor;
			else
				copy.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource, existingCopies) as SpoSponsor;
		
			//deep copy nested objects
			copy.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			copy.FeeStudDiscSemesterCollection = (TList<FeeStudDiscSemester>) MakeCopyOf(this.FeeStudDiscSemesterCollection, existingCopies); 
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection, existingCopies); 
			copy.FeeStudDiscCodeItemCollection = (TList<FeeStudDiscCodeItem>) MakeCopyOf(this.FeeStudDiscCodeItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeStudDisc Entity 
		///</summary>
		public virtual FeeStudDisc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeStudDisc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeStudDisc DeepCopy()
		{
			return EntityHelper.Clone<FeeStudDisc>(this as FeeStudDisc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeStudDiscEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeStudDiscEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeStudDiscEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeStudDiscColumn column)
		{
			switch(column)
			{
					case FeeStudDiscColumn.FeeStudDiscId:
					return entityData.FeeStudDiscId != _originalData.FeeStudDiscId;
					case FeeStudDiscColumn.DiscReqDate:
					return entityData.DiscReqDate != _originalData.DiscReqDate;
					case FeeStudDiscColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case FeeStudDiscColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case FeeStudDiscColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeStudDiscColumn.FeeCdeDiscTypeId:
					return entityData.FeeCdeDiscTypeId != _originalData.FeeCdeDiscTypeId;
					case FeeStudDiscColumn.DiscPercent:
					return entityData.DiscPercent != _originalData.DiscPercent;
					case FeeStudDiscColumn.StopFlg:
					return entityData.StopFlg != _originalData.StopFlg;
					case FeeStudDiscColumn.GsCodeReqStatusId:
					return entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
					case FeeStudDiscColumn.UpdatedPercent:
					return entityData.UpdatedPercent != _originalData.UpdatedPercent;
					case FeeStudDiscColumn.LastUpdated:
					return entityData.LastUpdated != _originalData.LastUpdated;
					case FeeStudDiscColumn.DiscAmnt:
					return entityData.DiscAmnt != _originalData.DiscAmnt;
					case FeeStudDiscColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeStudDiscColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeStudDiscColumn.TypeFlg:
					return entityData.TypeFlg != _originalData.TypeFlg;
					case FeeStudDiscColumn.AdmAppRegHistoryId:
					return entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
					case FeeStudDiscColumn.SpoSponsorId:
					return entityData.SpoSponsorId != _originalData.SpoSponsorId;
					case FeeStudDiscColumn.SeUserApproveId:
					return entityData.SeUserApproveId != _originalData.SeUserApproveId;
					case FeeStudDiscColumn.ApproveDate:
					return entityData.ApproveDate != _originalData.ApproveDate;
					case FeeStudDiscColumn.SemYearFlg:
					return entityData.SemYearFlg != _originalData.SemYearFlg;
					case FeeStudDiscColumn.LoadFlg:
					return entityData.LoadFlg != _originalData.LoadFlg;
					case FeeStudDiscColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeStudDiscColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeStudDiscId != _originalData.FeeStudDiscId;
			result = result || entityData.DiscReqDate != _originalData.DiscReqDate;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.FeeCdeDiscTypeId != _originalData.FeeCdeDiscTypeId;
			result = result || entityData.DiscPercent != _originalData.DiscPercent;
			result = result || entityData.StopFlg != _originalData.StopFlg;
			result = result || entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
			result = result || entityData.UpdatedPercent != _originalData.UpdatedPercent;
			result = result || entityData.LastUpdated != _originalData.LastUpdated;
			result = result || entityData.DiscAmnt != _originalData.DiscAmnt;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.TypeFlg != _originalData.TypeFlg;
			result = result || entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
			result = result || entityData.SpoSponsorId != _originalData.SpoSponsorId;
			result = result || entityData.SeUserApproveId != _originalData.SeUserApproveId;
			result = result || entityData.ApproveDate != _originalData.ApproveDate;
			result = result || entityData.SemYearFlg != _originalData.SemYearFlg;
			result = result || entityData.LoadFlg != _originalData.LoadFlg;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeStudDisc Entity with the original data.
		///</summary>
		public FeeStudDisc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeStudDisc(
				_originalData.FeeStudDiscId,
				_originalData.DiscReqDate,
				_originalData.AsFacultyInfoId,
				_originalData.EdStudId,
				_originalData.EdAcadYearId,
				_originalData.FeeCdeDiscTypeId,
				_originalData.DiscPercent,
				_originalData.StopFlg,
				_originalData.GsCodeReqStatusId,
				_originalData.UpdatedPercent,
				_originalData.LastUpdated,
				_originalData.DiscAmnt,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.TypeFlg,
				_originalData.AdmAppRegHistoryId,
				_originalData.SpoSponsorId,
				_originalData.SeUserApproveId,
				_originalData.ApproveDate,
				_originalData.SemYearFlg,
				_originalData.LoadFlg,
				_originalData.EdCodeSemesterId
				);
				
			return (FeeStudDisc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeStudDiscBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeStudDiscBase)
				return ValueEquals(this, (FeeStudDiscBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeStudDiscBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeStudDiscId.GetHashCode() ^ 
					this.DiscReqDate.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.FeeCdeDiscTypeId.GetHashCode() ^ 
					this.DiscPercent.GetHashCode() ^ 
					this.StopFlg.GetHashCode() ^ 
					this.GsCodeReqStatusId.GetHashCode() ^ 
					this.UpdatedPercent.GetHashCode() ^ 
					this.LastUpdated.GetHashCode() ^ 
					((this.DiscAmnt == null) ? string.Empty : this.DiscAmnt.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.TypeFlg == null) ? string.Empty : this.TypeFlg.ToString()).GetHashCode() ^ 
					((this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString()).GetHashCode() ^ 
					((this.SpoSponsorId == null) ? string.Empty : this.SpoSponsorId.ToString()).GetHashCode() ^ 
					((this.SeUserApproveId == null) ? string.Empty : this.SeUserApproveId.ToString()).GetHashCode() ^ 
					((this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString()).GetHashCode() ^ 
					((this.SemYearFlg == null) ? string.Empty : this.SemYearFlg.ToString()).GetHashCode() ^ 
					((this.LoadFlg == null) ? string.Empty : this.LoadFlg.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeStudDiscBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeStudDiscBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeStudDiscBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeStudDiscBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeStudDiscBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeStudDiscBase Object1, FeeStudDiscBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeStudDiscId != Object2.FeeStudDiscId)
				equal = false;
			if (Object1.DiscReqDate != Object2.DiscReqDate)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.FeeCdeDiscTypeId != Object2.FeeCdeDiscTypeId)
				equal = false;
			if (Object1.DiscPercent != Object2.DiscPercent)
				equal = false;
			if (Object1.StopFlg != Object2.StopFlg)
				equal = false;
			if (Object1.GsCodeReqStatusId != Object2.GsCodeReqStatusId)
				equal = false;
			if (Object1.UpdatedPercent != Object2.UpdatedPercent)
				equal = false;
			if (Object1.LastUpdated != Object2.LastUpdated)
				equal = false;
			if ( Object1.DiscAmnt != null && Object2.DiscAmnt != null )
			{
				if (Object1.DiscAmnt != Object2.DiscAmnt)
					equal = false;
			}
			else if (Object1.DiscAmnt == null ^ Object2.DiscAmnt == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.TypeFlg != null && Object2.TypeFlg != null )
			{
				if (Object1.TypeFlg != Object2.TypeFlg)
					equal = false;
			}
			else if (Object1.TypeFlg == null ^ Object2.TypeFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmAppRegHistoryId != null && Object2.AdmAppRegHistoryId != null )
			{
				if (Object1.AdmAppRegHistoryId != Object2.AdmAppRegHistoryId)
					equal = false;
			}
			else if (Object1.AdmAppRegHistoryId == null ^ Object2.AdmAppRegHistoryId == null )
			{
				equal = false;
			}
			if ( Object1.SpoSponsorId != null && Object2.SpoSponsorId != null )
			{
				if (Object1.SpoSponsorId != Object2.SpoSponsorId)
					equal = false;
			}
			else if (Object1.SpoSponsorId == null ^ Object2.SpoSponsorId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserApproveId != null && Object2.SeUserApproveId != null )
			{
				if (Object1.SeUserApproveId != Object2.SeUserApproveId)
					equal = false;
			}
			else if (Object1.SeUserApproveId == null ^ Object2.SeUserApproveId == null )
			{
				equal = false;
			}
			if ( Object1.ApproveDate != null && Object2.ApproveDate != null )
			{
				if (Object1.ApproveDate != Object2.ApproveDate)
					equal = false;
			}
			else if (Object1.ApproveDate == null ^ Object2.ApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.SemYearFlg != null && Object2.SemYearFlg != null )
			{
				if (Object1.SemYearFlg != Object2.SemYearFlg)
					equal = false;
			}
			else if (Object1.SemYearFlg == null ^ Object2.SemYearFlg == null )
			{
				equal = false;
			}
			if ( Object1.LoadFlg != null && Object2.LoadFlg != null )
			{
				if (Object1.LoadFlg != Object2.LoadFlg)
					equal = false;
			}
			else if (Object1.LoadFlg == null ^ Object2.LoadFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeStudDiscBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeStudDiscComparer GetComparer()
        {
            return new FeeStudDiscComparer();
        }
        */

        // Comparer delegates back to FeeStudDisc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeStudDisc rhs, FeeStudDiscColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeStudDiscColumn.FeeStudDiscId:
            		return this.FeeStudDiscId.CompareTo(rhs.FeeStudDiscId);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.DiscReqDate:
            		return this.DiscReqDate.CompareTo(rhs.DiscReqDate);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.FeeCdeDiscTypeId:
            		return this.FeeCdeDiscTypeId.CompareTo(rhs.FeeCdeDiscTypeId);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.DiscPercent:
            		return this.DiscPercent.CompareTo(rhs.DiscPercent);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.StopFlg:
            		return this.StopFlg.CompareTo(rhs.StopFlg);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.GsCodeReqStatusId:
            		return this.GsCodeReqStatusId.CompareTo(rhs.GsCodeReqStatusId);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.UpdatedPercent:
            		return this.UpdatedPercent.CompareTo(rhs.UpdatedPercent);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.LastUpdated:
            		return this.LastUpdated.CompareTo(rhs.LastUpdated);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.DiscAmnt:
            		return this.DiscAmnt.Value.CompareTo(rhs.DiscAmnt.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.TypeFlg:
            		return this.TypeFlg.Value.CompareTo(rhs.TypeFlg.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.AdmAppRegHistoryId:
            		return this.AdmAppRegHistoryId.Value.CompareTo(rhs.AdmAppRegHistoryId.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.SpoSponsorId:
            		return this.SpoSponsorId.Value.CompareTo(rhs.SpoSponsorId.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.SeUserApproveId:
            		return this.SeUserApproveId.Value.CompareTo(rhs.SeUserApproveId.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.ApproveDate:
            		return this.ApproveDate.Value.CompareTo(rhs.ApproveDate.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.SemYearFlg:
            		return this.SemYearFlg.Value.CompareTo(rhs.SemYearFlg.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.LoadFlg:
            		return this.LoadFlg.Value.CompareTo(rhs.LoadFlg.Value);
            		
            		                 
            	
            	
            	case FeeStudDiscColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeStudDiscKey> Members
		
		// member variable for the EntityId property
		private FeeStudDiscKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeStudDiscKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeStudDiscKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeStudDisc")
					.Append("|").Append( this.FeeStudDiscId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- FeeStudDiscId: {0}{22}- DiscReqDate: {1}{22}- AsFacultyInfoId: {2}{22}- EdStudId: {3}{22}- EdAcadYearId: {4}{22}- FeeCdeDiscTypeId: {5}{22}- DiscPercent: {6}{22}- StopFlg: {7}{22}- GsCodeReqStatusId: {8}{22}- UpdatedPercent: {9}{22}- LastUpdated: {10}{22}- DiscAmnt: {11}{22}- Notes: {12}{22}- SeUserId: {13}{22}- TypeFlg: {14}{22}- AdmAppRegHistoryId: {15}{22}- SpoSponsorId: {16}{22}- SeUserApproveId: {17}{22}- ApproveDate: {18}{22}- SemYearFlg: {19}{22}- LoadFlg: {20}{22}- EdCodeSemesterId: {21}{22}{24}", 
				this.FeeStudDiscId,
				this.DiscReqDate,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				this.EdAcadYearId,
				this.FeeCdeDiscTypeId,
				this.DiscPercent,
				this.StopFlg,
				this.GsCodeReqStatusId,
				this.UpdatedPercent,
				this.LastUpdated,
				(this.DiscAmnt == null) ? string.Empty : this.DiscAmnt.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.TypeFlg == null) ? string.Empty : this.TypeFlg.ToString(),
				(this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString(),
				(this.SpoSponsorId == null) ? string.Empty : this.SpoSponsorId.ToString(),
				(this.SeUserApproveId == null) ? string.Empty : this.SeUserApproveId.ToString(),
				(this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString(),
				(this.SemYearFlg == null) ? string.Empty : this.SemYearFlg.ToString(),
				(this.LoadFlg == null) ? string.Empty : this.LoadFlg.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_STUD_DISC' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeStudDiscEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_STUD_DISC_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_STUD_DISC"</remarks>
		public System.Decimal FeeStudDiscId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeStudDiscId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DISC_REQ_DATE : 
		/// </summary>
		public System.DateTime		  DiscReqDate = DateTime.MinValue;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_STUD_ID : NU:applicant request
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// FEE_CDE_DISC_TYPE_ID : 
		/// </summary>
		public System.Decimal		  FeeCdeDiscTypeId = 0.0m;
		
		/// <summary>
		/// DISC_PERCENT : 
		/// </summary>
		public System.Decimal		  DiscPercent = 0.0m;
		
		/// <summary>
		/// STOP_FLG : 
		/// </summary>
		public System.Decimal		  StopFlg = 0.0m;
		
		/// <summary>
		/// GS_CODE_REQ_STATUS_ID : 
		/// </summary>
		public System.Decimal		  GsCodeReqStatusId = 0.0m;
		
		/// <summary>
		/// UPDATED_PERCENT : 
		/// </summary>
		public System.Decimal		  UpdatedPercent = 0.0m;
		
		/// <summary>
		/// LAST_UPDATED : 
		/// </summary>
		public System.DateTime		  LastUpdated = DateTime.MinValue;
		
		/// <summary>
		/// DISC_AMNT : 
		/// </summary>
		public System.Decimal?		  DiscAmnt = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : Applied only on %:
		/// 		/// 1- Total
		/// 		/// 2- Net
		/// 		/// 3- Remain
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// TYPE_FLG : FROM TOTAL
		/// 		///  FROM ITEM_VALUE 
		/// 		///  ITEM_NET VALUE after Discount
		/// </summary>
		public System.Int32?		  TypeFlg = null;
		
		/// <summary>
		/// ADM_APP_REG_HISTORY_ID : NU:applicant disc req.XXX
		/// </summary>
		public System.Decimal?		  AdmAppRegHistoryId = null;
		
		/// <summary>
		/// SPO_SPONSOR_ID : NU:Sponsor RelatedXXX
		/// </summary>
		public System.Decimal?		  SpoSponsorId = null;
		
		/// <summary>
		/// SE_USER_APPROVE_ID : 
		/// </summary>
		public System.Decimal?		  SeUserApproveId = null;
		
		/// <summary>
		/// APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  ApproveDate = null;
		
		/// <summary>
		/// SEM_YEAR_FLG : XXX
		/// 		/// replaced by ed_code_semester
		/// 		/// 1 once semester ,2: Year every mandatory semester
		/// </summary>
		public System.Int32?		  SemYearFlg = null;
		
		/// <summary>
		/// LOAD_FLG : 1 student loaded fees ,0 from fee_code_item allow discount
		/// </summary>
		public System.Boolean?		  LoadFlg = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : مسلسل الفصل الدراسي
		/// 		/// فى حالة التخفيض على فصل وليس عام
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private AdmAppRegHistory _admAppRegHistoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return this._admAppRegHistoryIdSource; }
            set { this._admAppRegHistoryIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private FeeCdeDiscType _feeCdeDiscTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeDiscType"/>.
		/// </summary>
		/// <value>The source FeeCdeDiscType for FeeCdeDiscTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeDiscType FeeCdeDiscTypeIdSource
      	{
            get { return this._feeCdeDiscTypeIdSource; }
            set { this._feeCdeDiscTypeIdSource = value; }
      	}
		private GsCodeReqStatus _gsCodeReqStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return this._gsCodeReqStatusIdSource; }
            set { this._gsCodeReqStatusIdSource = value; }
      	}
		private SpoSponsor _spoSponsorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsor"/>.
		/// </summary>
		/// <value>The source SpoSponsor for SpoSponsorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SpoSponsor SpoSponsorIdSource
      	{
            get { return this._spoSponsorIdSource; }
            set { this._spoSponsorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeItemTrnsBlncCollection
		
		private TList<FeeItemTrnsBlnc> _feeItemTrnsBlncFeeStudDiscId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeItemTrnsBlncFeeStudDiscId
		/// </summary>
		
		public TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get
			{
				if (_feeItemTrnsBlncFeeStudDiscId == null)
				{
				_feeItemTrnsBlncFeeStudDiscId = new TList<FeeItemTrnsBlnc>();
				}
	
				return _feeItemTrnsBlncFeeStudDiscId;
			}
			set { _feeItemTrnsBlncFeeStudDiscId = value; }
		}
		
		#endregion

		#region FeeStudDiscSemesterCollection
		
		private TList<FeeStudDiscSemester> _feeStudDiscSemesterFeeStudDiscId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscSemesterFeeStudDiscId
		/// </summary>
		
		public TList<FeeStudDiscSemester> FeeStudDiscSemesterCollection
		{
			get
			{
				if (_feeStudDiscSemesterFeeStudDiscId == null)
				{
				_feeStudDiscSemesterFeeStudDiscId = new TList<FeeStudDiscSemester>();
				}
	
				return _feeStudDiscSemesterFeeStudDiscId;
			}
			set { _feeStudDiscSemesterFeeStudDiscId = value; }
		}
		
		#endregion

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocFeeStudDiscId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocFeeStudDiscId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocFeeStudDiscId == null)
				{
				_gsAttchdDocFeeStudDiscId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocFeeStudDiscId;
			}
			set { _gsAttchdDocFeeStudDiscId = value; }
		}
		
		#endregion

		#region FeeStudDiscFeeItemCollection
		
		private TList<FeeStudDiscFeeItem> _feeStudDiscFeeItemFeeStudDiscId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscFeeItemFeeStudDiscId
		/// </summary>
		
		public TList<FeeStudDiscFeeItem> FeeStudDiscFeeItemCollection
		{
			get
			{
				if (_feeStudDiscFeeItemFeeStudDiscId == null)
				{
				_feeStudDiscFeeItemFeeStudDiscId = new TList<FeeStudDiscFeeItem>();
				}
	
				return _feeStudDiscFeeItemFeeStudDiscId;
			}
			set { _feeStudDiscFeeItemFeeStudDiscId = value; }
		}
		
		#endregion

		#region FeeStudDiscCodeItemCollection
		
		private TList<FeeStudDiscCodeItem> _feeStudDiscCodeItemFeeStudDiscId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscCodeItemFeeStudDiscId
		/// </summary>
		
		public TList<FeeStudDiscCodeItem> FeeStudDiscCodeItemCollection
		{
			get
			{
				if (_feeStudDiscCodeItemFeeStudDiscId == null)
				{
				_feeStudDiscCodeItemFeeStudDiscId = new TList<FeeStudDiscCodeItem>();
				}
	
				return _feeStudDiscCodeItemFeeStudDiscId;
			}
			set { _feeStudDiscCodeItemFeeStudDiscId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeStudDiscEntityData _tmp = new FeeStudDiscEntityData();
						
			_tmp.FeeStudDiscId = this.FeeStudDiscId;
			_tmp.OriginalFeeStudDiscId = this.OriginalFeeStudDiscId;
			
			_tmp.DiscReqDate = this.DiscReqDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.FeeCdeDiscTypeId = this.FeeCdeDiscTypeId;
			_tmp.DiscPercent = this.DiscPercent;
			_tmp.StopFlg = this.StopFlg;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.UpdatedPercent = this.UpdatedPercent;
			_tmp.LastUpdated = this.LastUpdated;
			_tmp.DiscAmnt = this.DiscAmnt;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.TypeFlg = this.TypeFlg;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.SeUserApproveId = this.SeUserApproveId;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.SemYearFlg = this.SemYearFlg;
			_tmp.LoadFlg = this.LoadFlg;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.AdmAppRegHistoryIdSource != null)
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource) as AdmAppRegHistory;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.FeeCdeDiscTypeIdSource != null)
				_tmp.FeeCdeDiscTypeIdSource = MakeCopyOf(this.FeeCdeDiscTypeIdSource) as FeeCdeDiscType;
			if (this.GsCodeReqStatusIdSource != null)
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource) as GsCodeReqStatus;
			if (this.SpoSponsorIdSource != null)
				_tmp.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource) as SpoSponsor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeItemTrnsBlncFeeStudDiscId != null)
				_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection); 
			if (this._feeStudDiscSemesterFeeStudDiscId != null)
				_tmp.FeeStudDiscSemesterCollection = (TList<FeeStudDiscSemester>) MakeCopyOf(this.FeeStudDiscSemesterCollection); 
			if (this._gsAttchdDocFeeStudDiscId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			if (this._feeStudDiscFeeItemFeeStudDiscId != null)
				_tmp.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection); 
			if (this._feeStudDiscCodeItemFeeStudDiscId != null)
				_tmp.FeeStudDiscCodeItemCollection = (TList<FeeStudDiscCodeItem>) MakeCopyOf(this.FeeStudDiscCodeItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeStudDiscEntityData _tmp = new FeeStudDiscEntityData();
						
			_tmp.FeeStudDiscId = this.FeeStudDiscId;
			_tmp.OriginalFeeStudDiscId = this.OriginalFeeStudDiscId;
			
			_tmp.DiscReqDate = this.DiscReqDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.FeeCdeDiscTypeId = this.FeeCdeDiscTypeId;
			_tmp.DiscPercent = this.DiscPercent;
			_tmp.StopFlg = this.StopFlg;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.UpdatedPercent = this.UpdatedPercent;
			_tmp.LastUpdated = this.LastUpdated;
			_tmp.DiscAmnt = this.DiscAmnt;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.TypeFlg = this.TypeFlg;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.SeUserApproveId = this.SeUserApproveId;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.SemYearFlg = this.SemYearFlg;
			_tmp.LoadFlg = this.LoadFlg;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				_tmp.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.FeeCdeDiscTypeIdSource != null && existingCopies.Contains(this.FeeCdeDiscTypeIdSource))
				_tmp.FeeCdeDiscTypeIdSource = existingCopies[this.FeeCdeDiscTypeIdSource] as FeeCdeDiscType;
			else
				_tmp.FeeCdeDiscTypeIdSource = MakeCopyOf(this.FeeCdeDiscTypeIdSource, existingCopies) as FeeCdeDiscType;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				_tmp.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			if (this.SpoSponsorIdSource != null && existingCopies.Contains(this.SpoSponsorIdSource))
				_tmp.SpoSponsorIdSource = existingCopies[this.SpoSponsorIdSource] as SpoSponsor;
			else
				_tmp.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource, existingCopies) as SpoSponsor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			_tmp.FeeStudDiscSemesterCollection = (TList<FeeStudDiscSemester>) MakeCopyOf(this.FeeStudDiscSemesterCollection, existingCopies); 
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			_tmp.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection, existingCopies); 
			_tmp.FeeStudDiscCodeItemCollection = (TList<FeeStudDiscCodeItem>) MakeCopyOf(this.FeeStudDiscCodeItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudDiscColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeStudDiscColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudDiscColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeStudDiscColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudDiscColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeStudDiscColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeStudDiscEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeStudDiscEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudDiscColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeStudDiscColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeStudDiscEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeStudDiscEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeStudDiscEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeStudDisc"/> object.
	/// </remarks>
	public class FeeStudDiscEventArgs : System.EventArgs
	{
		private FeeStudDiscColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudDiscEventArgs class.
		///</summary>
		public FeeStudDiscEventArgs(FeeStudDiscColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudDiscEventArgs class.
		///</summary>
		public FeeStudDiscEventArgs(FeeStudDiscColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeStudDiscColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeStudDiscColumn" />
		public FeeStudDiscColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeStudDisc related events.
	///</summary>
	public delegate void FeeStudDiscEventHandler(object sender, FeeStudDiscEventArgs e);
	
	#region FeeStudDiscComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeStudDiscComparer : System.Collections.Generic.IComparer<FeeStudDisc>
	{
		FeeStudDiscColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudDiscComparer"/> class.
        /// </summary>
		public FeeStudDiscComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudDiscComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeStudDiscComparer(FeeStudDiscColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeStudDisc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeStudDisc"/> to compare.</param>
        /// <param name="b">The second <c>FeeStudDisc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeStudDisc a, FeeStudDisc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeStudDisc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeStudDisc a, FeeStudDisc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeStudDiscColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeStudDiscKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeStudDisc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeStudDiscKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeStudDiscKey class.
		/// </summary>
		public FeeStudDiscKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudDiscKey class.
		/// </summary>
		public FeeStudDiscKey(FeeStudDiscBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeStudDiscId = entity.FeeStudDiscId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudDiscKey class.
		/// </summary>
		public FeeStudDiscKey(System.Decimal _feeStudDiscId)
		{
			#region Init Properties

			this.FeeStudDiscId = _feeStudDiscId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeStudDiscBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeStudDiscBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeStudDiscId property
		private System.Decimal _feeStudDiscId;
		
		/// <summary>
		/// Gets or sets the FeeStudDiscId property.
		/// </summary>
		public System.Decimal FeeStudDiscId
		{
			get { return _feeStudDiscId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeStudDiscId = value;
				
				_feeStudDiscId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeStudDiscId = ( values["FeeStudDiscId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeStudDiscId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeStudDiscId", FeeStudDiscId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeStudDiscId: {0}{1}",
								FeeStudDiscId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeStudDiscColumn Enum
	
	/// <summary>
	/// Enumerate the FeeStudDisc columns.
	/// </summary>
	[Serializable]
	public enum FeeStudDiscColumn : int
	{
		/// <summary>
		/// FeeStudDiscId : 
		/// </summary>
		[EnumTextValue("FEE_STUD_DISC_ID")]
		[ColumnEnum("FEE_STUD_DISC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeStudDiscId = 1,
		/// <summary>
		/// DiscReqDate : 
		/// </summary>
		[EnumTextValue("DISC_REQ_DATE")]
		[ColumnEnum("DISC_REQ_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		DiscReqDate = 2,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 3,
		/// <summary>
		/// EdStudId : NU:applicant request
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 4,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 5,
		/// <summary>
		/// FeeCdeDiscTypeId : 
		/// </summary>
		[EnumTextValue("FEE_CDE_DISC_TYPE_ID")]
		[ColumnEnum("FEE_CDE_DISC_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCdeDiscTypeId = 6,
		/// <summary>
		/// DiscPercent : 
		/// </summary>
		[EnumTextValue("DISC_PERCENT")]
		[ColumnEnum("DISC_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DiscPercent = 7,
		/// <summary>
		/// StopFlg : 
		/// </summary>
		[EnumTextValue("STOP_FLG")]
		[ColumnEnum("STOP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		StopFlg = 8,
		/// <summary>
		/// GsCodeReqStatusId : 
		/// </summary>
		[EnumTextValue("GS_CODE_REQ_STATUS_ID")]
		[ColumnEnum("GS_CODE_REQ_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeReqStatusId = 9,
		/// <summary>
		/// UpdatedPercent : 
		/// </summary>
		[EnumTextValue("UPDATED_PERCENT")]
		[ColumnEnum("UPDATED_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		UpdatedPercent = 10,
		/// <summary>
		/// LastUpdated : 
		/// </summary>
		[EnumTextValue("LAST_UPDATED")]
		[ColumnEnum("LAST_UPDATED", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		LastUpdated = 11,
		/// <summary>
		/// DiscAmnt : 
		/// </summary>
		[EnumTextValue("DISC_AMNT")]
		[ColumnEnum("DISC_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscAmnt = 12,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Notes = 13,
		/// <summary>
		/// SeUserId : Applied only on %:
		/// 		/// 1- Total
		/// 		/// 2- Net
		/// 		/// 3- Remain
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 14,
		/// <summary>
		/// TypeFlg : FROM TOTAL
		/// 		///  FROM ITEM_VALUE 
		/// 		///  ITEM_NET VALUE after Discount
		/// </summary>
		[EnumTextValue("TYPE_FLG")]
		[ColumnEnum("TYPE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TypeFlg = 15,
		/// <summary>
		/// AdmAppRegHistoryId : NU:applicant disc req.XXX
		/// </summary>
		[EnumTextValue("ADM_APP_REG_HISTORY_ID")]
		[ColumnEnum("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmAppRegHistoryId = 16,
		/// <summary>
		/// SpoSponsorId : NU:Sponsor RelatedXXX
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_ID")]
		[ColumnEnum("SPO_SPONSOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoSponsorId = 17,
		/// <summary>
		/// SeUserApproveId : 
		/// </summary>
		[EnumTextValue("SE_USER_APPROVE_ID")]
		[ColumnEnum("SE_USER_APPROVE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserApproveId = 18,
		/// <summary>
		/// ApproveDate : 
		/// </summary>
		[EnumTextValue("APPROVE_DATE")]
		[ColumnEnum("APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveDate = 19,
		/// <summary>
		/// SemYearFlg : XXX
		/// 		/// replaced by ed_code_semester
		/// 		/// 1 once semester ,2: Year every mandatory semester
		/// </summary>
		[EnumTextValue("SEM_YEAR_FLG")]
		[ColumnEnum("SEM_YEAR_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SemYearFlg = 20,
		/// <summary>
		/// LoadFlg : 1 student loaded fees ,0 from fee_code_item allow discount
		/// </summary>
		[EnumTextValue("LOAD_FLG")]
		[ColumnEnum("LOAD_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		LoadFlg = 21,
		/// <summary>
		/// EdCodeSemesterId : مسلسل الفصل الدراسي
		/// 		/// فى حالة التخفيض على فصل وليس عام
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 22
	}//End enum

	#endregion FeeStudDiscColumn Enum

} // end namespace
