
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCourseExpDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_COURSE_EXP_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCourseExpDtlBase : EntityBase, IEdCourseExpDtl, IEntityId<EdCourseExpDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCourseExpDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCourseExpDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCourseExpDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCourseExpDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseExpDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseExpDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCourseExpDtlBase"/> instance.
		///</summary>
		public EdCourseExpDtlBase()
		{
			this.entityData = new EdCourseExpDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCourseExpDtlBase"/> instance.
		///</summary>
		///<param name="_edCourseExpDtlId"></param>
		///<param name="_edCourseExpHdrId"></param>
		///<param name="_recType"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCoursePrfxId"></param>
		///<param name="_crsNumber"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_minCh"></param>
		///<param name="_minMjrCh"></param>
		///<param name="_minCgpa"></param>
		///<param name="_minMjrCgpa"></param>
		///<param name="_logOpr"></param>
		public EdCourseExpDtlBase(System.Decimal _edCourseExpDtlId, System.Decimal _edCourseExpHdrId, 
			System.Decimal? _recType, System.Decimal? _edCourseId, System.Decimal? _edCoursePrfxId, 
			System.String _crsNumber, System.Decimal? _edCodeGradingId, System.Decimal? _minCh, 
			System.Decimal? _minMjrCh, System.Decimal? _minCgpa, System.Decimal? _minMjrCgpa, 
			System.String _logOpr)
		{
			this.entityData = new EdCourseExpDtlEntityData();
			this.backupData = null;

			this.EdCourseExpDtlId = _edCourseExpDtlId;
			this.EdCourseExpHdrId = _edCourseExpHdrId;
			this.RecType = _recType;
			this.EdCourseId = _edCourseId;
			this.EdCoursePrfxId = _edCoursePrfxId;
			this.CrsNumber = _crsNumber;
			this.EdCodeGradingId = _edCodeGradingId;
			this.MinCh = _minCh;
			this.MinMjrCh = _minMjrCh;
			this.MinCgpa = _minCgpa;
			this.MinMjrCgpa = _minMjrCgpa;
			this.LogOpr = _logOpr;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCourseExpDtl"/> instance.
		///</summary>
		///<param name="_edCourseExpDtlId"></param>
		///<param name="_edCourseExpHdrId"></param>
		///<param name="_recType"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCoursePrfxId"></param>
		///<param name="_crsNumber"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_minCh"></param>
		///<param name="_minMjrCh"></param>
		///<param name="_minCgpa"></param>
		///<param name="_minMjrCgpa"></param>
		///<param name="_logOpr"></param>
		public static EdCourseExpDtl CreateEdCourseExpDtl(System.Decimal _edCourseExpDtlId, System.Decimal _edCourseExpHdrId, 
			System.Decimal? _recType, System.Decimal? _edCourseId, System.Decimal? _edCoursePrfxId, 
			System.String _crsNumber, System.Decimal? _edCodeGradingId, System.Decimal? _minCh, 
			System.Decimal? _minMjrCh, System.Decimal? _minCgpa, System.Decimal? _minMjrCgpa, 
			System.String _logOpr)
		{
			EdCourseExpDtl newEdCourseExpDtl = new EdCourseExpDtl();
			newEdCourseExpDtl.EdCourseExpDtlId = _edCourseExpDtlId;
			newEdCourseExpDtl.EdCourseExpHdrId = _edCourseExpHdrId;
			newEdCourseExpDtl.RecType = _recType;
			newEdCourseExpDtl.EdCourseId = _edCourseId;
			newEdCourseExpDtl.EdCoursePrfxId = _edCoursePrfxId;
			newEdCourseExpDtl.CrsNumber = _crsNumber;
			newEdCourseExpDtl.EdCodeGradingId = _edCodeGradingId;
			newEdCourseExpDtl.MinCh = _minCh;
			newEdCourseExpDtl.MinMjrCh = _minMjrCh;
			newEdCourseExpDtl.MinCgpa = _minCgpa;
			newEdCourseExpDtl.MinMjrCgpa = _minMjrCgpa;
			newEdCourseExpDtl.LogOpr = _logOpr;
			return newEdCourseExpDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCourseExpDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCourseExpDtlId
		{
			get
			{
				return this.entityData.EdCourseExpDtlId; 
			}
			
			set
			{
				if (this.entityData.EdCourseExpDtlId == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.EdCourseExpDtlId, this.entityData.EdCourseExpDtlId);
				this.entityData.EdCourseExpDtlId = value;
				this.EntityId.EdCourseExpDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.EdCourseExpDtlId, this.entityData.EdCourseExpDtlId);
				OnPropertyChanged("EdCourseExpDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_COURSE_EXP_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_COURSE_EXP_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCourseExpDtlId
		{
			get { return this.entityData.OriginalEdCourseExpDtlId; }
			set { this.entityData.OriginalEdCourseExpDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseExpHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseExpHdrId
		{
			get
			{
				return this.entityData.EdCourseExpHdrId; 
			}
			
			set
			{
				if (this.entityData.EdCourseExpHdrId == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.EdCourseExpHdrId, this.entityData.EdCourseExpHdrId);
				this.entityData.EdCourseExpHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.EdCourseExpHdrId, this.entityData.EdCourseExpHdrId);
				OnPropertyChanged("EdCourseExpHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecType property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRecTypeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RecType
		{
			get
			{
				return this.entityData.RecType; 
			}
			
			set
			{
				if (this.entityData.RecType == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.RecType, this.entityData.RecType);
				this.entityData.RecType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.RecType, this.entityData.RecType);
				OnPropertyChanged("RecType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCoursePrfxId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCoursePrfxIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCoursePrfxId
		{
			get
			{
				return this.entityData.EdCoursePrfxId; 
			}
			
			set
			{
				if (this.entityData.EdCoursePrfxId == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.EdCoursePrfxId, this.entityData.EdCoursePrfxId);
				this.entityData.EdCoursePrfxId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.EdCoursePrfxId, this.entityData.EdCoursePrfxId);
				OnPropertyChanged("EdCoursePrfxId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String CrsNumber
		{
			get
			{
				return this.entityData.CrsNumber; 
			}
			
			set
			{
				if (this.entityData.CrsNumber == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.CrsNumber, this.entityData.CrsNumber);
				this.entityData.CrsNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.CrsNumber, this.entityData.CrsNumber);
				OnPropertyChanged("CrsNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinCh property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinCh
		{
			get
			{
				return this.entityData.MinCh; 
			}
			
			set
			{
				if (this.entityData.MinCh == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.MinCh, this.entityData.MinCh);
				this.entityData.MinCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.MinCh, this.entityData.MinCh);
				OnPropertyChanged("MinCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinMjrCh property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinMjrChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinMjrCh
		{
			get
			{
				return this.entityData.MinMjrCh; 
			}
			
			set
			{
				if (this.entityData.MinMjrCh == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.MinMjrCh, this.entityData.MinMjrCh);
				this.entityData.MinMjrCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.MinMjrCh, this.entityData.MinMjrCh);
				OnPropertyChanged("MinMjrCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinCgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinCgpa
		{
			get
			{
				return this.entityData.MinCgpa; 
			}
			
			set
			{
				if (this.entityData.MinCgpa == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.MinCgpa, this.entityData.MinCgpa);
				this.entityData.MinCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.MinCgpa, this.entityData.MinCgpa);
				OnPropertyChanged("MinCgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinMjrCgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinMjrCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinMjrCgpa
		{
			get
			{
				return this.entityData.MinMjrCgpa; 
			}
			
			set
			{
				if (this.entityData.MinMjrCgpa == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.MinMjrCgpa, this.entityData.MinMjrCgpa);
				this.entityData.MinMjrCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.MinMjrCgpa, this.entityData.MinMjrCgpa);
				OnPropertyChanged("MinMjrCgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LogOpr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String LogOpr
		{
			get
			{
				return this.entityData.LogOpr; 
			}
			
			set
			{
				if (this.entityData.LogOpr == value)
					return;
					
				OnColumnChanging(EdCourseExpDtlColumn.LogOpr, this.entityData.LogOpr);
				this.entityData.LogOpr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseExpDtlColumn.LogOpr, this.entityData.LogOpr);
				OnPropertyChanged("LogOpr");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourseExpHdr EdCourseExpHdrIdSource
      	{
            get { return entityData.EdCourseExpHdrIdSource; }
            set { entityData.EdCourseExpHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCoursePrfx"/>.
		/// </summary>
		/// <value>The source EdCoursePrfx for EdCoursePrfxId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCoursePrfx EdCoursePrfxIdSource
      	{
            get { return entityData.EdCoursePrfxIdSource; }
            set { entityData.EdCoursePrfxIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrsNumber", "Crs Number", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LogOpr", "Log Opr", 5));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_COURSE_EXP_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_COURSE_EXP_DTL_ID", "ED_COURSE_EXP_HDR_ID", "REC_TYPE", "ED_COURSE_ID", "ED_COURSE_PRFX_ID", "CRS_NUMBER", "ED_CODE_GRADING_ID", "MIN_CH", "MIN_MJR_CH", "MIN_CGPA", "MIN_MJR_CGPA", "LOG_OPR"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCourseExpDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCourseExpDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCourseExpDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCourseExpDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCourseExpDtl Entity 
		///</summary>
		protected virtual EdCourseExpDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCourseExpDtl copy = new EdCourseExpDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCourseExpDtlId = this.EdCourseExpDtlId;
					copy.OriginalEdCourseExpDtlId = this.OriginalEdCourseExpDtlId;
				copy.EdCourseExpHdrId = this.EdCourseExpHdrId;
				copy.RecType = this.RecType;
				copy.EdCourseId = this.EdCourseId;
				copy.EdCoursePrfxId = this.EdCoursePrfxId;
				copy.CrsNumber = this.CrsNumber;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.MinCh = this.MinCh;
				copy.MinMjrCh = this.MinMjrCh;
				copy.MinCgpa = this.MinCgpa;
				copy.MinMjrCgpa = this.MinMjrCgpa;
				copy.LogOpr = this.LogOpr;
			
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseExpHdrIdSource != null && existingCopies.Contains(this.EdCourseExpHdrIdSource))
				copy.EdCourseExpHdrIdSource = existingCopies[this.EdCourseExpHdrIdSource] as EdCourseExpHdr;
			else
				copy.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EdCoursePrfxIdSource != null && existingCopies.Contains(this.EdCoursePrfxIdSource))
				copy.EdCoursePrfxIdSource = existingCopies[this.EdCoursePrfxIdSource] as EdCoursePrfx;
			else
				copy.EdCoursePrfxIdSource = MakeCopyOf(this.EdCoursePrfxIdSource, existingCopies) as EdCoursePrfx;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCourseExpDtl Entity 
		///</summary>
		public virtual EdCourseExpDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCourseExpDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCourseExpDtl DeepCopy()
		{
			return EntityHelper.Clone<EdCourseExpDtl>(this as EdCourseExpDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCourseExpDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCourseExpDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCourseExpDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCourseExpDtlColumn column)
		{
			switch(column)
			{
					case EdCourseExpDtlColumn.EdCourseExpDtlId:
					return entityData.EdCourseExpDtlId != _originalData.EdCourseExpDtlId;
					case EdCourseExpDtlColumn.EdCourseExpHdrId:
					return entityData.EdCourseExpHdrId != _originalData.EdCourseExpHdrId;
					case EdCourseExpDtlColumn.RecType:
					return entityData.RecType != _originalData.RecType;
					case EdCourseExpDtlColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdCourseExpDtlColumn.EdCoursePrfxId:
					return entityData.EdCoursePrfxId != _originalData.EdCoursePrfxId;
					case EdCourseExpDtlColumn.CrsNumber:
					return entityData.CrsNumber != _originalData.CrsNumber;
					case EdCourseExpDtlColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EdCourseExpDtlColumn.MinCh:
					return entityData.MinCh != _originalData.MinCh;
					case EdCourseExpDtlColumn.MinMjrCh:
					return entityData.MinMjrCh != _originalData.MinMjrCh;
					case EdCourseExpDtlColumn.MinCgpa:
					return entityData.MinCgpa != _originalData.MinCgpa;
					case EdCourseExpDtlColumn.MinMjrCgpa:
					return entityData.MinMjrCgpa != _originalData.MinMjrCgpa;
					case EdCourseExpDtlColumn.LogOpr:
					return entityData.LogOpr != _originalData.LogOpr;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCourseExpDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCourseExpDtlId != _originalData.EdCourseExpDtlId;
			result = result || entityData.EdCourseExpHdrId != _originalData.EdCourseExpHdrId;
			result = result || entityData.RecType != _originalData.RecType;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EdCoursePrfxId != _originalData.EdCoursePrfxId;
			result = result || entityData.CrsNumber != _originalData.CrsNumber;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.MinCh != _originalData.MinCh;
			result = result || entityData.MinMjrCh != _originalData.MinMjrCh;
			result = result || entityData.MinCgpa != _originalData.MinCgpa;
			result = result || entityData.MinMjrCgpa != _originalData.MinMjrCgpa;
			result = result || entityData.LogOpr != _originalData.LogOpr;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCourseExpDtl Entity with the original data.
		///</summary>
		public EdCourseExpDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCourseExpDtl(
				_originalData.EdCourseExpDtlId,
				_originalData.EdCourseExpHdrId,
				_originalData.RecType,
				_originalData.EdCourseId,
				_originalData.EdCoursePrfxId,
				_originalData.CrsNumber,
				_originalData.EdCodeGradingId,
				_originalData.MinCh,
				_originalData.MinMjrCh,
				_originalData.MinCgpa,
				_originalData.MinMjrCgpa,
				_originalData.LogOpr
				);
				
			return (EdCourseExpDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCourseExpDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCourseExpDtlBase)
				return ValueEquals(this, (EdCourseExpDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCourseExpDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCourseExpDtlId.GetHashCode() ^ 
					this.EdCourseExpHdrId.GetHashCode() ^ 
					((this.RecType == null) ? string.Empty : this.RecType.ToString()).GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.EdCoursePrfxId == null) ? string.Empty : this.EdCoursePrfxId.ToString()).GetHashCode() ^ 
					((this.CrsNumber == null) ? string.Empty : this.CrsNumber.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.MinCh == null) ? string.Empty : this.MinCh.ToString()).GetHashCode() ^ 
					((this.MinMjrCh == null) ? string.Empty : this.MinMjrCh.ToString()).GetHashCode() ^ 
					((this.MinCgpa == null) ? string.Empty : this.MinCgpa.ToString()).GetHashCode() ^ 
					((this.MinMjrCgpa == null) ? string.Empty : this.MinMjrCgpa.ToString()).GetHashCode() ^ 
					((this.LogOpr == null) ? string.Empty : this.LogOpr.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCourseExpDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCourseExpDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCourseExpDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCourseExpDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCourseExpDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCourseExpDtlBase Object1, EdCourseExpDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCourseExpDtlId != Object2.EdCourseExpDtlId)
				equal = false;
			if (Object1.EdCourseExpHdrId != Object2.EdCourseExpHdrId)
				equal = false;
			if ( Object1.RecType != null && Object2.RecType != null )
			{
				if (Object1.RecType != Object2.RecType)
					equal = false;
			}
			else if (Object1.RecType == null ^ Object2.RecType == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.EdCoursePrfxId != null && Object2.EdCoursePrfxId != null )
			{
				if (Object1.EdCoursePrfxId != Object2.EdCoursePrfxId)
					equal = false;
			}
			else if (Object1.EdCoursePrfxId == null ^ Object2.EdCoursePrfxId == null )
			{
				equal = false;
			}
			if ( Object1.CrsNumber != null && Object2.CrsNumber != null )
			{
				if (Object1.CrsNumber != Object2.CrsNumber)
					equal = false;
			}
			else if (Object1.CrsNumber == null ^ Object2.CrsNumber == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.MinCh != null && Object2.MinCh != null )
			{
				if (Object1.MinCh != Object2.MinCh)
					equal = false;
			}
			else if (Object1.MinCh == null ^ Object2.MinCh == null )
			{
				equal = false;
			}
			if ( Object1.MinMjrCh != null && Object2.MinMjrCh != null )
			{
				if (Object1.MinMjrCh != Object2.MinMjrCh)
					equal = false;
			}
			else if (Object1.MinMjrCh == null ^ Object2.MinMjrCh == null )
			{
				equal = false;
			}
			if ( Object1.MinCgpa != null && Object2.MinCgpa != null )
			{
				if (Object1.MinCgpa != Object2.MinCgpa)
					equal = false;
			}
			else if (Object1.MinCgpa == null ^ Object2.MinCgpa == null )
			{
				equal = false;
			}
			if ( Object1.MinMjrCgpa != null && Object2.MinMjrCgpa != null )
			{
				if (Object1.MinMjrCgpa != Object2.MinMjrCgpa)
					equal = false;
			}
			else if (Object1.MinMjrCgpa == null ^ Object2.MinMjrCgpa == null )
			{
				equal = false;
			}
			if ( Object1.LogOpr != null && Object2.LogOpr != null )
			{
				if (Object1.LogOpr != Object2.LogOpr)
					equal = false;
			}
			else if (Object1.LogOpr == null ^ Object2.LogOpr == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCourseExpDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCourseExpDtlComparer GetComparer()
        {
            return new EdCourseExpDtlComparer();
        }
        */

        // Comparer delegates back to EdCourseExpDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCourseExpDtl rhs, EdCourseExpDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCourseExpDtlColumn.EdCourseExpDtlId:
            		return this.EdCourseExpDtlId.CompareTo(rhs.EdCourseExpDtlId);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.EdCourseExpHdrId:
            		return this.EdCourseExpHdrId.CompareTo(rhs.EdCourseExpHdrId);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.RecType:
            		return this.RecType.Value.CompareTo(rhs.RecType.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.EdCoursePrfxId:
            		return this.EdCoursePrfxId.Value.CompareTo(rhs.EdCoursePrfxId.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.CrsNumber:
            		return this.CrsNumber.CompareTo(rhs.CrsNumber);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.MinCh:
            		return this.MinCh.Value.CompareTo(rhs.MinCh.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.MinMjrCh:
            		return this.MinMjrCh.Value.CompareTo(rhs.MinMjrCh.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.MinCgpa:
            		return this.MinCgpa.Value.CompareTo(rhs.MinCgpa.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.MinMjrCgpa:
            		return this.MinMjrCgpa.Value.CompareTo(rhs.MinMjrCgpa.Value);
            		
            		                 
            	
            	
            	case EdCourseExpDtlColumn.LogOpr:
            		return this.LogOpr.CompareTo(rhs.LogOpr);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCourseExpDtlKey> Members
		
		// member variable for the EntityId property
		private EdCourseExpDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCourseExpDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCourseExpDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCourseExpDtl")
					.Append("|").Append( this.EdCourseExpDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- EdCourseExpDtlId: {0}{12}- EdCourseExpHdrId: {1}{12}- RecType: {2}{12}- EdCourseId: {3}{12}- EdCoursePrfxId: {4}{12}- CrsNumber: {5}{12}- EdCodeGradingId: {6}{12}- MinCh: {7}{12}- MinMjrCh: {8}{12}- MinCgpa: {9}{12}- MinMjrCgpa: {10}{12}- LogOpr: {11}{12}{14}", 
				this.EdCourseExpDtlId,
				this.EdCourseExpHdrId,
				(this.RecType == null) ? string.Empty : this.RecType.ToString(),
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.EdCoursePrfxId == null) ? string.Empty : this.EdCoursePrfxId.ToString(),
				(this.CrsNumber == null) ? string.Empty : this.CrsNumber.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				(this.MinCh == null) ? string.Empty : this.MinCh.ToString(),
				(this.MinMjrCh == null) ? string.Empty : this.MinMjrCh.ToString(),
				(this.MinCgpa == null) ? string.Empty : this.MinCgpa.ToString(),
				(this.MinMjrCgpa == null) ? string.Empty : this.MinMjrCgpa.ToString(),
				(this.LogOpr == null) ? string.Empty : this.LogOpr.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_COURSE_EXP_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCourseExpDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_COURSE_EXP_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_COURSE_EXP_DTL"</remarks>
		public System.Decimal EdCourseExpDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCourseExpDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_EXP_HDR_ID : 
		/// </summary>
		public System.Decimal		  EdCourseExpHdrId = 0.0m;
		
		/// <summary>
		/// REC_TYPE : 
		/// </summary>
		public System.Decimal?		  RecType = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// ED_COURSE_PRFX_ID : 
		/// </summary>
		public System.Decimal?		  EdCoursePrfxId = null;
		
		/// <summary>
		/// CRS_NUMBER : 
		/// </summary>
		public System.String		  CrsNumber = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// MIN_CH : 
		/// </summary>
		public System.Decimal?		  MinCh = null;
		
		/// <summary>
		/// MIN_MJR_CH : 
		/// </summary>
		public System.Decimal?		  MinMjrCh = null;
		
		/// <summary>
		/// MIN_CGPA : 
		/// </summary>
		public System.Decimal?		  MinCgpa = null;
		
		/// <summary>
		/// MIN_MJR_CGPA : 
		/// </summary>
		public System.Decimal?		  MinMjrCgpa = null;
		
		/// <summary>
		/// LOG_OPR : 
		/// </summary>
		public System.String		  LogOpr = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdCourseExpHdr _edCourseExpHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourseExpHdr EdCourseExpHdrIdSource
      	{
            get { return this._edCourseExpHdrIdSource; }
            set { this._edCourseExpHdrIdSource = value; }
      	}
		private EdCoursePrfx _edCoursePrfxIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCoursePrfx"/>.
		/// </summary>
		/// <value>The source EdCoursePrfx for EdCoursePrfxId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCoursePrfx EdCoursePrfxIdSource
      	{
            get { return this._edCoursePrfxIdSource; }
            set { this._edCoursePrfxIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCourseExpDtlEntityData _tmp = new EdCourseExpDtlEntityData();
						
			_tmp.EdCourseExpDtlId = this.EdCourseExpDtlId;
			_tmp.OriginalEdCourseExpDtlId = this.OriginalEdCourseExpDtlId;
			
			_tmp.EdCourseExpHdrId = this.EdCourseExpHdrId;
			_tmp.RecType = this.RecType;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCoursePrfxId = this.EdCoursePrfxId;
			_tmp.CrsNumber = this.CrsNumber;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.MinCh = this.MinCh;
			_tmp.MinMjrCh = this.MinMjrCh;
			_tmp.MinCgpa = this.MinCgpa;
			_tmp.MinMjrCgpa = this.MinMjrCgpa;
			_tmp.LogOpr = this.LogOpr;
			
			#region Source Parent Composite Entities
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdCourseExpHdrIdSource != null)
				_tmp.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource) as EdCourseExpHdr;
			if (this.EdCoursePrfxIdSource != null)
				_tmp.EdCoursePrfxIdSource = MakeCopyOf(this.EdCoursePrfxIdSource) as EdCoursePrfx;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCourseExpDtlEntityData _tmp = new EdCourseExpDtlEntityData();
						
			_tmp.EdCourseExpDtlId = this.EdCourseExpDtlId;
			_tmp.OriginalEdCourseExpDtlId = this.OriginalEdCourseExpDtlId;
			
			_tmp.EdCourseExpHdrId = this.EdCourseExpHdrId;
			_tmp.RecType = this.RecType;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCoursePrfxId = this.EdCoursePrfxId;
			_tmp.CrsNumber = this.CrsNumber;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.MinCh = this.MinCh;
			_tmp.MinMjrCh = this.MinMjrCh;
			_tmp.MinCgpa = this.MinCgpa;
			_tmp.MinMjrCgpa = this.MinMjrCgpa;
			_tmp.LogOpr = this.LogOpr;
			
			#region Source Parent Composite Entities
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseExpHdrIdSource != null && existingCopies.Contains(this.EdCourseExpHdrIdSource))
				_tmp.EdCourseExpHdrIdSource = existingCopies[this.EdCourseExpHdrIdSource] as EdCourseExpHdr;
			else
				_tmp.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EdCoursePrfxIdSource != null && existingCopies.Contains(this.EdCoursePrfxIdSource))
				_tmp.EdCoursePrfxIdSource = existingCopies[this.EdCoursePrfxIdSource] as EdCoursePrfx;
			else
				_tmp.EdCoursePrfxIdSource = MakeCopyOf(this.EdCoursePrfxIdSource, existingCopies) as EdCoursePrfx;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseExpDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCourseExpDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseExpDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCourseExpDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseExpDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCourseExpDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCourseExpDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCourseExpDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseExpDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCourseExpDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCourseExpDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCourseExpDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCourseExpDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCourseExpDtl"/> object.
	/// </remarks>
	public class EdCourseExpDtlEventArgs : System.EventArgs
	{
		private EdCourseExpDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseExpDtlEventArgs class.
		///</summary>
		public EdCourseExpDtlEventArgs(EdCourseExpDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseExpDtlEventArgs class.
		///</summary>
		public EdCourseExpDtlEventArgs(EdCourseExpDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCourseExpDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCourseExpDtlColumn" />
		public EdCourseExpDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCourseExpDtl related events.
	///</summary>
	public delegate void EdCourseExpDtlEventHandler(object sender, EdCourseExpDtlEventArgs e);
	
	#region EdCourseExpDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCourseExpDtlComparer : System.Collections.Generic.IComparer<EdCourseExpDtl>
	{
		EdCourseExpDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseExpDtlComparer"/> class.
        /// </summary>
		public EdCourseExpDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseExpDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCourseExpDtlComparer(EdCourseExpDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCourseExpDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCourseExpDtl"/> to compare.</param>
        /// <param name="b">The second <c>EdCourseExpDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCourseExpDtl a, EdCourseExpDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCourseExpDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCourseExpDtl a, EdCourseExpDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCourseExpDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCourseExpDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCourseExpDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCourseExpDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlKey class.
		/// </summary>
		public EdCourseExpDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlKey class.
		/// </summary>
		public EdCourseExpDtlKey(EdCourseExpDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCourseExpDtlId = entity.EdCourseExpDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseExpDtlKey class.
		/// </summary>
		public EdCourseExpDtlKey(System.Decimal _edCourseExpDtlId)
		{
			#region Init Properties

			this.EdCourseExpDtlId = _edCourseExpDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCourseExpDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCourseExpDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCourseExpDtlId property
		private System.Decimal _edCourseExpDtlId;
		
		/// <summary>
		/// Gets or sets the EdCourseExpDtlId property.
		/// </summary>
		public System.Decimal EdCourseExpDtlId
		{
			get { return _edCourseExpDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCourseExpDtlId = value;
				
				_edCourseExpDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCourseExpDtlId = ( values["EdCourseExpDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCourseExpDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCourseExpDtlId", EdCourseExpDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCourseExpDtlId: {0}{1}",
								EdCourseExpDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCourseExpDtlColumn Enum
	
	/// <summary>
	/// Enumerate the EdCourseExpDtl columns.
	/// </summary>
	[Serializable]
	public enum EdCourseExpDtlColumn : int
	{
		/// <summary>
		/// EdCourseExpDtlId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_EXP_DTL_ID")]
		[ColumnEnum("ED_COURSE_EXP_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCourseExpDtlId = 1,
		/// <summary>
		/// EdCourseExpHdrId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_EXP_HDR_ID")]
		[ColumnEnum("ED_COURSE_EXP_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseExpHdrId = 2,
		/// <summary>
		/// RecType : 
		/// </summary>
		[EnumTextValue("REC_TYPE")]
		[ColumnEnum("REC_TYPE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RecType = 3,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 4,
		/// <summary>
		/// EdCoursePrfxId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_PRFX_ID")]
		[ColumnEnum("ED_COURSE_PRFX_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCoursePrfxId = 5,
		/// <summary>
		/// CrsNumber : 
		/// </summary>
		[EnumTextValue("CRS_NUMBER")]
		[ColumnEnum("CRS_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, true, 6)]
		CrsNumber = 6,
		/// <summary>
		/// EdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 7,
		/// <summary>
		/// MinCh : 
		/// </summary>
		[EnumTextValue("MIN_CH")]
		[ColumnEnum("MIN_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinCh = 8,
		/// <summary>
		/// MinMjrCh : 
		/// </summary>
		[EnumTextValue("MIN_MJR_CH")]
		[ColumnEnum("MIN_MJR_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinMjrCh = 9,
		/// <summary>
		/// MinCgpa : 
		/// </summary>
		[EnumTextValue("MIN_CGPA")]
		[ColumnEnum("MIN_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinCgpa = 10,
		/// <summary>
		/// MinMjrCgpa : 
		/// </summary>
		[EnumTextValue("MIN_MJR_CGPA")]
		[ColumnEnum("MIN_MJR_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinMjrCgpa = 11,
		/// <summary>
		/// LogOpr : 
		/// </summary>
		[EnumTextValue("LOG_OPR")]
		[ColumnEnum("LOG_OPR", typeof(System.String), System.Data.DbType.String, false, false, true, 5)]
		LogOpr = 12
	}//End enum

	#endregion EdCourseExpDtlColumn Enum

} // end namespace
