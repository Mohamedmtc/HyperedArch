
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScSchdlSlot.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_SCHDL_SLOT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScSchdlSlotBase : EntityBase, IScSchdlSlot, IEntityId<ScSchdlSlotKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScSchdlSlotEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScSchdlSlotEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScSchdlSlotEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScSchdlSlot> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScSchdlSlotEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScSchdlSlotEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScSchdlSlotBase"/> instance.
		///</summary>
		public ScSchdlSlotBase()
		{
			this.entityData = new ScSchdlSlotEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScSchdlSlotBase"/> instance.
		///</summary>
		///<param name="_scSchdlSlotId">Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر</param>
		///<param name="_scSchdlHdrId">New Group Schedule</param>
		///<param name="_dayDate">تاريخ يوم فعلى فى  اسبوع فى الجدول</param>
		///<param name="_gsCodeWeekDayId">يوم فى الاسبوع</param>
		///<param name="_scTchngSlotId">حصص اليوم الدراسي</param>
		///<param name="_edCourseId">المقرر</param>
		///<param name="_edCourseTopicId">مواضيع المقرر الراسي</param>
		///<param name="_edCodeCourseTeachingId">طريقة التدريس: مقرر أو موضوع مقرر</param>
		///<param name="_scCdeActvtyId">نشاط فى الجدول الدراسي</param>
		///<param name="_scBuildingId">المبنى</param>
		///<param name="_scHallId">القاعة</param>
		///<param name="_vacFlg">يوم اجازة</param>
		///<param name="_vacReason">اسم الاجازة او الحدث</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public ScSchdlSlotBase(System.Decimal _scSchdlSlotId, System.Decimal _scSchdlHdrId, 
			System.DateTime? _dayDate, System.Decimal _gsCodeWeekDayId, System.Decimal _scTchngSlotId, 
			System.Decimal? _edCourseId, System.Decimal? _edCourseTopicId, System.Decimal? _edCodeCourseTeachingId, 
			System.Decimal? _scCdeActvtyId, System.Decimal? _scBuildingId, System.Decimal? _scHallId, 
			System.Boolean _vacFlg, System.String _vacReason, System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			this.entityData = new ScSchdlSlotEntityData();
			this.backupData = null;

			this.ScSchdlSlotId = _scSchdlSlotId;
			this.ScSchdlHdrId = _scSchdlHdrId;
			this.DayDate = _dayDate;
			this.GsCodeWeekDayId = _gsCodeWeekDayId;
			this.ScTchngSlotId = _scTchngSlotId;
			this.EdCourseId = _edCourseId;
			this.EdCourseTopicId = _edCourseTopicId;
			this.EdCodeCourseTeachingId = _edCodeCourseTeachingId;
			this.ScCdeActvtyId = _scCdeActvtyId;
			this.ScBuildingId = _scBuildingId;
			this.ScHallId = _scHallId;
			this.VacFlg = _vacFlg;
			this.VacReason = _vacReason;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScSchdlSlot"/> instance.
		///</summary>
		///<param name="_scSchdlSlotId">Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر</param>
		///<param name="_scSchdlHdrId">New Group Schedule</param>
		///<param name="_dayDate">تاريخ يوم فعلى فى  اسبوع فى الجدول</param>
		///<param name="_gsCodeWeekDayId">يوم فى الاسبوع</param>
		///<param name="_scTchngSlotId">حصص اليوم الدراسي</param>
		///<param name="_edCourseId">المقرر</param>
		///<param name="_edCourseTopicId">مواضيع المقرر الراسي</param>
		///<param name="_edCodeCourseTeachingId">طريقة التدريس: مقرر أو موضوع مقرر</param>
		///<param name="_scCdeActvtyId">نشاط فى الجدول الدراسي</param>
		///<param name="_scBuildingId">المبنى</param>
		///<param name="_scHallId">القاعة</param>
		///<param name="_vacFlg">يوم اجازة</param>
		///<param name="_vacReason">اسم الاجازة او الحدث</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static ScSchdlSlot CreateScSchdlSlot(System.Decimal _scSchdlSlotId, System.Decimal _scSchdlHdrId, 
			System.DateTime? _dayDate, System.Decimal _gsCodeWeekDayId, System.Decimal _scTchngSlotId, 
			System.Decimal? _edCourseId, System.Decimal? _edCourseTopicId, System.Decimal? _edCodeCourseTeachingId, 
			System.Decimal? _scCdeActvtyId, System.Decimal? _scBuildingId, System.Decimal? _scHallId, 
			System.Boolean _vacFlg, System.String _vacReason, System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			ScSchdlSlot newScSchdlSlot = new ScSchdlSlot();
			newScSchdlSlot.ScSchdlSlotId = _scSchdlSlotId;
			newScSchdlSlot.ScSchdlHdrId = _scSchdlHdrId;
			newScSchdlSlot.DayDate = _dayDate;
			newScSchdlSlot.GsCodeWeekDayId = _gsCodeWeekDayId;
			newScSchdlSlot.ScTchngSlotId = _scTchngSlotId;
			newScSchdlSlot.EdCourseId = _edCourseId;
			newScSchdlSlot.EdCourseTopicId = _edCourseTopicId;
			newScSchdlSlot.EdCodeCourseTeachingId = _edCodeCourseTeachingId;
			newScSchdlSlot.ScCdeActvtyId = _scCdeActvtyId;
			newScSchdlSlot.ScBuildingId = _scBuildingId;
			newScSchdlSlot.ScHallId = _scHallId;
			newScSchdlSlot.VacFlg = _vacFlg;
			newScSchdlSlot.VacReason = _vacReason;
			newScSchdlSlot.LastDate = _lastDate;
			newScSchdlSlot.SeUserId = _seUserId;
			return newScSchdlSlot;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScSchdlSlotId property. 
		///		Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScSchdlSlotId
		{
			get
			{
				return this.entityData.ScSchdlSlotId; 
			}
			
			set
			{
				if (this.entityData.ScSchdlSlotId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.ScSchdlSlotId, this.entityData.ScSchdlSlotId);
				this.entityData.ScSchdlSlotId = value;
				this.EntityId.ScSchdlSlotId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.ScSchdlSlotId, this.entityData.ScSchdlSlotId);
				OnPropertyChanged("ScSchdlSlotId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_SCHDL_SLOT_ID property.
		///		Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر
		/// </summary>
		/// <remarks>This is the original value of the SC_SCHDL_SLOT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScSchdlSlotId
		{
			get { return this.entityData.OriginalScSchdlSlotId; }
			set { this.entityData.OriginalScSchdlSlotId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScSchdlHdrId property. 
		///		New Group Schedule
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"New Group Schedule"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScSchdlHdrId
		{
			get
			{
				return this.entityData.ScSchdlHdrId; 
			}
			
			set
			{
				if (this.entityData.ScSchdlHdrId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.ScSchdlHdrId, this.entityData.ScSchdlHdrId);
				this.entityData.ScSchdlHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.ScSchdlHdrId, this.entityData.ScSchdlHdrId);
				OnPropertyChanged("ScSchdlHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DayDate property. 
		///		تاريخ يوم فعلى فى  اسبوع فى الجدول
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDayDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ يوم فعلى فى  اسبوع فى الجدول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DayDate
		{
			get
			{
				return this.entityData.DayDate; 
			}
			
			set
			{
				if (this.entityData.DayDate == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.DayDate, this.entityData.DayDate);
				this.entityData.DayDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.DayDate, this.entityData.DayDate);
				OnPropertyChanged("DayDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeWeekDayId property. 
		///		يوم فى الاسبوع
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"يوم فى الاسبوع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeWeekDayId
		{
			get
			{
				return this.entityData.GsCodeWeekDayId; 
			}
			
			set
			{
				if (this.entityData.GsCodeWeekDayId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.GsCodeWeekDayId, this.entityData.GsCodeWeekDayId);
				this.entityData.GsCodeWeekDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.GsCodeWeekDayId, this.entityData.GsCodeWeekDayId);
				OnPropertyChanged("GsCodeWeekDayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScTchngSlotId property. 
		///		حصص اليوم الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"حصص اليوم الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScTchngSlotId
		{
			get
			{
				return this.entityData.ScTchngSlotId; 
			}
			
			set
			{
				if (this.entityData.ScTchngSlotId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.ScTchngSlotId, this.entityData.ScTchngSlotId);
				this.entityData.ScTchngSlotId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.ScTchngSlotId, this.entityData.ScTchngSlotId);
				OnPropertyChanged("ScTchngSlotId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		المقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseTopicId property. 
		///		مواضيع المقرر الراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseTopicIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مواضيع المقرر الراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseTopicId
		{
			get
			{
				return this.entityData.EdCourseTopicId; 
			}
			
			set
			{
				if (this.entityData.EdCourseTopicId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.EdCourseTopicId, this.entityData.EdCourseTopicId);
				this.entityData.EdCourseTopicId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.EdCourseTopicId, this.entityData.EdCourseTopicId);
				OnPropertyChanged("EdCourseTopicId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseTeachingId property. 
		///		طريقة التدريس: مقرر أو موضوع مقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseTeachingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"طريقة التدريس: مقرر أو موضوع مقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseTeachingId
		{
			get
			{
				return this.entityData.EdCodeCourseTeachingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseTeachingId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.EdCodeCourseTeachingId, this.entityData.EdCodeCourseTeachingId);
				this.entityData.EdCodeCourseTeachingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.EdCodeCourseTeachingId, this.entityData.EdCodeCourseTeachingId);
				OnPropertyChanged("EdCodeCourseTeachingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScCdeActvtyId property. 
		///		نشاط فى الجدول الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScCdeActvtyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نشاط فى الجدول الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScCdeActvtyId
		{
			get
			{
				return this.entityData.ScCdeActvtyId; 
			}
			
			set
			{
				if (this.entityData.ScCdeActvtyId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.ScCdeActvtyId, this.entityData.ScCdeActvtyId);
				this.entityData.ScCdeActvtyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.ScCdeActvtyId, this.entityData.ScCdeActvtyId);
				OnPropertyChanged("ScCdeActvtyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		المبنى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المبنى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		القاعة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"القاعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VacFlg property. 
		///		يوم اجازة
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"يوم اجازة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean VacFlg
		{
			get
			{
				return this.entityData.VacFlg; 
			}
			
			set
			{
				if (this.entityData.VacFlg == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.VacFlg, this.entityData.VacFlg);
				this.entityData.VacFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.VacFlg, this.entityData.VacFlg);
				OnPropertyChanged("VacFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VacReason property. 
		///		اسم الاجازة او الحدث
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم الاجازة او الحدث"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String VacReason
		{
			get
			{
				return this.entityData.VacReason; 
			}
			
			set
			{
				if (this.entityData.VacReason == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.VacReason, this.entityData.VacReason);
				this.entityData.VacReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.VacReason, this.entityData.VacReason);
				OnPropertyChanged("VacReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(ScSchdlSlotColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlSlotColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseTeaching"/>.
		/// </summary>
		/// <value>The source EdCodeCourseTeaching for EdCodeCourseTeachingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseTeaching EdCodeCourseTeachingIdSource
      	{
            get { return entityData.EdCodeCourseTeachingIdSource; }
            set { entityData.EdCodeCourseTeachingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseTopic"/>.
		/// </summary>
		/// <value>The source EdCourseTopic for EdCourseTopicId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourseTopic EdCourseTopicIdSource
      	{
            get { return entityData.EdCourseTopicIdSource; }
            set { entityData.EdCourseTopicIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for GsCodeWeekDayId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeWeekDay GsCodeWeekDayIdSource
      	{
            get { return entityData.GsCodeWeekDayIdSource; }
            set { entityData.GsCodeWeekDayIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScCdeActvty"/>.
		/// </summary>
		/// <value>The source ScCdeActvty for ScCdeActvtyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScCdeActvty ScCdeActvtyIdSource
      	{
            get { return entityData.ScCdeActvtyIdSource; }
            set { entityData.ScCdeActvtyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlHdr"/>.
		/// </summary>
		/// <value>The source ScSchdlHdr for ScSchdlHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScSchdlHdr ScSchdlHdrIdSource
      	{
            get { return entityData.ScSchdlHdrIdSource; }
            set { entityData.ScSchdlHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScTchngSlot ScTchngSlotIdSource
      	{
            get { return entityData.ScTchngSlotIdSource; }
            set { entityData.ScTchngSlotIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudAbsence objects
		///	which are related to this object through the relation FK_ED_STUD_ABSENCE_SC_SCHDL_SLOT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudAbsence> EdStudAbsenceCollection
		{
			get { return entityData.EdStudAbsenceCollection; }
			set { entityData.EdStudAbsenceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScSchdlSlotStaff objects
		///	which are related to this object through the relation FK_SC_SCHDL_SLOT_STAFF_SC_SCHDL_SLOT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSchdlSlotStaff> ScSchdlSlotStaffCollection
		{
			get { return entityData.ScSchdlSlotStaffCollection; }
			set { entityData.ScSchdlSlotStaffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudLateness objects
		///	which are related to this object through the relation FK_Ed_Stud_Lateness_SC_SCHDL_SLOT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudLateness> EdStudLatenessCollection
		{
			get { return entityData.EdStudLatenessCollection; }
			set { entityData.EdStudLatenessCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VacReason", "Vac Reason", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_SCHDL_SLOT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_SCHDL_SLOT_ID", "SC_SCHDL_HDR_ID", "DAY_DATE", "GS_CODE_WEEK_DAY_ID", "SC_TCHNG_SLOT_ID", "ED_COURSE_ID", "ED_COURSE_TOPIC_ID", "ED_CODE_COURSE_TEACHING_ID", "SC_CDE_ACTVTY_ID", "SC_BUILDING_ID", "SC_HALL_ID", "VAC_FLG", "VAC_REASON", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScSchdlSlotEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScSchdlSlot) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScSchdlSlot>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScSchdlSlot);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScSchdlSlot Entity 
		///</summary>
		protected virtual ScSchdlSlot Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScSchdlSlot copy = new ScSchdlSlot();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScSchdlSlotId = this.ScSchdlSlotId;
					copy.OriginalScSchdlSlotId = this.OriginalScSchdlSlotId;
				copy.ScSchdlHdrId = this.ScSchdlHdrId;
				copy.DayDate = this.DayDate;
				copy.GsCodeWeekDayId = this.GsCodeWeekDayId;
				copy.ScTchngSlotId = this.ScTchngSlotId;
				copy.EdCourseId = this.EdCourseId;
				copy.EdCourseTopicId = this.EdCourseTopicId;
				copy.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
				copy.ScCdeActvtyId = this.ScCdeActvtyId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ScHallId = this.ScHallId;
				copy.VacFlg = this.VacFlg;
				copy.VacReason = this.VacReason;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.EdCodeCourseTeachingIdSource != null && existingCopies.Contains(this.EdCodeCourseTeachingIdSource))
				copy.EdCodeCourseTeachingIdSource = existingCopies[this.EdCodeCourseTeachingIdSource] as EdCodeCourseTeaching;
			else
				copy.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource, existingCopies) as EdCodeCourseTeaching;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseTopicIdSource != null && existingCopies.Contains(this.EdCourseTopicIdSource))
				copy.EdCourseTopicIdSource = existingCopies[this.EdCourseTopicIdSource] as EdCourseTopic;
			else
				copy.EdCourseTopicIdSource = MakeCopyOf(this.EdCourseTopicIdSource, existingCopies) as EdCourseTopic;
			if (this.GsCodeWeekDayIdSource != null && existingCopies.Contains(this.GsCodeWeekDayIdSource))
				copy.GsCodeWeekDayIdSource = existingCopies[this.GsCodeWeekDayIdSource] as GsCodeWeekDay;
			else
				copy.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScCdeActvtyIdSource != null && existingCopies.Contains(this.ScCdeActvtyIdSource))
				copy.ScCdeActvtyIdSource = existingCopies[this.ScCdeActvtyIdSource] as ScCdeActvty;
			else
				copy.ScCdeActvtyIdSource = MakeCopyOf(this.ScCdeActvtyIdSource, existingCopies) as ScCdeActvty;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScSchdlHdrIdSource != null && existingCopies.Contains(this.ScSchdlHdrIdSource))
				copy.ScSchdlHdrIdSource = existingCopies[this.ScSchdlHdrIdSource] as ScSchdlHdr;
			else
				copy.ScSchdlHdrIdSource = MakeCopyOf(this.ScSchdlHdrIdSource, existingCopies) as ScSchdlHdr;
			if (this.ScTchngSlotIdSource != null && existingCopies.Contains(this.ScTchngSlotIdSource))
				copy.ScTchngSlotIdSource = existingCopies[this.ScTchngSlotIdSource] as ScTchngSlot;
			else
				copy.ScTchngSlotIdSource = MakeCopyOf(this.ScTchngSlotIdSource, existingCopies) as ScTchngSlot;
		
			//deep copy nested objects
			copy.EdStudAbsenceCollection = (TList<EdStudAbsence>) MakeCopyOf(this.EdStudAbsenceCollection, existingCopies); 
			copy.ScSchdlSlotStaffCollection = (TList<ScSchdlSlotStaff>) MakeCopyOf(this.ScSchdlSlotStaffCollection, existingCopies); 
			copy.EdStudLatenessCollection = (TList<EdStudLateness>) MakeCopyOf(this.EdStudLatenessCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScSchdlSlot Entity 
		///</summary>
		public virtual ScSchdlSlot Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScSchdlSlot Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScSchdlSlot DeepCopy()
		{
			return EntityHelper.Clone<ScSchdlSlot>(this as ScSchdlSlot);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScSchdlSlotEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScSchdlSlotEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScSchdlSlotEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScSchdlSlotColumn column)
		{
			switch(column)
			{
					case ScSchdlSlotColumn.ScSchdlSlotId:
					return entityData.ScSchdlSlotId != _originalData.ScSchdlSlotId;
					case ScSchdlSlotColumn.ScSchdlHdrId:
					return entityData.ScSchdlHdrId != _originalData.ScSchdlHdrId;
					case ScSchdlSlotColumn.DayDate:
					return entityData.DayDate != _originalData.DayDate;
					case ScSchdlSlotColumn.GsCodeWeekDayId:
					return entityData.GsCodeWeekDayId != _originalData.GsCodeWeekDayId;
					case ScSchdlSlotColumn.ScTchngSlotId:
					return entityData.ScTchngSlotId != _originalData.ScTchngSlotId;
					case ScSchdlSlotColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case ScSchdlSlotColumn.EdCourseTopicId:
					return entityData.EdCourseTopicId != _originalData.EdCourseTopicId;
					case ScSchdlSlotColumn.EdCodeCourseTeachingId:
					return entityData.EdCodeCourseTeachingId != _originalData.EdCodeCourseTeachingId;
					case ScSchdlSlotColumn.ScCdeActvtyId:
					return entityData.ScCdeActvtyId != _originalData.ScCdeActvtyId;
					case ScSchdlSlotColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case ScSchdlSlotColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case ScSchdlSlotColumn.VacFlg:
					return entityData.VacFlg != _originalData.VacFlg;
					case ScSchdlSlotColumn.VacReason:
					return entityData.VacReason != _originalData.VacReason;
					case ScSchdlSlotColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case ScSchdlSlotColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScSchdlSlotColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScSchdlSlotId != _originalData.ScSchdlSlotId;
			result = result || entityData.ScSchdlHdrId != _originalData.ScSchdlHdrId;
			result = result || entityData.DayDate != _originalData.DayDate;
			result = result || entityData.GsCodeWeekDayId != _originalData.GsCodeWeekDayId;
			result = result || entityData.ScTchngSlotId != _originalData.ScTchngSlotId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EdCourseTopicId != _originalData.EdCourseTopicId;
			result = result || entityData.EdCodeCourseTeachingId != _originalData.EdCodeCourseTeachingId;
			result = result || entityData.ScCdeActvtyId != _originalData.ScCdeActvtyId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.VacFlg != _originalData.VacFlg;
			result = result || entityData.VacReason != _originalData.VacReason;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a ScSchdlSlot Entity with the original data.
		///</summary>
		public ScSchdlSlot GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScSchdlSlot(
				_originalData.ScSchdlSlotId,
				_originalData.ScSchdlHdrId,
				_originalData.DayDate,
				_originalData.GsCodeWeekDayId,
				_originalData.ScTchngSlotId,
				_originalData.EdCourseId,
				_originalData.EdCourseTopicId,
				_originalData.EdCodeCourseTeachingId,
				_originalData.ScCdeActvtyId,
				_originalData.ScBuildingId,
				_originalData.ScHallId,
				_originalData.VacFlg,
				_originalData.VacReason,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (ScSchdlSlot)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScSchdlSlotBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScSchdlSlotBase)
				return ValueEquals(this, (ScSchdlSlotBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScSchdlSlotBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScSchdlSlotId.GetHashCode() ^ 
					this.ScSchdlHdrId.GetHashCode() ^ 
					((this.DayDate == null) ? string.Empty : this.DayDate.ToString()).GetHashCode() ^ 
					this.GsCodeWeekDayId.GetHashCode() ^ 
					this.ScTchngSlotId.GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.EdCourseTopicId == null) ? string.Empty : this.EdCourseTopicId.ToString()).GetHashCode() ^ 
					((this.EdCodeCourseTeachingId == null) ? string.Empty : this.EdCodeCourseTeachingId.ToString()).GetHashCode() ^ 
					((this.ScCdeActvtyId == null) ? string.Empty : this.ScCdeActvtyId.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					this.VacFlg.GetHashCode() ^ 
					((this.VacReason == null) ? string.Empty : this.VacReason.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScSchdlSlotBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScSchdlSlotBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScSchdlSlotBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScSchdlSlotBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScSchdlSlotBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScSchdlSlotBase Object1, ScSchdlSlotBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScSchdlSlotId != Object2.ScSchdlSlotId)
				equal = false;
			if (Object1.ScSchdlHdrId != Object2.ScSchdlHdrId)
				equal = false;
			if ( Object1.DayDate != null && Object2.DayDate != null )
			{
				if (Object1.DayDate != Object2.DayDate)
					equal = false;
			}
			else if (Object1.DayDate == null ^ Object2.DayDate == null )
			{
				equal = false;
			}
			if (Object1.GsCodeWeekDayId != Object2.GsCodeWeekDayId)
				equal = false;
			if (Object1.ScTchngSlotId != Object2.ScTchngSlotId)
				equal = false;
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseTopicId != null && Object2.EdCourseTopicId != null )
			{
				if (Object1.EdCourseTopicId != Object2.EdCourseTopicId)
					equal = false;
			}
			else if (Object1.EdCourseTopicId == null ^ Object2.EdCourseTopicId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeCourseTeachingId != null && Object2.EdCodeCourseTeachingId != null )
			{
				if (Object1.EdCodeCourseTeachingId != Object2.EdCodeCourseTeachingId)
					equal = false;
			}
			else if (Object1.EdCodeCourseTeachingId == null ^ Object2.EdCodeCourseTeachingId == null )
			{
				equal = false;
			}
			if ( Object1.ScCdeActvtyId != null && Object2.ScCdeActvtyId != null )
			{
				if (Object1.ScCdeActvtyId != Object2.ScCdeActvtyId)
					equal = false;
			}
			else if (Object1.ScCdeActvtyId == null ^ Object2.ScCdeActvtyId == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if (Object1.VacFlg != Object2.VacFlg)
				equal = false;
			if ( Object1.VacReason != null && Object2.VacReason != null )
			{
				if (Object1.VacReason != Object2.VacReason)
					equal = false;
			}
			else if (Object1.VacReason == null ^ Object2.VacReason == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScSchdlSlotBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScSchdlSlotComparer GetComparer()
        {
            return new ScSchdlSlotComparer();
        }
        */

        // Comparer delegates back to ScSchdlSlot
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScSchdlSlot rhs, ScSchdlSlotColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScSchdlSlotColumn.ScSchdlSlotId:
            		return this.ScSchdlSlotId.CompareTo(rhs.ScSchdlSlotId);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.ScSchdlHdrId:
            		return this.ScSchdlHdrId.CompareTo(rhs.ScSchdlHdrId);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.DayDate:
            		return this.DayDate.Value.CompareTo(rhs.DayDate.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.GsCodeWeekDayId:
            		return this.GsCodeWeekDayId.CompareTo(rhs.GsCodeWeekDayId);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.ScTchngSlotId:
            		return this.ScTchngSlotId.CompareTo(rhs.ScTchngSlotId);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.EdCourseTopicId:
            		return this.EdCourseTopicId.Value.CompareTo(rhs.EdCourseTopicId.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.EdCodeCourseTeachingId:
            		return this.EdCodeCourseTeachingId.Value.CompareTo(rhs.EdCodeCourseTeachingId.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.ScCdeActvtyId:
            		return this.ScCdeActvtyId.Value.CompareTo(rhs.ScCdeActvtyId.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.VacFlg:
            		return this.VacFlg.CompareTo(rhs.VacFlg);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.VacReason:
            		return this.VacReason.CompareTo(rhs.VacReason);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case ScSchdlSlotColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScSchdlSlotKey> Members
		
		// member variable for the EntityId property
		private ScSchdlSlotKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScSchdlSlotKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScSchdlSlotKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScSchdlSlot")
					.Append("|").Append( this.ScSchdlSlotId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- ScSchdlSlotId: {0}{15}- ScSchdlHdrId: {1}{15}- DayDate: {2}{15}- GsCodeWeekDayId: {3}{15}- ScTchngSlotId: {4}{15}- EdCourseId: {5}{15}- EdCourseTopicId: {6}{15}- EdCodeCourseTeachingId: {7}{15}- ScCdeActvtyId: {8}{15}- ScBuildingId: {9}{15}- ScHallId: {10}{15}- VacFlg: {11}{15}- VacReason: {12}{15}- LastDate: {13}{15}- SeUserId: {14}{15}{17}", 
				this.ScSchdlSlotId,
				this.ScSchdlHdrId,
				(this.DayDate == null) ? string.Empty : this.DayDate.ToString(),
				this.GsCodeWeekDayId,
				this.ScTchngSlotId,
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.EdCourseTopicId == null) ? string.Empty : this.EdCourseTopicId.ToString(),
				(this.EdCodeCourseTeachingId == null) ? string.Empty : this.EdCodeCourseTeachingId.ToString(),
				(this.ScCdeActvtyId == null) ? string.Empty : this.ScCdeActvtyId.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				this.VacFlg,
				(this.VacReason == null) ? string.Empty : this.VacReason.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_SCHDL_SLOT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScSchdlSlotEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_SCHDL_SLOT_ID : Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_SCHDL_SLOT"</remarks>
		public System.Decimal ScSchdlSlotId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScSchdlSlotId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_SCHDL_HDR_ID : New Group Schedule
		/// </summary>
		public System.Decimal		  ScSchdlHdrId = 0.0m;
		
		/// <summary>
		/// DAY_DATE : تاريخ يوم فعلى فى  اسبوع فى الجدول
		/// </summary>
		public System.DateTime?		  DayDate = null;
		
		/// <summary>
		/// GS_CODE_WEEK_DAY_ID : يوم فى الاسبوع
		/// </summary>
		public System.Decimal		  GsCodeWeekDayId = 0.0m;
		
		/// <summary>
		/// SC_TCHNG_SLOT_ID : حصص اليوم الدراسي
		/// </summary>
		public System.Decimal		  ScTchngSlotId = 0.0m;
		
		/// <summary>
		/// ED_COURSE_ID : المقرر
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// ED_COURSE_TOPIC_ID : مواضيع المقرر الراسي
		/// </summary>
		public System.Decimal?		  EdCourseTopicId = null;
		
		/// <summary>
		/// ED_CODE_COURSE_TEACHING_ID : طريقة التدريس: مقرر أو موضوع مقرر
		/// </summary>
		public System.Decimal?		  EdCodeCourseTeachingId = null;
		
		/// <summary>
		/// SC_CDE_ACTVTY_ID : نشاط فى الجدول الدراسي
		/// </summary>
		public System.Decimal?		  ScCdeActvtyId = null;
		
		/// <summary>
		/// SC_BUILDING_ID : المبنى
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// SC_HALL_ID : القاعة
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// VAC_FLG : يوم اجازة
		/// </summary>
		public System.Boolean		  VacFlg = false;
		
		/// <summary>
		/// VAC_REASON : اسم الاجازة او الحدث
		/// </summary>
		public System.String		  VacReason = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeCourseTeaching _edCodeCourseTeachingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseTeaching"/>.
		/// </summary>
		/// <value>The source EdCodeCourseTeaching for EdCodeCourseTeachingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseTeaching EdCodeCourseTeachingIdSource
      	{
            get { return this._edCodeCourseTeachingIdSource; }
            set { this._edCodeCourseTeachingIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdCourseTopic _edCourseTopicIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseTopic"/>.
		/// </summary>
		/// <value>The source EdCourseTopic for EdCourseTopicId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourseTopic EdCourseTopicIdSource
      	{
            get { return this._edCourseTopicIdSource; }
            set { this._edCourseTopicIdSource = value; }
      	}
		private GsCodeWeekDay _gsCodeWeekDayIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for GsCodeWeekDayId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeWeekDay GsCodeWeekDayIdSource
      	{
            get { return this._gsCodeWeekDayIdSource; }
            set { this._gsCodeWeekDayIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScCdeActvty _scCdeActvtyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScCdeActvty"/>.
		/// </summary>
		/// <value>The source ScCdeActvty for ScCdeActvtyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScCdeActvty ScCdeActvtyIdSource
      	{
            get { return this._scCdeActvtyIdSource; }
            set { this._scCdeActvtyIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		private ScSchdlHdr _scSchdlHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlHdr"/>.
		/// </summary>
		/// <value>The source ScSchdlHdr for ScSchdlHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScSchdlHdr ScSchdlHdrIdSource
      	{
            get { return this._scSchdlHdrIdSource; }
            set { this._scSchdlHdrIdSource = value; }
      	}
		private ScTchngSlot _scTchngSlotIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScTchngSlot ScTchngSlotIdSource
      	{
            get { return this._scTchngSlotIdSource; }
            set { this._scTchngSlotIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudAbsenceCollection
		
		private TList<EdStudAbsence> _edStudAbsenceScSchdlSlotId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudAbsenceScSchdlSlotId
		/// </summary>
		
		public TList<EdStudAbsence> EdStudAbsenceCollection
		{
			get
			{
				if (_edStudAbsenceScSchdlSlotId == null)
				{
				_edStudAbsenceScSchdlSlotId = new TList<EdStudAbsence>();
				}
	
				return _edStudAbsenceScSchdlSlotId;
			}
			set { _edStudAbsenceScSchdlSlotId = value; }
		}
		
		#endregion

		#region ScSchdlSlotStaffCollection
		
		private TList<ScSchdlSlotStaff> _scSchdlSlotStaffScSchdlSlotId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSchdlSlotStaffScSchdlSlotId
		/// </summary>
		
		public TList<ScSchdlSlotStaff> ScSchdlSlotStaffCollection
		{
			get
			{
				if (_scSchdlSlotStaffScSchdlSlotId == null)
				{
				_scSchdlSlotStaffScSchdlSlotId = new TList<ScSchdlSlotStaff>();
				}
	
				return _scSchdlSlotStaffScSchdlSlotId;
			}
			set { _scSchdlSlotStaffScSchdlSlotId = value; }
		}
		
		#endregion

		#region EdStudLatenessCollection
		
		private TList<EdStudLateness> _edStudLatenessScSchdlSlotId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudLatenessScSchdlSlotId
		/// </summary>
		
		public TList<EdStudLateness> EdStudLatenessCollection
		{
			get
			{
				if (_edStudLatenessScSchdlSlotId == null)
				{
				_edStudLatenessScSchdlSlotId = new TList<EdStudLateness>();
				}
	
				return _edStudLatenessScSchdlSlotId;
			}
			set { _edStudLatenessScSchdlSlotId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScSchdlSlotEntityData _tmp = new ScSchdlSlotEntityData();
						
			_tmp.ScSchdlSlotId = this.ScSchdlSlotId;
			_tmp.OriginalScSchdlSlotId = this.OriginalScSchdlSlotId;
			
			_tmp.ScSchdlHdrId = this.ScSchdlHdrId;
			_tmp.DayDate = this.DayDate;
			_tmp.GsCodeWeekDayId = this.GsCodeWeekDayId;
			_tmp.ScTchngSlotId = this.ScTchngSlotId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCourseTopicId = this.EdCourseTopicId;
			_tmp.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
			_tmp.ScCdeActvtyId = this.ScCdeActvtyId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.VacFlg = this.VacFlg;
			_tmp.VacReason = this.VacReason;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseTeachingIdSource != null)
				_tmp.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource) as EdCodeCourseTeaching;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdCourseTopicIdSource != null)
				_tmp.EdCourseTopicIdSource = MakeCopyOf(this.EdCourseTopicIdSource) as EdCourseTopic;
			if (this.GsCodeWeekDayIdSource != null)
				_tmp.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource) as GsCodeWeekDay;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScCdeActvtyIdSource != null)
				_tmp.ScCdeActvtyIdSource = MakeCopyOf(this.ScCdeActvtyIdSource) as ScCdeActvty;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			if (this.ScSchdlHdrIdSource != null)
				_tmp.ScSchdlHdrIdSource = MakeCopyOf(this.ScSchdlHdrIdSource) as ScSchdlHdr;
			if (this.ScTchngSlotIdSource != null)
				_tmp.ScTchngSlotIdSource = MakeCopyOf(this.ScTchngSlotIdSource) as ScTchngSlot;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudAbsenceScSchdlSlotId != null)
				_tmp.EdStudAbsenceCollection = (TList<EdStudAbsence>) MakeCopyOf(this.EdStudAbsenceCollection); 
			if (this._scSchdlSlotStaffScSchdlSlotId != null)
				_tmp.ScSchdlSlotStaffCollection = (TList<ScSchdlSlotStaff>) MakeCopyOf(this.ScSchdlSlotStaffCollection); 
			if (this._edStudLatenessScSchdlSlotId != null)
				_tmp.EdStudLatenessCollection = (TList<EdStudLateness>) MakeCopyOf(this.EdStudLatenessCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScSchdlSlotEntityData _tmp = new ScSchdlSlotEntityData();
						
			_tmp.ScSchdlSlotId = this.ScSchdlSlotId;
			_tmp.OriginalScSchdlSlotId = this.OriginalScSchdlSlotId;
			
			_tmp.ScSchdlHdrId = this.ScSchdlHdrId;
			_tmp.DayDate = this.DayDate;
			_tmp.GsCodeWeekDayId = this.GsCodeWeekDayId;
			_tmp.ScTchngSlotId = this.ScTchngSlotId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCourseTopicId = this.EdCourseTopicId;
			_tmp.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
			_tmp.ScCdeActvtyId = this.ScCdeActvtyId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.VacFlg = this.VacFlg;
			_tmp.VacReason = this.VacReason;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseTeachingIdSource != null && existingCopies.Contains(this.EdCodeCourseTeachingIdSource))
				_tmp.EdCodeCourseTeachingIdSource = existingCopies[this.EdCodeCourseTeachingIdSource] as EdCodeCourseTeaching;
			else
				_tmp.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource, existingCopies) as EdCodeCourseTeaching;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseTopicIdSource != null && existingCopies.Contains(this.EdCourseTopicIdSource))
				_tmp.EdCourseTopicIdSource = existingCopies[this.EdCourseTopicIdSource] as EdCourseTopic;
			else
				_tmp.EdCourseTopicIdSource = MakeCopyOf(this.EdCourseTopicIdSource, existingCopies) as EdCourseTopic;
			if (this.GsCodeWeekDayIdSource != null && existingCopies.Contains(this.GsCodeWeekDayIdSource))
				_tmp.GsCodeWeekDayIdSource = existingCopies[this.GsCodeWeekDayIdSource] as GsCodeWeekDay;
			else
				_tmp.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScCdeActvtyIdSource != null && existingCopies.Contains(this.ScCdeActvtyIdSource))
				_tmp.ScCdeActvtyIdSource = existingCopies[this.ScCdeActvtyIdSource] as ScCdeActvty;
			else
				_tmp.ScCdeActvtyIdSource = MakeCopyOf(this.ScCdeActvtyIdSource, existingCopies) as ScCdeActvty;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScSchdlHdrIdSource != null && existingCopies.Contains(this.ScSchdlHdrIdSource))
				_tmp.ScSchdlHdrIdSource = existingCopies[this.ScSchdlHdrIdSource] as ScSchdlHdr;
			else
				_tmp.ScSchdlHdrIdSource = MakeCopyOf(this.ScSchdlHdrIdSource, existingCopies) as ScSchdlHdr;
			if (this.ScTchngSlotIdSource != null && existingCopies.Contains(this.ScTchngSlotIdSource))
				_tmp.ScTchngSlotIdSource = existingCopies[this.ScTchngSlotIdSource] as ScTchngSlot;
			else
				_tmp.ScTchngSlotIdSource = MakeCopyOf(this.ScTchngSlotIdSource, existingCopies) as ScTchngSlot;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudAbsenceCollection = (TList<EdStudAbsence>) MakeCopyOf(this.EdStudAbsenceCollection, existingCopies); 
			_tmp.ScSchdlSlotStaffCollection = (TList<ScSchdlSlotStaff>) MakeCopyOf(this.ScSchdlSlotStaffCollection, existingCopies); 
			_tmp.EdStudLatenessCollection = (TList<EdStudLateness>) MakeCopyOf(this.EdStudLatenessCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlSlotColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScSchdlSlotColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlSlotColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScSchdlSlotColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlSlotColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScSchdlSlotColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScSchdlSlotEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScSchdlSlotEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlSlotColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScSchdlSlotColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScSchdlSlotEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScSchdlSlotEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScSchdlSlotEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScSchdlSlot"/> object.
	/// </remarks>
	public class ScSchdlSlotEventArgs : System.EventArgs
	{
		private ScSchdlSlotColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScSchdlSlotEventArgs class.
		///</summary>
		public ScSchdlSlotEventArgs(ScSchdlSlotColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScSchdlSlotEventArgs class.
		///</summary>
		public ScSchdlSlotEventArgs(ScSchdlSlotColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScSchdlSlotColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScSchdlSlotColumn" />
		public ScSchdlSlotColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScSchdlSlot related events.
	///</summary>
	public delegate void ScSchdlSlotEventHandler(object sender, ScSchdlSlotEventArgs e);
	
	#region ScSchdlSlotComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScSchdlSlotComparer : System.Collections.Generic.IComparer<ScSchdlSlot>
	{
		ScSchdlSlotColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScSchdlSlotComparer"/> class.
        /// </summary>
		public ScSchdlSlotComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScSchdlSlotComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScSchdlSlotComparer(ScSchdlSlotColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScSchdlSlot"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScSchdlSlot"/> to compare.</param>
        /// <param name="b">The second <c>ScSchdlSlot</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScSchdlSlot a, ScSchdlSlot b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScSchdlSlot entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScSchdlSlot a, ScSchdlSlot b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScSchdlSlotColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScSchdlSlotKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScSchdlSlot"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScSchdlSlotKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotKey class.
		/// </summary>
		public ScSchdlSlotKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotKey class.
		/// </summary>
		public ScSchdlSlotKey(ScSchdlSlotBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScSchdlSlotId = entity.ScSchdlSlotId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScSchdlSlotKey class.
		/// </summary>
		public ScSchdlSlotKey(System.Decimal _scSchdlSlotId)
		{
			#region Init Properties

			this.ScSchdlSlotId = _scSchdlSlotId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScSchdlSlotBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScSchdlSlotBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScSchdlSlotId property
		private System.Decimal _scSchdlSlotId;
		
		/// <summary>
		/// Gets or sets the ScSchdlSlotId property.
		/// </summary>
		public System.Decimal ScSchdlSlotId
		{
			get { return _scSchdlSlotId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScSchdlSlotId = value;
				
				_scSchdlSlotId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScSchdlSlotId = ( values["ScSchdlSlotId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScSchdlSlotId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScSchdlSlotId", ScSchdlSlotId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScSchdlSlotId: {0}{1}",
								ScSchdlSlotId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScSchdlSlotColumn Enum
	
	/// <summary>
	/// Enumerate the ScSchdlSlot columns.
	/// </summary>
	[Serializable]
	public enum ScSchdlSlotColumn : int
	{
		/// <summary>
		/// ScSchdlSlotId : Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر
		/// </summary>
		[EnumTextValue("SC_SCHDL_SLOT_ID")]
		[ColumnEnum("SC_SCHDL_SLOT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScSchdlSlotId = 1,
		/// <summary>
		/// ScSchdlHdrId : New Group Schedule
		/// </summary>
		[EnumTextValue("SC_SCHDL_HDR_ID")]
		[ColumnEnum("SC_SCHDL_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScSchdlHdrId = 2,
		/// <summary>
		/// DayDate : تاريخ يوم فعلى فى  اسبوع فى الجدول
		/// </summary>
		[EnumTextValue("DAY_DATE")]
		[ColumnEnum("DAY_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		DayDate = 3,
		/// <summary>
		/// GsCodeWeekDayId : يوم فى الاسبوع
		/// </summary>
		[EnumTextValue("GS_CODE_WEEK_DAY_ID")]
		[ColumnEnum("GS_CODE_WEEK_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeWeekDayId = 4,
		/// <summary>
		/// ScTchngSlotId : حصص اليوم الدراسي
		/// </summary>
		[EnumTextValue("SC_TCHNG_SLOT_ID")]
		[ColumnEnum("SC_TCHNG_SLOT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScTchngSlotId = 5,
		/// <summary>
		/// EdCourseId : المقرر
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 6,
		/// <summary>
		/// EdCourseTopicId : مواضيع المقرر الراسي
		/// </summary>
		[EnumTextValue("ED_COURSE_TOPIC_ID")]
		[ColumnEnum("ED_COURSE_TOPIC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseTopicId = 7,
		/// <summary>
		/// EdCodeCourseTeachingId : طريقة التدريس: مقرر أو موضوع مقرر
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_TEACHING_ID")]
		[ColumnEnum("ED_CODE_COURSE_TEACHING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseTeachingId = 8,
		/// <summary>
		/// ScCdeActvtyId : نشاط فى الجدول الدراسي
		/// </summary>
		[EnumTextValue("SC_CDE_ACTVTY_ID")]
		[ColumnEnum("SC_CDE_ACTVTY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScCdeActvtyId = 9,
		/// <summary>
		/// ScBuildingId : المبنى
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 10,
		/// <summary>
		/// ScHallId : القاعة
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 11,
		/// <summary>
		/// VacFlg : يوم اجازة
		/// </summary>
		[EnumTextValue("VAC_FLG")]
		[ColumnEnum("VAC_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		VacFlg = 12,
		/// <summary>
		/// VacReason : اسم الاجازة او الحدث
		/// </summary>
		[EnumTextValue("VAC_REASON")]
		[ColumnEnum("VAC_REASON", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		VacReason = 13,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 14,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 15
	}//End enum

	#endregion ScSchdlSlotColumn Enum

} // end namespace
