
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file TrnsLine.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'TRNS_LINE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TrnsLineBase : EntityBase, ITrnsLine, IEntityId<TrnsLineKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TrnsLineEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TrnsLineEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TrnsLineEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TrnsLine> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TrnsLineEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TrnsLineEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TrnsLineBase"/> instance.
		///</summary>
		public TrnsLineBase()
		{
			this.entityData = new TrnsLineEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TrnsLineBase"/> instance.
		///</summary>
		///<param name="_trnsLineId">خطوط الباصات</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_lineNo"></param>
		///<param name="_lineDescrEn"></param>
		///<param name="_lineDescrAr"></param>
		///<param name="_trnsCdeDrvrId"></param>
		///<param name="_trnsCdeBusId"></param>
		///<param name="_gsCdeCampusId"></param>
		///<param name="_gsCountryNodeId"></param>
		public TrnsLineBase(System.Decimal _trnsLineId, System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, 
			System.Decimal _lineNo, System.String _lineDescrEn, System.String _lineDescrAr, System.Decimal? _trnsCdeDrvrId, 
			System.Decimal? _trnsCdeBusId, System.Decimal? _gsCdeCampusId, System.Decimal? _gsCountryNodeId)
		{
			this.entityData = new TrnsLineEntityData();
			this.backupData = null;

			this.TrnsLineId = _trnsLineId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.LineNo = _lineNo;
			this.LineDescrEn = _lineDescrEn;
			this.LineDescrAr = _lineDescrAr;
			this.TrnsCdeDrvrId = _trnsCdeDrvrId;
			this.TrnsCdeBusId = _trnsCdeBusId;
			this.GsCdeCampusId = _gsCdeCampusId;
			this.GsCountryNodeId = _gsCountryNodeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TrnsLine"/> instance.
		///</summary>
		///<param name="_trnsLineId">خطوط الباصات</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_lineNo"></param>
		///<param name="_lineDescrEn"></param>
		///<param name="_lineDescrAr"></param>
		///<param name="_trnsCdeDrvrId"></param>
		///<param name="_trnsCdeBusId"></param>
		///<param name="_gsCdeCampusId"></param>
		///<param name="_gsCountryNodeId"></param>
		public static TrnsLine CreateTrnsLine(System.Decimal _trnsLineId, System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, 
			System.Decimal _lineNo, System.String _lineDescrEn, System.String _lineDescrAr, System.Decimal? _trnsCdeDrvrId, 
			System.Decimal? _trnsCdeBusId, System.Decimal? _gsCdeCampusId, System.Decimal? _gsCountryNodeId)
		{
			TrnsLine newTrnsLine = new TrnsLine();
			newTrnsLine.TrnsLineId = _trnsLineId;
			newTrnsLine.EdAcadYearId = _edAcadYearId;
			newTrnsLine.EdCodeSemesterId = _edCodeSemesterId;
			newTrnsLine.LineNo = _lineNo;
			newTrnsLine.LineDescrEn = _lineDescrEn;
			newTrnsLine.LineDescrAr = _lineDescrAr;
			newTrnsLine.TrnsCdeDrvrId = _trnsCdeDrvrId;
			newTrnsLine.TrnsCdeBusId = _trnsCdeBusId;
			newTrnsLine.GsCdeCampusId = _gsCdeCampusId;
			newTrnsLine.GsCountryNodeId = _gsCountryNodeId;
			return newTrnsLine;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the TrnsLineId property. 
		///		خطوط الباصات
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"خطوط الباصات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal TrnsLineId
		{
			get
			{
				return this.entityData.TrnsLineId; 
			}
			
			set
			{
				if (this.entityData.TrnsLineId == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.TrnsLineId, this.entityData.TrnsLineId);
				this.entityData.TrnsLineId = value;
				this.EntityId.TrnsLineId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.TrnsLineId, this.entityData.TrnsLineId);
				OnPropertyChanged("TrnsLineId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the TRNS_LINE_ID property.
		///		خطوط الباصات
		/// </summary>
		/// <remarks>This is the original value of the TRNS_LINE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalTrnsLineId
		{
			get { return this.entityData.OriginalTrnsLineId; }
			set { this.entityData.OriginalTrnsLineId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LineNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal LineNo
		{
			get
			{
				return this.entityData.LineNo; 
			}
			
			set
			{
				if (this.entityData.LineNo == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.LineNo, this.entityData.LineNo);
				this.entityData.LineNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.LineNo, this.entityData.LineNo);
				OnPropertyChanged("LineNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LineDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String LineDescrEn
		{
			get
			{
				return this.entityData.LineDescrEn; 
			}
			
			set
			{
				if (this.entityData.LineDescrEn == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.LineDescrEn, this.entityData.LineDescrEn);
				this.entityData.LineDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.LineDescrEn, this.entityData.LineDescrEn);
				OnPropertyChanged("LineDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LineDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String LineDescrAr
		{
			get
			{
				return this.entityData.LineDescrAr; 
			}
			
			set
			{
				if (this.entityData.LineDescrAr == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.LineDescrAr, this.entityData.LineDescrAr);
				this.entityData.LineDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.LineDescrAr, this.entityData.LineDescrAr);
				OnPropertyChanged("LineDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsCdeDrvrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTrnsCdeDrvrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TrnsCdeDrvrId
		{
			get
			{
				return this.entityData.TrnsCdeDrvrId; 
			}
			
			set
			{
				if (this.entityData.TrnsCdeDrvrId == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.TrnsCdeDrvrId, this.entityData.TrnsCdeDrvrId);
				this.entityData.TrnsCdeDrvrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.TrnsCdeDrvrId, this.entityData.TrnsCdeDrvrId);
				OnPropertyChanged("TrnsCdeDrvrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsCdeBusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTrnsCdeBusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TrnsCdeBusId
		{
			get
			{
				return this.entityData.TrnsCdeBusId; 
			}
			
			set
			{
				if (this.entityData.TrnsCdeBusId == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.TrnsCdeBusId, this.entityData.TrnsCdeBusId);
				this.entityData.TrnsCdeBusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.TrnsCdeBusId, this.entityData.TrnsCdeBusId);
				OnPropertyChanged("TrnsCdeBusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeCampusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCdeCampusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCdeCampusId
		{
			get
			{
				return this.entityData.GsCdeCampusId; 
			}
			
			set
			{
				if (this.entityData.GsCdeCampusId == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.GsCdeCampusId, this.entityData.GsCdeCampusId);
				this.entityData.GsCdeCampusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.GsCdeCampusId, this.entityData.GsCdeCampusId);
				OnPropertyChanged("GsCdeCampusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(TrnsLineColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsLineColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeCampus"/>.
		/// </summary>
		/// <value>The source GsCdeCampus for GsCdeCampusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeCampus GsCdeCampusIdSource
      	{
            get { return entityData.GsCdeCampusIdSource; }
            set { entityData.GsCdeCampusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TrnsCdeBus"/>.
		/// </summary>
		/// <value>The source TrnsCdeBus for TrnsCdeBusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TrnsCdeBus TrnsCdeBusIdSource
      	{
            get { return entityData.TrnsCdeBusIdSource; }
            set { entityData.TrnsCdeBusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TrnsCdeDrvr"/>.
		/// </summary>
		/// <value>The source TrnsCdeDrvr for TrnsCdeDrvrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TrnsCdeDrvr TrnsCdeDrvrIdSource
      	{
            get { return entityData.TrnsCdeDrvrIdSource; }
            set { entityData.TrnsCdeDrvrIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of TrnsLineStop objects
		///	which are related to this object through the relation FK_TRNS_LINE_STOP_TRNS_LINE1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TrnsLineStop> TrnsLineStopCollection
		{
			get { return entityData.TrnsLineStopCollection; }
			set { entityData.TrnsLineStopCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of TrnsStudReq objects
		///	which are related to this object through the relation FK_TRNS_STUD_REQ_TRNS_LINE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TrnsStudReq> TrnsStudReqCollection
		{
			get { return entityData.TrnsStudReqCollection; }
			set { entityData.TrnsStudReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeBusLineItem objects
		///	which are related to this object through the relation FK_FEE_BUS_LINE_ITEM_TRNS_LINE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeBusLineItem> FeeBusLineItemCollection
		{
			get { return entityData.FeeBusLineItemCollection; }
			set { entityData.FeeBusLineItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LineDescrEn", "Line Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LineDescrEn", "Line Descr En", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LineDescrAr", "Line Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LineDescrAr", "Line Descr Ar", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "TRNS_LINE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"TRNS_LINE_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "LINE_NO", "LINE_DESCR_EN", "LINE_DESCR_AR", "TRNS_CDE_DRVR_ID", "TRNS_CDE_BUS_ID", "GS_CDE_CAMPUS_ID", "GS_COUNTRY_NODE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TrnsLineEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TrnsLine) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TrnsLine>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TrnsLine);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TrnsLine Entity 
		///</summary>
		protected virtual TrnsLine Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			TrnsLine copy = new TrnsLine();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.TrnsLineId = this.TrnsLineId;
					copy.OriginalTrnsLineId = this.OriginalTrnsLineId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.LineNo = this.LineNo;
				copy.LineDescrEn = this.LineDescrEn;
				copy.LineDescrAr = this.LineDescrAr;
				copy.TrnsCdeDrvrId = this.TrnsCdeDrvrId;
				copy.TrnsCdeBusId = this.TrnsCdeBusId;
				copy.GsCdeCampusId = this.GsCdeCampusId;
				copy.GsCountryNodeId = this.GsCountryNodeId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.GsCdeCampusIdSource != null && existingCopies.Contains(this.GsCdeCampusIdSource))
				copy.GsCdeCampusIdSource = existingCopies[this.GsCdeCampusIdSource] as GsCdeCampus;
			else
				copy.GsCdeCampusIdSource = MakeCopyOf(this.GsCdeCampusIdSource, existingCopies) as GsCdeCampus;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.TrnsCdeBusIdSource != null && existingCopies.Contains(this.TrnsCdeBusIdSource))
				copy.TrnsCdeBusIdSource = existingCopies[this.TrnsCdeBusIdSource] as TrnsCdeBus;
			else
				copy.TrnsCdeBusIdSource = MakeCopyOf(this.TrnsCdeBusIdSource, existingCopies) as TrnsCdeBus;
			if (this.TrnsCdeDrvrIdSource != null && existingCopies.Contains(this.TrnsCdeDrvrIdSource))
				copy.TrnsCdeDrvrIdSource = existingCopies[this.TrnsCdeDrvrIdSource] as TrnsCdeDrvr;
			else
				copy.TrnsCdeDrvrIdSource = MakeCopyOf(this.TrnsCdeDrvrIdSource, existingCopies) as TrnsCdeDrvr;
		
			//deep copy nested objects
			copy.TrnsLineStopCollection = (TList<TrnsLineStop>) MakeCopyOf(this.TrnsLineStopCollection, existingCopies); 
			copy.TrnsStudReqCollection = (TList<TrnsStudReq>) MakeCopyOf(this.TrnsStudReqCollection, existingCopies); 
			copy.FeeBusLineItemCollection = (TList<FeeBusLineItem>) MakeCopyOf(this.FeeBusLineItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed TrnsLine Entity 
		///</summary>
		public virtual TrnsLine Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed TrnsLine Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TrnsLine DeepCopy()
		{
			return EntityHelper.Clone<TrnsLine>(this as TrnsLine);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TrnsLineEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TrnsLineEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TrnsLineEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TrnsLineColumn column)
		{
			switch(column)
			{
					case TrnsLineColumn.TrnsLineId:
					return entityData.TrnsLineId != _originalData.TrnsLineId;
					case TrnsLineColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case TrnsLineColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case TrnsLineColumn.LineNo:
					return entityData.LineNo != _originalData.LineNo;
					case TrnsLineColumn.LineDescrEn:
					return entityData.LineDescrEn != _originalData.LineDescrEn;
					case TrnsLineColumn.LineDescrAr:
					return entityData.LineDescrAr != _originalData.LineDescrAr;
					case TrnsLineColumn.TrnsCdeDrvrId:
					return entityData.TrnsCdeDrvrId != _originalData.TrnsCdeDrvrId;
					case TrnsLineColumn.TrnsCdeBusId:
					return entityData.TrnsCdeBusId != _originalData.TrnsCdeBusId;
					case TrnsLineColumn.GsCdeCampusId:
					return entityData.GsCdeCampusId != _originalData.GsCdeCampusId;
					case TrnsLineColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TrnsLineColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.TrnsLineId != _originalData.TrnsLineId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.LineNo != _originalData.LineNo;
			result = result || entityData.LineDescrEn != _originalData.LineDescrEn;
			result = result || entityData.LineDescrAr != _originalData.LineDescrAr;
			result = result || entityData.TrnsCdeDrvrId != _originalData.TrnsCdeDrvrId;
			result = result || entityData.TrnsCdeBusId != _originalData.TrnsCdeBusId;
			result = result || entityData.GsCdeCampusId != _originalData.GsCdeCampusId;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			return result;
		}	
		
		///<summary>
		///  Returns a TrnsLine Entity with the original data.
		///</summary>
		public TrnsLine GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTrnsLine(
				_originalData.TrnsLineId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.LineNo,
				_originalData.LineDescrEn,
				_originalData.LineDescrAr,
				_originalData.TrnsCdeDrvrId,
				_originalData.TrnsCdeBusId,
				_originalData.GsCdeCampusId,
				_originalData.GsCountryNodeId
				);
				
			return (TrnsLine)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TrnsLineBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TrnsLineBase)
				return ValueEquals(this, (TrnsLineBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TrnsLineBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.TrnsLineId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					this.LineNo.GetHashCode() ^ 
					this.LineDescrEn.GetHashCode() ^ 
					this.LineDescrAr.GetHashCode() ^ 
					((this.TrnsCdeDrvrId == null) ? string.Empty : this.TrnsCdeDrvrId.ToString()).GetHashCode() ^ 
					((this.TrnsCdeBusId == null) ? string.Empty : this.TrnsCdeBusId.ToString()).GetHashCode() ^ 
					((this.GsCdeCampusId == null) ? string.Empty : this.GsCdeCampusId.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TrnsLineBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TrnsLineBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TrnsLineBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TrnsLineBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TrnsLineBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TrnsLineBase Object1, TrnsLineBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TrnsLineId != Object2.TrnsLineId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if (Object1.LineNo != Object2.LineNo)
				equal = false;
			if (Object1.LineDescrEn != Object2.LineDescrEn)
				equal = false;
			if (Object1.LineDescrAr != Object2.LineDescrAr)
				equal = false;
			if ( Object1.TrnsCdeDrvrId != null && Object2.TrnsCdeDrvrId != null )
			{
				if (Object1.TrnsCdeDrvrId != Object2.TrnsCdeDrvrId)
					equal = false;
			}
			else if (Object1.TrnsCdeDrvrId == null ^ Object2.TrnsCdeDrvrId == null )
			{
				equal = false;
			}
			if ( Object1.TrnsCdeBusId != null && Object2.TrnsCdeBusId != null )
			{
				if (Object1.TrnsCdeBusId != Object2.TrnsCdeBusId)
					equal = false;
			}
			else if (Object1.TrnsCdeBusId == null ^ Object2.TrnsCdeBusId == null )
			{
				equal = false;
			}
			if ( Object1.GsCdeCampusId != null && Object2.GsCdeCampusId != null )
			{
				if (Object1.GsCdeCampusId != Object2.GsCdeCampusId)
					equal = false;
			}
			else if (Object1.GsCdeCampusId == null ^ Object2.GsCdeCampusId == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TrnsLineBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TrnsLineComparer GetComparer()
        {
            return new TrnsLineComparer();
        }
        */

        // Comparer delegates back to TrnsLine
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TrnsLine rhs, TrnsLineColumn which)
        {
            switch (which)
            {
            	
            	
            	case TrnsLineColumn.TrnsLineId:
            		return this.TrnsLineId.CompareTo(rhs.TrnsLineId);
            		
            		                 
            	
            	
            	case TrnsLineColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case TrnsLineColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case TrnsLineColumn.LineNo:
            		return this.LineNo.CompareTo(rhs.LineNo);
            		
            		                 
            	
            	
            	case TrnsLineColumn.LineDescrEn:
            		return this.LineDescrEn.CompareTo(rhs.LineDescrEn);
            		
            		                 
            	
            	
            	case TrnsLineColumn.LineDescrAr:
            		return this.LineDescrAr.CompareTo(rhs.LineDescrAr);
            		
            		                 
            	
            	
            	case TrnsLineColumn.TrnsCdeDrvrId:
            		return this.TrnsCdeDrvrId.Value.CompareTo(rhs.TrnsCdeDrvrId.Value);
            		
            		                 
            	
            	
            	case TrnsLineColumn.TrnsCdeBusId:
            		return this.TrnsCdeBusId.Value.CompareTo(rhs.TrnsCdeBusId.Value);
            		
            		                 
            	
            	
            	case TrnsLineColumn.GsCdeCampusId:
            		return this.GsCdeCampusId.Value.CompareTo(rhs.GsCdeCampusId.Value);
            		
            		                 
            	
            	
            	case TrnsLineColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TrnsLineKey> Members
		
		// member variable for the EntityId property
		private TrnsLineKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TrnsLineKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TrnsLineKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TrnsLine")
					.Append("|").Append( this.TrnsLineId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- TrnsLineId: {0}{10}- EdAcadYearId: {1}{10}- EdCodeSemesterId: {2}{10}- LineNo: {3}{10}- LineDescrEn: {4}{10}- LineDescrAr: {5}{10}- TrnsCdeDrvrId: {6}{10}- TrnsCdeBusId: {7}{10}- GsCdeCampusId: {8}{10}- GsCountryNodeId: {9}{10}{12}", 
				this.TrnsLineId,
				this.EdAcadYearId,
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				this.LineNo,
				this.LineDescrEn,
				this.LineDescrAr,
				(this.TrnsCdeDrvrId == null) ? string.Empty : this.TrnsCdeDrvrId.ToString(),
				(this.TrnsCdeBusId == null) ? string.Empty : this.TrnsCdeBusId.ToString(),
				(this.GsCdeCampusId == null) ? string.Empty : this.GsCdeCampusId.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'TRNS_LINE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TrnsLineEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// TRNS_LINE_ID : خطوط الباصات
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "TRNS_LINE"</remarks>
		public System.Decimal TrnsLineId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalTrnsLineId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// LINE_NO : 
		/// </summary>
		public System.Decimal		  LineNo = 0.0m;
		
		/// <summary>
		/// LINE_DESCR_EN : 
		/// </summary>
		public System.String		  LineDescrEn = string.Empty;
		
		/// <summary>
		/// LINE_DESCR_AR : 
		/// </summary>
		public System.String		  LineDescrAr = string.Empty;
		
		/// <summary>
		/// TRNS_CDE_DRVR_ID : 
		/// </summary>
		public System.Decimal?		  TrnsCdeDrvrId = null;
		
		/// <summary>
		/// TRNS_CDE_BUS_ID : 
		/// </summary>
		public System.Decimal?		  TrnsCdeBusId = null;
		
		/// <summary>
		/// GS_CDE_CAMPUS_ID : 
		/// </summary>
		public System.Decimal?		  GsCdeCampusId = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private GsCdeCampus _gsCdeCampusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeCampus"/>.
		/// </summary>
		/// <value>The source GsCdeCampus for GsCdeCampusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeCampus GsCdeCampusIdSource
      	{
            get { return this._gsCdeCampusIdSource; }
            set { this._gsCdeCampusIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		private TrnsCdeBus _trnsCdeBusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TrnsCdeBus"/>.
		/// </summary>
		/// <value>The source TrnsCdeBus for TrnsCdeBusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual TrnsCdeBus TrnsCdeBusIdSource
      	{
            get { return this._trnsCdeBusIdSource; }
            set { this._trnsCdeBusIdSource = value; }
      	}
		private TrnsCdeDrvr _trnsCdeDrvrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TrnsCdeDrvr"/>.
		/// </summary>
		/// <value>The source TrnsCdeDrvr for TrnsCdeDrvrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual TrnsCdeDrvr TrnsCdeDrvrIdSource
      	{
            get { return this._trnsCdeDrvrIdSource; }
            set { this._trnsCdeDrvrIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region TrnsLineStopCollection
		
		private TList<TrnsLineStop> _trnsLineStopTrnsLineId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _trnsLineStopTrnsLineId
		/// </summary>
		
		public TList<TrnsLineStop> TrnsLineStopCollection
		{
			get
			{
				if (_trnsLineStopTrnsLineId == null)
				{
				_trnsLineStopTrnsLineId = new TList<TrnsLineStop>();
				}
	
				return _trnsLineStopTrnsLineId;
			}
			set { _trnsLineStopTrnsLineId = value; }
		}
		
		#endregion

		#region TrnsStudReqCollection
		
		private TList<TrnsStudReq> _trnsStudReqTrnsLineId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _trnsStudReqTrnsLineId
		/// </summary>
		
		public TList<TrnsStudReq> TrnsStudReqCollection
		{
			get
			{
				if (_trnsStudReqTrnsLineId == null)
				{
				_trnsStudReqTrnsLineId = new TList<TrnsStudReq>();
				}
	
				return _trnsStudReqTrnsLineId;
			}
			set { _trnsStudReqTrnsLineId = value; }
		}
		
		#endregion

		#region FeeBusLineItemCollection
		
		private TList<FeeBusLineItem> _feeBusLineItemTrnsLineId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeBusLineItemTrnsLineId
		/// </summary>
		
		public TList<FeeBusLineItem> FeeBusLineItemCollection
		{
			get
			{
				if (_feeBusLineItemTrnsLineId == null)
				{
				_feeBusLineItemTrnsLineId = new TList<FeeBusLineItem>();
				}
	
				return _feeBusLineItemTrnsLineId;
			}
			set { _feeBusLineItemTrnsLineId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TrnsLineEntityData _tmp = new TrnsLineEntityData();
						
			_tmp.TrnsLineId = this.TrnsLineId;
			_tmp.OriginalTrnsLineId = this.OriginalTrnsLineId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.LineNo = this.LineNo;
			_tmp.LineDescrEn = this.LineDescrEn;
			_tmp.LineDescrAr = this.LineDescrAr;
			_tmp.TrnsCdeDrvrId = this.TrnsCdeDrvrId;
			_tmp.TrnsCdeBusId = this.TrnsCdeBusId;
			_tmp.GsCdeCampusId = this.GsCdeCampusId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.GsCdeCampusIdSource != null)
				_tmp.GsCdeCampusIdSource = MakeCopyOf(this.GsCdeCampusIdSource) as GsCdeCampus;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			if (this.TrnsCdeBusIdSource != null)
				_tmp.TrnsCdeBusIdSource = MakeCopyOf(this.TrnsCdeBusIdSource) as TrnsCdeBus;
			if (this.TrnsCdeDrvrIdSource != null)
				_tmp.TrnsCdeDrvrIdSource = MakeCopyOf(this.TrnsCdeDrvrIdSource) as TrnsCdeDrvr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._trnsLineStopTrnsLineId != null)
				_tmp.TrnsLineStopCollection = (TList<TrnsLineStop>) MakeCopyOf(this.TrnsLineStopCollection); 
			if (this._trnsStudReqTrnsLineId != null)
				_tmp.TrnsStudReqCollection = (TList<TrnsStudReq>) MakeCopyOf(this.TrnsStudReqCollection); 
			if (this._feeBusLineItemTrnsLineId != null)
				_tmp.FeeBusLineItemCollection = (TList<FeeBusLineItem>) MakeCopyOf(this.FeeBusLineItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TrnsLineEntityData _tmp = new TrnsLineEntityData();
						
			_tmp.TrnsLineId = this.TrnsLineId;
			_tmp.OriginalTrnsLineId = this.OriginalTrnsLineId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.LineNo = this.LineNo;
			_tmp.LineDescrEn = this.LineDescrEn;
			_tmp.LineDescrAr = this.LineDescrAr;
			_tmp.TrnsCdeDrvrId = this.TrnsCdeDrvrId;
			_tmp.TrnsCdeBusId = this.TrnsCdeBusId;
			_tmp.GsCdeCampusId = this.GsCdeCampusId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.GsCdeCampusIdSource != null && existingCopies.Contains(this.GsCdeCampusIdSource))
				_tmp.GsCdeCampusIdSource = existingCopies[this.GsCdeCampusIdSource] as GsCdeCampus;
			else
				_tmp.GsCdeCampusIdSource = MakeCopyOf(this.GsCdeCampusIdSource, existingCopies) as GsCdeCampus;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.TrnsCdeBusIdSource != null && existingCopies.Contains(this.TrnsCdeBusIdSource))
				_tmp.TrnsCdeBusIdSource = existingCopies[this.TrnsCdeBusIdSource] as TrnsCdeBus;
			else
				_tmp.TrnsCdeBusIdSource = MakeCopyOf(this.TrnsCdeBusIdSource, existingCopies) as TrnsCdeBus;
			if (this.TrnsCdeDrvrIdSource != null && existingCopies.Contains(this.TrnsCdeDrvrIdSource))
				_tmp.TrnsCdeDrvrIdSource = existingCopies[this.TrnsCdeDrvrIdSource] as TrnsCdeDrvr;
			else
				_tmp.TrnsCdeDrvrIdSource = MakeCopyOf(this.TrnsCdeDrvrIdSource, existingCopies) as TrnsCdeDrvr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.TrnsLineStopCollection = (TList<TrnsLineStop>) MakeCopyOf(this.TrnsLineStopCollection, existingCopies); 
			_tmp.TrnsStudReqCollection = (TList<TrnsStudReq>) MakeCopyOf(this.TrnsStudReqCollection, existingCopies); 
			_tmp.FeeBusLineItemCollection = (TList<FeeBusLineItem>) MakeCopyOf(this.FeeBusLineItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsLineColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TrnsLineColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsLineColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TrnsLineColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsLineColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TrnsLineColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TrnsLineEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TrnsLineEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsLineColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TrnsLineColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TrnsLineEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TrnsLineEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TrnsLineEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TrnsLine"/> object.
	/// </remarks>
	public class TrnsLineEventArgs : System.EventArgs
	{
		private TrnsLineColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TrnsLineEventArgs class.
		///</summary>
		public TrnsLineEventArgs(TrnsLineColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TrnsLineEventArgs class.
		///</summary>
		public TrnsLineEventArgs(TrnsLineColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TrnsLineColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TrnsLineColumn" />
		public TrnsLineColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TrnsLine related events.
	///</summary>
	public delegate void TrnsLineEventHandler(object sender, TrnsLineEventArgs e);
	
	#region TrnsLineComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TrnsLineComparer : System.Collections.Generic.IComparer<TrnsLine>
	{
		TrnsLineColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TrnsLineComparer"/> class.
        /// </summary>
		public TrnsLineComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TrnsLineComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TrnsLineComparer(TrnsLineColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="TrnsLine"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="TrnsLine"/> to compare.</param>
        /// <param name="b">The second <c>TrnsLine</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TrnsLine a, TrnsLine b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TrnsLine entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TrnsLine a, TrnsLine b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TrnsLineColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TrnsLineKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TrnsLine"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TrnsLineKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TrnsLineKey class.
		/// </summary>
		public TrnsLineKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TrnsLineKey class.
		/// </summary>
		public TrnsLineKey(TrnsLineBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.TrnsLineId = entity.TrnsLineId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TrnsLineKey class.
		/// </summary>
		public TrnsLineKey(System.Decimal _trnsLineId)
		{
			#region Init Properties

			this.TrnsLineId = _trnsLineId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TrnsLineBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TrnsLineBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TrnsLineId property
		private System.Decimal _trnsLineId;
		
		/// <summary>
		/// Gets or sets the TrnsLineId property.
		/// </summary>
		public System.Decimal TrnsLineId
		{
			get { return _trnsLineId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.TrnsLineId = value;
				
				_trnsLineId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TrnsLineId = ( values["TrnsLineId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["TrnsLineId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TrnsLineId", TrnsLineId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TrnsLineId: {0}{1}",
								TrnsLineId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TrnsLineColumn Enum
	
	/// <summary>
	/// Enumerate the TrnsLine columns.
	/// </summary>
	[Serializable]
	public enum TrnsLineColumn : int
	{
		/// <summary>
		/// TrnsLineId : خطوط الباصات
		/// </summary>
		[EnumTextValue("TRNS_LINE_ID")]
		[ColumnEnum("TRNS_LINE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		TrnsLineId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// LineNo : 
		/// </summary>
		[EnumTextValue("LINE_NO")]
		[ColumnEnum("LINE_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LineNo = 4,
		/// <summary>
		/// LineDescrEn : 
		/// </summary>
		[EnumTextValue("LINE_DESCR_EN")]
		[ColumnEnum("LINE_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LineDescrEn = 5,
		/// <summary>
		/// LineDescrAr : 
		/// </summary>
		[EnumTextValue("LINE_DESCR_AR")]
		[ColumnEnum("LINE_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		LineDescrAr = 6,
		/// <summary>
		/// TrnsCdeDrvrId : 
		/// </summary>
		[EnumTextValue("TRNS_CDE_DRVR_ID")]
		[ColumnEnum("TRNS_CDE_DRVR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TrnsCdeDrvrId = 7,
		/// <summary>
		/// TrnsCdeBusId : 
		/// </summary>
		[EnumTextValue("TRNS_CDE_BUS_ID")]
		[ColumnEnum("TRNS_CDE_BUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TrnsCdeBusId = 8,
		/// <summary>
		/// GsCdeCampusId : 
		/// </summary>
		[EnumTextValue("GS_CDE_CAMPUS_ID")]
		[ColumnEnum("GS_CDE_CAMPUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCdeCampusId = 9,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 10
	}//End enum

	#endregion TrnsLineColumn Enum

} // end namespace
