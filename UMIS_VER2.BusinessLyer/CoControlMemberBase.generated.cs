
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CoControlMember.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'CO_CONTROL_MEMBER' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CoControlMemberBase : EntityBase, ICoControlMember, IEntityId<CoControlMemberKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CoControlMemberEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CoControlMemberEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CoControlMemberEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CoControlMember> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoControlMemberEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoControlMemberEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CoControlMemberBase"/> instance.
		///</summary>
		public CoControlMemberBase()
		{
			this.entityData = new CoControlMemberEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CoControlMemberBase"/> instance.
		///</summary>
		///<param name="_coControlMembersId"></param>
		///<param name="_coControlId"></param>
		///<param name="_memberFlg"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_memberNameAr"></param>
		///<param name="_memberNameEn"></param>
		///<param name="_mobNo"></param>
		///<param name="_jobTitle"></param>
		///<param name="_notes"></param>
		///<param name="_isActive"></param>
		///<param name="_supervisorFlg"></param>
		///<param name="_headFlg"></param>
		///<param name="_memberTypeFlg"></param>
		public CoControlMemberBase(System.Decimal _coControlMembersId, System.Decimal? _coControlId, 
			System.Decimal _memberFlg, System.Decimal? _saStfMemberId, System.Decimal? _saCodeScDegId, 
			System.String _memberNameAr, System.String _memberNameEn, System.String _mobNo, 
			System.String _jobTitle, System.String _notes, System.Decimal _isActive, 
			System.Decimal _supervisorFlg, System.Decimal _headFlg, System.Decimal _memberTypeFlg)
		{
			this.entityData = new CoControlMemberEntityData();
			this.backupData = null;

			this.CoControlMembersId = _coControlMembersId;
			this.CoControlId = _coControlId;
			this.MemberFlg = _memberFlg;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodeScDegId = _saCodeScDegId;
			this.MemberNameAr = _memberNameAr;
			this.MemberNameEn = _memberNameEn;
			this.MobNo = _mobNo;
			this.JobTitle = _jobTitle;
			this.Notes = _notes;
			this.IsActive = _isActive;
			this.SupervisorFlg = _supervisorFlg;
			this.HeadFlg = _headFlg;
			this.MemberTypeFlg = _memberTypeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CoControlMember"/> instance.
		///</summary>
		///<param name="_coControlMembersId"></param>
		///<param name="_coControlId"></param>
		///<param name="_memberFlg"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_memberNameAr"></param>
		///<param name="_memberNameEn"></param>
		///<param name="_mobNo"></param>
		///<param name="_jobTitle"></param>
		///<param name="_notes"></param>
		///<param name="_isActive"></param>
		///<param name="_supervisorFlg"></param>
		///<param name="_headFlg"></param>
		///<param name="_memberTypeFlg"></param>
		public static CoControlMember CreateCoControlMember(System.Decimal _coControlMembersId, System.Decimal? _coControlId, 
			System.Decimal _memberFlg, System.Decimal? _saStfMemberId, System.Decimal? _saCodeScDegId, 
			System.String _memberNameAr, System.String _memberNameEn, System.String _mobNo, 
			System.String _jobTitle, System.String _notes, System.Decimal _isActive, 
			System.Decimal _supervisorFlg, System.Decimal _headFlg, System.Decimal _memberTypeFlg)
		{
			CoControlMember newCoControlMember = new CoControlMember();
			newCoControlMember.CoControlMembersId = _coControlMembersId;
			newCoControlMember.CoControlId = _coControlId;
			newCoControlMember.MemberFlg = _memberFlg;
			newCoControlMember.SaStfMemberId = _saStfMemberId;
			newCoControlMember.SaCodeScDegId = _saCodeScDegId;
			newCoControlMember.MemberNameAr = _memberNameAr;
			newCoControlMember.MemberNameEn = _memberNameEn;
			newCoControlMember.MobNo = _mobNo;
			newCoControlMember.JobTitle = _jobTitle;
			newCoControlMember.Notes = _notes;
			newCoControlMember.IsActive = _isActive;
			newCoControlMember.SupervisorFlg = _supervisorFlg;
			newCoControlMember.HeadFlg = _headFlg;
			newCoControlMember.MemberTypeFlg = _memberTypeFlg;
			return newCoControlMember;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CoControlMembersId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal CoControlMembersId
		{
			get
			{
				return this.entityData.CoControlMembersId; 
			}
			
			set
			{
				if (this.entityData.CoControlMembersId == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.CoControlMembersId, this.entityData.CoControlMembersId);
				this.entityData.CoControlMembersId = value;
				this.EntityId.CoControlMembersId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.CoControlMembersId, this.entityData.CoControlMembersId);
				OnPropertyChanged("CoControlMembersId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CO_CONTROL_MEMBERS_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the CO_CONTROL_MEMBERS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalCoControlMembersId
		{
			get { return this.entityData.OriginalCoControlMembersId; }
			set { this.entityData.OriginalCoControlMembersId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CoControlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoControlIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoControlId
		{
			get
			{
				return this.entityData.CoControlId; 
			}
			
			set
			{
				if (this.entityData.CoControlId == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.CoControlId, this.entityData.CoControlId);
				this.entityData.CoControlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.CoControlId, this.entityData.CoControlId);
				OnPropertyChanged("CoControlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MemberFlg
		{
			get
			{
				return this.entityData.MemberFlg; 
			}
			
			set
			{
				if (this.entityData.MemberFlg == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.MemberFlg, this.entityData.MemberFlg);
				this.entityData.MemberFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.MemberFlg, this.entityData.MemberFlg);
				OnPropertyChanged("MemberFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaStfMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeScDegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeScDegIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeScDegId
		{
			get
			{
				return this.entityData.SaCodeScDegId; 
			}
			
			set
			{
				if (this.entityData.SaCodeScDegId == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				this.entityData.SaCodeScDegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				OnPropertyChanged("SaCodeScDegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MemberNameAr
		{
			get
			{
				return this.entityData.MemberNameAr; 
			}
			
			set
			{
				if (this.entityData.MemberNameAr == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.MemberNameAr, this.entityData.MemberNameAr);
				this.entityData.MemberNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.MemberNameAr, this.entityData.MemberNameAr);
				OnPropertyChanged("MemberNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MemberNameEn
		{
			get
			{
				return this.entityData.MemberNameEn; 
			}
			
			set
			{
				if (this.entityData.MemberNameEn == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.MemberNameEn, this.entityData.MemberNameEn);
				this.entityData.MemberNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.MemberNameEn, this.entityData.MemberNameEn);
				OnPropertyChanged("MemberNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobNo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 12)]
		public virtual System.String MobNo
		{
			get
			{
				return this.entityData.MobNo; 
			}
			
			set
			{
				if (this.entityData.MobNo == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.MobNo, this.entityData.MobNo);
				this.entityData.MobNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.MobNo, this.entityData.MobNo);
				OnPropertyChanged("MobNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String JobTitle
		{
			get
			{
				return this.entityData.JobTitle; 
			}
			
			set
			{
				if (this.entityData.JobTitle == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.JobTitle, this.entityData.JobTitle);
				this.entityData.JobTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.JobTitle, this.entityData.JobTitle);
				OnPropertyChanged("JobTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SupervisorFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SupervisorFlg
		{
			get
			{
				return this.entityData.SupervisorFlg; 
			}
			
			set
			{
				if (this.entityData.SupervisorFlg == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.SupervisorFlg, this.entityData.SupervisorFlg);
				this.entityData.SupervisorFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.SupervisorFlg, this.entityData.SupervisorFlg);
				OnPropertyChanged("SupervisorFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeadFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal HeadFlg
		{
			get
			{
				return this.entityData.HeadFlg; 
			}
			
			set
			{
				if (this.entityData.HeadFlg == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.HeadFlg, this.entityData.HeadFlg);
				this.entityData.HeadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.HeadFlg, this.entityData.HeadFlg);
				OnPropertyChanged("HeadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MemberTypeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MemberTypeFlg
		{
			get
			{
				return this.entityData.MemberTypeFlg; 
			}
			
			set
			{
				if (this.entityData.MemberTypeFlg == value)
					return;
					
				OnColumnChanging(CoControlMemberColumn.MemberTypeFlg, this.entityData.MemberTypeFlg);
				this.entityData.MemberTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlMemberColumn.MemberTypeFlg, this.entityData.MemberTypeFlg);
				OnPropertyChanged("MemberTypeFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return entityData.SaCodeScDegIdSource; }
            set { entityData.SaCodeScDegIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="CoControl"/>.
		/// </summary>
		/// <value>The source CoControl for CoControlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CoControl CoControlIdSource
      	{
            get { return entityData.CoControlIdSource; }
            set { entityData.CoControlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CoExamCommSupervisor objects
		///	which are related to this object through the relation FK_CO_EXAM_COMM_SUPERVISOR_CO_CONTROL_MEMBER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamCommSupervisor> CoExamCommSupervisorCollection
		{
			get { return entityData.CoExamCommSupervisorCollection; }
			set { entityData.CoExamCommSupervisorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoStudCheat objects
		///	which are related to this object through the relation FK_CO_STUD_CHEAT_CO_CONTROL_MEMBER1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoStudCheat> CoStudCheatCollectionGetByCoControlMembHdId
		{
			get { return entityData.CoStudCheatCollectionGetByCoControlMembHdId; }
			set { entityData.CoStudCheatCollectionGetByCoControlMembHdId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoStudCheat objects
		///	which are related to this object through the relation FK_CO_STUD_CHEAT_CO_CONTROL_MEMBER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoStudCheat> CoStudCheatCollectionGetByCoControlMembId
		{
			get { return entityData.CoStudCheatCollectionGetByCoControlMembId; }
			set { entityData.CoStudCheatCollectionGetByCoControlMembId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamCommSupervisorAlt objects
		///	which are related to this object through the relation FK_CO_EXAM_COMM_SUPERVISOR_ALT_CO_CONTROL_MEMBER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamCommSupervisorAlt> CoExamCommSupervisorAltCollection
		{
			get { return entityData.CoExamCommSupervisorAltCollection; }
			set { entityData.CoExamCommSupervisorAltCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberNameAr", "Member Name Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MemberNameEn", "Member Name En", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobNo", "Mob No", 12));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("JobTitle", "Job Title", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CO_CONTROL_MEMBER"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CO_CONTROL_MEMBERS_ID", "CO_CONTROL_ID", "MEMBER_FLG", "SA_STF_MEMBER_ID", "SA_CODE_SC_DEG_ID", "MEMBER_NAME_AR", "MEMBER_NAME_EN", "MOB_NO", "JOB_TITLE", "NOTES", "IS_ACTIVE", "SUPERVISOR_FLG", "HEAD_FLG", "MEMBER_TYPE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CoControlMemberEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CoControlMember) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CoControlMember>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CoControlMember);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CoControlMember Entity 
		///</summary>
		protected virtual CoControlMember Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CoControlMember copy = new CoControlMember();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CoControlMembersId = this.CoControlMembersId;
					copy.OriginalCoControlMembersId = this.OriginalCoControlMembersId;
				copy.CoControlId = this.CoControlId;
				copy.MemberFlg = this.MemberFlg;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodeScDegId = this.SaCodeScDegId;
				copy.MemberNameAr = this.MemberNameAr;
				copy.MemberNameEn = this.MemberNameEn;
				copy.MobNo = this.MobNo;
				copy.JobTitle = this.JobTitle;
				copy.Notes = this.Notes;
				copy.IsActive = this.IsActive;
				copy.SupervisorFlg = this.SupervisorFlg;
				copy.HeadFlg = this.HeadFlg;
				copy.MemberTypeFlg = this.MemberTypeFlg;
			
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				copy.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				copy.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.CoControlIdSource != null && existingCopies.Contains(this.CoControlIdSource))
				copy.CoControlIdSource = existingCopies[this.CoControlIdSource] as CoControl;
			else
				copy.CoControlIdSource = MakeCopyOf(this.CoControlIdSource, existingCopies) as CoControl;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			//deep copy nested objects
			copy.CoExamCommSupervisorCollection = (TList<CoExamCommSupervisor>) MakeCopyOf(this.CoExamCommSupervisorCollection, existingCopies); 
			copy.CoStudCheatCollectionGetByCoControlMembHdId = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollectionGetByCoControlMembHdId, existingCopies); 
			copy.CoStudCheatCollectionGetByCoControlMembId = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollectionGetByCoControlMembId, existingCopies); 
			copy.CoExamCommSupervisorAltCollection = (TList<CoExamCommSupervisorAlt>) MakeCopyOf(this.CoExamCommSupervisorAltCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CoControlMember Entity 
		///</summary>
		public virtual CoControlMember Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CoControlMember Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CoControlMember DeepCopy()
		{
			return EntityHelper.Clone<CoControlMember>(this as CoControlMember);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CoControlMemberEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CoControlMemberEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CoControlMemberEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CoControlMemberColumn column)
		{
			switch(column)
			{
					case CoControlMemberColumn.CoControlMembersId:
					return entityData.CoControlMembersId != _originalData.CoControlMembersId;
					case CoControlMemberColumn.CoControlId:
					return entityData.CoControlId != _originalData.CoControlId;
					case CoControlMemberColumn.MemberFlg:
					return entityData.MemberFlg != _originalData.MemberFlg;
					case CoControlMemberColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case CoControlMemberColumn.SaCodeScDegId:
					return entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
					case CoControlMemberColumn.MemberNameAr:
					return entityData.MemberNameAr != _originalData.MemberNameAr;
					case CoControlMemberColumn.MemberNameEn:
					return entityData.MemberNameEn != _originalData.MemberNameEn;
					case CoControlMemberColumn.MobNo:
					return entityData.MobNo != _originalData.MobNo;
					case CoControlMemberColumn.JobTitle:
					return entityData.JobTitle != _originalData.JobTitle;
					case CoControlMemberColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case CoControlMemberColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case CoControlMemberColumn.SupervisorFlg:
					return entityData.SupervisorFlg != _originalData.SupervisorFlg;
					case CoControlMemberColumn.HeadFlg:
					return entityData.HeadFlg != _originalData.HeadFlg;
					case CoControlMemberColumn.MemberTypeFlg:
					return entityData.MemberTypeFlg != _originalData.MemberTypeFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CoControlMemberColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CoControlMembersId != _originalData.CoControlMembersId;
			result = result || entityData.CoControlId != _originalData.CoControlId;
			result = result || entityData.MemberFlg != _originalData.MemberFlg;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
			result = result || entityData.MemberNameAr != _originalData.MemberNameAr;
			result = result || entityData.MemberNameEn != _originalData.MemberNameEn;
			result = result || entityData.MobNo != _originalData.MobNo;
			result = result || entityData.JobTitle != _originalData.JobTitle;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.SupervisorFlg != _originalData.SupervisorFlg;
			result = result || entityData.HeadFlg != _originalData.HeadFlg;
			result = result || entityData.MemberTypeFlg != _originalData.MemberTypeFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a CoControlMember Entity with the original data.
		///</summary>
		public CoControlMember GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCoControlMember(
				_originalData.CoControlMembersId,
				_originalData.CoControlId,
				_originalData.MemberFlg,
				_originalData.SaStfMemberId,
				_originalData.SaCodeScDegId,
				_originalData.MemberNameAr,
				_originalData.MemberNameEn,
				_originalData.MobNo,
				_originalData.JobTitle,
				_originalData.Notes,
				_originalData.IsActive,
				_originalData.SupervisorFlg,
				_originalData.HeadFlg,
				_originalData.MemberTypeFlg
				);
				
			return (CoControlMember)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CoControlMemberBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CoControlMemberBase)
				return ValueEquals(this, (CoControlMemberBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CoControlMemberBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CoControlMembersId.GetHashCode() ^ 
					((this.CoControlId == null) ? string.Empty : this.CoControlId.ToString()).GetHashCode() ^ 
					this.MemberFlg.GetHashCode() ^ 
					((this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString()).GetHashCode() ^ 
					((this.SaCodeScDegId == null) ? string.Empty : this.SaCodeScDegId.ToString()).GetHashCode() ^ 
					((this.MemberNameAr == null) ? string.Empty : this.MemberNameAr.ToString()).GetHashCode() ^ 
					((this.MemberNameEn == null) ? string.Empty : this.MemberNameEn.ToString()).GetHashCode() ^ 
					((this.MobNo == null) ? string.Empty : this.MobNo.ToString()).GetHashCode() ^ 
					((this.JobTitle == null) ? string.Empty : this.JobTitle.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.IsActive.GetHashCode() ^ 
					this.SupervisorFlg.GetHashCode() ^ 
					this.HeadFlg.GetHashCode() ^ 
					this.MemberTypeFlg.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CoControlMemberBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CoControlMemberBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CoControlMemberBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CoControlMemberBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CoControlMemberBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CoControlMemberBase Object1, CoControlMemberBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CoControlMembersId != Object2.CoControlMembersId)
				equal = false;
			if ( Object1.CoControlId != null && Object2.CoControlId != null )
			{
				if (Object1.CoControlId != Object2.CoControlId)
					equal = false;
			}
			else if (Object1.CoControlId == null ^ Object2.CoControlId == null )
			{
				equal = false;
			}
			if (Object1.MemberFlg != Object2.MemberFlg)
				equal = false;
			if ( Object1.SaStfMemberId != null && Object2.SaStfMemberId != null )
			{
				if (Object1.SaStfMemberId != Object2.SaStfMemberId)
					equal = false;
			}
			else if (Object1.SaStfMemberId == null ^ Object2.SaStfMemberId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeScDegId != null && Object2.SaCodeScDegId != null )
			{
				if (Object1.SaCodeScDegId != Object2.SaCodeScDegId)
					equal = false;
			}
			else if (Object1.SaCodeScDegId == null ^ Object2.SaCodeScDegId == null )
			{
				equal = false;
			}
			if ( Object1.MemberNameAr != null && Object2.MemberNameAr != null )
			{
				if (Object1.MemberNameAr != Object2.MemberNameAr)
					equal = false;
			}
			else if (Object1.MemberNameAr == null ^ Object2.MemberNameAr == null )
			{
				equal = false;
			}
			if ( Object1.MemberNameEn != null && Object2.MemberNameEn != null )
			{
				if (Object1.MemberNameEn != Object2.MemberNameEn)
					equal = false;
			}
			else if (Object1.MemberNameEn == null ^ Object2.MemberNameEn == null )
			{
				equal = false;
			}
			if ( Object1.MobNo != null && Object2.MobNo != null )
			{
				if (Object1.MobNo != Object2.MobNo)
					equal = false;
			}
			else if (Object1.MobNo == null ^ Object2.MobNo == null )
			{
				equal = false;
			}
			if ( Object1.JobTitle != null && Object2.JobTitle != null )
			{
				if (Object1.JobTitle != Object2.JobTitle)
					equal = false;
			}
			else if (Object1.JobTitle == null ^ Object2.JobTitle == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.IsActive != Object2.IsActive)
				equal = false;
			if (Object1.SupervisorFlg != Object2.SupervisorFlg)
				equal = false;
			if (Object1.HeadFlg != Object2.HeadFlg)
				equal = false;
			if (Object1.MemberTypeFlg != Object2.MemberTypeFlg)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CoControlMemberBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CoControlMemberComparer GetComparer()
        {
            return new CoControlMemberComparer();
        }
        */

        // Comparer delegates back to CoControlMember
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CoControlMember rhs, CoControlMemberColumn which)
        {
            switch (which)
            {
            	
            	
            	case CoControlMemberColumn.CoControlMembersId:
            		return this.CoControlMembersId.CompareTo(rhs.CoControlMembersId);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.CoControlId:
            		return this.CoControlId.Value.CompareTo(rhs.CoControlId.Value);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.MemberFlg:
            		return this.MemberFlg.CompareTo(rhs.MemberFlg);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.SaStfMemberId:
            		return this.SaStfMemberId.Value.CompareTo(rhs.SaStfMemberId.Value);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.SaCodeScDegId:
            		return this.SaCodeScDegId.Value.CompareTo(rhs.SaCodeScDegId.Value);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.MemberNameAr:
            		return this.MemberNameAr.CompareTo(rhs.MemberNameAr);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.MemberNameEn:
            		return this.MemberNameEn.CompareTo(rhs.MemberNameEn);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.MobNo:
            		return this.MobNo.CompareTo(rhs.MobNo);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.JobTitle:
            		return this.JobTitle.CompareTo(rhs.JobTitle);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.IsActive:
            		return this.IsActive.CompareTo(rhs.IsActive);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.SupervisorFlg:
            		return this.SupervisorFlg.CompareTo(rhs.SupervisorFlg);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.HeadFlg:
            		return this.HeadFlg.CompareTo(rhs.HeadFlg);
            		
            		                 
            	
            	
            	case CoControlMemberColumn.MemberTypeFlg:
            		return this.MemberTypeFlg.CompareTo(rhs.MemberTypeFlg);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CoControlMemberKey> Members
		
		// member variable for the EntityId property
		private CoControlMemberKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CoControlMemberKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CoControlMemberKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CoControlMember")
					.Append("|").Append( this.CoControlMembersId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- CoControlMembersId: {0}{14}- CoControlId: {1}{14}- MemberFlg: {2}{14}- SaStfMemberId: {3}{14}- SaCodeScDegId: {4}{14}- MemberNameAr: {5}{14}- MemberNameEn: {6}{14}- MobNo: {7}{14}- JobTitle: {8}{14}- Notes: {9}{14}- IsActive: {10}{14}- SupervisorFlg: {11}{14}- HeadFlg: {12}{14}- MemberTypeFlg: {13}{14}{16}", 
				this.CoControlMembersId,
				(this.CoControlId == null) ? string.Empty : this.CoControlId.ToString(),
				this.MemberFlg,
				(this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString(),
				(this.SaCodeScDegId == null) ? string.Empty : this.SaCodeScDegId.ToString(),
				(this.MemberNameAr == null) ? string.Empty : this.MemberNameAr.ToString(),
				(this.MemberNameEn == null) ? string.Empty : this.MemberNameEn.ToString(),
				(this.MobNo == null) ? string.Empty : this.MobNo.ToString(),
				(this.JobTitle == null) ? string.Empty : this.JobTitle.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.IsActive,
				this.SupervisorFlg,
				this.HeadFlg,
				this.MemberTypeFlg,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CO_CONTROL_MEMBER' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CoControlMemberEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CO_CONTROL_MEMBERS_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CO_CONTROL_MEMBER"</remarks>
		public System.Decimal CoControlMembersId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalCoControlMembersId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CO_CONTROL_ID : 
		/// </summary>
		public System.Decimal?		  CoControlId = null;
		
		/// <summary>
		/// MEMBER_FLG : 
		/// </summary>
		public System.Decimal		  MemberFlg = 0.0m;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal?		  SaStfMemberId = null;
		
		/// <summary>
		/// SA_CODE_SC_DEG_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeScDegId = null;
		
		/// <summary>
		/// MEMBER_NAME_AR : 
		/// </summary>
		public System.String		  MemberNameAr = null;
		
		/// <summary>
		/// MEMBER_NAME_EN : 
		/// </summary>
		public System.String		  MemberNameEn = null;
		
		/// <summary>
		/// MOB_NO : 
		/// </summary>
		public System.String		  MobNo = null;
		
		/// <summary>
		/// JOB_TITLE : 
		/// </summary>
		public System.String		  JobTitle = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Decimal		  IsActive = 0.0m;
		
		/// <summary>
		/// SUPERVISOR_FLG : 
		/// </summary>
		public System.Decimal		  SupervisorFlg = 0.0m;
		
		/// <summary>
		/// HEAD_FLG : 
		/// </summary>
		public System.Decimal		  HeadFlg = 0.0m;
		
		/// <summary>
		/// MEMBER_TYPE_FLG : 
		/// </summary>
		public System.Decimal		  MemberTypeFlg = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaCodeScDeg _saCodeScDegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return this._saCodeScDegIdSource; }
            set { this._saCodeScDegIdSource = value; }
      	}
		private CoControl _coControlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CoControl"/>.
		/// </summary>
		/// <value>The source CoControl for CoControlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CoControl CoControlIdSource
      	{
            get { return this._coControlIdSource; }
            set { this._coControlIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CoExamCommSupervisorCollection
		
		private TList<CoExamCommSupervisor> _coExamCommSupervisorCoControlMembersId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamCommSupervisorCoControlMembersId
		/// </summary>
		
		public TList<CoExamCommSupervisor> CoExamCommSupervisorCollection
		{
			get
			{
				if (_coExamCommSupervisorCoControlMembersId == null)
				{
				_coExamCommSupervisorCoControlMembersId = new TList<CoExamCommSupervisor>();
				}
	
				return _coExamCommSupervisorCoControlMembersId;
			}
			set { _coExamCommSupervisorCoControlMembersId = value; }
		}
		
		#endregion

		#region CoStudCheatCollectionGetByCoControlMembHdId
		
		private TList<CoStudCheat> _coStudCheatCoControlMembHdIdGetByCoControlMembHdId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coStudCheatCoControlMembHdIdGetByCoControlMembHdId
		/// </summary>
		
		public TList<CoStudCheat> CoStudCheatCollectionGetByCoControlMembHdId
		{
			get
			{
				if (_coStudCheatCoControlMembHdIdGetByCoControlMembHdId == null)
				{
				_coStudCheatCoControlMembHdIdGetByCoControlMembHdId = new TList<CoStudCheat>();
				}
	
				return _coStudCheatCoControlMembHdIdGetByCoControlMembHdId;
			}
			set { _coStudCheatCoControlMembHdIdGetByCoControlMembHdId = value; }
		}
		
		#endregion

		#region CoStudCheatCollectionGetByCoControlMembId
		
		private TList<CoStudCheat> _coStudCheatCoControlMembHdIdGetByCoControlMembId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coStudCheatCoControlMembHdIdGetByCoControlMembId
		/// </summary>
		
		public TList<CoStudCheat> CoStudCheatCollectionGetByCoControlMembId
		{
			get
			{
				if (_coStudCheatCoControlMembHdIdGetByCoControlMembId == null)
				{
				_coStudCheatCoControlMembHdIdGetByCoControlMembId = new TList<CoStudCheat>();
				}
	
				return _coStudCheatCoControlMembHdIdGetByCoControlMembId;
			}
			set { _coStudCheatCoControlMembHdIdGetByCoControlMembId = value; }
		}
		
		#endregion

		#region CoExamCommSupervisorAltCollection
		
		private TList<CoExamCommSupervisorAlt> _coExamCommSupervisorAltCoControlMembersId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamCommSupervisorAltCoControlMembersId
		/// </summary>
		
		public TList<CoExamCommSupervisorAlt> CoExamCommSupervisorAltCollection
		{
			get
			{
				if (_coExamCommSupervisorAltCoControlMembersId == null)
				{
				_coExamCommSupervisorAltCoControlMembersId = new TList<CoExamCommSupervisorAlt>();
				}
	
				return _coExamCommSupervisorAltCoControlMembersId;
			}
			set { _coExamCommSupervisorAltCoControlMembersId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CoControlMemberEntityData _tmp = new CoControlMemberEntityData();
						
			_tmp.CoControlMembersId = this.CoControlMembersId;
			_tmp.OriginalCoControlMembersId = this.OriginalCoControlMembersId;
			
			_tmp.CoControlId = this.CoControlId;
			_tmp.MemberFlg = this.MemberFlg;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.MemberNameAr = this.MemberNameAr;
			_tmp.MemberNameEn = this.MemberNameEn;
			_tmp.MobNo = this.MobNo;
			_tmp.JobTitle = this.JobTitle;
			_tmp.Notes = this.Notes;
			_tmp.IsActive = this.IsActive;
			_tmp.SupervisorFlg = this.SupervisorFlg;
			_tmp.HeadFlg = this.HeadFlg;
			_tmp.MemberTypeFlg = this.MemberTypeFlg;
			
			#region Source Parent Composite Entities
			if (this.SaCodeScDegIdSource != null)
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource) as SaCodeScDeg;
			if (this.CoControlIdSource != null)
				_tmp.CoControlIdSource = MakeCopyOf(this.CoControlIdSource) as CoControl;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._coExamCommSupervisorCoControlMembersId != null)
				_tmp.CoExamCommSupervisorCollection = (TList<CoExamCommSupervisor>) MakeCopyOf(this.CoExamCommSupervisorCollection); 
			if (this._coStudCheatCoControlMembHdIdGetByCoControlMembHdId != null)
				_tmp.CoStudCheatCollectionGetByCoControlMembHdId = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollectionGetByCoControlMembHdId); 
			if (this._coStudCheatCoControlMembHdIdGetByCoControlMembId != null)
				_tmp.CoStudCheatCollectionGetByCoControlMembId = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollectionGetByCoControlMembId); 
			if (this._coExamCommSupervisorAltCoControlMembersId != null)
				_tmp.CoExamCommSupervisorAltCollection = (TList<CoExamCommSupervisorAlt>) MakeCopyOf(this.CoExamCommSupervisorAltCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CoControlMemberEntityData _tmp = new CoControlMemberEntityData();
						
			_tmp.CoControlMembersId = this.CoControlMembersId;
			_tmp.OriginalCoControlMembersId = this.OriginalCoControlMembersId;
			
			_tmp.CoControlId = this.CoControlId;
			_tmp.MemberFlg = this.MemberFlg;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.MemberNameAr = this.MemberNameAr;
			_tmp.MemberNameEn = this.MemberNameEn;
			_tmp.MobNo = this.MobNo;
			_tmp.JobTitle = this.JobTitle;
			_tmp.Notes = this.Notes;
			_tmp.IsActive = this.IsActive;
			_tmp.SupervisorFlg = this.SupervisorFlg;
			_tmp.HeadFlg = this.HeadFlg;
			_tmp.MemberTypeFlg = this.MemberTypeFlg;
			
			#region Source Parent Composite Entities
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				_tmp.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.CoControlIdSource != null && existingCopies.Contains(this.CoControlIdSource))
				_tmp.CoControlIdSource = existingCopies[this.CoControlIdSource] as CoControl;
			else
				_tmp.CoControlIdSource = MakeCopyOf(this.CoControlIdSource, existingCopies) as CoControl;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CoExamCommSupervisorCollection = (TList<CoExamCommSupervisor>) MakeCopyOf(this.CoExamCommSupervisorCollection, existingCopies); 
			_tmp.CoStudCheatCollectionGetByCoControlMembHdId = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollectionGetByCoControlMembHdId, existingCopies); 
			_tmp.CoStudCheatCollectionGetByCoControlMembId = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollectionGetByCoControlMembId, existingCopies); 
			_tmp.CoExamCommSupervisorAltCollection = (TList<CoExamCommSupervisorAlt>) MakeCopyOf(this.CoExamCommSupervisorAltCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlMemberColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CoControlMemberColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlMemberColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CoControlMemberColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlMemberColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CoControlMemberColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CoControlMemberEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CoControlMemberEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlMemberColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CoControlMemberColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CoControlMemberEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CoControlMemberEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CoControlMemberEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CoControlMember"/> object.
	/// </remarks>
	public class CoControlMemberEventArgs : System.EventArgs
	{
		private CoControlMemberColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CoControlMemberEventArgs class.
		///</summary>
		public CoControlMemberEventArgs(CoControlMemberColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CoControlMemberEventArgs class.
		///</summary>
		public CoControlMemberEventArgs(CoControlMemberColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CoControlMemberColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CoControlMemberColumn" />
		public CoControlMemberColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CoControlMember related events.
	///</summary>
	public delegate void CoControlMemberEventHandler(object sender, CoControlMemberEventArgs e);
	
	#region CoControlMemberComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CoControlMemberComparer : System.Collections.Generic.IComparer<CoControlMember>
	{
		CoControlMemberColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CoControlMemberComparer"/> class.
        /// </summary>
		public CoControlMemberComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CoControlMemberComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CoControlMemberComparer(CoControlMemberColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CoControlMember"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CoControlMember"/> to compare.</param>
        /// <param name="b">The second <c>CoControlMember</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CoControlMember a, CoControlMember b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CoControlMember entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CoControlMember a, CoControlMember b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CoControlMemberColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CoControlMemberKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CoControlMember"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CoControlMemberKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CoControlMemberKey class.
		/// </summary>
		public CoControlMemberKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CoControlMemberKey class.
		/// </summary>
		public CoControlMemberKey(CoControlMemberBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CoControlMembersId = entity.CoControlMembersId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CoControlMemberKey class.
		/// </summary>
		public CoControlMemberKey(System.Decimal _coControlMembersId)
		{
			#region Init Properties

			this.CoControlMembersId = _coControlMembersId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CoControlMemberBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CoControlMemberBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CoControlMembersId property
		private System.Decimal _coControlMembersId;
		
		/// <summary>
		/// Gets or sets the CoControlMembersId property.
		/// </summary>
		public System.Decimal CoControlMembersId
		{
			get { return _coControlMembersId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CoControlMembersId = value;
				
				_coControlMembersId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CoControlMembersId = ( values["CoControlMembersId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["CoControlMembersId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CoControlMembersId", CoControlMembersId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CoControlMembersId: {0}{1}",
								CoControlMembersId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CoControlMemberColumn Enum
	
	/// <summary>
	/// Enumerate the CoControlMember columns.
	/// </summary>
	[Serializable]
	public enum CoControlMemberColumn : int
	{
		/// <summary>
		/// CoControlMembersId : 
		/// </summary>
		[EnumTextValue("CO_CONTROL_MEMBERS_ID")]
		[ColumnEnum("CO_CONTROL_MEMBERS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		CoControlMembersId = 1,
		/// <summary>
		/// CoControlId : 
		/// </summary>
		[EnumTextValue("CO_CONTROL_ID")]
		[ColumnEnum("CO_CONTROL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoControlId = 2,
		/// <summary>
		/// MemberFlg : 
		/// </summary>
		[EnumTextValue("MEMBER_FLG")]
		[ColumnEnum("MEMBER_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MemberFlg = 3,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaStfMemberId = 4,
		/// <summary>
		/// SaCodeScDegId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SC_DEG_ID")]
		[ColumnEnum("SA_CODE_SC_DEG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeScDegId = 5,
		/// <summary>
		/// MemberNameAr : 
		/// </summary>
		[EnumTextValue("MEMBER_NAME_AR")]
		[ColumnEnum("MEMBER_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MemberNameAr = 6,
		/// <summary>
		/// MemberNameEn : 
		/// </summary>
		[EnumTextValue("MEMBER_NAME_EN")]
		[ColumnEnum("MEMBER_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MemberNameEn = 7,
		/// <summary>
		/// MobNo : 
		/// </summary>
		[EnumTextValue("MOB_NO")]
		[ColumnEnum("MOB_NO", typeof(System.String), System.Data.DbType.String, false, false, true, 12)]
		MobNo = 8,
		/// <summary>
		/// JobTitle : 
		/// </summary>
		[EnumTextValue("JOB_TITLE")]
		[ColumnEnum("JOB_TITLE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		JobTitle = 9,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Notes = 10,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsActive = 11,
		/// <summary>
		/// SupervisorFlg : 
		/// </summary>
		[EnumTextValue("SUPERVISOR_FLG")]
		[ColumnEnum("SUPERVISOR_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SupervisorFlg = 12,
		/// <summary>
		/// HeadFlg : 
		/// </summary>
		[EnumTextValue("HEAD_FLG")]
		[ColumnEnum("HEAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HeadFlg = 13,
		/// <summary>
		/// MemberTypeFlg : 
		/// </summary>
		[EnumTextValue("MEMBER_TYPE_FLG")]
		[ColumnEnum("MEMBER_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MemberTypeFlg = 14
	}//End enum

	#endregion CoControlMemberColumn Enum

} // end namespace
