
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudCourseRegAssessSub.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_COURSE_REG_ASSESS_SUB' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudCourseRegAssessSubBase : EntityBase, IEdStudCourseRegAssessSub, IEntityId<EdStudCourseRegAssessSubKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudCourseRegAssessSubEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudCourseRegAssessSubEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudCourseRegAssessSubEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudCourseRegAssessSub> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegAssessSubEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegAssessSubEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegAssessSubBase"/> instance.
		///</summary>
		public EdStudCourseRegAssessSubBase()
		{
			this.entityData = new EdStudCourseRegAssessSubEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegAssessSubBase"/> instance.
		///</summary>
		///<param name="_edStudCrsRegAssessSub">السلام درجات كويزات x</param>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_edCodeCourseAssessId">اعمال السنة--- ENUM_ID=1</param>
		///<param name="_quiz1"></param>
		///<param name="_quiz2"></param>
		///<param name="_quiz3"></param>
		///<param name="_quiz4"></param>
		///<param name="_quiz5"></param>
		///<param name="_quiz6"></param>
		///<param name="_quiz7"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EdStudCourseRegAssessSubBase(System.Decimal _edStudCrsRegAssessSub, System.Decimal _edStudCourseRegId, 
			System.Decimal _edCodeCourseAssessId, System.Decimal? _quiz1, 
			System.Decimal? _quiz2, System.Decimal? _quiz3, System.Decimal? _quiz4, 
			System.Decimal? _quiz5, System.Decimal? _quiz6, System.Decimal? _quiz7, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new EdStudCourseRegAssessSubEntityData();
			this.backupData = null;

			this.EdStudCrsRegAssessSub = _edStudCrsRegAssessSub;
			this.EdStudCourseRegId = _edStudCourseRegId;
			this.EdCodeCourseAssessId = _edCodeCourseAssessId;
			this.Quiz1 = _quiz1;
			this.Quiz2 = _quiz2;
			this.Quiz3 = _quiz3;
			this.Quiz4 = _quiz4;
			this.Quiz5 = _quiz5;
			this.Quiz6 = _quiz6;
			this.Quiz7 = _quiz7;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudCourseRegAssessSub"/> instance.
		///</summary>
		///<param name="_edStudCrsRegAssessSub">السلام درجات كويزات x</param>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_edCodeCourseAssessId">اعمال السنة--- ENUM_ID=1</param>
		///<param name="_quiz1"></param>
		///<param name="_quiz2"></param>
		///<param name="_quiz3"></param>
		///<param name="_quiz4"></param>
		///<param name="_quiz5"></param>
		///<param name="_quiz6"></param>
		///<param name="_quiz7"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EdStudCourseRegAssessSub CreateEdStudCourseRegAssessSub(System.Decimal _edStudCrsRegAssessSub, System.Decimal _edStudCourseRegId, 
			System.Decimal _edCodeCourseAssessId, System.Decimal? _quiz1, 
			System.Decimal? _quiz2, System.Decimal? _quiz3, System.Decimal? _quiz4, 
			System.Decimal? _quiz5, System.Decimal? _quiz6, System.Decimal? _quiz7, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			EdStudCourseRegAssessSub newEdStudCourseRegAssessSub = new EdStudCourseRegAssessSub();
			newEdStudCourseRegAssessSub.EdStudCrsRegAssessSub = _edStudCrsRegAssessSub;
			newEdStudCourseRegAssessSub.EdStudCourseRegId = _edStudCourseRegId;
			newEdStudCourseRegAssessSub.EdCodeCourseAssessId = _edCodeCourseAssessId;
			newEdStudCourseRegAssessSub.Quiz1 = _quiz1;
			newEdStudCourseRegAssessSub.Quiz2 = _quiz2;
			newEdStudCourseRegAssessSub.Quiz3 = _quiz3;
			newEdStudCourseRegAssessSub.Quiz4 = _quiz4;
			newEdStudCourseRegAssessSub.Quiz5 = _quiz5;
			newEdStudCourseRegAssessSub.Quiz6 = _quiz6;
			newEdStudCourseRegAssessSub.Quiz7 = _quiz7;
			newEdStudCourseRegAssessSub.SeUserId = _seUserId;
			newEdStudCourseRegAssessSub.LastDate = _lastDate;
			return newEdStudCourseRegAssessSub;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudCrsRegAssessSub property. 
		///		السلام درجات كويزات x
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"السلام درجات كويزات x"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudCrsRegAssessSub
		{
			get
			{
				return this.entityData.EdStudCrsRegAssessSub; 
			}
			
			set
			{
				if (this.entityData.EdStudCrsRegAssessSub == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.EdStudCrsRegAssessSub, this.entityData.EdStudCrsRegAssessSub);
				this.entityData.EdStudCrsRegAssessSub = value;
				this.EntityId.EdStudCrsRegAssessSub = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.EdStudCrsRegAssessSub, this.entityData.EdStudCrsRegAssessSub);
				OnPropertyChanged("EdStudCrsRegAssessSub");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_CRS_REG_ASSESS_SUB property.
		///		السلام درجات كويزات x
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_CRS_REG_ASSESS_SUB property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudCrsRegAssessSub
		{
			get { return this.entityData.OriginalEdStudCrsRegAssessSub; }
			set { this.entityData.OriginalEdStudCrsRegAssessSub = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudCourseRegId
		{
			get
			{
				return this.entityData.EdStudCourseRegId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				this.entityData.EdStudCourseRegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				OnPropertyChanged("EdStudCourseRegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseAssessId property. 
		///		اعمال السنة--- ENUM_ID=1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اعمال السنة--- ENUM_ID=1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeCourseAssessId
		{
			get
			{
				return this.entityData.EdCodeCourseAssessId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseAssessId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				this.entityData.EdCodeCourseAssessId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				OnPropertyChanged("EdCodeCourseAssessId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quiz1 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQuiz1Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Quiz1
		{
			get
			{
				return this.entityData.Quiz1; 
			}
			
			set
			{
				if (this.entityData.Quiz1 == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.Quiz1, this.entityData.Quiz1);
				this.entityData.Quiz1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.Quiz1, this.entityData.Quiz1);
				OnPropertyChanged("Quiz1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quiz2 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQuiz2Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Quiz2
		{
			get
			{
				return this.entityData.Quiz2; 
			}
			
			set
			{
				if (this.entityData.Quiz2 == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.Quiz2, this.entityData.Quiz2);
				this.entityData.Quiz2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.Quiz2, this.entityData.Quiz2);
				OnPropertyChanged("Quiz2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quiz3 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQuiz3Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Quiz3
		{
			get
			{
				return this.entityData.Quiz3; 
			}
			
			set
			{
				if (this.entityData.Quiz3 == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.Quiz3, this.entityData.Quiz3);
				this.entityData.Quiz3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.Quiz3, this.entityData.Quiz3);
				OnPropertyChanged("Quiz3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quiz4 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQuiz4Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Quiz4
		{
			get
			{
				return this.entityData.Quiz4; 
			}
			
			set
			{
				if (this.entityData.Quiz4 == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.Quiz4, this.entityData.Quiz4);
				this.entityData.Quiz4 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.Quiz4, this.entityData.Quiz4);
				OnPropertyChanged("Quiz4");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quiz5 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQuiz5Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Quiz5
		{
			get
			{
				return this.entityData.Quiz5; 
			}
			
			set
			{
				if (this.entityData.Quiz5 == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.Quiz5, this.entityData.Quiz5);
				this.entityData.Quiz5 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.Quiz5, this.entityData.Quiz5);
				OnPropertyChanged("Quiz5");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quiz6 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQuiz6Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Quiz6
		{
			get
			{
				return this.entityData.Quiz6; 
			}
			
			set
			{
				if (this.entityData.Quiz6 == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.Quiz6, this.entityData.Quiz6);
				this.entityData.Quiz6 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.Quiz6, this.entityData.Quiz6);
				OnPropertyChanged("Quiz6");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quiz7 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQuiz7Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Quiz7
		{
			get
			{
				return this.entityData.Quiz7; 
			}
			
			set
			{
				if (this.entityData.Quiz7 == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.Quiz7, this.entityData.Quiz7);
				this.entityData.Quiz7 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.Quiz7, this.entityData.Quiz7);
				OnPropertyChanged("Quiz7");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessSubColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessSubColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return entityData.EdCodeCourseAssessIdSource; }
            set { entityData.EdCodeCourseAssessIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return entityData.EdStudCourseRegIdSource; }
            set { entityData.EdStudCourseRegIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_COURSE_REG_ASSESS_SUB"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_CRS_REG_ASSESS_SUB", "ED_STUD_COURSE_REG_ID", "ED_CODE_COURSE_ASSESS_ID", "QUIZ1", "QUIZ2", "QUIZ3", "QUIZ4", "QUIZ5", "QUIZ6", "QUIZ7", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudCourseRegAssessSubEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudCourseRegAssessSub) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudCourseRegAssessSub>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudCourseRegAssessSub);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudCourseRegAssessSub Entity 
		///</summary>
		protected virtual EdStudCourseRegAssessSub Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudCourseRegAssessSub copy = new EdStudCourseRegAssessSub();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudCrsRegAssessSub = this.EdStudCrsRegAssessSub;
					copy.OriginalEdStudCrsRegAssessSub = this.OriginalEdStudCrsRegAssessSub;
				copy.EdStudCourseRegId = this.EdStudCourseRegId;
				copy.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
				copy.Quiz1 = this.Quiz1;
				copy.Quiz2 = this.Quiz2;
				copy.Quiz3 = this.Quiz3;
				copy.Quiz4 = this.Quiz4;
				copy.Quiz5 = this.Quiz5;
				copy.Quiz6 = this.Quiz6;
				copy.Quiz7 = this.Quiz7;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				copy.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				copy.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				copy.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				copy.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegAssessSub Entity 
		///</summary>
		public virtual EdStudCourseRegAssessSub Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegAssessSub Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudCourseRegAssessSub DeepCopy()
		{
			return EntityHelper.Clone<EdStudCourseRegAssessSub>(this as EdStudCourseRegAssessSub);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudCourseRegAssessSubEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudCourseRegAssessSubEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudCourseRegAssessSubEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudCourseRegAssessSubColumn column)
		{
			switch(column)
			{
					case EdStudCourseRegAssessSubColumn.EdStudCrsRegAssessSub:
					return entityData.EdStudCrsRegAssessSub != _originalData.EdStudCrsRegAssessSub;
					case EdStudCourseRegAssessSubColumn.EdStudCourseRegId:
					return entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
					case EdStudCourseRegAssessSubColumn.EdCodeCourseAssessId:
					return entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
					case EdStudCourseRegAssessSubColumn.Quiz1:
					return entityData.Quiz1 != _originalData.Quiz1;
					case EdStudCourseRegAssessSubColumn.Quiz2:
					return entityData.Quiz2 != _originalData.Quiz2;
					case EdStudCourseRegAssessSubColumn.Quiz3:
					return entityData.Quiz3 != _originalData.Quiz3;
					case EdStudCourseRegAssessSubColumn.Quiz4:
					return entityData.Quiz4 != _originalData.Quiz4;
					case EdStudCourseRegAssessSubColumn.Quiz5:
					return entityData.Quiz5 != _originalData.Quiz5;
					case EdStudCourseRegAssessSubColumn.Quiz6:
					return entityData.Quiz6 != _originalData.Quiz6;
					case EdStudCourseRegAssessSubColumn.Quiz7:
					return entityData.Quiz7 != _originalData.Quiz7;
					case EdStudCourseRegAssessSubColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudCourseRegAssessSubColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudCourseRegAssessSubColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudCrsRegAssessSub != _originalData.EdStudCrsRegAssessSub;
			result = result || entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
			result = result || entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
			result = result || entityData.Quiz1 != _originalData.Quiz1;
			result = result || entityData.Quiz2 != _originalData.Quiz2;
			result = result || entityData.Quiz3 != _originalData.Quiz3;
			result = result || entityData.Quiz4 != _originalData.Quiz4;
			result = result || entityData.Quiz5 != _originalData.Quiz5;
			result = result || entityData.Quiz6 != _originalData.Quiz6;
			result = result || entityData.Quiz7 != _originalData.Quiz7;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudCourseRegAssessSub Entity with the original data.
		///</summary>
		public EdStudCourseRegAssessSub GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudCourseRegAssessSub(
				_originalData.EdStudCrsRegAssessSub,
				_originalData.EdStudCourseRegId,
				_originalData.EdCodeCourseAssessId,
				_originalData.Quiz1,
				_originalData.Quiz2,
				_originalData.Quiz3,
				_originalData.Quiz4,
				_originalData.Quiz5,
				_originalData.Quiz6,
				_originalData.Quiz7,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EdStudCourseRegAssessSub)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudCourseRegAssessSubBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudCourseRegAssessSubBase)
				return ValueEquals(this, (EdStudCourseRegAssessSubBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudCourseRegAssessSubBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudCrsRegAssessSub.GetHashCode() ^ 
					this.EdStudCourseRegId.GetHashCode() ^ 
					this.EdCodeCourseAssessId.GetHashCode() ^ 
					((this.Quiz1 == null) ? string.Empty : this.Quiz1.ToString()).GetHashCode() ^ 
					((this.Quiz2 == null) ? string.Empty : this.Quiz2.ToString()).GetHashCode() ^ 
					((this.Quiz3 == null) ? string.Empty : this.Quiz3.ToString()).GetHashCode() ^ 
					((this.Quiz4 == null) ? string.Empty : this.Quiz4.ToString()).GetHashCode() ^ 
					((this.Quiz5 == null) ? string.Empty : this.Quiz5.ToString()).GetHashCode() ^ 
					((this.Quiz6 == null) ? string.Empty : this.Quiz6.ToString()).GetHashCode() ^ 
					((this.Quiz7 == null) ? string.Empty : this.Quiz7.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudCourseRegAssessSubBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudCourseRegAssessSubBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudCourseRegAssessSubBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudCourseRegAssessSubBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudCourseRegAssessSubBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudCourseRegAssessSubBase Object1, EdStudCourseRegAssessSubBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudCrsRegAssessSub != Object2.EdStudCrsRegAssessSub)
				equal = false;
			if (Object1.EdStudCourseRegId != Object2.EdStudCourseRegId)
				equal = false;
			if (Object1.EdCodeCourseAssessId != Object2.EdCodeCourseAssessId)
				equal = false;
			if ( Object1.Quiz1 != null && Object2.Quiz1 != null )
			{
				if (Object1.Quiz1 != Object2.Quiz1)
					equal = false;
			}
			else if (Object1.Quiz1 == null ^ Object2.Quiz1 == null )
			{
				equal = false;
			}
			if ( Object1.Quiz2 != null && Object2.Quiz2 != null )
			{
				if (Object1.Quiz2 != Object2.Quiz2)
					equal = false;
			}
			else if (Object1.Quiz2 == null ^ Object2.Quiz2 == null )
			{
				equal = false;
			}
			if ( Object1.Quiz3 != null && Object2.Quiz3 != null )
			{
				if (Object1.Quiz3 != Object2.Quiz3)
					equal = false;
			}
			else if (Object1.Quiz3 == null ^ Object2.Quiz3 == null )
			{
				equal = false;
			}
			if ( Object1.Quiz4 != null && Object2.Quiz4 != null )
			{
				if (Object1.Quiz4 != Object2.Quiz4)
					equal = false;
			}
			else if (Object1.Quiz4 == null ^ Object2.Quiz4 == null )
			{
				equal = false;
			}
			if ( Object1.Quiz5 != null && Object2.Quiz5 != null )
			{
				if (Object1.Quiz5 != Object2.Quiz5)
					equal = false;
			}
			else if (Object1.Quiz5 == null ^ Object2.Quiz5 == null )
			{
				equal = false;
			}
			if ( Object1.Quiz6 != null && Object2.Quiz6 != null )
			{
				if (Object1.Quiz6 != Object2.Quiz6)
					equal = false;
			}
			else if (Object1.Quiz6 == null ^ Object2.Quiz6 == null )
			{
				equal = false;
			}
			if ( Object1.Quiz7 != null && Object2.Quiz7 != null )
			{
				if (Object1.Quiz7 != Object2.Quiz7)
					equal = false;
			}
			else if (Object1.Quiz7 == null ^ Object2.Quiz7 == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudCourseRegAssessSubBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudCourseRegAssessSubComparer GetComparer()
        {
            return new EdStudCourseRegAssessSubComparer();
        }
        */

        // Comparer delegates back to EdStudCourseRegAssessSub
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudCourseRegAssessSub rhs, EdStudCourseRegAssessSubColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudCourseRegAssessSubColumn.EdStudCrsRegAssessSub:
            		return this.EdStudCrsRegAssessSub.CompareTo(rhs.EdStudCrsRegAssessSub);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.EdStudCourseRegId:
            		return this.EdStudCourseRegId.CompareTo(rhs.EdStudCourseRegId);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.EdCodeCourseAssessId:
            		return this.EdCodeCourseAssessId.CompareTo(rhs.EdCodeCourseAssessId);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.Quiz1:
            		return this.Quiz1.Value.CompareTo(rhs.Quiz1.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.Quiz2:
            		return this.Quiz2.Value.CompareTo(rhs.Quiz2.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.Quiz3:
            		return this.Quiz3.Value.CompareTo(rhs.Quiz3.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.Quiz4:
            		return this.Quiz4.Value.CompareTo(rhs.Quiz4.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.Quiz5:
            		return this.Quiz5.Value.CompareTo(rhs.Quiz5.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.Quiz6:
            		return this.Quiz6.Value.CompareTo(rhs.Quiz6.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.Quiz7:
            		return this.Quiz7.Value.CompareTo(rhs.Quiz7.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessSubColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudCourseRegAssessSubKey> Members
		
		// member variable for the EntityId property
		private EdStudCourseRegAssessSubKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudCourseRegAssessSubKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudCourseRegAssessSubKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudCourseRegAssessSub")
					.Append("|").Append( this.EdStudCrsRegAssessSub.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- EdStudCrsRegAssessSub: {0}{12}- EdStudCourseRegId: {1}{12}- EdCodeCourseAssessId: {2}{12}- Quiz1: {3}{12}- Quiz2: {4}{12}- Quiz3: {5}{12}- Quiz4: {6}{12}- Quiz5: {7}{12}- Quiz6: {8}{12}- Quiz7: {9}{12}- SeUserId: {10}{12}- LastDate: {11}{12}{14}", 
				this.EdStudCrsRegAssessSub,
				this.EdStudCourseRegId,
				this.EdCodeCourseAssessId,
				(this.Quiz1 == null) ? string.Empty : this.Quiz1.ToString(),
				(this.Quiz2 == null) ? string.Empty : this.Quiz2.ToString(),
				(this.Quiz3 == null) ? string.Empty : this.Quiz3.ToString(),
				(this.Quiz4 == null) ? string.Empty : this.Quiz4.ToString(),
				(this.Quiz5 == null) ? string.Empty : this.Quiz5.ToString(),
				(this.Quiz6 == null) ? string.Empty : this.Quiz6.ToString(),
				(this.Quiz7 == null) ? string.Empty : this.Quiz7.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_COURSE_REG_ASSESS_SUB' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudCourseRegAssessSubEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_CRS_REG_ASSESS_SUB : السلام درجات كويزات x
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_COURSE_REG_ASSESS_SUB"</remarks>
		public System.Decimal EdStudCrsRegAssessSub;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudCrsRegAssessSub;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_COURSE_REG_ID : 
		/// </summary>
		public System.Decimal		  EdStudCourseRegId = 0.0m;
		
		/// <summary>
		/// ED_CODE_COURSE_ASSESS_ID : اعمال السنة--- ENUM_ID=1
		/// </summary>
		public System.Decimal		  EdCodeCourseAssessId = 0.0m;
		
		/// <summary>
		/// QUIZ1 : 
		/// </summary>
		public System.Decimal?		  Quiz1 = null;
		
		/// <summary>
		/// QUIZ2 : 
		/// </summary>
		public System.Decimal?		  Quiz2 = null;
		
		/// <summary>
		/// QUIZ3 : 
		/// </summary>
		public System.Decimal?		  Quiz3 = null;
		
		/// <summary>
		/// QUIZ4 : 
		/// </summary>
		public System.Decimal?		  Quiz4 = null;
		
		/// <summary>
		/// QUIZ5 : 
		/// </summary>
		public System.Decimal?		  Quiz5 = null;
		
		/// <summary>
		/// QUIZ6 : 
		/// </summary>
		public System.Decimal?		  Quiz6 = null;
		
		/// <summary>
		/// QUIZ7 : 
		/// </summary>
		public System.Decimal?		  Quiz7 = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeCourseAssess _edCodeCourseAssessIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return this._edCodeCourseAssessIdSource; }
            set { this._edCodeCourseAssessIdSource = value; }
      	}
		private EdStudCourseReg _edStudCourseRegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return this._edStudCourseRegIdSource; }
            set { this._edStudCourseRegIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudCourseRegAssessSubEntityData _tmp = new EdStudCourseRegAssessSubEntityData();
						
			_tmp.EdStudCrsRegAssessSub = this.EdStudCrsRegAssessSub;
			_tmp.OriginalEdStudCrsRegAssessSub = this.OriginalEdStudCrsRegAssessSub;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.Quiz1 = this.Quiz1;
			_tmp.Quiz2 = this.Quiz2;
			_tmp.Quiz3 = this.Quiz3;
			_tmp.Quiz4 = this.Quiz4;
			_tmp.Quiz5 = this.Quiz5;
			_tmp.Quiz6 = this.Quiz6;
			_tmp.Quiz7 = this.Quiz7;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseAssessIdSource != null)
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource) as EdCodeCourseAssess;
			if (this.EdStudCourseRegIdSource != null)
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource) as EdStudCourseReg;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudCourseRegAssessSubEntityData _tmp = new EdStudCourseRegAssessSubEntityData();
						
			_tmp.EdStudCrsRegAssessSub = this.EdStudCrsRegAssessSub;
			_tmp.OriginalEdStudCrsRegAssessSub = this.OriginalEdStudCrsRegAssessSub;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.Quiz1 = this.Quiz1;
			_tmp.Quiz2 = this.Quiz2;
			_tmp.Quiz3 = this.Quiz3;
			_tmp.Quiz4 = this.Quiz4;
			_tmp.Quiz5 = this.Quiz5;
			_tmp.Quiz6 = this.Quiz6;
			_tmp.Quiz7 = this.Quiz7;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				_tmp.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				_tmp.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessSubColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudCourseRegAssessSubColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessSubColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudCourseRegAssessSubColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessSubColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudCourseRegAssessSubColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegAssessSubEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegAssessSubEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessSubColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudCourseRegAssessSubColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegAssessSubEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegAssessSubEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudCourseRegAssessSubEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudCourseRegAssessSub"/> object.
	/// </remarks>
	public class EdStudCourseRegAssessSubEventArgs : System.EventArgs
	{
		private EdStudCourseRegAssessSubColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegAssessSubEventArgs class.
		///</summary>
		public EdStudCourseRegAssessSubEventArgs(EdStudCourseRegAssessSubColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegAssessSubEventArgs class.
		///</summary>
		public EdStudCourseRegAssessSubEventArgs(EdStudCourseRegAssessSubColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudCourseRegAssessSubColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudCourseRegAssessSubColumn" />
		public EdStudCourseRegAssessSubColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudCourseRegAssessSub related events.
	///</summary>
	public delegate void EdStudCourseRegAssessSubEventHandler(object sender, EdStudCourseRegAssessSubEventArgs e);
	
	#region EdStudCourseRegAssessSubComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudCourseRegAssessSubComparer : System.Collections.Generic.IComparer<EdStudCourseRegAssessSub>
	{
		EdStudCourseRegAssessSubColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegAssessSubComparer"/> class.
        /// </summary>
		public EdStudCourseRegAssessSubComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegAssessSubComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudCourseRegAssessSubComparer(EdStudCourseRegAssessSubColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudCourseRegAssessSub"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudCourseRegAssessSub"/> to compare.</param>
        /// <param name="b">The second <c>EdStudCourseRegAssessSub</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudCourseRegAssessSub a, EdStudCourseRegAssessSub b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudCourseRegAssessSub entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudCourseRegAssessSub a, EdStudCourseRegAssessSub b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudCourseRegAssessSubColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudCourseRegAssessSubKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudCourseRegAssessSub"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudCourseRegAssessSubKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubKey class.
		/// </summary>
		public EdStudCourseRegAssessSubKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubKey class.
		/// </summary>
		public EdStudCourseRegAssessSubKey(EdStudCourseRegAssessSubBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudCrsRegAssessSub = entity.EdStudCrsRegAssessSub;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessSubKey class.
		/// </summary>
		public EdStudCourseRegAssessSubKey(System.Decimal _edStudCrsRegAssessSub)
		{
			#region Init Properties

			this.EdStudCrsRegAssessSub = _edStudCrsRegAssessSub;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudCourseRegAssessSubBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudCourseRegAssessSubBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudCrsRegAssessSub property
		private System.Decimal _edStudCrsRegAssessSub;
		
		/// <summary>
		/// Gets or sets the EdStudCrsRegAssessSub property.
		/// </summary>
		public System.Decimal EdStudCrsRegAssessSub
		{
			get { return _edStudCrsRegAssessSub; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudCrsRegAssessSub = value;
				
				_edStudCrsRegAssessSub = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudCrsRegAssessSub = ( values["EdStudCrsRegAssessSub"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudCrsRegAssessSub"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudCrsRegAssessSub", EdStudCrsRegAssessSub);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudCrsRegAssessSub: {0}{1}",
								EdStudCrsRegAssessSub,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudCourseRegAssessSubColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudCourseRegAssessSub columns.
	/// </summary>
	[Serializable]
	public enum EdStudCourseRegAssessSubColumn : int
	{
		/// <summary>
		/// EdStudCrsRegAssessSub : السلام درجات كويزات x
		/// </summary>
		[EnumTextValue("ED_STUD_CRS_REG_ASSESS_SUB")]
		[ColumnEnum("ED_STUD_CRS_REG_ASSESS_SUB", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudCrsRegAssessSub = 1,
		/// <summary>
		/// EdStudCourseRegId : 
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudCourseRegId = 2,
		/// <summary>
		/// EdCodeCourseAssessId : اعمال السنة--- ENUM_ID=1
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_ASSESS_ID")]
		[ColumnEnum("ED_CODE_COURSE_ASSESS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeCourseAssessId = 3,
		/// <summary>
		/// Quiz1 : 
		/// </summary>
		[EnumTextValue("QUIZ1")]
		[ColumnEnum("QUIZ1", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Quiz1 = 4,
		/// <summary>
		/// Quiz2 : 
		/// </summary>
		[EnumTextValue("QUIZ2")]
		[ColumnEnum("QUIZ2", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Quiz2 = 5,
		/// <summary>
		/// Quiz3 : 
		/// </summary>
		[EnumTextValue("QUIZ3")]
		[ColumnEnum("QUIZ3", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Quiz3 = 6,
		/// <summary>
		/// Quiz4 : 
		/// </summary>
		[EnumTextValue("QUIZ4")]
		[ColumnEnum("QUIZ4", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Quiz4 = 7,
		/// <summary>
		/// Quiz5 : 
		/// </summary>
		[EnumTextValue("QUIZ5")]
		[ColumnEnum("QUIZ5", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Quiz5 = 8,
		/// <summary>
		/// Quiz6 : 
		/// </summary>
		[EnumTextValue("QUIZ6")]
		[ColumnEnum("QUIZ6", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Quiz6 = 9,
		/// <summary>
		/// Quiz7 : 
		/// </summary>
		[EnumTextValue("QUIZ7")]
		[ColumnEnum("QUIZ7", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Quiz7 = 10,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 12
	}//End enum

	#endregion EdStudCourseRegAssessSubColumn Enum

} // end namespace
