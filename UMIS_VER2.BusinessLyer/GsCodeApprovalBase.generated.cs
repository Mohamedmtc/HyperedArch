
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsCodeApproval.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_CODE_APPROVAL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsCodeApprovalBase : EntityBase, IGsCodeApproval, IEntityId<GsCodeApprovalKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsCodeApprovalEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsCodeApprovalEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsCodeApprovalEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsCodeApproval> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCodeApprovalEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCodeApprovalEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsCodeApprovalBase"/> instance.
		///</summary>
		public GsCodeApprovalBase()
		{
			this.entityData = new GsCodeApprovalEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsCodeApprovalBase"/> instance.
		///</summary>
		///<param name="_gsCodeApprovalId"></param>
		///<param name="_approvalDescrAr"></param>
		///<param name="_approvalDescrEn"></param>
		///<param name="_approvalCode"></param>
		///<param name="_isDelegationRequired"></param>
		///<param name="_hasResolution"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_approvalOrader"></param>
		///<param name="_seCodeUserTypeId"></param>
		public GsCodeApprovalBase(System.Decimal _gsCodeApprovalId, System.String _approvalDescrAr, 
			System.String _approvalDescrEn, System.String _approvalCode, System.Decimal _isDelegationRequired, 
			System.Decimal _hasResolution, System.Decimal? _asFacultyInfoId, System.Decimal _approvalOrader, 
			System.Decimal? _seCodeUserTypeId)
		{
			this.entityData = new GsCodeApprovalEntityData();
			this.backupData = null;

			this.GsCodeApprovalId = _gsCodeApprovalId;
			this.ApprovalDescrAr = _approvalDescrAr;
			this.ApprovalDescrEn = _approvalDescrEn;
			this.ApprovalCode = _approvalCode;
			this.IsDelegationRequired = _isDelegationRequired;
			this.HasResolution = _hasResolution;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.ApprovalOrader = _approvalOrader;
			this.SeCodeUserTypeId = _seCodeUserTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsCodeApproval"/> instance.
		///</summary>
		///<param name="_gsCodeApprovalId"></param>
		///<param name="_approvalDescrAr"></param>
		///<param name="_approvalDescrEn"></param>
		///<param name="_approvalCode"></param>
		///<param name="_isDelegationRequired"></param>
		///<param name="_hasResolution"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_approvalOrader"></param>
		///<param name="_seCodeUserTypeId"></param>
		public static GsCodeApproval CreateGsCodeApproval(System.Decimal _gsCodeApprovalId, System.String _approvalDescrAr, 
			System.String _approvalDescrEn, System.String _approvalCode, System.Decimal _isDelegationRequired, 
			System.Decimal _hasResolution, System.Decimal? _asFacultyInfoId, System.Decimal _approvalOrader, 
			System.Decimal? _seCodeUserTypeId)
		{
			GsCodeApproval newGsCodeApproval = new GsCodeApproval();
			newGsCodeApproval.GsCodeApprovalId = _gsCodeApprovalId;
			newGsCodeApproval.ApprovalDescrAr = _approvalDescrAr;
			newGsCodeApproval.ApprovalDescrEn = _approvalDescrEn;
			newGsCodeApproval.ApprovalCode = _approvalCode;
			newGsCodeApproval.IsDelegationRequired = _isDelegationRequired;
			newGsCodeApproval.HasResolution = _hasResolution;
			newGsCodeApproval.AsFacultyInfoId = _asFacultyInfoId;
			newGsCodeApproval.ApprovalOrader = _approvalOrader;
			newGsCodeApproval.SeCodeUserTypeId = _seCodeUserTypeId;
			return newGsCodeApproval;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsCodeApprovalId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsCodeApprovalId
		{
			get
			{
				return this.entityData.GsCodeApprovalId; 
			}
			
			set
			{
				if (this.entityData.GsCodeApprovalId == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.GsCodeApprovalId, this.entityData.GsCodeApprovalId);
				this.entityData.GsCodeApprovalId = value;
				this.EntityId.GsCodeApprovalId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.GsCodeApprovalId, this.entityData.GsCodeApprovalId);
				OnPropertyChanged("GsCodeApprovalId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_CODE_APPROVAL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GS_CODE_APPROVAL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsCodeApprovalId
		{
			get { return this.entityData.OriginalGsCodeApprovalId; }
			set { this.entityData.OriginalGsCodeApprovalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovalDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String ApprovalDescrAr
		{
			get
			{
				return this.entityData.ApprovalDescrAr; 
			}
			
			set
			{
				if (this.entityData.ApprovalDescrAr == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.ApprovalDescrAr, this.entityData.ApprovalDescrAr);
				this.entityData.ApprovalDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.ApprovalDescrAr, this.entityData.ApprovalDescrAr);
				OnPropertyChanged("ApprovalDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovalDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String ApprovalDescrEn
		{
			get
			{
				return this.entityData.ApprovalDescrEn; 
			}
			
			set
			{
				if (this.entityData.ApprovalDescrEn == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.ApprovalDescrEn, this.entityData.ApprovalDescrEn);
				this.entityData.ApprovalDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.ApprovalDescrEn, this.entityData.ApprovalDescrEn);
				OnPropertyChanged("ApprovalDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String ApprovalCode
		{
			get
			{
				return this.entityData.ApprovalCode; 
			}
			
			set
			{
				if (this.entityData.ApprovalCode == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.ApprovalCode, this.entityData.ApprovalCode);
				this.entityData.ApprovalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.ApprovalCode, this.entityData.ApprovalCode);
				OnPropertyChanged("ApprovalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDelegationRequired property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsDelegationRequired
		{
			get
			{
				return this.entityData.IsDelegationRequired; 
			}
			
			set
			{
				if (this.entityData.IsDelegationRequired == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.IsDelegationRequired, this.entityData.IsDelegationRequired);
				this.entityData.IsDelegationRequired = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.IsDelegationRequired, this.entityData.IsDelegationRequired);
				OnPropertyChanged("IsDelegationRequired");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HasResolution property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal HasResolution
		{
			get
			{
				return this.entityData.HasResolution; 
			}
			
			set
			{
				if (this.entityData.HasResolution == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.HasResolution, this.entityData.HasResolution);
				this.entityData.HasResolution = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.HasResolution, this.entityData.HasResolution);
				OnPropertyChanged("HasResolution");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovalOrader property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ApprovalOrader
		{
			get
			{
				return this.entityData.ApprovalOrader; 
			}
			
			set
			{
				if (this.entityData.ApprovalOrader == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.ApprovalOrader, this.entityData.ApprovalOrader);
				this.entityData.ApprovalOrader = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.ApprovalOrader, this.entityData.ApprovalOrader);
				OnPropertyChanged("ApprovalOrader");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeCodeUserTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeCodeUserTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeCodeUserTypeId
		{
			get
			{
				return this.entityData.SeCodeUserTypeId; 
			}
			
			set
			{
				if (this.entityData.SeCodeUserTypeId == value)
					return;
					
				OnColumnChanging(GsCodeApprovalColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				this.entityData.SeCodeUserTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeApprovalColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				OnPropertyChanged("SeCodeUserTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return entityData.SeCodeUserTypeIdSource; }
            set { entityData.SeCodeUserTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgThesisStudApprove objects
		///	which are related to this object through the relation FK_PG_THESIS_STUD_APPROVE_GS_CODE_APPROVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStudApprove> PgThesisStudApproveCollection
		{
			get { return entityData.PgThesisStudApproveCollection; }
			set { entityData.PgThesisStudApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudViol objects
		///	which are related to this object through the relation FK_ED_STUD_VIOL_GS_CODE_APPROVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudViol> EdStudViolCollection
		{
			get { return entityData.EdStudViolCollection; }
			set { entityData.EdStudViolCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCdeApprovalPnlty objects
		///	which are related to this object through the relation FK_GS_CDE_APPROVAL_PNLTY_GS_CODE_APPROVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCdeApprovalPnlty> GsCdeApprovalPnltyCollection
		{
			get { return entityData.GsCdeApprovalPnltyCollection; }
			set { entityData.GsCdeApprovalPnltyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCodeApprovalListD objects
		///	which are related to this object through the relation FK_GS_CODE_APPROVAL_LIST_D_GS_CODE_APPROVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCodeApprovalListD> GsCodeApprovalListDCollection
		{
			get { return entityData.GsCodeApprovalListDCollection; }
			set { entityData.GsCodeApprovalListDCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisCommApprove objects
		///	which are related to this object through the relation FK_PG_THESIS_COMM_APPROVE_GS_CODE_APPROVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisCommApprove> PgThesisCommApproveCollection
		{
			get { return entityData.PgThesisCommApproveCollection; }
			set { entityData.PgThesisCommApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisSupervisorCommApprove objects
		///	which are related to this object through the relation FK_PG_THESIS_SUPERVISOR_COMM_APPROVE_GS_CODE_APPROVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisSupervisorCommApprove> PgThesisSupervisorCommApproveCollection
		{
			get { return entityData.PgThesisSupervisorCommApproveCollection; }
			set { entityData.PgThesisSupervisorCommApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCodeApprovalFaculty objects
		///	which are related to this object through the relation FK_GS_CODE_APPROVAL_FACULTY_GS_CODE_APPROVAL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCodeApprovalFaculty> GsCodeApprovalFacultyCollection
		{
			get { return entityData.GsCodeApprovalFacultyCollection; }
			set { entityData.GsCodeApprovalFacultyCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ApprovalDescrAr", "Approval Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ApprovalDescrAr", "Approval Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ApprovalDescrEn", "Approval Descr En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ApprovalCode", "Approval Code", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_CODE_APPROVAL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_CODE_APPROVAL_ID", "APPROVAL_DESCR_AR", "APPROVAL_DESCR_EN", "APPROVAL_CODE", "IS_DELEGATION_REQUIRED", "HAS_RESOLUTION", "AS_FACULTY_INFO_ID", "APPROVAL_ORADER", "SE_CODE_USER_TYPE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsCodeApprovalEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsCodeApproval) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsCodeApproval>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsCodeApproval);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsCodeApproval Entity 
		///</summary>
		protected virtual GsCodeApproval Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsCodeApproval copy = new GsCodeApproval();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsCodeApprovalId = this.GsCodeApprovalId;
					copy.OriginalGsCodeApprovalId = this.OriginalGsCodeApprovalId;
				copy.ApprovalDescrAr = this.ApprovalDescrAr;
				copy.ApprovalDescrEn = this.ApprovalDescrEn;
				copy.ApprovalCode = this.ApprovalCode;
				copy.IsDelegationRequired = this.IsDelegationRequired;
				copy.HasResolution = this.HasResolution;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.ApprovalOrader = this.ApprovalOrader;
				copy.SeCodeUserTypeId = this.SeCodeUserTypeId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				copy.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				copy.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
		
			//deep copy nested objects
			copy.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection, existingCopies); 
			copy.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection, existingCopies); 
			copy.GsCdeApprovalPnltyCollection = (TList<GsCdeApprovalPnlty>) MakeCopyOf(this.GsCdeApprovalPnltyCollection, existingCopies); 
			copy.GsCodeApprovalListDCollection = (TList<GsCodeApprovalListD>) MakeCopyOf(this.GsCodeApprovalListDCollection, existingCopies); 
			copy.PgThesisCommApproveCollection = (TList<PgThesisCommApprove>) MakeCopyOf(this.PgThesisCommApproveCollection, existingCopies); 
			copy.PgThesisSupervisorCommApproveCollection = (TList<PgThesisSupervisorCommApprove>) MakeCopyOf(this.PgThesisSupervisorCommApproveCollection, existingCopies); 
			copy.GsCodeApprovalFacultyCollection = (TList<GsCodeApprovalFaculty>) MakeCopyOf(this.GsCodeApprovalFacultyCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsCodeApproval Entity 
		///</summary>
		public virtual GsCodeApproval Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsCodeApproval Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsCodeApproval DeepCopy()
		{
			return EntityHelper.Clone<GsCodeApproval>(this as GsCodeApproval);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsCodeApprovalEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsCodeApprovalEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsCodeApprovalEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsCodeApprovalColumn column)
		{
			switch(column)
			{
					case GsCodeApprovalColumn.GsCodeApprovalId:
					return entityData.GsCodeApprovalId != _originalData.GsCodeApprovalId;
					case GsCodeApprovalColumn.ApprovalDescrAr:
					return entityData.ApprovalDescrAr != _originalData.ApprovalDescrAr;
					case GsCodeApprovalColumn.ApprovalDescrEn:
					return entityData.ApprovalDescrEn != _originalData.ApprovalDescrEn;
					case GsCodeApprovalColumn.ApprovalCode:
					return entityData.ApprovalCode != _originalData.ApprovalCode;
					case GsCodeApprovalColumn.IsDelegationRequired:
					return entityData.IsDelegationRequired != _originalData.IsDelegationRequired;
					case GsCodeApprovalColumn.HasResolution:
					return entityData.HasResolution != _originalData.HasResolution;
					case GsCodeApprovalColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case GsCodeApprovalColumn.ApprovalOrader:
					return entityData.ApprovalOrader != _originalData.ApprovalOrader;
					case GsCodeApprovalColumn.SeCodeUserTypeId:
					return entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsCodeApprovalColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsCodeApprovalId != _originalData.GsCodeApprovalId;
			result = result || entityData.ApprovalDescrAr != _originalData.ApprovalDescrAr;
			result = result || entityData.ApprovalDescrEn != _originalData.ApprovalDescrEn;
			result = result || entityData.ApprovalCode != _originalData.ApprovalCode;
			result = result || entityData.IsDelegationRequired != _originalData.IsDelegationRequired;
			result = result || entityData.HasResolution != _originalData.HasResolution;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.ApprovalOrader != _originalData.ApprovalOrader;
			result = result || entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
			return result;
		}	
		
		///<summary>
		///  Returns a GsCodeApproval Entity with the original data.
		///</summary>
		public GsCodeApproval GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsCodeApproval(
				_originalData.GsCodeApprovalId,
				_originalData.ApprovalDescrAr,
				_originalData.ApprovalDescrEn,
				_originalData.ApprovalCode,
				_originalData.IsDelegationRequired,
				_originalData.HasResolution,
				_originalData.AsFacultyInfoId,
				_originalData.ApprovalOrader,
				_originalData.SeCodeUserTypeId
				);
				
			return (GsCodeApproval)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsCodeApprovalBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsCodeApprovalBase)
				return ValueEquals(this, (GsCodeApprovalBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsCodeApprovalBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsCodeApprovalId.GetHashCode() ^ 
					this.ApprovalDescrAr.GetHashCode() ^ 
					((this.ApprovalDescrEn == null) ? string.Empty : this.ApprovalDescrEn.ToString()).GetHashCode() ^ 
					((this.ApprovalCode == null) ? string.Empty : this.ApprovalCode.ToString()).GetHashCode() ^ 
					this.IsDelegationRequired.GetHashCode() ^ 
					this.HasResolution.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.ApprovalOrader.GetHashCode() ^ 
					((this.SeCodeUserTypeId == null) ? string.Empty : this.SeCodeUserTypeId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsCodeApprovalBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsCodeApprovalBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsCodeApprovalBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsCodeApprovalBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsCodeApprovalBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsCodeApprovalBase Object1, GsCodeApprovalBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsCodeApprovalId != Object2.GsCodeApprovalId)
				equal = false;
			if (Object1.ApprovalDescrAr != Object2.ApprovalDescrAr)
				equal = false;
			if ( Object1.ApprovalDescrEn != null && Object2.ApprovalDescrEn != null )
			{
				if (Object1.ApprovalDescrEn != Object2.ApprovalDescrEn)
					equal = false;
			}
			else if (Object1.ApprovalDescrEn == null ^ Object2.ApprovalDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.ApprovalCode != null && Object2.ApprovalCode != null )
			{
				if (Object1.ApprovalCode != Object2.ApprovalCode)
					equal = false;
			}
			else if (Object1.ApprovalCode == null ^ Object2.ApprovalCode == null )
			{
				equal = false;
			}
			if (Object1.IsDelegationRequired != Object2.IsDelegationRequired)
				equal = false;
			if (Object1.HasResolution != Object2.HasResolution)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.ApprovalOrader != Object2.ApprovalOrader)
				equal = false;
			if ( Object1.SeCodeUserTypeId != null && Object2.SeCodeUserTypeId != null )
			{
				if (Object1.SeCodeUserTypeId != Object2.SeCodeUserTypeId)
					equal = false;
			}
			else if (Object1.SeCodeUserTypeId == null ^ Object2.SeCodeUserTypeId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsCodeApprovalBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsCodeApprovalComparer GetComparer()
        {
            return new GsCodeApprovalComparer();
        }
        */

        // Comparer delegates back to GsCodeApproval
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsCodeApproval rhs, GsCodeApprovalColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsCodeApprovalColumn.GsCodeApprovalId:
            		return this.GsCodeApprovalId.CompareTo(rhs.GsCodeApprovalId);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.ApprovalDescrAr:
            		return this.ApprovalDescrAr.CompareTo(rhs.ApprovalDescrAr);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.ApprovalDescrEn:
            		return this.ApprovalDescrEn.CompareTo(rhs.ApprovalDescrEn);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.ApprovalCode:
            		return this.ApprovalCode.CompareTo(rhs.ApprovalCode);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.IsDelegationRequired:
            		return this.IsDelegationRequired.CompareTo(rhs.IsDelegationRequired);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.HasResolution:
            		return this.HasResolution.CompareTo(rhs.HasResolution);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.ApprovalOrader:
            		return this.ApprovalOrader.CompareTo(rhs.ApprovalOrader);
            		
            		                 
            	
            	
            	case GsCodeApprovalColumn.SeCodeUserTypeId:
            		return this.SeCodeUserTypeId.Value.CompareTo(rhs.SeCodeUserTypeId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsCodeApprovalKey> Members
		
		// member variable for the EntityId property
		private GsCodeApprovalKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsCodeApprovalKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsCodeApprovalKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsCodeApproval")
					.Append("|").Append( this.GsCodeApprovalId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- GsCodeApprovalId: {0}{9}- ApprovalDescrAr: {1}{9}- ApprovalDescrEn: {2}{9}- ApprovalCode: {3}{9}- IsDelegationRequired: {4}{9}- HasResolution: {5}{9}- AsFacultyInfoId: {6}{9}- ApprovalOrader: {7}{9}- SeCodeUserTypeId: {8}{9}{11}", 
				this.GsCodeApprovalId,
				this.ApprovalDescrAr,
				(this.ApprovalDescrEn == null) ? string.Empty : this.ApprovalDescrEn.ToString(),
				(this.ApprovalCode == null) ? string.Empty : this.ApprovalCode.ToString(),
				this.IsDelegationRequired,
				this.HasResolution,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.ApprovalOrader,
				(this.SeCodeUserTypeId == null) ? string.Empty : this.SeCodeUserTypeId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_CODE_APPROVAL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsCodeApprovalEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_CODE_APPROVAL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_CODE_APPROVAL"</remarks>
		public System.Decimal GsCodeApprovalId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsCodeApprovalId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// APPROVAL_DESCR_AR : 
		/// </summary>
		public System.String		  ApprovalDescrAr = string.Empty;
		
		/// <summary>
		/// APPROVAL_DESCR_EN : 
		/// </summary>
		public System.String		  ApprovalDescrEn = null;
		
		/// <summary>
		/// APPROVAL_CODE : 
		/// </summary>
		public System.String		  ApprovalCode = null;
		
		/// <summary>
		/// IS_DELEGATION_REQUIRED : 
		/// </summary>
		public System.Decimal		  IsDelegationRequired = 0.0m;
		
		/// <summary>
		/// HAS_RESOLUTION : 
		/// </summary>
		public System.Decimal		  HasResolution = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// APPROVAL_ORADER : 
		/// </summary>
		public System.Decimal		  ApprovalOrader = 0.0m;
		
		/// <summary>
		/// SE_CODE_USER_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  SeCodeUserTypeId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private SeCodeUserType _seCodeUserTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return this._seCodeUserTypeIdSource; }
            set { this._seCodeUserTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgThesisStudApproveCollection
		
		private TList<PgThesisStudApprove> _pgThesisStudApproveGsCodeApprovalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStudApproveGsCodeApprovalId
		/// </summary>
		
		public TList<PgThesisStudApprove> PgThesisStudApproveCollection
		{
			get
			{
				if (_pgThesisStudApproveGsCodeApprovalId == null)
				{
				_pgThesisStudApproveGsCodeApprovalId = new TList<PgThesisStudApprove>();
				}
	
				return _pgThesisStudApproveGsCodeApprovalId;
			}
			set { _pgThesisStudApproveGsCodeApprovalId = value; }
		}
		
		#endregion

		#region EdStudViolCollection
		
		private TList<EdStudViol> _edStudViolGsCodeApprovalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudViolGsCodeApprovalId
		/// </summary>
		
		public TList<EdStudViol> EdStudViolCollection
		{
			get
			{
				if (_edStudViolGsCodeApprovalId == null)
				{
				_edStudViolGsCodeApprovalId = new TList<EdStudViol>();
				}
	
				return _edStudViolGsCodeApprovalId;
			}
			set { _edStudViolGsCodeApprovalId = value; }
		}
		
		#endregion

		#region GsCdeApprovalPnltyCollection
		
		private TList<GsCdeApprovalPnlty> _gsCdeApprovalPnltyGsCodeApprovalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCdeApprovalPnltyGsCodeApprovalId
		/// </summary>
		
		public TList<GsCdeApprovalPnlty> GsCdeApprovalPnltyCollection
		{
			get
			{
				if (_gsCdeApprovalPnltyGsCodeApprovalId == null)
				{
				_gsCdeApprovalPnltyGsCodeApprovalId = new TList<GsCdeApprovalPnlty>();
				}
	
				return _gsCdeApprovalPnltyGsCodeApprovalId;
			}
			set { _gsCdeApprovalPnltyGsCodeApprovalId = value; }
		}
		
		#endregion

		#region GsCodeApprovalListDCollection
		
		private TList<GsCodeApprovalListD> _gsCodeApprovalListDGsCodeApprovalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCodeApprovalListDGsCodeApprovalId
		/// </summary>
		
		public TList<GsCodeApprovalListD> GsCodeApprovalListDCollection
		{
			get
			{
				if (_gsCodeApprovalListDGsCodeApprovalId == null)
				{
				_gsCodeApprovalListDGsCodeApprovalId = new TList<GsCodeApprovalListD>();
				}
	
				return _gsCodeApprovalListDGsCodeApprovalId;
			}
			set { _gsCodeApprovalListDGsCodeApprovalId = value; }
		}
		
		#endregion

		#region PgThesisCommApproveCollection
		
		private TList<PgThesisCommApprove> _pgThesisCommApproveGsCodeApprovalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisCommApproveGsCodeApprovalId
		/// </summary>
		
		public TList<PgThesisCommApprove> PgThesisCommApproveCollection
		{
			get
			{
				if (_pgThesisCommApproveGsCodeApprovalId == null)
				{
				_pgThesisCommApproveGsCodeApprovalId = new TList<PgThesisCommApprove>();
				}
	
				return _pgThesisCommApproveGsCodeApprovalId;
			}
			set { _pgThesisCommApproveGsCodeApprovalId = value; }
		}
		
		#endregion

		#region PgThesisSupervisorCommApproveCollection
		
		private TList<PgThesisSupervisorCommApprove> _pgThesisSupervisorCommApproveGsCodeApprovalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisSupervisorCommApproveGsCodeApprovalId
		/// </summary>
		
		public TList<PgThesisSupervisorCommApprove> PgThesisSupervisorCommApproveCollection
		{
			get
			{
				if (_pgThesisSupervisorCommApproveGsCodeApprovalId == null)
				{
				_pgThesisSupervisorCommApproveGsCodeApprovalId = new TList<PgThesisSupervisorCommApprove>();
				}
	
				return _pgThesisSupervisorCommApproveGsCodeApprovalId;
			}
			set { _pgThesisSupervisorCommApproveGsCodeApprovalId = value; }
		}
		
		#endregion

		#region GsCodeApprovalFacultyCollection
		
		private TList<GsCodeApprovalFaculty> _gsCodeApprovalFacultyGsCodeApprovalId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCodeApprovalFacultyGsCodeApprovalId
		/// </summary>
		
		public TList<GsCodeApprovalFaculty> GsCodeApprovalFacultyCollection
		{
			get
			{
				if (_gsCodeApprovalFacultyGsCodeApprovalId == null)
				{
				_gsCodeApprovalFacultyGsCodeApprovalId = new TList<GsCodeApprovalFaculty>();
				}
	
				return _gsCodeApprovalFacultyGsCodeApprovalId;
			}
			set { _gsCodeApprovalFacultyGsCodeApprovalId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsCodeApprovalEntityData _tmp = new GsCodeApprovalEntityData();
						
			_tmp.GsCodeApprovalId = this.GsCodeApprovalId;
			_tmp.OriginalGsCodeApprovalId = this.OriginalGsCodeApprovalId;
			
			_tmp.ApprovalDescrAr = this.ApprovalDescrAr;
			_tmp.ApprovalDescrEn = this.ApprovalDescrEn;
			_tmp.ApprovalCode = this.ApprovalCode;
			_tmp.IsDelegationRequired = this.IsDelegationRequired;
			_tmp.HasResolution = this.HasResolution;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ApprovalOrader = this.ApprovalOrader;
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.SeCodeUserTypeIdSource != null)
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource) as SeCodeUserType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgThesisStudApproveGsCodeApprovalId != null)
				_tmp.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection); 
			if (this._edStudViolGsCodeApprovalId != null)
				_tmp.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection); 
			if (this._gsCdeApprovalPnltyGsCodeApprovalId != null)
				_tmp.GsCdeApprovalPnltyCollection = (TList<GsCdeApprovalPnlty>) MakeCopyOf(this.GsCdeApprovalPnltyCollection); 
			if (this._gsCodeApprovalListDGsCodeApprovalId != null)
				_tmp.GsCodeApprovalListDCollection = (TList<GsCodeApprovalListD>) MakeCopyOf(this.GsCodeApprovalListDCollection); 
			if (this._pgThesisCommApproveGsCodeApprovalId != null)
				_tmp.PgThesisCommApproveCollection = (TList<PgThesisCommApprove>) MakeCopyOf(this.PgThesisCommApproveCollection); 
			if (this._pgThesisSupervisorCommApproveGsCodeApprovalId != null)
				_tmp.PgThesisSupervisorCommApproveCollection = (TList<PgThesisSupervisorCommApprove>) MakeCopyOf(this.PgThesisSupervisorCommApproveCollection); 
			if (this._gsCodeApprovalFacultyGsCodeApprovalId != null)
				_tmp.GsCodeApprovalFacultyCollection = (TList<GsCodeApprovalFaculty>) MakeCopyOf(this.GsCodeApprovalFacultyCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsCodeApprovalEntityData _tmp = new GsCodeApprovalEntityData();
						
			_tmp.GsCodeApprovalId = this.GsCodeApprovalId;
			_tmp.OriginalGsCodeApprovalId = this.OriginalGsCodeApprovalId;
			
			_tmp.ApprovalDescrAr = this.ApprovalDescrAr;
			_tmp.ApprovalDescrEn = this.ApprovalDescrEn;
			_tmp.ApprovalCode = this.ApprovalCode;
			_tmp.IsDelegationRequired = this.IsDelegationRequired;
			_tmp.HasResolution = this.HasResolution;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ApprovalOrader = this.ApprovalOrader;
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				_tmp.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection, existingCopies); 
			_tmp.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection, existingCopies); 
			_tmp.GsCdeApprovalPnltyCollection = (TList<GsCdeApprovalPnlty>) MakeCopyOf(this.GsCdeApprovalPnltyCollection, existingCopies); 
			_tmp.GsCodeApprovalListDCollection = (TList<GsCodeApprovalListD>) MakeCopyOf(this.GsCodeApprovalListDCollection, existingCopies); 
			_tmp.PgThesisCommApproveCollection = (TList<PgThesisCommApprove>) MakeCopyOf(this.PgThesisCommApproveCollection, existingCopies); 
			_tmp.PgThesisSupervisorCommApproveCollection = (TList<PgThesisSupervisorCommApprove>) MakeCopyOf(this.PgThesisSupervisorCommApproveCollection, existingCopies); 
			_tmp.GsCodeApprovalFacultyCollection = (TList<GsCodeApprovalFaculty>) MakeCopyOf(this.GsCodeApprovalFacultyCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeApprovalColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsCodeApprovalColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeApprovalColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsCodeApprovalColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeApprovalColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsCodeApprovalColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsCodeApprovalEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsCodeApprovalEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeApprovalColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsCodeApprovalColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsCodeApprovalEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsCodeApprovalEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsCodeApprovalEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsCodeApproval"/> object.
	/// </remarks>
	public class GsCodeApprovalEventArgs : System.EventArgs
	{
		private GsCodeApprovalColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsCodeApprovalEventArgs class.
		///</summary>
		public GsCodeApprovalEventArgs(GsCodeApprovalColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsCodeApprovalEventArgs class.
		///</summary>
		public GsCodeApprovalEventArgs(GsCodeApprovalColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsCodeApprovalColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsCodeApprovalColumn" />
		public GsCodeApprovalColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsCodeApproval related events.
	///</summary>
	public delegate void GsCodeApprovalEventHandler(object sender, GsCodeApprovalEventArgs e);
	
	#region GsCodeApprovalComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsCodeApprovalComparer : System.Collections.Generic.IComparer<GsCodeApproval>
	{
		GsCodeApprovalColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsCodeApprovalComparer"/> class.
        /// </summary>
		public GsCodeApprovalComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsCodeApprovalComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsCodeApprovalComparer(GsCodeApprovalColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsCodeApproval"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsCodeApproval"/> to compare.</param>
        /// <param name="b">The second <c>GsCodeApproval</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsCodeApproval a, GsCodeApproval b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsCodeApproval entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsCodeApproval a, GsCodeApproval b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsCodeApprovalColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsCodeApprovalKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsCodeApproval"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsCodeApprovalKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalKey class.
		/// </summary>
		public GsCodeApprovalKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalKey class.
		/// </summary>
		public GsCodeApprovalKey(GsCodeApprovalBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsCodeApprovalId = entity.GsCodeApprovalId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCodeApprovalKey class.
		/// </summary>
		public GsCodeApprovalKey(System.Decimal _gsCodeApprovalId)
		{
			#region Init Properties

			this.GsCodeApprovalId = _gsCodeApprovalId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsCodeApprovalBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsCodeApprovalBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsCodeApprovalId property
		private System.Decimal _gsCodeApprovalId;
		
		/// <summary>
		/// Gets or sets the GsCodeApprovalId property.
		/// </summary>
		public System.Decimal GsCodeApprovalId
		{
			get { return _gsCodeApprovalId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsCodeApprovalId = value;
				
				_gsCodeApprovalId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsCodeApprovalId = ( values["GsCodeApprovalId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsCodeApprovalId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsCodeApprovalId", GsCodeApprovalId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsCodeApprovalId: {0}{1}",
								GsCodeApprovalId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsCodeApprovalColumn Enum
	
	/// <summary>
	/// Enumerate the GsCodeApproval columns.
	/// </summary>
	[Serializable]
	public enum GsCodeApprovalColumn : int
	{
		/// <summary>
		/// GsCodeApprovalId : 
		/// </summary>
		[EnumTextValue("GS_CODE_APPROVAL_ID")]
		[ColumnEnum("GS_CODE_APPROVAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsCodeApprovalId = 1,
		/// <summary>
		/// ApprovalDescrAr : 
		/// </summary>
		[EnumTextValue("APPROVAL_DESCR_AR")]
		[ColumnEnum("APPROVAL_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		ApprovalDescrAr = 2,
		/// <summary>
		/// ApprovalDescrEn : 
		/// </summary>
		[EnumTextValue("APPROVAL_DESCR_EN")]
		[ColumnEnum("APPROVAL_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		ApprovalDescrEn = 3,
		/// <summary>
		/// ApprovalCode : 
		/// </summary>
		[EnumTextValue("APPROVAL_CODE")]
		[ColumnEnum("APPROVAL_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ApprovalCode = 4,
		/// <summary>
		/// IsDelegationRequired : 
		/// </summary>
		[EnumTextValue("IS_DELEGATION_REQUIRED")]
		[ColumnEnum("IS_DELEGATION_REQUIRED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsDelegationRequired = 5,
		/// <summary>
		/// HasResolution : 
		/// </summary>
		[EnumTextValue("HAS_RESOLUTION")]
		[ColumnEnum("HAS_RESOLUTION", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HasResolution = 6,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 7,
		/// <summary>
		/// ApprovalOrader : 
		/// </summary>
		[EnumTextValue("APPROVAL_ORADER")]
		[ColumnEnum("APPROVAL_ORADER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ApprovalOrader = 8,
		/// <summary>
		/// SeCodeUserTypeId : 
		/// </summary>
		[EnumTextValue("SE_CODE_USER_TYPE_ID")]
		[ColumnEnum("SE_CODE_USER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeCodeUserTypeId = 9
	}//End enum

	#endregion GsCodeApprovalColumn Enum

} // end namespace
