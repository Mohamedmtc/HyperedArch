
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeStudInstallment.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_STUD_INSTALLMENT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeStudInstallmentBase : EntityBase, IFeeStudInstallment, IEntityId<FeeStudInstallmentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeStudInstallmentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeStudInstallmentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeStudInstallmentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeStudInstallment> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudInstallmentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudInstallmentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeStudInstallmentBase"/> instance.
		///</summary>
		public FeeStudInstallmentBase()
		{
			this.entityData = new FeeStudInstallmentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeStudInstallmentBase"/> instance.
		///</summary>
		///<param name="_feeStudInstallmentId">طلب تقسيط طالب</param>
		///<param name="_feeStudInstallmentRequestId"></param>
		///<param name="_installmentOrder"></param>
		///<param name="_installmentDate"></param>
		///<param name="_installmentPercentage"></param>
		///<param name="_installmentAmount"></param>
		///<param name="_paidFlg"></param>
		///<param name="_allInOne"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edStudId"></param>
		///<param name="_gsCodeCurrencyId"></param>
		public FeeStudInstallmentBase(System.Decimal _feeStudInstallmentId, System.Decimal? _feeStudInstallmentRequestId, 
			System.Decimal _installmentOrder, System.DateTime _installmentDate, System.Decimal _installmentPercentage, 
			System.Decimal? _installmentAmount, System.Decimal _paidFlg, System.Decimal _allInOne, 
			System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, System.Decimal? _asFacultyInfoId, 
			System.Decimal _edStudId, System.Decimal? _gsCodeCurrencyId)
		{
			this.entityData = new FeeStudInstallmentEntityData();
			this.backupData = null;

			this.FeeStudInstallmentId = _feeStudInstallmentId;
			this.FeeStudInstallmentRequestId = _feeStudInstallmentRequestId;
			this.InstallmentOrder = _installmentOrder;
			this.InstallmentDate = _installmentDate;
			this.InstallmentPercentage = _installmentPercentage;
			this.InstallmentAmount = _installmentAmount;
			this.PaidFlg = _paidFlg;
			this.AllInOne = _allInOne;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdStudId = _edStudId;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeStudInstallment"/> instance.
		///</summary>
		///<param name="_feeStudInstallmentId">طلب تقسيط طالب</param>
		///<param name="_feeStudInstallmentRequestId"></param>
		///<param name="_installmentOrder"></param>
		///<param name="_installmentDate"></param>
		///<param name="_installmentPercentage"></param>
		///<param name="_installmentAmount"></param>
		///<param name="_paidFlg"></param>
		///<param name="_allInOne"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edStudId"></param>
		///<param name="_gsCodeCurrencyId"></param>
		public static FeeStudInstallment CreateFeeStudInstallment(System.Decimal _feeStudInstallmentId, System.Decimal? _feeStudInstallmentRequestId, 
			System.Decimal _installmentOrder, System.DateTime _installmentDate, System.Decimal _installmentPercentage, 
			System.Decimal? _installmentAmount, System.Decimal _paidFlg, System.Decimal _allInOne, 
			System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, System.Decimal? _asFacultyInfoId, 
			System.Decimal _edStudId, System.Decimal? _gsCodeCurrencyId)
		{
			FeeStudInstallment newFeeStudInstallment = new FeeStudInstallment();
			newFeeStudInstallment.FeeStudInstallmentId = _feeStudInstallmentId;
			newFeeStudInstallment.FeeStudInstallmentRequestId = _feeStudInstallmentRequestId;
			newFeeStudInstallment.InstallmentOrder = _installmentOrder;
			newFeeStudInstallment.InstallmentDate = _installmentDate;
			newFeeStudInstallment.InstallmentPercentage = _installmentPercentage;
			newFeeStudInstallment.InstallmentAmount = _installmentAmount;
			newFeeStudInstallment.PaidFlg = _paidFlg;
			newFeeStudInstallment.AllInOne = _allInOne;
			newFeeStudInstallment.EdAcadYearId = _edAcadYearId;
			newFeeStudInstallment.EdCodeSemesterId = _edCodeSemesterId;
			newFeeStudInstallment.AsFacultyInfoId = _asFacultyInfoId;
			newFeeStudInstallment.EdStudId = _edStudId;
			newFeeStudInstallment.GsCodeCurrencyId = _gsCodeCurrencyId;
			return newFeeStudInstallment;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeStudInstallmentId property. 
		///		طلب تقسيط طالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"طلب تقسيط طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeStudInstallmentId
		{
			get
			{
				return this.entityData.FeeStudInstallmentId; 
			}
			
			set
			{
				if (this.entityData.FeeStudInstallmentId == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.FeeStudInstallmentId, this.entityData.FeeStudInstallmentId);
				this.entityData.FeeStudInstallmentId = value;
				this.EntityId.FeeStudInstallmentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.FeeStudInstallmentId, this.entityData.FeeStudInstallmentId);
				OnPropertyChanged("FeeStudInstallmentId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_STUD_INSTALLMENT_ID property.
		///		طلب تقسيط طالب
		/// </summary>
		/// <remarks>This is the original value of the FEE_STUD_INSTALLMENT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeStudInstallmentId
		{
			get { return this.entityData.OriginalFeeStudInstallmentId; }
			set { this.entityData.OriginalFeeStudInstallmentId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FeeStudInstallmentRequestId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeStudInstallmentRequestIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeStudInstallmentRequestId
		{
			get
			{
				return this.entityData.FeeStudInstallmentRequestId; 
			}
			
			set
			{
				if (this.entityData.FeeStudInstallmentRequestId == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.FeeStudInstallmentRequestId, this.entityData.FeeStudInstallmentRequestId);
				this.entityData.FeeStudInstallmentRequestId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.FeeStudInstallmentRequestId, this.entityData.FeeStudInstallmentRequestId);
				OnPropertyChanged("FeeStudInstallmentRequestId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstallmentOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal InstallmentOrder
		{
			get
			{
				return this.entityData.InstallmentOrder; 
			}
			
			set
			{
				if (this.entityData.InstallmentOrder == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.InstallmentOrder, this.entityData.InstallmentOrder);
				this.entityData.InstallmentOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.InstallmentOrder, this.entityData.InstallmentOrder);
				OnPropertyChanged("InstallmentOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstallmentDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime InstallmentDate
		{
			get
			{
				return this.entityData.InstallmentDate; 
			}
			
			set
			{
				if (this.entityData.InstallmentDate == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.InstallmentDate, this.entityData.InstallmentDate);
				this.entityData.InstallmentDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.InstallmentDate, this.entityData.InstallmentDate);
				OnPropertyChanged("InstallmentDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstallmentPercentage property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal InstallmentPercentage
		{
			get
			{
				return this.entityData.InstallmentPercentage; 
			}
			
			set
			{
				if (this.entityData.InstallmentPercentage == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.InstallmentPercentage, this.entityData.InstallmentPercentage);
				this.entityData.InstallmentPercentage = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.InstallmentPercentage, this.entityData.InstallmentPercentage);
				OnPropertyChanged("InstallmentPercentage");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstallmentAmount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInstallmentAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InstallmentAmount
		{
			get
			{
				return this.entityData.InstallmentAmount; 
			}
			
			set
			{
				if (this.entityData.InstallmentAmount == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.InstallmentAmount, this.entityData.InstallmentAmount);
				this.entityData.InstallmentAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.InstallmentAmount, this.entityData.InstallmentAmount);
				OnPropertyChanged("InstallmentAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaidFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PaidFlg
		{
			get
			{
				return this.entityData.PaidFlg; 
			}
			
			set
			{
				if (this.entityData.PaidFlg == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.PaidFlg, this.entityData.PaidFlg);
				this.entityData.PaidFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.PaidFlg, this.entityData.PaidFlg);
				OnPropertyChanged("PaidFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllInOne property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AllInOne
		{
			get
			{
				return this.entityData.AllInOne; 
			}
			
			set
			{
				if (this.entityData.AllInOne == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.AllInOne, this.entityData.AllInOne);
				this.entityData.AllInOne = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.AllInOne, this.entityData.AllInOne);
				OnPropertyChanged("AllInOne");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeCurrencyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(FeeStudInstallmentColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudInstallmentColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudInstallmentRequest"/>.
		/// </summary>
		/// <value>The source FeeStudInstallmentRequest for FeeStudInstallmentRequestId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeStudInstallmentRequest FeeStudInstallmentRequestIdSource
      	{
            get { return entityData.FeeStudInstallmentRequestIdSource; }
            set { entityData.FeeStudInstallmentRequestIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeStudVoucherItem objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_ITEM_FEE_STUD_INSTALLMENT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get { return entityData.FeeStudVoucherItemCollection; }
			set { entityData.FeeStudVoucherItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_STUD_INSTALLMENT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_STUD_INSTALLMENT_ID", "FEE_STUD_INSTALLMENT_REQUEST_ID", "INSTALLMENT_ORDER", "INSTALLMENT_DATE", "INSTALLMENT_PERCENTAGE", "INSTALLMENT_AMOUNT", "PAID_FLG", "ALL_IN_ONE", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "AS_FACULTY_INFO_ID", "ED_STUD_ID", "GS_CODE_CURRENCY_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeStudInstallmentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeStudInstallment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeStudInstallment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeStudInstallment);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeStudInstallment Entity 
		///</summary>
		protected virtual FeeStudInstallment Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeStudInstallment copy = new FeeStudInstallment();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeStudInstallmentId = this.FeeStudInstallmentId;
					copy.OriginalFeeStudInstallmentId = this.OriginalFeeStudInstallmentId;
				copy.FeeStudInstallmentRequestId = this.FeeStudInstallmentRequestId;
				copy.InstallmentOrder = this.InstallmentOrder;
				copy.InstallmentDate = this.InstallmentDate;
				copy.InstallmentPercentage = this.InstallmentPercentage;
				copy.InstallmentAmount = this.InstallmentAmount;
				copy.PaidFlg = this.PaidFlg;
				copy.AllInOne = this.AllInOne;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdStudId = this.EdStudId;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeStudInstallmentRequestIdSource != null && existingCopies.Contains(this.FeeStudInstallmentRequestIdSource))
				copy.FeeStudInstallmentRequestIdSource = existingCopies[this.FeeStudInstallmentRequestIdSource] as FeeStudInstallmentRequest;
			else
				copy.FeeStudInstallmentRequestIdSource = MakeCopyOf(this.FeeStudInstallmentRequestIdSource, existingCopies) as FeeStudInstallmentRequest;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
		
			//deep copy nested objects
			copy.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeStudInstallment Entity 
		///</summary>
		public virtual FeeStudInstallment Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeStudInstallment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeStudInstallment DeepCopy()
		{
			return EntityHelper.Clone<FeeStudInstallment>(this as FeeStudInstallment);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeStudInstallmentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeStudInstallmentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeStudInstallmentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeStudInstallmentColumn column)
		{
			switch(column)
			{
					case FeeStudInstallmentColumn.FeeStudInstallmentId:
					return entityData.FeeStudInstallmentId != _originalData.FeeStudInstallmentId;
					case FeeStudInstallmentColumn.FeeStudInstallmentRequestId:
					return entityData.FeeStudInstallmentRequestId != _originalData.FeeStudInstallmentRequestId;
					case FeeStudInstallmentColumn.InstallmentOrder:
					return entityData.InstallmentOrder != _originalData.InstallmentOrder;
					case FeeStudInstallmentColumn.InstallmentDate:
					return entityData.InstallmentDate != _originalData.InstallmentDate;
					case FeeStudInstallmentColumn.InstallmentPercentage:
					return entityData.InstallmentPercentage != _originalData.InstallmentPercentage;
					case FeeStudInstallmentColumn.InstallmentAmount:
					return entityData.InstallmentAmount != _originalData.InstallmentAmount;
					case FeeStudInstallmentColumn.PaidFlg:
					return entityData.PaidFlg != _originalData.PaidFlg;
					case FeeStudInstallmentColumn.AllInOne:
					return entityData.AllInOne != _originalData.AllInOne;
					case FeeStudInstallmentColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeStudInstallmentColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case FeeStudInstallmentColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case FeeStudInstallmentColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case FeeStudInstallmentColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeStudInstallmentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeStudInstallmentId != _originalData.FeeStudInstallmentId;
			result = result || entityData.FeeStudInstallmentRequestId != _originalData.FeeStudInstallmentRequestId;
			result = result || entityData.InstallmentOrder != _originalData.InstallmentOrder;
			result = result || entityData.InstallmentDate != _originalData.InstallmentDate;
			result = result || entityData.InstallmentPercentage != _originalData.InstallmentPercentage;
			result = result || entityData.InstallmentAmount != _originalData.InstallmentAmount;
			result = result || entityData.PaidFlg != _originalData.PaidFlg;
			result = result || entityData.AllInOne != _originalData.AllInOne;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeStudInstallment Entity with the original data.
		///</summary>
		public FeeStudInstallment GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeStudInstallment(
				_originalData.FeeStudInstallmentId,
				_originalData.FeeStudInstallmentRequestId,
				_originalData.InstallmentOrder,
				_originalData.InstallmentDate,
				_originalData.InstallmentPercentage,
				_originalData.InstallmentAmount,
				_originalData.PaidFlg,
				_originalData.AllInOne,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.AsFacultyInfoId,
				_originalData.EdStudId,
				_originalData.GsCodeCurrencyId
				);
				
			return (FeeStudInstallment)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeStudInstallmentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeStudInstallmentBase)
				return ValueEquals(this, (FeeStudInstallmentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeStudInstallmentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeStudInstallmentId.GetHashCode() ^ 
					((this.FeeStudInstallmentRequestId == null) ? string.Empty : this.FeeStudInstallmentRequestId.ToString()).GetHashCode() ^ 
					this.InstallmentOrder.GetHashCode() ^ 
					this.InstallmentDate.GetHashCode() ^ 
					this.InstallmentPercentage.GetHashCode() ^ 
					((this.InstallmentAmount == null) ? string.Empty : this.InstallmentAmount.ToString()).GetHashCode() ^ 
					this.PaidFlg.GetHashCode() ^ 
					this.AllInOne.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeStudInstallmentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeStudInstallmentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeStudInstallmentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeStudInstallmentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeStudInstallmentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeStudInstallmentBase Object1, FeeStudInstallmentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeStudInstallmentId != Object2.FeeStudInstallmentId)
				equal = false;
			if ( Object1.FeeStudInstallmentRequestId != null && Object2.FeeStudInstallmentRequestId != null )
			{
				if (Object1.FeeStudInstallmentRequestId != Object2.FeeStudInstallmentRequestId)
					equal = false;
			}
			else if (Object1.FeeStudInstallmentRequestId == null ^ Object2.FeeStudInstallmentRequestId == null )
			{
				equal = false;
			}
			if (Object1.InstallmentOrder != Object2.InstallmentOrder)
				equal = false;
			if (Object1.InstallmentDate != Object2.InstallmentDate)
				equal = false;
			if (Object1.InstallmentPercentage != Object2.InstallmentPercentage)
				equal = false;
			if ( Object1.InstallmentAmount != null && Object2.InstallmentAmount != null )
			{
				if (Object1.InstallmentAmount != Object2.InstallmentAmount)
					equal = false;
			}
			else if (Object1.InstallmentAmount == null ^ Object2.InstallmentAmount == null )
			{
				equal = false;
			}
			if (Object1.PaidFlg != Object2.PaidFlg)
				equal = false;
			if (Object1.AllInOne != Object2.AllInOne)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.GsCodeCurrencyId != null && Object2.GsCodeCurrencyId != null )
			{
				if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
					equal = false;
			}
			else if (Object1.GsCodeCurrencyId == null ^ Object2.GsCodeCurrencyId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeStudInstallmentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeStudInstallmentComparer GetComparer()
        {
            return new FeeStudInstallmentComparer();
        }
        */

        // Comparer delegates back to FeeStudInstallment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeStudInstallment rhs, FeeStudInstallmentColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeStudInstallmentColumn.FeeStudInstallmentId:
            		return this.FeeStudInstallmentId.CompareTo(rhs.FeeStudInstallmentId);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.FeeStudInstallmentRequestId:
            		return this.FeeStudInstallmentRequestId.Value.CompareTo(rhs.FeeStudInstallmentRequestId.Value);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.InstallmentOrder:
            		return this.InstallmentOrder.CompareTo(rhs.InstallmentOrder);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.InstallmentDate:
            		return this.InstallmentDate.CompareTo(rhs.InstallmentDate);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.InstallmentPercentage:
            		return this.InstallmentPercentage.CompareTo(rhs.InstallmentPercentage);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.InstallmentAmount:
            		return this.InstallmentAmount.Value.CompareTo(rhs.InstallmentAmount.Value);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.PaidFlg:
            		return this.PaidFlg.CompareTo(rhs.PaidFlg);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.AllInOne:
            		return this.AllInOne.CompareTo(rhs.AllInOne);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case FeeStudInstallmentColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.Value.CompareTo(rhs.GsCodeCurrencyId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeStudInstallmentKey> Members
		
		// member variable for the EntityId property
		private FeeStudInstallmentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeStudInstallmentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeStudInstallmentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeStudInstallment")
					.Append("|").Append( this.FeeStudInstallmentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- FeeStudInstallmentId: {0}{13}- FeeStudInstallmentRequestId: {1}{13}- InstallmentOrder: {2}{13}- InstallmentDate: {3}{13}- InstallmentPercentage: {4}{13}- InstallmentAmount: {5}{13}- PaidFlg: {6}{13}- AllInOne: {7}{13}- EdAcadYearId: {8}{13}- EdCodeSemesterId: {9}{13}- AsFacultyInfoId: {10}{13}- EdStudId: {11}{13}- GsCodeCurrencyId: {12}{13}{15}", 
				this.FeeStudInstallmentId,
				(this.FeeStudInstallmentRequestId == null) ? string.Empty : this.FeeStudInstallmentRequestId.ToString(),
				this.InstallmentOrder,
				this.InstallmentDate,
				this.InstallmentPercentage,
				(this.InstallmentAmount == null) ? string.Empty : this.InstallmentAmount.ToString(),
				this.PaidFlg,
				this.AllInOne,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.EdStudId,
				(this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_STUD_INSTALLMENT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeStudInstallmentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_STUD_INSTALLMENT_ID : طلب تقسيط طالب
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_STUD_INSTALLMENT"</remarks>
		public System.Decimal FeeStudInstallmentId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeStudInstallmentId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FEE_STUD_INSTALLMENT_REQUEST_ID : 
		/// </summary>
		public System.Decimal?		  FeeStudInstallmentRequestId = null;
		
		/// <summary>
		/// INSTALLMENT_ORDER : 
		/// </summary>
		public System.Decimal		  InstallmentOrder = 0.0m;
		
		/// <summary>
		/// INSTALLMENT_DATE : 
		/// </summary>
		public System.DateTime		  InstallmentDate = DateTime.MinValue;
		
		/// <summary>
		/// INSTALLMENT_PERCENTAGE : 
		/// </summary>
		public System.Decimal		  InstallmentPercentage = 0.0m;
		
		/// <summary>
		/// INSTALLMENT_AMOUNT : 
		/// </summary>
		public System.Decimal?		  InstallmentAmount = null;
		
		/// <summary>
		/// PAID_FLG : 
		/// </summary>
		public System.Decimal		  PaidFlg = 0.0m;
		
		/// <summary>
		/// ALL_IN_ONE : 
		/// </summary>
		public System.Decimal		  AllInOne = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeCurrencyId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private FeeStudInstallmentRequest _feeStudInstallmentRequestIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudInstallmentRequest"/>.
		/// </summary>
		/// <value>The source FeeStudInstallmentRequest for FeeStudInstallmentRequestId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeStudInstallmentRequest FeeStudInstallmentRequestIdSource
      	{
            get { return this._feeStudInstallmentRequestIdSource; }
            set { this._feeStudInstallmentRequestIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeStudVoucherItemCollection
		
		private TList<FeeStudVoucherItem> _feeStudVoucherItemFeeStudInstallmentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherItemFeeStudInstallmentId
		/// </summary>
		
		public TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get
			{
				if (_feeStudVoucherItemFeeStudInstallmentId == null)
				{
				_feeStudVoucherItemFeeStudInstallmentId = new TList<FeeStudVoucherItem>();
				}
	
				return _feeStudVoucherItemFeeStudInstallmentId;
			}
			set { _feeStudVoucherItemFeeStudInstallmentId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeStudInstallmentEntityData _tmp = new FeeStudInstallmentEntityData();
						
			_tmp.FeeStudInstallmentId = this.FeeStudInstallmentId;
			_tmp.OriginalFeeStudInstallmentId = this.OriginalFeeStudInstallmentId;
			
			_tmp.FeeStudInstallmentRequestId = this.FeeStudInstallmentRequestId;
			_tmp.InstallmentOrder = this.InstallmentOrder;
			_tmp.InstallmentDate = this.InstallmentDate;
			_tmp.InstallmentPercentage = this.InstallmentPercentage;
			_tmp.InstallmentAmount = this.InstallmentAmount;
			_tmp.PaidFlg = this.PaidFlg;
			_tmp.AllInOne = this.AllInOne;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.FeeStudInstallmentRequestIdSource != null)
				_tmp.FeeStudInstallmentRequestIdSource = MakeCopyOf(this.FeeStudInstallmentRequestIdSource) as FeeStudInstallmentRequest;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeStudVoucherItemFeeStudInstallmentId != null)
				_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeStudInstallmentEntityData _tmp = new FeeStudInstallmentEntityData();
						
			_tmp.FeeStudInstallmentId = this.FeeStudInstallmentId;
			_tmp.OriginalFeeStudInstallmentId = this.OriginalFeeStudInstallmentId;
			
			_tmp.FeeStudInstallmentRequestId = this.FeeStudInstallmentRequestId;
			_tmp.InstallmentOrder = this.InstallmentOrder;
			_tmp.InstallmentDate = this.InstallmentDate;
			_tmp.InstallmentPercentage = this.InstallmentPercentage;
			_tmp.InstallmentAmount = this.InstallmentAmount;
			_tmp.PaidFlg = this.PaidFlg;
			_tmp.AllInOne = this.AllInOne;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeStudInstallmentRequestIdSource != null && existingCopies.Contains(this.FeeStudInstallmentRequestIdSource))
				_tmp.FeeStudInstallmentRequestIdSource = existingCopies[this.FeeStudInstallmentRequestIdSource] as FeeStudInstallmentRequest;
			else
				_tmp.FeeStudInstallmentRequestIdSource = MakeCopyOf(this.FeeStudInstallmentRequestIdSource, existingCopies) as FeeStudInstallmentRequest;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudInstallmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeStudInstallmentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudInstallmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeStudInstallmentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudInstallmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeStudInstallmentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeStudInstallmentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeStudInstallmentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudInstallmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeStudInstallmentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeStudInstallmentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeStudInstallmentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeStudInstallmentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeStudInstallment"/> object.
	/// </remarks>
	public class FeeStudInstallmentEventArgs : System.EventArgs
	{
		private FeeStudInstallmentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudInstallmentEventArgs class.
		///</summary>
		public FeeStudInstallmentEventArgs(FeeStudInstallmentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudInstallmentEventArgs class.
		///</summary>
		public FeeStudInstallmentEventArgs(FeeStudInstallmentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeStudInstallmentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeStudInstallmentColumn" />
		public FeeStudInstallmentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeStudInstallment related events.
	///</summary>
	public delegate void FeeStudInstallmentEventHandler(object sender, FeeStudInstallmentEventArgs e);
	
	#region FeeStudInstallmentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeStudInstallmentComparer : System.Collections.Generic.IComparer<FeeStudInstallment>
	{
		FeeStudInstallmentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudInstallmentComparer"/> class.
        /// </summary>
		public FeeStudInstallmentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudInstallmentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeStudInstallmentComparer(FeeStudInstallmentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeStudInstallment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeStudInstallment"/> to compare.</param>
        /// <param name="b">The second <c>FeeStudInstallment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeStudInstallment a, FeeStudInstallment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeStudInstallment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeStudInstallment a, FeeStudInstallment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeStudInstallmentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeStudInstallmentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeStudInstallment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeStudInstallmentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentKey class.
		/// </summary>
		public FeeStudInstallmentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentKey class.
		/// </summary>
		public FeeStudInstallmentKey(FeeStudInstallmentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeStudInstallmentId = entity.FeeStudInstallmentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudInstallmentKey class.
		/// </summary>
		public FeeStudInstallmentKey(System.Decimal _feeStudInstallmentId)
		{
			#region Init Properties

			this.FeeStudInstallmentId = _feeStudInstallmentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeStudInstallmentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeStudInstallmentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeStudInstallmentId property
		private System.Decimal _feeStudInstallmentId;
		
		/// <summary>
		/// Gets or sets the FeeStudInstallmentId property.
		/// </summary>
		public System.Decimal FeeStudInstallmentId
		{
			get { return _feeStudInstallmentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeStudInstallmentId = value;
				
				_feeStudInstallmentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeStudInstallmentId = ( values["FeeStudInstallmentId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeStudInstallmentId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeStudInstallmentId", FeeStudInstallmentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeStudInstallmentId: {0}{1}",
								FeeStudInstallmentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeStudInstallmentColumn Enum
	
	/// <summary>
	/// Enumerate the FeeStudInstallment columns.
	/// </summary>
	[Serializable]
	public enum FeeStudInstallmentColumn : int
	{
		/// <summary>
		/// FeeStudInstallmentId : طلب تقسيط طالب
		/// </summary>
		[EnumTextValue("FEE_STUD_INSTALLMENT_ID")]
		[ColumnEnum("FEE_STUD_INSTALLMENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeStudInstallmentId = 1,
		/// <summary>
		/// FeeStudInstallmentRequestId : 
		/// </summary>
		[EnumTextValue("FEE_STUD_INSTALLMENT_REQUEST_ID")]
		[ColumnEnum("FEE_STUD_INSTALLMENT_REQUEST_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeStudInstallmentRequestId = 2,
		/// <summary>
		/// InstallmentOrder : 
		/// </summary>
		[EnumTextValue("INSTALLMENT_ORDER")]
		[ColumnEnum("INSTALLMENT_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		InstallmentOrder = 3,
		/// <summary>
		/// InstallmentDate : 
		/// </summary>
		[EnumTextValue("INSTALLMENT_DATE")]
		[ColumnEnum("INSTALLMENT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		InstallmentDate = 4,
		/// <summary>
		/// InstallmentPercentage : 
		/// </summary>
		[EnumTextValue("INSTALLMENT_PERCENTAGE")]
		[ColumnEnum("INSTALLMENT_PERCENTAGE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		InstallmentPercentage = 5,
		/// <summary>
		/// InstallmentAmount : 
		/// </summary>
		[EnumTextValue("INSTALLMENT_AMOUNT")]
		[ColumnEnum("INSTALLMENT_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InstallmentAmount = 6,
		/// <summary>
		/// PaidFlg : 
		/// </summary>
		[EnumTextValue("PAID_FLG")]
		[ColumnEnum("PAID_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PaidFlg = 7,
		/// <summary>
		/// AllInOne : 
		/// </summary>
		[EnumTextValue("ALL_IN_ONE")]
		[ColumnEnum("ALL_IN_ONE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AllInOne = 8,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 9,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 10,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 11,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 12,
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeCurrencyId = 13
	}//End enum

	#endregion FeeStudInstallmentColumn Enum

} // end namespace
