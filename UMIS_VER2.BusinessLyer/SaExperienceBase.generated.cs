
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaExperience.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_EXPERIENCE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaExperienceBase : EntityBase, ISaExperience, IEntityId<SaExperienceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaExperienceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaExperienceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaExperienceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaExperience> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaExperienceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaExperienceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaExperienceBase"/> instance.
		///</summary>
		public SaExperienceBase()
		{
			this.entityData = new SaExperienceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaExperienceBase"/> instance.
		///</summary>
		///<param name="_saExperienceId"></param>
		///<param name="_expFrom"></param>
		///<param name="_expTo"></param>
		///<param name="_isOrgUni"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeExperienceId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeOrgId"></param>
		///<param name="_asFacultyInfoId"></param>
		public SaExperienceBase(System.Decimal _saExperienceId, System.DateTime _expFrom, 
			System.DateTime? _expTo, System.Decimal _isOrgUni, System.String _comments, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeExperienceId, System.Decimal _gsCountryNodeId, System.Decimal? _asNodeId, 
			System.Decimal? _saCodeOrgId, System.Decimal _asFacultyInfoId)
		{
			this.entityData = new SaExperienceEntityData();
			this.backupData = null;

			this.SaExperienceId = _saExperienceId;
			this.ExpFrom = _expFrom;
			this.ExpTo = _expTo;
			this.IsOrgUni = _isOrgUni;
			this.Comments = _comments;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodeExperienceId = _saCodeExperienceId;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.AsNodeId = _asNodeId;
			this.SaCodeOrgId = _saCodeOrgId;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaExperience"/> instance.
		///</summary>
		///<param name="_saExperienceId"></param>
		///<param name="_expFrom"></param>
		///<param name="_expTo"></param>
		///<param name="_isOrgUni"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeExperienceId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeOrgId"></param>
		///<param name="_asFacultyInfoId"></param>
		public static SaExperience CreateSaExperience(System.Decimal _saExperienceId, System.DateTime _expFrom, 
			System.DateTime? _expTo, System.Decimal _isOrgUni, System.String _comments, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeExperienceId, System.Decimal _gsCountryNodeId, System.Decimal? _asNodeId, 
			System.Decimal? _saCodeOrgId, System.Decimal _asFacultyInfoId)
		{
			SaExperience newSaExperience = new SaExperience();
			newSaExperience.SaExperienceId = _saExperienceId;
			newSaExperience.ExpFrom = _expFrom;
			newSaExperience.ExpTo = _expTo;
			newSaExperience.IsOrgUni = _isOrgUni;
			newSaExperience.Comments = _comments;
			newSaExperience.SaStfMemberId = _saStfMemberId;
			newSaExperience.SaCodeExperienceId = _saCodeExperienceId;
			newSaExperience.GsCountryNodeId = _gsCountryNodeId;
			newSaExperience.AsNodeId = _asNodeId;
			newSaExperience.SaCodeOrgId = _saCodeOrgId;
			newSaExperience.AsFacultyInfoId = _asFacultyInfoId;
			return newSaExperience;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaExperienceId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaExperienceId
		{
			get
			{
				return this.entityData.SaExperienceId; 
			}
			
			set
			{
				if (this.entityData.SaExperienceId == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.SaExperienceId, this.entityData.SaExperienceId);
				this.entityData.SaExperienceId = value;
				this.EntityId.SaExperienceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.SaExperienceId, this.entityData.SaExperienceId);
				OnPropertyChanged("SaExperienceId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_EXPERIENCE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_EXPERIENCE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaExperienceId
		{
			get { return this.entityData.OriginalSaExperienceId; }
			set { this.entityData.OriginalSaExperienceId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ExpFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExpFrom
		{
			get
			{
				return this.entityData.ExpFrom; 
			}
			
			set
			{
				if (this.entityData.ExpFrom == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.ExpFrom, this.entityData.ExpFrom);
				this.entityData.ExpFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.ExpFrom, this.entityData.ExpFrom);
				OnPropertyChanged("ExpFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpTo property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpTo
		{
			get
			{
				return this.entityData.ExpTo; 
			}
			
			set
			{
				if (this.entityData.ExpTo == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.ExpTo, this.entityData.ExpTo);
				this.entityData.ExpTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.ExpTo, this.entityData.ExpTo);
				OnPropertyChanged("ExpTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsOrgUni property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsOrgUni
		{
			get
			{
				return this.entityData.IsOrgUni; 
			}
			
			set
			{
				if (this.entityData.IsOrgUni == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.IsOrgUni, this.entityData.IsOrgUni);
				this.entityData.IsOrgUni = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.IsOrgUni, this.entityData.IsOrgUni);
				OnPropertyChanged("IsOrgUni");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeExperienceId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeExperienceId
		{
			get
			{
				return this.entityData.SaCodeExperienceId; 
			}
			
			set
			{
				if (this.entityData.SaCodeExperienceId == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.SaCodeExperienceId, this.entityData.SaCodeExperienceId);
				this.entityData.SaCodeExperienceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.SaCodeExperienceId, this.entityData.SaCodeExperienceId);
				OnPropertyChanged("SaCodeExperienceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeOrgId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeOrgIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeOrgId
		{
			get
			{
				return this.entityData.SaCodeOrgId; 
			}
			
			set
			{
				if (this.entityData.SaCodeOrgId == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.SaCodeOrgId, this.entityData.SaCodeOrgId);
				this.entityData.SaCodeOrgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.SaCodeOrgId, this.entityData.SaCodeOrgId);
				OnPropertyChanged("SaCodeOrgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaExperienceColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExperienceColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeExperience"/>.
		/// </summary>
		/// <value>The source SaCodeExperience for SaCodeExperienceId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeExperience SaCodeExperienceIdSource
      	{
            get { return entityData.SaCodeExperienceIdSource; }
            set { entityData.SaCodeExperienceIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeOrg"/>.
		/// </summary>
		/// <value>The source SaCodeOrg for SaCodeOrgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeOrg SaCodeOrgIdSource
      	{
            get { return entityData.SaCodeOrgIdSource; }
            set { entityData.SaCodeOrgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return entityData.AsNodeIdSource; }
            set { entityData.AsNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_EXPERIENCE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_EXPERIENCE_ID", "EXP_FROM", "EXP_TO", "IS_ORG_UNI", "COMMENTS", "SA_STF_MEMBER_ID", "SA_CODE_EXPERIENCE_ID", "GS_COUNTRY_NODE_ID", "AS_NODE_ID", "SA_CODE_ORG_ID", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaExperienceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaExperience) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaExperience>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaExperience);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaExperience Entity 
		///</summary>
		protected virtual SaExperience Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaExperience copy = new SaExperience();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaExperienceId = this.SaExperienceId;
					copy.OriginalSaExperienceId = this.OriginalSaExperienceId;
				copy.ExpFrom = this.ExpFrom;
				copy.ExpTo = this.ExpTo;
				copy.IsOrgUni = this.IsOrgUni;
				copy.Comments = this.Comments;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodeExperienceId = this.SaCodeExperienceId;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.AsNodeId = this.AsNodeId;
				copy.SaCodeOrgId = this.SaCodeOrgId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.SaCodeExperienceIdSource != null && existingCopies.Contains(this.SaCodeExperienceIdSource))
				copy.SaCodeExperienceIdSource = existingCopies[this.SaCodeExperienceIdSource] as SaCodeExperience;
			else
				copy.SaCodeExperienceIdSource = MakeCopyOf(this.SaCodeExperienceIdSource, existingCopies) as SaCodeExperience;
			if (this.SaCodeOrgIdSource != null && existingCopies.Contains(this.SaCodeOrgIdSource))
				copy.SaCodeOrgIdSource = existingCopies[this.SaCodeOrgIdSource] as SaCodeOrg;
			else
				copy.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource, existingCopies) as SaCodeOrg;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				copy.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				copy.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaExperience Entity 
		///</summary>
		public virtual SaExperience Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaExperience Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaExperience DeepCopy()
		{
			return EntityHelper.Clone<SaExperience>(this as SaExperience);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaExperienceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaExperienceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaExperienceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaExperienceColumn column)
		{
			switch(column)
			{
					case SaExperienceColumn.SaExperienceId:
					return entityData.SaExperienceId != _originalData.SaExperienceId;
					case SaExperienceColumn.ExpFrom:
					return entityData.ExpFrom != _originalData.ExpFrom;
					case SaExperienceColumn.ExpTo:
					return entityData.ExpTo != _originalData.ExpTo;
					case SaExperienceColumn.IsOrgUni:
					return entityData.IsOrgUni != _originalData.IsOrgUni;
					case SaExperienceColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaExperienceColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaExperienceColumn.SaCodeExperienceId:
					return entityData.SaCodeExperienceId != _originalData.SaCodeExperienceId;
					case SaExperienceColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case SaExperienceColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaExperienceColumn.SaCodeOrgId:
					return entityData.SaCodeOrgId != _originalData.SaCodeOrgId;
					case SaExperienceColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaExperienceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaExperienceId != _originalData.SaExperienceId;
			result = result || entityData.ExpFrom != _originalData.ExpFrom;
			result = result || entityData.ExpTo != _originalData.ExpTo;
			result = result || entityData.IsOrgUni != _originalData.IsOrgUni;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodeExperienceId != _originalData.SaCodeExperienceId;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.SaCodeOrgId != _originalData.SaCodeOrgId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaExperience Entity with the original data.
		///</summary>
		public SaExperience GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaExperience(
				_originalData.SaExperienceId,
				_originalData.ExpFrom,
				_originalData.ExpTo,
				_originalData.IsOrgUni,
				_originalData.Comments,
				_originalData.SaStfMemberId,
				_originalData.SaCodeExperienceId,
				_originalData.GsCountryNodeId,
				_originalData.AsNodeId,
				_originalData.SaCodeOrgId,
				_originalData.AsFacultyInfoId
				);
				
			return (SaExperience)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaExperienceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaExperienceBase)
				return ValueEquals(this, (SaExperienceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaExperienceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaExperienceId.GetHashCode() ^ 
					this.ExpFrom.GetHashCode() ^ 
					((this.ExpTo == null) ? string.Empty : this.ExpTo.ToString()).GetHashCode() ^ 
					this.IsOrgUni.GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.SaCodeExperienceId.GetHashCode() ^ 
					this.GsCountryNodeId.GetHashCode() ^ 
					((this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString()).GetHashCode() ^ 
					((this.SaCodeOrgId == null) ? string.Empty : this.SaCodeOrgId.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaExperienceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaExperienceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaExperienceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaExperienceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaExperienceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaExperienceBase Object1, SaExperienceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaExperienceId != Object2.SaExperienceId)
				equal = false;
			if (Object1.ExpFrom != Object2.ExpFrom)
				equal = false;
			if ( Object1.ExpTo != null && Object2.ExpTo != null )
			{
				if (Object1.ExpTo != Object2.ExpTo)
					equal = false;
			}
			else if (Object1.ExpTo == null ^ Object2.ExpTo == null )
			{
				equal = false;
			}
			if (Object1.IsOrgUni != Object2.IsOrgUni)
				equal = false;
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.SaCodeExperienceId != Object2.SaCodeExperienceId)
				equal = false;
			if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
				equal = false;
			if ( Object1.AsNodeId != null && Object2.AsNodeId != null )
			{
				if (Object1.AsNodeId != Object2.AsNodeId)
					equal = false;
			}
			else if (Object1.AsNodeId == null ^ Object2.AsNodeId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeOrgId != null && Object2.SaCodeOrgId != null )
			{
				if (Object1.SaCodeOrgId != Object2.SaCodeOrgId)
					equal = false;
			}
			else if (Object1.SaCodeOrgId == null ^ Object2.SaCodeOrgId == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaExperienceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaExperienceComparer GetComparer()
        {
            return new SaExperienceComparer();
        }
        */

        // Comparer delegates back to SaExperience
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaExperience rhs, SaExperienceColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaExperienceColumn.SaExperienceId:
            		return this.SaExperienceId.CompareTo(rhs.SaExperienceId);
            		
            		                 
            	
            	
            	case SaExperienceColumn.ExpFrom:
            		return this.ExpFrom.CompareTo(rhs.ExpFrom);
            		
            		                 
            	
            	
            	case SaExperienceColumn.ExpTo:
            		return this.ExpTo.Value.CompareTo(rhs.ExpTo.Value);
            		
            		                 
            	
            	
            	case SaExperienceColumn.IsOrgUni:
            		return this.IsOrgUni.CompareTo(rhs.IsOrgUni);
            		
            		                 
            	
            	
            	case SaExperienceColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaExperienceColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaExperienceColumn.SaCodeExperienceId:
            		return this.SaCodeExperienceId.CompareTo(rhs.SaCodeExperienceId);
            		
            		                 
            	
            	
            	case SaExperienceColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.CompareTo(rhs.GsCountryNodeId);
            		
            		                 
            	
            	
            	case SaExperienceColumn.AsNodeId:
            		return this.AsNodeId.Value.CompareTo(rhs.AsNodeId.Value);
            		
            		                 
            	
            	
            	case SaExperienceColumn.SaCodeOrgId:
            		return this.SaCodeOrgId.Value.CompareTo(rhs.SaCodeOrgId.Value);
            		
            		                 
            	
            	
            	case SaExperienceColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaExperienceKey> Members
		
		// member variable for the EntityId property
		private SaExperienceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaExperienceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaExperienceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaExperience")
					.Append("|").Append( this.SaExperienceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- SaExperienceId: {0}{11}- ExpFrom: {1}{11}- ExpTo: {2}{11}- IsOrgUni: {3}{11}- Comments: {4}{11}- SaStfMemberId: {5}{11}- SaCodeExperienceId: {6}{11}- GsCountryNodeId: {7}{11}- AsNodeId: {8}{11}- SaCodeOrgId: {9}{11}- AsFacultyInfoId: {10}{11}{13}", 
				this.SaExperienceId,
				this.ExpFrom,
				(this.ExpTo == null) ? string.Empty : this.ExpTo.ToString(),
				this.IsOrgUni,
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.SaStfMemberId,
				this.SaCodeExperienceId,
				this.GsCountryNodeId,
				(this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString(),
				(this.SaCodeOrgId == null) ? string.Empty : this.SaCodeOrgId.ToString(),
				this.AsFacultyInfoId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_EXPERIENCE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaExperienceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_EXPERIENCE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_EXPERIENCE"</remarks>
		public System.Decimal SaExperienceId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaExperienceId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// EXP_FROM : 
		/// </summary>
		public System.DateTime		  ExpFrom = DateTime.MinValue;
		
		/// <summary>
		/// EXP_TO : 
		/// </summary>
		public System.DateTime?		  ExpTo = null;
		
		/// <summary>
		/// IS_ORG_UNI : 
		/// </summary>
		public System.Decimal		  IsOrgUni = 0.0m;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// SA_CODE_EXPERIENCE_ID : 
		/// </summary>
		public System.Decimal		  SaCodeExperienceId = 0.0m;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal		  GsCountryNodeId = 0.0m;
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal?		  AsNodeId = null;
		
		/// <summary>
		/// SA_CODE_ORG_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeOrgId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaCodeExperience _saCodeExperienceIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeExperience"/>.
		/// </summary>
		/// <value>The source SaCodeExperience for SaCodeExperienceId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeExperience SaCodeExperienceIdSource
      	{
            get { return this._saCodeExperienceIdSource; }
            set { this._saCodeExperienceIdSource = value; }
      	}
		private SaCodeOrg _saCodeOrgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeOrg"/>.
		/// </summary>
		/// <value>The source SaCodeOrg for SaCodeOrgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeOrg SaCodeOrgIdSource
      	{
            get { return this._saCodeOrgIdSource; }
            set { this._saCodeOrgIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EntityMain _asNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return this._asNodeIdSource; }
            set { this._asNodeIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaExperienceEntityData _tmp = new SaExperienceEntityData();
						
			_tmp.SaExperienceId = this.SaExperienceId;
			_tmp.OriginalSaExperienceId = this.OriginalSaExperienceId;
			
			_tmp.ExpFrom = this.ExpFrom;
			_tmp.ExpTo = this.ExpTo;
			_tmp.IsOrgUni = this.IsOrgUni;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeExperienceId = this.SaCodeExperienceId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeOrgId = this.SaCodeOrgId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.SaCodeExperienceIdSource != null)
				_tmp.SaCodeExperienceIdSource = MakeCopyOf(this.SaCodeExperienceIdSource) as SaCodeExperience;
			if (this.SaCodeOrgIdSource != null)
				_tmp.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource) as SaCodeOrg;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.AsNodeIdSource != null)
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource) as EntityMain;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaExperienceEntityData _tmp = new SaExperienceEntityData();
						
			_tmp.SaExperienceId = this.SaExperienceId;
			_tmp.OriginalSaExperienceId = this.OriginalSaExperienceId;
			
			_tmp.ExpFrom = this.ExpFrom;
			_tmp.ExpTo = this.ExpTo;
			_tmp.IsOrgUni = this.IsOrgUni;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeExperienceId = this.SaCodeExperienceId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeOrgId = this.SaCodeOrgId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.SaCodeExperienceIdSource != null && existingCopies.Contains(this.SaCodeExperienceIdSource))
				_tmp.SaCodeExperienceIdSource = existingCopies[this.SaCodeExperienceIdSource] as SaCodeExperience;
			else
				_tmp.SaCodeExperienceIdSource = MakeCopyOf(this.SaCodeExperienceIdSource, existingCopies) as SaCodeExperience;
			if (this.SaCodeOrgIdSource != null && existingCopies.Contains(this.SaCodeOrgIdSource))
				_tmp.SaCodeOrgIdSource = existingCopies[this.SaCodeOrgIdSource] as SaCodeOrg;
			else
				_tmp.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource, existingCopies) as SaCodeOrg;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				_tmp.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExperienceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaExperienceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExperienceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaExperienceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExperienceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaExperienceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaExperienceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaExperienceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExperienceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaExperienceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaExperienceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaExperienceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaExperienceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaExperience"/> object.
	/// </remarks>
	public class SaExperienceEventArgs : System.EventArgs
	{
		private SaExperienceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaExperienceEventArgs class.
		///</summary>
		public SaExperienceEventArgs(SaExperienceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaExperienceEventArgs class.
		///</summary>
		public SaExperienceEventArgs(SaExperienceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaExperienceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaExperienceColumn" />
		public SaExperienceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaExperience related events.
	///</summary>
	public delegate void SaExperienceEventHandler(object sender, SaExperienceEventArgs e);
	
	#region SaExperienceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaExperienceComparer : System.Collections.Generic.IComparer<SaExperience>
	{
		SaExperienceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaExperienceComparer"/> class.
        /// </summary>
		public SaExperienceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaExperienceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaExperienceComparer(SaExperienceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaExperience"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaExperience"/> to compare.</param>
        /// <param name="b">The second <c>SaExperience</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaExperience a, SaExperience b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaExperience entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaExperience a, SaExperience b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaExperienceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaExperienceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaExperience"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaExperienceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaExperienceKey class.
		/// </summary>
		public SaExperienceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaExperienceKey class.
		/// </summary>
		public SaExperienceKey(SaExperienceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaExperienceId = entity.SaExperienceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaExperienceKey class.
		/// </summary>
		public SaExperienceKey(System.Decimal _saExperienceId)
		{
			#region Init Properties

			this.SaExperienceId = _saExperienceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaExperienceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaExperienceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaExperienceId property
		private System.Decimal _saExperienceId;
		
		/// <summary>
		/// Gets or sets the SaExperienceId property.
		/// </summary>
		public System.Decimal SaExperienceId
		{
			get { return _saExperienceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaExperienceId = value;
				
				_saExperienceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaExperienceId = ( values["SaExperienceId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaExperienceId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaExperienceId", SaExperienceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaExperienceId: {0}{1}",
								SaExperienceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaExperienceColumn Enum
	
	/// <summary>
	/// Enumerate the SaExperience columns.
	/// </summary>
	[Serializable]
	public enum SaExperienceColumn : int
	{
		/// <summary>
		/// SaExperienceId : 
		/// </summary>
		[EnumTextValue("SA_EXPERIENCE_ID")]
		[ColumnEnum("SA_EXPERIENCE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaExperienceId = 1,
		/// <summary>
		/// ExpFrom : 
		/// </summary>
		[EnumTextValue("EXP_FROM")]
		[ColumnEnum("EXP_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ExpFrom = 2,
		/// <summary>
		/// ExpTo : 
		/// </summary>
		[EnumTextValue("EXP_TO")]
		[ColumnEnum("EXP_TO", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExpTo = 3,
		/// <summary>
		/// IsOrgUni : 
		/// </summary>
		[EnumTextValue("IS_ORG_UNI")]
		[ColumnEnum("IS_ORG_UNI", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsOrgUni = 4,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Comments = 5,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 6,
		/// <summary>
		/// SaCodeExperienceId : 
		/// </summary>
		[EnumTextValue("SA_CODE_EXPERIENCE_ID")]
		[ColumnEnum("SA_CODE_EXPERIENCE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeExperienceId = 7,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCountryNodeId = 8,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsNodeId = 9,
		/// <summary>
		/// SaCodeOrgId : 
		/// </summary>
		[EnumTextValue("SA_CODE_ORG_ID")]
		[ColumnEnum("SA_CODE_ORG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeOrgId = 10,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 11
	}//End enum

	#endregion SaExperienceColumn Enum

} // end namespace
