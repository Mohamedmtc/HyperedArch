
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStdExamSemester.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STD_EXAM_SEMESTER' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStdExamSemesterBase : EntityBase, IEdStdExamSemester, IEntityId<EdStdExamSemesterKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStdExamSemesterEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStdExamSemesterEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStdExamSemesterEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStdExamSemester> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStdExamSemesterEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStdExamSemesterEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStdExamSemesterBase"/> instance.
		///</summary>
		public EdStdExamSemesterBase()
		{
			this.entityData = new EdStdExamSemesterEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStdExamSemesterBase"/> instance.
		///</summary>
		///<param name="_edStdExamSemesterId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCdeExamTypeId">نوع اعادة الامتحان</param>
		///<param name="_semMarkOld">مجموع درجات الفرقة لقديم</param>
		///<param name="_semMarkNew">مجموع درجات الفرقة الجديد بعد الرافة والرفع</param>
		///<param name="_accumMarkOld">مجموع تراكمى قديم</param>
		///<param name="_accumMarkNew">مجموع تراكمى جديد</param>
		///<param name="_orgClemencyMark">درجات السلة 2% او 4% على حسب حالة الطالب-مجموع درجات الرافة اللى الطالب اخدها الدور الاول</param>
		///<param name="_totClemencyMark">مجموع درجات الرافة لكل مقررات الفرقة فى اى كنترول لاى عام اكاديمى</param>
		///<param name="_accumClemencyMark">درجة الرافة على المجموع التراكمى فى حالة طالب خريج رفع التقدير</param>
		///<param name="_accumRaiseMark">درجات رفع المجموع التراكمى لتغير التقدير التراكمى للتخرج</param>
		///<param name="_crsFailCount">عدد مقررات الرسوب</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_celemApplyFlg">تطبيق قواعد الرافة</param>
		///<param name="_edCodeGradingId">تقدير الفرقة</param>
		public EdStdExamSemesterBase(System.Decimal _edStdExamSemesterId, System.Decimal _edStudSemesterId, 
			System.Decimal _edCdeExamTypeId, System.Decimal? _semMarkOld, System.Decimal? _semMarkNew, 
			System.Decimal? _accumMarkOld, System.Decimal? _accumMarkNew, System.Decimal? _orgClemencyMark, 
			System.Decimal? _totClemencyMark, System.Decimal? _accumClemencyMark, System.Decimal? _accumRaiseMark, 
			System.Decimal? _crsFailCount, System.Decimal? _approveFlg, System.Decimal? _celemApplyFlg, 
			System.Decimal? _edCodeGradingId)
		{
			this.entityData = new EdStdExamSemesterEntityData();
			this.backupData = null;

			this.EdStdExamSemesterId = _edStdExamSemesterId;
			this.EdStudSemesterId = _edStudSemesterId;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
			this.SemMarkOld = _semMarkOld;
			this.SemMarkNew = _semMarkNew;
			this.AccumMarkOld = _accumMarkOld;
			this.AccumMarkNew = _accumMarkNew;
			this.OrgClemencyMark = _orgClemencyMark;
			this.TotClemencyMark = _totClemencyMark;
			this.AccumClemencyMark = _accumClemencyMark;
			this.AccumRaiseMark = _accumRaiseMark;
			this.CrsFailCount = _crsFailCount;
			this.ApproveFlg = _approveFlg;
			this.CelemApplyFlg = _celemApplyFlg;
			this.EdCodeGradingId = _edCodeGradingId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStdExamSemester"/> instance.
		///</summary>
		///<param name="_edStdExamSemesterId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCdeExamTypeId">نوع اعادة الامتحان</param>
		///<param name="_semMarkOld">مجموع درجات الفرقة لقديم</param>
		///<param name="_semMarkNew">مجموع درجات الفرقة الجديد بعد الرافة والرفع</param>
		///<param name="_accumMarkOld">مجموع تراكمى قديم</param>
		///<param name="_accumMarkNew">مجموع تراكمى جديد</param>
		///<param name="_orgClemencyMark">درجات السلة 2% او 4% على حسب حالة الطالب-مجموع درجات الرافة اللى الطالب اخدها الدور الاول</param>
		///<param name="_totClemencyMark">مجموع درجات الرافة لكل مقررات الفرقة فى اى كنترول لاى عام اكاديمى</param>
		///<param name="_accumClemencyMark">درجة الرافة على المجموع التراكمى فى حالة طالب خريج رفع التقدير</param>
		///<param name="_accumRaiseMark">درجات رفع المجموع التراكمى لتغير التقدير التراكمى للتخرج</param>
		///<param name="_crsFailCount">عدد مقررات الرسوب</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_celemApplyFlg">تطبيق قواعد الرافة</param>
		///<param name="_edCodeGradingId">تقدير الفرقة</param>
		public static EdStdExamSemester CreateEdStdExamSemester(System.Decimal _edStdExamSemesterId, System.Decimal _edStudSemesterId, 
			System.Decimal _edCdeExamTypeId, System.Decimal? _semMarkOld, System.Decimal? _semMarkNew, 
			System.Decimal? _accumMarkOld, System.Decimal? _accumMarkNew, System.Decimal? _orgClemencyMark, 
			System.Decimal? _totClemencyMark, System.Decimal? _accumClemencyMark, System.Decimal? _accumRaiseMark, 
			System.Decimal? _crsFailCount, System.Decimal? _approveFlg, System.Decimal? _celemApplyFlg, 
			System.Decimal? _edCodeGradingId)
		{
			EdStdExamSemester newEdStdExamSemester = new EdStdExamSemester();
			newEdStdExamSemester.EdStdExamSemesterId = _edStdExamSemesterId;
			newEdStdExamSemester.EdStudSemesterId = _edStudSemesterId;
			newEdStdExamSemester.EdCdeExamTypeId = _edCdeExamTypeId;
			newEdStdExamSemester.SemMarkOld = _semMarkOld;
			newEdStdExamSemester.SemMarkNew = _semMarkNew;
			newEdStdExamSemester.AccumMarkOld = _accumMarkOld;
			newEdStdExamSemester.AccumMarkNew = _accumMarkNew;
			newEdStdExamSemester.OrgClemencyMark = _orgClemencyMark;
			newEdStdExamSemester.TotClemencyMark = _totClemencyMark;
			newEdStdExamSemester.AccumClemencyMark = _accumClemencyMark;
			newEdStdExamSemester.AccumRaiseMark = _accumRaiseMark;
			newEdStdExamSemester.CrsFailCount = _crsFailCount;
			newEdStdExamSemester.ApproveFlg = _approveFlg;
			newEdStdExamSemester.CelemApplyFlg = _celemApplyFlg;
			newEdStdExamSemester.EdCodeGradingId = _edCodeGradingId;
			return newEdStdExamSemester;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStdExamSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStdExamSemesterId
		{
			get
			{
				return this.entityData.EdStdExamSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStdExamSemesterId == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.EdStdExamSemesterId, this.entityData.EdStdExamSemesterId);
				this.entityData.EdStdExamSemesterId = value;
				this.EntityId.EdStdExamSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.EdStdExamSemesterId, this.entityData.EdStdExamSemesterId);
				OnPropertyChanged("EdStdExamSemesterId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STD_EXAM_SEMESTER_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STD_EXAM_SEMESTER_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStdExamSemesterId
		{
			get { return this.entityData.OriginalEdStdExamSemesterId; }
			set { this.entityData.OriginalEdStdExamSemesterId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		نوع اعادة الامتحان
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع اعادة الامتحان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemMarkOld property. 
		///		مجموع درجات الفرقة لقديم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemMarkOldNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموع درجات الفرقة لقديم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemMarkOld
		{
			get
			{
				return this.entityData.SemMarkOld; 
			}
			
			set
			{
				if (this.entityData.SemMarkOld == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.SemMarkOld, this.entityData.SemMarkOld);
				this.entityData.SemMarkOld = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.SemMarkOld, this.entityData.SemMarkOld);
				OnPropertyChanged("SemMarkOld");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemMarkNew property. 
		///		مجموع درجات الفرقة الجديد بعد الرافة والرفع
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemMarkNewNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموع درجات الفرقة الجديد بعد الرافة والرفع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemMarkNew
		{
			get
			{
				return this.entityData.SemMarkNew; 
			}
			
			set
			{
				if (this.entityData.SemMarkNew == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.SemMarkNew, this.entityData.SemMarkNew);
				this.entityData.SemMarkNew = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.SemMarkNew, this.entityData.SemMarkNew);
				OnPropertyChanged("SemMarkNew");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumMarkOld property. 
		///		مجموع تراكمى قديم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumMarkOldNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموع تراكمى قديم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumMarkOld
		{
			get
			{
				return this.entityData.AccumMarkOld; 
			}
			
			set
			{
				if (this.entityData.AccumMarkOld == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.AccumMarkOld, this.entityData.AccumMarkOld);
				this.entityData.AccumMarkOld = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.AccumMarkOld, this.entityData.AccumMarkOld);
				OnPropertyChanged("AccumMarkOld");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumMarkNew property. 
		///		مجموع تراكمى جديد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumMarkNewNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموع تراكمى جديد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumMarkNew
		{
			get
			{
				return this.entityData.AccumMarkNew; 
			}
			
			set
			{
				if (this.entityData.AccumMarkNew == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.AccumMarkNew, this.entityData.AccumMarkNew);
				this.entityData.AccumMarkNew = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.AccumMarkNew, this.entityData.AccumMarkNew);
				OnPropertyChanged("AccumMarkNew");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrgClemencyMark property. 
		///		درجات السلة 2% او 4% على حسب حالة الطالب-مجموع درجات الرافة اللى الطالب اخدها الدور الاول
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOrgClemencyMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجات السلة 2% او 4% على حسب حالة الطالب-مجموع درجات الرافة اللى الطالب اخدها الدور الاول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OrgClemencyMark
		{
			get
			{
				return this.entityData.OrgClemencyMark; 
			}
			
			set
			{
				if (this.entityData.OrgClemencyMark == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.OrgClemencyMark, this.entityData.OrgClemencyMark);
				this.entityData.OrgClemencyMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.OrgClemencyMark, this.entityData.OrgClemencyMark);
				OnPropertyChanged("OrgClemencyMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotClemencyMark property. 
		///		مجموع درجات الرافة لكل مقررات الفرقة فى اى كنترول لاى عام اكاديمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotClemencyMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموع درجات الرافة لكل مقررات الفرقة فى اى كنترول لاى عام اكاديمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotClemencyMark
		{
			get
			{
				return this.entityData.TotClemencyMark; 
			}
			
			set
			{
				if (this.entityData.TotClemencyMark == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.TotClemencyMark, this.entityData.TotClemencyMark);
				this.entityData.TotClemencyMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.TotClemencyMark, this.entityData.TotClemencyMark);
				OnPropertyChanged("TotClemencyMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumClemencyMark property. 
		///		درجة الرافة على المجموع التراكمى فى حالة طالب خريج رفع التقدير
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumClemencyMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجة الرافة على المجموع التراكمى فى حالة طالب خريج رفع التقدير"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumClemencyMark
		{
			get
			{
				return this.entityData.AccumClemencyMark; 
			}
			
			set
			{
				if (this.entityData.AccumClemencyMark == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.AccumClemencyMark, this.entityData.AccumClemencyMark);
				this.entityData.AccumClemencyMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.AccumClemencyMark, this.entityData.AccumClemencyMark);
				OnPropertyChanged("AccumClemencyMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumRaiseMark property. 
		///		درجات رفع المجموع التراكمى لتغير التقدير التراكمى للتخرج
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumRaiseMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجات رفع المجموع التراكمى لتغير التقدير التراكمى للتخرج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumRaiseMark
		{
			get
			{
				return this.entityData.AccumRaiseMark; 
			}
			
			set
			{
				if (this.entityData.AccumRaiseMark == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.AccumRaiseMark, this.entityData.AccumRaiseMark);
				this.entityData.AccumRaiseMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.AccumRaiseMark, this.entityData.AccumRaiseMark);
				OnPropertyChanged("AccumRaiseMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsFailCount property. 
		///		عدد مقررات الرسوب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsFailCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد مقررات الرسوب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsFailCount
		{
			get
			{
				return this.entityData.CrsFailCount; 
			}
			
			set
			{
				if (this.entityData.CrsFailCount == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.CrsFailCount, this.entityData.CrsFailCount);
				this.entityData.CrsFailCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.CrsFailCount, this.entityData.CrsFailCount);
				OnPropertyChanged("CrsFailCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		مؤشر اعتماد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CelemApplyFlg property. 
		///		تطبيق قواعد الرافة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCelemApplyFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تطبيق قواعد الرافة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CelemApplyFlg
		{
			get
			{
				return this.entityData.CelemApplyFlg; 
			}
			
			set
			{
				if (this.entityData.CelemApplyFlg == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.CelemApplyFlg, this.entityData.CelemApplyFlg);
				this.entityData.CelemApplyFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.CelemApplyFlg, this.entityData.CelemApplyFlg);
				OnPropertyChanged("CelemApplyFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		تقدير الفرقة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تقدير الفرقة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStdExamSemesterColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStdExamSemesterColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STD_EXAM_SEMESTER"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STD_EXAM_SEMESTER_ID", "ED_STUD_SEMESTER_ID", "ED_CDE_EXAM_TYPE_ID", "SEM_MARK_OLD", "SEM_MARK_NEW", "ACCUM_MARK_OLD", "ACCUM_MARK_NEW", "ORG_CLEMENCY_MARK", "TOT_CLEMENCY_MARK", "ACCUM_CLEMENCY_MARK", "ACCUM_RAISE_MARK", "CRS_FAIL_COUNT", "APPROVE_FLG", "CELEM_APPLY_FLG", "ED_CODE_GRADING_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStdExamSemesterEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStdExamSemester) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStdExamSemester>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStdExamSemester);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStdExamSemester Entity 
		///</summary>
		protected virtual EdStdExamSemester Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStdExamSemester copy = new EdStdExamSemester();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStdExamSemesterId = this.EdStdExamSemesterId;
					copy.OriginalEdStdExamSemesterId = this.OriginalEdStdExamSemesterId;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
				copy.SemMarkOld = this.SemMarkOld;
				copy.SemMarkNew = this.SemMarkNew;
				copy.AccumMarkOld = this.AccumMarkOld;
				copy.AccumMarkNew = this.AccumMarkNew;
				copy.OrgClemencyMark = this.OrgClemencyMark;
				copy.TotClemencyMark = this.TotClemencyMark;
				copy.AccumClemencyMark = this.AccumClemencyMark;
				copy.AccumRaiseMark = this.AccumRaiseMark;
				copy.CrsFailCount = this.CrsFailCount;
				copy.ApproveFlg = this.ApproveFlg;
				copy.CelemApplyFlg = this.CelemApplyFlg;
				copy.EdCodeGradingId = this.EdCodeGradingId;
			
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStdExamSemester Entity 
		///</summary>
		public virtual EdStdExamSemester Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStdExamSemester Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStdExamSemester DeepCopy()
		{
			return EntityHelper.Clone<EdStdExamSemester>(this as EdStdExamSemester);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStdExamSemesterEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStdExamSemesterEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStdExamSemesterEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStdExamSemesterColumn column)
		{
			switch(column)
			{
					case EdStdExamSemesterColumn.EdStdExamSemesterId:
					return entityData.EdStdExamSemesterId != _originalData.EdStdExamSemesterId;
					case EdStdExamSemesterColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStdExamSemesterColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
					case EdStdExamSemesterColumn.SemMarkOld:
					return entityData.SemMarkOld != _originalData.SemMarkOld;
					case EdStdExamSemesterColumn.SemMarkNew:
					return entityData.SemMarkNew != _originalData.SemMarkNew;
					case EdStdExamSemesterColumn.AccumMarkOld:
					return entityData.AccumMarkOld != _originalData.AccumMarkOld;
					case EdStdExamSemesterColumn.AccumMarkNew:
					return entityData.AccumMarkNew != _originalData.AccumMarkNew;
					case EdStdExamSemesterColumn.OrgClemencyMark:
					return entityData.OrgClemencyMark != _originalData.OrgClemencyMark;
					case EdStdExamSemesterColumn.TotClemencyMark:
					return entityData.TotClemencyMark != _originalData.TotClemencyMark;
					case EdStdExamSemesterColumn.AccumClemencyMark:
					return entityData.AccumClemencyMark != _originalData.AccumClemencyMark;
					case EdStdExamSemesterColumn.AccumRaiseMark:
					return entityData.AccumRaiseMark != _originalData.AccumRaiseMark;
					case EdStdExamSemesterColumn.CrsFailCount:
					return entityData.CrsFailCount != _originalData.CrsFailCount;
					case EdStdExamSemesterColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case EdStdExamSemesterColumn.CelemApplyFlg:
					return entityData.CelemApplyFlg != _originalData.CelemApplyFlg;
					case EdStdExamSemesterColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStdExamSemesterColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStdExamSemesterId != _originalData.EdStdExamSemesterId;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			result = result || entityData.SemMarkOld != _originalData.SemMarkOld;
			result = result || entityData.SemMarkNew != _originalData.SemMarkNew;
			result = result || entityData.AccumMarkOld != _originalData.AccumMarkOld;
			result = result || entityData.AccumMarkNew != _originalData.AccumMarkNew;
			result = result || entityData.OrgClemencyMark != _originalData.OrgClemencyMark;
			result = result || entityData.TotClemencyMark != _originalData.TotClemencyMark;
			result = result || entityData.AccumClemencyMark != _originalData.AccumClemencyMark;
			result = result || entityData.AccumRaiseMark != _originalData.AccumRaiseMark;
			result = result || entityData.CrsFailCount != _originalData.CrsFailCount;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.CelemApplyFlg != _originalData.CelemApplyFlg;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStdExamSemester Entity with the original data.
		///</summary>
		public EdStdExamSemester GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStdExamSemester(
				_originalData.EdStdExamSemesterId,
				_originalData.EdStudSemesterId,
				_originalData.EdCdeExamTypeId,
				_originalData.SemMarkOld,
				_originalData.SemMarkNew,
				_originalData.AccumMarkOld,
				_originalData.AccumMarkNew,
				_originalData.OrgClemencyMark,
				_originalData.TotClemencyMark,
				_originalData.AccumClemencyMark,
				_originalData.AccumRaiseMark,
				_originalData.CrsFailCount,
				_originalData.ApproveFlg,
				_originalData.CelemApplyFlg,
				_originalData.EdCodeGradingId
				);
				
			return (EdStdExamSemester)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStdExamSemesterBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStdExamSemesterBase)
				return ValueEquals(this, (EdStdExamSemesterBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStdExamSemesterBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStdExamSemesterId.GetHashCode() ^ 
					this.EdStudSemesterId.GetHashCode() ^ 
					this.EdCdeExamTypeId.GetHashCode() ^ 
					((this.SemMarkOld == null) ? string.Empty : this.SemMarkOld.ToString()).GetHashCode() ^ 
					((this.SemMarkNew == null) ? string.Empty : this.SemMarkNew.ToString()).GetHashCode() ^ 
					((this.AccumMarkOld == null) ? string.Empty : this.AccumMarkOld.ToString()).GetHashCode() ^ 
					((this.AccumMarkNew == null) ? string.Empty : this.AccumMarkNew.ToString()).GetHashCode() ^ 
					((this.OrgClemencyMark == null) ? string.Empty : this.OrgClemencyMark.ToString()).GetHashCode() ^ 
					((this.TotClemencyMark == null) ? string.Empty : this.TotClemencyMark.ToString()).GetHashCode() ^ 
					((this.AccumClemencyMark == null) ? string.Empty : this.AccumClemencyMark.ToString()).GetHashCode() ^ 
					((this.AccumRaiseMark == null) ? string.Empty : this.AccumRaiseMark.ToString()).GetHashCode() ^ 
					((this.CrsFailCount == null) ? string.Empty : this.CrsFailCount.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.CelemApplyFlg == null) ? string.Empty : this.CelemApplyFlg.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStdExamSemesterBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStdExamSemesterBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStdExamSemesterBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStdExamSemesterBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStdExamSemesterBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStdExamSemesterBase Object1, EdStdExamSemesterBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStdExamSemesterId != Object2.EdStdExamSemesterId)
				equal = false;
			if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
				equal = false;
			if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
				equal = false;
			if ( Object1.SemMarkOld != null && Object2.SemMarkOld != null )
			{
				if (Object1.SemMarkOld != Object2.SemMarkOld)
					equal = false;
			}
			else if (Object1.SemMarkOld == null ^ Object2.SemMarkOld == null )
			{
				equal = false;
			}
			if ( Object1.SemMarkNew != null && Object2.SemMarkNew != null )
			{
				if (Object1.SemMarkNew != Object2.SemMarkNew)
					equal = false;
			}
			else if (Object1.SemMarkNew == null ^ Object2.SemMarkNew == null )
			{
				equal = false;
			}
			if ( Object1.AccumMarkOld != null && Object2.AccumMarkOld != null )
			{
				if (Object1.AccumMarkOld != Object2.AccumMarkOld)
					equal = false;
			}
			else if (Object1.AccumMarkOld == null ^ Object2.AccumMarkOld == null )
			{
				equal = false;
			}
			if ( Object1.AccumMarkNew != null && Object2.AccumMarkNew != null )
			{
				if (Object1.AccumMarkNew != Object2.AccumMarkNew)
					equal = false;
			}
			else if (Object1.AccumMarkNew == null ^ Object2.AccumMarkNew == null )
			{
				equal = false;
			}
			if ( Object1.OrgClemencyMark != null && Object2.OrgClemencyMark != null )
			{
				if (Object1.OrgClemencyMark != Object2.OrgClemencyMark)
					equal = false;
			}
			else if (Object1.OrgClemencyMark == null ^ Object2.OrgClemencyMark == null )
			{
				equal = false;
			}
			if ( Object1.TotClemencyMark != null && Object2.TotClemencyMark != null )
			{
				if (Object1.TotClemencyMark != Object2.TotClemencyMark)
					equal = false;
			}
			else if (Object1.TotClemencyMark == null ^ Object2.TotClemencyMark == null )
			{
				equal = false;
			}
			if ( Object1.AccumClemencyMark != null && Object2.AccumClemencyMark != null )
			{
				if (Object1.AccumClemencyMark != Object2.AccumClemencyMark)
					equal = false;
			}
			else if (Object1.AccumClemencyMark == null ^ Object2.AccumClemencyMark == null )
			{
				equal = false;
			}
			if ( Object1.AccumRaiseMark != null && Object2.AccumRaiseMark != null )
			{
				if (Object1.AccumRaiseMark != Object2.AccumRaiseMark)
					equal = false;
			}
			else if (Object1.AccumRaiseMark == null ^ Object2.AccumRaiseMark == null )
			{
				equal = false;
			}
			if ( Object1.CrsFailCount != null && Object2.CrsFailCount != null )
			{
				if (Object1.CrsFailCount != Object2.CrsFailCount)
					equal = false;
			}
			else if (Object1.CrsFailCount == null ^ Object2.CrsFailCount == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.CelemApplyFlg != null && Object2.CelemApplyFlg != null )
			{
				if (Object1.CelemApplyFlg != Object2.CelemApplyFlg)
					equal = false;
			}
			else if (Object1.CelemApplyFlg == null ^ Object2.CelemApplyFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStdExamSemesterBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStdExamSemesterComparer GetComparer()
        {
            return new EdStdExamSemesterComparer();
        }
        */

        // Comparer delegates back to EdStdExamSemester
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStdExamSemester rhs, EdStdExamSemesterColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStdExamSemesterColumn.EdStdExamSemesterId:
            		return this.EdStdExamSemesterId.CompareTo(rhs.EdStdExamSemesterId);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.CompareTo(rhs.EdStudSemesterId);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.CompareTo(rhs.EdCdeExamTypeId);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.SemMarkOld:
            		return this.SemMarkOld.Value.CompareTo(rhs.SemMarkOld.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.SemMarkNew:
            		return this.SemMarkNew.Value.CompareTo(rhs.SemMarkNew.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.AccumMarkOld:
            		return this.AccumMarkOld.Value.CompareTo(rhs.AccumMarkOld.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.AccumMarkNew:
            		return this.AccumMarkNew.Value.CompareTo(rhs.AccumMarkNew.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.OrgClemencyMark:
            		return this.OrgClemencyMark.Value.CompareTo(rhs.OrgClemencyMark.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.TotClemencyMark:
            		return this.TotClemencyMark.Value.CompareTo(rhs.TotClemencyMark.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.AccumClemencyMark:
            		return this.AccumClemencyMark.Value.CompareTo(rhs.AccumClemencyMark.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.AccumRaiseMark:
            		return this.AccumRaiseMark.Value.CompareTo(rhs.AccumRaiseMark.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.CrsFailCount:
            		return this.CrsFailCount.Value.CompareTo(rhs.CrsFailCount.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.CelemApplyFlg:
            		return this.CelemApplyFlg.Value.CompareTo(rhs.CelemApplyFlg.Value);
            		
            		                 
            	
            	
            	case EdStdExamSemesterColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStdExamSemesterKey> Members
		
		// member variable for the EntityId property
		private EdStdExamSemesterKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStdExamSemesterKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStdExamSemesterKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStdExamSemester")
					.Append("|").Append( this.EdStdExamSemesterId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- EdStdExamSemesterId: {0}{15}- EdStudSemesterId: {1}{15}- EdCdeExamTypeId: {2}{15}- SemMarkOld: {3}{15}- SemMarkNew: {4}{15}- AccumMarkOld: {5}{15}- AccumMarkNew: {6}{15}- OrgClemencyMark: {7}{15}- TotClemencyMark: {8}{15}- AccumClemencyMark: {9}{15}- AccumRaiseMark: {10}{15}- CrsFailCount: {11}{15}- ApproveFlg: {12}{15}- CelemApplyFlg: {13}{15}- EdCodeGradingId: {14}{15}{17}", 
				this.EdStdExamSemesterId,
				this.EdStudSemesterId,
				this.EdCdeExamTypeId,
				(this.SemMarkOld == null) ? string.Empty : this.SemMarkOld.ToString(),
				(this.SemMarkNew == null) ? string.Empty : this.SemMarkNew.ToString(),
				(this.AccumMarkOld == null) ? string.Empty : this.AccumMarkOld.ToString(),
				(this.AccumMarkNew == null) ? string.Empty : this.AccumMarkNew.ToString(),
				(this.OrgClemencyMark == null) ? string.Empty : this.OrgClemencyMark.ToString(),
				(this.TotClemencyMark == null) ? string.Empty : this.TotClemencyMark.ToString(),
				(this.AccumClemencyMark == null) ? string.Empty : this.AccumClemencyMark.ToString(),
				(this.AccumRaiseMark == null) ? string.Empty : this.AccumRaiseMark.ToString(),
				(this.CrsFailCount == null) ? string.Empty : this.CrsFailCount.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.CelemApplyFlg == null) ? string.Empty : this.CelemApplyFlg.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STD_EXAM_SEMESTER' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStdExamSemesterEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STD_EXAM_SEMESTER_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STD_EXAM_SEMESTER"</remarks>
		public System.Decimal EdStdExamSemesterId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStdExamSemesterId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdStudSemesterId = 0.0m;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : نوع اعادة الامتحان
		/// </summary>
		public System.Decimal		  EdCdeExamTypeId = 0.0m;
		
		/// <summary>
		/// SEM_MARK_OLD : مجموع درجات الفرقة لقديم
		/// </summary>
		public System.Decimal?		  SemMarkOld = null;
		
		/// <summary>
		/// SEM_MARK_NEW : مجموع درجات الفرقة الجديد بعد الرافة والرفع
		/// </summary>
		public System.Decimal?		  SemMarkNew = null;
		
		/// <summary>
		/// ACCUM_MARK_OLD : مجموع تراكمى قديم
		/// </summary>
		public System.Decimal?		  AccumMarkOld = null;
		
		/// <summary>
		/// ACCUM_MARK_NEW : مجموع تراكمى جديد
		/// </summary>
		public System.Decimal?		  AccumMarkNew = null;
		
		/// <summary>
		/// ORG_CLEMENCY_MARK : درجات السلة 2% او 4% على حسب حالة الطالب-مجموع درجات الرافة اللى الطالب اخدها الدور الاول
		/// </summary>
		public System.Decimal?		  OrgClemencyMark = null;
		
		/// <summary>
		/// TOT_CLEMENCY_MARK : مجموع درجات الرافة لكل مقررات الفرقة فى اى كنترول لاى عام اكاديمى
		/// </summary>
		public System.Decimal?		  TotClemencyMark = null;
		
		/// <summary>
		/// ACCUM_CLEMENCY_MARK : درجة الرافة على المجموع التراكمى فى حالة طالب خريج رفع التقدير
		/// </summary>
		public System.Decimal?		  AccumClemencyMark = null;
		
		/// <summary>
		/// ACCUM_RAISE_MARK : درجات رفع المجموع التراكمى لتغير التقدير التراكمى للتخرج
		/// </summary>
		public System.Decimal?		  AccumRaiseMark = null;
		
		/// <summary>
		/// CRS_FAIL_COUNT : عدد مقررات الرسوب
		/// </summary>
		public System.Decimal?		  CrsFailCount = null;
		
		/// <summary>
		/// APPROVE_FLG : مؤشر اعتماد
		/// </summary>
		public System.Decimal?		  ApproveFlg = null;
		
		/// <summary>
		/// CELEM_APPLY_FLG : تطبيق قواعد الرافة
		/// </summary>
		public System.Decimal?		  CelemApplyFlg = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : تقدير الفرقة
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStdExamSemesterEntityData _tmp = new EdStdExamSemesterEntityData();
						
			_tmp.EdStdExamSemesterId = this.EdStdExamSemesterId;
			_tmp.OriginalEdStdExamSemesterId = this.OriginalEdStdExamSemesterId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.SemMarkOld = this.SemMarkOld;
			_tmp.SemMarkNew = this.SemMarkNew;
			_tmp.AccumMarkOld = this.AccumMarkOld;
			_tmp.AccumMarkNew = this.AccumMarkNew;
			_tmp.OrgClemencyMark = this.OrgClemencyMark;
			_tmp.TotClemencyMark = this.TotClemencyMark;
			_tmp.AccumClemencyMark = this.AccumClemencyMark;
			_tmp.AccumRaiseMark = this.AccumRaiseMark;
			_tmp.CrsFailCount = this.CrsFailCount;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.CelemApplyFlg = this.CelemApplyFlg;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			
			#region Source Parent Composite Entities
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStdExamSemesterEntityData _tmp = new EdStdExamSemesterEntityData();
						
			_tmp.EdStdExamSemesterId = this.EdStdExamSemesterId;
			_tmp.OriginalEdStdExamSemesterId = this.OriginalEdStdExamSemesterId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.SemMarkOld = this.SemMarkOld;
			_tmp.SemMarkNew = this.SemMarkNew;
			_tmp.AccumMarkOld = this.AccumMarkOld;
			_tmp.AccumMarkNew = this.AccumMarkNew;
			_tmp.OrgClemencyMark = this.OrgClemencyMark;
			_tmp.TotClemencyMark = this.TotClemencyMark;
			_tmp.AccumClemencyMark = this.AccumClemencyMark;
			_tmp.AccumRaiseMark = this.AccumRaiseMark;
			_tmp.CrsFailCount = this.CrsFailCount;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.CelemApplyFlg = this.CelemApplyFlg;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			
			#region Source Parent Composite Entities
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdExamSemesterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStdExamSemesterColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdExamSemesterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStdExamSemesterColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdExamSemesterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStdExamSemesterColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStdExamSemesterEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStdExamSemesterEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStdExamSemesterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStdExamSemesterColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStdExamSemesterEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStdExamSemesterEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStdExamSemesterEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStdExamSemester"/> object.
	/// </remarks>
	public class EdStdExamSemesterEventArgs : System.EventArgs
	{
		private EdStdExamSemesterColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStdExamSemesterEventArgs class.
		///</summary>
		public EdStdExamSemesterEventArgs(EdStdExamSemesterColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStdExamSemesterEventArgs class.
		///</summary>
		public EdStdExamSemesterEventArgs(EdStdExamSemesterColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStdExamSemesterColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStdExamSemesterColumn" />
		public EdStdExamSemesterColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStdExamSemester related events.
	///</summary>
	public delegate void EdStdExamSemesterEventHandler(object sender, EdStdExamSemesterEventArgs e);
	
	#region EdStdExamSemesterComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStdExamSemesterComparer : System.Collections.Generic.IComparer<EdStdExamSemester>
	{
		EdStdExamSemesterColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStdExamSemesterComparer"/> class.
        /// </summary>
		public EdStdExamSemesterComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStdExamSemesterComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStdExamSemesterComparer(EdStdExamSemesterColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStdExamSemester"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStdExamSemester"/> to compare.</param>
        /// <param name="b">The second <c>EdStdExamSemester</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStdExamSemester a, EdStdExamSemester b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStdExamSemester entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStdExamSemester a, EdStdExamSemester b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStdExamSemesterColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStdExamSemesterKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStdExamSemester"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStdExamSemesterKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterKey class.
		/// </summary>
		public EdStdExamSemesterKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterKey class.
		/// </summary>
		public EdStdExamSemesterKey(EdStdExamSemesterBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStdExamSemesterId = entity.EdStdExamSemesterId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStdExamSemesterKey class.
		/// </summary>
		public EdStdExamSemesterKey(System.Decimal _edStdExamSemesterId)
		{
			#region Init Properties

			this.EdStdExamSemesterId = _edStdExamSemesterId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStdExamSemesterBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStdExamSemesterBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStdExamSemesterId property
		private System.Decimal _edStdExamSemesterId;
		
		/// <summary>
		/// Gets or sets the EdStdExamSemesterId property.
		/// </summary>
		public System.Decimal EdStdExamSemesterId
		{
			get { return _edStdExamSemesterId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStdExamSemesterId = value;
				
				_edStdExamSemesterId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStdExamSemesterId = ( values["EdStdExamSemesterId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStdExamSemesterId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStdExamSemesterId", EdStdExamSemesterId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStdExamSemesterId: {0}{1}",
								EdStdExamSemesterId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStdExamSemesterColumn Enum
	
	/// <summary>
	/// Enumerate the EdStdExamSemester columns.
	/// </summary>
	[Serializable]
	public enum EdStdExamSemesterColumn : int
	{
		/// <summary>
		/// EdStdExamSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STD_EXAM_SEMESTER_ID")]
		[ColumnEnum("ED_STD_EXAM_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStdExamSemesterId = 1,
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudSemesterId = 2,
		/// <summary>
		/// EdCdeExamTypeId : نوع اعادة الامتحان
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCdeExamTypeId = 3,
		/// <summary>
		/// SemMarkOld : مجموع درجات الفرقة لقديم
		/// </summary>
		[EnumTextValue("SEM_MARK_OLD")]
		[ColumnEnum("SEM_MARK_OLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemMarkOld = 4,
		/// <summary>
		/// SemMarkNew : مجموع درجات الفرقة الجديد بعد الرافة والرفع
		/// </summary>
		[EnumTextValue("SEM_MARK_NEW")]
		[ColumnEnum("SEM_MARK_NEW", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemMarkNew = 5,
		/// <summary>
		/// AccumMarkOld : مجموع تراكمى قديم
		/// </summary>
		[EnumTextValue("ACCUM_MARK_OLD")]
		[ColumnEnum("ACCUM_MARK_OLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumMarkOld = 6,
		/// <summary>
		/// AccumMarkNew : مجموع تراكمى جديد
		/// </summary>
		[EnumTextValue("ACCUM_MARK_NEW")]
		[ColumnEnum("ACCUM_MARK_NEW", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumMarkNew = 7,
		/// <summary>
		/// OrgClemencyMark : درجات السلة 2% او 4% على حسب حالة الطالب-مجموع درجات الرافة اللى الطالب اخدها الدور الاول
		/// </summary>
		[EnumTextValue("ORG_CLEMENCY_MARK")]
		[ColumnEnum("ORG_CLEMENCY_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OrgClemencyMark = 8,
		/// <summary>
		/// TotClemencyMark : مجموع درجات الرافة لكل مقررات الفرقة فى اى كنترول لاى عام اكاديمى
		/// </summary>
		[EnumTextValue("TOT_CLEMENCY_MARK")]
		[ColumnEnum("TOT_CLEMENCY_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotClemencyMark = 9,
		/// <summary>
		/// AccumClemencyMark : درجة الرافة على المجموع التراكمى فى حالة طالب خريج رفع التقدير
		/// </summary>
		[EnumTextValue("ACCUM_CLEMENCY_MARK")]
		[ColumnEnum("ACCUM_CLEMENCY_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumClemencyMark = 10,
		/// <summary>
		/// AccumRaiseMark : درجات رفع المجموع التراكمى لتغير التقدير التراكمى للتخرج
		/// </summary>
		[EnumTextValue("ACCUM_RAISE_MARK")]
		[ColumnEnum("ACCUM_RAISE_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumRaiseMark = 11,
		/// <summary>
		/// CrsFailCount : عدد مقررات الرسوب
		/// </summary>
		[EnumTextValue("CRS_FAIL_COUNT")]
		[ColumnEnum("CRS_FAIL_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsFailCount = 12,
		/// <summary>
		/// ApproveFlg : مؤشر اعتماد
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ApproveFlg = 13,
		/// <summary>
		/// CelemApplyFlg : تطبيق قواعد الرافة
		/// </summary>
		[EnumTextValue("CELEM_APPLY_FLG")]
		[ColumnEnum("CELEM_APPLY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CelemApplyFlg = 14,
		/// <summary>
		/// EdCodeGradingId : تقدير الفرقة
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 15
	}//End enum

	#endregion EdStdExamSemesterColumn Enum

} // end namespace
