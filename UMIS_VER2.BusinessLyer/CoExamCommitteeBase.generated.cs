
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CoExamCommittee.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'CO_EXAM_COMMITTEE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CoExamCommitteeBase : EntityBase, ICoExamCommittee, IEntityId<CoExamCommitteeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CoExamCommitteeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CoExamCommitteeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CoExamCommitteeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CoExamCommittee> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoExamCommitteeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoExamCommitteeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CoExamCommitteeBase"/> instance.
		///</summary>
		public CoExamCommitteeBase()
		{
			this.entityData = new CoExamCommitteeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CoExamCommitteeBase"/> instance.
		///</summary>
		///<param name="_coExamCommitteeId">لجان الامتحان</param>
		///<param name="_coControlId">XXcurrently NULL</param>
		///<param name="_commNameAr"></param>
		///<param name="_commNameEn"></param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_capacity">اقصى عدد طلاب</param>
		///<param name="_seatNumFrom">رقم جلوس الطالب  من</param>
		///<param name="_seatNumTo">رقم جلوس الطالب  الى</param>
		///<param name="_isActive">لجنه نشط او غير نشط</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public CoExamCommitteeBase(System.Decimal _coExamCommitteeId, System.Decimal? _coControlId, 
			System.String _commNameAr, System.String _commNameEn, System.String _notes, 
			System.Decimal? _scBuildingId, System.Decimal? _scHallId, System.Decimal? _capacity, 
			System.String _seatNumFrom, System.String _seatNumTo, System.Decimal _isActive, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new CoExamCommitteeEntityData();
			this.backupData = null;

			this.CoExamCommitteeId = _coExamCommitteeId;
			this.CoControlId = _coControlId;
			this.CommNameAr = _commNameAr;
			this.CommNameEn = _commNameEn;
			this.Notes = _notes;
			this.ScBuildingId = _scBuildingId;
			this.ScHallId = _scHallId;
			this.Capacity = _capacity;
			this.SeatNumFrom = _seatNumFrom;
			this.SeatNumTo = _seatNumTo;
			this.IsActive = _isActive;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CoExamCommittee"/> instance.
		///</summary>
		///<param name="_coExamCommitteeId">لجان الامتحان</param>
		///<param name="_coControlId">XXcurrently NULL</param>
		///<param name="_commNameAr"></param>
		///<param name="_commNameEn"></param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_capacity">اقصى عدد طلاب</param>
		///<param name="_seatNumFrom">رقم جلوس الطالب  من</param>
		///<param name="_seatNumTo">رقم جلوس الطالب  الى</param>
		///<param name="_isActive">لجنه نشط او غير نشط</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static CoExamCommittee CreateCoExamCommittee(System.Decimal _coExamCommitteeId, System.Decimal? _coControlId, 
			System.String _commNameAr, System.String _commNameEn, System.String _notes, 
			System.Decimal? _scBuildingId, System.Decimal? _scHallId, System.Decimal? _capacity, 
			System.String _seatNumFrom, System.String _seatNumTo, System.Decimal _isActive, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			CoExamCommittee newCoExamCommittee = new CoExamCommittee();
			newCoExamCommittee.CoExamCommitteeId = _coExamCommitteeId;
			newCoExamCommittee.CoControlId = _coControlId;
			newCoExamCommittee.CommNameAr = _commNameAr;
			newCoExamCommittee.CommNameEn = _commNameEn;
			newCoExamCommittee.Notes = _notes;
			newCoExamCommittee.ScBuildingId = _scBuildingId;
			newCoExamCommittee.ScHallId = _scHallId;
			newCoExamCommittee.Capacity = _capacity;
			newCoExamCommittee.SeatNumFrom = _seatNumFrom;
			newCoExamCommittee.SeatNumTo = _seatNumTo;
			newCoExamCommittee.IsActive = _isActive;
			newCoExamCommittee.SeUserId = _seUserId;
			newCoExamCommittee.LastDate = _lastDate;
			return newCoExamCommittee;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CoExamCommitteeId property. 
		///		لجان الامتحان
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"لجان الامتحان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal CoExamCommitteeId
		{
			get
			{
				return this.entityData.CoExamCommitteeId; 
			}
			
			set
			{
				if (this.entityData.CoExamCommitteeId == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.CoExamCommitteeId, this.entityData.CoExamCommitteeId);
				this.entityData.CoExamCommitteeId = value;
				this.EntityId.CoExamCommitteeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.CoExamCommitteeId, this.entityData.CoExamCommitteeId);
				OnPropertyChanged("CoExamCommitteeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CO_EXAM_COMMITTEE_ID property.
		///		لجان الامتحان
		/// </summary>
		/// <remarks>This is the original value of the CO_EXAM_COMMITTEE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalCoExamCommitteeId
		{
			get { return this.entityData.OriginalCoExamCommitteeId; }
			set { this.entityData.OriginalCoExamCommitteeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CoControlId property. 
		///		XXcurrently NULL
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoControlIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXcurrently NULL"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoControlId
		{
			get
			{
				return this.entityData.CoControlId; 
			}
			
			set
			{
				if (this.entityData.CoControlId == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.CoControlId, this.entityData.CoControlId);
				this.entityData.CoControlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.CoControlId, this.entityData.CoControlId);
				OnPropertyChanged("CoControlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CommNameAr
		{
			get
			{
				return this.entityData.CommNameAr; 
			}
			
			set
			{
				if (this.entityData.CommNameAr == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.CommNameAr, this.entityData.CommNameAr);
				this.entityData.CommNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.CommNameAr, this.entityData.CommNameAr);
				OnPropertyChanged("CommNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CommNameEn
		{
			get
			{
				return this.entityData.CommNameEn; 
			}
			
			set
			{
				if (this.entityData.CommNameEn == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.CommNameEn, this.entityData.CommNameEn);
				this.entityData.CommNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.CommNameEn, this.entityData.CommNameEn);
				OnPropertyChanged("CommNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Capacity property. 
		///		اقصى عدد طلاب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCapacityNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اقصى عدد طلاب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Capacity
		{
			get
			{
				return this.entityData.Capacity; 
			}
			
			set
			{
				if (this.entityData.Capacity == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.Capacity, this.entityData.Capacity);
				this.entityData.Capacity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.Capacity, this.entityData.Capacity);
				OnPropertyChanged("Capacity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeatNumFrom property. 
		///		رقم جلوس الطالب  من
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم جلوس الطالب  من"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String SeatNumFrom
		{
			get
			{
				return this.entityData.SeatNumFrom; 
			}
			
			set
			{
				if (this.entityData.SeatNumFrom == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.SeatNumFrom, this.entityData.SeatNumFrom);
				this.entityData.SeatNumFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.SeatNumFrom, this.entityData.SeatNumFrom);
				OnPropertyChanged("SeatNumFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeatNumTo property. 
		///		رقم جلوس الطالب  الى
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم جلوس الطالب  الى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String SeatNumTo
		{
			get
			{
				return this.entityData.SeatNumTo; 
			}
			
			set
			{
				if (this.entityData.SeatNumTo == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.SeatNumTo, this.entityData.SeatNumTo);
				this.entityData.SeatNumTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.SeatNumTo, this.entityData.SeatNumTo);
				OnPropertyChanged("SeatNumTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		لجنه نشط او غير نشط
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"لجنه نشط او غير نشط"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(CoExamCommitteeColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoExamCommitteeColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="CoControl"/>.
		/// </summary>
		/// <value>The source CoControl for CoControlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CoControl CoControlIdSource
      	{
            get { return entityData.CoControlIdSource; }
            set { entityData.CoControlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CoExamSchdlPlace objects
		///	which are related to this object through the relation FK_CO_EXAM_SCHDL_PLACE_CO_EXAM_COMMITTEE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get { return entityData.CoExamSchdlPlaceCollection; }
			set { entityData.CoExamSchdlPlaceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CommNameAr", "Comm Name Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CommNameEn", "Comm Name En", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SeatNumFrom", "Seat Num From", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SeatNumTo", "Seat Num To", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CO_EXAM_COMMITTEE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CO_EXAM_COMMITTEE_ID", "CO_CONTROL_ID", "COMM_NAME_AR", "COMM_NAME_EN", "NOTES", "SC_BUILDING_ID", "SC_HALL_ID", "CAPACITY", "SEAT_NUM_FROM", "SEAT_NUM_TO", "IS_ACTIVE", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CoExamCommitteeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CoExamCommittee) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CoExamCommittee>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CoExamCommittee);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CoExamCommittee Entity 
		///</summary>
		protected virtual CoExamCommittee Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CoExamCommittee copy = new CoExamCommittee();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CoExamCommitteeId = this.CoExamCommitteeId;
					copy.OriginalCoExamCommitteeId = this.OriginalCoExamCommitteeId;
				copy.CoControlId = this.CoControlId;
				copy.CommNameAr = this.CommNameAr;
				copy.CommNameEn = this.CommNameEn;
				copy.Notes = this.Notes;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ScHallId = this.ScHallId;
				copy.Capacity = this.Capacity;
				copy.SeatNumFrom = this.SeatNumFrom;
				copy.SeatNumTo = this.SeatNumTo;
				copy.IsActive = this.IsActive;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.CoControlIdSource != null && existingCopies.Contains(this.CoControlIdSource))
				copy.CoControlIdSource = existingCopies[this.CoControlIdSource] as CoControl;
			else
				copy.CoControlIdSource = MakeCopyOf(this.CoControlIdSource, existingCopies) as CoControl;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
		
			//deep copy nested objects
			copy.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CoExamCommittee Entity 
		///</summary>
		public virtual CoExamCommittee Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CoExamCommittee Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CoExamCommittee DeepCopy()
		{
			return EntityHelper.Clone<CoExamCommittee>(this as CoExamCommittee);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CoExamCommitteeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CoExamCommitteeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CoExamCommitteeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CoExamCommitteeColumn column)
		{
			switch(column)
			{
					case CoExamCommitteeColumn.CoExamCommitteeId:
					return entityData.CoExamCommitteeId != _originalData.CoExamCommitteeId;
					case CoExamCommitteeColumn.CoControlId:
					return entityData.CoControlId != _originalData.CoControlId;
					case CoExamCommitteeColumn.CommNameAr:
					return entityData.CommNameAr != _originalData.CommNameAr;
					case CoExamCommitteeColumn.CommNameEn:
					return entityData.CommNameEn != _originalData.CommNameEn;
					case CoExamCommitteeColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case CoExamCommitteeColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case CoExamCommitteeColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case CoExamCommitteeColumn.Capacity:
					return entityData.Capacity != _originalData.Capacity;
					case CoExamCommitteeColumn.SeatNumFrom:
					return entityData.SeatNumFrom != _originalData.SeatNumFrom;
					case CoExamCommitteeColumn.SeatNumTo:
					return entityData.SeatNumTo != _originalData.SeatNumTo;
					case CoExamCommitteeColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case CoExamCommitteeColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case CoExamCommitteeColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CoExamCommitteeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CoExamCommitteeId != _originalData.CoExamCommitteeId;
			result = result || entityData.CoControlId != _originalData.CoControlId;
			result = result || entityData.CommNameAr != _originalData.CommNameAr;
			result = result || entityData.CommNameEn != _originalData.CommNameEn;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.Capacity != _originalData.Capacity;
			result = result || entityData.SeatNumFrom != _originalData.SeatNumFrom;
			result = result || entityData.SeatNumTo != _originalData.SeatNumTo;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a CoExamCommittee Entity with the original data.
		///</summary>
		public CoExamCommittee GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCoExamCommittee(
				_originalData.CoExamCommitteeId,
				_originalData.CoControlId,
				_originalData.CommNameAr,
				_originalData.CommNameEn,
				_originalData.Notes,
				_originalData.ScBuildingId,
				_originalData.ScHallId,
				_originalData.Capacity,
				_originalData.SeatNumFrom,
				_originalData.SeatNumTo,
				_originalData.IsActive,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (CoExamCommittee)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CoExamCommitteeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CoExamCommitteeBase)
				return ValueEquals(this, (CoExamCommitteeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CoExamCommitteeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CoExamCommitteeId.GetHashCode() ^ 
					((this.CoControlId == null) ? string.Empty : this.CoControlId.ToString()).GetHashCode() ^ 
					((this.CommNameAr == null) ? string.Empty : this.CommNameAr.ToString()).GetHashCode() ^ 
					((this.CommNameEn == null) ? string.Empty : this.CommNameEn.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					((this.Capacity == null) ? string.Empty : this.Capacity.ToString()).GetHashCode() ^ 
					((this.SeatNumFrom == null) ? string.Empty : this.SeatNumFrom.ToString()).GetHashCode() ^ 
					((this.SeatNumTo == null) ? string.Empty : this.SeatNumTo.ToString()).GetHashCode() ^ 
					this.IsActive.GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CoExamCommitteeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CoExamCommitteeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CoExamCommitteeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CoExamCommitteeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CoExamCommitteeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CoExamCommitteeBase Object1, CoExamCommitteeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CoExamCommitteeId != Object2.CoExamCommitteeId)
				equal = false;
			if ( Object1.CoControlId != null && Object2.CoControlId != null )
			{
				if (Object1.CoControlId != Object2.CoControlId)
					equal = false;
			}
			else if (Object1.CoControlId == null ^ Object2.CoControlId == null )
			{
				equal = false;
			}
			if ( Object1.CommNameAr != null && Object2.CommNameAr != null )
			{
				if (Object1.CommNameAr != Object2.CommNameAr)
					equal = false;
			}
			else if (Object1.CommNameAr == null ^ Object2.CommNameAr == null )
			{
				equal = false;
			}
			if ( Object1.CommNameEn != null && Object2.CommNameEn != null )
			{
				if (Object1.CommNameEn != Object2.CommNameEn)
					equal = false;
			}
			else if (Object1.CommNameEn == null ^ Object2.CommNameEn == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if ( Object1.Capacity != null && Object2.Capacity != null )
			{
				if (Object1.Capacity != Object2.Capacity)
					equal = false;
			}
			else if (Object1.Capacity == null ^ Object2.Capacity == null )
			{
				equal = false;
			}
			if ( Object1.SeatNumFrom != null && Object2.SeatNumFrom != null )
			{
				if (Object1.SeatNumFrom != Object2.SeatNumFrom)
					equal = false;
			}
			else if (Object1.SeatNumFrom == null ^ Object2.SeatNumFrom == null )
			{
				equal = false;
			}
			if ( Object1.SeatNumTo != null && Object2.SeatNumTo != null )
			{
				if (Object1.SeatNumTo != Object2.SeatNumTo)
					equal = false;
			}
			else if (Object1.SeatNumTo == null ^ Object2.SeatNumTo == null )
			{
				equal = false;
			}
			if (Object1.IsActive != Object2.IsActive)
				equal = false;
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CoExamCommitteeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CoExamCommitteeComparer GetComparer()
        {
            return new CoExamCommitteeComparer();
        }
        */

        // Comparer delegates back to CoExamCommittee
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CoExamCommittee rhs, CoExamCommitteeColumn which)
        {
            switch (which)
            {
            	
            	
            	case CoExamCommitteeColumn.CoExamCommitteeId:
            		return this.CoExamCommitteeId.CompareTo(rhs.CoExamCommitteeId);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.CoControlId:
            		return this.CoControlId.Value.CompareTo(rhs.CoControlId.Value);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.CommNameAr:
            		return this.CommNameAr.CompareTo(rhs.CommNameAr);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.CommNameEn:
            		return this.CommNameEn.CompareTo(rhs.CommNameEn);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.Capacity:
            		return this.Capacity.Value.CompareTo(rhs.Capacity.Value);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.SeatNumFrom:
            		return this.SeatNumFrom.CompareTo(rhs.SeatNumFrom);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.SeatNumTo:
            		return this.SeatNumTo.CompareTo(rhs.SeatNumTo);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.IsActive:
            		return this.IsActive.CompareTo(rhs.IsActive);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case CoExamCommitteeColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CoExamCommitteeKey> Members
		
		// member variable for the EntityId property
		private CoExamCommitteeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CoExamCommitteeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CoExamCommitteeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CoExamCommittee")
					.Append("|").Append( this.CoExamCommitteeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- CoExamCommitteeId: {0}{13}- CoControlId: {1}{13}- CommNameAr: {2}{13}- CommNameEn: {3}{13}- Notes: {4}{13}- ScBuildingId: {5}{13}- ScHallId: {6}{13}- Capacity: {7}{13}- SeatNumFrom: {8}{13}- SeatNumTo: {9}{13}- IsActive: {10}{13}- SeUserId: {11}{13}- LastDate: {12}{13}{15}", 
				this.CoExamCommitteeId,
				(this.CoControlId == null) ? string.Empty : this.CoControlId.ToString(),
				(this.CommNameAr == null) ? string.Empty : this.CommNameAr.ToString(),
				(this.CommNameEn == null) ? string.Empty : this.CommNameEn.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				(this.Capacity == null) ? string.Empty : this.Capacity.ToString(),
				(this.SeatNumFrom == null) ? string.Empty : this.SeatNumFrom.ToString(),
				(this.SeatNumTo == null) ? string.Empty : this.SeatNumTo.ToString(),
				this.IsActive,
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CO_EXAM_COMMITTEE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CoExamCommitteeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CO_EXAM_COMMITTEE_ID : لجان الامتحان
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CO_EXAM_COMMITTEE"</remarks>
		public System.Decimal CoExamCommitteeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalCoExamCommitteeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CO_CONTROL_ID : XXcurrently NULL
		/// </summary>
		public System.Decimal?		  CoControlId = null;
		
		/// <summary>
		/// COMM_NAME_AR : 
		/// </summary>
		public System.String		  CommNameAr = null;
		
		/// <summary>
		/// COMM_NAME_EN : 
		/// </summary>
		public System.String		  CommNameEn = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// SC_HALL_ID : 
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// CAPACITY : اقصى عدد طلاب
		/// </summary>
		public System.Decimal?		  Capacity = null;
		
		/// <summary>
		/// SEAT_NUM_FROM : رقم جلوس الطالب  من
		/// </summary>
		public System.String		  SeatNumFrom = null;
		
		/// <summary>
		/// SEAT_NUM_TO : رقم جلوس الطالب  الى
		/// </summary>
		public System.String		  SeatNumTo = null;
		
		/// <summary>
		/// IS_ACTIVE : لجنه نشط او غير نشط
		/// </summary>
		public System.Decimal		  IsActive = 0.0m;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private CoControl _coControlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CoControl"/>.
		/// </summary>
		/// <value>The source CoControl for CoControlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CoControl CoControlIdSource
      	{
            get { return this._coControlIdSource; }
            set { this._coControlIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CoExamSchdlPlaceCollection
		
		private TList<CoExamSchdlPlace> _coExamSchdlPlaceCoExamCommitteeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamSchdlPlaceCoExamCommitteeId
		/// </summary>
		
		public TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get
			{
				if (_coExamSchdlPlaceCoExamCommitteeId == null)
				{
				_coExamSchdlPlaceCoExamCommitteeId = new TList<CoExamSchdlPlace>();
				}
	
				return _coExamSchdlPlaceCoExamCommitteeId;
			}
			set { _coExamSchdlPlaceCoExamCommitteeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CoExamCommitteeEntityData _tmp = new CoExamCommitteeEntityData();
						
			_tmp.CoExamCommitteeId = this.CoExamCommitteeId;
			_tmp.OriginalCoExamCommitteeId = this.OriginalCoExamCommitteeId;
			
			_tmp.CoControlId = this.CoControlId;
			_tmp.CommNameAr = this.CommNameAr;
			_tmp.CommNameEn = this.CommNameEn;
			_tmp.Notes = this.Notes;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.Capacity = this.Capacity;
			_tmp.SeatNumFrom = this.SeatNumFrom;
			_tmp.SeatNumTo = this.SeatNumTo;
			_tmp.IsActive = this.IsActive;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.CoControlIdSource != null)
				_tmp.CoControlIdSource = MakeCopyOf(this.CoControlIdSource) as CoControl;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._coExamSchdlPlaceCoExamCommitteeId != null)
				_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CoExamCommitteeEntityData _tmp = new CoExamCommitteeEntityData();
						
			_tmp.CoExamCommitteeId = this.CoExamCommitteeId;
			_tmp.OriginalCoExamCommitteeId = this.OriginalCoExamCommitteeId;
			
			_tmp.CoControlId = this.CoControlId;
			_tmp.CommNameAr = this.CommNameAr;
			_tmp.CommNameEn = this.CommNameEn;
			_tmp.Notes = this.Notes;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.Capacity = this.Capacity;
			_tmp.SeatNumFrom = this.SeatNumFrom;
			_tmp.SeatNumTo = this.SeatNumTo;
			_tmp.IsActive = this.IsActive;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.CoControlIdSource != null && existingCopies.Contains(this.CoControlIdSource))
				_tmp.CoControlIdSource = existingCopies[this.CoControlIdSource] as CoControl;
			else
				_tmp.CoControlIdSource = MakeCopyOf(this.CoControlIdSource, existingCopies) as CoControl;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoExamCommitteeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CoExamCommitteeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoExamCommitteeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CoExamCommitteeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoExamCommitteeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CoExamCommitteeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CoExamCommitteeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CoExamCommitteeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoExamCommitteeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CoExamCommitteeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CoExamCommitteeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CoExamCommitteeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CoExamCommitteeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CoExamCommittee"/> object.
	/// </remarks>
	public class CoExamCommitteeEventArgs : System.EventArgs
	{
		private CoExamCommitteeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CoExamCommitteeEventArgs class.
		///</summary>
		public CoExamCommitteeEventArgs(CoExamCommitteeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CoExamCommitteeEventArgs class.
		///</summary>
		public CoExamCommitteeEventArgs(CoExamCommitteeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CoExamCommitteeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CoExamCommitteeColumn" />
		public CoExamCommitteeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CoExamCommittee related events.
	///</summary>
	public delegate void CoExamCommitteeEventHandler(object sender, CoExamCommitteeEventArgs e);
	
	#region CoExamCommitteeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CoExamCommitteeComparer : System.Collections.Generic.IComparer<CoExamCommittee>
	{
		CoExamCommitteeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CoExamCommitteeComparer"/> class.
        /// </summary>
		public CoExamCommitteeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CoExamCommitteeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CoExamCommitteeComparer(CoExamCommitteeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CoExamCommittee"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CoExamCommittee"/> to compare.</param>
        /// <param name="b">The second <c>CoExamCommittee</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CoExamCommittee a, CoExamCommittee b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CoExamCommittee entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CoExamCommittee a, CoExamCommittee b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CoExamCommitteeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CoExamCommitteeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CoExamCommittee"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CoExamCommitteeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeKey class.
		/// </summary>
		public CoExamCommitteeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeKey class.
		/// </summary>
		public CoExamCommitteeKey(CoExamCommitteeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CoExamCommitteeId = entity.CoExamCommitteeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CoExamCommitteeKey class.
		/// </summary>
		public CoExamCommitteeKey(System.Decimal _coExamCommitteeId)
		{
			#region Init Properties

			this.CoExamCommitteeId = _coExamCommitteeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CoExamCommitteeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CoExamCommitteeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CoExamCommitteeId property
		private System.Decimal _coExamCommitteeId;
		
		/// <summary>
		/// Gets or sets the CoExamCommitteeId property.
		/// </summary>
		public System.Decimal CoExamCommitteeId
		{
			get { return _coExamCommitteeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CoExamCommitteeId = value;
				
				_coExamCommitteeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CoExamCommitteeId = ( values["CoExamCommitteeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["CoExamCommitteeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CoExamCommitteeId", CoExamCommitteeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CoExamCommitteeId: {0}{1}",
								CoExamCommitteeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CoExamCommitteeColumn Enum
	
	/// <summary>
	/// Enumerate the CoExamCommittee columns.
	/// </summary>
	[Serializable]
	public enum CoExamCommitteeColumn : int
	{
		/// <summary>
		/// CoExamCommitteeId : لجان الامتحان
		/// </summary>
		[EnumTextValue("CO_EXAM_COMMITTEE_ID")]
		[ColumnEnum("CO_EXAM_COMMITTEE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		CoExamCommitteeId = 1,
		/// <summary>
		/// CoControlId : XXcurrently NULL
		/// </summary>
		[EnumTextValue("CO_CONTROL_ID")]
		[ColumnEnum("CO_CONTROL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoControlId = 2,
		/// <summary>
		/// CommNameAr : 
		/// </summary>
		[EnumTextValue("COMM_NAME_AR")]
		[ColumnEnum("COMM_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		CommNameAr = 3,
		/// <summary>
		/// CommNameEn : 
		/// </summary>
		[EnumTextValue("COMM_NAME_EN")]
		[ColumnEnum("COMM_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		CommNameEn = 4,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Notes = 5,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 6,
		/// <summary>
		/// ScHallId : 
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 7,
		/// <summary>
		/// Capacity : اقصى عدد طلاب
		/// </summary>
		[EnumTextValue("CAPACITY")]
		[ColumnEnum("CAPACITY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Capacity = 8,
		/// <summary>
		/// SeatNumFrom : رقم جلوس الطالب  من
		/// </summary>
		[EnumTextValue("SEAT_NUM_FROM")]
		[ColumnEnum("SEAT_NUM_FROM", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		SeatNumFrom = 9,
		/// <summary>
		/// SeatNumTo : رقم جلوس الطالب  الى
		/// </summary>
		[EnumTextValue("SEAT_NUM_TO")]
		[ColumnEnum("SEAT_NUM_TO", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		SeatNumTo = 10,
		/// <summary>
		/// IsActive : لجنه نشط او غير نشط
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsActive = 11,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 12,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 13
	}//End enum

	#endregion CoExamCommitteeColumn Enum

} // end namespace
