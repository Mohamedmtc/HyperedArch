
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntPolcyGpa.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_POLCY_GPA' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntPolcyGpaBase : EntityBase, IEntPolcyGpa, IEntityId<EntPolcyGpaKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntPolcyGpaEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntPolcyGpaEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntPolcyGpaEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntPolcyGpa> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolcyGpaEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolcyGpaEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntPolcyGpaBase"/> instance.
		///</summary>
		public EntPolcyGpaBase()
		{
			this.entityData = new EntPolcyGpaEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntPolcyGpaBase"/> instance.
		///</summary>
		///<param name="_entPolcyGpaId">محددات حساب المعدلات الفصلية و التراكمية</param>
		///<param name="_edBylawId"></param>
		///<param name="_cgpaFailCourseCount"> عدد مرات دخول مقرر الرسوب فى المعدل التراكمى
		/// 		/// -1:every once take course
		/// 		/// 1:Only Once when First time student register course
		/// 		/// 2:once when first time student register course and second when pass in it
		/// 		/// 
		/// 		/// if it onholdflag=1 take it as First Method</param>
		///<param name="_gpaDecimalPart">=2   عدد الارقام بعد العلامة العشرية</param>
		///<param name="_onHoldFlag">Meaning Calculate Failed Courses with two methods
		/// 		/// 0:Default - False
		/// 		/// 1:True - Must enter Second method for calculate
		/// 		/// 
		/// 		/// </param>
		///<param name="_onHoldCount">Count of Failed be on hold</param>
		///<param name="_cgpaFailCountAfterHold">Calculation Method after hold</param>
		///<param name="_cgpaChFlg">1-Graded Hrs  2-Passed Hrs default 1</param>
		public EntPolcyGpaBase(System.Int32 _entPolcyGpaId, System.Decimal? _edBylawId, 
			System.Int32? _cgpaFailCourseCount, System.Int32? _gpaDecimalPart, System.Boolean? _onHoldFlag, 
			System.Int32? _onHoldCount, System.Int32? _cgpaFailCountAfterHold, System.Decimal? _cgpaChFlg)
		{
			this.entityData = new EntPolcyGpaEntityData();
			this.backupData = null;

			this.EntPolcyGpaId = _entPolcyGpaId;
			this.EdBylawId = _edBylawId;
			this.CgpaFailCourseCount = _cgpaFailCourseCount;
			this.GpaDecimalPart = _gpaDecimalPart;
			this.OnHoldFlag = _onHoldFlag;
			this.OnHoldCount = _onHoldCount;
			this.CgpaFailCountAfterHold = _cgpaFailCountAfterHold;
			this.CgpaChFlg = _cgpaChFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntPolcyGpa"/> instance.
		///</summary>
		///<param name="_entPolcyGpaId">محددات حساب المعدلات الفصلية و التراكمية</param>
		///<param name="_edBylawId"></param>
		///<param name="_cgpaFailCourseCount"> عدد مرات دخول مقرر الرسوب فى المعدل التراكمى
		/// 		/// -1:every once take course
		/// 		/// 1:Only Once when First time student register course
		/// 		/// 2:once when first time student register course and second when pass in it
		/// 		/// 
		/// 		/// if it onholdflag=1 take it as First Method</param>
		///<param name="_gpaDecimalPart">=2   عدد الارقام بعد العلامة العشرية</param>
		///<param name="_onHoldFlag">Meaning Calculate Failed Courses with two methods
		/// 		/// 0:Default - False
		/// 		/// 1:True - Must enter Second method for calculate
		/// 		/// 
		/// 		/// </param>
		///<param name="_onHoldCount">Count of Failed be on hold</param>
		///<param name="_cgpaFailCountAfterHold">Calculation Method after hold</param>
		///<param name="_cgpaChFlg">1-Graded Hrs  2-Passed Hrs default 1</param>
		public static EntPolcyGpa CreateEntPolcyGpa(System.Int32 _entPolcyGpaId, System.Decimal? _edBylawId, 
			System.Int32? _cgpaFailCourseCount, System.Int32? _gpaDecimalPart, System.Boolean? _onHoldFlag, 
			System.Int32? _onHoldCount, System.Int32? _cgpaFailCountAfterHold, System.Decimal? _cgpaChFlg)
		{
			EntPolcyGpa newEntPolcyGpa = new EntPolcyGpa();
			newEntPolcyGpa.EntPolcyGpaId = _entPolcyGpaId;
			newEntPolcyGpa.EdBylawId = _edBylawId;
			newEntPolcyGpa.CgpaFailCourseCount = _cgpaFailCourseCount;
			newEntPolcyGpa.GpaDecimalPart = _gpaDecimalPart;
			newEntPolcyGpa.OnHoldFlag = _onHoldFlag;
			newEntPolcyGpa.OnHoldCount = _onHoldCount;
			newEntPolcyGpa.CgpaFailCountAfterHold = _cgpaFailCountAfterHold;
			newEntPolcyGpa.CgpaChFlg = _cgpaChFlg;
			return newEntPolcyGpa;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntPolcyGpaId property. 
		///		محددات حساب المعدلات الفصلية و التراكمية
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"محددات حساب المعدلات الفصلية و التراكمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 EntPolcyGpaId
		{
			get
			{
				return this.entityData.EntPolcyGpaId; 
			}
			
			set
			{
				if (this.entityData.EntPolcyGpaId == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.EntPolcyGpaId, this.entityData.EntPolcyGpaId);
				this.entityData.EntPolcyGpaId = value;
				this.EntityId.EntPolcyGpaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.EntPolcyGpaId, this.entityData.EntPolcyGpaId);
				OnPropertyChanged("EntPolcyGpaId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_POLCY_GPA_ID property.
		///		محددات حساب المعدلات الفصلية و التراكمية
		/// </summary>
		/// <remarks>This is the original value of the ENT_POLCY_GPA_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalEntPolcyGpaId
		{
			get { return this.entityData.OriginalEntPolcyGpaId; }
			set { this.entityData.OriginalEntPolcyGpaId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdBylawId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdBylawIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdBylawId
		{
			get
			{
				return this.entityData.EdBylawId; 
			}
			
			set
			{
				if (this.entityData.EdBylawId == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.EdBylawId, this.entityData.EdBylawId);
				this.entityData.EdBylawId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.EdBylawId, this.entityData.EdBylawId);
				OnPropertyChanged("EdBylawId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CgpaFailCourseCount property. 
		///		 عدد مرات دخول مقرر الرسوب فى المعدل التراكمى
		/// 		/// -1:every once take course
		/// 		/// 1:Only Once when First time student register course
		/// 		/// 2:once when first time student register course and second when pass in it
		/// 		/// 
		/// 		/// if it onholdflag=1 take it as First Method
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCgpaFailCourseCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@" عدد مرات دخول مقرر الرسوب فى المعدل التراكمى -1:every once take course 1:Only Once when First time student register course 2:once when first time student register course and second when pass in it  if it onholdflag=1 take it as First Method"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CgpaFailCourseCount
		{
			get
			{
				return this.entityData.CgpaFailCourseCount; 
			}
			
			set
			{
				if (this.entityData.CgpaFailCourseCount == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.CgpaFailCourseCount, this.entityData.CgpaFailCourseCount);
				this.entityData.CgpaFailCourseCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.CgpaFailCourseCount, this.entityData.CgpaFailCourseCount);
				OnPropertyChanged("CgpaFailCourseCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GpaDecimalPart property. 
		///		=2   عدد الارقام بعد العلامة العشرية
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGpaDecimalPartNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"=2   عدد الارقام بعد العلامة العشرية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GpaDecimalPart
		{
			get
			{
				return this.entityData.GpaDecimalPart; 
			}
			
			set
			{
				if (this.entityData.GpaDecimalPart == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.GpaDecimalPart, this.entityData.GpaDecimalPart);
				this.entityData.GpaDecimalPart = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.GpaDecimalPart, this.entityData.GpaDecimalPart);
				OnPropertyChanged("GpaDecimalPart");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnHoldFlag property. 
		///		Meaning Calculate Failed Courses with two methods
		/// 		/// 0:Default - False
		/// 		/// 1:True - Must enter Second method for calculate
		/// 		/// 
		/// 		/// 
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOnHoldFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Meaning Calculate Failed Courses with two methods 0:Default - False 1:True - Must enter Second method for calculate  "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OnHoldFlag
		{
			get
			{
				return this.entityData.OnHoldFlag; 
			}
			
			set
			{
				if (this.entityData.OnHoldFlag == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.OnHoldFlag, this.entityData.OnHoldFlag);
				this.entityData.OnHoldFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.OnHoldFlag, this.entityData.OnHoldFlag);
				OnPropertyChanged("OnHoldFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnHoldCount property. 
		///		Count of Failed be on hold
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOnHoldCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Count of Failed be on hold"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OnHoldCount
		{
			get
			{
				return this.entityData.OnHoldCount; 
			}
			
			set
			{
				if (this.entityData.OnHoldCount == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.OnHoldCount, this.entityData.OnHoldCount);
				this.entityData.OnHoldCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.OnHoldCount, this.entityData.OnHoldCount);
				OnPropertyChanged("OnHoldCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CgpaFailCountAfterHold property. 
		///		Calculation Method after hold
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCgpaFailCountAfterHoldNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Calculation Method after hold"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CgpaFailCountAfterHold
		{
			get
			{
				return this.entityData.CgpaFailCountAfterHold; 
			}
			
			set
			{
				if (this.entityData.CgpaFailCountAfterHold == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.CgpaFailCountAfterHold, this.entityData.CgpaFailCountAfterHold);
				this.entityData.CgpaFailCountAfterHold = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.CgpaFailCountAfterHold, this.entityData.CgpaFailCountAfterHold);
				OnPropertyChanged("CgpaFailCountAfterHold");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CgpaChFlg property. 
		///		1-Graded Hrs  2-Passed Hrs default 1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCgpaChFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1-Graded Hrs  2-Passed Hrs default 1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CgpaChFlg
		{
			get
			{
				return this.entityData.CgpaChFlg; 
			}
			
			set
			{
				if (this.entityData.CgpaChFlg == value)
					return;
					
				OnColumnChanging(EntPolcyGpaColumn.CgpaChFlg, this.entityData.CgpaChFlg);
				this.entityData.CgpaChFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolcyGpaColumn.CgpaChFlg, this.entityData.CgpaChFlg);
				OnPropertyChanged("CgpaChFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return entityData.EdBylawIdSource; }
            set { entityData.EdBylawIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_POLCY_GPA"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_POLCY_GPA_ID", "ED_BYLAW_ID", "CGPA_FAIL_COURSE_COUNT", "GPA_DECIMAL_PART", "OnHoldFlag", "OnHoldCount", "CGPA_FAIL_COUNT_AFTER_HOLD", "CGPA_CH_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntPolcyGpaEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntPolcyGpa) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntPolcyGpa>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntPolcyGpa);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntPolcyGpa Entity 
		///</summary>
		protected virtual EntPolcyGpa Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntPolcyGpa copy = new EntPolcyGpa();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntPolcyGpaId = this.EntPolcyGpaId;
					copy.OriginalEntPolcyGpaId = this.OriginalEntPolcyGpaId;
				copy.EdBylawId = this.EdBylawId;
				copy.CgpaFailCourseCount = this.CgpaFailCourseCount;
				copy.GpaDecimalPart = this.GpaDecimalPart;
				copy.OnHoldFlag = this.OnHoldFlag;
				copy.OnHoldCount = this.OnHoldCount;
				copy.CgpaFailCountAfterHold = this.CgpaFailCountAfterHold;
				copy.CgpaChFlg = this.CgpaChFlg;
			
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				copy.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				copy.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntPolcyGpa Entity 
		///</summary>
		public virtual EntPolcyGpa Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntPolcyGpa Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntPolcyGpa DeepCopy()
		{
			return EntityHelper.Clone<EntPolcyGpa>(this as EntPolcyGpa);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntPolcyGpaEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntPolcyGpaEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntPolcyGpaEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntPolcyGpaColumn column)
		{
			switch(column)
			{
					case EntPolcyGpaColumn.EntPolcyGpaId:
					return entityData.EntPolcyGpaId != _originalData.EntPolcyGpaId;
					case EntPolcyGpaColumn.EdBylawId:
					return entityData.EdBylawId != _originalData.EdBylawId;
					case EntPolcyGpaColumn.CgpaFailCourseCount:
					return entityData.CgpaFailCourseCount != _originalData.CgpaFailCourseCount;
					case EntPolcyGpaColumn.GpaDecimalPart:
					return entityData.GpaDecimalPart != _originalData.GpaDecimalPart;
					case EntPolcyGpaColumn.OnHoldFlag:
					return entityData.OnHoldFlag != _originalData.OnHoldFlag;
					case EntPolcyGpaColumn.OnHoldCount:
					return entityData.OnHoldCount != _originalData.OnHoldCount;
					case EntPolcyGpaColumn.CgpaFailCountAfterHold:
					return entityData.CgpaFailCountAfterHold != _originalData.CgpaFailCountAfterHold;
					case EntPolcyGpaColumn.CgpaChFlg:
					return entityData.CgpaChFlg != _originalData.CgpaChFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntPolcyGpaColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntPolcyGpaId != _originalData.EntPolcyGpaId;
			result = result || entityData.EdBylawId != _originalData.EdBylawId;
			result = result || entityData.CgpaFailCourseCount != _originalData.CgpaFailCourseCount;
			result = result || entityData.GpaDecimalPart != _originalData.GpaDecimalPart;
			result = result || entityData.OnHoldFlag != _originalData.OnHoldFlag;
			result = result || entityData.OnHoldCount != _originalData.OnHoldCount;
			result = result || entityData.CgpaFailCountAfterHold != _originalData.CgpaFailCountAfterHold;
			result = result || entityData.CgpaChFlg != _originalData.CgpaChFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EntPolcyGpa Entity with the original data.
		///</summary>
		public EntPolcyGpa GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntPolcyGpa(
				_originalData.EntPolcyGpaId,
				_originalData.EdBylawId,
				_originalData.CgpaFailCourseCount,
				_originalData.GpaDecimalPart,
				_originalData.OnHoldFlag,
				_originalData.OnHoldCount,
				_originalData.CgpaFailCountAfterHold,
				_originalData.CgpaChFlg
				);
				
			return (EntPolcyGpa)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntPolcyGpaBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntPolcyGpaBase)
				return ValueEquals(this, (EntPolcyGpaBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntPolcyGpaBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntPolcyGpaId.GetHashCode() ^ 
					((this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString()).GetHashCode() ^ 
					((this.CgpaFailCourseCount == null) ? string.Empty : this.CgpaFailCourseCount.ToString()).GetHashCode() ^ 
					((this.GpaDecimalPart == null) ? string.Empty : this.GpaDecimalPart.ToString()).GetHashCode() ^ 
					((this.OnHoldFlag == null) ? string.Empty : this.OnHoldFlag.ToString()).GetHashCode() ^ 
					((this.OnHoldCount == null) ? string.Empty : this.OnHoldCount.ToString()).GetHashCode() ^ 
					((this.CgpaFailCountAfterHold == null) ? string.Empty : this.CgpaFailCountAfterHold.ToString()).GetHashCode() ^ 
					((this.CgpaChFlg == null) ? string.Empty : this.CgpaChFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntPolcyGpaBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntPolcyGpaBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntPolcyGpaBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntPolcyGpaBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntPolcyGpaBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntPolcyGpaBase Object1, EntPolcyGpaBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntPolcyGpaId != Object2.EntPolcyGpaId)
				equal = false;
			if ( Object1.EdBylawId != null && Object2.EdBylawId != null )
			{
				if (Object1.EdBylawId != Object2.EdBylawId)
					equal = false;
			}
			else if (Object1.EdBylawId == null ^ Object2.EdBylawId == null )
			{
				equal = false;
			}
			if ( Object1.CgpaFailCourseCount != null && Object2.CgpaFailCourseCount != null )
			{
				if (Object1.CgpaFailCourseCount != Object2.CgpaFailCourseCount)
					equal = false;
			}
			else if (Object1.CgpaFailCourseCount == null ^ Object2.CgpaFailCourseCount == null )
			{
				equal = false;
			}
			if ( Object1.GpaDecimalPart != null && Object2.GpaDecimalPart != null )
			{
				if (Object1.GpaDecimalPart != Object2.GpaDecimalPart)
					equal = false;
			}
			else if (Object1.GpaDecimalPart == null ^ Object2.GpaDecimalPart == null )
			{
				equal = false;
			}
			if ( Object1.OnHoldFlag != null && Object2.OnHoldFlag != null )
			{
				if (Object1.OnHoldFlag != Object2.OnHoldFlag)
					equal = false;
			}
			else if (Object1.OnHoldFlag == null ^ Object2.OnHoldFlag == null )
			{
				equal = false;
			}
			if ( Object1.OnHoldCount != null && Object2.OnHoldCount != null )
			{
				if (Object1.OnHoldCount != Object2.OnHoldCount)
					equal = false;
			}
			else if (Object1.OnHoldCount == null ^ Object2.OnHoldCount == null )
			{
				equal = false;
			}
			if ( Object1.CgpaFailCountAfterHold != null && Object2.CgpaFailCountAfterHold != null )
			{
				if (Object1.CgpaFailCountAfterHold != Object2.CgpaFailCountAfterHold)
					equal = false;
			}
			else if (Object1.CgpaFailCountAfterHold == null ^ Object2.CgpaFailCountAfterHold == null )
			{
				equal = false;
			}
			if ( Object1.CgpaChFlg != null && Object2.CgpaChFlg != null )
			{
				if (Object1.CgpaChFlg != Object2.CgpaChFlg)
					equal = false;
			}
			else if (Object1.CgpaChFlg == null ^ Object2.CgpaChFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntPolcyGpaBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntPolcyGpaComparer GetComparer()
        {
            return new EntPolcyGpaComparer();
        }
        */

        // Comparer delegates back to EntPolcyGpa
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntPolcyGpa rhs, EntPolcyGpaColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntPolcyGpaColumn.EntPolcyGpaId:
            		return this.EntPolcyGpaId.CompareTo(rhs.EntPolcyGpaId);
            		
            		                 
            	
            	
            	case EntPolcyGpaColumn.EdBylawId:
            		return this.EdBylawId.Value.CompareTo(rhs.EdBylawId.Value);
            		
            		                 
            	
            	
            	case EntPolcyGpaColumn.CgpaFailCourseCount:
            		return this.CgpaFailCourseCount.Value.CompareTo(rhs.CgpaFailCourseCount.Value);
            		
            		                 
            	
            	
            	case EntPolcyGpaColumn.GpaDecimalPart:
            		return this.GpaDecimalPart.Value.CompareTo(rhs.GpaDecimalPart.Value);
            		
            		                 
            	
            	
            	case EntPolcyGpaColumn.OnHoldFlag:
            		return this.OnHoldFlag.Value.CompareTo(rhs.OnHoldFlag.Value);
            		
            		                 
            	
            	
            	case EntPolcyGpaColumn.OnHoldCount:
            		return this.OnHoldCount.Value.CompareTo(rhs.OnHoldCount.Value);
            		
            		                 
            	
            	
            	case EntPolcyGpaColumn.CgpaFailCountAfterHold:
            		return this.CgpaFailCountAfterHold.Value.CompareTo(rhs.CgpaFailCountAfterHold.Value);
            		
            		                 
            	
            	
            	case EntPolcyGpaColumn.CgpaChFlg:
            		return this.CgpaChFlg.Value.CompareTo(rhs.CgpaChFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntPolcyGpaKey> Members
		
		// member variable for the EntityId property
		private EntPolcyGpaKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntPolcyGpaKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntPolcyGpaKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntPolcyGpa")
					.Append("|").Append( this.EntPolcyGpaId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- EntPolcyGpaId: {0}{8}- EdBylawId: {1}{8}- CgpaFailCourseCount: {2}{8}- GpaDecimalPart: {3}{8}- OnHoldFlag: {4}{8}- OnHoldCount: {5}{8}- CgpaFailCountAfterHold: {6}{8}- CgpaChFlg: {7}{8}{10}", 
				this.EntPolcyGpaId,
				(this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString(),
				(this.CgpaFailCourseCount == null) ? string.Empty : this.CgpaFailCourseCount.ToString(),
				(this.GpaDecimalPart == null) ? string.Empty : this.GpaDecimalPart.ToString(),
				(this.OnHoldFlag == null) ? string.Empty : this.OnHoldFlag.ToString(),
				(this.OnHoldCount == null) ? string.Empty : this.OnHoldCount.ToString(),
				(this.CgpaFailCountAfterHold == null) ? string.Empty : this.CgpaFailCountAfterHold.ToString(),
				(this.CgpaChFlg == null) ? string.Empty : this.CgpaChFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_POLCY_GPA' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntPolcyGpaEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_POLCY_GPA_ID : محددات حساب المعدلات الفصلية و التراكمية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_POLCY_GPA"</remarks>
		public System.Int32 EntPolcyGpaId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalEntPolcyGpaId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_BYLAW_ID : 
		/// </summary>
		public System.Decimal?		  EdBylawId = null;
		
		/// <summary>
		/// CGPA_FAIL_COURSE_COUNT :  عدد مرات دخول مقرر الرسوب فى المعدل التراكمى
		/// 		/// -1:every once take course
		/// 		/// 1:Only Once when First time student register course
		/// 		/// 2:once when first time student register course and second when pass in it
		/// 		/// 
		/// 		/// if it onholdflag=1 take it as First Method
		/// </summary>
		public System.Int32?		  CgpaFailCourseCount = null;
		
		/// <summary>
		/// GPA_DECIMAL_PART : =2   عدد الارقام بعد العلامة العشرية
		/// </summary>
		public System.Int32?		  GpaDecimalPart = null;
		
		/// <summary>
		/// OnHoldFlag : Meaning Calculate Failed Courses with two methods
		/// 		/// 0:Default - False
		/// 		/// 1:True - Must enter Second method for calculate
		/// 		/// 
		/// 		/// 
		/// </summary>
		public System.Boolean?		  OnHoldFlag = null;
		
		/// <summary>
		/// OnHoldCount : Count of Failed be on hold
		/// </summary>
		public System.Int32?		  OnHoldCount = null;
		
		/// <summary>
		/// CGPA_FAIL_COUNT_AFTER_HOLD : Calculation Method after hold
		/// </summary>
		public System.Int32?		  CgpaFailCountAfterHold = null;
		
		/// <summary>
		/// CGPA_CH_FLG : 1-Graded Hrs  2-Passed Hrs default 1
		/// </summary>
		public System.Decimal?		  CgpaChFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdBylaw _edBylawIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return this._edBylawIdSource; }
            set { this._edBylawIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntPolcyGpaEntityData _tmp = new EntPolcyGpaEntityData();
						
			_tmp.EntPolcyGpaId = this.EntPolcyGpaId;
			_tmp.OriginalEntPolcyGpaId = this.OriginalEntPolcyGpaId;
			
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.CgpaFailCourseCount = this.CgpaFailCourseCount;
			_tmp.GpaDecimalPart = this.GpaDecimalPart;
			_tmp.OnHoldFlag = this.OnHoldFlag;
			_tmp.OnHoldCount = this.OnHoldCount;
			_tmp.CgpaFailCountAfterHold = this.CgpaFailCountAfterHold;
			_tmp.CgpaChFlg = this.CgpaChFlg;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null)
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource) as EdBylaw;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntPolcyGpaEntityData _tmp = new EntPolcyGpaEntityData();
						
			_tmp.EntPolcyGpaId = this.EntPolcyGpaId;
			_tmp.OriginalEntPolcyGpaId = this.OriginalEntPolcyGpaId;
			
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.CgpaFailCourseCount = this.CgpaFailCourseCount;
			_tmp.GpaDecimalPart = this.GpaDecimalPart;
			_tmp.OnHoldFlag = this.OnHoldFlag;
			_tmp.OnHoldCount = this.OnHoldCount;
			_tmp.CgpaFailCountAfterHold = this.CgpaFailCountAfterHold;
			_tmp.CgpaChFlg = this.CgpaChFlg;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				_tmp.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolcyGpaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntPolcyGpaColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolcyGpaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntPolcyGpaColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolcyGpaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntPolcyGpaColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntPolcyGpaEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntPolcyGpaEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolcyGpaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntPolcyGpaColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntPolcyGpaEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntPolcyGpaEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntPolcyGpaEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntPolcyGpa"/> object.
	/// </remarks>
	public class EntPolcyGpaEventArgs : System.EventArgs
	{
		private EntPolcyGpaColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntPolcyGpaEventArgs class.
		///</summary>
		public EntPolcyGpaEventArgs(EntPolcyGpaColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntPolcyGpaEventArgs class.
		///</summary>
		public EntPolcyGpaEventArgs(EntPolcyGpaColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntPolcyGpaColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntPolcyGpaColumn" />
		public EntPolcyGpaColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntPolcyGpa related events.
	///</summary>
	public delegate void EntPolcyGpaEventHandler(object sender, EntPolcyGpaEventArgs e);
	
	#region EntPolcyGpaComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntPolcyGpaComparer : System.Collections.Generic.IComparer<EntPolcyGpa>
	{
		EntPolcyGpaColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolcyGpaComparer"/> class.
        /// </summary>
		public EntPolcyGpaComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolcyGpaComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntPolcyGpaComparer(EntPolcyGpaColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntPolcyGpa"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntPolcyGpa"/> to compare.</param>
        /// <param name="b">The second <c>EntPolcyGpa</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntPolcyGpa a, EntPolcyGpa b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntPolcyGpa entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntPolcyGpa a, EntPolcyGpa b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntPolcyGpaColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntPolcyGpaKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntPolcyGpa"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntPolcyGpaKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaKey class.
		/// </summary>
		public EntPolcyGpaKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaKey class.
		/// </summary>
		public EntPolcyGpaKey(EntPolcyGpaBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntPolcyGpaId = entity.EntPolcyGpaId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolcyGpaKey class.
		/// </summary>
		public EntPolcyGpaKey(System.Int32 _entPolcyGpaId)
		{
			#region Init Properties

			this.EntPolcyGpaId = _entPolcyGpaId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntPolcyGpaBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntPolcyGpaBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntPolcyGpaId property
		private System.Int32 _entPolcyGpaId;
		
		/// <summary>
		/// Gets or sets the EntPolcyGpaId property.
		/// </summary>
		public System.Int32 EntPolcyGpaId
		{
			get { return _entPolcyGpaId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntPolcyGpaId = value;
				
				_entPolcyGpaId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntPolcyGpaId = ( values["EntPolcyGpaId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["EntPolcyGpaId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntPolcyGpaId", EntPolcyGpaId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntPolcyGpaId: {0}{1}",
								EntPolcyGpaId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntPolcyGpaColumn Enum
	
	/// <summary>
	/// Enumerate the EntPolcyGpa columns.
	/// </summary>
	[Serializable]
	public enum EntPolcyGpaColumn : int
	{
		/// <summary>
		/// EntPolcyGpaId : محددات حساب المعدلات الفصلية و التراكمية
		/// </summary>
		[EnumTextValue("ENT_POLCY_GPA_ID")]
		[ColumnEnum("ENT_POLCY_GPA_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		EntPolcyGpaId = 1,
		/// <summary>
		/// EdBylawId : 
		/// </summary>
		[EnumTextValue("ED_BYLAW_ID")]
		[ColumnEnum("ED_BYLAW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdBylawId = 2,
		/// <summary>
		/// CgpaFailCourseCount :  عدد مرات دخول مقرر الرسوب فى المعدل التراكمى
		/// 		/// -1:every once take course
		/// 		/// 1:Only Once when First time student register course
		/// 		/// 2:once when first time student register course and second when pass in it
		/// 		/// 
		/// 		/// if it onholdflag=1 take it as First Method
		/// </summary>
		[EnumTextValue("CGPA_FAIL_COURSE_COUNT")]
		[ColumnEnum("CGPA_FAIL_COURSE_COUNT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CgpaFailCourseCount = 3,
		/// <summary>
		/// GpaDecimalPart : =2   عدد الارقام بعد العلامة العشرية
		/// </summary>
		[EnumTextValue("GPA_DECIMAL_PART")]
		[ColumnEnum("GPA_DECIMAL_PART", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GpaDecimalPart = 4,
		/// <summary>
		/// OnHoldFlag : Meaning Calculate Failed Courses with two methods
		/// 		/// 0:Default - False
		/// 		/// 1:True - Must enter Second method for calculate
		/// 		/// 
		/// 		/// 
		/// </summary>
		[EnumTextValue("OnHoldFlag")]
		[ColumnEnum("OnHoldFlag", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OnHoldFlag = 5,
		/// <summary>
		/// OnHoldCount : Count of Failed be on hold
		/// </summary>
		[EnumTextValue("OnHoldCount")]
		[ColumnEnum("OnHoldCount", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OnHoldCount = 6,
		/// <summary>
		/// CgpaFailCountAfterHold : Calculation Method after hold
		/// </summary>
		[EnumTextValue("CGPA_FAIL_COUNT_AFTER_HOLD")]
		[ColumnEnum("CGPA_FAIL_COUNT_AFTER_HOLD", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CgpaFailCountAfterHold = 7,
		/// <summary>
		/// CgpaChFlg : 1-Graded Hrs  2-Passed Hrs default 1
		/// </summary>
		[EnumTextValue("CGPA_CH_FLG")]
		[ColumnEnum("CGPA_CH_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CgpaChFlg = 8
	}//End enum

	#endregion EntPolcyGpaColumn Enum

} // end namespace
