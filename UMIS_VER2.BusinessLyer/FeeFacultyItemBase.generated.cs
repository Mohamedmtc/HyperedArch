
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeFacultyItem.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_FACULTY_ITEM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeFacultyItemBase : EntityBase, IFeeFacultyItem, IEntityId<FeeFacultyItemKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeFacultyItemEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeFacultyItemEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeFacultyItemEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeFacultyItem> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeFacultyItemEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeFacultyItemEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeFacultyItemBase"/> instance.
		///</summary>
		public FeeFacultyItemBase()
		{
			this.entityData = new FeeFacultyItemEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeFacultyItemBase"/> instance.
		///</summary>
		///<param name="_feeFacultyItemId"></param>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_feeItemValue">NULL if ADM_YEAR_FLG=1  else must have value</param>
		///<param name="_itemOrder"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_allCourseFlg"></param>
		///<param name="_refundFlg"></param>
		///<param name="_discFlg"></param>
		///<param name="_admYearFlg"></param>
		///<param name="_newComerFlg"></param>
		///<param name="_coursesFlg"></param>
		///<param name="_installmentFlg"></param>
		///<param name="_closeFlg"></param>
		///<param name="_chOrTotalFlg">0>>total
		/// 		/// 1>>CH
		/// 		/// 2>>XX replaced by COURSES_FLG=1</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_maxCh">if FEE_CODE_ITEM_ID ENUM_ID Extra Hour</param>
		public FeeFacultyItemBase(System.Decimal _feeFacultyItemId, System.Decimal _feeFacultyRuleId, 
			System.Decimal _feeCodeItemId, System.Decimal? _feeItemValue, System.Decimal _itemOrder, 
			System.DateTime? _startDate, System.DateTime? _endDate, System.Decimal _allCourseFlg, 
			System.Decimal _refundFlg, System.Decimal _discFlg, System.Decimal _admYearFlg, 
			System.Decimal? _newComerFlg, System.Decimal? _coursesFlg, System.Decimal? _installmentFlg, 
			System.Decimal _closeFlg, System.Decimal _chOrTotalFlg, System.DateTime? _lastDate, 
			System.Decimal? _seUserId, System.Int32? _maxCh)
		{
			this.entityData = new FeeFacultyItemEntityData();
			this.backupData = null;

			this.FeeFacultyItemId = _feeFacultyItemId;
			this.FeeFacultyRuleId = _feeFacultyRuleId;
			this.FeeCodeItemId = _feeCodeItemId;
			this.FeeItemValue = _feeItemValue;
			this.ItemOrder = _itemOrder;
			this.StartDate = _startDate;
			this.EndDate = _endDate;
			this.AllCourseFlg = _allCourseFlg;
			this.RefundFlg = _refundFlg;
			this.DiscFlg = _discFlg;
			this.AdmYearFlg = _admYearFlg;
			this.NewComerFlg = _newComerFlg;
			this.CoursesFlg = _coursesFlg;
			this.InstallmentFlg = _installmentFlg;
			this.CloseFlg = _closeFlg;
			this.ChOrTotalFlg = _chOrTotalFlg;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
			this.MaxCh = _maxCh;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeFacultyItem"/> instance.
		///</summary>
		///<param name="_feeFacultyItemId"></param>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_feeItemValue">NULL if ADM_YEAR_FLG=1  else must have value</param>
		///<param name="_itemOrder"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_allCourseFlg"></param>
		///<param name="_refundFlg"></param>
		///<param name="_discFlg"></param>
		///<param name="_admYearFlg"></param>
		///<param name="_newComerFlg"></param>
		///<param name="_coursesFlg"></param>
		///<param name="_installmentFlg"></param>
		///<param name="_closeFlg"></param>
		///<param name="_chOrTotalFlg">0>>total
		/// 		/// 1>>CH
		/// 		/// 2>>XX replaced by COURSES_FLG=1</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_maxCh">if FEE_CODE_ITEM_ID ENUM_ID Extra Hour</param>
		public static FeeFacultyItem CreateFeeFacultyItem(System.Decimal _feeFacultyItemId, System.Decimal _feeFacultyRuleId, 
			System.Decimal _feeCodeItemId, System.Decimal? _feeItemValue, System.Decimal _itemOrder, 
			System.DateTime? _startDate, System.DateTime? _endDate, System.Decimal _allCourseFlg, 
			System.Decimal _refundFlg, System.Decimal _discFlg, System.Decimal _admYearFlg, 
			System.Decimal? _newComerFlg, System.Decimal? _coursesFlg, System.Decimal? _installmentFlg, 
			System.Decimal _closeFlg, System.Decimal _chOrTotalFlg, System.DateTime? _lastDate, 
			System.Decimal? _seUserId, System.Int32? _maxCh)
		{
			FeeFacultyItem newFeeFacultyItem = new FeeFacultyItem();
			newFeeFacultyItem.FeeFacultyItemId = _feeFacultyItemId;
			newFeeFacultyItem.FeeFacultyRuleId = _feeFacultyRuleId;
			newFeeFacultyItem.FeeCodeItemId = _feeCodeItemId;
			newFeeFacultyItem.FeeItemValue = _feeItemValue;
			newFeeFacultyItem.ItemOrder = _itemOrder;
			newFeeFacultyItem.StartDate = _startDate;
			newFeeFacultyItem.EndDate = _endDate;
			newFeeFacultyItem.AllCourseFlg = _allCourseFlg;
			newFeeFacultyItem.RefundFlg = _refundFlg;
			newFeeFacultyItem.DiscFlg = _discFlg;
			newFeeFacultyItem.AdmYearFlg = _admYearFlg;
			newFeeFacultyItem.NewComerFlg = _newComerFlg;
			newFeeFacultyItem.CoursesFlg = _coursesFlg;
			newFeeFacultyItem.InstallmentFlg = _installmentFlg;
			newFeeFacultyItem.CloseFlg = _closeFlg;
			newFeeFacultyItem.ChOrTotalFlg = _chOrTotalFlg;
			newFeeFacultyItem.LastDate = _lastDate;
			newFeeFacultyItem.SeUserId = _seUserId;
			newFeeFacultyItem.MaxCh = _maxCh;
			return newFeeFacultyItem;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeFacultyItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeFacultyItemId
		{
			get
			{
				return this.entityData.FeeFacultyItemId; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyItemId == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.FeeFacultyItemId, this.entityData.FeeFacultyItemId);
				this.entityData.FeeFacultyItemId = value;
				this.EntityId.FeeFacultyItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.FeeFacultyItemId, this.entityData.FeeFacultyItemId);
				OnPropertyChanged("FeeFacultyItemId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_FACULTY_ITEM_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FEE_FACULTY_ITEM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeFacultyItemId
		{
			get { return this.entityData.OriginalFeeFacultyItemId; }
			set { this.entityData.OriginalFeeFacultyItemId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FeeFacultyRuleId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeFacultyRuleId
		{
			get
			{
				return this.entityData.FeeFacultyRuleId; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyRuleId == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				this.entityData.FeeFacultyRuleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				OnPropertyChanged("FeeFacultyRuleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeItemValue property. 
		///		NULL if ADM_YEAR_FLG=1  else must have value
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeItemValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NULL if ADM_YEAR_FLG=1  else must have value"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeItemValue
		{
			get
			{
				return this.entityData.FeeItemValue; 
			}
			
			set
			{
				if (this.entityData.FeeItemValue == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.FeeItemValue, this.entityData.FeeItemValue);
				this.entityData.FeeItemValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.FeeItemValue, this.entityData.FeeItemValue);
				OnPropertyChanged("FeeItemValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ItemOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ItemOrder
		{
			get
			{
				return this.entityData.ItemOrder; 
			}
			
			set
			{
				if (this.entityData.ItemOrder == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.ItemOrder, this.entityData.ItemOrder);
				this.entityData.ItemOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.ItemOrder, this.entityData.ItemOrder);
				OnPropertyChanged("ItemOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndDate
		{
			get
			{
				return this.entityData.EndDate; 
			}
			
			set
			{
				if (this.entityData.EndDate == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.EndDate, this.entityData.EndDate);
				this.entityData.EndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.EndDate, this.entityData.EndDate);
				OnPropertyChanged("EndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllCourseFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AllCourseFlg
		{
			get
			{
				return this.entityData.AllCourseFlg; 
			}
			
			set
			{
				if (this.entityData.AllCourseFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.AllCourseFlg, this.entityData.AllCourseFlg);
				this.entityData.AllCourseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.AllCourseFlg, this.entityData.AllCourseFlg);
				OnPropertyChanged("AllCourseFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RefundFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RefundFlg
		{
			get
			{
				return this.entityData.RefundFlg; 
			}
			
			set
			{
				if (this.entityData.RefundFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.RefundFlg, this.entityData.RefundFlg);
				this.entityData.RefundFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.RefundFlg, this.entityData.RefundFlg);
				OnPropertyChanged("RefundFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DiscFlg
		{
			get
			{
				return this.entityData.DiscFlg; 
			}
			
			set
			{
				if (this.entityData.DiscFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.DiscFlg, this.entityData.DiscFlg);
				this.entityData.DiscFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.DiscFlg, this.entityData.DiscFlg);
				OnPropertyChanged("DiscFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmYearFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmYearFlg
		{
			get
			{
				return this.entityData.AdmYearFlg; 
			}
			
			set
			{
				if (this.entityData.AdmYearFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.AdmYearFlg, this.entityData.AdmYearFlg);
				this.entityData.AdmYearFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.AdmYearFlg, this.entityData.AdmYearFlg);
				OnPropertyChanged("AdmYearFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewComerFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNewComerFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NewComerFlg
		{
			get
			{
				return this.entityData.NewComerFlg; 
			}
			
			set
			{
				if (this.entityData.NewComerFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.NewComerFlg, this.entityData.NewComerFlg);
				this.entityData.NewComerFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.NewComerFlg, this.entityData.NewComerFlg);
				OnPropertyChanged("NewComerFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoursesFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoursesFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoursesFlg
		{
			get
			{
				return this.entityData.CoursesFlg; 
			}
			
			set
			{
				if (this.entityData.CoursesFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.CoursesFlg, this.entityData.CoursesFlg);
				this.entityData.CoursesFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.CoursesFlg, this.entityData.CoursesFlg);
				OnPropertyChanged("CoursesFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstallmentFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInstallmentFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InstallmentFlg
		{
			get
			{
				return this.entityData.InstallmentFlg; 
			}
			
			set
			{
				if (this.entityData.InstallmentFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.InstallmentFlg, this.entityData.InstallmentFlg);
				this.entityData.InstallmentFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.InstallmentFlg, this.entityData.InstallmentFlg);
				OnPropertyChanged("InstallmentFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CloseFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CloseFlg
		{
			get
			{
				return this.entityData.CloseFlg; 
			}
			
			set
			{
				if (this.entityData.CloseFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.CloseFlg, this.entityData.CloseFlg);
				this.entityData.CloseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.CloseFlg, this.entityData.CloseFlg);
				OnPropertyChanged("CloseFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChOrTotalFlg property. 
		///		0>>total
		/// 		/// 1>>CH
		/// 		/// 2>>XX replaced by COURSES_FLG=1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0>>total 1>>CH 2>>XX replaced by COURSES_FLG=1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ChOrTotalFlg
		{
			get
			{
				return this.entityData.ChOrTotalFlg; 
			}
			
			set
			{
				if (this.entityData.ChOrTotalFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.ChOrTotalFlg, this.entityData.ChOrTotalFlg);
				this.entityData.ChOrTotalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.ChOrTotalFlg, this.entityData.ChOrTotalFlg);
				OnPropertyChanged("ChOrTotalFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCh property. 
		///		if FEE_CODE_ITEM_ID ENUM_ID Extra Hour
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaxChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"if FEE_CODE_ITEM_ID ENUM_ID Extra Hour"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaxCh
		{
			get
			{
				return this.entityData.MaxCh; 
			}
			
			set
			{
				if (this.entityData.MaxCh == value)
					return;
					
				OnColumnChanging(FeeFacultyItemColumn.MaxCh, this.entityData.MaxCh);
				this.entityData.MaxCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyItemColumn.MaxCh, this.entityData.MaxCh);
				OnPropertyChanged("MaxCh");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return entityData.FeeCodeItemIdSource; }
            set { entityData.FeeCodeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return entityData.FeeFacultyRuleIdSource; }
            set { entityData.FeeFacultyRuleIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeStudFeeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_FEE_ITEM_FEE_FACULTY_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get { return entityData.FeeStudFeeItemCollection; }
			set { entityData.FeeStudFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeItemPaymentWays objects
		///	which are related to this object through the relation FK_Fee_Item_Payment_Ways_FEE_FACULTY_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeItemPaymentWays> FeeItemPaymentWaysCollection
		{
			get { return entityData.FeeItemPaymentWaysCollection; }
			set { entityData.FeeItemPaymentWaysCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacItemAdmYear objects
		///	which are related to this object through the relation FK_FEE_FAC_ITEM_ADM_YEAR_FEE_FACULTY_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacItemAdmYear> FeeFacItemAdmYearCollection
		{
			get { return entityData.FeeFacItemAdmYearCollection; }
			set { entityData.FeeFacItemAdmYearCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeCourseExp objects
		///	which are related to this object through the relation FK_FEE_COURSES_FEE_FAC_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCourseExp> FeeCourseExpCollection
		{
			get { return entityData.FeeCourseExpCollection; }
			set { entityData.FeeCourseExpCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_FACULTY_ITEM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_FACULTY_ITEM_ID", "FEE_FACULTY_RULE_ID", "FEE_CODE_ITEM_ID", "FEE_ITEM_VALUE", "ITEM_ORDER", "START_DATE", "END_DATE", "ALL_COURSE_FLG", "REFUND_FLG", "DISC_FLG", "ADM_YEAR_FLG", "NEW_COMER_FLG", "COURSES_FLG", "INSTALLMENT_FLG", "CLOSE_FLG", "CH_OR_TOTAL_FLG", "LAST_DATE", "SE_USER_ID", "MAX_CH"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeFacultyItemEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeFacultyItem) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeFacultyItem>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeFacultyItem);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeFacultyItem Entity 
		///</summary>
		protected virtual FeeFacultyItem Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeFacultyItem copy = new FeeFacultyItem();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeFacultyItemId = this.FeeFacultyItemId;
					copy.OriginalFeeFacultyItemId = this.OriginalFeeFacultyItemId;
				copy.FeeFacultyRuleId = this.FeeFacultyRuleId;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.FeeItemValue = this.FeeItemValue;
				copy.ItemOrder = this.ItemOrder;
				copy.StartDate = this.StartDate;
				copy.EndDate = this.EndDate;
				copy.AllCourseFlg = this.AllCourseFlg;
				copy.RefundFlg = this.RefundFlg;
				copy.DiscFlg = this.DiscFlg;
				copy.AdmYearFlg = this.AdmYearFlg;
				copy.NewComerFlg = this.NewComerFlg;
				copy.CoursesFlg = this.CoursesFlg;
				copy.InstallmentFlg = this.InstallmentFlg;
				copy.CloseFlg = this.CloseFlg;
				copy.ChOrTotalFlg = this.ChOrTotalFlg;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
				copy.MaxCh = this.MaxCh;
			
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				copy.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				copy.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				copy.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
		
			//deep copy nested objects
			copy.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			copy.FeeItemPaymentWaysCollection = (TList<FeeItemPaymentWays>) MakeCopyOf(this.FeeItemPaymentWaysCollection, existingCopies); 
			copy.FeeFacItemAdmYearCollection = (TList<FeeFacItemAdmYear>) MakeCopyOf(this.FeeFacItemAdmYearCollection, existingCopies); 
			copy.FeeCourseExpCollection = (TList<FeeCourseExp>) MakeCopyOf(this.FeeCourseExpCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeFacultyItem Entity 
		///</summary>
		public virtual FeeFacultyItem Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeFacultyItem Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeFacultyItem DeepCopy()
		{
			return EntityHelper.Clone<FeeFacultyItem>(this as FeeFacultyItem);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeFacultyItemEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeFacultyItemEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeFacultyItemEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeFacultyItemColumn column)
		{
			switch(column)
			{
					case FeeFacultyItemColumn.FeeFacultyItemId:
					return entityData.FeeFacultyItemId != _originalData.FeeFacultyItemId;
					case FeeFacultyItemColumn.FeeFacultyRuleId:
					return entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
					case FeeFacultyItemColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case FeeFacultyItemColumn.FeeItemValue:
					return entityData.FeeItemValue != _originalData.FeeItemValue;
					case FeeFacultyItemColumn.ItemOrder:
					return entityData.ItemOrder != _originalData.ItemOrder;
					case FeeFacultyItemColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case FeeFacultyItemColumn.EndDate:
					return entityData.EndDate != _originalData.EndDate;
					case FeeFacultyItemColumn.AllCourseFlg:
					return entityData.AllCourseFlg != _originalData.AllCourseFlg;
					case FeeFacultyItemColumn.RefundFlg:
					return entityData.RefundFlg != _originalData.RefundFlg;
					case FeeFacultyItemColumn.DiscFlg:
					return entityData.DiscFlg != _originalData.DiscFlg;
					case FeeFacultyItemColumn.AdmYearFlg:
					return entityData.AdmYearFlg != _originalData.AdmYearFlg;
					case FeeFacultyItemColumn.NewComerFlg:
					return entityData.NewComerFlg != _originalData.NewComerFlg;
					case FeeFacultyItemColumn.CoursesFlg:
					return entityData.CoursesFlg != _originalData.CoursesFlg;
					case FeeFacultyItemColumn.InstallmentFlg:
					return entityData.InstallmentFlg != _originalData.InstallmentFlg;
					case FeeFacultyItemColumn.CloseFlg:
					return entityData.CloseFlg != _originalData.CloseFlg;
					case FeeFacultyItemColumn.ChOrTotalFlg:
					return entityData.ChOrTotalFlg != _originalData.ChOrTotalFlg;
					case FeeFacultyItemColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case FeeFacultyItemColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeFacultyItemColumn.MaxCh:
					return entityData.MaxCh != _originalData.MaxCh;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeFacultyItemColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeFacultyItemId != _originalData.FeeFacultyItemId;
			result = result || entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.FeeItemValue != _originalData.FeeItemValue;
			result = result || entityData.ItemOrder != _originalData.ItemOrder;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.EndDate != _originalData.EndDate;
			result = result || entityData.AllCourseFlg != _originalData.AllCourseFlg;
			result = result || entityData.RefundFlg != _originalData.RefundFlg;
			result = result || entityData.DiscFlg != _originalData.DiscFlg;
			result = result || entityData.AdmYearFlg != _originalData.AdmYearFlg;
			result = result || entityData.NewComerFlg != _originalData.NewComerFlg;
			result = result || entityData.CoursesFlg != _originalData.CoursesFlg;
			result = result || entityData.InstallmentFlg != _originalData.InstallmentFlg;
			result = result || entityData.CloseFlg != _originalData.CloseFlg;
			result = result || entityData.ChOrTotalFlg != _originalData.ChOrTotalFlg;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.MaxCh != _originalData.MaxCh;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeFacultyItem Entity with the original data.
		///</summary>
		public FeeFacultyItem GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeFacultyItem(
				_originalData.FeeFacultyItemId,
				_originalData.FeeFacultyRuleId,
				_originalData.FeeCodeItemId,
				_originalData.FeeItemValue,
				_originalData.ItemOrder,
				_originalData.StartDate,
				_originalData.EndDate,
				_originalData.AllCourseFlg,
				_originalData.RefundFlg,
				_originalData.DiscFlg,
				_originalData.AdmYearFlg,
				_originalData.NewComerFlg,
				_originalData.CoursesFlg,
				_originalData.InstallmentFlg,
				_originalData.CloseFlg,
				_originalData.ChOrTotalFlg,
				_originalData.LastDate,
				_originalData.SeUserId,
				_originalData.MaxCh
				);
				
			return (FeeFacultyItem)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeFacultyItemBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeFacultyItemBase)
				return ValueEquals(this, (FeeFacultyItemBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeFacultyItemBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeFacultyItemId.GetHashCode() ^ 
					this.FeeFacultyRuleId.GetHashCode() ^ 
					this.FeeCodeItemId.GetHashCode() ^ 
					((this.FeeItemValue == null) ? string.Empty : this.FeeItemValue.ToString()).GetHashCode() ^ 
					this.ItemOrder.GetHashCode() ^ 
					((this.StartDate == null) ? string.Empty : this.StartDate.ToString()).GetHashCode() ^ 
					((this.EndDate == null) ? string.Empty : this.EndDate.ToString()).GetHashCode() ^ 
					this.AllCourseFlg.GetHashCode() ^ 
					this.RefundFlg.GetHashCode() ^ 
					this.DiscFlg.GetHashCode() ^ 
					this.AdmYearFlg.GetHashCode() ^ 
					((this.NewComerFlg == null) ? string.Empty : this.NewComerFlg.ToString()).GetHashCode() ^ 
					((this.CoursesFlg == null) ? string.Empty : this.CoursesFlg.ToString()).GetHashCode() ^ 
					((this.InstallmentFlg == null) ? string.Empty : this.InstallmentFlg.ToString()).GetHashCode() ^ 
					this.CloseFlg.GetHashCode() ^ 
					this.ChOrTotalFlg.GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.MaxCh == null) ? string.Empty : this.MaxCh.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeFacultyItemBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeFacultyItemBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeFacultyItemBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeFacultyItemBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeFacultyItemBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeFacultyItemBase Object1, FeeFacultyItemBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeFacultyItemId != Object2.FeeFacultyItemId)
				equal = false;
			if (Object1.FeeFacultyRuleId != Object2.FeeFacultyRuleId)
				equal = false;
			if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
				equal = false;
			if ( Object1.FeeItemValue != null && Object2.FeeItemValue != null )
			{
				if (Object1.FeeItemValue != Object2.FeeItemValue)
					equal = false;
			}
			else if (Object1.FeeItemValue == null ^ Object2.FeeItemValue == null )
			{
				equal = false;
			}
			if (Object1.ItemOrder != Object2.ItemOrder)
				equal = false;
			if ( Object1.StartDate != null && Object2.StartDate != null )
			{
				if (Object1.StartDate != Object2.StartDate)
					equal = false;
			}
			else if (Object1.StartDate == null ^ Object2.StartDate == null )
			{
				equal = false;
			}
			if ( Object1.EndDate != null && Object2.EndDate != null )
			{
				if (Object1.EndDate != Object2.EndDate)
					equal = false;
			}
			else if (Object1.EndDate == null ^ Object2.EndDate == null )
			{
				equal = false;
			}
			if (Object1.AllCourseFlg != Object2.AllCourseFlg)
				equal = false;
			if (Object1.RefundFlg != Object2.RefundFlg)
				equal = false;
			if (Object1.DiscFlg != Object2.DiscFlg)
				equal = false;
			if (Object1.AdmYearFlg != Object2.AdmYearFlg)
				equal = false;
			if ( Object1.NewComerFlg != null && Object2.NewComerFlg != null )
			{
				if (Object1.NewComerFlg != Object2.NewComerFlg)
					equal = false;
			}
			else if (Object1.NewComerFlg == null ^ Object2.NewComerFlg == null )
			{
				equal = false;
			}
			if ( Object1.CoursesFlg != null && Object2.CoursesFlg != null )
			{
				if (Object1.CoursesFlg != Object2.CoursesFlg)
					equal = false;
			}
			else if (Object1.CoursesFlg == null ^ Object2.CoursesFlg == null )
			{
				equal = false;
			}
			if ( Object1.InstallmentFlg != null && Object2.InstallmentFlg != null )
			{
				if (Object1.InstallmentFlg != Object2.InstallmentFlg)
					equal = false;
			}
			else if (Object1.InstallmentFlg == null ^ Object2.InstallmentFlg == null )
			{
				equal = false;
			}
			if (Object1.CloseFlg != Object2.CloseFlg)
				equal = false;
			if (Object1.ChOrTotalFlg != Object2.ChOrTotalFlg)
				equal = false;
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.MaxCh != null && Object2.MaxCh != null )
			{
				if (Object1.MaxCh != Object2.MaxCh)
					equal = false;
			}
			else if (Object1.MaxCh == null ^ Object2.MaxCh == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeFacultyItemBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeFacultyItemComparer GetComparer()
        {
            return new FeeFacultyItemComparer();
        }
        */

        // Comparer delegates back to FeeFacultyItem
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeFacultyItem rhs, FeeFacultyItemColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeFacultyItemColumn.FeeFacultyItemId:
            		return this.FeeFacultyItemId.CompareTo(rhs.FeeFacultyItemId);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.FeeFacultyRuleId:
            		return this.FeeFacultyRuleId.CompareTo(rhs.FeeFacultyRuleId);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.CompareTo(rhs.FeeCodeItemId);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.FeeItemValue:
            		return this.FeeItemValue.Value.CompareTo(rhs.FeeItemValue.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.ItemOrder:
            		return this.ItemOrder.CompareTo(rhs.ItemOrder);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.StartDate:
            		return this.StartDate.Value.CompareTo(rhs.StartDate.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.EndDate:
            		return this.EndDate.Value.CompareTo(rhs.EndDate.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.AllCourseFlg:
            		return this.AllCourseFlg.CompareTo(rhs.AllCourseFlg);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.RefundFlg:
            		return this.RefundFlg.CompareTo(rhs.RefundFlg);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.DiscFlg:
            		return this.DiscFlg.CompareTo(rhs.DiscFlg);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.AdmYearFlg:
            		return this.AdmYearFlg.CompareTo(rhs.AdmYearFlg);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.NewComerFlg:
            		return this.NewComerFlg.Value.CompareTo(rhs.NewComerFlg.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.CoursesFlg:
            		return this.CoursesFlg.Value.CompareTo(rhs.CoursesFlg.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.InstallmentFlg:
            		return this.InstallmentFlg.Value.CompareTo(rhs.InstallmentFlg.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.CloseFlg:
            		return this.CloseFlg.CompareTo(rhs.CloseFlg);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.ChOrTotalFlg:
            		return this.ChOrTotalFlg.CompareTo(rhs.ChOrTotalFlg);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyItemColumn.MaxCh:
            		return this.MaxCh.Value.CompareTo(rhs.MaxCh.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeFacultyItemKey> Members
		
		// member variable for the EntityId property
		private FeeFacultyItemKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeFacultyItemKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeFacultyItemKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeFacultyItem")
					.Append("|").Append( this.FeeFacultyItemId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- FeeFacultyItemId: {0}{19}- FeeFacultyRuleId: {1}{19}- FeeCodeItemId: {2}{19}- FeeItemValue: {3}{19}- ItemOrder: {4}{19}- StartDate: {5}{19}- EndDate: {6}{19}- AllCourseFlg: {7}{19}- RefundFlg: {8}{19}- DiscFlg: {9}{19}- AdmYearFlg: {10}{19}- NewComerFlg: {11}{19}- CoursesFlg: {12}{19}- InstallmentFlg: {13}{19}- CloseFlg: {14}{19}- ChOrTotalFlg: {15}{19}- LastDate: {16}{19}- SeUserId: {17}{19}- MaxCh: {18}{19}{21}", 
				this.FeeFacultyItemId,
				this.FeeFacultyRuleId,
				this.FeeCodeItemId,
				(this.FeeItemValue == null) ? string.Empty : this.FeeItemValue.ToString(),
				this.ItemOrder,
				(this.StartDate == null) ? string.Empty : this.StartDate.ToString(),
				(this.EndDate == null) ? string.Empty : this.EndDate.ToString(),
				this.AllCourseFlg,
				this.RefundFlg,
				this.DiscFlg,
				this.AdmYearFlg,
				(this.NewComerFlg == null) ? string.Empty : this.NewComerFlg.ToString(),
				(this.CoursesFlg == null) ? string.Empty : this.CoursesFlg.ToString(),
				(this.InstallmentFlg == null) ? string.Empty : this.InstallmentFlg.ToString(),
				this.CloseFlg,
				this.ChOrTotalFlg,
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.MaxCh == null) ? string.Empty : this.MaxCh.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_FACULTY_ITEM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeFacultyItemEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_FACULTY_ITEM_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_FACULTY_ITEM"</remarks>
		public System.Decimal FeeFacultyItemId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeFacultyItemId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FEE_FACULTY_RULE_ID : 
		/// </summary>
		public System.Decimal		  FeeFacultyRuleId = 0.0m;
		
		/// <summary>
		/// FEE_CODE_ITEM_ID : 
		/// </summary>
		public System.Decimal		  FeeCodeItemId = 0.0m;
		
		/// <summary>
		/// FEE_ITEM_VALUE : NULL if ADM_YEAR_FLG=1  else must have value
		/// </summary>
		public System.Decimal?		  FeeItemValue = null;
		
		/// <summary>
		/// ITEM_ORDER : 
		/// </summary>
		public System.Decimal		  ItemOrder = 0.0m;
		
		/// <summary>
		/// START_DATE : 
		/// </summary>
		public System.DateTime?		  StartDate = null;
		
		/// <summary>
		/// END_DATE : 
		/// </summary>
		public System.DateTime?		  EndDate = null;
		
		/// <summary>
		/// ALL_COURSE_FLG : 
		/// </summary>
		public System.Decimal		  AllCourseFlg = 0.0m;
		
		/// <summary>
		/// REFUND_FLG : 
		/// </summary>
		public System.Decimal		  RefundFlg = 0.0m;
		
		/// <summary>
		/// DISC_FLG : 
		/// </summary>
		public System.Decimal		  DiscFlg = 0.0m;
		
		/// <summary>
		/// ADM_YEAR_FLG : 
		/// </summary>
		public System.Decimal		  AdmYearFlg = 0.0m;
		
		/// <summary>
		/// NEW_COMER_FLG : 
		/// </summary>
		public System.Decimal?		  NewComerFlg = null;
		
		/// <summary>
		/// COURSES_FLG : 
		/// </summary>
		public System.Decimal?		  CoursesFlg = null;
		
		/// <summary>
		/// INSTALLMENT_FLG : 
		/// </summary>
		public System.Decimal?		  InstallmentFlg = null;
		
		/// <summary>
		/// CLOSE_FLG : 
		/// </summary>
		public System.Decimal		  CloseFlg = 0.0m;
		
		/// <summary>
		/// CH_OR_TOTAL_FLG : 0>>total
		/// 		/// 1>>CH
		/// 		/// 2>>XX replaced by COURSES_FLG=1
		/// </summary>
		public System.Decimal		  ChOrTotalFlg = 0.0m;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// MAX_CH : if FEE_CODE_ITEM_ID ENUM_ID Extra Hour
		/// </summary>
		public System.Int32?		  MaxCh = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private FeeCodeItem _feeCodeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return this._feeCodeItemIdSource; }
            set { this._feeCodeItemIdSource = value; }
      	}
		private FeeFacultyRule _feeFacultyRuleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return this._feeFacultyRuleIdSource; }
            set { this._feeFacultyRuleIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeStudFeeItemCollection
		
		private TList<FeeStudFeeItem> _feeStudFeeItemFeeFacultyItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudFeeItemFeeFacultyItemId
		/// </summary>
		
		public TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get
			{
				if (_feeStudFeeItemFeeFacultyItemId == null)
				{
				_feeStudFeeItemFeeFacultyItemId = new TList<FeeStudFeeItem>();
				}
	
				return _feeStudFeeItemFeeFacultyItemId;
			}
			set { _feeStudFeeItemFeeFacultyItemId = value; }
		}
		
		#endregion

		#region FeeItemPaymentWaysCollection
		
		private TList<FeeItemPaymentWays> _feeItemPaymentWaysFeeFacultyItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeItemPaymentWaysFeeFacultyItemId
		/// </summary>
		
		public TList<FeeItemPaymentWays> FeeItemPaymentWaysCollection
		{
			get
			{
				if (_feeItemPaymentWaysFeeFacultyItemId == null)
				{
				_feeItemPaymentWaysFeeFacultyItemId = new TList<FeeItemPaymentWays>();
				}
	
				return _feeItemPaymentWaysFeeFacultyItemId;
			}
			set { _feeItemPaymentWaysFeeFacultyItemId = value; }
		}
		
		#endregion

		#region FeeFacItemAdmYearCollection
		
		private TList<FeeFacItemAdmYear> _feeFacItemAdmYearFeeFacultyItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacItemAdmYearFeeFacultyItemId
		/// </summary>
		
		public TList<FeeFacItemAdmYear> FeeFacItemAdmYearCollection
		{
			get
			{
				if (_feeFacItemAdmYearFeeFacultyItemId == null)
				{
				_feeFacItemAdmYearFeeFacultyItemId = new TList<FeeFacItemAdmYear>();
				}
	
				return _feeFacItemAdmYearFeeFacultyItemId;
			}
			set { _feeFacItemAdmYearFeeFacultyItemId = value; }
		}
		
		#endregion

		#region FeeCourseExpCollection
		
		private TList<FeeCourseExp> _feeCourseExpFeeFacultyItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCourseExpFeeFacultyItemId
		/// </summary>
		
		public TList<FeeCourseExp> FeeCourseExpCollection
		{
			get
			{
				if (_feeCourseExpFeeFacultyItemId == null)
				{
				_feeCourseExpFeeFacultyItemId = new TList<FeeCourseExp>();
				}
	
				return _feeCourseExpFeeFacultyItemId;
			}
			set { _feeCourseExpFeeFacultyItemId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeFacultyItemEntityData _tmp = new FeeFacultyItemEntityData();
						
			_tmp.FeeFacultyItemId = this.FeeFacultyItemId;
			_tmp.OriginalFeeFacultyItemId = this.OriginalFeeFacultyItemId;
			
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.FeeItemValue = this.FeeItemValue;
			_tmp.ItemOrder = this.ItemOrder;
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.AllCourseFlg = this.AllCourseFlg;
			_tmp.RefundFlg = this.RefundFlg;
			_tmp.DiscFlg = this.DiscFlg;
			_tmp.AdmYearFlg = this.AdmYearFlg;
			_tmp.NewComerFlg = this.NewComerFlg;
			_tmp.CoursesFlg = this.CoursesFlg;
			_tmp.InstallmentFlg = this.InstallmentFlg;
			_tmp.CloseFlg = this.CloseFlg;
			_tmp.ChOrTotalFlg = this.ChOrTotalFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.MaxCh = this.MaxCh;
			
			#region Source Parent Composite Entities
			if (this.FeeCodeItemIdSource != null)
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource) as FeeCodeItem;
			if (this.FeeFacultyRuleIdSource != null)
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource) as FeeFacultyRule;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeStudFeeItemFeeFacultyItemId != null)
				_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection); 
			if (this._feeItemPaymentWaysFeeFacultyItemId != null)
				_tmp.FeeItemPaymentWaysCollection = (TList<FeeItemPaymentWays>) MakeCopyOf(this.FeeItemPaymentWaysCollection); 
			if (this._feeFacItemAdmYearFeeFacultyItemId != null)
				_tmp.FeeFacItemAdmYearCollection = (TList<FeeFacItemAdmYear>) MakeCopyOf(this.FeeFacItemAdmYearCollection); 
			if (this._feeCourseExpFeeFacultyItemId != null)
				_tmp.FeeCourseExpCollection = (TList<FeeCourseExp>) MakeCopyOf(this.FeeCourseExpCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeFacultyItemEntityData _tmp = new FeeFacultyItemEntityData();
						
			_tmp.FeeFacultyItemId = this.FeeFacultyItemId;
			_tmp.OriginalFeeFacultyItemId = this.OriginalFeeFacultyItemId;
			
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.FeeItemValue = this.FeeItemValue;
			_tmp.ItemOrder = this.ItemOrder;
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.AllCourseFlg = this.AllCourseFlg;
			_tmp.RefundFlg = this.RefundFlg;
			_tmp.DiscFlg = this.DiscFlg;
			_tmp.AdmYearFlg = this.AdmYearFlg;
			_tmp.NewComerFlg = this.NewComerFlg;
			_tmp.CoursesFlg = this.CoursesFlg;
			_tmp.InstallmentFlg = this.InstallmentFlg;
			_tmp.CloseFlg = this.CloseFlg;
			_tmp.ChOrTotalFlg = this.ChOrTotalFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.MaxCh = this.MaxCh;
			
			#region Source Parent Composite Entities
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				_tmp.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				_tmp.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			_tmp.FeeItemPaymentWaysCollection = (TList<FeeItemPaymentWays>) MakeCopyOf(this.FeeItemPaymentWaysCollection, existingCopies); 
			_tmp.FeeFacItemAdmYearCollection = (TList<FeeFacItemAdmYear>) MakeCopyOf(this.FeeFacItemAdmYearCollection, existingCopies); 
			_tmp.FeeCourseExpCollection = (TList<FeeCourseExp>) MakeCopyOf(this.FeeCourseExpCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeFacultyItemColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeFacultyItemColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeFacultyItemColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeFacultyItemEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeFacultyItemEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeFacultyItemColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeFacultyItemEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeFacultyItemEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeFacultyItemEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeFacultyItem"/> object.
	/// </remarks>
	public class FeeFacultyItemEventArgs : System.EventArgs
	{
		private FeeFacultyItemColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeFacultyItemEventArgs class.
		///</summary>
		public FeeFacultyItemEventArgs(FeeFacultyItemColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeFacultyItemEventArgs class.
		///</summary>
		public FeeFacultyItemEventArgs(FeeFacultyItemColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeFacultyItemColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeFacultyItemColumn" />
		public FeeFacultyItemColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeFacultyItem related events.
	///</summary>
	public delegate void FeeFacultyItemEventHandler(object sender, FeeFacultyItemEventArgs e);
	
	#region FeeFacultyItemComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeFacultyItemComparer : System.Collections.Generic.IComparer<FeeFacultyItem>
	{
		FeeFacultyItemColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeFacultyItemComparer"/> class.
        /// </summary>
		public FeeFacultyItemComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeFacultyItemComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeFacultyItemComparer(FeeFacultyItemColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeFacultyItem"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeFacultyItem"/> to compare.</param>
        /// <param name="b">The second <c>FeeFacultyItem</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeFacultyItem a, FeeFacultyItem b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeFacultyItem entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeFacultyItem a, FeeFacultyItem b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeFacultyItemColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeFacultyItemKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeFacultyItem"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeFacultyItemKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemKey class.
		/// </summary>
		public FeeFacultyItemKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemKey class.
		/// </summary>
		public FeeFacultyItemKey(FeeFacultyItemBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeFacultyItemId = entity.FeeFacultyItemId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeFacultyItemKey class.
		/// </summary>
		public FeeFacultyItemKey(System.Decimal _feeFacultyItemId)
		{
			#region Init Properties

			this.FeeFacultyItemId = _feeFacultyItemId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeFacultyItemBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeFacultyItemBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeFacultyItemId property
		private System.Decimal _feeFacultyItemId;
		
		/// <summary>
		/// Gets or sets the FeeFacultyItemId property.
		/// </summary>
		public System.Decimal FeeFacultyItemId
		{
			get { return _feeFacultyItemId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeFacultyItemId = value;
				
				_feeFacultyItemId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeFacultyItemId = ( values["FeeFacultyItemId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeFacultyItemId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeFacultyItemId", FeeFacultyItemId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeFacultyItemId: {0}{1}",
								FeeFacultyItemId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeFacultyItemColumn Enum
	
	/// <summary>
	/// Enumerate the FeeFacultyItem columns.
	/// </summary>
	[Serializable]
	public enum FeeFacultyItemColumn : int
	{
		/// <summary>
		/// FeeFacultyItemId : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_ITEM_ID")]
		[ColumnEnum("FEE_FACULTY_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeFacultyItemId = 1,
		/// <summary>
		/// FeeFacultyRuleId : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_RULE_ID")]
		[ColumnEnum("FEE_FACULTY_RULE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeFacultyRuleId = 2,
		/// <summary>
		/// FeeCodeItemId : 
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeItemId = 3,
		/// <summary>
		/// FeeItemValue : NULL if ADM_YEAR_FLG=1  else must have value
		/// </summary>
		[EnumTextValue("FEE_ITEM_VALUE")]
		[ColumnEnum("FEE_ITEM_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeItemValue = 4,
		/// <summary>
		/// ItemOrder : 
		/// </summary>
		[EnumTextValue("ITEM_ORDER")]
		[ColumnEnum("ITEM_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ItemOrder = 5,
		/// <summary>
		/// StartDate : 
		/// </summary>
		[EnumTextValue("START_DATE")]
		[ColumnEnum("START_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		StartDate = 6,
		/// <summary>
		/// EndDate : 
		/// </summary>
		[EnumTextValue("END_DATE")]
		[ColumnEnum("END_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		EndDate = 7,
		/// <summary>
		/// AllCourseFlg : 
		/// </summary>
		[EnumTextValue("ALL_COURSE_FLG")]
		[ColumnEnum("ALL_COURSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AllCourseFlg = 8,
		/// <summary>
		/// RefundFlg : 
		/// </summary>
		[EnumTextValue("REFUND_FLG")]
		[ColumnEnum("REFUND_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RefundFlg = 9,
		/// <summary>
		/// DiscFlg : 
		/// </summary>
		[EnumTextValue("DISC_FLG")]
		[ColumnEnum("DISC_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DiscFlg = 10,
		/// <summary>
		/// AdmYearFlg : 
		/// </summary>
		[EnumTextValue("ADM_YEAR_FLG")]
		[ColumnEnum("ADM_YEAR_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmYearFlg = 11,
		/// <summary>
		/// NewComerFlg : 
		/// </summary>
		[EnumTextValue("NEW_COMER_FLG")]
		[ColumnEnum("NEW_COMER_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NewComerFlg = 12,
		/// <summary>
		/// CoursesFlg : 
		/// </summary>
		[EnumTextValue("COURSES_FLG")]
		[ColumnEnum("COURSES_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoursesFlg = 13,
		/// <summary>
		/// InstallmentFlg : 
		/// </summary>
		[EnumTextValue("INSTALLMENT_FLG")]
		[ColumnEnum("INSTALLMENT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InstallmentFlg = 14,
		/// <summary>
		/// CloseFlg : 
		/// </summary>
		[EnumTextValue("CLOSE_FLG")]
		[ColumnEnum("CLOSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CloseFlg = 15,
		/// <summary>
		/// ChOrTotalFlg : 0>>total
		/// 		/// 1>>CH
		/// 		/// 2>>XX replaced by COURSES_FLG=1
		/// </summary>
		[EnumTextValue("CH_OR_TOTAL_FLG")]
		[ColumnEnum("CH_OR_TOTAL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ChOrTotalFlg = 16,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 17,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 18,
		/// <summary>
		/// MaxCh : if FEE_CODE_ITEM_ID ENUM_ID Extra Hour
		/// </summary>
		[EnumTextValue("MAX_CH")]
		[ColumnEnum("MAX_CH", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaxCh = 19
	}//End enum

	#endregion FeeFacultyItemColumn Enum

} // end namespace
