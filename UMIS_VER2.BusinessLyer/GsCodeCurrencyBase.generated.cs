
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsCodeCurrency.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_CODE_CURRENCY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsCodeCurrencyBase : EntityBase, IGsCodeCurrency, IEntityId<GsCodeCurrencyKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsCodeCurrencyEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsCodeCurrencyEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsCodeCurrencyEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsCodeCurrency> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCodeCurrencyEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCodeCurrencyEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsCodeCurrencyBase"/> instance.
		///</summary>
		public GsCodeCurrencyBase()
		{
			this.entityData = new GsCodeCurrencyEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsCodeCurrencyBase"/> instance.
		///</summary>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_currencyDescrAr"></param>
		///<param name="_currencyDescrEn"></param>
		///<param name="_currencyCode"></param>
		///<param name="_isCurrencyLocal"></param>
		///<param name="_fractionDescrAr"></param>
		///<param name="_fractionDescrEn"></param>
		///<param name="_fractionValue"></param>
		///<param name="_exchangeRate">سعر تغيير العملة</param>
		public GsCodeCurrencyBase(System.Decimal _gsCodeCurrencyId, System.String _currencyDescrAr, 
			System.String _currencyDescrEn, System.String _currencyCode, System.Decimal _isCurrencyLocal, 
			System.String _fractionDescrAr, System.String _fractionDescrEn, System.Int32? _fractionValue, 
			System.Decimal? _exchangeRate)
		{
			this.entityData = new GsCodeCurrencyEntityData();
			this.backupData = null;

			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.CurrencyDescrAr = _currencyDescrAr;
			this.CurrencyDescrEn = _currencyDescrEn;
			this.CurrencyCode = _currencyCode;
			this.IsCurrencyLocal = _isCurrencyLocal;
			this.FractionDescrAr = _fractionDescrAr;
			this.FractionDescrEn = _fractionDescrEn;
			this.FractionValue = _fractionValue;
			this.ExchangeRate = _exchangeRate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsCodeCurrency"/> instance.
		///</summary>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_currencyDescrAr"></param>
		///<param name="_currencyDescrEn"></param>
		///<param name="_currencyCode"></param>
		///<param name="_isCurrencyLocal"></param>
		///<param name="_fractionDescrAr"></param>
		///<param name="_fractionDescrEn"></param>
		///<param name="_fractionValue"></param>
		///<param name="_exchangeRate">سعر تغيير العملة</param>
		public static GsCodeCurrency CreateGsCodeCurrency(System.Decimal _gsCodeCurrencyId, System.String _currencyDescrAr, 
			System.String _currencyDescrEn, System.String _currencyCode, System.Decimal _isCurrencyLocal, 
			System.String _fractionDescrAr, System.String _fractionDescrEn, System.Int32? _fractionValue, 
			System.Decimal? _exchangeRate)
		{
			GsCodeCurrency newGsCodeCurrency = new GsCodeCurrency();
			newGsCodeCurrency.GsCodeCurrencyId = _gsCodeCurrencyId;
			newGsCodeCurrency.CurrencyDescrAr = _currencyDescrAr;
			newGsCodeCurrency.CurrencyDescrEn = _currencyDescrEn;
			newGsCodeCurrency.CurrencyCode = _currencyCode;
			newGsCodeCurrency.IsCurrencyLocal = _isCurrencyLocal;
			newGsCodeCurrency.FractionDescrAr = _fractionDescrAr;
			newGsCodeCurrency.FractionDescrEn = _fractionDescrEn;
			newGsCodeCurrency.FractionValue = _fractionValue;
			newGsCodeCurrency.ExchangeRate = _exchangeRate;
			return newGsCodeCurrency;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				this.EntityId.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_CODE_CURRENCY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GS_CODE_CURRENCY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsCodeCurrencyId
		{
			get { return this.entityData.OriginalGsCodeCurrencyId; }
			set { this.entityData.OriginalGsCodeCurrencyId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 70)]
		public virtual System.String CurrencyDescrAr
		{
			get
			{
				return this.entityData.CurrencyDescrAr; 
			}
			
			set
			{
				if (this.entityData.CurrencyDescrAr == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.CurrencyDescrAr, this.entityData.CurrencyDescrAr);
				this.entityData.CurrencyDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.CurrencyDescrAr, this.entityData.CurrencyDescrAr);
				OnPropertyChanged("CurrencyDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 70)]
		public virtual System.String CurrencyDescrEn
		{
			get
			{
				return this.entityData.CurrencyDescrEn; 
			}
			
			set
			{
				if (this.entityData.CurrencyDescrEn == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.CurrencyDescrEn, this.entityData.CurrencyDescrEn);
				this.entityData.CurrencyDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.CurrencyDescrEn, this.entityData.CurrencyDescrEn);
				OnPropertyChanged("CurrencyDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String CurrencyCode
		{
			get
			{
				return this.entityData.CurrencyCode; 
			}
			
			set
			{
				if (this.entityData.CurrencyCode == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.CurrencyCode, this.entityData.CurrencyCode);
				this.entityData.CurrencyCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.CurrencyCode, this.entityData.CurrencyCode);
				OnPropertyChanged("CurrencyCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCurrencyLocal property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsCurrencyLocal
		{
			get
			{
				return this.entityData.IsCurrencyLocal; 
			}
			
			set
			{
				if (this.entityData.IsCurrencyLocal == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.IsCurrencyLocal, this.entityData.IsCurrencyLocal);
				this.entityData.IsCurrencyLocal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.IsCurrencyLocal, this.entityData.IsCurrencyLocal);
				OnPropertyChanged("IsCurrencyLocal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FractionDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 70)]
		public virtual System.String FractionDescrAr
		{
			get
			{
				return this.entityData.FractionDescrAr; 
			}
			
			set
			{
				if (this.entityData.FractionDescrAr == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.FractionDescrAr, this.entityData.FractionDescrAr);
				this.entityData.FractionDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.FractionDescrAr, this.entityData.FractionDescrAr);
				OnPropertyChanged("FractionDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FractionDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 70)]
		public virtual System.String FractionDescrEn
		{
			get
			{
				return this.entityData.FractionDescrEn; 
			}
			
			set
			{
				if (this.entityData.FractionDescrEn == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.FractionDescrEn, this.entityData.FractionDescrEn);
				this.entityData.FractionDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.FractionDescrEn, this.entityData.FractionDescrEn);
				OnPropertyChanged("FractionDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FractionValue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFractionValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FractionValue
		{
			get
			{
				return this.entityData.FractionValue; 
			}
			
			set
			{
				if (this.entityData.FractionValue == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.FractionValue, this.entityData.FractionValue);
				this.entityData.FractionValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.FractionValue, this.entityData.FractionValue);
				OnPropertyChanged("FractionValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExchangeRate property. 
		///		سعر تغيير العملة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExchangeRateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"سعر تغيير العملة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExchangeRate
		{
			get
			{
				return this.entityData.ExchangeRate; 
			}
			
			set
			{
				if (this.entityData.ExchangeRate == value)
					return;
					
				OnColumnChanging(GsCodeCurrencyColumn.ExchangeRate, this.entityData.ExchangeRate);
				this.entityData.ExchangeRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCodeCurrencyColumn.ExchangeRate, this.entityData.ExchangeRate);
				OnPropertyChanged("ExchangeRate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeInvoice objects
		///	which are related to this object through the relation FK_FEE_INVOICE_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInvoice> FeeInvoiceCollection
		{
			get { return entityData.FeeInvoiceCollection; }
			set { entityData.FeeInvoiceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeUserFundReq objects
		///	which are related to this object through the relation FK_FEE_USER_FUND_REQ_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeUserFundReq> FeeUserFundReqCollection
		{
			get { return entityData.FeeUserFundReqCollection; }
			set { entityData.FeeUserFundReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoSponsorOffer objects
		///	which are related to this object through the relation FK_SPO_SPONSOR_OFFER_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoSponsorOffer> SpoSponsorOfferCollection
		{
			get { return entityData.SpoSponsorOfferCollection; }
			set { entityData.SpoSponsorOfferCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeCdeBankAccnt objects
		///	which are related to this object through the relation FK_FEE_CDE_BANK_ACCNT_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCdeBankAccnt> FeeCdeBankAccntCollection
		{
			get { return entityData.FeeCdeBankAccntCollection; }
			set { entityData.FeeCdeBankAccntCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeFee objects
		///	which are related to this object through the relation FK_ADM_Fees_N_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get { return entityData.AdmCdeFeeCollection; }
			set { entityData.AdmCdeFeeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudInstallment objects
		///	which are related to this object through the relation FK_FEE_STUD_INSTALLMENT_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudInstallment> FeeStudInstallmentCollection
		{
			get { return entityData.FeeStudInstallmentCollection; }
			set { entityData.FeeStudInstallmentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyRule objects
		///	which are related to this object through the relation FK_FEE_FACULTY_RULE_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get { return entityData.FeeFacultyRuleCollection; }
			set { entityData.FeeFacultyRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudAllowance objects
		///	which are related to this object through the relation FK_FEE_STUD_ALLOWANCE_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudAllowance> FeeStudAllowanceCollection
		{
			get { return entityData.FeeStudAllowanceCollection; }
			set { entityData.FeeStudAllowanceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeAllowanceRule objects
		///	which are related to this object through the relation FK_FEE_ALLOWANCE_RULE_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeAllowanceRule> FeeAllowanceRuleCollection
		{
			get { return entityData.FeeAllowanceRuleCollection; }
			set { entityData.FeeAllowanceRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefndStdReq objects
		///	which are related to this object through the relation FK_REFUND_STUD_REQ_MASTER_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefndStdReq> FeeRefndStdReqCollection
		{
			get { return entityData.FeeRefndStdReqCollection; }
			set { entityData.FeeRefndStdReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudFeeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_FEE_ITEM_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get { return entityData.FeeStudFeeItemCollection; }
			set { entityData.FeeStudFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeUserBondReq objects
		///	which are related to this object through the relation FK_FEE_USER_BOND_REQ_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeUserBondReq> FeeUserBondReqCollection
		{
			get { return entityData.FeeUserBondReqCollection; }
			set { entityData.FeeUserBondReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCountryNode objects
		///	which are related to this object through the relation FK_GS_COUNTRY_NODE_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCountryNode> GsCountryNodeCollection
		{
			get { return entityData.GsCountryNodeCollection; }
			set { entityData.GsCountryNodeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudVoucher objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucher> FeeStudVoucherCollection
		{
			get { return entityData.FeeStudVoucherCollection; }
			set { entityData.FeeStudVoucherCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppFees objects
		///	which are related to this object through the relation FK_ADM_APP_FEES_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppFees> AdmAppFeesCollection
		{
			get { return entityData.AdmAppFeesCollection; }
			set { entityData.AdmAppFeesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeSemesterAgenda objects
		///	which are related to this object through the relation FK_FEE_SEMESTER_AGENDA_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeSemesterAgenda> FeeSemesterAgendaCollection
		{
			get { return entityData.FeeSemesterAgendaCollection; }
			set { entityData.FeeSemesterAgendaCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaTrainingCourse objects
		///	which are related to this object through the relation FK_AUTO_050a
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaTrainingCourse> SaTrainingCourseCollection
		{
			get { return entityData.SaTrainingCourseCollection; }
			set { entityData.SaTrainingCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AccomStudReq objects
		///	which are related to this object through the relation FK_ACCOM_STUD_REQ_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccomStudReq> AccomStudReqCollection
		{
			get { return entityData.AccomStudReqCollection; }
			set { entityData.AccomStudReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeAccomItem objects
		///	which are related to this object through the relation FK_FEE_ACCOM_ITEM_GS_CODE_CURRENCY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeAccomItem> FeeAccomItemCollection
		{
			get { return entityData.FeeAccomItemCollection; }
			set { entityData.FeeAccomItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CurrencyDescrAr", "Currency Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CurrencyDescrAr", "Currency Descr Ar", 70));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CurrencyDescrEn", "Currency Descr En", 70));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CurrencyCode", "Currency Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FractionDescrAr", "Fraction Descr Ar", 70));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FractionDescrEn", "Fraction Descr En", 70));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_CODE_CURRENCY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_CODE_CURRENCY_ID", "CURRENCY_DESCR_AR", "CURRENCY_DESCR_EN", "CURRENCY_CODE", "IS_CURRENCY_LOCAL", "FRACTION_DESCR_AR", "FRACTION_DESCR_EN", "FRACTION_VALUE", "EXCHANGE_RATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsCodeCurrencyEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsCodeCurrency) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsCodeCurrency>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsCodeCurrency);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsCodeCurrency Entity 
		///</summary>
		protected virtual GsCodeCurrency Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsCodeCurrency copy = new GsCodeCurrency();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
					copy.OriginalGsCodeCurrencyId = this.OriginalGsCodeCurrencyId;
				copy.CurrencyDescrAr = this.CurrencyDescrAr;
				copy.CurrencyDescrEn = this.CurrencyDescrEn;
				copy.CurrencyCode = this.CurrencyCode;
				copy.IsCurrencyLocal = this.IsCurrencyLocal;
				copy.FractionDescrAr = this.FractionDescrAr;
				copy.FractionDescrEn = this.FractionDescrEn;
				copy.FractionValue = this.FractionValue;
				copy.ExchangeRate = this.ExchangeRate;
			
		
			//deep copy nested objects
			copy.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			copy.FeeUserFundReqCollection = (TList<FeeUserFundReq>) MakeCopyOf(this.FeeUserFundReqCollection, existingCopies); 
			copy.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection, existingCopies); 
			copy.FeeCdeBankAccntCollection = (TList<FeeCdeBankAccnt>) MakeCopyOf(this.FeeCdeBankAccntCollection, existingCopies); 
			copy.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			copy.FeeStudInstallmentCollection = (TList<FeeStudInstallment>) MakeCopyOf(this.FeeStudInstallmentCollection, existingCopies); 
			copy.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			copy.FeeStudAllowanceCollection = (TList<FeeStudAllowance>) MakeCopyOf(this.FeeStudAllowanceCollection, existingCopies); 
			copy.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection, existingCopies); 
			copy.FeeRefndStdReqCollection = (TList<FeeRefndStdReq>) MakeCopyOf(this.FeeRefndStdReqCollection, existingCopies); 
			copy.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			copy.FeeUserBondReqCollection = (TList<FeeUserBondReq>) MakeCopyOf(this.FeeUserBondReqCollection, existingCopies); 
			copy.GsCountryNodeCollection = (TList<GsCountryNode>) MakeCopyOf(this.GsCountryNodeCollection, existingCopies); 
			copy.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection, existingCopies); 
			copy.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			copy.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection, existingCopies); 
			copy.SaTrainingCourseCollection = (TList<SaTrainingCourse>) MakeCopyOf(this.SaTrainingCourseCollection, existingCopies); 
			copy.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection, existingCopies); 
			copy.FeeAccomItemCollection = (TList<FeeAccomItem>) MakeCopyOf(this.FeeAccomItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsCodeCurrency Entity 
		///</summary>
		public virtual GsCodeCurrency Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsCodeCurrency Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsCodeCurrency DeepCopy()
		{
			return EntityHelper.Clone<GsCodeCurrency>(this as GsCodeCurrency);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsCodeCurrencyEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsCodeCurrencyEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsCodeCurrencyEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsCodeCurrencyColumn column)
		{
			switch(column)
			{
					case GsCodeCurrencyColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case GsCodeCurrencyColumn.CurrencyDescrAr:
					return entityData.CurrencyDescrAr != _originalData.CurrencyDescrAr;
					case GsCodeCurrencyColumn.CurrencyDescrEn:
					return entityData.CurrencyDescrEn != _originalData.CurrencyDescrEn;
					case GsCodeCurrencyColumn.CurrencyCode:
					return entityData.CurrencyCode != _originalData.CurrencyCode;
					case GsCodeCurrencyColumn.IsCurrencyLocal:
					return entityData.IsCurrencyLocal != _originalData.IsCurrencyLocal;
					case GsCodeCurrencyColumn.FractionDescrAr:
					return entityData.FractionDescrAr != _originalData.FractionDescrAr;
					case GsCodeCurrencyColumn.FractionDescrEn:
					return entityData.FractionDescrEn != _originalData.FractionDescrEn;
					case GsCodeCurrencyColumn.FractionValue:
					return entityData.FractionValue != _originalData.FractionValue;
					case GsCodeCurrencyColumn.ExchangeRate:
					return entityData.ExchangeRate != _originalData.ExchangeRate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsCodeCurrencyColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.CurrencyDescrAr != _originalData.CurrencyDescrAr;
			result = result || entityData.CurrencyDescrEn != _originalData.CurrencyDescrEn;
			result = result || entityData.CurrencyCode != _originalData.CurrencyCode;
			result = result || entityData.IsCurrencyLocal != _originalData.IsCurrencyLocal;
			result = result || entityData.FractionDescrAr != _originalData.FractionDescrAr;
			result = result || entityData.FractionDescrEn != _originalData.FractionDescrEn;
			result = result || entityData.FractionValue != _originalData.FractionValue;
			result = result || entityData.ExchangeRate != _originalData.ExchangeRate;
			return result;
		}	
		
		///<summary>
		///  Returns a GsCodeCurrency Entity with the original data.
		///</summary>
		public GsCodeCurrency GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsCodeCurrency(
				_originalData.GsCodeCurrencyId,
				_originalData.CurrencyDescrAr,
				_originalData.CurrencyDescrEn,
				_originalData.CurrencyCode,
				_originalData.IsCurrencyLocal,
				_originalData.FractionDescrAr,
				_originalData.FractionDescrEn,
				_originalData.FractionValue,
				_originalData.ExchangeRate
				);
				
			return (GsCodeCurrency)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsCodeCurrencyBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsCodeCurrencyBase)
				return ValueEquals(this, (GsCodeCurrencyBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsCodeCurrencyBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsCodeCurrencyId.GetHashCode() ^ 
					this.CurrencyDescrAr.GetHashCode() ^ 
					((this.CurrencyDescrEn == null) ? string.Empty : this.CurrencyDescrEn.ToString()).GetHashCode() ^ 
					((this.CurrencyCode == null) ? string.Empty : this.CurrencyCode.ToString()).GetHashCode() ^ 
					this.IsCurrencyLocal.GetHashCode() ^ 
					((this.FractionDescrAr == null) ? string.Empty : this.FractionDescrAr.ToString()).GetHashCode() ^ 
					((this.FractionDescrEn == null) ? string.Empty : this.FractionDescrEn.ToString()).GetHashCode() ^ 
					((this.FractionValue == null) ? string.Empty : this.FractionValue.ToString()).GetHashCode() ^ 
					((this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsCodeCurrencyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsCodeCurrencyBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsCodeCurrencyBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsCodeCurrencyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsCodeCurrencyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsCodeCurrencyBase Object1, GsCodeCurrencyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if (Object1.CurrencyDescrAr != Object2.CurrencyDescrAr)
				equal = false;
			if ( Object1.CurrencyDescrEn != null && Object2.CurrencyDescrEn != null )
			{
				if (Object1.CurrencyDescrEn != Object2.CurrencyDescrEn)
					equal = false;
			}
			else if (Object1.CurrencyDescrEn == null ^ Object2.CurrencyDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.CurrencyCode != null && Object2.CurrencyCode != null )
			{
				if (Object1.CurrencyCode != Object2.CurrencyCode)
					equal = false;
			}
			else if (Object1.CurrencyCode == null ^ Object2.CurrencyCode == null )
			{
				equal = false;
			}
			if (Object1.IsCurrencyLocal != Object2.IsCurrencyLocal)
				equal = false;
			if ( Object1.FractionDescrAr != null && Object2.FractionDescrAr != null )
			{
				if (Object1.FractionDescrAr != Object2.FractionDescrAr)
					equal = false;
			}
			else if (Object1.FractionDescrAr == null ^ Object2.FractionDescrAr == null )
			{
				equal = false;
			}
			if ( Object1.FractionDescrEn != null && Object2.FractionDescrEn != null )
			{
				if (Object1.FractionDescrEn != Object2.FractionDescrEn)
					equal = false;
			}
			else if (Object1.FractionDescrEn == null ^ Object2.FractionDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.FractionValue != null && Object2.FractionValue != null )
			{
				if (Object1.FractionValue != Object2.FractionValue)
					equal = false;
			}
			else if (Object1.FractionValue == null ^ Object2.FractionValue == null )
			{
				equal = false;
			}
			if ( Object1.ExchangeRate != null && Object2.ExchangeRate != null )
			{
				if (Object1.ExchangeRate != Object2.ExchangeRate)
					equal = false;
			}
			else if (Object1.ExchangeRate == null ^ Object2.ExchangeRate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsCodeCurrencyBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsCodeCurrencyComparer GetComparer()
        {
            return new GsCodeCurrencyComparer();
        }
        */

        // Comparer delegates back to GsCodeCurrency
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsCodeCurrency rhs, GsCodeCurrencyColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsCodeCurrencyColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.CurrencyDescrAr:
            		return this.CurrencyDescrAr.CompareTo(rhs.CurrencyDescrAr);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.CurrencyDescrEn:
            		return this.CurrencyDescrEn.CompareTo(rhs.CurrencyDescrEn);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.CurrencyCode:
            		return this.CurrencyCode.CompareTo(rhs.CurrencyCode);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.IsCurrencyLocal:
            		return this.IsCurrencyLocal.CompareTo(rhs.IsCurrencyLocal);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.FractionDescrAr:
            		return this.FractionDescrAr.CompareTo(rhs.FractionDescrAr);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.FractionDescrEn:
            		return this.FractionDescrEn.CompareTo(rhs.FractionDescrEn);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.FractionValue:
            		return this.FractionValue.Value.CompareTo(rhs.FractionValue.Value);
            		
            		                 
            	
            	
            	case GsCodeCurrencyColumn.ExchangeRate:
            		return this.ExchangeRate.Value.CompareTo(rhs.ExchangeRate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsCodeCurrencyKey> Members
		
		// member variable for the EntityId property
		private GsCodeCurrencyKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsCodeCurrencyKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsCodeCurrencyKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsCodeCurrency")
					.Append("|").Append( this.GsCodeCurrencyId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- GsCodeCurrencyId: {0}{9}- CurrencyDescrAr: {1}{9}- CurrencyDescrEn: {2}{9}- CurrencyCode: {3}{9}- IsCurrencyLocal: {4}{9}- FractionDescrAr: {5}{9}- FractionDescrEn: {6}{9}- FractionValue: {7}{9}- ExchangeRate: {8}{9}{11}", 
				this.GsCodeCurrencyId,
				this.CurrencyDescrAr,
				(this.CurrencyDescrEn == null) ? string.Empty : this.CurrencyDescrEn.ToString(),
				(this.CurrencyCode == null) ? string.Empty : this.CurrencyCode.ToString(),
				this.IsCurrencyLocal,
				(this.FractionDescrAr == null) ? string.Empty : this.FractionDescrAr.ToString(),
				(this.FractionDescrEn == null) ? string.Empty : this.FractionDescrEn.ToString(),
				(this.FractionValue == null) ? string.Empty : this.FractionValue.ToString(),
				(this.ExchangeRate == null) ? string.Empty : this.ExchangeRate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_CODE_CURRENCY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsCodeCurrencyEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_CODE_CURRENCY"</remarks>
		public System.Decimal GsCodeCurrencyId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsCodeCurrencyId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CURRENCY_DESCR_AR : 
		/// </summary>
		public System.String		  CurrencyDescrAr = string.Empty;
		
		/// <summary>
		/// CURRENCY_DESCR_EN : 
		/// </summary>
		public System.String		  CurrencyDescrEn = null;
		
		/// <summary>
		/// CURRENCY_CODE : 
		/// </summary>
		public System.String		  CurrencyCode = null;
		
		/// <summary>
		/// IS_CURRENCY_LOCAL : 
		/// </summary>
		public System.Decimal		  IsCurrencyLocal = 0.0m;
		
		/// <summary>
		/// FRACTION_DESCR_AR : 
		/// </summary>
		public System.String		  FractionDescrAr = null;
		
		/// <summary>
		/// FRACTION_DESCR_EN : 
		/// </summary>
		public System.String		  FractionDescrEn = null;
		
		/// <summary>
		/// FRACTION_VALUE : 
		/// </summary>
		public System.Int32?		  FractionValue = null;
		
		/// <summary>
		/// EXCHANGE_RATE : سعر تغيير العملة
		/// </summary>
		public System.Decimal?		  ExchangeRate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeInvoiceCollection
		
		private TList<FeeInvoice> _feeInvoiceGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInvoiceGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeInvoice> FeeInvoiceCollection
		{
			get
			{
				if (_feeInvoiceGsCodeCurrencyId == null)
				{
				_feeInvoiceGsCodeCurrencyId = new TList<FeeInvoice>();
				}
	
				return _feeInvoiceGsCodeCurrencyId;
			}
			set { _feeInvoiceGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeUserFundReqCollection
		
		private TList<FeeUserFundReq> _feeUserFundReqGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeUserFundReqGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeUserFundReq> FeeUserFundReqCollection
		{
			get
			{
				if (_feeUserFundReqGsCodeCurrencyId == null)
				{
				_feeUserFundReqGsCodeCurrencyId = new TList<FeeUserFundReq>();
				}
	
				return _feeUserFundReqGsCodeCurrencyId;
			}
			set { _feeUserFundReqGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region SpoSponsorOfferCollection
		
		private TList<SpoSponsorOffer> _spoSponsorOfferGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoSponsorOfferGsCodeCurrencyId
		/// </summary>
		
		public TList<SpoSponsorOffer> SpoSponsorOfferCollection
		{
			get
			{
				if (_spoSponsorOfferGsCodeCurrencyId == null)
				{
				_spoSponsorOfferGsCodeCurrencyId = new TList<SpoSponsorOffer>();
				}
	
				return _spoSponsorOfferGsCodeCurrencyId;
			}
			set { _spoSponsorOfferGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeCdeBankAccntCollection
		
		private TList<FeeCdeBankAccnt> _feeCdeBankAccntGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCdeBankAccntGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeCdeBankAccnt> FeeCdeBankAccntCollection
		{
			get
			{
				if (_feeCdeBankAccntGsCodeCurrencyId == null)
				{
				_feeCdeBankAccntGsCodeCurrencyId = new TList<FeeCdeBankAccnt>();
				}
	
				return _feeCdeBankAccntGsCodeCurrencyId;
			}
			set { _feeCdeBankAccntGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region AdmCdeFeeCollection
		
		private TList<AdmCdeFee> _admCdeFeeGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeFeeGsCodeCurrencyId
		/// </summary>
		
		public TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get
			{
				if (_admCdeFeeGsCodeCurrencyId == null)
				{
				_admCdeFeeGsCodeCurrencyId = new TList<AdmCdeFee>();
				}
	
				return _admCdeFeeGsCodeCurrencyId;
			}
			set { _admCdeFeeGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeStudInstallmentCollection
		
		private TList<FeeStudInstallment> _feeStudInstallmentGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudInstallmentGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeStudInstallment> FeeStudInstallmentCollection
		{
			get
			{
				if (_feeStudInstallmentGsCodeCurrencyId == null)
				{
				_feeStudInstallmentGsCodeCurrencyId = new TList<FeeStudInstallment>();
				}
	
				return _feeStudInstallmentGsCodeCurrencyId;
			}
			set { _feeStudInstallmentGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeFacultyRuleCollection
		
		private TList<FeeFacultyRule> _feeFacultyRuleGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyRuleGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get
			{
				if (_feeFacultyRuleGsCodeCurrencyId == null)
				{
				_feeFacultyRuleGsCodeCurrencyId = new TList<FeeFacultyRule>();
				}
	
				return _feeFacultyRuleGsCodeCurrencyId;
			}
			set { _feeFacultyRuleGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeStudAllowanceCollection
		
		private TList<FeeStudAllowance> _feeStudAllowanceGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudAllowanceGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeStudAllowance> FeeStudAllowanceCollection
		{
			get
			{
				if (_feeStudAllowanceGsCodeCurrencyId == null)
				{
				_feeStudAllowanceGsCodeCurrencyId = new TList<FeeStudAllowance>();
				}
	
				return _feeStudAllowanceGsCodeCurrencyId;
			}
			set { _feeStudAllowanceGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeAllowanceRuleCollection
		
		private TList<FeeAllowanceRule> _feeAllowanceRuleGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeAllowanceRuleGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeAllowanceRule> FeeAllowanceRuleCollection
		{
			get
			{
				if (_feeAllowanceRuleGsCodeCurrencyId == null)
				{
				_feeAllowanceRuleGsCodeCurrencyId = new TList<FeeAllowanceRule>();
				}
	
				return _feeAllowanceRuleGsCodeCurrencyId;
			}
			set { _feeAllowanceRuleGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeRefndStdReqCollection
		
		private TList<FeeRefndStdReq> _feeRefndStdReqCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefndStdReqCurrencyId
		/// </summary>
		
		public TList<FeeRefndStdReq> FeeRefndStdReqCollection
		{
			get
			{
				if (_feeRefndStdReqCurrencyId == null)
				{
				_feeRefndStdReqCurrencyId = new TList<FeeRefndStdReq>();
				}
	
				return _feeRefndStdReqCurrencyId;
			}
			set { _feeRefndStdReqCurrencyId = value; }
		}
		
		#endregion

		#region FeeStudFeeItemCollection
		
		private TList<FeeStudFeeItem> _feeStudFeeItemGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudFeeItemGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get
			{
				if (_feeStudFeeItemGsCodeCurrencyId == null)
				{
				_feeStudFeeItemGsCodeCurrencyId = new TList<FeeStudFeeItem>();
				}
	
				return _feeStudFeeItemGsCodeCurrencyId;
			}
			set { _feeStudFeeItemGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeUserBondReqCollection
		
		private TList<FeeUserBondReq> _feeUserBondReqGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeUserBondReqGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeUserBondReq> FeeUserBondReqCollection
		{
			get
			{
				if (_feeUserBondReqGsCodeCurrencyId == null)
				{
				_feeUserBondReqGsCodeCurrencyId = new TList<FeeUserBondReq>();
				}
	
				return _feeUserBondReqGsCodeCurrencyId;
			}
			set { _feeUserBondReqGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region GsCountryNodeCollection
		
		private TList<GsCountryNode> _gsCountryNodeGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCountryNodeGsCodeCurrencyId
		/// </summary>
		
		public TList<GsCountryNode> GsCountryNodeCollection
		{
			get
			{
				if (_gsCountryNodeGsCodeCurrencyId == null)
				{
				_gsCountryNodeGsCodeCurrencyId = new TList<GsCountryNode>();
				}
	
				return _gsCountryNodeGsCodeCurrencyId;
			}
			set { _gsCountryNodeGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeStudVoucherCollection
		
		private TList<FeeStudVoucher> _feeStudVoucherGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeStudVoucher> FeeStudVoucherCollection
		{
			get
			{
				if (_feeStudVoucherGsCodeCurrencyId == null)
				{
				_feeStudVoucherGsCodeCurrencyId = new TList<FeeStudVoucher>();
				}
	
				return _feeStudVoucherGsCodeCurrencyId;
			}
			set { _feeStudVoucherGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region AdmAppFeesCollection
		
		private TList<AdmAppFees> _admAppFeesGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppFeesGsCodeCurrencyId
		/// </summary>
		
		public TList<AdmAppFees> AdmAppFeesCollection
		{
			get
			{
				if (_admAppFeesGsCodeCurrencyId == null)
				{
				_admAppFeesGsCodeCurrencyId = new TList<AdmAppFees>();
				}
	
				return _admAppFeesGsCodeCurrencyId;
			}
			set { _admAppFeesGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeSemesterAgendaCollection
		
		private TList<FeeSemesterAgenda> _feeSemesterAgendaGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeSemesterAgendaGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeSemesterAgenda> FeeSemesterAgendaCollection
		{
			get
			{
				if (_feeSemesterAgendaGsCodeCurrencyId == null)
				{
				_feeSemesterAgendaGsCodeCurrencyId = new TList<FeeSemesterAgenda>();
				}
	
				return _feeSemesterAgendaGsCodeCurrencyId;
			}
			set { _feeSemesterAgendaGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region SaTrainingCourseCollection
		
		private TList<SaTrainingCourse> _saTrainingCourseGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saTrainingCourseGsCodeCurrencyId
		/// </summary>
		
		public TList<SaTrainingCourse> SaTrainingCourseCollection
		{
			get
			{
				if (_saTrainingCourseGsCodeCurrencyId == null)
				{
				_saTrainingCourseGsCodeCurrencyId = new TList<SaTrainingCourse>();
				}
	
				return _saTrainingCourseGsCodeCurrencyId;
			}
			set { _saTrainingCourseGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region AccomStudReqCollection
		
		private TList<AccomStudReq> _accomStudReqGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accomStudReqGsCodeCurrencyId
		/// </summary>
		
		public TList<AccomStudReq> AccomStudReqCollection
		{
			get
			{
				if (_accomStudReqGsCodeCurrencyId == null)
				{
				_accomStudReqGsCodeCurrencyId = new TList<AccomStudReq>();
				}
	
				return _accomStudReqGsCodeCurrencyId;
			}
			set { _accomStudReqGsCodeCurrencyId = value; }
		}
		
		#endregion

		#region FeeAccomItemCollection
		
		private TList<FeeAccomItem> _feeAccomItemGsCodeCurrencyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeAccomItemGsCodeCurrencyId
		/// </summary>
		
		public TList<FeeAccomItem> FeeAccomItemCollection
		{
			get
			{
				if (_feeAccomItemGsCodeCurrencyId == null)
				{
				_feeAccomItemGsCodeCurrencyId = new TList<FeeAccomItem>();
				}
	
				return _feeAccomItemGsCodeCurrencyId;
			}
			set { _feeAccomItemGsCodeCurrencyId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsCodeCurrencyEntityData _tmp = new GsCodeCurrencyEntityData();
						
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.OriginalGsCodeCurrencyId = this.OriginalGsCodeCurrencyId;
			
			_tmp.CurrencyDescrAr = this.CurrencyDescrAr;
			_tmp.CurrencyDescrEn = this.CurrencyDescrEn;
			_tmp.CurrencyCode = this.CurrencyCode;
			_tmp.IsCurrencyLocal = this.IsCurrencyLocal;
			_tmp.FractionDescrAr = this.FractionDescrAr;
			_tmp.FractionDescrEn = this.FractionDescrEn;
			_tmp.FractionValue = this.FractionValue;
			_tmp.ExchangeRate = this.ExchangeRate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeInvoiceGsCodeCurrencyId != null)
				_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection); 
			if (this._feeUserFundReqGsCodeCurrencyId != null)
				_tmp.FeeUserFundReqCollection = (TList<FeeUserFundReq>) MakeCopyOf(this.FeeUserFundReqCollection); 
			if (this._spoSponsorOfferGsCodeCurrencyId != null)
				_tmp.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection); 
			if (this._feeCdeBankAccntGsCodeCurrencyId != null)
				_tmp.FeeCdeBankAccntCollection = (TList<FeeCdeBankAccnt>) MakeCopyOf(this.FeeCdeBankAccntCollection); 
			if (this._admCdeFeeGsCodeCurrencyId != null)
				_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection); 
			if (this._feeStudInstallmentGsCodeCurrencyId != null)
				_tmp.FeeStudInstallmentCollection = (TList<FeeStudInstallment>) MakeCopyOf(this.FeeStudInstallmentCollection); 
			if (this._feeFacultyRuleGsCodeCurrencyId != null)
				_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection); 
			if (this._feeStudAllowanceGsCodeCurrencyId != null)
				_tmp.FeeStudAllowanceCollection = (TList<FeeStudAllowance>) MakeCopyOf(this.FeeStudAllowanceCollection); 
			if (this._feeAllowanceRuleGsCodeCurrencyId != null)
				_tmp.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection); 
			if (this._feeRefndStdReqCurrencyId != null)
				_tmp.FeeRefndStdReqCollection = (TList<FeeRefndStdReq>) MakeCopyOf(this.FeeRefndStdReqCollection); 
			if (this._feeStudFeeItemGsCodeCurrencyId != null)
				_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection); 
			if (this._feeUserBondReqGsCodeCurrencyId != null)
				_tmp.FeeUserBondReqCollection = (TList<FeeUserBondReq>) MakeCopyOf(this.FeeUserBondReqCollection); 
			if (this._gsCountryNodeGsCodeCurrencyId != null)
				_tmp.GsCountryNodeCollection = (TList<GsCountryNode>) MakeCopyOf(this.GsCountryNodeCollection); 
			if (this._feeStudVoucherGsCodeCurrencyId != null)
				_tmp.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection); 
			if (this._admAppFeesGsCodeCurrencyId != null)
				_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection); 
			if (this._feeSemesterAgendaGsCodeCurrencyId != null)
				_tmp.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection); 
			if (this._saTrainingCourseGsCodeCurrencyId != null)
				_tmp.SaTrainingCourseCollection = (TList<SaTrainingCourse>) MakeCopyOf(this.SaTrainingCourseCollection); 
			if (this._accomStudReqGsCodeCurrencyId != null)
				_tmp.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection); 
			if (this._feeAccomItemGsCodeCurrencyId != null)
				_tmp.FeeAccomItemCollection = (TList<FeeAccomItem>) MakeCopyOf(this.FeeAccomItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsCodeCurrencyEntityData _tmp = new GsCodeCurrencyEntityData();
						
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.OriginalGsCodeCurrencyId = this.OriginalGsCodeCurrencyId;
			
			_tmp.CurrencyDescrAr = this.CurrencyDescrAr;
			_tmp.CurrencyDescrEn = this.CurrencyDescrEn;
			_tmp.CurrencyCode = this.CurrencyCode;
			_tmp.IsCurrencyLocal = this.IsCurrencyLocal;
			_tmp.FractionDescrAr = this.FractionDescrAr;
			_tmp.FractionDescrEn = this.FractionDescrEn;
			_tmp.FractionValue = this.FractionValue;
			_tmp.ExchangeRate = this.ExchangeRate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			_tmp.FeeUserFundReqCollection = (TList<FeeUserFundReq>) MakeCopyOf(this.FeeUserFundReqCollection, existingCopies); 
			_tmp.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection, existingCopies); 
			_tmp.FeeCdeBankAccntCollection = (TList<FeeCdeBankAccnt>) MakeCopyOf(this.FeeCdeBankAccntCollection, existingCopies); 
			_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			_tmp.FeeStudInstallmentCollection = (TList<FeeStudInstallment>) MakeCopyOf(this.FeeStudInstallmentCollection, existingCopies); 
			_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			_tmp.FeeStudAllowanceCollection = (TList<FeeStudAllowance>) MakeCopyOf(this.FeeStudAllowanceCollection, existingCopies); 
			_tmp.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection, existingCopies); 
			_tmp.FeeRefndStdReqCollection = (TList<FeeRefndStdReq>) MakeCopyOf(this.FeeRefndStdReqCollection, existingCopies); 
			_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			_tmp.FeeUserBondReqCollection = (TList<FeeUserBondReq>) MakeCopyOf(this.FeeUserBondReqCollection, existingCopies); 
			_tmp.GsCountryNodeCollection = (TList<GsCountryNode>) MakeCopyOf(this.GsCountryNodeCollection, existingCopies); 
			_tmp.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection, existingCopies); 
			_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			_tmp.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection, existingCopies); 
			_tmp.SaTrainingCourseCollection = (TList<SaTrainingCourse>) MakeCopyOf(this.SaTrainingCourseCollection, existingCopies); 
			_tmp.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection, existingCopies); 
			_tmp.FeeAccomItemCollection = (TList<FeeAccomItem>) MakeCopyOf(this.FeeAccomItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeCurrencyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsCodeCurrencyColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeCurrencyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsCodeCurrencyColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeCurrencyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsCodeCurrencyColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsCodeCurrencyEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsCodeCurrencyEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCodeCurrencyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsCodeCurrencyColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsCodeCurrencyEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsCodeCurrencyEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsCodeCurrencyEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsCodeCurrency"/> object.
	/// </remarks>
	public class GsCodeCurrencyEventArgs : System.EventArgs
	{
		private GsCodeCurrencyColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsCodeCurrencyEventArgs class.
		///</summary>
		public GsCodeCurrencyEventArgs(GsCodeCurrencyColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsCodeCurrencyEventArgs class.
		///</summary>
		public GsCodeCurrencyEventArgs(GsCodeCurrencyColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsCodeCurrencyColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsCodeCurrencyColumn" />
		public GsCodeCurrencyColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsCodeCurrency related events.
	///</summary>
	public delegate void GsCodeCurrencyEventHandler(object sender, GsCodeCurrencyEventArgs e);
	
	#region GsCodeCurrencyComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsCodeCurrencyComparer : System.Collections.Generic.IComparer<GsCodeCurrency>
	{
		GsCodeCurrencyColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsCodeCurrencyComparer"/> class.
        /// </summary>
		public GsCodeCurrencyComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsCodeCurrencyComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsCodeCurrencyComparer(GsCodeCurrencyColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsCodeCurrency"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsCodeCurrency"/> to compare.</param>
        /// <param name="b">The second <c>GsCodeCurrency</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsCodeCurrency a, GsCodeCurrency b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsCodeCurrency entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsCodeCurrency a, GsCodeCurrency b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsCodeCurrencyColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsCodeCurrencyKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsCodeCurrency"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsCodeCurrencyKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyKey class.
		/// </summary>
		public GsCodeCurrencyKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyKey class.
		/// </summary>
		public GsCodeCurrencyKey(GsCodeCurrencyBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsCodeCurrencyId = entity.GsCodeCurrencyId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCodeCurrencyKey class.
		/// </summary>
		public GsCodeCurrencyKey(System.Decimal _gsCodeCurrencyId)
		{
			#region Init Properties

			this.GsCodeCurrencyId = _gsCodeCurrencyId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsCodeCurrencyBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsCodeCurrencyBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsCodeCurrencyId property
		private System.Decimal _gsCodeCurrencyId;
		
		/// <summary>
		/// Gets or sets the GsCodeCurrencyId property.
		/// </summary>
		public System.Decimal GsCodeCurrencyId
		{
			get { return _gsCodeCurrencyId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsCodeCurrencyId = value;
				
				_gsCodeCurrencyId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsCodeCurrencyId = ( values["GsCodeCurrencyId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsCodeCurrencyId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsCodeCurrencyId", GsCodeCurrencyId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsCodeCurrencyId: {0}{1}",
								GsCodeCurrencyId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsCodeCurrencyColumn Enum
	
	/// <summary>
	/// Enumerate the GsCodeCurrency columns.
	/// </summary>
	[Serializable]
	public enum GsCodeCurrencyColumn : int
	{
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsCodeCurrencyId = 1,
		/// <summary>
		/// CurrencyDescrAr : 
		/// </summary>
		[EnumTextValue("CURRENCY_DESCR_AR")]
		[ColumnEnum("CURRENCY_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 70)]
		CurrencyDescrAr = 2,
		/// <summary>
		/// CurrencyDescrEn : 
		/// </summary>
		[EnumTextValue("CURRENCY_DESCR_EN")]
		[ColumnEnum("CURRENCY_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 70)]
		CurrencyDescrEn = 3,
		/// <summary>
		/// CurrencyCode : 
		/// </summary>
		[EnumTextValue("CURRENCY_CODE")]
		[ColumnEnum("CURRENCY_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		CurrencyCode = 4,
		/// <summary>
		/// IsCurrencyLocal : 
		/// </summary>
		[EnumTextValue("IS_CURRENCY_LOCAL")]
		[ColumnEnum("IS_CURRENCY_LOCAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsCurrencyLocal = 5,
		/// <summary>
		/// FractionDescrAr : 
		/// </summary>
		[EnumTextValue("FRACTION_DESCR_AR")]
		[ColumnEnum("FRACTION_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 70)]
		FractionDescrAr = 6,
		/// <summary>
		/// FractionDescrEn : 
		/// </summary>
		[EnumTextValue("FRACTION_DESCR_EN")]
		[ColumnEnum("FRACTION_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 70)]
		FractionDescrEn = 7,
		/// <summary>
		/// FractionValue : 
		/// </summary>
		[EnumTextValue("FRACTION_VALUE")]
		[ColumnEnum("FRACTION_VALUE", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FractionValue = 8,
		/// <summary>
		/// ExchangeRate : سعر تغيير العملة
		/// </summary>
		[EnumTextValue("EXCHANGE_RATE")]
		[ColumnEnum("EXCHANGE_RATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExchangeRate = 9
	}//End enum

	#endregion GsCodeCurrencyColumn Enum

} // end namespace
