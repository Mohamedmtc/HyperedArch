
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SpoSponsor.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SPO_SPONSOR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SpoSponsorBase : EntityBase, ISpoSponsor, IEntityId<SpoSponsorKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SpoSponsorEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SpoSponsorEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SpoSponsorEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SpoSponsor> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpoSponsorEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpoSponsorEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SpoSponsorBase"/> instance.
		///</summary>
		public SpoSponsorBase()
		{
			this.entityData = new SpoSponsorEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SpoSponsorBase"/> instance.
		///</summary>
		///<param name="_spoSponsorId"></param>
		///<param name="_spoCode"></param>
		///<param name="_spoAccountCode"></param>
		///<param name="_nameAr"></param>
		///<param name="_nameEn"></param>
		///<param name="_address"></param>
		///<param name="_spoSponserTypeId"></param>
		///<param name="_coverRepeatedCoursesFlag"></param>
		///<param name="_officeTel"></param>
		///<param name="_mobile"></param>
		///<param name="_email"></param>
		///<param name="_website"></param>
		///<param name="_unvSponsorFlag">XXX not used ,use ENUM_ID instead</param>
		///<param name="_feeSponsorFlag">XXXX</param>
		///<param name="_isActive"></param>
		///<param name="_spoFeeBalance"></param>
		///<param name="_enumId">Constant ENUM ID usd in code /sp</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public SpoSponsorBase(System.Decimal _spoSponsorId, System.String _spoCode, System.String _spoAccountCode, 
			System.String _nameAr, System.String _nameEn, System.String _address, System.Decimal? _spoSponserTypeId, 
			System.Decimal? _coverRepeatedCoursesFlag, System.String _officeTel, System.String _mobile, 
			System.String _email, System.String _website, System.Decimal? _unvSponsorFlag, System.Decimal? _feeSponsorFlag, 
			System.Boolean? _isActive, System.Decimal? _spoFeeBalance, System.Int32? _enumId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new SpoSponsorEntityData();
			this.backupData = null;

			this.SpoSponsorId = _spoSponsorId;
			this.SpoCode = _spoCode;
			this.SpoAccountCode = _spoAccountCode;
			this.NameAr = _nameAr;
			this.NameEn = _nameEn;
			this.Address = _address;
			this.SpoSponserTypeId = _spoSponserTypeId;
			this.CoverRepeatedCoursesFlag = _coverRepeatedCoursesFlag;
			this.OfficeTel = _officeTel;
			this.Mobile = _mobile;
			this.Email = _email;
			this.Website = _website;
			this.UnvSponsorFlag = _unvSponsorFlag;
			this.FeeSponsorFlag = _feeSponsorFlag;
			this.IsActive = _isActive;
			this.SpoFeeBalance = _spoFeeBalance;
			this.EnumId = _enumId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SpoSponsor"/> instance.
		///</summary>
		///<param name="_spoSponsorId"></param>
		///<param name="_spoCode"></param>
		///<param name="_spoAccountCode"></param>
		///<param name="_nameAr"></param>
		///<param name="_nameEn"></param>
		///<param name="_address"></param>
		///<param name="_spoSponserTypeId"></param>
		///<param name="_coverRepeatedCoursesFlag"></param>
		///<param name="_officeTel"></param>
		///<param name="_mobile"></param>
		///<param name="_email"></param>
		///<param name="_website"></param>
		///<param name="_unvSponsorFlag">XXX not used ,use ENUM_ID instead</param>
		///<param name="_feeSponsorFlag">XXXX</param>
		///<param name="_isActive"></param>
		///<param name="_spoFeeBalance"></param>
		///<param name="_enumId">Constant ENUM ID usd in code /sp</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static SpoSponsor CreateSpoSponsor(System.Decimal _spoSponsorId, System.String _spoCode, System.String _spoAccountCode, 
			System.String _nameAr, System.String _nameEn, System.String _address, System.Decimal? _spoSponserTypeId, 
			System.Decimal? _coverRepeatedCoursesFlag, System.String _officeTel, System.String _mobile, 
			System.String _email, System.String _website, System.Decimal? _unvSponsorFlag, System.Decimal? _feeSponsorFlag, 
			System.Boolean? _isActive, System.Decimal? _spoFeeBalance, System.Int32? _enumId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			SpoSponsor newSpoSponsor = new SpoSponsor();
			newSpoSponsor.SpoSponsorId = _spoSponsorId;
			newSpoSponsor.SpoCode = _spoCode;
			newSpoSponsor.SpoAccountCode = _spoAccountCode;
			newSpoSponsor.NameAr = _nameAr;
			newSpoSponsor.NameEn = _nameEn;
			newSpoSponsor.Address = _address;
			newSpoSponsor.SpoSponserTypeId = _spoSponserTypeId;
			newSpoSponsor.CoverRepeatedCoursesFlag = _coverRepeatedCoursesFlag;
			newSpoSponsor.OfficeTel = _officeTel;
			newSpoSponsor.Mobile = _mobile;
			newSpoSponsor.Email = _email;
			newSpoSponsor.Website = _website;
			newSpoSponsor.UnvSponsorFlag = _unvSponsorFlag;
			newSpoSponsor.FeeSponsorFlag = _feeSponsorFlag;
			newSpoSponsor.IsActive = _isActive;
			newSpoSponsor.SpoFeeBalance = _spoFeeBalance;
			newSpoSponsor.EnumId = _enumId;
			newSpoSponsor.SeUserId = _seUserId;
			newSpoSponsor.LastDate = _lastDate;
			return newSpoSponsor;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SpoSponsorId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SpoSponsorId
		{
			get
			{
				return this.entityData.SpoSponsorId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorId == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				this.entityData.SpoSponsorId = value;
				this.EntityId.SpoSponsorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				OnPropertyChanged("SpoSponsorId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SPO_SPONSOR_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SPO_SPONSOR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSpoSponsorId
		{
			get { return this.entityData.OriginalSpoSponsorId; }
			set { this.entityData.OriginalSpoSponsorId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SpoCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SpoCode
		{
			get
			{
				return this.entityData.SpoCode; 
			}
			
			set
			{
				if (this.entityData.SpoCode == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.SpoCode, this.entityData.SpoCode);
				this.entityData.SpoCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.SpoCode, this.entityData.SpoCode);
				OnPropertyChanged("SpoCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoAccountCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SpoAccountCode
		{
			get
			{
				return this.entityData.SpoAccountCode; 
			}
			
			set
			{
				if (this.entityData.SpoAccountCode == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.SpoAccountCode, this.entityData.SpoAccountCode);
				this.entityData.SpoAccountCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.SpoAccountCode, this.entityData.SpoAccountCode);
				OnPropertyChanged("SpoAccountCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String NameAr
		{
			get
			{
				return this.entityData.NameAr; 
			}
			
			set
			{
				if (this.entityData.NameAr == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.NameAr, this.entityData.NameAr);
				this.entityData.NameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.NameAr, this.entityData.NameAr);
				OnPropertyChanged("NameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String NameEn
		{
			get
			{
				return this.entityData.NameEn; 
			}
			
			set
			{
				if (this.entityData.NameEn == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.NameEn, this.entityData.NameEn);
				this.entityData.NameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.NameEn, this.entityData.NameEn);
				OnPropertyChanged("NameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoSponserTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoSponserTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoSponserTypeId
		{
			get
			{
				return this.entityData.SpoSponserTypeId; 
			}
			
			set
			{
				if (this.entityData.SpoSponserTypeId == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.SpoSponserTypeId, this.entityData.SpoSponserTypeId);
				this.entityData.SpoSponserTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.SpoSponserTypeId, this.entityData.SpoSponserTypeId);
				OnPropertyChanged("SpoSponserTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoverRepeatedCoursesFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoverRepeatedCoursesFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoverRepeatedCoursesFlag
		{
			get
			{
				return this.entityData.CoverRepeatedCoursesFlag; 
			}
			
			set
			{
				if (this.entityData.CoverRepeatedCoursesFlag == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.CoverRepeatedCoursesFlag, this.entityData.CoverRepeatedCoursesFlag);
				this.entityData.CoverRepeatedCoursesFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.CoverRepeatedCoursesFlag, this.entityData.CoverRepeatedCoursesFlag);
				OnPropertyChanged("CoverRepeatedCoursesFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OfficeTel property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String OfficeTel
		{
			get
			{
				return this.entityData.OfficeTel; 
			}
			
			set
			{
				if (this.entityData.OfficeTel == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.OfficeTel, this.entityData.OfficeTel);
				this.entityData.OfficeTel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.OfficeTel, this.entityData.OfficeTel);
				OnPropertyChanged("OfficeTel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mobile property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Mobile
		{
			get
			{
				return this.entityData.Mobile; 
			}
			
			set
			{
				if (this.entityData.Mobile == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.Mobile, this.entityData.Mobile);
				this.entityData.Mobile = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.Mobile, this.entityData.Mobile);
				OnPropertyChanged("Mobile");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Website property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Website
		{
			get
			{
				return this.entityData.Website; 
			}
			
			set
			{
				if (this.entityData.Website == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.Website, this.entityData.Website);
				this.entityData.Website = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.Website, this.entityData.Website);
				OnPropertyChanged("Website");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnvSponsorFlag property. 
		///		XXX not used ,use ENUM_ID instead
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsUnvSponsorFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX not used ,use ENUM_ID instead"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? UnvSponsorFlag
		{
			get
			{
				return this.entityData.UnvSponsorFlag; 
			}
			
			set
			{
				if (this.entityData.UnvSponsorFlag == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.UnvSponsorFlag, this.entityData.UnvSponsorFlag);
				this.entityData.UnvSponsorFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.UnvSponsorFlag, this.entityData.UnvSponsorFlag);
				OnPropertyChanged("UnvSponsorFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeSponsorFlag property. 
		///		XXXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeSponsorFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeSponsorFlag
		{
			get
			{
				return this.entityData.FeeSponsorFlag; 
			}
			
			set
			{
				if (this.entityData.FeeSponsorFlag == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.FeeSponsorFlag, this.entityData.FeeSponsorFlag);
				this.entityData.FeeSponsorFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.FeeSponsorFlag, this.entityData.FeeSponsorFlag);
				OnPropertyChanged("FeeSponsorFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoFeeBalance property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoFeeBalanceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoFeeBalance
		{
			get
			{
				return this.entityData.SpoFeeBalance; 
			}
			
			set
			{
				if (this.entityData.SpoFeeBalance == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.SpoFeeBalance, this.entityData.SpoFeeBalance);
				this.entityData.SpoFeeBalance = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.SpoFeeBalance, this.entityData.SpoFeeBalance);
				OnPropertyChanged("SpoFeeBalance");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnumId property. 
		///		Constant ENUM ID usd in code /sp
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEnumIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Constant ENUM ID usd in code /sp"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EnumId
		{
			get
			{
				return this.entityData.EnumId; 
			}
			
			set
			{
				if (this.entityData.EnumId == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.EnumId, this.entityData.EnumId);
				this.entityData.EnumId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.EnumId, this.entityData.EnumId);
				OnPropertyChanged("EnumId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SpoSponsorColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsorType"/>.
		/// </summary>
		/// <value>The source SpoSponsorType for SpoSponserTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SpoSponsorType SpoSponserTypeIdSource
      	{
            get { return entityData.SpoSponserTypeIdSource; }
            set { entityData.SpoSponserTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeInvoice objects
		///	which are related to this object through the relation FK_FEE_INVOICE_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInvoice> FeeInvoiceCollection
		{
			get { return entityData.FeeInvoiceCollection; }
			set { entityData.FeeInvoiceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoResponsiblePerson objects
		///	which are related to this object through the relation FK_SPO_RESPONSIBLE_PERSON_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoResponsiblePerson> SpoResponsiblePersonCollection
		{
			get { return entityData.SpoResponsiblePersonCollection; }
			set { entityData.SpoResponsiblePersonCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyRule objects
		///	which are related to this object through the relation FK_FEE_FACULTY_RULE_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get { return entityData.FeeFacultyRuleCollection; }
			set { entityData.FeeFacultyRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudVoucher objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucher> FeeStudVoucherCollection
		{
			get { return entityData.FeeStudVoucherCollection; }
			set { entityData.FeeStudVoucherCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDisc objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDisc> FeeStudDiscCollection
		{
			get { return entityData.FeeStudDiscCollection; }
			set { entityData.FeeStudDiscCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoSponsorOffer objects
		///	which are related to this object through the relation FK_SPO_SPONSOR_OFFER_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoSponsorOffer> SpoSponsorOfferCollection
		{
			get { return entityData.SpoSponsorOfferCollection; }
			set { entityData.SpoSponsorOfferCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppRegHistory objects
		///	which are related to this object through the relation FK_ADM_APP_REG_HISTORY_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get { return entityData.AdmAppRegHistoryCollection; }
			set { entityData.AdmAppRegHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoDepartment objects
		///	which are related to this object through the relation FK_SPO_Department_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoDepartment> SpoDepartmentCollection
		{
			get { return entityData.SpoDepartmentCollection; }
			set { entityData.SpoDepartmentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoContact objects
		///	which are related to this object through the relation FK_SPO_CONTACT_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoContact> SpoContactCollection
		{
			get { return entityData.SpoContactCollection; }
			set { entityData.SpoContactCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmScholorship objects
		///	which are related to this object through the relation FK_ADM_SCHOLORSHIP_SPO_SPONSOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmScholorship> AdmScholorshipCollection
		{
			get { return entityData.AdmScholorshipCollection; }
			set { entityData.AdmScholorshipCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SpoCode", "Spo Code", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SpoAccountCode", "Spo Account Code", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NameAr", "Name Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NameEn", "Name En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OfficeTel", "Office Tel", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Mobile", "Mobile", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Website", "Website", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SPO_SPONSOR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SPO_SPONSOR_ID", "SPO_Code", "SPO_ACCOUNT_CODE", "NAME_AR", "NAME_EN", "ADDRESS", "SPO_SPONSER_TYPE_ID", "COVER_REPEATED_COURSES_FLAG", "OFFICE_TEL", "MOBILE", "EMAIL", "WEBSITE", "UNV_SPONSOR_FLAG", "FEE_SPONSOR_FLAG", "IS_ACTIVE", "SPO_FEE_BALANCE", "ENUM_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SpoSponsorEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SpoSponsor) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SpoSponsor>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SpoSponsor);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SpoSponsor Entity 
		///</summary>
		protected virtual SpoSponsor Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SpoSponsor copy = new SpoSponsor();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SpoSponsorId = this.SpoSponsorId;
					copy.OriginalSpoSponsorId = this.OriginalSpoSponsorId;
				copy.SpoCode = this.SpoCode;
				copy.SpoAccountCode = this.SpoAccountCode;
				copy.NameAr = this.NameAr;
				copy.NameEn = this.NameEn;
				copy.Address = this.Address;
				copy.SpoSponserTypeId = this.SpoSponserTypeId;
				copy.CoverRepeatedCoursesFlag = this.CoverRepeatedCoursesFlag;
				copy.OfficeTel = this.OfficeTel;
				copy.Mobile = this.Mobile;
				copy.Email = this.Email;
				copy.Website = this.Website;
				copy.UnvSponsorFlag = this.UnvSponsorFlag;
				copy.FeeSponsorFlag = this.FeeSponsorFlag;
				copy.IsActive = this.IsActive;
				copy.SpoFeeBalance = this.SpoFeeBalance;
				copy.EnumId = this.EnumId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.SpoSponserTypeIdSource != null && existingCopies.Contains(this.SpoSponserTypeIdSource))
				copy.SpoSponserTypeIdSource = existingCopies[this.SpoSponserTypeIdSource] as SpoSponsorType;
			else
				copy.SpoSponserTypeIdSource = MakeCopyOf(this.SpoSponserTypeIdSource, existingCopies) as SpoSponsorType;
		
			//deep copy nested objects
			copy.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			copy.SpoResponsiblePersonCollection = (TList<SpoResponsiblePerson>) MakeCopyOf(this.SpoResponsiblePersonCollection, existingCopies); 
			copy.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			copy.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection, existingCopies); 
			copy.FeeStudDiscCollection = (TList<FeeStudDisc>) MakeCopyOf(this.FeeStudDiscCollection, existingCopies); 
			copy.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection, existingCopies); 
			copy.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			copy.SpoDepartmentCollection = (TList<SpoDepartment>) MakeCopyOf(this.SpoDepartmentCollection, existingCopies); 
			copy.SpoContactCollection = (TList<SpoContact>) MakeCopyOf(this.SpoContactCollection, existingCopies); 
			copy.AdmScholorshipCollection = (TList<AdmScholorship>) MakeCopyOf(this.AdmScholorshipCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SpoSponsor Entity 
		///</summary>
		public virtual SpoSponsor Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SpoSponsor Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SpoSponsor DeepCopy()
		{
			return EntityHelper.Clone<SpoSponsor>(this as SpoSponsor);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SpoSponsorEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SpoSponsorEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SpoSponsorEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SpoSponsorColumn column)
		{
			switch(column)
			{
					case SpoSponsorColumn.SpoSponsorId:
					return entityData.SpoSponsorId != _originalData.SpoSponsorId;
					case SpoSponsorColumn.SpoCode:
					return entityData.SpoCode != _originalData.SpoCode;
					case SpoSponsorColumn.SpoAccountCode:
					return entityData.SpoAccountCode != _originalData.SpoAccountCode;
					case SpoSponsorColumn.NameAr:
					return entityData.NameAr != _originalData.NameAr;
					case SpoSponsorColumn.NameEn:
					return entityData.NameEn != _originalData.NameEn;
					case SpoSponsorColumn.Address:
					return entityData.Address != _originalData.Address;
					case SpoSponsorColumn.SpoSponserTypeId:
					return entityData.SpoSponserTypeId != _originalData.SpoSponserTypeId;
					case SpoSponsorColumn.CoverRepeatedCoursesFlag:
					return entityData.CoverRepeatedCoursesFlag != _originalData.CoverRepeatedCoursesFlag;
					case SpoSponsorColumn.OfficeTel:
					return entityData.OfficeTel != _originalData.OfficeTel;
					case SpoSponsorColumn.Mobile:
					return entityData.Mobile != _originalData.Mobile;
					case SpoSponsorColumn.Email:
					return entityData.Email != _originalData.Email;
					case SpoSponsorColumn.Website:
					return entityData.Website != _originalData.Website;
					case SpoSponsorColumn.UnvSponsorFlag:
					return entityData.UnvSponsorFlag != _originalData.UnvSponsorFlag;
					case SpoSponsorColumn.FeeSponsorFlag:
					return entityData.FeeSponsorFlag != _originalData.FeeSponsorFlag;
					case SpoSponsorColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case SpoSponsorColumn.SpoFeeBalance:
					return entityData.SpoFeeBalance != _originalData.SpoFeeBalance;
					case SpoSponsorColumn.EnumId:
					return entityData.EnumId != _originalData.EnumId;
					case SpoSponsorColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SpoSponsorColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SpoSponsorColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SpoSponsorId != _originalData.SpoSponsorId;
			result = result || entityData.SpoCode != _originalData.SpoCode;
			result = result || entityData.SpoAccountCode != _originalData.SpoAccountCode;
			result = result || entityData.NameAr != _originalData.NameAr;
			result = result || entityData.NameEn != _originalData.NameEn;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.SpoSponserTypeId != _originalData.SpoSponserTypeId;
			result = result || entityData.CoverRepeatedCoursesFlag != _originalData.CoverRepeatedCoursesFlag;
			result = result || entityData.OfficeTel != _originalData.OfficeTel;
			result = result || entityData.Mobile != _originalData.Mobile;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Website != _originalData.Website;
			result = result || entityData.UnvSponsorFlag != _originalData.UnvSponsorFlag;
			result = result || entityData.FeeSponsorFlag != _originalData.FeeSponsorFlag;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.SpoFeeBalance != _originalData.SpoFeeBalance;
			result = result || entityData.EnumId != _originalData.EnumId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a SpoSponsor Entity with the original data.
		///</summary>
		public SpoSponsor GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSpoSponsor(
				_originalData.SpoSponsorId,
				_originalData.SpoCode,
				_originalData.SpoAccountCode,
				_originalData.NameAr,
				_originalData.NameEn,
				_originalData.Address,
				_originalData.SpoSponserTypeId,
				_originalData.CoverRepeatedCoursesFlag,
				_originalData.OfficeTel,
				_originalData.Mobile,
				_originalData.Email,
				_originalData.Website,
				_originalData.UnvSponsorFlag,
				_originalData.FeeSponsorFlag,
				_originalData.IsActive,
				_originalData.SpoFeeBalance,
				_originalData.EnumId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (SpoSponsor)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SpoSponsorBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SpoSponsorBase)
				return ValueEquals(this, (SpoSponsorBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SpoSponsorBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SpoSponsorId.GetHashCode() ^ 
					((this.SpoCode == null) ? string.Empty : this.SpoCode.ToString()).GetHashCode() ^ 
					((this.SpoAccountCode == null) ? string.Empty : this.SpoAccountCode.ToString()).GetHashCode() ^ 
					((this.NameAr == null) ? string.Empty : this.NameAr.ToString()).GetHashCode() ^ 
					((this.NameEn == null) ? string.Empty : this.NameEn.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.SpoSponserTypeId == null) ? string.Empty : this.SpoSponserTypeId.ToString()).GetHashCode() ^ 
					((this.CoverRepeatedCoursesFlag == null) ? string.Empty : this.CoverRepeatedCoursesFlag.ToString()).GetHashCode() ^ 
					((this.OfficeTel == null) ? string.Empty : this.OfficeTel.ToString()).GetHashCode() ^ 
					((this.Mobile == null) ? string.Empty : this.Mobile.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Website == null) ? string.Empty : this.Website.ToString()).GetHashCode() ^ 
					((this.UnvSponsorFlag == null) ? string.Empty : this.UnvSponsorFlag.ToString()).GetHashCode() ^ 
					((this.FeeSponsorFlag == null) ? string.Empty : this.FeeSponsorFlag.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.SpoFeeBalance == null) ? string.Empty : this.SpoFeeBalance.ToString()).GetHashCode() ^ 
					((this.EnumId == null) ? string.Empty : this.EnumId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SpoSponsorBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SpoSponsorBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SpoSponsorBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SpoSponsorBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SpoSponsorBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SpoSponsorBase Object1, SpoSponsorBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SpoSponsorId != Object2.SpoSponsorId)
				equal = false;
			if ( Object1.SpoCode != null && Object2.SpoCode != null )
			{
				if (Object1.SpoCode != Object2.SpoCode)
					equal = false;
			}
			else if (Object1.SpoCode == null ^ Object2.SpoCode == null )
			{
				equal = false;
			}
			if ( Object1.SpoAccountCode != null && Object2.SpoAccountCode != null )
			{
				if (Object1.SpoAccountCode != Object2.SpoAccountCode)
					equal = false;
			}
			else if (Object1.SpoAccountCode == null ^ Object2.SpoAccountCode == null )
			{
				equal = false;
			}
			if ( Object1.NameAr != null && Object2.NameAr != null )
			{
				if (Object1.NameAr != Object2.NameAr)
					equal = false;
			}
			else if (Object1.NameAr == null ^ Object2.NameAr == null )
			{
				equal = false;
			}
			if ( Object1.NameEn != null && Object2.NameEn != null )
			{
				if (Object1.NameEn != Object2.NameEn)
					equal = false;
			}
			else if (Object1.NameEn == null ^ Object2.NameEn == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.SpoSponserTypeId != null && Object2.SpoSponserTypeId != null )
			{
				if (Object1.SpoSponserTypeId != Object2.SpoSponserTypeId)
					equal = false;
			}
			else if (Object1.SpoSponserTypeId == null ^ Object2.SpoSponserTypeId == null )
			{
				equal = false;
			}
			if ( Object1.CoverRepeatedCoursesFlag != null && Object2.CoverRepeatedCoursesFlag != null )
			{
				if (Object1.CoverRepeatedCoursesFlag != Object2.CoverRepeatedCoursesFlag)
					equal = false;
			}
			else if (Object1.CoverRepeatedCoursesFlag == null ^ Object2.CoverRepeatedCoursesFlag == null )
			{
				equal = false;
			}
			if ( Object1.OfficeTel != null && Object2.OfficeTel != null )
			{
				if (Object1.OfficeTel != Object2.OfficeTel)
					equal = false;
			}
			else if (Object1.OfficeTel == null ^ Object2.OfficeTel == null )
			{
				equal = false;
			}
			if ( Object1.Mobile != null && Object2.Mobile != null )
			{
				if (Object1.Mobile != Object2.Mobile)
					equal = false;
			}
			else if (Object1.Mobile == null ^ Object2.Mobile == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Website != null && Object2.Website != null )
			{
				if (Object1.Website != Object2.Website)
					equal = false;
			}
			else if (Object1.Website == null ^ Object2.Website == null )
			{
				equal = false;
			}
			if ( Object1.UnvSponsorFlag != null && Object2.UnvSponsorFlag != null )
			{
				if (Object1.UnvSponsorFlag != Object2.UnvSponsorFlag)
					equal = false;
			}
			else if (Object1.UnvSponsorFlag == null ^ Object2.UnvSponsorFlag == null )
			{
				equal = false;
			}
			if ( Object1.FeeSponsorFlag != null && Object2.FeeSponsorFlag != null )
			{
				if (Object1.FeeSponsorFlag != Object2.FeeSponsorFlag)
					equal = false;
			}
			else if (Object1.FeeSponsorFlag == null ^ Object2.FeeSponsorFlag == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.SpoFeeBalance != null && Object2.SpoFeeBalance != null )
			{
				if (Object1.SpoFeeBalance != Object2.SpoFeeBalance)
					equal = false;
			}
			else if (Object1.SpoFeeBalance == null ^ Object2.SpoFeeBalance == null )
			{
				equal = false;
			}
			if ( Object1.EnumId != null && Object2.EnumId != null )
			{
				if (Object1.EnumId != Object2.EnumId)
					equal = false;
			}
			else if (Object1.EnumId == null ^ Object2.EnumId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SpoSponsorBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SpoSponsorComparer GetComparer()
        {
            return new SpoSponsorComparer();
        }
        */

        // Comparer delegates back to SpoSponsor
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SpoSponsor rhs, SpoSponsorColumn which)
        {
            switch (which)
            {
            	
            	
            	case SpoSponsorColumn.SpoSponsorId:
            		return this.SpoSponsorId.CompareTo(rhs.SpoSponsorId);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.SpoCode:
            		return this.SpoCode.CompareTo(rhs.SpoCode);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.SpoAccountCode:
            		return this.SpoAccountCode.CompareTo(rhs.SpoAccountCode);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.NameAr:
            		return this.NameAr.CompareTo(rhs.NameAr);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.NameEn:
            		return this.NameEn.CompareTo(rhs.NameEn);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.SpoSponserTypeId:
            		return this.SpoSponserTypeId.Value.CompareTo(rhs.SpoSponserTypeId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.CoverRepeatedCoursesFlag:
            		return this.CoverRepeatedCoursesFlag.Value.CompareTo(rhs.CoverRepeatedCoursesFlag.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.OfficeTel:
            		return this.OfficeTel.CompareTo(rhs.OfficeTel);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.Mobile:
            		return this.Mobile.CompareTo(rhs.Mobile);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.Website:
            		return this.Website.CompareTo(rhs.Website);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.UnvSponsorFlag:
            		return this.UnvSponsorFlag.Value.CompareTo(rhs.UnvSponsorFlag.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.FeeSponsorFlag:
            		return this.FeeSponsorFlag.Value.CompareTo(rhs.FeeSponsorFlag.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.SpoFeeBalance:
            		return this.SpoFeeBalance.Value.CompareTo(rhs.SpoFeeBalance.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.EnumId:
            		return this.EnumId.Value.CompareTo(rhs.EnumId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SpoSponsorKey> Members
		
		// member variable for the EntityId property
		private SpoSponsorKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SpoSponsorKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SpoSponsorKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SpoSponsor")
					.Append("|").Append( this.SpoSponsorId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- SpoSponsorId: {0}{19}- SpoCode: {1}{19}- SpoAccountCode: {2}{19}- NameAr: {3}{19}- NameEn: {4}{19}- Address: {5}{19}- SpoSponserTypeId: {6}{19}- CoverRepeatedCoursesFlag: {7}{19}- OfficeTel: {8}{19}- Mobile: {9}{19}- Email: {10}{19}- Website: {11}{19}- UnvSponsorFlag: {12}{19}- FeeSponsorFlag: {13}{19}- IsActive: {14}{19}- SpoFeeBalance: {15}{19}- EnumId: {16}{19}- SeUserId: {17}{19}- LastDate: {18}{19}{21}", 
				this.SpoSponsorId,
				(this.SpoCode == null) ? string.Empty : this.SpoCode.ToString(),
				(this.SpoAccountCode == null) ? string.Empty : this.SpoAccountCode.ToString(),
				(this.NameAr == null) ? string.Empty : this.NameAr.ToString(),
				(this.NameEn == null) ? string.Empty : this.NameEn.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.SpoSponserTypeId == null) ? string.Empty : this.SpoSponserTypeId.ToString(),
				(this.CoverRepeatedCoursesFlag == null) ? string.Empty : this.CoverRepeatedCoursesFlag.ToString(),
				(this.OfficeTel == null) ? string.Empty : this.OfficeTel.ToString(),
				(this.Mobile == null) ? string.Empty : this.Mobile.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Website == null) ? string.Empty : this.Website.ToString(),
				(this.UnvSponsorFlag == null) ? string.Empty : this.UnvSponsorFlag.ToString(),
				(this.FeeSponsorFlag == null) ? string.Empty : this.FeeSponsorFlag.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.SpoFeeBalance == null) ? string.Empty : this.SpoFeeBalance.ToString(),
				(this.EnumId == null) ? string.Empty : this.EnumId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SPO_SPONSOR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SpoSponsorEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SPO_SPONSOR_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SPO_SPONSOR"</remarks>
		public System.Decimal SpoSponsorId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSpoSponsorId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SPO_Code : 
		/// </summary>
		public System.String		  SpoCode = null;
		
		/// <summary>
		/// SPO_ACCOUNT_CODE : 
		/// </summary>
		public System.String		  SpoAccountCode = null;
		
		/// <summary>
		/// NAME_AR : 
		/// </summary>
		public System.String		  NameAr = null;
		
		/// <summary>
		/// NAME_EN : 
		/// </summary>
		public System.String		  NameEn = null;
		
		/// <summary>
		/// ADDRESS : 
		/// </summary>
		public System.String		  Address = null;
		
		/// <summary>
		/// SPO_SPONSER_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  SpoSponserTypeId = null;
		
		/// <summary>
		/// COVER_REPEATED_COURSES_FLAG : 
		/// </summary>
		public System.Decimal?		  CoverRepeatedCoursesFlag = null;
		
		/// <summary>
		/// OFFICE_TEL : 
		/// </summary>
		public System.String		  OfficeTel = null;
		
		/// <summary>
		/// MOBILE : 
		/// </summary>
		public System.String		  Mobile = null;
		
		/// <summary>
		/// EMAIL : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// WEBSITE : 
		/// </summary>
		public System.String		  Website = null;
		
		/// <summary>
		/// UNV_SPONSOR_FLAG : XXX not used ,use ENUM_ID instead
		/// </summary>
		public System.Decimal?		  UnvSponsorFlag = null;
		
		/// <summary>
		/// FEE_SPONSOR_FLAG : XXXX
		/// </summary>
		public System.Decimal?		  FeeSponsorFlag = null;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Boolean?		  IsActive = null;
		
		/// <summary>
		/// SPO_FEE_BALANCE : 
		/// </summary>
		public System.Decimal?		  SpoFeeBalance = null;
		
		/// <summary>
		/// ENUM_ID : Constant ENUM ID usd in code /sp
		/// </summary>
		public System.Int32?		  EnumId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SpoSponsorType _spoSponserTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsorType"/>.
		/// </summary>
		/// <value>The source SpoSponsorType for SpoSponserTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SpoSponsorType SpoSponserTypeIdSource
      	{
            get { return this._spoSponserTypeIdSource; }
            set { this._spoSponserTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeInvoiceCollection
		
		private TList<FeeInvoice> _feeInvoiceSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInvoiceSpoSponsorId
		/// </summary>
		
		public TList<FeeInvoice> FeeInvoiceCollection
		{
			get
			{
				if (_feeInvoiceSpoSponsorId == null)
				{
				_feeInvoiceSpoSponsorId = new TList<FeeInvoice>();
				}
	
				return _feeInvoiceSpoSponsorId;
			}
			set { _feeInvoiceSpoSponsorId = value; }
		}
		
		#endregion

		#region SpoResponsiblePersonCollection
		
		private TList<SpoResponsiblePerson> _spoResponsiblePersonSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoResponsiblePersonSpoSponsorId
		/// </summary>
		
		public TList<SpoResponsiblePerson> SpoResponsiblePersonCollection
		{
			get
			{
				if (_spoResponsiblePersonSpoSponsorId == null)
				{
				_spoResponsiblePersonSpoSponsorId = new TList<SpoResponsiblePerson>();
				}
	
				return _spoResponsiblePersonSpoSponsorId;
			}
			set { _spoResponsiblePersonSpoSponsorId = value; }
		}
		
		#endregion

		#region FeeFacultyRuleCollection
		
		private TList<FeeFacultyRule> _feeFacultyRuleSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyRuleSpoSponsorId
		/// </summary>
		
		public TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get
			{
				if (_feeFacultyRuleSpoSponsorId == null)
				{
				_feeFacultyRuleSpoSponsorId = new TList<FeeFacultyRule>();
				}
	
				return _feeFacultyRuleSpoSponsorId;
			}
			set { _feeFacultyRuleSpoSponsorId = value; }
		}
		
		#endregion

		#region FeeStudVoucherCollection
		
		private TList<FeeStudVoucher> _feeStudVoucherSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherSpoSponsorId
		/// </summary>
		
		public TList<FeeStudVoucher> FeeStudVoucherCollection
		{
			get
			{
				if (_feeStudVoucherSpoSponsorId == null)
				{
				_feeStudVoucherSpoSponsorId = new TList<FeeStudVoucher>();
				}
	
				return _feeStudVoucherSpoSponsorId;
			}
			set { _feeStudVoucherSpoSponsorId = value; }
		}
		
		#endregion

		#region FeeStudDiscCollection
		
		private TList<FeeStudDisc> _feeStudDiscSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscSpoSponsorId
		/// </summary>
		
		public TList<FeeStudDisc> FeeStudDiscCollection
		{
			get
			{
				if (_feeStudDiscSpoSponsorId == null)
				{
				_feeStudDiscSpoSponsorId = new TList<FeeStudDisc>();
				}
	
				return _feeStudDiscSpoSponsorId;
			}
			set { _feeStudDiscSpoSponsorId = value; }
		}
		
		#endregion

		#region SpoSponsorOfferCollection
		
		private TList<SpoSponsorOffer> _spoSponsorOfferSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoSponsorOfferSpoSponsorId
		/// </summary>
		
		public TList<SpoSponsorOffer> SpoSponsorOfferCollection
		{
			get
			{
				if (_spoSponsorOfferSpoSponsorId == null)
				{
				_spoSponsorOfferSpoSponsorId = new TList<SpoSponsorOffer>();
				}
	
				return _spoSponsorOfferSpoSponsorId;
			}
			set { _spoSponsorOfferSpoSponsorId = value; }
		}
		
		#endregion

		#region AdmAppRegHistoryCollection
		
		private TList<AdmAppRegHistory> _admAppRegHistorySpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppRegHistorySpoSponsorId
		/// </summary>
		
		public TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get
			{
				if (_admAppRegHistorySpoSponsorId == null)
				{
				_admAppRegHistorySpoSponsorId = new TList<AdmAppRegHistory>();
				}
	
				return _admAppRegHistorySpoSponsorId;
			}
			set { _admAppRegHistorySpoSponsorId = value; }
		}
		
		#endregion

		#region SpoDepartmentCollection
		
		private TList<SpoDepartment> _spoDepartmentSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoDepartmentSpoSponsorId
		/// </summary>
		
		public TList<SpoDepartment> SpoDepartmentCollection
		{
			get
			{
				if (_spoDepartmentSpoSponsorId == null)
				{
				_spoDepartmentSpoSponsorId = new TList<SpoDepartment>();
				}
	
				return _spoDepartmentSpoSponsorId;
			}
			set { _spoDepartmentSpoSponsorId = value; }
		}
		
		#endregion

		#region SpoContactCollection
		
		private TList<SpoContact> _spoContactSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoContactSpoSponsorId
		/// </summary>
		
		public TList<SpoContact> SpoContactCollection
		{
			get
			{
				if (_spoContactSpoSponsorId == null)
				{
				_spoContactSpoSponsorId = new TList<SpoContact>();
				}
	
				return _spoContactSpoSponsorId;
			}
			set { _spoContactSpoSponsorId = value; }
		}
		
		#endregion

		#region AdmScholorshipCollection
		
		private TList<AdmScholorship> _admScholorshipSpoSponsorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admScholorshipSpoSponsorId
		/// </summary>
		
		public TList<AdmScholorship> AdmScholorshipCollection
		{
			get
			{
				if (_admScholorshipSpoSponsorId == null)
				{
				_admScholorshipSpoSponsorId = new TList<AdmScholorship>();
				}
	
				return _admScholorshipSpoSponsorId;
			}
			set { _admScholorshipSpoSponsorId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SpoSponsorEntityData _tmp = new SpoSponsorEntityData();
						
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.OriginalSpoSponsorId = this.OriginalSpoSponsorId;
			
			_tmp.SpoCode = this.SpoCode;
			_tmp.SpoAccountCode = this.SpoAccountCode;
			_tmp.NameAr = this.NameAr;
			_tmp.NameEn = this.NameEn;
			_tmp.Address = this.Address;
			_tmp.SpoSponserTypeId = this.SpoSponserTypeId;
			_tmp.CoverRepeatedCoursesFlag = this.CoverRepeatedCoursesFlag;
			_tmp.OfficeTel = this.OfficeTel;
			_tmp.Mobile = this.Mobile;
			_tmp.Email = this.Email;
			_tmp.Website = this.Website;
			_tmp.UnvSponsorFlag = this.UnvSponsorFlag;
			_tmp.FeeSponsorFlag = this.FeeSponsorFlag;
			_tmp.IsActive = this.IsActive;
			_tmp.SpoFeeBalance = this.SpoFeeBalance;
			_tmp.EnumId = this.EnumId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.SpoSponserTypeIdSource != null)
				_tmp.SpoSponserTypeIdSource = MakeCopyOf(this.SpoSponserTypeIdSource) as SpoSponsorType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeInvoiceSpoSponsorId != null)
				_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection); 
			if (this._spoResponsiblePersonSpoSponsorId != null)
				_tmp.SpoResponsiblePersonCollection = (TList<SpoResponsiblePerson>) MakeCopyOf(this.SpoResponsiblePersonCollection); 
			if (this._feeFacultyRuleSpoSponsorId != null)
				_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection); 
			if (this._feeStudVoucherSpoSponsorId != null)
				_tmp.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection); 
			if (this._feeStudDiscSpoSponsorId != null)
				_tmp.FeeStudDiscCollection = (TList<FeeStudDisc>) MakeCopyOf(this.FeeStudDiscCollection); 
			if (this._spoSponsorOfferSpoSponsorId != null)
				_tmp.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection); 
			if (this._admAppRegHistorySpoSponsorId != null)
				_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection); 
			if (this._spoDepartmentSpoSponsorId != null)
				_tmp.SpoDepartmentCollection = (TList<SpoDepartment>) MakeCopyOf(this.SpoDepartmentCollection); 
			if (this._spoContactSpoSponsorId != null)
				_tmp.SpoContactCollection = (TList<SpoContact>) MakeCopyOf(this.SpoContactCollection); 
			if (this._admScholorshipSpoSponsorId != null)
				_tmp.AdmScholorshipCollection = (TList<AdmScholorship>) MakeCopyOf(this.AdmScholorshipCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SpoSponsorEntityData _tmp = new SpoSponsorEntityData();
						
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.OriginalSpoSponsorId = this.OriginalSpoSponsorId;
			
			_tmp.SpoCode = this.SpoCode;
			_tmp.SpoAccountCode = this.SpoAccountCode;
			_tmp.NameAr = this.NameAr;
			_tmp.NameEn = this.NameEn;
			_tmp.Address = this.Address;
			_tmp.SpoSponserTypeId = this.SpoSponserTypeId;
			_tmp.CoverRepeatedCoursesFlag = this.CoverRepeatedCoursesFlag;
			_tmp.OfficeTel = this.OfficeTel;
			_tmp.Mobile = this.Mobile;
			_tmp.Email = this.Email;
			_tmp.Website = this.Website;
			_tmp.UnvSponsorFlag = this.UnvSponsorFlag;
			_tmp.FeeSponsorFlag = this.FeeSponsorFlag;
			_tmp.IsActive = this.IsActive;
			_tmp.SpoFeeBalance = this.SpoFeeBalance;
			_tmp.EnumId = this.EnumId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.SpoSponserTypeIdSource != null && existingCopies.Contains(this.SpoSponserTypeIdSource))
				_tmp.SpoSponserTypeIdSource = existingCopies[this.SpoSponserTypeIdSource] as SpoSponsorType;
			else
				_tmp.SpoSponserTypeIdSource = MakeCopyOf(this.SpoSponserTypeIdSource, existingCopies) as SpoSponsorType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			_tmp.SpoResponsiblePersonCollection = (TList<SpoResponsiblePerson>) MakeCopyOf(this.SpoResponsiblePersonCollection, existingCopies); 
			_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			_tmp.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection, existingCopies); 
			_tmp.FeeStudDiscCollection = (TList<FeeStudDisc>) MakeCopyOf(this.FeeStudDiscCollection, existingCopies); 
			_tmp.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection, existingCopies); 
			_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			_tmp.SpoDepartmentCollection = (TList<SpoDepartment>) MakeCopyOf(this.SpoDepartmentCollection, existingCopies); 
			_tmp.SpoContactCollection = (TList<SpoContact>) MakeCopyOf(this.SpoContactCollection, existingCopies); 
			_tmp.AdmScholorshipCollection = (TList<AdmScholorship>) MakeCopyOf(this.AdmScholorshipCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SpoSponsorColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SpoSponsorColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SpoSponsorColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SpoSponsorEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SpoSponsorEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SpoSponsorColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SpoSponsorEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SpoSponsorEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SpoSponsorEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SpoSponsor"/> object.
	/// </remarks>
	public class SpoSponsorEventArgs : System.EventArgs
	{
		private SpoSponsorColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SpoSponsorEventArgs class.
		///</summary>
		public SpoSponsorEventArgs(SpoSponsorColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SpoSponsorEventArgs class.
		///</summary>
		public SpoSponsorEventArgs(SpoSponsorColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SpoSponsorColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SpoSponsorColumn" />
		public SpoSponsorColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SpoSponsor related events.
	///</summary>
	public delegate void SpoSponsorEventHandler(object sender, SpoSponsorEventArgs e);
	
	#region SpoSponsorComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SpoSponsorComparer : System.Collections.Generic.IComparer<SpoSponsor>
	{
		SpoSponsorColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SpoSponsorComparer"/> class.
        /// </summary>
		public SpoSponsorComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SpoSponsorComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SpoSponsorComparer(SpoSponsorColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SpoSponsor"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SpoSponsor"/> to compare.</param>
        /// <param name="b">The second <c>SpoSponsor</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SpoSponsor a, SpoSponsor b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SpoSponsor entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SpoSponsor a, SpoSponsor b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SpoSponsorColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SpoSponsorKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SpoSponsor"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SpoSponsorKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SpoSponsorKey class.
		/// </summary>
		public SpoSponsorKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SpoSponsorKey class.
		/// </summary>
		public SpoSponsorKey(SpoSponsorBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SpoSponsorId = entity.SpoSponsorId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SpoSponsorKey class.
		/// </summary>
		public SpoSponsorKey(System.Decimal _spoSponsorId)
		{
			#region Init Properties

			this.SpoSponsorId = _spoSponsorId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SpoSponsorBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SpoSponsorBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SpoSponsorId property
		private System.Decimal _spoSponsorId;
		
		/// <summary>
		/// Gets or sets the SpoSponsorId property.
		/// </summary>
		public System.Decimal SpoSponsorId
		{
			get { return _spoSponsorId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SpoSponsorId = value;
				
				_spoSponsorId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SpoSponsorId = ( values["SpoSponsorId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SpoSponsorId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SpoSponsorId", SpoSponsorId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SpoSponsorId: {0}{1}",
								SpoSponsorId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SpoSponsorColumn Enum
	
	/// <summary>
	/// Enumerate the SpoSponsor columns.
	/// </summary>
	[Serializable]
	public enum SpoSponsorColumn : int
	{
		/// <summary>
		/// SpoSponsorId : 
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_ID")]
		[ColumnEnum("SPO_SPONSOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SpoSponsorId = 1,
		/// <summary>
		/// SpoCode : 
		/// </summary>
		[EnumTextValue("SPO_Code")]
		[ColumnEnum("SPO_Code", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		SpoCode = 2,
		/// <summary>
		/// SpoAccountCode : 
		/// </summary>
		[EnumTextValue("SPO_ACCOUNT_CODE")]
		[ColumnEnum("SPO_ACCOUNT_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		SpoAccountCode = 3,
		/// <summary>
		/// NameAr : 
		/// </summary>
		[EnumTextValue("NAME_AR")]
		[ColumnEnum("NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		NameAr = 4,
		/// <summary>
		/// NameEn : 
		/// </summary>
		[EnumTextValue("NAME_EN")]
		[ColumnEnum("NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		NameEn = 5,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("ADDRESS")]
		[ColumnEnum("ADDRESS", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Address = 6,
		/// <summary>
		/// SpoSponserTypeId : 
		/// </summary>
		[EnumTextValue("SPO_SPONSER_TYPE_ID")]
		[ColumnEnum("SPO_SPONSER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoSponserTypeId = 7,
		/// <summary>
		/// CoverRepeatedCoursesFlag : 
		/// </summary>
		[EnumTextValue("COVER_REPEATED_COURSES_FLAG")]
		[ColumnEnum("COVER_REPEATED_COURSES_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoverRepeatedCoursesFlag = 8,
		/// <summary>
		/// OfficeTel : 
		/// </summary>
		[EnumTextValue("OFFICE_TEL")]
		[ColumnEnum("OFFICE_TEL", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		OfficeTel = 9,
		/// <summary>
		/// Mobile : 
		/// </summary>
		[EnumTextValue("MOBILE")]
		[ColumnEnum("MOBILE", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Mobile = 10,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("EMAIL")]
		[ColumnEnum("EMAIL", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Email = 11,
		/// <summary>
		/// Website : 
		/// </summary>
		[EnumTextValue("WEBSITE")]
		[ColumnEnum("WEBSITE", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Website = 12,
		/// <summary>
		/// UnvSponsorFlag : XXX not used ,use ENUM_ID instead
		/// </summary>
		[EnumTextValue("UNV_SPONSOR_FLAG")]
		[ColumnEnum("UNV_SPONSOR_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		UnvSponsorFlag = 13,
		/// <summary>
		/// FeeSponsorFlag : XXXX
		/// </summary>
		[EnumTextValue("FEE_SPONSOR_FLAG")]
		[ColumnEnum("FEE_SPONSOR_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeSponsorFlag = 14,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 15,
		/// <summary>
		/// SpoFeeBalance : 
		/// </summary>
		[EnumTextValue("SPO_FEE_BALANCE")]
		[ColumnEnum("SPO_FEE_BALANCE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoFeeBalance = 16,
		/// <summary>
		/// EnumId : Constant ENUM ID usd in code /sp
		/// </summary>
		[EnumTextValue("ENUM_ID")]
		[ColumnEnum("ENUM_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EnumId = 17,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 18,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 19
	}//End enum

	#endregion SpoSponsorColumn Enum

} // end namespace
