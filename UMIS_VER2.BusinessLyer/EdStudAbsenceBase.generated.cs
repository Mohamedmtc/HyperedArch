
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudAbsence.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_ABSENCE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudAbsenceBase : EntityBase, IEdStudAbsence, IEntityId<EdStudAbsenceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudAbsenceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudAbsenceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudAbsenceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudAbsence> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudAbsenceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudAbsenceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudAbsenceBase"/> instance.
		///</summary>
		public EdStudAbsenceBase()
		{
			this.entityData = new EdStudAbsenceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudAbsenceBase"/> instance.
		///</summary>
		///<param name="_edStudAbsenceId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCodeCourseTeachingId"></param>
		///<param name="_edStudId"></param>
		///<param name="_scScheduleDtlDayId"></param>
		///<param name="_scGroupDayId"></param>
		///<param name="_absDate"></param>
		///<param name="_absenceFlg"></param>
		///<param name="_execuseFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_approveAbsFlg">اعتماد الغياب</param>
		///<param name="_autoFlg">اتوماتيك نتيجة طلب اعتذار لا يمكن التعديل فيه</param>
		///<param name="_scSchdlSlotId">Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر</param>
		///<param name="_absNotes"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public EdStudAbsenceBase(System.Decimal _edStudAbsenceId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal _edCourseId, System.Decimal? _edCodeCourseTeachingId, 
			System.Decimal _edStudId, System.Decimal? _scScheduleDtlDayId, System.Decimal? _scGroupDayId, 
			System.DateTime _absDate, System.Decimal _absenceFlg, System.Decimal _execuseFlg, 
			System.Decimal? _asFacultyInfoId, System.Boolean? _approveAbsFlg, System.Boolean? _autoFlg, 
			System.Decimal? _scSchdlSlotId, System.String _absNotes, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			this.entityData = new EdStudAbsenceEntityData();
			this.backupData = null;

			this.EdStudAbsenceId = _edStudAbsenceId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdCourseId = _edCourseId;
			this.EdCodeCourseTeachingId = _edCodeCourseTeachingId;
			this.EdStudId = _edStudId;
			this.ScScheduleDtlDayId = _scScheduleDtlDayId;
			this.ScGroupDayId = _scGroupDayId;
			this.AbsDate = _absDate;
			this.AbsenceFlg = _absenceFlg;
			this.ExecuseFlg = _execuseFlg;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.ApproveAbsFlg = _approveAbsFlg;
			this.AutoFlg = _autoFlg;
			this.ScSchdlSlotId = _scSchdlSlotId;
			this.AbsNotes = _absNotes;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudAbsence"/> instance.
		///</summary>
		///<param name="_edStudAbsenceId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCodeCourseTeachingId"></param>
		///<param name="_edStudId"></param>
		///<param name="_scScheduleDtlDayId"></param>
		///<param name="_scGroupDayId"></param>
		///<param name="_absDate"></param>
		///<param name="_absenceFlg"></param>
		///<param name="_execuseFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_approveAbsFlg">اعتماد الغياب</param>
		///<param name="_autoFlg">اتوماتيك نتيجة طلب اعتذار لا يمكن التعديل فيه</param>
		///<param name="_scSchdlSlotId">Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر</param>
		///<param name="_absNotes"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static EdStudAbsence CreateEdStudAbsence(System.Decimal _edStudAbsenceId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal _edCourseId, System.Decimal? _edCodeCourseTeachingId, 
			System.Decimal _edStudId, System.Decimal? _scScheduleDtlDayId, System.Decimal? _scGroupDayId, 
			System.DateTime _absDate, System.Decimal _absenceFlg, System.Decimal _execuseFlg, 
			System.Decimal? _asFacultyInfoId, System.Boolean? _approveAbsFlg, System.Boolean? _autoFlg, 
			System.Decimal? _scSchdlSlotId, System.String _absNotes, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			EdStudAbsence newEdStudAbsence = new EdStudAbsence();
			newEdStudAbsence.EdStudAbsenceId = _edStudAbsenceId;
			newEdStudAbsence.EdAcadYearId = _edAcadYearId;
			newEdStudAbsence.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudAbsence.EdCourseId = _edCourseId;
			newEdStudAbsence.EdCodeCourseTeachingId = _edCodeCourseTeachingId;
			newEdStudAbsence.EdStudId = _edStudId;
			newEdStudAbsence.ScScheduleDtlDayId = _scScheduleDtlDayId;
			newEdStudAbsence.ScGroupDayId = _scGroupDayId;
			newEdStudAbsence.AbsDate = _absDate;
			newEdStudAbsence.AbsenceFlg = _absenceFlg;
			newEdStudAbsence.ExecuseFlg = _execuseFlg;
			newEdStudAbsence.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudAbsence.ApproveAbsFlg = _approveAbsFlg;
			newEdStudAbsence.AutoFlg = _autoFlg;
			newEdStudAbsence.ScSchdlSlotId = _scSchdlSlotId;
			newEdStudAbsence.AbsNotes = _absNotes;
			newEdStudAbsence.LastDate = _lastDate;
			newEdStudAbsence.SeUserId = _seUserId;
			return newEdStudAbsence;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudAbsenceId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudAbsenceId
		{
			get
			{
				return this.entityData.EdStudAbsenceId; 
			}
			
			set
			{
				if (this.entityData.EdStudAbsenceId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.EdStudAbsenceId, this.entityData.EdStudAbsenceId);
				this.entityData.EdStudAbsenceId = value;
				this.EntityId.EdStudAbsenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.EdStudAbsenceId, this.entityData.EdStudAbsenceId);
				OnPropertyChanged("EdStudAbsenceId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_ABSENCE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_ABSENCE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudAbsenceId
		{
			get { return this.entityData.OriginalEdStudAbsenceId; }
			set { this.entityData.OriginalEdStudAbsenceId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseTeachingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseTeachingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseTeachingId
		{
			get
			{
				return this.entityData.EdCodeCourseTeachingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseTeachingId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.EdCodeCourseTeachingId, this.entityData.EdCodeCourseTeachingId);
				this.entityData.EdCodeCourseTeachingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.EdCodeCourseTeachingId, this.entityData.EdCodeCourseTeachingId);
				OnPropertyChanged("EdCodeCourseTeachingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScScheduleDtlDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScScheduleDtlDayIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScScheduleDtlDayId
		{
			get
			{
				return this.entityData.ScScheduleDtlDayId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleDtlDayId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.ScScheduleDtlDayId, this.entityData.ScScheduleDtlDayId);
				this.entityData.ScScheduleDtlDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.ScScheduleDtlDayId, this.entityData.ScScheduleDtlDayId);
				OnPropertyChanged("ScScheduleDtlDayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScGroupDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScGroupDayIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScGroupDayId
		{
			get
			{
				return this.entityData.ScGroupDayId; 
			}
			
			set
			{
				if (this.entityData.ScGroupDayId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.ScGroupDayId, this.entityData.ScGroupDayId);
				this.entityData.ScGroupDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.ScGroupDayId, this.entityData.ScGroupDayId);
				OnPropertyChanged("ScGroupDayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime AbsDate
		{
			get
			{
				return this.entityData.AbsDate; 
			}
			
			set
			{
				if (this.entityData.AbsDate == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.AbsDate, this.entityData.AbsDate);
				this.entityData.AbsDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.AbsDate, this.entityData.AbsDate);
				OnPropertyChanged("AbsDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsenceFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AbsenceFlg
		{
			get
			{
				return this.entityData.AbsenceFlg; 
			}
			
			set
			{
				if (this.entityData.AbsenceFlg == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.AbsenceFlg, this.entityData.AbsenceFlg);
				this.entityData.AbsenceFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.AbsenceFlg, this.entityData.AbsenceFlg);
				OnPropertyChanged("AbsenceFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecuseFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ExecuseFlg
		{
			get
			{
				return this.entityData.ExecuseFlg; 
			}
			
			set
			{
				if (this.entityData.ExecuseFlg == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.ExecuseFlg, this.entityData.ExecuseFlg);
				this.entityData.ExecuseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.ExecuseFlg, this.entityData.ExecuseFlg);
				OnPropertyChanged("ExecuseFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveAbsFlg property. 
		///		اعتماد الغياب
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveAbsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد الغياب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveAbsFlg
		{
			get
			{
				return this.entityData.ApproveAbsFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveAbsFlg == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.ApproveAbsFlg, this.entityData.ApproveAbsFlg);
				this.entityData.ApproveAbsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.ApproveAbsFlg, this.entityData.ApproveAbsFlg);
				OnPropertyChanged("ApproveAbsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AutoFlg property. 
		///		اتوماتيك نتيجة طلب اعتذار لا يمكن التعديل فيه
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAutoFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اتوماتيك نتيجة طلب اعتذار لا يمكن التعديل فيه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AutoFlg
		{
			get
			{
				return this.entityData.AutoFlg; 
			}
			
			set
			{
				if (this.entityData.AutoFlg == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.AutoFlg, this.entityData.AutoFlg);
				this.entityData.AutoFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.AutoFlg, this.entityData.AutoFlg);
				OnPropertyChanged("AutoFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScSchdlSlotId property. 
		///		Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScSchdlSlotIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScSchdlSlotId
		{
			get
			{
				return this.entityData.ScSchdlSlotId; 
			}
			
			set
			{
				if (this.entityData.ScSchdlSlotId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.ScSchdlSlotId, this.entityData.ScSchdlSlotId);
				this.entityData.ScSchdlSlotId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.ScSchdlSlotId, this.entityData.ScSchdlSlotId);
				OnPropertyChanged("ScSchdlSlotId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsNotes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String AbsNotes
		{
			get
			{
				return this.entityData.AbsNotes; 
			}
			
			set
			{
				if (this.entityData.AbsNotes == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.AbsNotes, this.entityData.AbsNotes);
				this.entityData.AbsNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.AbsNotes, this.entityData.AbsNotes);
				OnPropertyChanged("AbsNotes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudAbsenceColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudAbsenceColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseTeaching"/>.
		/// </summary>
		/// <value>The source EdCodeCourseTeaching for EdCodeCourseTeachingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseTeaching EdCodeCourseTeachingIdSource
      	{
            get { return entityData.EdCodeCourseTeachingIdSource; }
            set { entityData.EdCodeCourseTeachingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for ScGroupDayId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeWeekDay ScGroupDayIdSource
      	{
            get { return entityData.ScGroupDayIdSource; }
            set { entityData.ScGroupDayIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlSlot"/>.
		/// </summary>
		/// <value>The source ScSchdlSlot for ScSchdlSlotId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScSchdlSlot ScSchdlSlotIdSource
      	{
            get { return entityData.ScSchdlSlotIdSource; }
            set { entityData.ScSchdlSlotIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtlDay"/>.
		/// </summary>
		/// <value>The source ScScheduleDtlDay for ScScheduleDtlDayId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScScheduleDtlDay ScScheduleDtlDayIdSource
      	{
            get { return entityData.ScScheduleDtlDayIdSource; }
            set { entityData.ScScheduleDtlDayIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of MltStudBhvrAttndc objects
		///	which are related to this object through the relation FK_MLT_STUD_BHVR_ATTNDC_ED_STUD_ABSENCE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get { return entityData.MltStudBhvrAttndcCollection; }
			set { entityData.MltStudBhvrAttndcCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AbsNotes", "Abs Notes", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_ABSENCE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_ABSENCE_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_COURSE_ID", "ED_CODE_COURSE_TEACHING_ID", "ED_STUD_ID", "SC_SCHEDULE_DTL_DAY_ID", "SC_GROUP_DAY_ID", "ABS_DATE", "ABSENCE_FLG", "EXECUSE_FLG", "AS_FACULTY_INFO_ID", "APPROVE_ABS_FLG", "AUTO_FLG", "SC_SCHDL_SLOT_ID", "ABS_NOTES", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudAbsenceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudAbsence) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudAbsence>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudAbsence);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudAbsence Entity 
		///</summary>
		protected virtual EdStudAbsence Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudAbsence copy = new EdStudAbsence();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudAbsenceId = this.EdStudAbsenceId;
					copy.OriginalEdStudAbsenceId = this.OriginalEdStudAbsenceId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdCourseId = this.EdCourseId;
				copy.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
				copy.EdStudId = this.EdStudId;
				copy.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
				copy.ScGroupDayId = this.ScGroupDayId;
				copy.AbsDate = this.AbsDate;
				copy.AbsenceFlg = this.AbsenceFlg;
				copy.ExecuseFlg = this.ExecuseFlg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.ApproveAbsFlg = this.ApproveAbsFlg;
				copy.AutoFlg = this.AutoFlg;
				copy.ScSchdlSlotId = this.ScSchdlSlotId;
				copy.AbsNotes = this.AbsNotes;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeCourseTeachingIdSource != null && existingCopies.Contains(this.EdCodeCourseTeachingIdSource))
				copy.EdCodeCourseTeachingIdSource = existingCopies[this.EdCodeCourseTeachingIdSource] as EdCodeCourseTeaching;
			else
				copy.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource, existingCopies) as EdCodeCourseTeaching;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.ScGroupDayIdSource != null && existingCopies.Contains(this.ScGroupDayIdSource))
				copy.ScGroupDayIdSource = existingCopies[this.ScGroupDayIdSource] as GsCodeWeekDay;
			else
				copy.ScGroupDayIdSource = MakeCopyOf(this.ScGroupDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScSchdlSlotIdSource != null && existingCopies.Contains(this.ScSchdlSlotIdSource))
				copy.ScSchdlSlotIdSource = existingCopies[this.ScSchdlSlotIdSource] as ScSchdlSlot;
			else
				copy.ScSchdlSlotIdSource = MakeCopyOf(this.ScSchdlSlotIdSource, existingCopies) as ScSchdlSlot;
			if (this.ScScheduleDtlDayIdSource != null && existingCopies.Contains(this.ScScheduleDtlDayIdSource))
				copy.ScScheduleDtlDayIdSource = existingCopies[this.ScScheduleDtlDayIdSource] as ScScheduleDtlDay;
			else
				copy.ScScheduleDtlDayIdSource = MakeCopyOf(this.ScScheduleDtlDayIdSource, existingCopies) as ScScheduleDtlDay;
		
			//deep copy nested objects
			copy.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudAbsence Entity 
		///</summary>
		public virtual EdStudAbsence Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudAbsence Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudAbsence DeepCopy()
		{
			return EntityHelper.Clone<EdStudAbsence>(this as EdStudAbsence);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudAbsenceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudAbsenceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudAbsenceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudAbsenceColumn column)
		{
			switch(column)
			{
					case EdStudAbsenceColumn.EdStudAbsenceId:
					return entityData.EdStudAbsenceId != _originalData.EdStudAbsenceId;
					case EdStudAbsenceColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudAbsenceColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudAbsenceColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdStudAbsenceColumn.EdCodeCourseTeachingId:
					return entityData.EdCodeCourseTeachingId != _originalData.EdCodeCourseTeachingId;
					case EdStudAbsenceColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudAbsenceColumn.ScScheduleDtlDayId:
					return entityData.ScScheduleDtlDayId != _originalData.ScScheduleDtlDayId;
					case EdStudAbsenceColumn.ScGroupDayId:
					return entityData.ScGroupDayId != _originalData.ScGroupDayId;
					case EdStudAbsenceColumn.AbsDate:
					return entityData.AbsDate != _originalData.AbsDate;
					case EdStudAbsenceColumn.AbsenceFlg:
					return entityData.AbsenceFlg != _originalData.AbsenceFlg;
					case EdStudAbsenceColumn.ExecuseFlg:
					return entityData.ExecuseFlg != _originalData.ExecuseFlg;
					case EdStudAbsenceColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudAbsenceColumn.ApproveAbsFlg:
					return entityData.ApproveAbsFlg != _originalData.ApproveAbsFlg;
					case EdStudAbsenceColumn.AutoFlg:
					return entityData.AutoFlg != _originalData.AutoFlg;
					case EdStudAbsenceColumn.ScSchdlSlotId:
					return entityData.ScSchdlSlotId != _originalData.ScSchdlSlotId;
					case EdStudAbsenceColumn.AbsNotes:
					return entityData.AbsNotes != _originalData.AbsNotes;
					case EdStudAbsenceColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdStudAbsenceColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudAbsenceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudAbsenceId != _originalData.EdStudAbsenceId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EdCodeCourseTeachingId != _originalData.EdCodeCourseTeachingId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.ScScheduleDtlDayId != _originalData.ScScheduleDtlDayId;
			result = result || entityData.ScGroupDayId != _originalData.ScGroupDayId;
			result = result || entityData.AbsDate != _originalData.AbsDate;
			result = result || entityData.AbsenceFlg != _originalData.AbsenceFlg;
			result = result || entityData.ExecuseFlg != _originalData.ExecuseFlg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.ApproveAbsFlg != _originalData.ApproveAbsFlg;
			result = result || entityData.AutoFlg != _originalData.AutoFlg;
			result = result || entityData.ScSchdlSlotId != _originalData.ScSchdlSlotId;
			result = result || entityData.AbsNotes != _originalData.AbsNotes;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudAbsence Entity with the original data.
		///</summary>
		public EdStudAbsence GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudAbsence(
				_originalData.EdStudAbsenceId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdCourseId,
				_originalData.EdCodeCourseTeachingId,
				_originalData.EdStudId,
				_originalData.ScScheduleDtlDayId,
				_originalData.ScGroupDayId,
				_originalData.AbsDate,
				_originalData.AbsenceFlg,
				_originalData.ExecuseFlg,
				_originalData.AsFacultyInfoId,
				_originalData.ApproveAbsFlg,
				_originalData.AutoFlg,
				_originalData.ScSchdlSlotId,
				_originalData.AbsNotes,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (EdStudAbsence)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudAbsenceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudAbsenceBase)
				return ValueEquals(this, (EdStudAbsenceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudAbsenceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudAbsenceId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					((this.EdCodeCourseTeachingId == null) ? string.Empty : this.EdCodeCourseTeachingId.ToString()).GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.ScScheduleDtlDayId == null) ? string.Empty : this.ScScheduleDtlDayId.ToString()).GetHashCode() ^ 
					((this.ScGroupDayId == null) ? string.Empty : this.ScGroupDayId.ToString()).GetHashCode() ^ 
					this.AbsDate.GetHashCode() ^ 
					this.AbsenceFlg.GetHashCode() ^ 
					this.ExecuseFlg.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.ApproveAbsFlg == null) ? string.Empty : this.ApproveAbsFlg.ToString()).GetHashCode() ^ 
					((this.AutoFlg == null) ? string.Empty : this.AutoFlg.ToString()).GetHashCode() ^ 
					((this.ScSchdlSlotId == null) ? string.Empty : this.ScSchdlSlotId.ToString()).GetHashCode() ^ 
					((this.AbsNotes == null) ? string.Empty : this.AbsNotes.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudAbsenceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudAbsenceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudAbsenceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudAbsenceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudAbsenceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudAbsenceBase Object1, EdStudAbsenceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudAbsenceId != Object2.EdStudAbsenceId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if ( Object1.EdCodeCourseTeachingId != null && Object2.EdCodeCourseTeachingId != null )
			{
				if (Object1.EdCodeCourseTeachingId != Object2.EdCodeCourseTeachingId)
					equal = false;
			}
			else if (Object1.EdCodeCourseTeachingId == null ^ Object2.EdCodeCourseTeachingId == null )
			{
				equal = false;
			}
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.ScScheduleDtlDayId != null && Object2.ScScheduleDtlDayId != null )
			{
				if (Object1.ScScheduleDtlDayId != Object2.ScScheduleDtlDayId)
					equal = false;
			}
			else if (Object1.ScScheduleDtlDayId == null ^ Object2.ScScheduleDtlDayId == null )
			{
				equal = false;
			}
			if ( Object1.ScGroupDayId != null && Object2.ScGroupDayId != null )
			{
				if (Object1.ScGroupDayId != Object2.ScGroupDayId)
					equal = false;
			}
			else if (Object1.ScGroupDayId == null ^ Object2.ScGroupDayId == null )
			{
				equal = false;
			}
			if (Object1.AbsDate != Object2.AbsDate)
				equal = false;
			if (Object1.AbsenceFlg != Object2.AbsenceFlg)
				equal = false;
			if (Object1.ExecuseFlg != Object2.ExecuseFlg)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.ApproveAbsFlg != null && Object2.ApproveAbsFlg != null )
			{
				if (Object1.ApproveAbsFlg != Object2.ApproveAbsFlg)
					equal = false;
			}
			else if (Object1.ApproveAbsFlg == null ^ Object2.ApproveAbsFlg == null )
			{
				equal = false;
			}
			if ( Object1.AutoFlg != null && Object2.AutoFlg != null )
			{
				if (Object1.AutoFlg != Object2.AutoFlg)
					equal = false;
			}
			else if (Object1.AutoFlg == null ^ Object2.AutoFlg == null )
			{
				equal = false;
			}
			if ( Object1.ScSchdlSlotId != null && Object2.ScSchdlSlotId != null )
			{
				if (Object1.ScSchdlSlotId != Object2.ScSchdlSlotId)
					equal = false;
			}
			else if (Object1.ScSchdlSlotId == null ^ Object2.ScSchdlSlotId == null )
			{
				equal = false;
			}
			if ( Object1.AbsNotes != null && Object2.AbsNotes != null )
			{
				if (Object1.AbsNotes != Object2.AbsNotes)
					equal = false;
			}
			else if (Object1.AbsNotes == null ^ Object2.AbsNotes == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudAbsenceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudAbsenceComparer GetComparer()
        {
            return new EdStudAbsenceComparer();
        }
        */

        // Comparer delegates back to EdStudAbsence
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudAbsence rhs, EdStudAbsenceColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudAbsenceColumn.EdStudAbsenceId:
            		return this.EdStudAbsenceId.CompareTo(rhs.EdStudAbsenceId);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.EdCodeCourseTeachingId:
            		return this.EdCodeCourseTeachingId.Value.CompareTo(rhs.EdCodeCourseTeachingId.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.ScScheduleDtlDayId:
            		return this.ScScheduleDtlDayId.Value.CompareTo(rhs.ScScheduleDtlDayId.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.ScGroupDayId:
            		return this.ScGroupDayId.Value.CompareTo(rhs.ScGroupDayId.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.AbsDate:
            		return this.AbsDate.CompareTo(rhs.AbsDate);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.AbsenceFlg:
            		return this.AbsenceFlg.CompareTo(rhs.AbsenceFlg);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.ExecuseFlg:
            		return this.ExecuseFlg.CompareTo(rhs.ExecuseFlg);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.ApproveAbsFlg:
            		return this.ApproveAbsFlg.Value.CompareTo(rhs.ApproveAbsFlg.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.AutoFlg:
            		return this.AutoFlg.Value.CompareTo(rhs.AutoFlg.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.ScSchdlSlotId:
            		return this.ScSchdlSlotId.Value.CompareTo(rhs.ScSchdlSlotId.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.AbsNotes:
            		return this.AbsNotes.CompareTo(rhs.AbsNotes);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdStudAbsenceColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudAbsenceKey> Members
		
		// member variable for the EntityId property
		private EdStudAbsenceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudAbsenceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudAbsenceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudAbsence")
					.Append("|").Append( this.EdStudAbsenceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- EdStudAbsenceId: {0}{18}- EdAcadYearId: {1}{18}- EdCodeSemesterId: {2}{18}- EdCourseId: {3}{18}- EdCodeCourseTeachingId: {4}{18}- EdStudId: {5}{18}- ScScheduleDtlDayId: {6}{18}- ScGroupDayId: {7}{18}- AbsDate: {8}{18}- AbsenceFlg: {9}{18}- ExecuseFlg: {10}{18}- AsFacultyInfoId: {11}{18}- ApproveAbsFlg: {12}{18}- AutoFlg: {13}{18}- ScSchdlSlotId: {14}{18}- AbsNotes: {15}{18}- LastDate: {16}{18}- SeUserId: {17}{18}{20}", 
				this.EdStudAbsenceId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				this.EdCourseId,
				(this.EdCodeCourseTeachingId == null) ? string.Empty : this.EdCodeCourseTeachingId.ToString(),
				this.EdStudId,
				(this.ScScheduleDtlDayId == null) ? string.Empty : this.ScScheduleDtlDayId.ToString(),
				(this.ScGroupDayId == null) ? string.Empty : this.ScGroupDayId.ToString(),
				this.AbsDate,
				this.AbsenceFlg,
				this.ExecuseFlg,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.ApproveAbsFlg == null) ? string.Empty : this.ApproveAbsFlg.ToString(),
				(this.AutoFlg == null) ? string.Empty : this.AutoFlg.ToString(),
				(this.ScSchdlSlotId == null) ? string.Empty : this.ScSchdlSlotId.ToString(),
				(this.AbsNotes == null) ? string.Empty : this.AbsNotes.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_ABSENCE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudAbsenceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_ABSENCE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_ABSENCE"</remarks>
		public System.Decimal EdStudAbsenceId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudAbsenceId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// ED_CODE_COURSE_TEACHING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseTeachingId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// SC_SCHEDULE_DTL_DAY_ID : 
		/// </summary>
		public System.Decimal?		  ScScheduleDtlDayId = null;
		
		/// <summary>
		/// SC_GROUP_DAY_ID : 
		/// </summary>
		public System.Decimal?		  ScGroupDayId = null;
		
		/// <summary>
		/// ABS_DATE : 
		/// </summary>
		public System.DateTime		  AbsDate = DateTime.MinValue;
		
		/// <summary>
		/// ABSENCE_FLG : 
		/// </summary>
		public System.Decimal		  AbsenceFlg = 0.0m;
		
		/// <summary>
		/// EXECUSE_FLG : 
		/// </summary>
		public System.Decimal		  ExecuseFlg = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// APPROVE_ABS_FLG : اعتماد الغياب
		/// </summary>
		public System.Boolean?		  ApproveAbsFlg = null;
		
		/// <summary>
		/// AUTO_FLG : اتوماتيك نتيجة طلب اعتذار لا يمكن التعديل فيه
		/// </summary>
		public System.Boolean?		  AutoFlg = null;
		
		/// <summary>
		/// SC_SCHDL_SLOT_ID : Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر
		/// </summary>
		public System.Decimal?		  ScSchdlSlotId = null;
		
		/// <summary>
		/// ABS_NOTES : 
		/// </summary>
		public System.String		  AbsNotes = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeCourseTeaching _edCodeCourseTeachingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseTeaching"/>.
		/// </summary>
		/// <value>The source EdCodeCourseTeaching for EdCodeCourseTeachingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseTeaching EdCodeCourseTeachingIdSource
      	{
            get { return this._edCodeCourseTeachingIdSource; }
            set { this._edCodeCourseTeachingIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private GsCodeWeekDay _scGroupDayIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for ScGroupDayId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeWeekDay ScGroupDayIdSource
      	{
            get { return this._scGroupDayIdSource; }
            set { this._scGroupDayIdSource = value; }
      	}
		private ScSchdlSlot _scSchdlSlotIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlSlot"/>.
		/// </summary>
		/// <value>The source ScSchdlSlot for ScSchdlSlotId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScSchdlSlot ScSchdlSlotIdSource
      	{
            get { return this._scSchdlSlotIdSource; }
            set { this._scSchdlSlotIdSource = value; }
      	}
		private ScScheduleDtlDay _scScheduleDtlDayIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtlDay"/>.
		/// </summary>
		/// <value>The source ScScheduleDtlDay for ScScheduleDtlDayId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScScheduleDtlDay ScScheduleDtlDayIdSource
      	{
            get { return this._scScheduleDtlDayIdSource; }
            set { this._scScheduleDtlDayIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region MltStudBhvrAttndcCollection
		
		private TList<MltStudBhvrAttndc> _mltStudBhvrAttndcEdStudAbsenceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltStudBhvrAttndcEdStudAbsenceId
		/// </summary>
		
		public TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get
			{
				if (_mltStudBhvrAttndcEdStudAbsenceId == null)
				{
				_mltStudBhvrAttndcEdStudAbsenceId = new TList<MltStudBhvrAttndc>();
				}
	
				return _mltStudBhvrAttndcEdStudAbsenceId;
			}
			set { _mltStudBhvrAttndcEdStudAbsenceId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudAbsenceEntityData _tmp = new EdStudAbsenceEntityData();
						
			_tmp.EdStudAbsenceId = this.EdStudAbsenceId;
			_tmp.OriginalEdStudAbsenceId = this.OriginalEdStudAbsenceId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
			_tmp.ScGroupDayId = this.ScGroupDayId;
			_tmp.AbsDate = this.AbsDate;
			_tmp.AbsenceFlg = this.AbsenceFlg;
			_tmp.ExecuseFlg = this.ExecuseFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ApproveAbsFlg = this.ApproveAbsFlg;
			_tmp.AutoFlg = this.AutoFlg;
			_tmp.ScSchdlSlotId = this.ScSchdlSlotId;
			_tmp.AbsNotes = this.AbsNotes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeCourseTeachingIdSource != null)
				_tmp.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource) as EdCodeCourseTeaching;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.ScGroupDayIdSource != null)
				_tmp.ScGroupDayIdSource = MakeCopyOf(this.ScGroupDayIdSource) as GsCodeWeekDay;
			if (this.ScSchdlSlotIdSource != null)
				_tmp.ScSchdlSlotIdSource = MakeCopyOf(this.ScSchdlSlotIdSource) as ScSchdlSlot;
			if (this.ScScheduleDtlDayIdSource != null)
				_tmp.ScScheduleDtlDayIdSource = MakeCopyOf(this.ScScheduleDtlDayIdSource) as ScScheduleDtlDay;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._mltStudBhvrAttndcEdStudAbsenceId != null)
				_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudAbsenceEntityData _tmp = new EdStudAbsenceEntityData();
						
			_tmp.EdStudAbsenceId = this.EdStudAbsenceId;
			_tmp.OriginalEdStudAbsenceId = this.OriginalEdStudAbsenceId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
			_tmp.ScGroupDayId = this.ScGroupDayId;
			_tmp.AbsDate = this.AbsDate;
			_tmp.AbsenceFlg = this.AbsenceFlg;
			_tmp.ExecuseFlg = this.ExecuseFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ApproveAbsFlg = this.ApproveAbsFlg;
			_tmp.AutoFlg = this.AutoFlg;
			_tmp.ScSchdlSlotId = this.ScSchdlSlotId;
			_tmp.AbsNotes = this.AbsNotes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeCourseTeachingIdSource != null && existingCopies.Contains(this.EdCodeCourseTeachingIdSource))
				_tmp.EdCodeCourseTeachingIdSource = existingCopies[this.EdCodeCourseTeachingIdSource] as EdCodeCourseTeaching;
			else
				_tmp.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource, existingCopies) as EdCodeCourseTeaching;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.ScGroupDayIdSource != null && existingCopies.Contains(this.ScGroupDayIdSource))
				_tmp.ScGroupDayIdSource = existingCopies[this.ScGroupDayIdSource] as GsCodeWeekDay;
			else
				_tmp.ScGroupDayIdSource = MakeCopyOf(this.ScGroupDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScSchdlSlotIdSource != null && existingCopies.Contains(this.ScSchdlSlotIdSource))
				_tmp.ScSchdlSlotIdSource = existingCopies[this.ScSchdlSlotIdSource] as ScSchdlSlot;
			else
				_tmp.ScSchdlSlotIdSource = MakeCopyOf(this.ScSchdlSlotIdSource, existingCopies) as ScSchdlSlot;
			if (this.ScScheduleDtlDayIdSource != null && existingCopies.Contains(this.ScScheduleDtlDayIdSource))
				_tmp.ScScheduleDtlDayIdSource = existingCopies[this.ScScheduleDtlDayIdSource] as ScScheduleDtlDay;
			else
				_tmp.ScScheduleDtlDayIdSource = MakeCopyOf(this.ScScheduleDtlDayIdSource, existingCopies) as ScScheduleDtlDay;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudAbsenceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudAbsenceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudAbsenceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudAbsenceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudAbsenceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudAbsenceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudAbsenceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudAbsenceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudAbsenceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudAbsenceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudAbsenceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudAbsenceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudAbsenceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudAbsence"/> object.
	/// </remarks>
	public class EdStudAbsenceEventArgs : System.EventArgs
	{
		private EdStudAbsenceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudAbsenceEventArgs class.
		///</summary>
		public EdStudAbsenceEventArgs(EdStudAbsenceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudAbsenceEventArgs class.
		///</summary>
		public EdStudAbsenceEventArgs(EdStudAbsenceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudAbsenceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudAbsenceColumn" />
		public EdStudAbsenceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudAbsence related events.
	///</summary>
	public delegate void EdStudAbsenceEventHandler(object sender, EdStudAbsenceEventArgs e);
	
	#region EdStudAbsenceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudAbsenceComparer : System.Collections.Generic.IComparer<EdStudAbsence>
	{
		EdStudAbsenceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudAbsenceComparer"/> class.
        /// </summary>
		public EdStudAbsenceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudAbsenceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudAbsenceComparer(EdStudAbsenceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudAbsence"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudAbsence"/> to compare.</param>
        /// <param name="b">The second <c>EdStudAbsence</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudAbsence a, EdStudAbsence b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudAbsence entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudAbsence a, EdStudAbsence b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudAbsenceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudAbsenceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudAbsence"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudAbsenceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceKey class.
		/// </summary>
		public EdStudAbsenceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceKey class.
		/// </summary>
		public EdStudAbsenceKey(EdStudAbsenceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudAbsenceId = entity.EdStudAbsenceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudAbsenceKey class.
		/// </summary>
		public EdStudAbsenceKey(System.Decimal _edStudAbsenceId)
		{
			#region Init Properties

			this.EdStudAbsenceId = _edStudAbsenceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudAbsenceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudAbsenceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudAbsenceId property
		private System.Decimal _edStudAbsenceId;
		
		/// <summary>
		/// Gets or sets the EdStudAbsenceId property.
		/// </summary>
		public System.Decimal EdStudAbsenceId
		{
			get { return _edStudAbsenceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudAbsenceId = value;
				
				_edStudAbsenceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudAbsenceId = ( values["EdStudAbsenceId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudAbsenceId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudAbsenceId", EdStudAbsenceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudAbsenceId: {0}{1}",
								EdStudAbsenceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudAbsenceColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudAbsence columns.
	/// </summary>
	[Serializable]
	public enum EdStudAbsenceColumn : int
	{
		/// <summary>
		/// EdStudAbsenceId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ABSENCE_ID")]
		[ColumnEnum("ED_STUD_ABSENCE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudAbsenceId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 4,
		/// <summary>
		/// EdCodeCourseTeachingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_TEACHING_ID")]
		[ColumnEnum("ED_CODE_COURSE_TEACHING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseTeachingId = 5,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 6,
		/// <summary>
		/// ScScheduleDtlDayId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_DTL_DAY_ID")]
		[ColumnEnum("SC_SCHEDULE_DTL_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScScheduleDtlDayId = 7,
		/// <summary>
		/// ScGroupDayId : 
		/// </summary>
		[EnumTextValue("SC_GROUP_DAY_ID")]
		[ColumnEnum("SC_GROUP_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScGroupDayId = 8,
		/// <summary>
		/// AbsDate : 
		/// </summary>
		[EnumTextValue("ABS_DATE")]
		[ColumnEnum("ABS_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		AbsDate = 9,
		/// <summary>
		/// AbsenceFlg : 
		/// </summary>
		[EnumTextValue("ABSENCE_FLG")]
		[ColumnEnum("ABSENCE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AbsenceFlg = 10,
		/// <summary>
		/// ExecuseFlg : 
		/// </summary>
		[EnumTextValue("EXECUSE_FLG")]
		[ColumnEnum("EXECUSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ExecuseFlg = 11,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 12,
		/// <summary>
		/// ApproveAbsFlg : اعتماد الغياب
		/// </summary>
		[EnumTextValue("APPROVE_ABS_FLG")]
		[ColumnEnum("APPROVE_ABS_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveAbsFlg = 13,
		/// <summary>
		/// AutoFlg : اتوماتيك نتيجة طلب اعتذار لا يمكن التعديل فيه
		/// </summary>
		[EnumTextValue("AUTO_FLG")]
		[ColumnEnum("AUTO_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AutoFlg = 14,
		/// <summary>
		/// ScSchdlSlotId : Modular/SY Student جدول مجموعة طلاب- او جدول مجموعة مقرر
		/// </summary>
		[EnumTextValue("SC_SCHDL_SLOT_ID")]
		[ColumnEnum("SC_SCHDL_SLOT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScSchdlSlotId = 15,
		/// <summary>
		/// AbsNotes : 
		/// </summary>
		[EnumTextValue("ABS_NOTES")]
		[ColumnEnum("ABS_NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		AbsNotes = 16,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 17,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 18
	}//End enum

	#endregion EdStudAbsenceColumn Enum

} // end namespace
