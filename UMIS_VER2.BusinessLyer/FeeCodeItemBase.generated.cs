
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeCodeItem.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_CODE_ITEM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeCodeItemBase : EntityBase, IFeeCodeItem, IEntityId<FeeCodeItemKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeCodeItemEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeCodeItemEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeCodeItemEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeCodeItem> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCodeItemEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCodeItemEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeCodeItemBase"/> instance.
		///</summary>
		public FeeCodeItemBase()
		{
			this.entityData = new FeeCodeItemEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeCodeItemBase"/> instance.
		///</summary>
		///<param name="_feeCodeItemId"></param>
		///<param name="_feeCodeTypeId">نوع البند</param>
		///<param name="_descrAr">اسم البند</param>
		///<param name="_descrEn">اسم البند</param>
		///<param name="_asCodeDegreeClassId">نوع الدرجة</param>
		///<param name="_asCodeDegreeId">XX to be deleted</param>
		///<param name="_itemOrdr"></param>
		///<param name="_oldId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_editFlg">XX to be deleted</param>
		///<param name="_enumId">Constant ENUM ID usd in code /sp</param>
		///<param name="_accNo"></param>
		///<param name="_prntId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_taxPercent">نسبة الضريبة على البند</param>
		public FeeCodeItemBase(System.Decimal _feeCodeItemId, System.Decimal _feeCodeTypeId, 
			System.String _descrAr, System.String _descrEn, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _asCodeDegreeId, System.Int32? _itemOrdr, System.Int32? _oldId, System.Decimal? _edCodeSemesterId, 
			System.Boolean? _editFlg, System.Int32? _enumId, System.Int32? _accNo, System.Int32? _prntId, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal? _taxPercent)
		{
			this.entityData = new FeeCodeItemEntityData();
			this.backupData = null;

			this.FeeCodeItemId = _feeCodeItemId;
			this.FeeCodeTypeId = _feeCodeTypeId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.ItemOrdr = _itemOrdr;
			this.OldId = _oldId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EditFlg = _editFlg;
			this.EnumId = _enumId;
			this.AccNo = _accNo;
			this.PrntId = _prntId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.TaxPercent = _taxPercent;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeCodeItem"/> instance.
		///</summary>
		///<param name="_feeCodeItemId"></param>
		///<param name="_feeCodeTypeId">نوع البند</param>
		///<param name="_descrAr">اسم البند</param>
		///<param name="_descrEn">اسم البند</param>
		///<param name="_asCodeDegreeClassId">نوع الدرجة</param>
		///<param name="_asCodeDegreeId">XX to be deleted</param>
		///<param name="_itemOrdr"></param>
		///<param name="_oldId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_editFlg">XX to be deleted</param>
		///<param name="_enumId">Constant ENUM ID usd in code /sp</param>
		///<param name="_accNo"></param>
		///<param name="_prntId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_taxPercent">نسبة الضريبة على البند</param>
		public static FeeCodeItem CreateFeeCodeItem(System.Decimal _feeCodeItemId, System.Decimal _feeCodeTypeId, 
			System.String _descrAr, System.String _descrEn, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _asCodeDegreeId, System.Int32? _itemOrdr, System.Int32? _oldId, System.Decimal? _edCodeSemesterId, 
			System.Boolean? _editFlg, System.Int32? _enumId, System.Int32? _accNo, System.Int32? _prntId, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal? _taxPercent)
		{
			FeeCodeItem newFeeCodeItem = new FeeCodeItem();
			newFeeCodeItem.FeeCodeItemId = _feeCodeItemId;
			newFeeCodeItem.FeeCodeTypeId = _feeCodeTypeId;
			newFeeCodeItem.DescrAr = _descrAr;
			newFeeCodeItem.DescrEn = _descrEn;
			newFeeCodeItem.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newFeeCodeItem.AsCodeDegreeId = _asCodeDegreeId;
			newFeeCodeItem.ItemOrdr = _itemOrdr;
			newFeeCodeItem.OldId = _oldId;
			newFeeCodeItem.EdCodeSemesterId = _edCodeSemesterId;
			newFeeCodeItem.EditFlg = _editFlg;
			newFeeCodeItem.EnumId = _enumId;
			newFeeCodeItem.AccNo = _accNo;
			newFeeCodeItem.PrntId = _prntId;
			newFeeCodeItem.SeUserId = _seUserId;
			newFeeCodeItem.LastDate = _lastDate;
			newFeeCodeItem.TaxPercent = _taxPercent;
			return newFeeCodeItem;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				this.EntityId.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_CODE_ITEM_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FEE_CODE_ITEM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeCodeItemId
		{
			get { return this.entityData.OriginalFeeCodeItemId; }
			set { this.entityData.OriginalFeeCodeItemId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeTypeId property. 
		///		نوع البند
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع البند"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCodeTypeId
		{
			get
			{
				return this.entityData.FeeCodeTypeId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeTypeId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.FeeCodeTypeId, this.entityData.FeeCodeTypeId);
				this.entityData.FeeCodeTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.FeeCodeTypeId, this.entityData.FeeCodeTypeId);
				OnPropertyChanged("FeeCodeTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		اسم البند
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم البند"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		اسم البند
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم البند"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		نوع الدرجة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الدرجة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		XX to be deleted
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX to be deleted"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ItemOrdr property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsItemOrdrNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ItemOrdr
		{
			get
			{
				return this.entityData.ItemOrdr; 
			}
			
			set
			{
				if (this.entityData.ItemOrdr == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.ItemOrdr, this.entityData.ItemOrdr);
				this.entityData.ItemOrdr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.ItemOrdr, this.entityData.ItemOrdr);
				OnPropertyChanged("ItemOrdr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OldId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOldIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OldId
		{
			get
			{
				return this.entityData.OldId; 
			}
			
			set
			{
				if (this.entityData.OldId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.OldId, this.entityData.OldId);
				this.entityData.OldId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.OldId, this.entityData.OldId);
				OnPropertyChanged("OldId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EditFlg property. 
		///		XX to be deleted
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEditFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX to be deleted"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EditFlg
		{
			get
			{
				return this.entityData.EditFlg; 
			}
			
			set
			{
				if (this.entityData.EditFlg == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.EditFlg, this.entityData.EditFlg);
				this.entityData.EditFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.EditFlg, this.entityData.EditFlg);
				OnPropertyChanged("EditFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnumId property. 
		///		Constant ENUM ID usd in code /sp
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEnumIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Constant ENUM ID usd in code /sp"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EnumId
		{
			get
			{
				return this.entityData.EnumId; 
			}
			
			set
			{
				if (this.entityData.EnumId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.EnumId, this.entityData.EnumId);
				this.entityData.EnumId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.EnumId, this.entityData.EnumId);
				OnPropertyChanged("EnumId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccNo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAccNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AccNo
		{
			get
			{
				return this.entityData.AccNo; 
			}
			
			set
			{
				if (this.entityData.AccNo == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.AccNo, this.entityData.AccNo);
				this.entityData.AccNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.AccNo, this.entityData.AccNo);
				OnPropertyChanged("AccNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrntId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPrntIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PrntId
		{
			get
			{
				return this.entityData.PrntId; 
			}
			
			set
			{
				if (this.entityData.PrntId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.PrntId, this.entityData.PrntId);
				this.entityData.PrntId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.PrntId, this.entityData.PrntId);
				OnPropertyChanged("PrntId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxPercent property. 
		///		نسبة الضريبة على البند
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTaxPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نسبة الضريبة على البند"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TaxPercent
		{
			get
			{
				return this.entityData.TaxPercent; 
			}
			
			set
			{
				if (this.entityData.TaxPercent == value)
					return;
					
				OnColumnChanging(FeeCodeItemColumn.TaxPercent, this.entityData.TaxPercent);
				this.entityData.TaxPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeItemColumn.TaxPercent, this.entityData.TaxPercent);
				OnPropertyChanged("TaxPercent");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeType"/>.
		/// </summary>
		/// <value>The source FeeCodeType for FeeCodeTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeType FeeCodeTypeIdSource
      	{
            get { return entityData.FeeCodeTypeIdSource; }
            set { entityData.FeeCodeTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeBusLineItem objects
		///	which are related to this object through the relation FK_FEE_BUS_LINE_ITEM_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeBusLineItem> FeeBusLineItemCollection
		{
			get { return entityData.FeeBusLineItemCollection; }
			set { entityData.FeeBusLineItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeItemSemester objects
		///	which are related to this object through the relation FK_FEE_ITEM_SEMESTER_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeItemSemester> FeeItemSemesterCollection
		{
			get { return entityData.FeeItemSemesterCollection; }
			set { entityData.FeeItemSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeFee objects
		///	which are related to this object through the relation FK_ADM_CDE_FEE_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get { return entityData.AdmCdeFeeCollection; }
			set { entityData.AdmCdeFeeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudCoursesItem objects
		///	which are related to this object through the relation FK_FEE_STUD_COURSES_ITEM_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudCoursesItem> FeeStudCoursesItemCollection
		{
			get { return entityData.FeeStudCoursesItemCollection; }
			set { entityData.FeeStudCoursesItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefundCodeDtl objects
		///	which are related to this object through the relation FK_FEE_REFUND_CODE_DTL_FEE_CODE_ITEM2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId
		{
			get { return entityData.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId; }
			set { entityData.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeItemTrnsBlnc objects
		///	which are related to this object through the relation FK_FEE_ITEM_TRNS_BLNC_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get { return entityData.FeeItemTrnsBlncCollection; }
			set { entityData.FeeItemTrnsBlncCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdPrintReq objects
		///	which are related to this object through the relation FK_ED_PRINT_REQ_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdPrintReq> EdPrintReqCollection
		{
			get { return entityData.EdPrintReqCollection; }
			set { entityData.EdPrintReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoSponsorFeeItem objects
		///	which are related to this object through the relation FK_SPO_SPONSOR_FEE_ITEM_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoSponsorFeeItem> SpoSponsorFeeItemCollection
		{
			get { return entityData.SpoSponsorFeeItemCollection; }
			set { entityData.SpoSponsorFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFine objects
		///	which are related to this object through the relation FK_FEE_FINE_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFine> FeeFineCollection
		{
			get { return entityData.FeeFineCollection; }
			set { entityData.FeeFineCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudFeeItem objects
		///	which are related to this object through the relation FK_AUTO_003c
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get { return entityData.FeeStudFeeItemCollection; }
			set { entityData.FeeStudFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDiscFeeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_FEE_ITEM_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDiscFeeItem> FeeStudDiscFeeItemCollection
		{
			get { return entityData.FeeStudDiscFeeItemCollection; }
			set { entityData.FeeStudDiscFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeSemesterAgenda objects
		///	which are related to this object through the relation FK_FEE_SEMESTER_AGENDA_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeSemesterAgenda> FeeSemesterAgendaCollection
		{
			get { return entityData.FeeSemesterAgendaCollection; }
			set { entityData.FeeSemesterAgendaCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefundCodeDtl objects
		///	which are related to this object through the relation FK_FEE_REFUND_CODE_DTL_FEE_CODE_ITEM1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId
		{
			get { return entityData.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId; }
			set { entityData.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyItem objects
		///	which are related to this object through the relation FK_FEE_FAC_ITEM_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyItem> FeeFacultyItemCollection
		{
			get { return entityData.FeeFacultyItemCollection; }
			set { entityData.FeeFacultyItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefundCodeDtl objects
		///	which are related to this object through the relation FK_FEE_REFUND_CODE_DTL_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollectionGetByFeeCodeItemId
		{
			get { return entityData.FeeRefundCodeDtlCollectionGetByFeeCodeItemId; }
			set { entityData.FeeRefundCodeDtlCollectionGetByFeeCodeItemId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudItemCncl objects
		///	which are related to this object through the relation FK_FEE_STUD_ITEM_CNCL_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudItemCncl> FeeStudItemCnclCollection
		{
			get { return entityData.FeeStudItemCnclCollection; }
			set { entityData.FeeStudItemCnclCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AccomStudReq objects
		///	which are related to this object through the relation FK_ACCOM_STUD_REQ_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccomStudReq> AccomStudReqCollection
		{
			get { return entityData.AccomStudReqCollection; }
			set { entityData.AccomStudReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDiscCodeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_CODE_ITEM_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDiscCodeItem> FeeStudDiscCodeItemCollection
		{
			get { return entityData.FeeStudDiscCodeItemCollection; }
			set { entityData.FeeStudDiscCodeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeAccomItem objects
		///	which are related to this object through the relation FK_FEE_ACCOM_ITEM_FEE_CODE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeAccomItem> FeeAccomItemCollection
		{
			get { return entityData.FeeAccomItemCollection; }
			set { entityData.FeeAccomItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_CODE_ITEM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_CODE_ITEM_ID", "FEE_CODE_TYPE_ID", "DESCR_AR", "DESCR_EN", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "ITEM_ORDR", "OldId", "ED_CODE_SEMESTER_ID", "EDIT_FLG", "ENUM_ID", "ACC_NO", "PRNT_ID", "SE_USER_ID", "LAST_DATE", "TAX_PERCENT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeCodeItemEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeCodeItem) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeCodeItem>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeCodeItem);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeCodeItem Entity 
		///</summary>
		protected virtual FeeCodeItem Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeCodeItem copy = new FeeCodeItem();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeCodeItemId = this.FeeCodeItemId;
					copy.OriginalFeeCodeItemId = this.OriginalFeeCodeItemId;
				copy.FeeCodeTypeId = this.FeeCodeTypeId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.ItemOrdr = this.ItemOrdr;
				copy.OldId = this.OldId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EditFlg = this.EditFlg;
				copy.EnumId = this.EnumId;
				copy.AccNo = this.AccNo;
				copy.PrntId = this.PrntId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.TaxPercent = this.TaxPercent;
			
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.FeeCodeTypeIdSource != null && existingCopies.Contains(this.FeeCodeTypeIdSource))
				copy.FeeCodeTypeIdSource = existingCopies[this.FeeCodeTypeIdSource] as FeeCodeType;
			else
				copy.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource, existingCopies) as FeeCodeType;
		
			//deep copy nested objects
			copy.FeeBusLineItemCollection = (TList<FeeBusLineItem>) MakeCopyOf(this.FeeBusLineItemCollection, existingCopies); 
			copy.FeeItemSemesterCollection = (TList<FeeItemSemester>) MakeCopyOf(this.FeeItemSemesterCollection, existingCopies); 
			copy.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			copy.FeeStudCoursesItemCollection = (TList<FeeStudCoursesItem>) MakeCopyOf(this.FeeStudCoursesItemCollection, existingCopies); 
			copy.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId, existingCopies); 
			copy.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			copy.EdPrintReqCollection = (TList<EdPrintReq>) MakeCopyOf(this.EdPrintReqCollection, existingCopies); 
			copy.SpoSponsorFeeItemCollection = (TList<SpoSponsorFeeItem>) MakeCopyOf(this.SpoSponsorFeeItemCollection, existingCopies); 
			copy.FeeFineCollection = (TList<FeeFine>) MakeCopyOf(this.FeeFineCollection, existingCopies); 
			copy.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			copy.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection, existingCopies); 
			copy.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection, existingCopies); 
			copy.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId, existingCopies); 
			copy.FeeFacultyItemCollection = (TList<FeeFacultyItem>) MakeCopyOf(this.FeeFacultyItemCollection, existingCopies); 
			copy.FeeRefundCodeDtlCollectionGetByFeeCodeItemId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemId, existingCopies); 
			copy.FeeStudItemCnclCollection = (TList<FeeStudItemCncl>) MakeCopyOf(this.FeeStudItemCnclCollection, existingCopies); 
			copy.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection, existingCopies); 
			copy.FeeStudDiscCodeItemCollection = (TList<FeeStudDiscCodeItem>) MakeCopyOf(this.FeeStudDiscCodeItemCollection, existingCopies); 
			copy.FeeAccomItemCollection = (TList<FeeAccomItem>) MakeCopyOf(this.FeeAccomItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeCodeItem Entity 
		///</summary>
		public virtual FeeCodeItem Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeCodeItem Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeCodeItem DeepCopy()
		{
			return EntityHelper.Clone<FeeCodeItem>(this as FeeCodeItem);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeCodeItemEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeCodeItemEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeCodeItemEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeCodeItemColumn column)
		{
			switch(column)
			{
					case FeeCodeItemColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case FeeCodeItemColumn.FeeCodeTypeId:
					return entityData.FeeCodeTypeId != _originalData.FeeCodeTypeId;
					case FeeCodeItemColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case FeeCodeItemColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case FeeCodeItemColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case FeeCodeItemColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case FeeCodeItemColumn.ItemOrdr:
					return entityData.ItemOrdr != _originalData.ItemOrdr;
					case FeeCodeItemColumn.OldId:
					return entityData.OldId != _originalData.OldId;
					case FeeCodeItemColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case FeeCodeItemColumn.EditFlg:
					return entityData.EditFlg != _originalData.EditFlg;
					case FeeCodeItemColumn.EnumId:
					return entityData.EnumId != _originalData.EnumId;
					case FeeCodeItemColumn.AccNo:
					return entityData.AccNo != _originalData.AccNo;
					case FeeCodeItemColumn.PrntId:
					return entityData.PrntId != _originalData.PrntId;
					case FeeCodeItemColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeCodeItemColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case FeeCodeItemColumn.TaxPercent:
					return entityData.TaxPercent != _originalData.TaxPercent;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeCodeItemColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.FeeCodeTypeId != _originalData.FeeCodeTypeId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.ItemOrdr != _originalData.ItemOrdr;
			result = result || entityData.OldId != _originalData.OldId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EditFlg != _originalData.EditFlg;
			result = result || entityData.EnumId != _originalData.EnumId;
			result = result || entityData.AccNo != _originalData.AccNo;
			result = result || entityData.PrntId != _originalData.PrntId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.TaxPercent != _originalData.TaxPercent;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeCodeItem Entity with the original data.
		///</summary>
		public FeeCodeItem GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeCodeItem(
				_originalData.FeeCodeItemId,
				_originalData.FeeCodeTypeId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.ItemOrdr,
				_originalData.OldId,
				_originalData.EdCodeSemesterId,
				_originalData.EditFlg,
				_originalData.EnumId,
				_originalData.AccNo,
				_originalData.PrntId,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.TaxPercent
				);
				
			return (FeeCodeItem)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeCodeItemBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeCodeItemBase)
				return ValueEquals(this, (FeeCodeItemBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeCodeItemBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeCodeItemId.GetHashCode() ^ 
					this.FeeCodeTypeId.GetHashCode() ^ 
					((this.DescrAr == null) ? string.Empty : this.DescrAr.ToString()).GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.ItemOrdr == null) ? string.Empty : this.ItemOrdr.ToString()).GetHashCode() ^ 
					((this.OldId == null) ? string.Empty : this.OldId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.EditFlg == null) ? string.Empty : this.EditFlg.ToString()).GetHashCode() ^ 
					((this.EnumId == null) ? string.Empty : this.EnumId.ToString()).GetHashCode() ^ 
					((this.AccNo == null) ? string.Empty : this.AccNo.ToString()).GetHashCode() ^ 
					((this.PrntId == null) ? string.Empty : this.PrntId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.TaxPercent == null) ? string.Empty : this.TaxPercent.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeCodeItemBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeCodeItemBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeCodeItemBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeCodeItemBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeCodeItemBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeCodeItemBase Object1, FeeCodeItemBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
				equal = false;
			if (Object1.FeeCodeTypeId != Object2.FeeCodeTypeId)
				equal = false;
			if ( Object1.DescrAr != null && Object2.DescrAr != null )
			{
				if (Object1.DescrAr != Object2.DescrAr)
					equal = false;
			}
			else if (Object1.DescrAr == null ^ Object2.DescrAr == null )
			{
				equal = false;
			}
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.ItemOrdr != null && Object2.ItemOrdr != null )
			{
				if (Object1.ItemOrdr != Object2.ItemOrdr)
					equal = false;
			}
			else if (Object1.ItemOrdr == null ^ Object2.ItemOrdr == null )
			{
				equal = false;
			}
			if ( Object1.OldId != null && Object2.OldId != null )
			{
				if (Object1.OldId != Object2.OldId)
					equal = false;
			}
			else if (Object1.OldId == null ^ Object2.OldId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.EditFlg != null && Object2.EditFlg != null )
			{
				if (Object1.EditFlg != Object2.EditFlg)
					equal = false;
			}
			else if (Object1.EditFlg == null ^ Object2.EditFlg == null )
			{
				equal = false;
			}
			if ( Object1.EnumId != null && Object2.EnumId != null )
			{
				if (Object1.EnumId != Object2.EnumId)
					equal = false;
			}
			else if (Object1.EnumId == null ^ Object2.EnumId == null )
			{
				equal = false;
			}
			if ( Object1.AccNo != null && Object2.AccNo != null )
			{
				if (Object1.AccNo != Object2.AccNo)
					equal = false;
			}
			else if (Object1.AccNo == null ^ Object2.AccNo == null )
			{
				equal = false;
			}
			if ( Object1.PrntId != null && Object2.PrntId != null )
			{
				if (Object1.PrntId != Object2.PrntId)
					equal = false;
			}
			else if (Object1.PrntId == null ^ Object2.PrntId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.TaxPercent != null && Object2.TaxPercent != null )
			{
				if (Object1.TaxPercent != Object2.TaxPercent)
					equal = false;
			}
			else if (Object1.TaxPercent == null ^ Object2.TaxPercent == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeCodeItemBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeCodeItemComparer GetComparer()
        {
            return new FeeCodeItemComparer();
        }
        */

        // Comparer delegates back to FeeCodeItem
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeCodeItem rhs, FeeCodeItemColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeCodeItemColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.CompareTo(rhs.FeeCodeItemId);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.FeeCodeTypeId:
            		return this.FeeCodeTypeId.CompareTo(rhs.FeeCodeTypeId);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.ItemOrdr:
            		return this.ItemOrdr.Value.CompareTo(rhs.ItemOrdr.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.OldId:
            		return this.OldId.Value.CompareTo(rhs.OldId.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.EditFlg:
            		return this.EditFlg.Value.CompareTo(rhs.EditFlg.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.EnumId:
            		return this.EnumId.Value.CompareTo(rhs.EnumId.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.AccNo:
            		return this.AccNo.Value.CompareTo(rhs.AccNo.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.PrntId:
            		return this.PrntId.Value.CompareTo(rhs.PrntId.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case FeeCodeItemColumn.TaxPercent:
            		return this.TaxPercent.Value.CompareTo(rhs.TaxPercent.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeCodeItemKey> Members
		
		// member variable for the EntityId property
		private FeeCodeItemKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeCodeItemKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeCodeItemKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeCodeItem")
					.Append("|").Append( this.FeeCodeItemId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- FeeCodeItemId: {0}{16}- FeeCodeTypeId: {1}{16}- DescrAr: {2}{16}- DescrEn: {3}{16}- AsCodeDegreeClassId: {4}{16}- AsCodeDegreeId: {5}{16}- ItemOrdr: {6}{16}- OldId: {7}{16}- EdCodeSemesterId: {8}{16}- EditFlg: {9}{16}- EnumId: {10}{16}- AccNo: {11}{16}- PrntId: {12}{16}- SeUserId: {13}{16}- LastDate: {14}{16}- TaxPercent: {15}{16}{18}", 
				this.FeeCodeItemId,
				this.FeeCodeTypeId,
				(this.DescrAr == null) ? string.Empty : this.DescrAr.ToString(),
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.ItemOrdr == null) ? string.Empty : this.ItemOrdr.ToString(),
				(this.OldId == null) ? string.Empty : this.OldId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.EditFlg == null) ? string.Empty : this.EditFlg.ToString(),
				(this.EnumId == null) ? string.Empty : this.EnumId.ToString(),
				(this.AccNo == null) ? string.Empty : this.AccNo.ToString(),
				(this.PrntId == null) ? string.Empty : this.PrntId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.TaxPercent == null) ? string.Empty : this.TaxPercent.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_CODE_ITEM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeCodeItemEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_CODE_ITEM_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_CODE_ITEM"</remarks>
		public System.Decimal FeeCodeItemId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeCodeItemId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FEE_CODE_TYPE_ID : نوع البند
		/// </summary>
		public System.Decimal		  FeeCodeTypeId = 0.0m;
		
		/// <summary>
		/// DESCR_AR : اسم البند
		/// </summary>
		public System.String		  DescrAr = null;
		
		/// <summary>
		/// DESCR_EN : اسم البند
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : نوع الدرجة
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : XX to be deleted
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// ITEM_ORDR : 
		/// </summary>
		public System.Int32?		  ItemOrdr = null;
		
		/// <summary>
		/// OldId : 
		/// </summary>
		public System.Int32?		  OldId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// EDIT_FLG : XX to be deleted
		/// </summary>
		public System.Boolean?		  EditFlg = null;
		
		/// <summary>
		/// ENUM_ID : Constant ENUM ID usd in code /sp
		/// </summary>
		public System.Int32?		  EnumId = null;
		
		/// <summary>
		/// ACC_NO : 
		/// </summary>
		public System.Int32?		  AccNo = null;
		
		/// <summary>
		/// PRNT_ID : 
		/// </summary>
		public System.Int32?		  PrntId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// TAX_PERCENT : نسبة الضريبة على البند
		/// </summary>
		public System.Decimal?		  TaxPercent = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private FeeCodeType _feeCodeTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeType"/>.
		/// </summary>
		/// <value>The source FeeCodeType for FeeCodeTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeType FeeCodeTypeIdSource
      	{
            get { return this._feeCodeTypeIdSource; }
            set { this._feeCodeTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeBusLineItemCollection
		
		private TList<FeeBusLineItem> _feeBusLineItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeBusLineItemFeeCodeItemId
		/// </summary>
		
		public TList<FeeBusLineItem> FeeBusLineItemCollection
		{
			get
			{
				if (_feeBusLineItemFeeCodeItemId == null)
				{
				_feeBusLineItemFeeCodeItemId = new TList<FeeBusLineItem>();
				}
	
				return _feeBusLineItemFeeCodeItemId;
			}
			set { _feeBusLineItemFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeItemSemesterCollection
		
		private TList<FeeItemSemester> _feeItemSemesterFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeItemSemesterFeeCodeItemId
		/// </summary>
		
		public TList<FeeItemSemester> FeeItemSemesterCollection
		{
			get
			{
				if (_feeItemSemesterFeeCodeItemId == null)
				{
				_feeItemSemesterFeeCodeItemId = new TList<FeeItemSemester>();
				}
	
				return _feeItemSemesterFeeCodeItemId;
			}
			set { _feeItemSemesterFeeCodeItemId = value; }
		}
		
		#endregion

		#region AdmCdeFeeCollection
		
		private TList<AdmCdeFee> _admCdeFeeFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeFeeFeeCodeItemId
		/// </summary>
		
		public TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get
			{
				if (_admCdeFeeFeeCodeItemId == null)
				{
				_admCdeFeeFeeCodeItemId = new TList<AdmCdeFee>();
				}
	
				return _admCdeFeeFeeCodeItemId;
			}
			set { _admCdeFeeFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeStudCoursesItemCollection
		
		private TList<FeeStudCoursesItem> _feeStudCoursesItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudCoursesItemFeeCodeItemId
		/// </summary>
		
		public TList<FeeStudCoursesItem> FeeStudCoursesItemCollection
		{
			get
			{
				if (_feeStudCoursesItemFeeCodeItemId == null)
				{
				_feeStudCoursesItemFeeCodeItemId = new TList<FeeStudCoursesItem>();
				}
	
				return _feeStudCoursesItemFeeCodeItemId;
			}
			set { _feeStudCoursesItemFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId
		
		private TList<FeeRefundCodeDtl> _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemPnftId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemPnftId
		/// </summary>
		
		public TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId
		{
			get
			{
				if (_feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemPnftId == null)
				{
				_feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemPnftId = new TList<FeeRefundCodeDtl>();
				}
	
				return _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemPnftId;
			}
			set { _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemPnftId = value; }
		}
		
		#endregion

		#region FeeItemTrnsBlncCollection
		
		private TList<FeeItemTrnsBlnc> _feeItemTrnsBlncFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeItemTrnsBlncFeeCodeItemId
		/// </summary>
		
		public TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get
			{
				if (_feeItemTrnsBlncFeeCodeItemId == null)
				{
				_feeItemTrnsBlncFeeCodeItemId = new TList<FeeItemTrnsBlnc>();
				}
	
				return _feeItemTrnsBlncFeeCodeItemId;
			}
			set { _feeItemTrnsBlncFeeCodeItemId = value; }
		}
		
		#endregion

		#region EdPrintReqCollection
		
		private TList<EdPrintReq> _edPrintReqFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edPrintReqFeeCodeItemId
		/// </summary>
		
		public TList<EdPrintReq> EdPrintReqCollection
		{
			get
			{
				if (_edPrintReqFeeCodeItemId == null)
				{
				_edPrintReqFeeCodeItemId = new TList<EdPrintReq>();
				}
	
				return _edPrintReqFeeCodeItemId;
			}
			set { _edPrintReqFeeCodeItemId = value; }
		}
		
		#endregion

		#region SpoSponsorFeeItemCollection
		
		private TList<SpoSponsorFeeItem> _spoSponsorFeeItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoSponsorFeeItemFeeCodeItemId
		/// </summary>
		
		public TList<SpoSponsorFeeItem> SpoSponsorFeeItemCollection
		{
			get
			{
				if (_spoSponsorFeeItemFeeCodeItemId == null)
				{
				_spoSponsorFeeItemFeeCodeItemId = new TList<SpoSponsorFeeItem>();
				}
	
				return _spoSponsorFeeItemFeeCodeItemId;
			}
			set { _spoSponsorFeeItemFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeFineCollection
		
		private TList<FeeFine> _feeFineFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFineFeeCodeItemId
		/// </summary>
		
		public TList<FeeFine> FeeFineCollection
		{
			get
			{
				if (_feeFineFeeCodeItemId == null)
				{
				_feeFineFeeCodeItemId = new TList<FeeFine>();
				}
	
				return _feeFineFeeCodeItemId;
			}
			set { _feeFineFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeStudFeeItemCollection
		
		private TList<FeeStudFeeItem> _feeStudFeeItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudFeeItemFeeCodeItemId
		/// </summary>
		
		public TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get
			{
				if (_feeStudFeeItemFeeCodeItemId == null)
				{
				_feeStudFeeItemFeeCodeItemId = new TList<FeeStudFeeItem>();
				}
	
				return _feeStudFeeItemFeeCodeItemId;
			}
			set { _feeStudFeeItemFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeStudDiscFeeItemCollection
		
		private TList<FeeStudDiscFeeItem> _feeStudDiscFeeItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscFeeItemFeeCodeItemId
		/// </summary>
		
		public TList<FeeStudDiscFeeItem> FeeStudDiscFeeItemCollection
		{
			get
			{
				if (_feeStudDiscFeeItemFeeCodeItemId == null)
				{
				_feeStudDiscFeeItemFeeCodeItemId = new TList<FeeStudDiscFeeItem>();
				}
	
				return _feeStudDiscFeeItemFeeCodeItemId;
			}
			set { _feeStudDiscFeeItemFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeSemesterAgendaCollection
		
		private TList<FeeSemesterAgenda> _feeSemesterAgendaFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeSemesterAgendaFeeCodeItemId
		/// </summary>
		
		public TList<FeeSemesterAgenda> FeeSemesterAgendaCollection
		{
			get
			{
				if (_feeSemesterAgendaFeeCodeItemId == null)
				{
				_feeSemesterAgendaFeeCodeItemId = new TList<FeeSemesterAgenda>();
				}
	
				return _feeSemesterAgendaFeeCodeItemId;
			}
			set { _feeSemesterAgendaFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId
		
		private TList<FeeRefundCodeDtl> _feeRefundCodeDtlFeeCodeItemRltIdGetByFeeCodeItemRltId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefundCodeDtlFeeCodeItemRltIdGetByFeeCodeItemRltId
		/// </summary>
		
		public TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId
		{
			get
			{
				if (_feeRefundCodeDtlFeeCodeItemRltIdGetByFeeCodeItemRltId == null)
				{
				_feeRefundCodeDtlFeeCodeItemRltIdGetByFeeCodeItemRltId = new TList<FeeRefundCodeDtl>();
				}
	
				return _feeRefundCodeDtlFeeCodeItemRltIdGetByFeeCodeItemRltId;
			}
			set { _feeRefundCodeDtlFeeCodeItemRltIdGetByFeeCodeItemRltId = value; }
		}
		
		#endregion

		#region FeeFacultyItemCollection
		
		private TList<FeeFacultyItem> _feeFacultyItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyItemFeeCodeItemId
		/// </summary>
		
		public TList<FeeFacultyItem> FeeFacultyItemCollection
		{
			get
			{
				if (_feeFacultyItemFeeCodeItemId == null)
				{
				_feeFacultyItemFeeCodeItemId = new TList<FeeFacultyItem>();
				}
	
				return _feeFacultyItemFeeCodeItemId;
			}
			set { _feeFacultyItemFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeRefundCodeDtlCollectionGetByFeeCodeItemId
		
		private TList<FeeRefundCodeDtl> _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemId
		/// </summary>
		
		public TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollectionGetByFeeCodeItemId
		{
			get
			{
				if (_feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemId == null)
				{
				_feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemId = new TList<FeeRefundCodeDtl>();
				}
	
				return _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemId;
			}
			set { _feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeStudItemCnclCollection
		
		private TList<FeeStudItemCncl> _feeStudItemCnclFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudItemCnclFeeCodeItemId
		/// </summary>
		
		public TList<FeeStudItemCncl> FeeStudItemCnclCollection
		{
			get
			{
				if (_feeStudItemCnclFeeCodeItemId == null)
				{
				_feeStudItemCnclFeeCodeItemId = new TList<FeeStudItemCncl>();
				}
	
				return _feeStudItemCnclFeeCodeItemId;
			}
			set { _feeStudItemCnclFeeCodeItemId = value; }
		}
		
		#endregion

		#region AccomStudReqCollection
		
		private TList<AccomStudReq> _accomStudReqFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accomStudReqFeeCodeItemId
		/// </summary>
		
		public TList<AccomStudReq> AccomStudReqCollection
		{
			get
			{
				if (_accomStudReqFeeCodeItemId == null)
				{
				_accomStudReqFeeCodeItemId = new TList<AccomStudReq>();
				}
	
				return _accomStudReqFeeCodeItemId;
			}
			set { _accomStudReqFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeStudDiscCodeItemCollection
		
		private TList<FeeStudDiscCodeItem> _feeStudDiscCodeItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscCodeItemFeeCodeItemId
		/// </summary>
		
		public TList<FeeStudDiscCodeItem> FeeStudDiscCodeItemCollection
		{
			get
			{
				if (_feeStudDiscCodeItemFeeCodeItemId == null)
				{
				_feeStudDiscCodeItemFeeCodeItemId = new TList<FeeStudDiscCodeItem>();
				}
	
				return _feeStudDiscCodeItemFeeCodeItemId;
			}
			set { _feeStudDiscCodeItemFeeCodeItemId = value; }
		}
		
		#endregion

		#region FeeAccomItemCollection
		
		private TList<FeeAccomItem> _feeAccomItemFeeCodeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeAccomItemFeeCodeItemId
		/// </summary>
		
		public TList<FeeAccomItem> FeeAccomItemCollection
		{
			get
			{
				if (_feeAccomItemFeeCodeItemId == null)
				{
				_feeAccomItemFeeCodeItemId = new TList<FeeAccomItem>();
				}
	
				return _feeAccomItemFeeCodeItemId;
			}
			set { _feeAccomItemFeeCodeItemId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeCodeItemEntityData _tmp = new FeeCodeItemEntityData();
						
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.OriginalFeeCodeItemId = this.OriginalFeeCodeItemId;
			
			_tmp.FeeCodeTypeId = this.FeeCodeTypeId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.ItemOrdr = this.ItemOrdr;
			_tmp.OldId = this.OldId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EditFlg = this.EditFlg;
			_tmp.EnumId = this.EnumId;
			_tmp.AccNo = this.AccNo;
			_tmp.PrntId = this.PrntId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.TaxPercent = this.TaxPercent;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.FeeCodeTypeIdSource != null)
				_tmp.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource) as FeeCodeType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeBusLineItemFeeCodeItemId != null)
				_tmp.FeeBusLineItemCollection = (TList<FeeBusLineItem>) MakeCopyOf(this.FeeBusLineItemCollection); 
			if (this._feeItemSemesterFeeCodeItemId != null)
				_tmp.FeeItemSemesterCollection = (TList<FeeItemSemester>) MakeCopyOf(this.FeeItemSemesterCollection); 
			if (this._admCdeFeeFeeCodeItemId != null)
				_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection); 
			if (this._feeStudCoursesItemFeeCodeItemId != null)
				_tmp.FeeStudCoursesItemCollection = (TList<FeeStudCoursesItem>) MakeCopyOf(this.FeeStudCoursesItemCollection); 
			if (this._feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemPnftId != null)
				_tmp.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId); 
			if (this._feeItemTrnsBlncFeeCodeItemId != null)
				_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection); 
			if (this._edPrintReqFeeCodeItemId != null)
				_tmp.EdPrintReqCollection = (TList<EdPrintReq>) MakeCopyOf(this.EdPrintReqCollection); 
			if (this._spoSponsorFeeItemFeeCodeItemId != null)
				_tmp.SpoSponsorFeeItemCollection = (TList<SpoSponsorFeeItem>) MakeCopyOf(this.SpoSponsorFeeItemCollection); 
			if (this._feeFineFeeCodeItemId != null)
				_tmp.FeeFineCollection = (TList<FeeFine>) MakeCopyOf(this.FeeFineCollection); 
			if (this._feeStudFeeItemFeeCodeItemId != null)
				_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection); 
			if (this._feeStudDiscFeeItemFeeCodeItemId != null)
				_tmp.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection); 
			if (this._feeSemesterAgendaFeeCodeItemId != null)
				_tmp.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection); 
			if (this._feeRefundCodeDtlFeeCodeItemRltIdGetByFeeCodeItemRltId != null)
				_tmp.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId); 
			if (this._feeFacultyItemFeeCodeItemId != null)
				_tmp.FeeFacultyItemCollection = (TList<FeeFacultyItem>) MakeCopyOf(this.FeeFacultyItemCollection); 
			if (this._feeRefundCodeDtlFeeCodeItemPnftIdGetByFeeCodeItemId != null)
				_tmp.FeeRefundCodeDtlCollectionGetByFeeCodeItemId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemId); 
			if (this._feeStudItemCnclFeeCodeItemId != null)
				_tmp.FeeStudItemCnclCollection = (TList<FeeStudItemCncl>) MakeCopyOf(this.FeeStudItemCnclCollection); 
			if (this._accomStudReqFeeCodeItemId != null)
				_tmp.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection); 
			if (this._feeStudDiscCodeItemFeeCodeItemId != null)
				_tmp.FeeStudDiscCodeItemCollection = (TList<FeeStudDiscCodeItem>) MakeCopyOf(this.FeeStudDiscCodeItemCollection); 
			if (this._feeAccomItemFeeCodeItemId != null)
				_tmp.FeeAccomItemCollection = (TList<FeeAccomItem>) MakeCopyOf(this.FeeAccomItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeCodeItemEntityData _tmp = new FeeCodeItemEntityData();
						
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.OriginalFeeCodeItemId = this.OriginalFeeCodeItemId;
			
			_tmp.FeeCodeTypeId = this.FeeCodeTypeId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.ItemOrdr = this.ItemOrdr;
			_tmp.OldId = this.OldId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EditFlg = this.EditFlg;
			_tmp.EnumId = this.EnumId;
			_tmp.AccNo = this.AccNo;
			_tmp.PrntId = this.PrntId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.TaxPercent = this.TaxPercent;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.FeeCodeTypeIdSource != null && existingCopies.Contains(this.FeeCodeTypeIdSource))
				_tmp.FeeCodeTypeIdSource = existingCopies[this.FeeCodeTypeIdSource] as FeeCodeType;
			else
				_tmp.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource, existingCopies) as FeeCodeType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeBusLineItemCollection = (TList<FeeBusLineItem>) MakeCopyOf(this.FeeBusLineItemCollection, existingCopies); 
			_tmp.FeeItemSemesterCollection = (TList<FeeItemSemester>) MakeCopyOf(this.FeeItemSemesterCollection, existingCopies); 
			_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			_tmp.FeeStudCoursesItemCollection = (TList<FeeStudCoursesItem>) MakeCopyOf(this.FeeStudCoursesItemCollection, existingCopies); 
			_tmp.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemPnftId, existingCopies); 
			_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			_tmp.EdPrintReqCollection = (TList<EdPrintReq>) MakeCopyOf(this.EdPrintReqCollection, existingCopies); 
			_tmp.SpoSponsorFeeItemCollection = (TList<SpoSponsorFeeItem>) MakeCopyOf(this.SpoSponsorFeeItemCollection, existingCopies); 
			_tmp.FeeFineCollection = (TList<FeeFine>) MakeCopyOf(this.FeeFineCollection, existingCopies); 
			_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			_tmp.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection, existingCopies); 
			_tmp.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection, existingCopies); 
			_tmp.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemRltId, existingCopies); 
			_tmp.FeeFacultyItemCollection = (TList<FeeFacultyItem>) MakeCopyOf(this.FeeFacultyItemCollection, existingCopies); 
			_tmp.FeeRefundCodeDtlCollectionGetByFeeCodeItemId = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollectionGetByFeeCodeItemId, existingCopies); 
			_tmp.FeeStudItemCnclCollection = (TList<FeeStudItemCncl>) MakeCopyOf(this.FeeStudItemCnclCollection, existingCopies); 
			_tmp.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection, existingCopies); 
			_tmp.FeeStudDiscCodeItemCollection = (TList<FeeStudDiscCodeItem>) MakeCopyOf(this.FeeStudDiscCodeItemCollection, existingCopies); 
			_tmp.FeeAccomItemCollection = (TList<FeeAccomItem>) MakeCopyOf(this.FeeAccomItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeCodeItemColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeCodeItemColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeCodeItemColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeCodeItemEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeCodeItemEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeCodeItemColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeCodeItemEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeCodeItemEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeCodeItemEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeCodeItem"/> object.
	/// </remarks>
	public class FeeCodeItemEventArgs : System.EventArgs
	{
		private FeeCodeItemColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeCodeItemEventArgs class.
		///</summary>
		public FeeCodeItemEventArgs(FeeCodeItemColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeCodeItemEventArgs class.
		///</summary>
		public FeeCodeItemEventArgs(FeeCodeItemColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeCodeItemColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeCodeItemColumn" />
		public FeeCodeItemColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeCodeItem related events.
	///</summary>
	public delegate void FeeCodeItemEventHandler(object sender, FeeCodeItemEventArgs e);
	
	#region FeeCodeItemComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeCodeItemComparer : System.Collections.Generic.IComparer<FeeCodeItem>
	{
		FeeCodeItemColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCodeItemComparer"/> class.
        /// </summary>
		public FeeCodeItemComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCodeItemComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeCodeItemComparer(FeeCodeItemColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeCodeItem"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeCodeItem"/> to compare.</param>
        /// <param name="b">The second <c>FeeCodeItem</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeCodeItem a, FeeCodeItem b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeCodeItem entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeCodeItem a, FeeCodeItem b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeCodeItemColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeCodeItemKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeCodeItem"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeCodeItemKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeCodeItemKey class.
		/// </summary>
		public FeeCodeItemKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCodeItemKey class.
		/// </summary>
		public FeeCodeItemKey(FeeCodeItemBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeCodeItemId = entity.FeeCodeItemId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCodeItemKey class.
		/// </summary>
		public FeeCodeItemKey(System.Decimal _feeCodeItemId)
		{
			#region Init Properties

			this.FeeCodeItemId = _feeCodeItemId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeCodeItemBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeCodeItemBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeCodeItemId property
		private System.Decimal _feeCodeItemId;
		
		/// <summary>
		/// Gets or sets the FeeCodeItemId property.
		/// </summary>
		public System.Decimal FeeCodeItemId
		{
			get { return _feeCodeItemId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeCodeItemId = value;
				
				_feeCodeItemId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeCodeItemId = ( values["FeeCodeItemId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeCodeItemId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeCodeItemId", FeeCodeItemId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeCodeItemId: {0}{1}",
								FeeCodeItemId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeCodeItemColumn Enum
	
	/// <summary>
	/// Enumerate the FeeCodeItem columns.
	/// </summary>
	[Serializable]
	public enum FeeCodeItemColumn : int
	{
		/// <summary>
		/// FeeCodeItemId : 
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeCodeItemId = 1,
		/// <summary>
		/// FeeCodeTypeId : نوع البند
		/// </summary>
		[EnumTextValue("FEE_CODE_TYPE_ID")]
		[ColumnEnum("FEE_CODE_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeTypeId = 2,
		/// <summary>
		/// DescrAr : اسم البند
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrAr = 3,
		/// <summary>
		/// DescrEn : اسم البند
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrEn = 4,
		/// <summary>
		/// AsCodeDegreeClassId : نوع الدرجة
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 5,
		/// <summary>
		/// AsCodeDegreeId : XX to be deleted
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 6,
		/// <summary>
		/// ItemOrdr : 
		/// </summary>
		[EnumTextValue("ITEM_ORDR")]
		[ColumnEnum("ITEM_ORDR", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ItemOrdr = 7,
		/// <summary>
		/// OldId : 
		/// </summary>
		[EnumTextValue("OldId")]
		[ColumnEnum("OldId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OldId = 8,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 9,
		/// <summary>
		/// EditFlg : XX to be deleted
		/// </summary>
		[EnumTextValue("EDIT_FLG")]
		[ColumnEnum("EDIT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EditFlg = 10,
		/// <summary>
		/// EnumId : Constant ENUM ID usd in code /sp
		/// </summary>
		[EnumTextValue("ENUM_ID")]
		[ColumnEnum("ENUM_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EnumId = 11,
		/// <summary>
		/// AccNo : 
		/// </summary>
		[EnumTextValue("ACC_NO")]
		[ColumnEnum("ACC_NO", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AccNo = 12,
		/// <summary>
		/// PrntId : 
		/// </summary>
		[EnumTextValue("PRNT_ID")]
		[ColumnEnum("PRNT_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PrntId = 13,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 14,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 15,
		/// <summary>
		/// TaxPercent : نسبة الضريبة على البند
		/// </summary>
		[EnumTextValue("TAX_PERCENT")]
		[ColumnEnum("TAX_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TaxPercent = 16
	}//End enum

	#endregion FeeCodeItemColumn Enum

} // end namespace
