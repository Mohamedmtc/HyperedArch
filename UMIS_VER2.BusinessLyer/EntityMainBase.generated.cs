
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntityMain.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENTITY_MAIN' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntityMainBase : EntityBase, IEntityMain, IEntityId<EntityMainKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntityMainEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntityMainEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntityMainEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntityMain> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntityMainEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntityMainEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntityMainBase"/> instance.
		///</summary>
		public EntityMainBase()
		{
			this.entityData = new EntityMainEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntityMainBase"/> instance.
		///</summary>
		///<param name="_entMainId"></param>
		///<param name="_entDescrAr"></param>
		///<param name="_entCodeEntityTypeId"></param>
		///<param name="_stateNotation"></param>
		///<param name="_entParentId"></param>
		///<param name="_entDescrEn"></param>
		///<param name="_isStateFlg"></param>
		///<param name="_nodeChildCount"></param>
		///<param name="_nodePath"></param>
		///<param name="_nodeOrder"></param>
		///<param name="_nodeLevel"></param>
		///<param name="_edStudyMethodId"></param>
		///<param name="_isInfoFlg"></param>
		///<param name="_isHomeFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_stateDescrAr"></param>
		///<param name="_stateDescrEn"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_isVisible"></param>
		///<param name="_isActive"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_approveFlg"></param>
		///<param name="_loadWithTrain"></param>
		///<param name="_gsCdeSpecAreaId"></param>
		///<param name="_maxTrnsCh">اقصى عدد ساعات تحويل عند  تطبيق المقاصة الخارجية </param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_admShowFlg"></param>
		///<param name="_degEquvText">نص قرار المعادلة</param>
		///<param name="_degEquvTextEng"></param>
		///<param name="_gsCodeLanguageId"></param>
		///<param name="_scheduleTypeFlg"></param>
		public EntityMainBase(System.Decimal _entMainId, System.String _entDescrAr, System.Decimal _entCodeEntityTypeId, 
			System.String _stateNotation, System.Decimal? _entParentId, System.String _entDescrEn, System.Decimal? _isStateFlg, 
			System.Decimal? _nodeChildCount, System.String _nodePath, System.Decimal? _nodeOrder, System.Decimal? _nodeLevel, 
			System.Decimal? _edStudyMethodId, System.Decimal? _isInfoFlg, System.Decimal? _isHomeFlg, 
			System.Decimal? _asFacultyInfoId, System.String _stateDescrAr, System.String _stateDescrEn, 
			System.Decimal? _edCodeLevelId, System.Decimal _isVisible, System.Decimal _isActive, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _approveFlg, System.Decimal? _loadWithTrain, System.Decimal? _gsCdeSpecAreaId, 
			System.Int32? _maxTrnsCh, System.Decimal? _gsCodeGenderId, System.Boolean? _admShowFlg, 
			System.String _degEquvText, System.String _degEquvTextEng, System.Decimal? _gsCodeLanguageId, 
			System.Decimal? _scheduleTypeFlg)
		{
			this.entityData = new EntityMainEntityData();
			this.backupData = null;

			this.EntMainId = _entMainId;
			this.EntDescrAr = _entDescrAr;
			this.EntCodeEntityTypeId = _entCodeEntityTypeId;
			this.StateNotation = _stateNotation;
			this.EntParentId = _entParentId;
			this.EntDescrEn = _entDescrEn;
			this.IsStateFlg = _isStateFlg;
			this.NodeChildCount = _nodeChildCount;
			this.NodePath = _nodePath;
			this.NodeOrder = _nodeOrder;
			this.NodeLevel = _nodeLevel;
			this.EdStudyMethodId = _edStudyMethodId;
			this.IsInfoFlg = _isInfoFlg;
			this.IsHomeFlg = _isHomeFlg;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.StateDescrAr = _stateDescrAr;
			this.StateDescrEn = _stateDescrEn;
			this.EdCodeLevelId = _edCodeLevelId;
			this.IsVisible = _isVisible;
			this.IsActive = _isActive;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.ApproveFlg = _approveFlg;
			this.LoadWithTrain = _loadWithTrain;
			this.GsCdeSpecAreaId = _gsCdeSpecAreaId;
			this.MaxTrnsCh = _maxTrnsCh;
			this.GsCodeGenderId = _gsCodeGenderId;
			this.AdmShowFlg = _admShowFlg;
			this.DegEquvText = _degEquvText;
			this.DegEquvTextEng = _degEquvTextEng;
			this.GsCodeLanguageId = _gsCodeLanguageId;
			this.ScheduleTypeFlg = _scheduleTypeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntityMain"/> instance.
		///</summary>
		///<param name="_entMainId"></param>
		///<param name="_entDescrAr"></param>
		///<param name="_entCodeEntityTypeId"></param>
		///<param name="_stateNotation"></param>
		///<param name="_entParentId"></param>
		///<param name="_entDescrEn"></param>
		///<param name="_isStateFlg"></param>
		///<param name="_nodeChildCount"></param>
		///<param name="_nodePath"></param>
		///<param name="_nodeOrder"></param>
		///<param name="_nodeLevel"></param>
		///<param name="_edStudyMethodId"></param>
		///<param name="_isInfoFlg"></param>
		///<param name="_isHomeFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_stateDescrAr"></param>
		///<param name="_stateDescrEn"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_isVisible"></param>
		///<param name="_isActive"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_approveFlg"></param>
		///<param name="_loadWithTrain"></param>
		///<param name="_gsCdeSpecAreaId"></param>
		///<param name="_maxTrnsCh">اقصى عدد ساعات تحويل عند  تطبيق المقاصة الخارجية </param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_admShowFlg"></param>
		///<param name="_degEquvText">نص قرار المعادلة</param>
		///<param name="_degEquvTextEng"></param>
		///<param name="_gsCodeLanguageId"></param>
		///<param name="_scheduleTypeFlg"></param>
		public static EntityMain CreateEntityMain(System.Decimal _entMainId, System.String _entDescrAr, System.Decimal _entCodeEntityTypeId, 
			System.String _stateNotation, System.Decimal? _entParentId, System.String _entDescrEn, System.Decimal? _isStateFlg, 
			System.Decimal? _nodeChildCount, System.String _nodePath, System.Decimal? _nodeOrder, System.Decimal? _nodeLevel, 
			System.Decimal? _edStudyMethodId, System.Decimal? _isInfoFlg, System.Decimal? _isHomeFlg, 
			System.Decimal? _asFacultyInfoId, System.String _stateDescrAr, System.String _stateDescrEn, 
			System.Decimal? _edCodeLevelId, System.Decimal _isVisible, System.Decimal _isActive, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _approveFlg, System.Decimal? _loadWithTrain, System.Decimal? _gsCdeSpecAreaId, 
			System.Int32? _maxTrnsCh, System.Decimal? _gsCodeGenderId, System.Boolean? _admShowFlg, 
			System.String _degEquvText, System.String _degEquvTextEng, System.Decimal? _gsCodeLanguageId, 
			System.Decimal? _scheduleTypeFlg)
		{
			EntityMain newEntityMain = new EntityMain();
			newEntityMain.EntMainId = _entMainId;
			newEntityMain.EntDescrAr = _entDescrAr;
			newEntityMain.EntCodeEntityTypeId = _entCodeEntityTypeId;
			newEntityMain.StateNotation = _stateNotation;
			newEntityMain.EntParentId = _entParentId;
			newEntityMain.EntDescrEn = _entDescrEn;
			newEntityMain.IsStateFlg = _isStateFlg;
			newEntityMain.NodeChildCount = _nodeChildCount;
			newEntityMain.NodePath = _nodePath;
			newEntityMain.NodeOrder = _nodeOrder;
			newEntityMain.NodeLevel = _nodeLevel;
			newEntityMain.EdStudyMethodId = _edStudyMethodId;
			newEntityMain.IsInfoFlg = _isInfoFlg;
			newEntityMain.IsHomeFlg = _isHomeFlg;
			newEntityMain.AsFacultyInfoId = _asFacultyInfoId;
			newEntityMain.StateDescrAr = _stateDescrAr;
			newEntityMain.StateDescrEn = _stateDescrEn;
			newEntityMain.EdCodeLevelId = _edCodeLevelId;
			newEntityMain.IsVisible = _isVisible;
			newEntityMain.IsActive = _isActive;
			newEntityMain.AsCodeDegreeId = _asCodeDegreeId;
			newEntityMain.ApproveFlg = _approveFlg;
			newEntityMain.LoadWithTrain = _loadWithTrain;
			newEntityMain.GsCdeSpecAreaId = _gsCdeSpecAreaId;
			newEntityMain.MaxTrnsCh = _maxTrnsCh;
			newEntityMain.GsCodeGenderId = _gsCodeGenderId;
			newEntityMain.AdmShowFlg = _admShowFlg;
			newEntityMain.DegEquvText = _degEquvText;
			newEntityMain.DegEquvTextEng = _degEquvTextEng;
			newEntityMain.GsCodeLanguageId = _gsCodeLanguageId;
			newEntityMain.ScheduleTypeFlg = _scheduleTypeFlg;
			return newEntityMain;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				this.EntityId.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_MAIN_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_MAIN_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntMainId
		{
			get { return this.entityData.OriginalEntMainId; }
			set { this.entityData.OriginalEntMainId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String EntDescrAr
		{
			get
			{
				return this.entityData.EntDescrAr; 
			}
			
			set
			{
				if (this.entityData.EntDescrAr == value)
					return;
					
				OnColumnChanging(EntityMainColumn.EntDescrAr, this.entityData.EntDescrAr);
				this.entityData.EntDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.EntDescrAr, this.entityData.EntDescrAr);
				OnPropertyChanged("EntDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCodeEntityTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntCodeEntityTypeId
		{
			get
			{
				return this.entityData.EntCodeEntityTypeId; 
			}
			
			set
			{
				if (this.entityData.EntCodeEntityTypeId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.EntCodeEntityTypeId, this.entityData.EntCodeEntityTypeId);
				this.entityData.EntCodeEntityTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.EntCodeEntityTypeId, this.entityData.EntCodeEntityTypeId);
				OnPropertyChanged("EntCodeEntityTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateNotation property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String StateNotation
		{
			get
			{
				return this.entityData.StateNotation; 
			}
			
			set
			{
				if (this.entityData.StateNotation == value)
					return;
					
				OnColumnChanging(EntityMainColumn.StateNotation, this.entityData.StateNotation);
				this.entityData.StateNotation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.StateNotation, this.entityData.StateNotation);
				OnPropertyChanged("StateNotation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntParentId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntParentIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntParentId
		{
			get
			{
				return this.entityData.EntParentId; 
			}
			
			set
			{
				if (this.entityData.EntParentId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.EntParentId, this.entityData.EntParentId);
				this.entityData.EntParentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.EntParentId, this.entityData.EntParentId);
				OnPropertyChanged("EntParentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String EntDescrEn
		{
			get
			{
				return this.entityData.EntDescrEn; 
			}
			
			set
			{
				if (this.entityData.EntDescrEn == value)
					return;
					
				OnColumnChanging(EntityMainColumn.EntDescrEn, this.entityData.EntDescrEn);
				this.entityData.EntDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.EntDescrEn, this.entityData.EntDescrEn);
				OnPropertyChanged("EntDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsStateFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsStateFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsStateFlg
		{
			get
			{
				return this.entityData.IsStateFlg; 
			}
			
			set
			{
				if (this.entityData.IsStateFlg == value)
					return;
					
				OnColumnChanging(EntityMainColumn.IsStateFlg, this.entityData.IsStateFlg);
				this.entityData.IsStateFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.IsStateFlg, this.entityData.IsStateFlg);
				OnPropertyChanged("IsStateFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeChildCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNodeChildCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NodeChildCount
		{
			get
			{
				return this.entityData.NodeChildCount; 
			}
			
			set
			{
				if (this.entityData.NodeChildCount == value)
					return;
					
				OnColumnChanging(EntityMainColumn.NodeChildCount, this.entityData.NodeChildCount);
				this.entityData.NodeChildCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.NodeChildCount, this.entityData.NodeChildCount);
				OnPropertyChanged("NodeChildCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodePath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 90)]
		public virtual System.String NodePath
		{
			get
			{
				return this.entityData.NodePath; 
			}
			
			set
			{
				if (this.entityData.NodePath == value)
					return;
					
				OnColumnChanging(EntityMainColumn.NodePath, this.entityData.NodePath);
				this.entityData.NodePath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.NodePath, this.entityData.NodePath);
				OnPropertyChanged("NodePath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNodeOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NodeOrder
		{
			get
			{
				return this.entityData.NodeOrder; 
			}
			
			set
			{
				if (this.entityData.NodeOrder == value)
					return;
					
				OnColumnChanging(EntityMainColumn.NodeOrder, this.entityData.NodeOrder);
				this.entityData.NodeOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.NodeOrder, this.entityData.NodeOrder);
				OnPropertyChanged("NodeOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeLevel property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNodeLevelNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NodeLevel
		{
			get
			{
				return this.entityData.NodeLevel; 
			}
			
			set
			{
				if (this.entityData.NodeLevel == value)
					return;
					
				OnColumnChanging(EntityMainColumn.NodeLevel, this.entityData.NodeLevel);
				this.entityData.NodeLevel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.NodeLevel, this.entityData.NodeLevel);
				OnPropertyChanged("NodeLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudyMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudyMethodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudyMethodId
		{
			get
			{
				return this.entityData.EdStudyMethodId; 
			}
			
			set
			{
				if (this.entityData.EdStudyMethodId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.EdStudyMethodId, this.entityData.EdStudyMethodId);
				this.entityData.EdStudyMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.EdStudyMethodId, this.entityData.EdStudyMethodId);
				OnPropertyChanged("EdStudyMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsInfoFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsInfoFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsInfoFlg
		{
			get
			{
				return this.entityData.IsInfoFlg; 
			}
			
			set
			{
				if (this.entityData.IsInfoFlg == value)
					return;
					
				OnColumnChanging(EntityMainColumn.IsInfoFlg, this.entityData.IsInfoFlg);
				this.entityData.IsInfoFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.IsInfoFlg, this.entityData.IsInfoFlg);
				OnPropertyChanged("IsInfoFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsHomeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsHomeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsHomeFlg
		{
			get
			{
				return this.entityData.IsHomeFlg; 
			}
			
			set
			{
				if (this.entityData.IsHomeFlg == value)
					return;
					
				OnColumnChanging(EntityMainColumn.IsHomeFlg, this.entityData.IsHomeFlg);
				this.entityData.IsHomeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.IsHomeFlg, this.entityData.IsHomeFlg);
				OnPropertyChanged("IsHomeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String StateDescrAr
		{
			get
			{
				return this.entityData.StateDescrAr; 
			}
			
			set
			{
				if (this.entityData.StateDescrAr == value)
					return;
					
				OnColumnChanging(EntityMainColumn.StateDescrAr, this.entityData.StateDescrAr);
				this.entityData.StateDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.StateDescrAr, this.entityData.StateDescrAr);
				OnPropertyChanged("StateDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String StateDescrEn
		{
			get
			{
				return this.entityData.StateDescrEn; 
			}
			
			set
			{
				if (this.entityData.StateDescrEn == value)
					return;
					
				OnColumnChanging(EntityMainColumn.StateDescrEn, this.entityData.StateDescrEn);
				this.entityData.StateDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.StateDescrEn, this.entityData.StateDescrEn);
				OnPropertyChanged("StateDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsVisible property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsVisible
		{
			get
			{
				return this.entityData.IsVisible; 
			}
			
			set
			{
				if (this.entityData.IsVisible == value)
					return;
					
				OnColumnChanging(EntityMainColumn.IsVisible, this.entityData.IsVisible);
				this.entityData.IsVisible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.IsVisible, this.entityData.IsVisible);
				OnPropertyChanged("IsVisible");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(EntityMainColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(EntityMainColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoadWithTrain property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLoadWithTrainNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LoadWithTrain
		{
			get
			{
				return this.entityData.LoadWithTrain; 
			}
			
			set
			{
				if (this.entityData.LoadWithTrain == value)
					return;
					
				OnColumnChanging(EntityMainColumn.LoadWithTrain, this.entityData.LoadWithTrain);
				this.entityData.LoadWithTrain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.LoadWithTrain, this.entityData.LoadWithTrain);
				OnPropertyChanged("LoadWithTrain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeSpecAreaId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCdeSpecAreaIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCdeSpecAreaId
		{
			get
			{
				return this.entityData.GsCdeSpecAreaId; 
			}
			
			set
			{
				if (this.entityData.GsCdeSpecAreaId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.GsCdeSpecAreaId, this.entityData.GsCdeSpecAreaId);
				this.entityData.GsCdeSpecAreaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.GsCdeSpecAreaId, this.entityData.GsCdeSpecAreaId);
				OnPropertyChanged("GsCdeSpecAreaId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxTrnsCh property. 
		///		اقصى عدد ساعات تحويل عند  تطبيق المقاصة الخارجية 
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaxTrnsChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اقصى عدد ساعات تحويل عند  تطبيق المقاصة الخارجية "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaxTrnsCh
		{
			get
			{
				return this.entityData.MaxTrnsCh; 
			}
			
			set
			{
				if (this.entityData.MaxTrnsCh == value)
					return;
					
				OnColumnChanging(EntityMainColumn.MaxTrnsCh, this.entityData.MaxTrnsCh);
				this.entityData.MaxTrnsCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.MaxTrnsCh, this.entityData.MaxTrnsCh);
				OnPropertyChanged("MaxTrnsCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeGenderId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeGenderIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeGenderId
		{
			get
			{
				return this.entityData.GsCodeGenderId; 
			}
			
			set
			{
				if (this.entityData.GsCodeGenderId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				this.entityData.GsCodeGenderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				OnPropertyChanged("GsCodeGenderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmShowFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAdmShowFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AdmShowFlg
		{
			get
			{
				return this.entityData.AdmShowFlg; 
			}
			
			set
			{
				if (this.entityData.AdmShowFlg == value)
					return;
					
				OnColumnChanging(EntityMainColumn.AdmShowFlg, this.entityData.AdmShowFlg);
				this.entityData.AdmShowFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.AdmShowFlg, this.entityData.AdmShowFlg);
				OnPropertyChanged("AdmShowFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegEquvText property. 
		///		نص قرار المعادلة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نص قرار المعادلة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String DegEquvText
		{
			get
			{
				return this.entityData.DegEquvText; 
			}
			
			set
			{
				if (this.entityData.DegEquvText == value)
					return;
					
				OnColumnChanging(EntityMainColumn.DegEquvText, this.entityData.DegEquvText);
				this.entityData.DegEquvText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.DegEquvText, this.entityData.DegEquvText);
				OnPropertyChanged("DegEquvText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegEquvTextEng property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String DegEquvTextEng
		{
			get
			{
				return this.entityData.DegEquvTextEng; 
			}
			
			set
			{
				if (this.entityData.DegEquvTextEng == value)
					return;
					
				OnColumnChanging(EntityMainColumn.DegEquvTextEng, this.entityData.DegEquvTextEng);
				this.entityData.DegEquvTextEng = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.DegEquvTextEng, this.entityData.DegEquvTextEng);
				OnPropertyChanged("DegEquvTextEng");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeLanguageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeLanguageIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeLanguageId
		{
			get
			{
				return this.entityData.GsCodeLanguageId; 
			}
			
			set
			{
				if (this.entityData.GsCodeLanguageId == value)
					return;
					
				OnColumnChanging(EntityMainColumn.GsCodeLanguageId, this.entityData.GsCodeLanguageId);
				this.entityData.GsCodeLanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.GsCodeLanguageId, this.entityData.GsCodeLanguageId);
				OnPropertyChanged("GsCodeLanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScheduleTypeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScheduleTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScheduleTypeFlg
		{
			get
			{
				return this.entityData.ScheduleTypeFlg; 
			}
			
			set
			{
				if (this.entityData.ScheduleTypeFlg == value)
					return;
					
				OnColumnChanging(EntityMainColumn.ScheduleTypeFlg, this.entityData.ScheduleTypeFlg);
				this.entityData.ScheduleTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntityMainColumn.ScheduleTypeFlg, this.entityData.ScheduleTypeFlg);
				OnPropertyChanged("ScheduleTypeFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdStudyMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeStudyMethod EdStudyMethodIdSource
      	{
            get { return entityData.EdStudyMethodIdSource; }
            set { entityData.EdStudyMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntCodeEntityType"/>.
		/// </summary>
		/// <value>The source EntCodeEntityType for EntCodeEntityTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCodeEntityType EntCodeEntityTypeIdSource
      	{
            get { return entityData.EntCodeEntityTypeIdSource; }
            set { entityData.EntCodeEntityTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntParentId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntParentIdSource
      	{
            get { return entityData.EntParentIdSource; }
            set { entityData.EntParentIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeSpecArea"/>.
		/// </summary>
		/// <value>The source GsCdeSpecArea for GsCdeSpecAreaId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeSpecArea GsCdeSpecAreaIdSource
      	{
            get { return entityData.GsCdeSpecAreaIdSource; }
            set { entityData.GsCdeSpecAreaIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return entityData.GsCodeGenderIdSource; }
            set { entityData.GsCodeGenderIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeLanguage"/>.
		/// </summary>
		/// <value>The source GsCodeLanguage for GsCodeLanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeLanguage GsCodeLanguageIdSource
      	{
            get { return entityData.GsCodeLanguageIdSource; }
            set { entityData.GsCodeLanguageIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudFaculty objects
		///	which are related to this object through the relation FK_ED_STUD_FACULTY_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudFaculty> EdStudFacultyCollectionGetByEntMainGrad1
		{
			get { return entityData.EdStudFacultyCollectionGetByEntMainGrad1; }
			set { entityData.EdStudFacultyCollectionGetByEntMainGrad1 = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvStaffEvl objects
		///	which are related to this object through the relation FK_SV_STAFF_EVL_ENTITY_MAIN_MAJOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvStaffEvl> SvStaffEvlCollectionGetByEntMainMajorId
		{
			get { return entityData.SvStaffEvlCollectionGetByEntMainMajorId; }
			set { entityData.SvStaffEvlCollectionGetByEntMainMajorId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvStaffEvl objects
		///	which are related to this object through the relation FK_SV_COURSE_STF_EVL_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvStaffEvl> SvStaffEvlCollectionGetByEntMainId
		{
			get { return entityData.SvStaffEvlCollectionGetByEntMainId; }
			set { entityData.SvStaffEvlCollectionGetByEntMainId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyMdData objects
		///	which are related to this object through the relation FK_ENT_POLICY_MD_DATA_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyMdData> EntPolicyMdDataCollection
		{
			get { return entityData.EntPolicyMdDataCollection; }
			set { entityData.EntPolicyMdDataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntFullfillMdData objects
		///	which are related to this object through the relation FK_ENT_FULLFILL_MD_DATA_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntFullfillMdData> EntFullfillMdDataCollection
		{
			get { return entityData.EntFullfillMdDataCollection; }
			set { entityData.EntFullfillMdDataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyGradingLevel objects
		///	which are related to this object through the relation FK_ENT_POLICY_GRADING_LEVEL_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyGradingLevel> EntPolicyGradingLevelCollection
		{
			get { return entityData.EntPolicyGradingLevelCollection; }
			set { entityData.EntPolicyGradingLevelCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsStateTo objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRNS_STATE_TO_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsStateTo> EdStudIntTrnsStateToCollection
		{
			get { return entityData.EdStudIntTrnsStateToCollection; }
			set { entityData.EdStudIntTrnsStateToCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyInstallment objects
		///	which are related to this object through the relation FK_FEE_FACULTY_INSTALLMENT_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyInstallment> FeeFacultyInstallmentCollection
		{
			get { return entityData.FeeFacultyInstallmentCollection; }
			set { entityData.FeeFacultyInstallmentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmReqDoc objects
		///	which are related to this object through the relation FK_ADM_REQ_DOC_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmReqDoc> AdmReqDocCollection
		{
			get { return entityData.AdmReqDocCollection; }
			set { entityData.AdmReqDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCourseOrient objects
		///	which are related to this object through the relation FK_ED_COURSE_ORIENT_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourseOrient> EdCourseOrientCollection
		{
			get { return entityData.EdCourseOrientCollection; }
			set { entityData.EdCourseOrientCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdProject objects
		///	which are related to this object through the relation FK_ED_PROJECT_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdProject> EdProjectCollection
		{
			get { return entityData.EdProjectCollection; }
			set { entityData.EdProjectCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdePlacementExam objects
		///	which are related to this object through the relation FK_ADM_CDE_PLACEMENT_EXAM_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get { return entityData.AdmCdePlacementExamCollection; }
			set { entityData.AdmCdePlacementExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntCoursePkgHdr objects
		///	which are related to this object through the relation FK_ENT_COURSE_PKG_HDR_ENTITY_MAIN1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntCoursePkgHdr> EntCoursePkgHdrCollectionGetByEntMainRltdId
		{
			get { return entityData.EntCoursePkgHdrCollectionGetByEntMainRltdId; }
			set { entityData.EntCoursePkgHdrCollectionGetByEntMainRltdId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoSponsorOfferExt objects
		///	which are related to this object through the relation FK_SPO_SPONSOR_OFFER_EXT_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoSponsorOfferExt> SpoSponsorOfferExtCollection
		{
			get { return entityData.SpoSponsorOfferExtCollection; }
			set { entityData.SpoSponsorOfferExtCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScHallRsrv objects
		///	which are related to this object through the relation FK_SC_HALL_RSRV_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScHallRsrv> ScHallRsrvCollection
		{
			get { return entityData.ScHallRsrvCollection; }
			set { entityData.ScHallRsrvCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScSectionGroupHdr objects
		///	which are related to this object through the relation FK_SC_SECTION_GROUP_HDR_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSectionGroupHdr> ScSectionGroupHdrCollection
		{
			get { return entityData.ScSectionGroupHdrCollection; }
			set { entityData.ScSectionGroupHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntMajorPhase objects
		///	which are related to this object through the relation FK_ENT_MAJOR_PHASE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMajorPhase> EntMajorPhaseCollection
		{
			get { return entityData.EntMajorPhaseCollection; }
			set { entityData.EntMajorPhaseCollection = value; }	
		}

		/// <summary>
		///	Holds a EntPolicyObserved object
		///	which is related to this object through the relation EntPolicyObserved
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyObserved EntPolicyObserved
		{
			get { return entityData.EntPolicyObserved; }
			set { entityData.EntPolicyObserved = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppInterviewExam objects
		///	which are related to this object through the relation FK_ADM_APP_INTERVIEW_EXAM_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppInterviewExam> AdmAppInterviewExamCollection
		{
			get { return entityData.AdmAppInterviewExamCollection; }
			set { entityData.AdmAppInterviewExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCourseTopic objects
		///	which are related to this object through the relation FK_ED_COURSE_TOPIC_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourseTopic> EdCourseTopicCollection
		{
			get { return entityData.EdCourseTopicCollection; }
			set { entityData.EdCourseTopicCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoControl objects
		///	which are related to this object through the relation FK_CO_CONTROL_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoControl> CoControlCollection
		{
			get { return entityData.CoControlCollection; }
			set { entityData.CoControlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdAcadPlan objects
		///	which are related to this object through the relation FK_ED_ACAD_PLAN_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdAcadPlan> EdAcadPlanCollection
		{
			get { return entityData.EdAcadPlanCollection; }
			set { entityData.EdAcadPlanCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTransPref objects
		///	which are related to this object through the relation FK_ED_STUD_IntTrans_PREF_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTransPref> EdStudIntTransPrefCollection
		{
			get { return entityData.EdStudIntTransPrefCollection; }
			set { entityData.EdStudIntTransPrefCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPrecondQual objects
		///	which are related to this object through the relation FK_ADM_PRECOND_QUAL_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get { return entityData.AdmPrecondQualCollection; }
			set { entityData.AdmPrecondQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsStateFrom objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRANS_STATE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsStateFrom> EdStudIntTrnsStateFromCollection
		{
			get { return entityData.EdStudIntTrnsStateFromCollection; }
			set { entityData.EdStudIntTrnsStateFromCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoControlRoom objects
		///	which are related to this object through the relation FK_CO_CONTROL_PHASE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoControlRoom> CoControlRoomCollection
		{
			get { return entityData.CoControlRoomCollection; }
			set { entityData.CoControlRoomCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaScQual objects
		///	which are related to this object through the relation FK_SA_SC_QUAL_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaScQual> SaScQualCollection
		{
			get { return entityData.SaScQualCollection; }
			set { entityData.SaScQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntIntroducMdData objects
		///	which are related to this object through the relation FK_ENT_INTRODUC_MD_DATA_ID_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntIntroducMdData> EntIntroducMdDataCollection
		{
			get { return entityData.EntIntroducMdDataCollection; }
			set { entityData.EntIntroducMdDataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntCoursePkgMdData objects
		///	which are related to this object through the relation FK_ENT_COURSE_PKG_MD_DATA_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntCoursePkgMdData> EntCoursePkgMdDataCollection
		{
			get { return entityData.EntCoursePkgMdDataCollection; }
			set { entityData.EntCoursePkgMdDataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmTansikMajorsCodes objects
		///	which are related to this object through the relation FK_ADM_Tansik_Majors_Codes_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTansikMajorsCodes> AdmTansikMajorsCodesCollection
		{
			get { return entityData.AdmTansikMajorsCodesCollection; }
			set { entityData.AdmTansikMajorsCodesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPrecondMdData objects
		///	which are related to this object through the relation FK_ENT_PRECOND_MD_DATA_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPrecondMdData> EntPrecondMdDataCollection
		{
			get { return entityData.EntPrecondMdDataCollection; }
			set { entityData.EntPrecondMdDataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeFee objects
		///	which are related to this object through the relation FK_ADM_CDE_FEE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get { return entityData.AdmCdeFeeCollection; }
			set { entityData.AdmCdeFeeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudState objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudState> EdStudStateCollection
		{
			get { return entityData.EdStudStateCollection; }
			set { entityData.EdStudStateCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsComm objects
		///	which are related to this object through the relation FK_GS_COMM_ENTITY_MAIN1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsComm> GsCommCollectionGetByEntMainMinorId
		{
			get { return entityData.GsCommCollectionGetByEntMainMinorId; }
			set { entityData.GsCommCollectionGetByEntMainMinorId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppPref objects
		///	which are related to this object through the relation FK_ADM_APP_PREF_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppPref> AdmAppPrefCollection
		{
			get { return entityData.AdmAppPrefCollection; }
			set { entityData.AdmAppPrefCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemesterOpen objects
		///	which are related to this object through the relation FK_ED_SEMESTER_OPEN_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemesterOpen> EdSemesterOpenCollection
		{
			get { return entityData.EdSemesterOpenCollection; }
			set { entityData.EdSemesterOpenCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvPollHdr objects
		///	which are related to this object through the relation FK_SV_POLL_HDR_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvPollHdr> SvPollHdrCollection
		{
			get { return entityData.SvPollHdrCollection; }
			set { entityData.SvPollHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaTrainingCourse objects
		///	which are related to this object through the relation FK_SA_TRAINING_COURSE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaTrainingCourse> SaTrainingCourseCollection
		{
			get { return entityData.SaTrainingCourseCollection; }
			set { entityData.SaTrainingCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppTransReq objects
		///	which are related to this object through the relation FK_ADM_APP_TRANSFER_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransReq> AdmAppTransReqCollection
		{
			get { return entityData.AdmAppTransReqCollection; }
			set { entityData.AdmAppTransReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntCoursePkgHdr objects
		///	which are related to this object through the relation FK_ENT_COURSE_PKG_HDR_ENTITY_MAIN_SPC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntCoursePkgHdr> EntCoursePkgHdrCollectionGetByEntMainSpcRltdId
		{
			get { return entityData.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId; }
			set { entityData.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudFaculty objects
		///	which are related to this object through the relation FK_ED_STUD_FACULTY_ENTITY_MAIN2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudFaculty> EdStudFacultyCollectionGetByEntMainGrad3
		{
			get { return entityData.EdStudFacultyCollectionGetByEntMainGrad3; }
			set { entityData.EdStudFacultyCollectionGetByEntMainGrad3 = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgOffering objects
		///	which are related to this object through the relation FK_PG_OFFERING_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgOffering> PgOfferingCollection
		{
			get { return entityData.PgOfferingCollection; }
			set { entityData.PgOfferingCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntCoursePkgHdr objects
		///	which are related to this object through the relation FK_ENT_COURSE_PKG_HDR_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntCoursePkgHdr> EntCoursePkgHdrCollectionGetByEntMainId
		{
			get { return entityData.EntCoursePkgHdrCollectionGetByEntMainId; }
			set { entityData.EntCoursePkgHdrCollectionGetByEntMainId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdOutcome objects
		///	which are related to this object through the relation FK_ED_OUTCOME_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdOutcome> EdOutcomeCollection
		{
			get { return entityData.EdOutcomeCollection; }
			set { entityData.EdOutcomeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeAppStatus objects
		///	which are related to this object through the relation FK_ADM_CDE_APP_STATUS_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeAppStatus> AdmCdeAppStatusCollection
		{
			get { return entityData.AdmCdeAppStatusCollection; }
			set { entityData.AdmCdeAppStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudGrantTemp objects
		///	which are related to this object through the relation FK_ED_STUD_GRANT_TEMP_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGrantTemp> EdStudGrantTempCollection
		{
			get { return entityData.EdStudGrantTempCollection; }
			set { entityData.EdStudGrantTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdBranchRule objects
		///	which are related to this object through the relation FK_ED_BRANCH_RULE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdBranchRule> EdBranchRuleCollection
		{
			get { return entityData.EdBranchRuleCollection; }
			set { entityData.EdBranchRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyRule objects
		///	which are related to this object through the relation FK_FEE_FACULTY_RULE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get { return entityData.FeeFacultyRuleCollection; }
			set { entityData.FeeFacultyRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntMainMatrix objects
		///	which are related to this object through the relation FK_ENT_MAIN_MATRIX_ENTITY_MAIN2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainId
		{
			get { return entityData.EntMainMatrixCollectionGetByEntMainId; }
			set { entityData.EntMainMatrixCollectionGetByEntMainId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvStaffEvl objects
		///	which are related to this object through the relation FK_SV_STAFF_EVL_ENTITY_MAIN_MINOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvStaffEvl> SvStaffEvlCollectionGetByEntMainMinorId
		{
			get { return entityData.SvStaffEvlCollectionGetByEntMainMinorId; }
			set { entityData.SvStaffEvlCollectionGetByEntMainMinorId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaExperience objects
		///	which are related to this object through the relation FK_SA_EXPERIENCE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaExperience> SaExperienceCollection
		{
			get { return entityData.SaExperienceCollection; }
			set { entityData.SaExperienceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntGraduationReq objects
		///	which are related to this object through the relation FK_ENT_GRADUATION_REQ_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntGraduationReq> EntGraduationReqCollection
		{
			get { return entityData.EntGraduationReqCollection; }
			set { entityData.EntGraduationReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntMainMatrix objects
		///	which are related to this object through the relation FK_ENT_MAIN_MATRIX_ENTITY_MAIN4
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainSpecId
		{
			get { return entityData.EntMainMatrixCollectionGetByEntMainSpecId; }
			set { entityData.EntMainMatrixCollectionGetByEntMainSpecId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudGrantDegree objects
		///	which are related to this object through the relation FK_ED_STUD_GRANT_DEGREE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGrantDegree> EdStudGrantDegreeCollection
		{
			get { return entityData.EdStudGrantDegreeCollection; }
			set { entityData.EdStudGrantDegreeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvCourseEval objects
		///	which are related to this object through the relation FK_SV_COURSE_EVAL_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvCourseEval> SvCourseEvalCollection
		{
			get { return entityData.SvCourseEvalCollection; }
			set { entityData.SvCourseEvalCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdAcadPlanHdr objects
		///	which are related to this object through the relation FK_ED_ACAD_PLAN_HDR_ENTITY_MAIN1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdAcadPlanHdr> EdAcadPlanHdrCollectionGetByEntMainSpcRltdId
		{
			get { return entityData.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId; }
			set { entityData.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaStfMember objects
		///	which are related to this object through the relation FK_SA_STF_MEMBER_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaStfMember> SaStfMemberCollection
		{
			get { return entityData.SaStfMemberCollection; }
			set { entityData.SaStfMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntGradingMdData objects
		///	which are related to this object through the relation FK_ENT_GRADING_MD_DATA_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntGradingMdData> EntGradingMdDataCollection
		{
			get { return entityData.EntGradingMdDataCollection; }
			set { entityData.EntGradingMdDataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntMainMatrix objects
		///	which are related to this object through the relation FK_ENT_MAIN_MATRIX_ENTITY_MAIN1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainMinorId
		{
			get { return entityData.EntMainMatrixCollectionGetByEntMainMinorId; }
			set { entityData.EntMainMatrixCollectionGetByEntMainMinorId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdOffering objects
		///	which are related to this object through the relation FK_ED_OFFERING_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdOffering> EdOfferingCollection
		{
			get { return entityData.EdOfferingCollection; }
			set { entityData.EdOfferingCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdBylaw objects
		///	which are related to this object through the relation FK_ED_BYLAW_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdBylaw> EdBylawCollection
		{
			get { return entityData.EdBylawCollection; }
			set { entityData.EdBylawCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudFaculty objects
		///	which are related to this object through the relation FK_ED_STUD_FACULTY_ENTITY_MAIN1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudFaculty> EdStudFacultyCollectionGetByEntMainGrad2
		{
			get { return entityData.EdStudFacultyCollectionGetByEntMainGrad2; }
			set { entityData.EdStudFacultyCollectionGetByEntMainGrad2 = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntMainMatrix objects
		///	which are related to this object through the relation FK_ENT_MAIN_MATRIX_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainMajorId
		{
			get { return entityData.EntMainMatrixCollectionGetByEntMainMajorId; }
			set { entityData.EntMainMatrixCollectionGetByEntMainMajorId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserCrsAssess objects
		///	which are related to this object through the relation FK_SE_USER_CRS_ASSESS_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserCrsAssess> SeUserCrsAssessCollectionGetByEntMainDeptId
		{
			get { return entityData.SeUserCrsAssessCollectionGetByEntMainDeptId; }
			set { entityData.SeUserCrsAssessCollectionGetByEntMainDeptId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeSemesterAgenda objects
		///	which are related to this object through the relation FK_FEE_SEMESTER_AGENDA_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeSemesterAgenda> FeeSemesterAgendaCollection
		{
			get { return entityData.FeeSemesterAgendaCollection; }
			set { entityData.FeeSemesterAgendaCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppCount objects
		///	which are related to this object through the relation FK_ADM_APP_COUNT_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppCount> AdmAppCountCollection
		{
			get { return entityData.AdmAppCountCollection; }
			set { entityData.AdmAppCountCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaSupervisingJobs objects
		///	which are related to this object through the relation FK_SA_SUPERVISING_JOBS_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaSupervisingJobs> SaSupervisingJobsCollection
		{
			get { return entityData.SaSupervisingJobsCollection; }
			set { entityData.SaSupervisingJobsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserCrsAssess objects
		///	which are related to this object through the relation FK_SE_USER_CRS_ASSESS_ENTITY_MAIN1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserCrsAssess> SeUserCrsAssessCollectionGetByEntMainMajorId
		{
			get { return entityData.SeUserCrsAssessCollectionGetByEntMainMajorId; }
			set { entityData.SeUserCrsAssessCollectionGetByEntMainMajorId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdResultApprove objects
		///	which are related to this object through the relation FK_ED_RESULT_APPROVE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdResultApprove> EdResultApproveCollection
		{
			get { return entityData.EdResultApproveCollection; }
			set { entityData.EdResultApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCoursePrfx objects
		///	which are related to this object through the relation FK_ED_COURSE_PRFX_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCoursePrfx> EdCoursePrfxCollection
		{
			get { return entityData.EdCoursePrfxCollection; }
			set { entityData.EdCoursePrfxCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisGeneralSpec objects
		///	which are related to this object through the relation FK_PG_THESIS_GENERAL_SPEC_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisGeneralSpec> PgThesisGeneralSpecCollection
		{
			get { return entityData.PgThesisGeneralSpecCollection; }
			set { entityData.PgThesisGeneralSpecCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdAcadPlanHdr objects
		///	which are related to this object through the relation FK_ED_ACAD_PLAN_HDR_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdAcadPlanHdr> EdAcadPlanHdrCollectionGetByEntMainRltdId
		{
			get { return entityData.EdAcadPlanHdrCollectionGetByEntMainRltdId; }
			set { entityData.EdAcadPlanHdrCollectionGetByEntMainRltdId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudStateTemp objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_TEMP_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudStateTemp> EdStudStateTempCollection
		{
			get { return entityData.EdStudStateTempCollection; }
			set { entityData.EdStudStateTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmRatingParametersMajors objects
		///	which are related to this object through the relation FK_ADM_RATING_PARAMETERS_MAJORS_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get { return entityData.AdmRatingParametersMajorsCollection; }
			set { entityData.AdmRatingParametersMajorsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamDatetime objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_DATETIME_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get { return entityData.AdmPlaceExamDatetimeCollection; }
			set { entityData.AdmPlaceExamDatetimeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCourse objects
		///	which are related to this object through the relation FK_ED_COURSE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourse> EdCourseCollection
		{
			get { return entityData.EdCourseCollection; }
			set { entityData.EdCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserAccnt objects
		///	which are related to this object through the relation FK_SE_USER_ACCNT_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccnt> SeUserAccntCollection
		{
			get { return entityData.SeUserAccntCollection; }
			set { entityData.SeUserAccntCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaEmpHierarchy objects
		///	which are related to this object through the relation FK_SA_EMP_HIERARCHY_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaEmpHierarchy> SaEmpHierarchyCollection
		{
			get { return entityData.SaEmpHierarchyCollection; }
			set { entityData.SaEmpHierarchyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudBranchPref objects
		///	which are related to this object through the relation FK_ED_STUD_BRANCH_PREF_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudBranchPref> EdStudBranchPrefCollection
		{
			get { return entityData.EdStudBranchPrefCollection; }
			set { entityData.EdStudBranchPrefCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntityMain objects
		///	which are related to this object through the relation FK_ENTITY_MAIN_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntityMain> EntityMainCollection
		{
			get { return entityData.EntityMainCollection; }
			set { entityData.EntityMainCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaExtDel objects
		///	which are related to this object through the relation FK_SA_EXT_DEL_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaExtDel> SaExtDelCollection
		{
			get { return entityData.SaExtDelCollection; }
			set { entityData.SaExtDelCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleRsrv objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_RSRV_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleRsrv> ScScheduleRsrvCollection
		{
			get { return entityData.ScScheduleRsrvCollection; }
			set { entityData.ScScheduleRsrvCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScSchdlPeriod objects
		///	which are related to this object through the relation FK_SC_SCHDL_PERIOD_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSchdlPeriod> ScSchdlPeriodCollection
		{
			get { return entityData.ScSchdlPeriodCollection; }
			set { entityData.ScSchdlPeriodCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeBlockTrans objects
		///	which are related to this object through the relation FK_SE_BLOCK_TRANS_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeBlockTrans> SeBlockTransCollection
		{
			get { return entityData.SeBlockTransCollection; }
			set { entityData.SeBlockTransCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScGroupInfo objects
		///	which are related to this object through the relation FK_SC_GROUP_INFO_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScGroupInfo> ScGroupInfoCollection
		{
			get { return entityData.ScGroupInfoCollection; }
			set { entityData.ScGroupInfoCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolcyGrdngHdr objects
		///	which are related to this object through the relation FK_ENT_POLCY_GRDNG_HDR_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get { return entityData.EntPolcyGrdngHdrCollection; }
			set { entityData.EntPolcyGrdngHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdInttransRule objects
		///	which are related to this object through the relation FK_ED_Int_Trans_RULE_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdInttransRule> EdInttransRuleCollection
		{
			get { return entityData.EdInttransRuleCollection; }
			set { entityData.EdInttransRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntCourseMdData objects
		///	which are related to this object through the relation FK_ENT_COURSE_MD_DATA_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntCourseMdData> EntCourseMdDataCollection
		{
			get { return entityData.EntCourseMdDataCollection; }
			set { entityData.EntCourseMdDataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsComm objects
		///	which are related to this object through the relation FK_GS_COMM_ENTITY_MAIN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsComm> GsCommCollectionGetByEntMainMajorId
		{
			get { return entityData.GsCommCollectionGetByEntMainMajorId; }
			set { entityData.GsCommCollectionGetByEntMainMajorId = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EntDescrAr", "Ent Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StateNotation", "State Notation", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EntDescrEn", "Ent Descr En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NodePath", "Node Path", 90));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StateDescrAr", "State Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StateDescrEn", "State Descr En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENTITY_MAIN"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_MAIN_ID", "ENT_DESCR_AR", "ENT_CODE_ENTITY_TYPE_ID", "STATE_NOTATION", "ENT_PARENT_ID", "ENT_DESCR_EN", "IS_STATE_FLG", "NODE_CHILD_COUNT", "NODE_PATH", "NODE_ORDER", "NODE_LEVEL", "ED_STUDY_METHOD_ID", "IS_INFO_FLG", "IS_HOME_FLG", "AS_FACULTY_INFO_ID", "STATE_DESCR_AR", "STATE_DESCR_EN", "ED_CODE_LEVEL_ID", "IS_VISIBLE", "IS_ACTIVE", "AS_CODE_DEGREE_ID", "APPROVE_FLG", "LOAD_WITH_TRAIN", "GS_CDE_SPEC_AREA_ID", "MAX_TRNS_CH", "GS_CODE_GENDER_ID", "ADM_SHOW_FLG", "DEG_EQUV_TEXT", "DEG_EQUV_TEXT_ENG", "GS_CODE_LANGUAGE_ID", "SCHEDULE_TYPE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntityMainEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntityMain) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntityMain>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntityMain);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntityMain Entity 
		///</summary>
		protected virtual EntityMain Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntityMain copy = new EntityMain();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntMainId = this.EntMainId;
					copy.OriginalEntMainId = this.OriginalEntMainId;
				copy.EntDescrAr = this.EntDescrAr;
				copy.EntCodeEntityTypeId = this.EntCodeEntityTypeId;
				copy.StateNotation = this.StateNotation;
				copy.EntParentId = this.EntParentId;
				copy.EntDescrEn = this.EntDescrEn;
				copy.IsStateFlg = this.IsStateFlg;
				copy.NodeChildCount = this.NodeChildCount;
				copy.NodePath = this.NodePath;
				copy.NodeOrder = this.NodeOrder;
				copy.NodeLevel = this.NodeLevel;
				copy.EdStudyMethodId = this.EdStudyMethodId;
				copy.IsInfoFlg = this.IsInfoFlg;
				copy.IsHomeFlg = this.IsHomeFlg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.StateDescrAr = this.StateDescrAr;
				copy.StateDescrEn = this.StateDescrEn;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.IsVisible = this.IsVisible;
				copy.IsActive = this.IsActive;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.ApproveFlg = this.ApproveFlg;
				copy.LoadWithTrain = this.LoadWithTrain;
				copy.GsCdeSpecAreaId = this.GsCdeSpecAreaId;
				copy.MaxTrnsCh = this.MaxTrnsCh;
				copy.GsCodeGenderId = this.GsCodeGenderId;
				copy.AdmShowFlg = this.AdmShowFlg;
				copy.DegEquvText = this.DegEquvText;
				copy.DegEquvTextEng = this.DegEquvTextEng;
				copy.GsCodeLanguageId = this.GsCodeLanguageId;
				copy.ScheduleTypeFlg = this.ScheduleTypeFlg;
			
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdStudyMethodIdSource != null && existingCopies.Contains(this.EdStudyMethodIdSource))
				copy.EdStudyMethodIdSource = existingCopies[this.EdStudyMethodIdSource] as EdCodeStudyMethod;
			else
				copy.EdStudyMethodIdSource = MakeCopyOf(this.EdStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntCodeEntityTypeIdSource != null && existingCopies.Contains(this.EntCodeEntityTypeIdSource))
				copy.EntCodeEntityTypeIdSource = existingCopies[this.EntCodeEntityTypeIdSource] as EntCodeEntityType;
			else
				copy.EntCodeEntityTypeIdSource = MakeCopyOf(this.EntCodeEntityTypeIdSource, existingCopies) as EntCodeEntityType;
			if (this.EntParentIdSource != null && existingCopies.Contains(this.EntParentIdSource))
				copy.EntParentIdSource = existingCopies[this.EntParentIdSource] as EntityMain;
			else
				copy.EntParentIdSource = MakeCopyOf(this.EntParentIdSource, existingCopies) as EntityMain;
			if (this.GsCdeSpecAreaIdSource != null && existingCopies.Contains(this.GsCdeSpecAreaIdSource))
				copy.GsCdeSpecAreaIdSource = existingCopies[this.GsCdeSpecAreaIdSource] as GsCdeSpecArea;
			else
				copy.GsCdeSpecAreaIdSource = MakeCopyOf(this.GsCdeSpecAreaIdSource, existingCopies) as GsCdeSpecArea;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				copy.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				copy.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.GsCodeLanguageIdSource != null && existingCopies.Contains(this.GsCodeLanguageIdSource))
				copy.GsCodeLanguageIdSource = existingCopies[this.GsCodeLanguageIdSource] as GsCodeLanguage;
			else
				copy.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource, existingCopies) as GsCodeLanguage;
		
			//deep copy nested objects
			copy.EdStudFacultyCollectionGetByEntMainGrad1 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad1, existingCopies); 
			copy.SvStaffEvlCollectionGetByEntMainMajorId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainMajorId, existingCopies); 
			copy.SvStaffEvlCollectionGetByEntMainId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainId, existingCopies); 
			copy.EntPolicyMdDataCollection = (TList<EntPolicyMdData>) MakeCopyOf(this.EntPolicyMdDataCollection, existingCopies); 
			copy.EntFullfillMdDataCollection = (TList<EntFullfillMdData>) MakeCopyOf(this.EntFullfillMdDataCollection, existingCopies); 
			copy.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection, existingCopies); 
			copy.EdStudIntTrnsStateToCollection = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollection, existingCopies); 
			copy.FeeFacultyInstallmentCollection = (TList<FeeFacultyInstallment>) MakeCopyOf(this.FeeFacultyInstallmentCollection, existingCopies); 
			copy.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			copy.EdCourseOrientCollection = (TList<EdCourseOrient>) MakeCopyOf(this.EdCourseOrientCollection, existingCopies); 
			copy.EdProjectCollection = (TList<EdProject>) MakeCopyOf(this.EdProjectCollection, existingCopies); 
			copy.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			copy.EntCoursePkgHdrCollectionGetByEntMainRltdId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainRltdId, existingCopies); 
			copy.SpoSponsorOfferExtCollection = (TList<SpoSponsorOfferExt>) MakeCopyOf(this.SpoSponsorOfferExtCollection, existingCopies); 
			copy.ScHallRsrvCollection = (TList<ScHallRsrv>) MakeCopyOf(this.ScHallRsrvCollection, existingCopies); 
			copy.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection, existingCopies); 
			copy.EntMajorPhaseCollection = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollection, existingCopies); 
			copy.EntPolicyObserved = (EntPolicyObserved) MakeCopyOf(this.EntPolicyObserved, existingCopies); 
			copy.AdmAppInterviewExamCollection = (TList<AdmAppInterviewExam>) MakeCopyOf(this.AdmAppInterviewExamCollection, existingCopies); 
			copy.EdCourseTopicCollection = (TList<EdCourseTopic>) MakeCopyOf(this.EdCourseTopicCollection, existingCopies); 
			copy.CoControlCollection = (TList<CoControl>) MakeCopyOf(this.CoControlCollection, existingCopies); 
			copy.EdAcadPlanCollection = (TList<EdAcadPlan>) MakeCopyOf(this.EdAcadPlanCollection, existingCopies); 
			copy.EdStudIntTransPrefCollection = (TList<EdStudIntTransPref>) MakeCopyOf(this.EdStudIntTransPrefCollection, existingCopies); 
			copy.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			copy.EdStudIntTrnsStateFromCollection = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollection, existingCopies); 
			copy.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection, existingCopies); 
			copy.SaScQualCollection = (TList<SaScQual>) MakeCopyOf(this.SaScQualCollection, existingCopies); 
			copy.EntIntroducMdDataCollection = (TList<EntIntroducMdData>) MakeCopyOf(this.EntIntroducMdDataCollection, existingCopies); 
			copy.EntCoursePkgMdDataCollection = (TList<EntCoursePkgMdData>) MakeCopyOf(this.EntCoursePkgMdDataCollection, existingCopies); 
			copy.AdmTansikMajorsCodesCollection = (TList<AdmTansikMajorsCodes>) MakeCopyOf(this.AdmTansikMajorsCodesCollection, existingCopies); 
			copy.EntPrecondMdDataCollection = (TList<EntPrecondMdData>) MakeCopyOf(this.EntPrecondMdDataCollection, existingCopies); 
			copy.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			copy.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection, existingCopies); 
			copy.GsCommCollectionGetByEntMainMinorId = (TList<GsComm>) MakeCopyOf(this.GsCommCollectionGetByEntMainMinorId, existingCopies); 
			copy.AdmAppPrefCollection = (TList<AdmAppPref>) MakeCopyOf(this.AdmAppPrefCollection, existingCopies); 
			copy.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection, existingCopies); 
			copy.SvPollHdrCollection = (TList<SvPollHdr>) MakeCopyOf(this.SvPollHdrCollection, existingCopies); 
			copy.SaTrainingCourseCollection = (TList<SaTrainingCourse>) MakeCopyOf(this.SaTrainingCourseCollection, existingCopies); 
			copy.AdmAppTransReqCollection = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollection, existingCopies); 
			copy.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId, existingCopies); 
			copy.EdStudFacultyCollectionGetByEntMainGrad3 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad3, existingCopies); 
			copy.PgOfferingCollection = (TList<PgOffering>) MakeCopyOf(this.PgOfferingCollection, existingCopies); 
			copy.EntCoursePkgHdrCollectionGetByEntMainId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainId, existingCopies); 
			copy.EdOutcomeCollection = (TList<EdOutcome>) MakeCopyOf(this.EdOutcomeCollection, existingCopies); 
			copy.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection, existingCopies); 
			copy.EdStudGrantTempCollection = (TList<EdStudGrantTemp>) MakeCopyOf(this.EdStudGrantTempCollection, existingCopies); 
			copy.EdBranchRuleCollection = (TList<EdBranchRule>) MakeCopyOf(this.EdBranchRuleCollection, existingCopies); 
			copy.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			copy.EntMainMatrixCollectionGetByEntMainId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainId, existingCopies); 
			copy.SvStaffEvlCollectionGetByEntMainMinorId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainMinorId, existingCopies); 
			copy.SaExperienceCollection = (TList<SaExperience>) MakeCopyOf(this.SaExperienceCollection, existingCopies); 
			copy.EntGraduationReqCollection = (TList<EntGraduationReq>) MakeCopyOf(this.EntGraduationReqCollection, existingCopies); 
			copy.EntMainMatrixCollectionGetByEntMainSpecId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainSpecId, existingCopies); 
			copy.EdStudGrantDegreeCollection = (TList<EdStudGrantDegree>) MakeCopyOf(this.EdStudGrantDegreeCollection, existingCopies); 
			copy.SvCourseEvalCollection = (TList<SvCourseEval>) MakeCopyOf(this.SvCourseEvalCollection, existingCopies); 
			copy.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId, existingCopies); 
			copy.SaStfMemberCollection = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollection, existingCopies); 
			copy.EntGradingMdDataCollection = (TList<EntGradingMdData>) MakeCopyOf(this.EntGradingMdDataCollection, existingCopies); 
			copy.EntMainMatrixCollectionGetByEntMainMinorId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainMinorId, existingCopies); 
			copy.EdOfferingCollection = (TList<EdOffering>) MakeCopyOf(this.EdOfferingCollection, existingCopies); 
			copy.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection, existingCopies); 
			copy.EdStudFacultyCollectionGetByEntMainGrad2 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad2, existingCopies); 
			copy.EntMainMatrixCollectionGetByEntMainMajorId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainMajorId, existingCopies); 
			copy.SeUserCrsAssessCollectionGetByEntMainDeptId = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollectionGetByEntMainDeptId, existingCopies); 
			copy.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection, existingCopies); 
			copy.AdmAppCountCollection = (TList<AdmAppCount>) MakeCopyOf(this.AdmAppCountCollection, existingCopies); 
			copy.SaSupervisingJobsCollection = (TList<SaSupervisingJobs>) MakeCopyOf(this.SaSupervisingJobsCollection, existingCopies); 
			copy.SeUserCrsAssessCollectionGetByEntMainMajorId = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollectionGetByEntMainMajorId, existingCopies); 
			copy.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection, existingCopies); 
			copy.EdCoursePrfxCollection = (TList<EdCoursePrfx>) MakeCopyOf(this.EdCoursePrfxCollection, existingCopies); 
			copy.PgThesisGeneralSpecCollection = (TList<PgThesisGeneralSpec>) MakeCopyOf(this.PgThesisGeneralSpecCollection, existingCopies); 
			copy.EdAcadPlanHdrCollectionGetByEntMainRltdId = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollectionGetByEntMainRltdId, existingCopies); 
			copy.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection, existingCopies); 
			copy.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			copy.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			copy.EdCourseCollection = (TList<EdCourse>) MakeCopyOf(this.EdCourseCollection, existingCopies); 
			copy.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection, existingCopies); 
			copy.SaEmpHierarchyCollection = (TList<SaEmpHierarchy>) MakeCopyOf(this.SaEmpHierarchyCollection, existingCopies); 
			copy.EdStudBranchPrefCollection = (TList<EdStudBranchPref>) MakeCopyOf(this.EdStudBranchPrefCollection, existingCopies); 
			copy.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			copy.SaExtDelCollection = (TList<SaExtDel>) MakeCopyOf(this.SaExtDelCollection, existingCopies); 
			copy.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection, existingCopies); 
			copy.ScSchdlPeriodCollection = (TList<ScSchdlPeriod>) MakeCopyOf(this.ScSchdlPeriodCollection, existingCopies); 
			copy.SeBlockTransCollection = (TList<SeBlockTrans>) MakeCopyOf(this.SeBlockTransCollection, existingCopies); 
			copy.ScGroupInfoCollection = (TList<ScGroupInfo>) MakeCopyOf(this.ScGroupInfoCollection, existingCopies); 
			copy.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			copy.EdInttransRuleCollection = (TList<EdInttransRule>) MakeCopyOf(this.EdInttransRuleCollection, existingCopies); 
			copy.EntCourseMdDataCollection = (TList<EntCourseMdData>) MakeCopyOf(this.EntCourseMdDataCollection, existingCopies); 
			copy.GsCommCollectionGetByEntMainMajorId = (TList<GsComm>) MakeCopyOf(this.GsCommCollectionGetByEntMainMajorId, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntityMain Entity 
		///</summary>
		public virtual EntityMain Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntityMain Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntityMain DeepCopy()
		{
			return EntityHelper.Clone<EntityMain>(this as EntityMain);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntityMainEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntityMainEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntityMainEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntityMainColumn column)
		{
			switch(column)
			{
					case EntityMainColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case EntityMainColumn.EntDescrAr:
					return entityData.EntDescrAr != _originalData.EntDescrAr;
					case EntityMainColumn.EntCodeEntityTypeId:
					return entityData.EntCodeEntityTypeId != _originalData.EntCodeEntityTypeId;
					case EntityMainColumn.StateNotation:
					return entityData.StateNotation != _originalData.StateNotation;
					case EntityMainColumn.EntParentId:
					return entityData.EntParentId != _originalData.EntParentId;
					case EntityMainColumn.EntDescrEn:
					return entityData.EntDescrEn != _originalData.EntDescrEn;
					case EntityMainColumn.IsStateFlg:
					return entityData.IsStateFlg != _originalData.IsStateFlg;
					case EntityMainColumn.NodeChildCount:
					return entityData.NodeChildCount != _originalData.NodeChildCount;
					case EntityMainColumn.NodePath:
					return entityData.NodePath != _originalData.NodePath;
					case EntityMainColumn.NodeOrder:
					return entityData.NodeOrder != _originalData.NodeOrder;
					case EntityMainColumn.NodeLevel:
					return entityData.NodeLevel != _originalData.NodeLevel;
					case EntityMainColumn.EdStudyMethodId:
					return entityData.EdStudyMethodId != _originalData.EdStudyMethodId;
					case EntityMainColumn.IsInfoFlg:
					return entityData.IsInfoFlg != _originalData.IsInfoFlg;
					case EntityMainColumn.IsHomeFlg:
					return entityData.IsHomeFlg != _originalData.IsHomeFlg;
					case EntityMainColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EntityMainColumn.StateDescrAr:
					return entityData.StateDescrAr != _originalData.StateDescrAr;
					case EntityMainColumn.StateDescrEn:
					return entityData.StateDescrEn != _originalData.StateDescrEn;
					case EntityMainColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case EntityMainColumn.IsVisible:
					return entityData.IsVisible != _originalData.IsVisible;
					case EntityMainColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case EntityMainColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case EntityMainColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case EntityMainColumn.LoadWithTrain:
					return entityData.LoadWithTrain != _originalData.LoadWithTrain;
					case EntityMainColumn.GsCdeSpecAreaId:
					return entityData.GsCdeSpecAreaId != _originalData.GsCdeSpecAreaId;
					case EntityMainColumn.MaxTrnsCh:
					return entityData.MaxTrnsCh != _originalData.MaxTrnsCh;
					case EntityMainColumn.GsCodeGenderId:
					return entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
					case EntityMainColumn.AdmShowFlg:
					return entityData.AdmShowFlg != _originalData.AdmShowFlg;
					case EntityMainColumn.DegEquvText:
					return entityData.DegEquvText != _originalData.DegEquvText;
					case EntityMainColumn.DegEquvTextEng:
					return entityData.DegEquvTextEng != _originalData.DegEquvTextEng;
					case EntityMainColumn.GsCodeLanguageId:
					return entityData.GsCodeLanguageId != _originalData.GsCodeLanguageId;
					case EntityMainColumn.ScheduleTypeFlg:
					return entityData.ScheduleTypeFlg != _originalData.ScheduleTypeFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntityMainColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.EntDescrAr != _originalData.EntDescrAr;
			result = result || entityData.EntCodeEntityTypeId != _originalData.EntCodeEntityTypeId;
			result = result || entityData.StateNotation != _originalData.StateNotation;
			result = result || entityData.EntParentId != _originalData.EntParentId;
			result = result || entityData.EntDescrEn != _originalData.EntDescrEn;
			result = result || entityData.IsStateFlg != _originalData.IsStateFlg;
			result = result || entityData.NodeChildCount != _originalData.NodeChildCount;
			result = result || entityData.NodePath != _originalData.NodePath;
			result = result || entityData.NodeOrder != _originalData.NodeOrder;
			result = result || entityData.NodeLevel != _originalData.NodeLevel;
			result = result || entityData.EdStudyMethodId != _originalData.EdStudyMethodId;
			result = result || entityData.IsInfoFlg != _originalData.IsInfoFlg;
			result = result || entityData.IsHomeFlg != _originalData.IsHomeFlg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.StateDescrAr != _originalData.StateDescrAr;
			result = result || entityData.StateDescrEn != _originalData.StateDescrEn;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.IsVisible != _originalData.IsVisible;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.LoadWithTrain != _originalData.LoadWithTrain;
			result = result || entityData.GsCdeSpecAreaId != _originalData.GsCdeSpecAreaId;
			result = result || entityData.MaxTrnsCh != _originalData.MaxTrnsCh;
			result = result || entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
			result = result || entityData.AdmShowFlg != _originalData.AdmShowFlg;
			result = result || entityData.DegEquvText != _originalData.DegEquvText;
			result = result || entityData.DegEquvTextEng != _originalData.DegEquvTextEng;
			result = result || entityData.GsCodeLanguageId != _originalData.GsCodeLanguageId;
			result = result || entityData.ScheduleTypeFlg != _originalData.ScheduleTypeFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EntityMain Entity with the original data.
		///</summary>
		public EntityMain GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntityMain(
				_originalData.EntMainId,
				_originalData.EntDescrAr,
				_originalData.EntCodeEntityTypeId,
				_originalData.StateNotation,
				_originalData.EntParentId,
				_originalData.EntDescrEn,
				_originalData.IsStateFlg,
				_originalData.NodeChildCount,
				_originalData.NodePath,
				_originalData.NodeOrder,
				_originalData.NodeLevel,
				_originalData.EdStudyMethodId,
				_originalData.IsInfoFlg,
				_originalData.IsHomeFlg,
				_originalData.AsFacultyInfoId,
				_originalData.StateDescrAr,
				_originalData.StateDescrEn,
				_originalData.EdCodeLevelId,
				_originalData.IsVisible,
				_originalData.IsActive,
				_originalData.AsCodeDegreeId,
				_originalData.ApproveFlg,
				_originalData.LoadWithTrain,
				_originalData.GsCdeSpecAreaId,
				_originalData.MaxTrnsCh,
				_originalData.GsCodeGenderId,
				_originalData.AdmShowFlg,
				_originalData.DegEquvText,
				_originalData.DegEquvTextEng,
				_originalData.GsCodeLanguageId,
				_originalData.ScheduleTypeFlg
				);
				
			return (EntityMain)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntityMainBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntityMainBase)
				return ValueEquals(this, (EntityMainBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntityMainBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntMainId.GetHashCode() ^ 
					((this.EntDescrAr == null) ? string.Empty : this.EntDescrAr.ToString()).GetHashCode() ^ 
					this.EntCodeEntityTypeId.GetHashCode() ^ 
					((this.StateNotation == null) ? string.Empty : this.StateNotation.ToString()).GetHashCode() ^ 
					((this.EntParentId == null) ? string.Empty : this.EntParentId.ToString()).GetHashCode() ^ 
					((this.EntDescrEn == null) ? string.Empty : this.EntDescrEn.ToString()).GetHashCode() ^ 
					((this.IsStateFlg == null) ? string.Empty : this.IsStateFlg.ToString()).GetHashCode() ^ 
					((this.NodeChildCount == null) ? string.Empty : this.NodeChildCount.ToString()).GetHashCode() ^ 
					((this.NodePath == null) ? string.Empty : this.NodePath.ToString()).GetHashCode() ^ 
					((this.NodeOrder == null) ? string.Empty : this.NodeOrder.ToString()).GetHashCode() ^ 
					((this.NodeLevel == null) ? string.Empty : this.NodeLevel.ToString()).GetHashCode() ^ 
					((this.EdStudyMethodId == null) ? string.Empty : this.EdStudyMethodId.ToString()).GetHashCode() ^ 
					((this.IsInfoFlg == null) ? string.Empty : this.IsInfoFlg.ToString()).GetHashCode() ^ 
					((this.IsHomeFlg == null) ? string.Empty : this.IsHomeFlg.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.StateDescrAr == null) ? string.Empty : this.StateDescrAr.ToString()).GetHashCode() ^ 
					((this.StateDescrEn == null) ? string.Empty : this.StateDescrEn.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					this.IsVisible.GetHashCode() ^ 
					this.IsActive.GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.LoadWithTrain == null) ? string.Empty : this.LoadWithTrain.ToString()).GetHashCode() ^ 
					((this.GsCdeSpecAreaId == null) ? string.Empty : this.GsCdeSpecAreaId.ToString()).GetHashCode() ^ 
					((this.MaxTrnsCh == null) ? string.Empty : this.MaxTrnsCh.ToString()).GetHashCode() ^ 
					((this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString()).GetHashCode() ^ 
					((this.AdmShowFlg == null) ? string.Empty : this.AdmShowFlg.ToString()).GetHashCode() ^ 
					((this.DegEquvText == null) ? string.Empty : this.DegEquvText.ToString()).GetHashCode() ^ 
					((this.DegEquvTextEng == null) ? string.Empty : this.DegEquvTextEng.ToString()).GetHashCode() ^ 
					((this.GsCodeLanguageId == null) ? string.Empty : this.GsCodeLanguageId.ToString()).GetHashCode() ^ 
					((this.ScheduleTypeFlg == null) ? string.Empty : this.ScheduleTypeFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntityMainBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntityMainBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntityMainBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntityMainBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntityMainBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntityMainBase Object1, EntityMainBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if ( Object1.EntDescrAr != null && Object2.EntDescrAr != null )
			{
				if (Object1.EntDescrAr != Object2.EntDescrAr)
					equal = false;
			}
			else if (Object1.EntDescrAr == null ^ Object2.EntDescrAr == null )
			{
				equal = false;
			}
			if (Object1.EntCodeEntityTypeId != Object2.EntCodeEntityTypeId)
				equal = false;
			if ( Object1.StateNotation != null && Object2.StateNotation != null )
			{
				if (Object1.StateNotation != Object2.StateNotation)
					equal = false;
			}
			else if (Object1.StateNotation == null ^ Object2.StateNotation == null )
			{
				equal = false;
			}
			if ( Object1.EntParentId != null && Object2.EntParentId != null )
			{
				if (Object1.EntParentId != Object2.EntParentId)
					equal = false;
			}
			else if (Object1.EntParentId == null ^ Object2.EntParentId == null )
			{
				equal = false;
			}
			if ( Object1.EntDescrEn != null && Object2.EntDescrEn != null )
			{
				if (Object1.EntDescrEn != Object2.EntDescrEn)
					equal = false;
			}
			else if (Object1.EntDescrEn == null ^ Object2.EntDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.IsStateFlg != null && Object2.IsStateFlg != null )
			{
				if (Object1.IsStateFlg != Object2.IsStateFlg)
					equal = false;
			}
			else if (Object1.IsStateFlg == null ^ Object2.IsStateFlg == null )
			{
				equal = false;
			}
			if ( Object1.NodeChildCount != null && Object2.NodeChildCount != null )
			{
				if (Object1.NodeChildCount != Object2.NodeChildCount)
					equal = false;
			}
			else if (Object1.NodeChildCount == null ^ Object2.NodeChildCount == null )
			{
				equal = false;
			}
			if ( Object1.NodePath != null && Object2.NodePath != null )
			{
				if (Object1.NodePath != Object2.NodePath)
					equal = false;
			}
			else if (Object1.NodePath == null ^ Object2.NodePath == null )
			{
				equal = false;
			}
			if ( Object1.NodeOrder != null && Object2.NodeOrder != null )
			{
				if (Object1.NodeOrder != Object2.NodeOrder)
					equal = false;
			}
			else if (Object1.NodeOrder == null ^ Object2.NodeOrder == null )
			{
				equal = false;
			}
			if ( Object1.NodeLevel != null && Object2.NodeLevel != null )
			{
				if (Object1.NodeLevel != Object2.NodeLevel)
					equal = false;
			}
			else if (Object1.NodeLevel == null ^ Object2.NodeLevel == null )
			{
				equal = false;
			}
			if ( Object1.EdStudyMethodId != null && Object2.EdStudyMethodId != null )
			{
				if (Object1.EdStudyMethodId != Object2.EdStudyMethodId)
					equal = false;
			}
			else if (Object1.EdStudyMethodId == null ^ Object2.EdStudyMethodId == null )
			{
				equal = false;
			}
			if ( Object1.IsInfoFlg != null && Object2.IsInfoFlg != null )
			{
				if (Object1.IsInfoFlg != Object2.IsInfoFlg)
					equal = false;
			}
			else if (Object1.IsInfoFlg == null ^ Object2.IsInfoFlg == null )
			{
				equal = false;
			}
			if ( Object1.IsHomeFlg != null && Object2.IsHomeFlg != null )
			{
				if (Object1.IsHomeFlg != Object2.IsHomeFlg)
					equal = false;
			}
			else if (Object1.IsHomeFlg == null ^ Object2.IsHomeFlg == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.StateDescrAr != null && Object2.StateDescrAr != null )
			{
				if (Object1.StateDescrAr != Object2.StateDescrAr)
					equal = false;
			}
			else if (Object1.StateDescrAr == null ^ Object2.StateDescrAr == null )
			{
				equal = false;
			}
			if ( Object1.StateDescrEn != null && Object2.StateDescrEn != null )
			{
				if (Object1.StateDescrEn != Object2.StateDescrEn)
					equal = false;
			}
			else if (Object1.StateDescrEn == null ^ Object2.StateDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if (Object1.IsVisible != Object2.IsVisible)
				equal = false;
			if (Object1.IsActive != Object2.IsActive)
				equal = false;
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.LoadWithTrain != null && Object2.LoadWithTrain != null )
			{
				if (Object1.LoadWithTrain != Object2.LoadWithTrain)
					equal = false;
			}
			else if (Object1.LoadWithTrain == null ^ Object2.LoadWithTrain == null )
			{
				equal = false;
			}
			if ( Object1.GsCdeSpecAreaId != null && Object2.GsCdeSpecAreaId != null )
			{
				if (Object1.GsCdeSpecAreaId != Object2.GsCdeSpecAreaId)
					equal = false;
			}
			else if (Object1.GsCdeSpecAreaId == null ^ Object2.GsCdeSpecAreaId == null )
			{
				equal = false;
			}
			if ( Object1.MaxTrnsCh != null && Object2.MaxTrnsCh != null )
			{
				if (Object1.MaxTrnsCh != Object2.MaxTrnsCh)
					equal = false;
			}
			else if (Object1.MaxTrnsCh == null ^ Object2.MaxTrnsCh == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeGenderId != null && Object2.GsCodeGenderId != null )
			{
				if (Object1.GsCodeGenderId != Object2.GsCodeGenderId)
					equal = false;
			}
			else if (Object1.GsCodeGenderId == null ^ Object2.GsCodeGenderId == null )
			{
				equal = false;
			}
			if ( Object1.AdmShowFlg != null && Object2.AdmShowFlg != null )
			{
				if (Object1.AdmShowFlg != Object2.AdmShowFlg)
					equal = false;
			}
			else if (Object1.AdmShowFlg == null ^ Object2.AdmShowFlg == null )
			{
				equal = false;
			}
			if ( Object1.DegEquvText != null && Object2.DegEquvText != null )
			{
				if (Object1.DegEquvText != Object2.DegEquvText)
					equal = false;
			}
			else if (Object1.DegEquvText == null ^ Object2.DegEquvText == null )
			{
				equal = false;
			}
			if ( Object1.DegEquvTextEng != null && Object2.DegEquvTextEng != null )
			{
				if (Object1.DegEquvTextEng != Object2.DegEquvTextEng)
					equal = false;
			}
			else if (Object1.DegEquvTextEng == null ^ Object2.DegEquvTextEng == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeLanguageId != null && Object2.GsCodeLanguageId != null )
			{
				if (Object1.GsCodeLanguageId != Object2.GsCodeLanguageId)
					equal = false;
			}
			else if (Object1.GsCodeLanguageId == null ^ Object2.GsCodeLanguageId == null )
			{
				equal = false;
			}
			if ( Object1.ScheduleTypeFlg != null && Object2.ScheduleTypeFlg != null )
			{
				if (Object1.ScheduleTypeFlg != Object2.ScheduleTypeFlg)
					equal = false;
			}
			else if (Object1.ScheduleTypeFlg == null ^ Object2.ScheduleTypeFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntityMainBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntityMainComparer GetComparer()
        {
            return new EntityMainComparer();
        }
        */

        // Comparer delegates back to EntityMain
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntityMain rhs, EntityMainColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntityMainColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case EntityMainColumn.EntDescrAr:
            		return this.EntDescrAr.CompareTo(rhs.EntDescrAr);
            		
            		                 
            	
            	
            	case EntityMainColumn.EntCodeEntityTypeId:
            		return this.EntCodeEntityTypeId.CompareTo(rhs.EntCodeEntityTypeId);
            		
            		                 
            	
            	
            	case EntityMainColumn.StateNotation:
            		return this.StateNotation.CompareTo(rhs.StateNotation);
            		
            		                 
            	
            	
            	case EntityMainColumn.EntParentId:
            		return this.EntParentId.Value.CompareTo(rhs.EntParentId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.EntDescrEn:
            		return this.EntDescrEn.CompareTo(rhs.EntDescrEn);
            		
            		                 
            	
            	
            	case EntityMainColumn.IsStateFlg:
            		return this.IsStateFlg.Value.CompareTo(rhs.IsStateFlg.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.NodeChildCount:
            		return this.NodeChildCount.Value.CompareTo(rhs.NodeChildCount.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.NodePath:
            		return this.NodePath.CompareTo(rhs.NodePath);
            		
            		                 
            	
            	
            	case EntityMainColumn.NodeOrder:
            		return this.NodeOrder.Value.CompareTo(rhs.NodeOrder.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.NodeLevel:
            		return this.NodeLevel.Value.CompareTo(rhs.NodeLevel.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.EdStudyMethodId:
            		return this.EdStudyMethodId.Value.CompareTo(rhs.EdStudyMethodId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.IsInfoFlg:
            		return this.IsInfoFlg.Value.CompareTo(rhs.IsInfoFlg.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.IsHomeFlg:
            		return this.IsHomeFlg.Value.CompareTo(rhs.IsHomeFlg.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.StateDescrAr:
            		return this.StateDescrAr.CompareTo(rhs.StateDescrAr);
            		
            		                 
            	
            	
            	case EntityMainColumn.StateDescrEn:
            		return this.StateDescrEn.CompareTo(rhs.StateDescrEn);
            		
            		                 
            	
            	
            	case EntityMainColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.IsVisible:
            		return this.IsVisible.CompareTo(rhs.IsVisible);
            		
            		                 
            	
            	
            	case EntityMainColumn.IsActive:
            		return this.IsActive.CompareTo(rhs.IsActive);
            		
            		                 
            	
            	
            	case EntityMainColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.LoadWithTrain:
            		return this.LoadWithTrain.Value.CompareTo(rhs.LoadWithTrain.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.GsCdeSpecAreaId:
            		return this.GsCdeSpecAreaId.Value.CompareTo(rhs.GsCdeSpecAreaId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.MaxTrnsCh:
            		return this.MaxTrnsCh.Value.CompareTo(rhs.MaxTrnsCh.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.GsCodeGenderId:
            		return this.GsCodeGenderId.Value.CompareTo(rhs.GsCodeGenderId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.AdmShowFlg:
            		return this.AdmShowFlg.Value.CompareTo(rhs.AdmShowFlg.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.DegEquvText:
            		return this.DegEquvText.CompareTo(rhs.DegEquvText);
            		
            		                 
            	
            	
            	case EntityMainColumn.DegEquvTextEng:
            		return this.DegEquvTextEng.CompareTo(rhs.DegEquvTextEng);
            		
            		                 
            	
            	
            	case EntityMainColumn.GsCodeLanguageId:
            		return this.GsCodeLanguageId.Value.CompareTo(rhs.GsCodeLanguageId.Value);
            		
            		                 
            	
            	
            	case EntityMainColumn.ScheduleTypeFlg:
            		return this.ScheduleTypeFlg.Value.CompareTo(rhs.ScheduleTypeFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntityMainKey> Members
		
		// member variable for the EntityId property
		private EntityMainKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntityMainKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntityMainKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntityMain")
					.Append("|").Append( this.EntMainId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{32}{31}- EntMainId: {0}{31}- EntDescrAr: {1}{31}- EntCodeEntityTypeId: {2}{31}- StateNotation: {3}{31}- EntParentId: {4}{31}- EntDescrEn: {5}{31}- IsStateFlg: {6}{31}- NodeChildCount: {7}{31}- NodePath: {8}{31}- NodeOrder: {9}{31}- NodeLevel: {10}{31}- EdStudyMethodId: {11}{31}- IsInfoFlg: {12}{31}- IsHomeFlg: {13}{31}- AsFacultyInfoId: {14}{31}- StateDescrAr: {15}{31}- StateDescrEn: {16}{31}- EdCodeLevelId: {17}{31}- IsVisible: {18}{31}- IsActive: {19}{31}- AsCodeDegreeId: {20}{31}- ApproveFlg: {21}{31}- LoadWithTrain: {22}{31}- GsCdeSpecAreaId: {23}{31}- MaxTrnsCh: {24}{31}- GsCodeGenderId: {25}{31}- AdmShowFlg: {26}{31}- DegEquvText: {27}{31}- DegEquvTextEng: {28}{31}- GsCodeLanguageId: {29}{31}- ScheduleTypeFlg: {30}{31}{33}", 
				this.EntMainId,
				(this.EntDescrAr == null) ? string.Empty : this.EntDescrAr.ToString(),
				this.EntCodeEntityTypeId,
				(this.StateNotation == null) ? string.Empty : this.StateNotation.ToString(),
				(this.EntParentId == null) ? string.Empty : this.EntParentId.ToString(),
				(this.EntDescrEn == null) ? string.Empty : this.EntDescrEn.ToString(),
				(this.IsStateFlg == null) ? string.Empty : this.IsStateFlg.ToString(),
				(this.NodeChildCount == null) ? string.Empty : this.NodeChildCount.ToString(),
				(this.NodePath == null) ? string.Empty : this.NodePath.ToString(),
				(this.NodeOrder == null) ? string.Empty : this.NodeOrder.ToString(),
				(this.NodeLevel == null) ? string.Empty : this.NodeLevel.ToString(),
				(this.EdStudyMethodId == null) ? string.Empty : this.EdStudyMethodId.ToString(),
				(this.IsInfoFlg == null) ? string.Empty : this.IsInfoFlg.ToString(),
				(this.IsHomeFlg == null) ? string.Empty : this.IsHomeFlg.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.StateDescrAr == null) ? string.Empty : this.StateDescrAr.ToString(),
				(this.StateDescrEn == null) ? string.Empty : this.StateDescrEn.ToString(),
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				this.IsVisible,
				this.IsActive,
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.LoadWithTrain == null) ? string.Empty : this.LoadWithTrain.ToString(),
				(this.GsCdeSpecAreaId == null) ? string.Empty : this.GsCdeSpecAreaId.ToString(),
				(this.MaxTrnsCh == null) ? string.Empty : this.MaxTrnsCh.ToString(),
				(this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString(),
				(this.AdmShowFlg == null) ? string.Empty : this.AdmShowFlg.ToString(),
				(this.DegEquvText == null) ? string.Empty : this.DegEquvText.ToString(),
				(this.DegEquvTextEng == null) ? string.Empty : this.DegEquvTextEng.ToString(),
				(this.GsCodeLanguageId == null) ? string.Empty : this.GsCodeLanguageId.ToString(),
				(this.ScheduleTypeFlg == null) ? string.Empty : this.ScheduleTypeFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENTITY_MAIN' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntityMainEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_MAIN_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENTITY_MAIN"</remarks>
		public System.Decimal EntMainId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntMainId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_DESCR_AR : 
		/// </summary>
		public System.String		  EntDescrAr = null;
		
		/// <summary>
		/// ENT_CODE_ENTITY_TYPE_ID : 
		/// </summary>
		public System.Decimal		  EntCodeEntityTypeId = 0.0m;
		
		/// <summary>
		/// STATE_NOTATION : 
		/// </summary>
		public System.String		  StateNotation = null;
		
		/// <summary>
		/// ENT_PARENT_ID : 
		/// </summary>
		public System.Decimal?		  EntParentId = null;
		
		/// <summary>
		/// ENT_DESCR_EN : 
		/// </summary>
		public System.String		  EntDescrEn = null;
		
		/// <summary>
		/// IS_STATE_FLG : 
		/// </summary>
		public System.Decimal?		  IsStateFlg = null;
		
		/// <summary>
		/// NODE_CHILD_COUNT : 
		/// </summary>
		public System.Decimal?		  NodeChildCount = null;
		
		/// <summary>
		/// NODE_PATH : 
		/// </summary>
		public System.String		  NodePath = null;
		
		/// <summary>
		/// NODE_ORDER : 
		/// </summary>
		public System.Decimal?		  NodeOrder = null;
		
		/// <summary>
		/// NODE_LEVEL : 
		/// </summary>
		public System.Decimal?		  NodeLevel = null;
		
		/// <summary>
		/// ED_STUDY_METHOD_ID : 
		/// </summary>
		public System.Decimal?		  EdStudyMethodId = null;
		
		/// <summary>
		/// IS_INFO_FLG : 
		/// </summary>
		public System.Decimal?		  IsInfoFlg = null;
		
		/// <summary>
		/// IS_HOME_FLG : 
		/// </summary>
		public System.Decimal?		  IsHomeFlg = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// STATE_DESCR_AR : 
		/// </summary>
		public System.String		  StateDescrAr = null;
		
		/// <summary>
		/// STATE_DESCR_EN : 
		/// </summary>
		public System.String		  StateDescrEn = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// IS_VISIBLE : 
		/// </summary>
		public System.Decimal		  IsVisible = 0.0m;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Decimal		  IsActive = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// APPROVE_FLG : 
		/// </summary>
		public System.Decimal?		  ApproveFlg = null;
		
		/// <summary>
		/// LOAD_WITH_TRAIN : 
		/// </summary>
		public System.Decimal?		  LoadWithTrain = null;
		
		/// <summary>
		/// GS_CDE_SPEC_AREA_ID : 
		/// </summary>
		public System.Decimal?		  GsCdeSpecAreaId = null;
		
		/// <summary>
		/// MAX_TRNS_CH : اقصى عدد ساعات تحويل عند  تطبيق المقاصة الخارجية 
		/// </summary>
		public System.Int32?		  MaxTrnsCh = null;
		
		/// <summary>
		/// GS_CODE_GENDER_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeGenderId = null;
		
		/// <summary>
		/// ADM_SHOW_FLG : 
		/// </summary>
		public System.Boolean?		  AdmShowFlg = null;
		
		/// <summary>
		/// DEG_EQUV_TEXT : نص قرار المعادلة
		/// </summary>
		public System.String		  DegEquvText = null;
		
		/// <summary>
		/// DEG_EQUV_TEXT_ENG : 
		/// </summary>
		public System.String		  DegEquvTextEng = null;
		
		/// <summary>
		/// GS_CODE_LANGUAGE_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeLanguageId = null;
		
		/// <summary>
		/// SCHEDULE_TYPE_FLG : 
		/// </summary>
		public System.Decimal?		  ScheduleTypeFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdCodeStudyMethod _edStudyMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdStudyMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeStudyMethod EdStudyMethodIdSource
      	{
            get { return this._edStudyMethodIdSource; }
            set { this._edStudyMethodIdSource = value; }
      	}
		private EntCodeEntityType _entCodeEntityTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCodeEntityType"/>.
		/// </summary>
		/// <value>The source EntCodeEntityType for EntCodeEntityTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCodeEntityType EntCodeEntityTypeIdSource
      	{
            get { return this._entCodeEntityTypeIdSource; }
            set { this._entCodeEntityTypeIdSource = value; }
      	}
		private EntityMain _entParentIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntParentId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntParentIdSource
      	{
            get { return this._entParentIdSource; }
            set { this._entParentIdSource = value; }
      	}
		private GsCdeSpecArea _gsCdeSpecAreaIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeSpecArea"/>.
		/// </summary>
		/// <value>The source GsCdeSpecArea for GsCdeSpecAreaId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeSpecArea GsCdeSpecAreaIdSource
      	{
            get { return this._gsCdeSpecAreaIdSource; }
            set { this._gsCdeSpecAreaIdSource = value; }
      	}
		private GsCodeGender _gsCodeGenderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return this._gsCodeGenderIdSource; }
            set { this._gsCodeGenderIdSource = value; }
      	}
		private GsCodeLanguage _gsCodeLanguageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeLanguage"/>.
		/// </summary>
		/// <value>The source GsCodeLanguage for GsCodeLanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeLanguage GsCodeLanguageIdSource
      	{
            get { return this._gsCodeLanguageIdSource; }
            set { this._gsCodeLanguageIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudFacultyCollectionGetByEntMainGrad1
		
		private TList<EdStudFaculty> _edStudFacultyEntMainGrad3GetByEntMainGrad1;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudFacultyEntMainGrad3GetByEntMainGrad1
		/// </summary>
		
		public TList<EdStudFaculty> EdStudFacultyCollectionGetByEntMainGrad1
		{
			get
			{
				if (_edStudFacultyEntMainGrad3GetByEntMainGrad1 == null)
				{
				_edStudFacultyEntMainGrad3GetByEntMainGrad1 = new TList<EdStudFaculty>();
				}
	
				return _edStudFacultyEntMainGrad3GetByEntMainGrad1;
			}
			set { _edStudFacultyEntMainGrad3GetByEntMainGrad1 = value; }
		}
		
		#endregion

		#region SvStaffEvlCollectionGetByEntMainMajorId
		
		private TList<SvStaffEvl> _svStaffEvlEntMainMajorIdGetByEntMainMajorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svStaffEvlEntMainMajorIdGetByEntMainMajorId
		/// </summary>
		
		public TList<SvStaffEvl> SvStaffEvlCollectionGetByEntMainMajorId
		{
			get
			{
				if (_svStaffEvlEntMainMajorIdGetByEntMainMajorId == null)
				{
				_svStaffEvlEntMainMajorIdGetByEntMainMajorId = new TList<SvStaffEvl>();
				}
	
				return _svStaffEvlEntMainMajorIdGetByEntMainMajorId;
			}
			set { _svStaffEvlEntMainMajorIdGetByEntMainMajorId = value; }
		}
		
		#endregion

		#region SvStaffEvlCollectionGetByEntMainId
		
		private TList<SvStaffEvl> _svStaffEvlEntMainMinorIdGetByEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svStaffEvlEntMainMinorIdGetByEntMainId
		/// </summary>
		
		public TList<SvStaffEvl> SvStaffEvlCollectionGetByEntMainId
		{
			get
			{
				if (_svStaffEvlEntMainMinorIdGetByEntMainId == null)
				{
				_svStaffEvlEntMainMinorIdGetByEntMainId = new TList<SvStaffEvl>();
				}
	
				return _svStaffEvlEntMainMinorIdGetByEntMainId;
			}
			set { _svStaffEvlEntMainMinorIdGetByEntMainId = value; }
		}
		
		#endregion

		#region EntPolicyMdDataCollection
		
		private TList<EntPolicyMdData> _entPolicyMdDataEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyMdDataEntMainId
		/// </summary>
		
		public TList<EntPolicyMdData> EntPolicyMdDataCollection
		{
			get
			{
				if (_entPolicyMdDataEntMainId == null)
				{
				_entPolicyMdDataEntMainId = new TList<EntPolicyMdData>();
				}
	
				return _entPolicyMdDataEntMainId;
			}
			set { _entPolicyMdDataEntMainId = value; }
		}
		
		#endregion

		#region EntFullfillMdDataCollection
		
		private TList<EntFullfillMdData> _entFullfillMdDataEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entFullfillMdDataEntMainId
		/// </summary>
		
		public TList<EntFullfillMdData> EntFullfillMdDataCollection
		{
			get
			{
				if (_entFullfillMdDataEntMainId == null)
				{
				_entFullfillMdDataEntMainId = new TList<EntFullfillMdData>();
				}
	
				return _entFullfillMdDataEntMainId;
			}
			set { _entFullfillMdDataEntMainId = value; }
		}
		
		#endregion

		#region EntPolicyGradingLevelCollection
		
		private TList<EntPolicyGradingLevel> _entPolicyGradingLevelEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyGradingLevelEntMainId
		/// </summary>
		
		public TList<EntPolicyGradingLevel> EntPolicyGradingLevelCollection
		{
			get
			{
				if (_entPolicyGradingLevelEntMainId == null)
				{
				_entPolicyGradingLevelEntMainId = new TList<EntPolicyGradingLevel>();
				}
	
				return _entPolicyGradingLevelEntMainId;
			}
			set { _entPolicyGradingLevelEntMainId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsStateToCollection
		
		private TList<EdStudIntTrnsStateTo> _edStudIntTrnsStateToEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsStateToEntMainId
		/// </summary>
		
		public TList<EdStudIntTrnsStateTo> EdStudIntTrnsStateToCollection
		{
			get
			{
				if (_edStudIntTrnsStateToEntMainId == null)
				{
				_edStudIntTrnsStateToEntMainId = new TList<EdStudIntTrnsStateTo>();
				}
	
				return _edStudIntTrnsStateToEntMainId;
			}
			set { _edStudIntTrnsStateToEntMainId = value; }
		}
		
		#endregion

		#region FeeFacultyInstallmentCollection
		
		private TList<FeeFacultyInstallment> _feeFacultyInstallmentEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyInstallmentEntMainId
		/// </summary>
		
		public TList<FeeFacultyInstallment> FeeFacultyInstallmentCollection
		{
			get
			{
				if (_feeFacultyInstallmentEntMainId == null)
				{
				_feeFacultyInstallmentEntMainId = new TList<FeeFacultyInstallment>();
				}
	
				return _feeFacultyInstallmentEntMainId;
			}
			set { _feeFacultyInstallmentEntMainId = value; }
		}
		
		#endregion

		#region AdmReqDocCollection
		
		private TList<AdmReqDoc> _admReqDocEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admReqDocEntMainId
		/// </summary>
		
		public TList<AdmReqDoc> AdmReqDocCollection
		{
			get
			{
				if (_admReqDocEntMainId == null)
				{
				_admReqDocEntMainId = new TList<AdmReqDoc>();
				}
	
				return _admReqDocEntMainId;
			}
			set { _admReqDocEntMainId = value; }
		}
		
		#endregion

		#region EdCourseOrientCollection
		
		private TList<EdCourseOrient> _edCourseOrientEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseOrientEntMainId
		/// </summary>
		
		public TList<EdCourseOrient> EdCourseOrientCollection
		{
			get
			{
				if (_edCourseOrientEntMainId == null)
				{
				_edCourseOrientEntMainId = new TList<EdCourseOrient>();
				}
	
				return _edCourseOrientEntMainId;
			}
			set { _edCourseOrientEntMainId = value; }
		}
		
		#endregion

		#region EdProjectCollection
		
		private TList<EdProject> _edProjectEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edProjectEntMainId
		/// </summary>
		
		public TList<EdProject> EdProjectCollection
		{
			get
			{
				if (_edProjectEntMainId == null)
				{
				_edProjectEntMainId = new TList<EdProject>();
				}
	
				return _edProjectEntMainId;
			}
			set { _edProjectEntMainId = value; }
		}
		
		#endregion

		#region AdmCdePlacementExamCollection
		
		private TList<AdmCdePlacementExam> _admCdePlacementExamEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdePlacementExamEntMainId
		/// </summary>
		
		public TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get
			{
				if (_admCdePlacementExamEntMainId == null)
				{
				_admCdePlacementExamEntMainId = new TList<AdmCdePlacementExam>();
				}
	
				return _admCdePlacementExamEntMainId;
			}
			set { _admCdePlacementExamEntMainId = value; }
		}
		
		#endregion

		#region EntCoursePkgHdrCollectionGetByEntMainRltdId
		
		private TList<EntCoursePkgHdr> _entCoursePkgHdrEntMainRltdIdGetByEntMainRltdId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entCoursePkgHdrEntMainRltdIdGetByEntMainRltdId
		/// </summary>
		
		public TList<EntCoursePkgHdr> EntCoursePkgHdrCollectionGetByEntMainRltdId
		{
			get
			{
				if (_entCoursePkgHdrEntMainRltdIdGetByEntMainRltdId == null)
				{
				_entCoursePkgHdrEntMainRltdIdGetByEntMainRltdId = new TList<EntCoursePkgHdr>();
				}
	
				return _entCoursePkgHdrEntMainRltdIdGetByEntMainRltdId;
			}
			set { _entCoursePkgHdrEntMainRltdIdGetByEntMainRltdId = value; }
		}
		
		#endregion

		#region SpoSponsorOfferExtCollection
		
		private TList<SpoSponsorOfferExt> _spoSponsorOfferExtEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoSponsorOfferExtEntMainId
		/// </summary>
		
		public TList<SpoSponsorOfferExt> SpoSponsorOfferExtCollection
		{
			get
			{
				if (_spoSponsorOfferExtEntMainId == null)
				{
				_spoSponsorOfferExtEntMainId = new TList<SpoSponsorOfferExt>();
				}
	
				return _spoSponsorOfferExtEntMainId;
			}
			set { _spoSponsorOfferExtEntMainId = value; }
		}
		
		#endregion

		#region ScHallRsrvCollection
		
		private TList<ScHallRsrv> _scHallRsrvEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scHallRsrvEntMainId
		/// </summary>
		
		public TList<ScHallRsrv> ScHallRsrvCollection
		{
			get
			{
				if (_scHallRsrvEntMainId == null)
				{
				_scHallRsrvEntMainId = new TList<ScHallRsrv>();
				}
	
				return _scHallRsrvEntMainId;
			}
			set { _scHallRsrvEntMainId = value; }
		}
		
		#endregion

		#region ScSectionGroupHdrCollection
		
		private TList<ScSectionGroupHdr> _scSectionGroupHdrEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSectionGroupHdrEntMainId
		/// </summary>
		
		public TList<ScSectionGroupHdr> ScSectionGroupHdrCollection
		{
			get
			{
				if (_scSectionGroupHdrEntMainId == null)
				{
				_scSectionGroupHdrEntMainId = new TList<ScSectionGroupHdr>();
				}
	
				return _scSectionGroupHdrEntMainId;
			}
			set { _scSectionGroupHdrEntMainId = value; }
		}
		
		#endregion

		#region EntMajorPhaseCollection
		
		private TList<EntMajorPhase> _entMajorPhaseEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMajorPhaseEntMainId
		/// </summary>
		
		public TList<EntMajorPhase> EntMajorPhaseCollection
		{
			get
			{
				if (_entMajorPhaseEntMainId == null)
				{
				_entMajorPhaseEntMainId = new TList<EntMajorPhase>();
				}
	
				return _entMajorPhaseEntMainId;
			}
			set { _entMajorPhaseEntMainId = value; }
		}
		
		#endregion

		#region EntPolicyObserved
		
		private EntPolicyObserved _entPolicyObservedEntMainId;
		
		/// <summary>
		///	Holds a  EntPolicyObserved entity object
		///	which is related to this object through the relation _entPolicyObservedEntMainId
		/// </summary>
		
		public EntPolicyObserved EntPolicyObserved
		{
			get {		return _entPolicyObservedEntMainId;		}
			set { 	_entPolicyObservedEntMainId = value; 	}
		}
		
		#endregion 

		#region AdmAppInterviewExamCollection
		
		private TList<AdmAppInterviewExam> _admAppInterviewExamEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppInterviewExamEntMainId
		/// </summary>
		
		public TList<AdmAppInterviewExam> AdmAppInterviewExamCollection
		{
			get
			{
				if (_admAppInterviewExamEntMainId == null)
				{
				_admAppInterviewExamEntMainId = new TList<AdmAppInterviewExam>();
				}
	
				return _admAppInterviewExamEntMainId;
			}
			set { _admAppInterviewExamEntMainId = value; }
		}
		
		#endregion

		#region EdCourseTopicCollection
		
		private TList<EdCourseTopic> _edCourseTopicEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseTopicEntMainId
		/// </summary>
		
		public TList<EdCourseTopic> EdCourseTopicCollection
		{
			get
			{
				if (_edCourseTopicEntMainId == null)
				{
				_edCourseTopicEntMainId = new TList<EdCourseTopic>();
				}
	
				return _edCourseTopicEntMainId;
			}
			set { _edCourseTopicEntMainId = value; }
		}
		
		#endregion

		#region CoControlCollection
		
		private TList<CoControl> _coControlEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coControlEntMainId
		/// </summary>
		
		public TList<CoControl> CoControlCollection
		{
			get
			{
				if (_coControlEntMainId == null)
				{
				_coControlEntMainId = new TList<CoControl>();
				}
	
				return _coControlEntMainId;
			}
			set { _coControlEntMainId = value; }
		}
		
		#endregion

		#region EdAcadPlanCollection
		
		private TList<EdAcadPlan> _edAcadPlanEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edAcadPlanEntMainId
		/// </summary>
		
		public TList<EdAcadPlan> EdAcadPlanCollection
		{
			get
			{
				if (_edAcadPlanEntMainId == null)
				{
				_edAcadPlanEntMainId = new TList<EdAcadPlan>();
				}
	
				return _edAcadPlanEntMainId;
			}
			set { _edAcadPlanEntMainId = value; }
		}
		
		#endregion

		#region EdStudIntTransPrefCollection
		
		private TList<EdStudIntTransPref> _edStudIntTransPrefEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTransPrefEntMainId
		/// </summary>
		
		public TList<EdStudIntTransPref> EdStudIntTransPrefCollection
		{
			get
			{
				if (_edStudIntTransPrefEntMainId == null)
				{
				_edStudIntTransPrefEntMainId = new TList<EdStudIntTransPref>();
				}
	
				return _edStudIntTransPrefEntMainId;
			}
			set { _edStudIntTransPrefEntMainId = value; }
		}
		
		#endregion

		#region AdmPrecondQualCollection
		
		private TList<AdmPrecondQual> _admPrecondQualEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPrecondQualEntMainId
		/// </summary>
		
		public TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get
			{
				if (_admPrecondQualEntMainId == null)
				{
				_admPrecondQualEntMainId = new TList<AdmPrecondQual>();
				}
	
				return _admPrecondQualEntMainId;
			}
			set { _admPrecondQualEntMainId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsStateFromCollection
		
		private TList<EdStudIntTrnsStateFrom> _edStudIntTrnsStateFromEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsStateFromEntMainId
		/// </summary>
		
		public TList<EdStudIntTrnsStateFrom> EdStudIntTrnsStateFromCollection
		{
			get
			{
				if (_edStudIntTrnsStateFromEntMainId == null)
				{
				_edStudIntTrnsStateFromEntMainId = new TList<EdStudIntTrnsStateFrom>();
				}
	
				return _edStudIntTrnsStateFromEntMainId;
			}
			set { _edStudIntTrnsStateFromEntMainId = value; }
		}
		
		#endregion

		#region CoControlRoomCollection
		
		private TList<CoControlRoom> _coControlRoomEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coControlRoomEntMainId
		/// </summary>
		
		public TList<CoControlRoom> CoControlRoomCollection
		{
			get
			{
				if (_coControlRoomEntMainId == null)
				{
				_coControlRoomEntMainId = new TList<CoControlRoom>();
				}
	
				return _coControlRoomEntMainId;
			}
			set { _coControlRoomEntMainId = value; }
		}
		
		#endregion

		#region SaScQualCollection
		
		private TList<SaScQual> _saScQualAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saScQualAsNodeId
		/// </summary>
		
		public TList<SaScQual> SaScQualCollection
		{
			get
			{
				if (_saScQualAsNodeId == null)
				{
				_saScQualAsNodeId = new TList<SaScQual>();
				}
	
				return _saScQualAsNodeId;
			}
			set { _saScQualAsNodeId = value; }
		}
		
		#endregion

		#region EntIntroducMdDataCollection
		
		private TList<EntIntroducMdData> _entIntroducMdDataEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entIntroducMdDataEntMainId
		/// </summary>
		
		public TList<EntIntroducMdData> EntIntroducMdDataCollection
		{
			get
			{
				if (_entIntroducMdDataEntMainId == null)
				{
				_entIntroducMdDataEntMainId = new TList<EntIntroducMdData>();
				}
	
				return _entIntroducMdDataEntMainId;
			}
			set { _entIntroducMdDataEntMainId = value; }
		}
		
		#endregion

		#region EntCoursePkgMdDataCollection
		
		private TList<EntCoursePkgMdData> _entCoursePkgMdDataEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entCoursePkgMdDataEntMainId
		/// </summary>
		
		public TList<EntCoursePkgMdData> EntCoursePkgMdDataCollection
		{
			get
			{
				if (_entCoursePkgMdDataEntMainId == null)
				{
				_entCoursePkgMdDataEntMainId = new TList<EntCoursePkgMdData>();
				}
	
				return _entCoursePkgMdDataEntMainId;
			}
			set { _entCoursePkgMdDataEntMainId = value; }
		}
		
		#endregion

		#region AdmTansikMajorsCodesCollection
		
		private TList<AdmTansikMajorsCodes> _admTansikMajorsCodesEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTansikMajorsCodesEntMainId
		/// </summary>
		
		public TList<AdmTansikMajorsCodes> AdmTansikMajorsCodesCollection
		{
			get
			{
				if (_admTansikMajorsCodesEntMainId == null)
				{
				_admTansikMajorsCodesEntMainId = new TList<AdmTansikMajorsCodes>();
				}
	
				return _admTansikMajorsCodesEntMainId;
			}
			set { _admTansikMajorsCodesEntMainId = value; }
		}
		
		#endregion

		#region EntPrecondMdDataCollection
		
		private TList<EntPrecondMdData> _entPrecondMdDataEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPrecondMdDataEntMainId
		/// </summary>
		
		public TList<EntPrecondMdData> EntPrecondMdDataCollection
		{
			get
			{
				if (_entPrecondMdDataEntMainId == null)
				{
				_entPrecondMdDataEntMainId = new TList<EntPrecondMdData>();
				}
	
				return _entPrecondMdDataEntMainId;
			}
			set { _entPrecondMdDataEntMainId = value; }
		}
		
		#endregion

		#region AdmCdeFeeCollection
		
		private TList<AdmCdeFee> _admCdeFeeEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeFeeEntMainId
		/// </summary>
		
		public TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get
			{
				if (_admCdeFeeEntMainId == null)
				{
				_admCdeFeeEntMainId = new TList<AdmCdeFee>();
				}
	
				return _admCdeFeeEntMainId;
			}
			set { _admCdeFeeEntMainId = value; }
		}
		
		#endregion

		#region EdStudStateCollection
		
		private TList<EdStudState> _edStudStateEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudStateEntMainId
		/// </summary>
		
		public TList<EdStudState> EdStudStateCollection
		{
			get
			{
				if (_edStudStateEntMainId == null)
				{
				_edStudStateEntMainId = new TList<EdStudState>();
				}
	
				return _edStudStateEntMainId;
			}
			set { _edStudStateEntMainId = value; }
		}
		
		#endregion

		#region GsCommCollectionGetByEntMainMinorId
		
		private TList<GsComm> _gsCommEntMainMinorIdGetByEntMainMinorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCommEntMainMinorIdGetByEntMainMinorId
		/// </summary>
		
		public TList<GsComm> GsCommCollectionGetByEntMainMinorId
		{
			get
			{
				if (_gsCommEntMainMinorIdGetByEntMainMinorId == null)
				{
				_gsCommEntMainMinorIdGetByEntMainMinorId = new TList<GsComm>();
				}
	
				return _gsCommEntMainMinorIdGetByEntMainMinorId;
			}
			set { _gsCommEntMainMinorIdGetByEntMainMinorId = value; }
		}
		
		#endregion

		#region AdmAppPrefCollection
		
		private TList<AdmAppPref> _admAppPrefEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppPrefEntMainId
		/// </summary>
		
		public TList<AdmAppPref> AdmAppPrefCollection
		{
			get
			{
				if (_admAppPrefEntMainId == null)
				{
				_admAppPrefEntMainId = new TList<AdmAppPref>();
				}
	
				return _admAppPrefEntMainId;
			}
			set { _admAppPrefEntMainId = value; }
		}
		
		#endregion

		#region EdSemesterOpenCollection
		
		private TList<EdSemesterOpen> _edSemesterOpenEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemesterOpenEntMainId
		/// </summary>
		
		public TList<EdSemesterOpen> EdSemesterOpenCollection
		{
			get
			{
				if (_edSemesterOpenEntMainId == null)
				{
				_edSemesterOpenEntMainId = new TList<EdSemesterOpen>();
				}
	
				return _edSemesterOpenEntMainId;
			}
			set { _edSemesterOpenEntMainId = value; }
		}
		
		#endregion

		#region SvPollHdrCollection
		
		private TList<SvPollHdr> _svPollHdrEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svPollHdrEntMainId
		/// </summary>
		
		public TList<SvPollHdr> SvPollHdrCollection
		{
			get
			{
				if (_svPollHdrEntMainId == null)
				{
				_svPollHdrEntMainId = new TList<SvPollHdr>();
				}
	
				return _svPollHdrEntMainId;
			}
			set { _svPollHdrEntMainId = value; }
		}
		
		#endregion

		#region SaTrainingCourseCollection
		
		private TList<SaTrainingCourse> _saTrainingCourseAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saTrainingCourseAsNodeId
		/// </summary>
		
		public TList<SaTrainingCourse> SaTrainingCourseCollection
		{
			get
			{
				if (_saTrainingCourseAsNodeId == null)
				{
				_saTrainingCourseAsNodeId = new TList<SaTrainingCourse>();
				}
	
				return _saTrainingCourseAsNodeId;
			}
			set { _saTrainingCourseAsNodeId = value; }
		}
		
		#endregion

		#region AdmAppTransReqCollection
		
		private TList<AdmAppTransReq> _admAppTransReqEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransReqEntMainId
		/// </summary>
		
		public TList<AdmAppTransReq> AdmAppTransReqCollection
		{
			get
			{
				if (_admAppTransReqEntMainId == null)
				{
				_admAppTransReqEntMainId = new TList<AdmAppTransReq>();
				}
	
				return _admAppTransReqEntMainId;
			}
			set { _admAppTransReqEntMainId = value; }
		}
		
		#endregion

		#region EntCoursePkgHdrCollectionGetByEntMainSpcRltdId
		
		private TList<EntCoursePkgHdr> _entCoursePkgHdrEntMainSpcRltdIdGetByEntMainSpcRltdId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entCoursePkgHdrEntMainSpcRltdIdGetByEntMainSpcRltdId
		/// </summary>
		
		public TList<EntCoursePkgHdr> EntCoursePkgHdrCollectionGetByEntMainSpcRltdId
		{
			get
			{
				if (_entCoursePkgHdrEntMainSpcRltdIdGetByEntMainSpcRltdId == null)
				{
				_entCoursePkgHdrEntMainSpcRltdIdGetByEntMainSpcRltdId = new TList<EntCoursePkgHdr>();
				}
	
				return _entCoursePkgHdrEntMainSpcRltdIdGetByEntMainSpcRltdId;
			}
			set { _entCoursePkgHdrEntMainSpcRltdIdGetByEntMainSpcRltdId = value; }
		}
		
		#endregion

		#region EdStudFacultyCollectionGetByEntMainGrad3
		
		private TList<EdStudFaculty> _edStudFacultyEntMainGrad3GetByEntMainGrad3;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudFacultyEntMainGrad3GetByEntMainGrad3
		/// </summary>
		
		public TList<EdStudFaculty> EdStudFacultyCollectionGetByEntMainGrad3
		{
			get
			{
				if (_edStudFacultyEntMainGrad3GetByEntMainGrad3 == null)
				{
				_edStudFacultyEntMainGrad3GetByEntMainGrad3 = new TList<EdStudFaculty>();
				}
	
				return _edStudFacultyEntMainGrad3GetByEntMainGrad3;
			}
			set { _edStudFacultyEntMainGrad3GetByEntMainGrad3 = value; }
		}
		
		#endregion

		#region PgOfferingCollection
		
		private TList<PgOffering> _pgOfferingEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgOfferingEntMainId
		/// </summary>
		
		public TList<PgOffering> PgOfferingCollection
		{
			get
			{
				if (_pgOfferingEntMainId == null)
				{
				_pgOfferingEntMainId = new TList<PgOffering>();
				}
	
				return _pgOfferingEntMainId;
			}
			set { _pgOfferingEntMainId = value; }
		}
		
		#endregion

		#region EntCoursePkgHdrCollectionGetByEntMainId
		
		private TList<EntCoursePkgHdr> _entCoursePkgHdrEntMainRltdIdGetByEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entCoursePkgHdrEntMainRltdIdGetByEntMainId
		/// </summary>
		
		public TList<EntCoursePkgHdr> EntCoursePkgHdrCollectionGetByEntMainId
		{
			get
			{
				if (_entCoursePkgHdrEntMainRltdIdGetByEntMainId == null)
				{
				_entCoursePkgHdrEntMainRltdIdGetByEntMainId = new TList<EntCoursePkgHdr>();
				}
	
				return _entCoursePkgHdrEntMainRltdIdGetByEntMainId;
			}
			set { _entCoursePkgHdrEntMainRltdIdGetByEntMainId = value; }
		}
		
		#endregion

		#region EdOutcomeCollection
		
		private TList<EdOutcome> _edOutcomeEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edOutcomeEntMainId
		/// </summary>
		
		public TList<EdOutcome> EdOutcomeCollection
		{
			get
			{
				if (_edOutcomeEntMainId == null)
				{
				_edOutcomeEntMainId = new TList<EdOutcome>();
				}
	
				return _edOutcomeEntMainId;
			}
			set { _edOutcomeEntMainId = value; }
		}
		
		#endregion

		#region AdmCdeAppStatusCollection
		
		private TList<AdmCdeAppStatus> _admCdeAppStatusEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeAppStatusEntMainId
		/// </summary>
		
		public TList<AdmCdeAppStatus> AdmCdeAppStatusCollection
		{
			get
			{
				if (_admCdeAppStatusEntMainId == null)
				{
				_admCdeAppStatusEntMainId = new TList<AdmCdeAppStatus>();
				}
	
				return _admCdeAppStatusEntMainId;
			}
			set { _admCdeAppStatusEntMainId = value; }
		}
		
		#endregion

		#region EdStudGrantTempCollection
		
		private TList<EdStudGrantTemp> _edStudGrantTempEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGrantTempEntMainId
		/// </summary>
		
		public TList<EdStudGrantTemp> EdStudGrantTempCollection
		{
			get
			{
				if (_edStudGrantTempEntMainId == null)
				{
				_edStudGrantTempEntMainId = new TList<EdStudGrantTemp>();
				}
	
				return _edStudGrantTempEntMainId;
			}
			set { _edStudGrantTempEntMainId = value; }
		}
		
		#endregion

		#region EdBranchRuleCollection
		
		private TList<EdBranchRule> _edBranchRuleEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edBranchRuleEntMainId
		/// </summary>
		
		public TList<EdBranchRule> EdBranchRuleCollection
		{
			get
			{
				if (_edBranchRuleEntMainId == null)
				{
				_edBranchRuleEntMainId = new TList<EdBranchRule>();
				}
	
				return _edBranchRuleEntMainId;
			}
			set { _edBranchRuleEntMainId = value; }
		}
		
		#endregion

		#region FeeFacultyRuleCollection
		
		private TList<FeeFacultyRule> _feeFacultyRuleEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyRuleEntMainId
		/// </summary>
		
		public TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get
			{
				if (_feeFacultyRuleEntMainId == null)
				{
				_feeFacultyRuleEntMainId = new TList<FeeFacultyRule>();
				}
	
				return _feeFacultyRuleEntMainId;
			}
			set { _feeFacultyRuleEntMainId = value; }
		}
		
		#endregion

		#region EntMainMatrixCollectionGetByEntMainId
		
		private TList<EntMainMatrix> _entMainMatrixEntMainIdGetByEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMainMatrixEntMainIdGetByEntMainId
		/// </summary>
		
		public TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainId
		{
			get
			{
				if (_entMainMatrixEntMainIdGetByEntMainId == null)
				{
				_entMainMatrixEntMainIdGetByEntMainId = new TList<EntMainMatrix>();
				}
	
				return _entMainMatrixEntMainIdGetByEntMainId;
			}
			set { _entMainMatrixEntMainIdGetByEntMainId = value; }
		}
		
		#endregion

		#region SvStaffEvlCollectionGetByEntMainMinorId
		
		private TList<SvStaffEvl> _svStaffEvlEntMainMinorIdGetByEntMainMinorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svStaffEvlEntMainMinorIdGetByEntMainMinorId
		/// </summary>
		
		public TList<SvStaffEvl> SvStaffEvlCollectionGetByEntMainMinorId
		{
			get
			{
				if (_svStaffEvlEntMainMinorIdGetByEntMainMinorId == null)
				{
				_svStaffEvlEntMainMinorIdGetByEntMainMinorId = new TList<SvStaffEvl>();
				}
	
				return _svStaffEvlEntMainMinorIdGetByEntMainMinorId;
			}
			set { _svStaffEvlEntMainMinorIdGetByEntMainMinorId = value; }
		}
		
		#endregion

		#region SaExperienceCollection
		
		private TList<SaExperience> _saExperienceAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saExperienceAsNodeId
		/// </summary>
		
		public TList<SaExperience> SaExperienceCollection
		{
			get
			{
				if (_saExperienceAsNodeId == null)
				{
				_saExperienceAsNodeId = new TList<SaExperience>();
				}
	
				return _saExperienceAsNodeId;
			}
			set { _saExperienceAsNodeId = value; }
		}
		
		#endregion

		#region EntGraduationReqCollection
		
		private TList<EntGraduationReq> _entGraduationReqEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entGraduationReqEntMainId
		/// </summary>
		
		public TList<EntGraduationReq> EntGraduationReqCollection
		{
			get
			{
				if (_entGraduationReqEntMainId == null)
				{
				_entGraduationReqEntMainId = new TList<EntGraduationReq>();
				}
	
				return _entGraduationReqEntMainId;
			}
			set { _entGraduationReqEntMainId = value; }
		}
		
		#endregion

		#region EntMainMatrixCollectionGetByEntMainSpecId
		
		private TList<EntMainMatrix> _entMainMatrixEntMainSpecIdGetByEntMainSpecId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMainMatrixEntMainSpecIdGetByEntMainSpecId
		/// </summary>
		
		public TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainSpecId
		{
			get
			{
				if (_entMainMatrixEntMainSpecIdGetByEntMainSpecId == null)
				{
				_entMainMatrixEntMainSpecIdGetByEntMainSpecId = new TList<EntMainMatrix>();
				}
	
				return _entMainMatrixEntMainSpecIdGetByEntMainSpecId;
			}
			set { _entMainMatrixEntMainSpecIdGetByEntMainSpecId = value; }
		}
		
		#endregion

		#region EdStudGrantDegreeCollection
		
		private TList<EdStudGrantDegree> _edStudGrantDegreeEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGrantDegreeEntMainId
		/// </summary>
		
		public TList<EdStudGrantDegree> EdStudGrantDegreeCollection
		{
			get
			{
				if (_edStudGrantDegreeEntMainId == null)
				{
				_edStudGrantDegreeEntMainId = new TList<EdStudGrantDegree>();
				}
	
				return _edStudGrantDegreeEntMainId;
			}
			set { _edStudGrantDegreeEntMainId = value; }
		}
		
		#endregion

		#region SvCourseEvalCollection
		
		private TList<SvCourseEval> _svCourseEvalEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svCourseEvalEntMainId
		/// </summary>
		
		public TList<SvCourseEval> SvCourseEvalCollection
		{
			get
			{
				if (_svCourseEvalEntMainId == null)
				{
				_svCourseEvalEntMainId = new TList<SvCourseEval>();
				}
	
				return _svCourseEvalEntMainId;
			}
			set { _svCourseEvalEntMainId = value; }
		}
		
		#endregion

		#region EdAcadPlanHdrCollectionGetByEntMainSpcRltdId
		
		private TList<EdAcadPlanHdr> _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainSpcRltdId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainSpcRltdId
		/// </summary>
		
		public TList<EdAcadPlanHdr> EdAcadPlanHdrCollectionGetByEntMainSpcRltdId
		{
			get
			{
				if (_edAcadPlanHdrEntMainSpcRltdIdGetByEntMainSpcRltdId == null)
				{
				_edAcadPlanHdrEntMainSpcRltdIdGetByEntMainSpcRltdId = new TList<EdAcadPlanHdr>();
				}
	
				return _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainSpcRltdId;
			}
			set { _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainSpcRltdId = value; }
		}
		
		#endregion

		#region SaStfMemberCollection
		
		private TList<SaStfMember> _saStfMemberAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saStfMemberAsNodeId
		/// </summary>
		
		public TList<SaStfMember> SaStfMemberCollection
		{
			get
			{
				if (_saStfMemberAsNodeId == null)
				{
				_saStfMemberAsNodeId = new TList<SaStfMember>();
				}
	
				return _saStfMemberAsNodeId;
			}
			set { _saStfMemberAsNodeId = value; }
		}
		
		#endregion

		#region EntGradingMdDataCollection
		
		private TList<EntGradingMdData> _entGradingMdDataEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entGradingMdDataEntMainId
		/// </summary>
		
		public TList<EntGradingMdData> EntGradingMdDataCollection
		{
			get
			{
				if (_entGradingMdDataEntMainId == null)
				{
				_entGradingMdDataEntMainId = new TList<EntGradingMdData>();
				}
	
				return _entGradingMdDataEntMainId;
			}
			set { _entGradingMdDataEntMainId = value; }
		}
		
		#endregion

		#region EntMainMatrixCollectionGetByEntMainMinorId
		
		private TList<EntMainMatrix> _entMainMatrixEntMainMinorIdGetByEntMainMinorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMainMatrixEntMainMinorIdGetByEntMainMinorId
		/// </summary>
		
		public TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainMinorId
		{
			get
			{
				if (_entMainMatrixEntMainMinorIdGetByEntMainMinorId == null)
				{
				_entMainMatrixEntMainMinorIdGetByEntMainMinorId = new TList<EntMainMatrix>();
				}
	
				return _entMainMatrixEntMainMinorIdGetByEntMainMinorId;
			}
			set { _entMainMatrixEntMainMinorIdGetByEntMainMinorId = value; }
		}
		
		#endregion

		#region EdOfferingCollection
		
		private TList<EdOffering> _edOfferingEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edOfferingEntMainId
		/// </summary>
		
		public TList<EdOffering> EdOfferingCollection
		{
			get
			{
				if (_edOfferingEntMainId == null)
				{
				_edOfferingEntMainId = new TList<EdOffering>();
				}
	
				return _edOfferingEntMainId;
			}
			set { _edOfferingEntMainId = value; }
		}
		
		#endregion

		#region EdBylawCollection
		
		private TList<EdBylaw> _edBylawEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edBylawEntMainId
		/// </summary>
		
		public TList<EdBylaw> EdBylawCollection
		{
			get
			{
				if (_edBylawEntMainId == null)
				{
				_edBylawEntMainId = new TList<EdBylaw>();
				}
	
				return _edBylawEntMainId;
			}
			set { _edBylawEntMainId = value; }
		}
		
		#endregion

		#region EdStudFacultyCollectionGetByEntMainGrad2
		
		private TList<EdStudFaculty> _edStudFacultyEntMainGrad2GetByEntMainGrad2;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudFacultyEntMainGrad2GetByEntMainGrad2
		/// </summary>
		
		public TList<EdStudFaculty> EdStudFacultyCollectionGetByEntMainGrad2
		{
			get
			{
				if (_edStudFacultyEntMainGrad2GetByEntMainGrad2 == null)
				{
				_edStudFacultyEntMainGrad2GetByEntMainGrad2 = new TList<EdStudFaculty>();
				}
	
				return _edStudFacultyEntMainGrad2GetByEntMainGrad2;
			}
			set { _edStudFacultyEntMainGrad2GetByEntMainGrad2 = value; }
		}
		
		#endregion

		#region EntMainMatrixCollectionGetByEntMainMajorId
		
		private TList<EntMainMatrix> _entMainMatrixEntMainSpecIdGetByEntMainMajorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMainMatrixEntMainSpecIdGetByEntMainMajorId
		/// </summary>
		
		public TList<EntMainMatrix> EntMainMatrixCollectionGetByEntMainMajorId
		{
			get
			{
				if (_entMainMatrixEntMainSpecIdGetByEntMainMajorId == null)
				{
				_entMainMatrixEntMainSpecIdGetByEntMainMajorId = new TList<EntMainMatrix>();
				}
	
				return _entMainMatrixEntMainSpecIdGetByEntMainMajorId;
			}
			set { _entMainMatrixEntMainSpecIdGetByEntMainMajorId = value; }
		}
		
		#endregion

		#region SeUserCrsAssessCollectionGetByEntMainDeptId
		
		private TList<SeUserCrsAssess> _seUserCrsAssessEntMainMajorIdGetByEntMainDeptId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserCrsAssessEntMainMajorIdGetByEntMainDeptId
		/// </summary>
		
		public TList<SeUserCrsAssess> SeUserCrsAssessCollectionGetByEntMainDeptId
		{
			get
			{
				if (_seUserCrsAssessEntMainMajorIdGetByEntMainDeptId == null)
				{
				_seUserCrsAssessEntMainMajorIdGetByEntMainDeptId = new TList<SeUserCrsAssess>();
				}
	
				return _seUserCrsAssessEntMainMajorIdGetByEntMainDeptId;
			}
			set { _seUserCrsAssessEntMainMajorIdGetByEntMainDeptId = value; }
		}
		
		#endregion

		#region FeeSemesterAgendaCollection
		
		private TList<FeeSemesterAgenda> _feeSemesterAgendaEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeSemesterAgendaEntMainId
		/// </summary>
		
		public TList<FeeSemesterAgenda> FeeSemesterAgendaCollection
		{
			get
			{
				if (_feeSemesterAgendaEntMainId == null)
				{
				_feeSemesterAgendaEntMainId = new TList<FeeSemesterAgenda>();
				}
	
				return _feeSemesterAgendaEntMainId;
			}
			set { _feeSemesterAgendaEntMainId = value; }
		}
		
		#endregion

		#region AdmAppCountCollection
		
		private TList<AdmAppCount> _admAppCountEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppCountEntMainId
		/// </summary>
		
		public TList<AdmAppCount> AdmAppCountCollection
		{
			get
			{
				if (_admAppCountEntMainId == null)
				{
				_admAppCountEntMainId = new TList<AdmAppCount>();
				}
	
				return _admAppCountEntMainId;
			}
			set { _admAppCountEntMainId = value; }
		}
		
		#endregion

		#region SaSupervisingJobsCollection
		
		private TList<SaSupervisingJobs> _saSupervisingJobsAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saSupervisingJobsAsNodeId
		/// </summary>
		
		public TList<SaSupervisingJobs> SaSupervisingJobsCollection
		{
			get
			{
				if (_saSupervisingJobsAsNodeId == null)
				{
				_saSupervisingJobsAsNodeId = new TList<SaSupervisingJobs>();
				}
	
				return _saSupervisingJobsAsNodeId;
			}
			set { _saSupervisingJobsAsNodeId = value; }
		}
		
		#endregion

		#region SeUserCrsAssessCollectionGetByEntMainMajorId
		
		private TList<SeUserCrsAssess> _seUserCrsAssessEntMainMajorIdGetByEntMainMajorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserCrsAssessEntMainMajorIdGetByEntMainMajorId
		/// </summary>
		
		public TList<SeUserCrsAssess> SeUserCrsAssessCollectionGetByEntMainMajorId
		{
			get
			{
				if (_seUserCrsAssessEntMainMajorIdGetByEntMainMajorId == null)
				{
				_seUserCrsAssessEntMainMajorIdGetByEntMainMajorId = new TList<SeUserCrsAssess>();
				}
	
				return _seUserCrsAssessEntMainMajorIdGetByEntMainMajorId;
			}
			set { _seUserCrsAssessEntMainMajorIdGetByEntMainMajorId = value; }
		}
		
		#endregion

		#region EdResultApproveCollection
		
		private TList<EdResultApprove> _edResultApproveEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edResultApproveEntMainId
		/// </summary>
		
		public TList<EdResultApprove> EdResultApproveCollection
		{
			get
			{
				if (_edResultApproveEntMainId == null)
				{
				_edResultApproveEntMainId = new TList<EdResultApprove>();
				}
	
				return _edResultApproveEntMainId;
			}
			set { _edResultApproveEntMainId = value; }
		}
		
		#endregion

		#region EdCoursePrfxCollection
		
		private TList<EdCoursePrfx> _edCoursePrfxEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCoursePrfxEntMainId
		/// </summary>
		
		public TList<EdCoursePrfx> EdCoursePrfxCollection
		{
			get
			{
				if (_edCoursePrfxEntMainId == null)
				{
				_edCoursePrfxEntMainId = new TList<EdCoursePrfx>();
				}
	
				return _edCoursePrfxEntMainId;
			}
			set { _edCoursePrfxEntMainId = value; }
		}
		
		#endregion

		#region PgThesisGeneralSpecCollection
		
		private TList<PgThesisGeneralSpec> _pgThesisGeneralSpecAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisGeneralSpecAsNodeId
		/// </summary>
		
		public TList<PgThesisGeneralSpec> PgThesisGeneralSpecCollection
		{
			get
			{
				if (_pgThesisGeneralSpecAsNodeId == null)
				{
				_pgThesisGeneralSpecAsNodeId = new TList<PgThesisGeneralSpec>();
				}
	
				return _pgThesisGeneralSpecAsNodeId;
			}
			set { _pgThesisGeneralSpecAsNodeId = value; }
		}
		
		#endregion

		#region EdAcadPlanHdrCollectionGetByEntMainRltdId
		
		private TList<EdAcadPlanHdr> _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainRltdId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainRltdId
		/// </summary>
		
		public TList<EdAcadPlanHdr> EdAcadPlanHdrCollectionGetByEntMainRltdId
		{
			get
			{
				if (_edAcadPlanHdrEntMainSpcRltdIdGetByEntMainRltdId == null)
				{
				_edAcadPlanHdrEntMainSpcRltdIdGetByEntMainRltdId = new TList<EdAcadPlanHdr>();
				}
	
				return _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainRltdId;
			}
			set { _edAcadPlanHdrEntMainSpcRltdIdGetByEntMainRltdId = value; }
		}
		
		#endregion

		#region EdStudStateTempCollection
		
		private TList<EdStudStateTemp> _edStudStateTempEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudStateTempEntMainId
		/// </summary>
		
		public TList<EdStudStateTemp> EdStudStateTempCollection
		{
			get
			{
				if (_edStudStateTempEntMainId == null)
				{
				_edStudStateTempEntMainId = new TList<EdStudStateTemp>();
				}
	
				return _edStudStateTempEntMainId;
			}
			set { _edStudStateTempEntMainId = value; }
		}
		
		#endregion

		#region AdmRatingParametersMajorsCollection
		
		private TList<AdmRatingParametersMajors> _admRatingParametersMajorsEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admRatingParametersMajorsEntMainId
		/// </summary>
		
		public TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get
			{
				if (_admRatingParametersMajorsEntMainId == null)
				{
				_admRatingParametersMajorsEntMainId = new TList<AdmRatingParametersMajors>();
				}
	
				return _admRatingParametersMajorsEntMainId;
			}
			set { _admRatingParametersMajorsEntMainId = value; }
		}
		
		#endregion

		#region AdmPlaceExamDatetimeCollection
		
		private TList<AdmPlaceExamDatetime> _admPlaceExamDatetimeEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamDatetimeEntMainId
		/// </summary>
		
		public TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get
			{
				if (_admPlaceExamDatetimeEntMainId == null)
				{
				_admPlaceExamDatetimeEntMainId = new TList<AdmPlaceExamDatetime>();
				}
	
				return _admPlaceExamDatetimeEntMainId;
			}
			set { _admPlaceExamDatetimeEntMainId = value; }
		}
		
		#endregion

		#region EdCourseCollection
		
		private TList<EdCourse> _edCourseEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseEntMainId
		/// </summary>
		
		public TList<EdCourse> EdCourseCollection
		{
			get
			{
				if (_edCourseEntMainId == null)
				{
				_edCourseEntMainId = new TList<EdCourse>();
				}
	
				return _edCourseEntMainId;
			}
			set { _edCourseEntMainId = value; }
		}
		
		#endregion

		#region SeUserAccntCollection
		
		private TList<SeUserAccnt> _seUserAccntEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntEntMainId
		/// </summary>
		
		public TList<SeUserAccnt> SeUserAccntCollection
		{
			get
			{
				if (_seUserAccntEntMainId == null)
				{
				_seUserAccntEntMainId = new TList<SeUserAccnt>();
				}
	
				return _seUserAccntEntMainId;
			}
			set { _seUserAccntEntMainId = value; }
		}
		
		#endregion

		#region SaEmpHierarchyCollection
		
		private TList<SaEmpHierarchy> _saEmpHierarchyAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saEmpHierarchyAsNodeId
		/// </summary>
		
		public TList<SaEmpHierarchy> SaEmpHierarchyCollection
		{
			get
			{
				if (_saEmpHierarchyAsNodeId == null)
				{
				_saEmpHierarchyAsNodeId = new TList<SaEmpHierarchy>();
				}
	
				return _saEmpHierarchyAsNodeId;
			}
			set { _saEmpHierarchyAsNodeId = value; }
		}
		
		#endregion

		#region EdStudBranchPrefCollection
		
		private TList<EdStudBranchPref> _edStudBranchPrefEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudBranchPrefEntMainId
		/// </summary>
		
		public TList<EdStudBranchPref> EdStudBranchPrefCollection
		{
			get
			{
				if (_edStudBranchPrefEntMainId == null)
				{
				_edStudBranchPrefEntMainId = new TList<EdStudBranchPref>();
				}
	
				return _edStudBranchPrefEntMainId;
			}
			set { _edStudBranchPrefEntMainId = value; }
		}
		
		#endregion

		#region EntityMainCollection
		
		private TList<EntityMain> _entityMainEntParentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entityMainEntParentId
		/// </summary>
		
		public TList<EntityMain> EntityMainCollection
		{
			get
			{
				if (_entityMainEntParentId == null)
				{
				_entityMainEntParentId = new TList<EntityMain>();
				}
	
				return _entityMainEntParentId;
			}
			set { _entityMainEntParentId = value; }
		}
		
		#endregion

		#region SaExtDelCollection
		
		private TList<SaExtDel> _saExtDelAsNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saExtDelAsNodeId
		/// </summary>
		
		public TList<SaExtDel> SaExtDelCollection
		{
			get
			{
				if (_saExtDelAsNodeId == null)
				{
				_saExtDelAsNodeId = new TList<SaExtDel>();
				}
	
				return _saExtDelAsNodeId;
			}
			set { _saExtDelAsNodeId = value; }
		}
		
		#endregion

		#region ScScheduleRsrvCollection
		
		private TList<ScScheduleRsrv> _scScheduleRsrvEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleRsrvEntMainId
		/// </summary>
		
		public TList<ScScheduleRsrv> ScScheduleRsrvCollection
		{
			get
			{
				if (_scScheduleRsrvEntMainId == null)
				{
				_scScheduleRsrvEntMainId = new TList<ScScheduleRsrv>();
				}
	
				return _scScheduleRsrvEntMainId;
			}
			set { _scScheduleRsrvEntMainId = value; }
		}
		
		#endregion

		#region ScSchdlPeriodCollection
		
		private TList<ScSchdlPeriod> _scSchdlPeriodEntMainMjrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSchdlPeriodEntMainMjrId
		/// </summary>
		
		public TList<ScSchdlPeriod> ScSchdlPeriodCollection
		{
			get
			{
				if (_scSchdlPeriodEntMainMjrId == null)
				{
				_scSchdlPeriodEntMainMjrId = new TList<ScSchdlPeriod>();
				}
	
				return _scSchdlPeriodEntMainMjrId;
			}
			set { _scSchdlPeriodEntMainMjrId = value; }
		}
		
		#endregion

		#region SeBlockTransCollection
		
		private TList<SeBlockTrans> _seBlockTransEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seBlockTransEntMainId
		/// </summary>
		
		public TList<SeBlockTrans> SeBlockTransCollection
		{
			get
			{
				if (_seBlockTransEntMainId == null)
				{
				_seBlockTransEntMainId = new TList<SeBlockTrans>();
				}
	
				return _seBlockTransEntMainId;
			}
			set { _seBlockTransEntMainId = value; }
		}
		
		#endregion

		#region ScGroupInfoCollection
		
		private TList<ScGroupInfo> _scGroupInfoEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scGroupInfoEntMainId
		/// </summary>
		
		public TList<ScGroupInfo> ScGroupInfoCollection
		{
			get
			{
				if (_scGroupInfoEntMainId == null)
				{
				_scGroupInfoEntMainId = new TList<ScGroupInfo>();
				}
	
				return _scGroupInfoEntMainId;
			}
			set { _scGroupInfoEntMainId = value; }
		}
		
		#endregion

		#region EntPolcyGrdngHdrCollection
		
		private TList<EntPolcyGrdngHdr> _entPolcyGrdngHdrEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolcyGrdngHdrEntMainId
		/// </summary>
		
		public TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get
			{
				if (_entPolcyGrdngHdrEntMainId == null)
				{
				_entPolcyGrdngHdrEntMainId = new TList<EntPolcyGrdngHdr>();
				}
	
				return _entPolcyGrdngHdrEntMainId;
			}
			set { _entPolcyGrdngHdrEntMainId = value; }
		}
		
		#endregion

		#region EdInttransRuleCollection
		
		private TList<EdInttransRule> _edInttransRuleEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edInttransRuleEntMainId
		/// </summary>
		
		public TList<EdInttransRule> EdInttransRuleCollection
		{
			get
			{
				if (_edInttransRuleEntMainId == null)
				{
				_edInttransRuleEntMainId = new TList<EdInttransRule>();
				}
	
				return _edInttransRuleEntMainId;
			}
			set { _edInttransRuleEntMainId = value; }
		}
		
		#endregion

		#region EntCourseMdDataCollection
		
		private TList<EntCourseMdData> _entCourseMdDataEntMainId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entCourseMdDataEntMainId
		/// </summary>
		
		public TList<EntCourseMdData> EntCourseMdDataCollection
		{
			get
			{
				if (_entCourseMdDataEntMainId == null)
				{
				_entCourseMdDataEntMainId = new TList<EntCourseMdData>();
				}
	
				return _entCourseMdDataEntMainId;
			}
			set { _entCourseMdDataEntMainId = value; }
		}
		
		#endregion

		#region GsCommCollectionGetByEntMainMajorId
		
		private TList<GsComm> _gsCommEntMainMinorIdGetByEntMainMajorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCommEntMainMinorIdGetByEntMainMajorId
		/// </summary>
		
		public TList<GsComm> GsCommCollectionGetByEntMainMajorId
		{
			get
			{
				if (_gsCommEntMainMinorIdGetByEntMainMajorId == null)
				{
				_gsCommEntMainMinorIdGetByEntMainMajorId = new TList<GsComm>();
				}
	
				return _gsCommEntMainMinorIdGetByEntMainMajorId;
			}
			set { _gsCommEntMainMinorIdGetByEntMainMajorId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntityMainEntityData _tmp = new EntityMainEntityData();
						
			_tmp.EntMainId = this.EntMainId;
			_tmp.OriginalEntMainId = this.OriginalEntMainId;
			
			_tmp.EntDescrAr = this.EntDescrAr;
			_tmp.EntCodeEntityTypeId = this.EntCodeEntityTypeId;
			_tmp.StateNotation = this.StateNotation;
			_tmp.EntParentId = this.EntParentId;
			_tmp.EntDescrEn = this.EntDescrEn;
			_tmp.IsStateFlg = this.IsStateFlg;
			_tmp.NodeChildCount = this.NodeChildCount;
			_tmp.NodePath = this.NodePath;
			_tmp.NodeOrder = this.NodeOrder;
			_tmp.NodeLevel = this.NodeLevel;
			_tmp.EdStudyMethodId = this.EdStudyMethodId;
			_tmp.IsInfoFlg = this.IsInfoFlg;
			_tmp.IsHomeFlg = this.IsHomeFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.StateDescrAr = this.StateDescrAr;
			_tmp.StateDescrEn = this.StateDescrEn;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.IsVisible = this.IsVisible;
			_tmp.IsActive = this.IsActive;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.LoadWithTrain = this.LoadWithTrain;
			_tmp.GsCdeSpecAreaId = this.GsCdeSpecAreaId;
			_tmp.MaxTrnsCh = this.MaxTrnsCh;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.AdmShowFlg = this.AdmShowFlg;
			_tmp.DegEquvText = this.DegEquvText;
			_tmp.DegEquvTextEng = this.DegEquvTextEng;
			_tmp.GsCodeLanguageId = this.GsCodeLanguageId;
			_tmp.ScheduleTypeFlg = this.ScheduleTypeFlg;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdStudyMethodIdSource != null)
				_tmp.EdStudyMethodIdSource = MakeCopyOf(this.EdStudyMethodIdSource) as EdCodeStudyMethod;
			if (this.EntCodeEntityTypeIdSource != null)
				_tmp.EntCodeEntityTypeIdSource = MakeCopyOf(this.EntCodeEntityTypeIdSource) as EntCodeEntityType;
			if (this.EntParentIdSource != null)
				_tmp.EntParentIdSource = MakeCopyOf(this.EntParentIdSource) as EntityMain;
			if (this.GsCdeSpecAreaIdSource != null)
				_tmp.GsCdeSpecAreaIdSource = MakeCopyOf(this.GsCdeSpecAreaIdSource) as GsCdeSpecArea;
			if (this.GsCodeGenderIdSource != null)
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource) as GsCodeGender;
			if (this.GsCodeLanguageIdSource != null)
				_tmp.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource) as GsCodeLanguage;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudFacultyEntMainGrad3GetByEntMainGrad1 != null)
				_tmp.EdStudFacultyCollectionGetByEntMainGrad1 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad1); 
			if (this._svStaffEvlEntMainMajorIdGetByEntMainMajorId != null)
				_tmp.SvStaffEvlCollectionGetByEntMainMajorId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainMajorId); 
			if (this._svStaffEvlEntMainMinorIdGetByEntMainId != null)
				_tmp.SvStaffEvlCollectionGetByEntMainId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainId); 
			if (this._entPolicyMdDataEntMainId != null)
				_tmp.EntPolicyMdDataCollection = (TList<EntPolicyMdData>) MakeCopyOf(this.EntPolicyMdDataCollection); 
			if (this._entFullfillMdDataEntMainId != null)
				_tmp.EntFullfillMdDataCollection = (TList<EntFullfillMdData>) MakeCopyOf(this.EntFullfillMdDataCollection); 
			if (this._entPolicyGradingLevelEntMainId != null)
				_tmp.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection); 
			if (this._edStudIntTrnsStateToEntMainId != null)
				_tmp.EdStudIntTrnsStateToCollection = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollection); 
			if (this._feeFacultyInstallmentEntMainId != null)
				_tmp.FeeFacultyInstallmentCollection = (TList<FeeFacultyInstallment>) MakeCopyOf(this.FeeFacultyInstallmentCollection); 
			if (this._admReqDocEntMainId != null)
				_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection); 
			if (this._edCourseOrientEntMainId != null)
				_tmp.EdCourseOrientCollection = (TList<EdCourseOrient>) MakeCopyOf(this.EdCourseOrientCollection); 
			if (this._edProjectEntMainId != null)
				_tmp.EdProjectCollection = (TList<EdProject>) MakeCopyOf(this.EdProjectCollection); 
			if (this._admCdePlacementExamEntMainId != null)
				_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection); 
			if (this._entCoursePkgHdrEntMainRltdIdGetByEntMainRltdId != null)
				_tmp.EntCoursePkgHdrCollectionGetByEntMainRltdId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainRltdId); 
			if (this._spoSponsorOfferExtEntMainId != null)
				_tmp.SpoSponsorOfferExtCollection = (TList<SpoSponsorOfferExt>) MakeCopyOf(this.SpoSponsorOfferExtCollection); 
			if (this._scHallRsrvEntMainId != null)
				_tmp.ScHallRsrvCollection = (TList<ScHallRsrv>) MakeCopyOf(this.ScHallRsrvCollection); 
			if (this._scSectionGroupHdrEntMainId != null)
				_tmp.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection); 
			if (this._entMajorPhaseEntMainId != null)
				_tmp.EntMajorPhaseCollection = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollection); 
			if (this._entPolicyObservedEntMainId != null)
				_tmp.EntPolicyObserved = (EntPolicyObserved) MakeCopyOf(this.EntPolicyObserved); 
			if (this._admAppInterviewExamEntMainId != null)
				_tmp.AdmAppInterviewExamCollection = (TList<AdmAppInterviewExam>) MakeCopyOf(this.AdmAppInterviewExamCollection); 
			if (this._edCourseTopicEntMainId != null)
				_tmp.EdCourseTopicCollection = (TList<EdCourseTopic>) MakeCopyOf(this.EdCourseTopicCollection); 
			if (this._coControlEntMainId != null)
				_tmp.CoControlCollection = (TList<CoControl>) MakeCopyOf(this.CoControlCollection); 
			if (this._edAcadPlanEntMainId != null)
				_tmp.EdAcadPlanCollection = (TList<EdAcadPlan>) MakeCopyOf(this.EdAcadPlanCollection); 
			if (this._edStudIntTransPrefEntMainId != null)
				_tmp.EdStudIntTransPrefCollection = (TList<EdStudIntTransPref>) MakeCopyOf(this.EdStudIntTransPrefCollection); 
			if (this._admPrecondQualEntMainId != null)
				_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection); 
			if (this._edStudIntTrnsStateFromEntMainId != null)
				_tmp.EdStudIntTrnsStateFromCollection = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollection); 
			if (this._coControlRoomEntMainId != null)
				_tmp.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection); 
			if (this._saScQualAsNodeId != null)
				_tmp.SaScQualCollection = (TList<SaScQual>) MakeCopyOf(this.SaScQualCollection); 
			if (this._entIntroducMdDataEntMainId != null)
				_tmp.EntIntroducMdDataCollection = (TList<EntIntroducMdData>) MakeCopyOf(this.EntIntroducMdDataCollection); 
			if (this._entCoursePkgMdDataEntMainId != null)
				_tmp.EntCoursePkgMdDataCollection = (TList<EntCoursePkgMdData>) MakeCopyOf(this.EntCoursePkgMdDataCollection); 
			if (this._admTansikMajorsCodesEntMainId != null)
				_tmp.AdmTansikMajorsCodesCollection = (TList<AdmTansikMajorsCodes>) MakeCopyOf(this.AdmTansikMajorsCodesCollection); 
			if (this._entPrecondMdDataEntMainId != null)
				_tmp.EntPrecondMdDataCollection = (TList<EntPrecondMdData>) MakeCopyOf(this.EntPrecondMdDataCollection); 
			if (this._admCdeFeeEntMainId != null)
				_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection); 
			if (this._edStudStateEntMainId != null)
				_tmp.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection); 
			if (this._gsCommEntMainMinorIdGetByEntMainMinorId != null)
				_tmp.GsCommCollectionGetByEntMainMinorId = (TList<GsComm>) MakeCopyOf(this.GsCommCollectionGetByEntMainMinorId); 
			if (this._admAppPrefEntMainId != null)
				_tmp.AdmAppPrefCollection = (TList<AdmAppPref>) MakeCopyOf(this.AdmAppPrefCollection); 
			if (this._edSemesterOpenEntMainId != null)
				_tmp.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection); 
			if (this._svPollHdrEntMainId != null)
				_tmp.SvPollHdrCollection = (TList<SvPollHdr>) MakeCopyOf(this.SvPollHdrCollection); 
			if (this._saTrainingCourseAsNodeId != null)
				_tmp.SaTrainingCourseCollection = (TList<SaTrainingCourse>) MakeCopyOf(this.SaTrainingCourseCollection); 
			if (this._admAppTransReqEntMainId != null)
				_tmp.AdmAppTransReqCollection = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollection); 
			if (this._entCoursePkgHdrEntMainSpcRltdIdGetByEntMainSpcRltdId != null)
				_tmp.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId); 
			if (this._edStudFacultyEntMainGrad3GetByEntMainGrad3 != null)
				_tmp.EdStudFacultyCollectionGetByEntMainGrad3 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad3); 
			if (this._pgOfferingEntMainId != null)
				_tmp.PgOfferingCollection = (TList<PgOffering>) MakeCopyOf(this.PgOfferingCollection); 
			if (this._entCoursePkgHdrEntMainRltdIdGetByEntMainId != null)
				_tmp.EntCoursePkgHdrCollectionGetByEntMainId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainId); 
			if (this._edOutcomeEntMainId != null)
				_tmp.EdOutcomeCollection = (TList<EdOutcome>) MakeCopyOf(this.EdOutcomeCollection); 
			if (this._admCdeAppStatusEntMainId != null)
				_tmp.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection); 
			if (this._edStudGrantTempEntMainId != null)
				_tmp.EdStudGrantTempCollection = (TList<EdStudGrantTemp>) MakeCopyOf(this.EdStudGrantTempCollection); 
			if (this._edBranchRuleEntMainId != null)
				_tmp.EdBranchRuleCollection = (TList<EdBranchRule>) MakeCopyOf(this.EdBranchRuleCollection); 
			if (this._feeFacultyRuleEntMainId != null)
				_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection); 
			if (this._entMainMatrixEntMainIdGetByEntMainId != null)
				_tmp.EntMainMatrixCollectionGetByEntMainId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainId); 
			if (this._svStaffEvlEntMainMinorIdGetByEntMainMinorId != null)
				_tmp.SvStaffEvlCollectionGetByEntMainMinorId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainMinorId); 
			if (this._saExperienceAsNodeId != null)
				_tmp.SaExperienceCollection = (TList<SaExperience>) MakeCopyOf(this.SaExperienceCollection); 
			if (this._entGraduationReqEntMainId != null)
				_tmp.EntGraduationReqCollection = (TList<EntGraduationReq>) MakeCopyOf(this.EntGraduationReqCollection); 
			if (this._entMainMatrixEntMainSpecIdGetByEntMainSpecId != null)
				_tmp.EntMainMatrixCollectionGetByEntMainSpecId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainSpecId); 
			if (this._edStudGrantDegreeEntMainId != null)
				_tmp.EdStudGrantDegreeCollection = (TList<EdStudGrantDegree>) MakeCopyOf(this.EdStudGrantDegreeCollection); 
			if (this._svCourseEvalEntMainId != null)
				_tmp.SvCourseEvalCollection = (TList<SvCourseEval>) MakeCopyOf(this.SvCourseEvalCollection); 
			if (this._edAcadPlanHdrEntMainSpcRltdIdGetByEntMainSpcRltdId != null)
				_tmp.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId); 
			if (this._saStfMemberAsNodeId != null)
				_tmp.SaStfMemberCollection = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollection); 
			if (this._entGradingMdDataEntMainId != null)
				_tmp.EntGradingMdDataCollection = (TList<EntGradingMdData>) MakeCopyOf(this.EntGradingMdDataCollection); 
			if (this._entMainMatrixEntMainMinorIdGetByEntMainMinorId != null)
				_tmp.EntMainMatrixCollectionGetByEntMainMinorId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainMinorId); 
			if (this._edOfferingEntMainId != null)
				_tmp.EdOfferingCollection = (TList<EdOffering>) MakeCopyOf(this.EdOfferingCollection); 
			if (this._edBylawEntMainId != null)
				_tmp.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection); 
			if (this._edStudFacultyEntMainGrad2GetByEntMainGrad2 != null)
				_tmp.EdStudFacultyCollectionGetByEntMainGrad2 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad2); 
			if (this._entMainMatrixEntMainSpecIdGetByEntMainMajorId != null)
				_tmp.EntMainMatrixCollectionGetByEntMainMajorId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainMajorId); 
			if (this._seUserCrsAssessEntMainMajorIdGetByEntMainDeptId != null)
				_tmp.SeUserCrsAssessCollectionGetByEntMainDeptId = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollectionGetByEntMainDeptId); 
			if (this._feeSemesterAgendaEntMainId != null)
				_tmp.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection); 
			if (this._admAppCountEntMainId != null)
				_tmp.AdmAppCountCollection = (TList<AdmAppCount>) MakeCopyOf(this.AdmAppCountCollection); 
			if (this._saSupervisingJobsAsNodeId != null)
				_tmp.SaSupervisingJobsCollection = (TList<SaSupervisingJobs>) MakeCopyOf(this.SaSupervisingJobsCollection); 
			if (this._seUserCrsAssessEntMainMajorIdGetByEntMainMajorId != null)
				_tmp.SeUserCrsAssessCollectionGetByEntMainMajorId = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollectionGetByEntMainMajorId); 
			if (this._edResultApproveEntMainId != null)
				_tmp.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection); 
			if (this._edCoursePrfxEntMainId != null)
				_tmp.EdCoursePrfxCollection = (TList<EdCoursePrfx>) MakeCopyOf(this.EdCoursePrfxCollection); 
			if (this._pgThesisGeneralSpecAsNodeId != null)
				_tmp.PgThesisGeneralSpecCollection = (TList<PgThesisGeneralSpec>) MakeCopyOf(this.PgThesisGeneralSpecCollection); 
			if (this._edAcadPlanHdrEntMainSpcRltdIdGetByEntMainRltdId != null)
				_tmp.EdAcadPlanHdrCollectionGetByEntMainRltdId = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollectionGetByEntMainRltdId); 
			if (this._edStudStateTempEntMainId != null)
				_tmp.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection); 
			if (this._admRatingParametersMajorsEntMainId != null)
				_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection); 
			if (this._admPlaceExamDatetimeEntMainId != null)
				_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection); 
			if (this._edCourseEntMainId != null)
				_tmp.EdCourseCollection = (TList<EdCourse>) MakeCopyOf(this.EdCourseCollection); 
			if (this._seUserAccntEntMainId != null)
				_tmp.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection); 
			if (this._saEmpHierarchyAsNodeId != null)
				_tmp.SaEmpHierarchyCollection = (TList<SaEmpHierarchy>) MakeCopyOf(this.SaEmpHierarchyCollection); 
			if (this._edStudBranchPrefEntMainId != null)
				_tmp.EdStudBranchPrefCollection = (TList<EdStudBranchPref>) MakeCopyOf(this.EdStudBranchPrefCollection); 
			if (this._entityMainEntParentId != null)
				_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection); 
			if (this._saExtDelAsNodeId != null)
				_tmp.SaExtDelCollection = (TList<SaExtDel>) MakeCopyOf(this.SaExtDelCollection); 
			if (this._scScheduleRsrvEntMainId != null)
				_tmp.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection); 
			if (this._scSchdlPeriodEntMainMjrId != null)
				_tmp.ScSchdlPeriodCollection = (TList<ScSchdlPeriod>) MakeCopyOf(this.ScSchdlPeriodCollection); 
			if (this._seBlockTransEntMainId != null)
				_tmp.SeBlockTransCollection = (TList<SeBlockTrans>) MakeCopyOf(this.SeBlockTransCollection); 
			if (this._scGroupInfoEntMainId != null)
				_tmp.ScGroupInfoCollection = (TList<ScGroupInfo>) MakeCopyOf(this.ScGroupInfoCollection); 
			if (this._entPolcyGrdngHdrEntMainId != null)
				_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection); 
			if (this._edInttransRuleEntMainId != null)
				_tmp.EdInttransRuleCollection = (TList<EdInttransRule>) MakeCopyOf(this.EdInttransRuleCollection); 
			if (this._entCourseMdDataEntMainId != null)
				_tmp.EntCourseMdDataCollection = (TList<EntCourseMdData>) MakeCopyOf(this.EntCourseMdDataCollection); 
			if (this._gsCommEntMainMinorIdGetByEntMainMajorId != null)
				_tmp.GsCommCollectionGetByEntMainMajorId = (TList<GsComm>) MakeCopyOf(this.GsCommCollectionGetByEntMainMajorId); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntityMainEntityData _tmp = new EntityMainEntityData();
						
			_tmp.EntMainId = this.EntMainId;
			_tmp.OriginalEntMainId = this.OriginalEntMainId;
			
			_tmp.EntDescrAr = this.EntDescrAr;
			_tmp.EntCodeEntityTypeId = this.EntCodeEntityTypeId;
			_tmp.StateNotation = this.StateNotation;
			_tmp.EntParentId = this.EntParentId;
			_tmp.EntDescrEn = this.EntDescrEn;
			_tmp.IsStateFlg = this.IsStateFlg;
			_tmp.NodeChildCount = this.NodeChildCount;
			_tmp.NodePath = this.NodePath;
			_tmp.NodeOrder = this.NodeOrder;
			_tmp.NodeLevel = this.NodeLevel;
			_tmp.EdStudyMethodId = this.EdStudyMethodId;
			_tmp.IsInfoFlg = this.IsInfoFlg;
			_tmp.IsHomeFlg = this.IsHomeFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.StateDescrAr = this.StateDescrAr;
			_tmp.StateDescrEn = this.StateDescrEn;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.IsVisible = this.IsVisible;
			_tmp.IsActive = this.IsActive;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.LoadWithTrain = this.LoadWithTrain;
			_tmp.GsCdeSpecAreaId = this.GsCdeSpecAreaId;
			_tmp.MaxTrnsCh = this.MaxTrnsCh;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.AdmShowFlg = this.AdmShowFlg;
			_tmp.DegEquvText = this.DegEquvText;
			_tmp.DegEquvTextEng = this.DegEquvTextEng;
			_tmp.GsCodeLanguageId = this.GsCodeLanguageId;
			_tmp.ScheduleTypeFlg = this.ScheduleTypeFlg;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdStudyMethodIdSource != null && existingCopies.Contains(this.EdStudyMethodIdSource))
				_tmp.EdStudyMethodIdSource = existingCopies[this.EdStudyMethodIdSource] as EdCodeStudyMethod;
			else
				_tmp.EdStudyMethodIdSource = MakeCopyOf(this.EdStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntCodeEntityTypeIdSource != null && existingCopies.Contains(this.EntCodeEntityTypeIdSource))
				_tmp.EntCodeEntityTypeIdSource = existingCopies[this.EntCodeEntityTypeIdSource] as EntCodeEntityType;
			else
				_tmp.EntCodeEntityTypeIdSource = MakeCopyOf(this.EntCodeEntityTypeIdSource, existingCopies) as EntCodeEntityType;
			if (this.EntParentIdSource != null && existingCopies.Contains(this.EntParentIdSource))
				_tmp.EntParentIdSource = existingCopies[this.EntParentIdSource] as EntityMain;
			else
				_tmp.EntParentIdSource = MakeCopyOf(this.EntParentIdSource, existingCopies) as EntityMain;
			if (this.GsCdeSpecAreaIdSource != null && existingCopies.Contains(this.GsCdeSpecAreaIdSource))
				_tmp.GsCdeSpecAreaIdSource = existingCopies[this.GsCdeSpecAreaIdSource] as GsCdeSpecArea;
			else
				_tmp.GsCdeSpecAreaIdSource = MakeCopyOf(this.GsCdeSpecAreaIdSource, existingCopies) as GsCdeSpecArea;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				_tmp.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.GsCodeLanguageIdSource != null && existingCopies.Contains(this.GsCodeLanguageIdSource))
				_tmp.GsCodeLanguageIdSource = existingCopies[this.GsCodeLanguageIdSource] as GsCodeLanguage;
			else
				_tmp.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource, existingCopies) as GsCodeLanguage;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudFacultyCollectionGetByEntMainGrad1 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad1, existingCopies); 
			_tmp.SvStaffEvlCollectionGetByEntMainMajorId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainMajorId, existingCopies); 
			_tmp.SvStaffEvlCollectionGetByEntMainId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainId, existingCopies); 
			_tmp.EntPolicyMdDataCollection = (TList<EntPolicyMdData>) MakeCopyOf(this.EntPolicyMdDataCollection, existingCopies); 
			_tmp.EntFullfillMdDataCollection = (TList<EntFullfillMdData>) MakeCopyOf(this.EntFullfillMdDataCollection, existingCopies); 
			_tmp.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection, existingCopies); 
			_tmp.EdStudIntTrnsStateToCollection = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollection, existingCopies); 
			_tmp.FeeFacultyInstallmentCollection = (TList<FeeFacultyInstallment>) MakeCopyOf(this.FeeFacultyInstallmentCollection, existingCopies); 
			_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			_tmp.EdCourseOrientCollection = (TList<EdCourseOrient>) MakeCopyOf(this.EdCourseOrientCollection, existingCopies); 
			_tmp.EdProjectCollection = (TList<EdProject>) MakeCopyOf(this.EdProjectCollection, existingCopies); 
			_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			_tmp.EntCoursePkgHdrCollectionGetByEntMainRltdId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainRltdId, existingCopies); 
			_tmp.SpoSponsorOfferExtCollection = (TList<SpoSponsorOfferExt>) MakeCopyOf(this.SpoSponsorOfferExtCollection, existingCopies); 
			_tmp.ScHallRsrvCollection = (TList<ScHallRsrv>) MakeCopyOf(this.ScHallRsrvCollection, existingCopies); 
			_tmp.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection, existingCopies); 
			_tmp.EntMajorPhaseCollection = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollection, existingCopies); 
			_tmp.EntPolicyObserved = (EntPolicyObserved) MakeCopyOf(this.EntPolicyObserved, existingCopies); 
			_tmp.AdmAppInterviewExamCollection = (TList<AdmAppInterviewExam>) MakeCopyOf(this.AdmAppInterviewExamCollection, existingCopies); 
			_tmp.EdCourseTopicCollection = (TList<EdCourseTopic>) MakeCopyOf(this.EdCourseTopicCollection, existingCopies); 
			_tmp.CoControlCollection = (TList<CoControl>) MakeCopyOf(this.CoControlCollection, existingCopies); 
			_tmp.EdAcadPlanCollection = (TList<EdAcadPlan>) MakeCopyOf(this.EdAcadPlanCollection, existingCopies); 
			_tmp.EdStudIntTransPrefCollection = (TList<EdStudIntTransPref>) MakeCopyOf(this.EdStudIntTransPrefCollection, existingCopies); 
			_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			_tmp.EdStudIntTrnsStateFromCollection = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollection, existingCopies); 
			_tmp.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection, existingCopies); 
			_tmp.SaScQualCollection = (TList<SaScQual>) MakeCopyOf(this.SaScQualCollection, existingCopies); 
			_tmp.EntIntroducMdDataCollection = (TList<EntIntroducMdData>) MakeCopyOf(this.EntIntroducMdDataCollection, existingCopies); 
			_tmp.EntCoursePkgMdDataCollection = (TList<EntCoursePkgMdData>) MakeCopyOf(this.EntCoursePkgMdDataCollection, existingCopies); 
			_tmp.AdmTansikMajorsCodesCollection = (TList<AdmTansikMajorsCodes>) MakeCopyOf(this.AdmTansikMajorsCodesCollection, existingCopies); 
			_tmp.EntPrecondMdDataCollection = (TList<EntPrecondMdData>) MakeCopyOf(this.EntPrecondMdDataCollection, existingCopies); 
			_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			_tmp.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection, existingCopies); 
			_tmp.GsCommCollectionGetByEntMainMinorId = (TList<GsComm>) MakeCopyOf(this.GsCommCollectionGetByEntMainMinorId, existingCopies); 
			_tmp.AdmAppPrefCollection = (TList<AdmAppPref>) MakeCopyOf(this.AdmAppPrefCollection, existingCopies); 
			_tmp.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection, existingCopies); 
			_tmp.SvPollHdrCollection = (TList<SvPollHdr>) MakeCopyOf(this.SvPollHdrCollection, existingCopies); 
			_tmp.SaTrainingCourseCollection = (TList<SaTrainingCourse>) MakeCopyOf(this.SaTrainingCourseCollection, existingCopies); 
			_tmp.AdmAppTransReqCollection = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollection, existingCopies); 
			_tmp.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainSpcRltdId, existingCopies); 
			_tmp.EdStudFacultyCollectionGetByEntMainGrad3 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad3, existingCopies); 
			_tmp.PgOfferingCollection = (TList<PgOffering>) MakeCopyOf(this.PgOfferingCollection, existingCopies); 
			_tmp.EntCoursePkgHdrCollectionGetByEntMainId = (TList<EntCoursePkgHdr>) MakeCopyOf(this.EntCoursePkgHdrCollectionGetByEntMainId, existingCopies); 
			_tmp.EdOutcomeCollection = (TList<EdOutcome>) MakeCopyOf(this.EdOutcomeCollection, existingCopies); 
			_tmp.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection, existingCopies); 
			_tmp.EdStudGrantTempCollection = (TList<EdStudGrantTemp>) MakeCopyOf(this.EdStudGrantTempCollection, existingCopies); 
			_tmp.EdBranchRuleCollection = (TList<EdBranchRule>) MakeCopyOf(this.EdBranchRuleCollection, existingCopies); 
			_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			_tmp.EntMainMatrixCollectionGetByEntMainId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainId, existingCopies); 
			_tmp.SvStaffEvlCollectionGetByEntMainMinorId = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollectionGetByEntMainMinorId, existingCopies); 
			_tmp.SaExperienceCollection = (TList<SaExperience>) MakeCopyOf(this.SaExperienceCollection, existingCopies); 
			_tmp.EntGraduationReqCollection = (TList<EntGraduationReq>) MakeCopyOf(this.EntGraduationReqCollection, existingCopies); 
			_tmp.EntMainMatrixCollectionGetByEntMainSpecId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainSpecId, existingCopies); 
			_tmp.EdStudGrantDegreeCollection = (TList<EdStudGrantDegree>) MakeCopyOf(this.EdStudGrantDegreeCollection, existingCopies); 
			_tmp.SvCourseEvalCollection = (TList<SvCourseEval>) MakeCopyOf(this.SvCourseEvalCollection, existingCopies); 
			_tmp.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollectionGetByEntMainSpcRltdId, existingCopies); 
			_tmp.SaStfMemberCollection = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollection, existingCopies); 
			_tmp.EntGradingMdDataCollection = (TList<EntGradingMdData>) MakeCopyOf(this.EntGradingMdDataCollection, existingCopies); 
			_tmp.EntMainMatrixCollectionGetByEntMainMinorId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainMinorId, existingCopies); 
			_tmp.EdOfferingCollection = (TList<EdOffering>) MakeCopyOf(this.EdOfferingCollection, existingCopies); 
			_tmp.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection, existingCopies); 
			_tmp.EdStudFacultyCollectionGetByEntMainGrad2 = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollectionGetByEntMainGrad2, existingCopies); 
			_tmp.EntMainMatrixCollectionGetByEntMainMajorId = (TList<EntMainMatrix>) MakeCopyOf(this.EntMainMatrixCollectionGetByEntMainMajorId, existingCopies); 
			_tmp.SeUserCrsAssessCollectionGetByEntMainDeptId = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollectionGetByEntMainDeptId, existingCopies); 
			_tmp.FeeSemesterAgendaCollection = (TList<FeeSemesterAgenda>) MakeCopyOf(this.FeeSemesterAgendaCollection, existingCopies); 
			_tmp.AdmAppCountCollection = (TList<AdmAppCount>) MakeCopyOf(this.AdmAppCountCollection, existingCopies); 
			_tmp.SaSupervisingJobsCollection = (TList<SaSupervisingJobs>) MakeCopyOf(this.SaSupervisingJobsCollection, existingCopies); 
			_tmp.SeUserCrsAssessCollectionGetByEntMainMajorId = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollectionGetByEntMainMajorId, existingCopies); 
			_tmp.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection, existingCopies); 
			_tmp.EdCoursePrfxCollection = (TList<EdCoursePrfx>) MakeCopyOf(this.EdCoursePrfxCollection, existingCopies); 
			_tmp.PgThesisGeneralSpecCollection = (TList<PgThesisGeneralSpec>) MakeCopyOf(this.PgThesisGeneralSpecCollection, existingCopies); 
			_tmp.EdAcadPlanHdrCollectionGetByEntMainRltdId = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollectionGetByEntMainRltdId, existingCopies); 
			_tmp.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection, existingCopies); 
			_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			_tmp.EdCourseCollection = (TList<EdCourse>) MakeCopyOf(this.EdCourseCollection, existingCopies); 
			_tmp.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection, existingCopies); 
			_tmp.SaEmpHierarchyCollection = (TList<SaEmpHierarchy>) MakeCopyOf(this.SaEmpHierarchyCollection, existingCopies); 
			_tmp.EdStudBranchPrefCollection = (TList<EdStudBranchPref>) MakeCopyOf(this.EdStudBranchPrefCollection, existingCopies); 
			_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			_tmp.SaExtDelCollection = (TList<SaExtDel>) MakeCopyOf(this.SaExtDelCollection, existingCopies); 
			_tmp.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection, existingCopies); 
			_tmp.ScSchdlPeriodCollection = (TList<ScSchdlPeriod>) MakeCopyOf(this.ScSchdlPeriodCollection, existingCopies); 
			_tmp.SeBlockTransCollection = (TList<SeBlockTrans>) MakeCopyOf(this.SeBlockTransCollection, existingCopies); 
			_tmp.ScGroupInfoCollection = (TList<ScGroupInfo>) MakeCopyOf(this.ScGroupInfoCollection, existingCopies); 
			_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			_tmp.EdInttransRuleCollection = (TList<EdInttransRule>) MakeCopyOf(this.EdInttransRuleCollection, existingCopies); 
			_tmp.EntCourseMdDataCollection = (TList<EntCourseMdData>) MakeCopyOf(this.EntCourseMdDataCollection, existingCopies); 
			_tmp.GsCommCollectionGetByEntMainMajorId = (TList<GsComm>) MakeCopyOf(this.GsCommCollectionGetByEntMainMajorId, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntityMainColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntityMainColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntityMainColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntityMainColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntityMainColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntityMainColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntityMainEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntityMainEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntityMainColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntityMainColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntityMainEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntityMainEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntityMainEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntityMain"/> object.
	/// </remarks>
	public class EntityMainEventArgs : System.EventArgs
	{
		private EntityMainColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntityMainEventArgs class.
		///</summary>
		public EntityMainEventArgs(EntityMainColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntityMainEventArgs class.
		///</summary>
		public EntityMainEventArgs(EntityMainColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntityMainColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntityMainColumn" />
		public EntityMainColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntityMain related events.
	///</summary>
	public delegate void EntityMainEventHandler(object sender, EntityMainEventArgs e);
	
	#region EntityMainComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntityMainComparer : System.Collections.Generic.IComparer<EntityMain>
	{
		EntityMainColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntityMainComparer"/> class.
        /// </summary>
		public EntityMainComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntityMainComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntityMainComparer(EntityMainColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntityMain"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntityMain"/> to compare.</param>
        /// <param name="b">The second <c>EntityMain</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntityMain a, EntityMain b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntityMain entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntityMain a, EntityMain b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntityMainColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntityMainKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntityMain"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntityMainKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntityMainKey class.
		/// </summary>
		public EntityMainKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntityMainKey class.
		/// </summary>
		public EntityMainKey(EntityMainBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntMainId = entity.EntMainId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntityMainKey class.
		/// </summary>
		public EntityMainKey(System.Decimal _entMainId)
		{
			#region Init Properties

			this.EntMainId = _entMainId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntityMainBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntityMainBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntMainId property
		private System.Decimal _entMainId;
		
		/// <summary>
		/// Gets or sets the EntMainId property.
		/// </summary>
		public System.Decimal EntMainId
		{
			get { return _entMainId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntMainId = value;
				
				_entMainId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntMainId = ( values["EntMainId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntMainId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntMainId", EntMainId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntMainId: {0}{1}",
								EntMainId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntityMainColumn Enum
	
	/// <summary>
	/// Enumerate the EntityMain columns.
	/// </summary>
	[Serializable]
	public enum EntityMainColumn : int
	{
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntMainId = 1,
		/// <summary>
		/// EntDescrAr : 
		/// </summary>
		[EnumTextValue("ENT_DESCR_AR")]
		[ColumnEnum("ENT_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		EntDescrAr = 2,
		/// <summary>
		/// EntCodeEntityTypeId : 
		/// </summary>
		[EnumTextValue("ENT_CODE_ENTITY_TYPE_ID")]
		[ColumnEnum("ENT_CODE_ENTITY_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntCodeEntityTypeId = 3,
		/// <summary>
		/// StateNotation : 
		/// </summary>
		[EnumTextValue("STATE_NOTATION")]
		[ColumnEnum("STATE_NOTATION", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		StateNotation = 4,
		/// <summary>
		/// EntParentId : 
		/// </summary>
		[EnumTextValue("ENT_PARENT_ID")]
		[ColumnEnum("ENT_PARENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntParentId = 5,
		/// <summary>
		/// EntDescrEn : 
		/// </summary>
		[EnumTextValue("ENT_DESCR_EN")]
		[ColumnEnum("ENT_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		EntDescrEn = 6,
		/// <summary>
		/// IsStateFlg : 
		/// </summary>
		[EnumTextValue("IS_STATE_FLG")]
		[ColumnEnum("IS_STATE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsStateFlg = 7,
		/// <summary>
		/// NodeChildCount : 
		/// </summary>
		[EnumTextValue("NODE_CHILD_COUNT")]
		[ColumnEnum("NODE_CHILD_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NodeChildCount = 8,
		/// <summary>
		/// NodePath : 
		/// </summary>
		[EnumTextValue("NODE_PATH")]
		[ColumnEnum("NODE_PATH", typeof(System.String), System.Data.DbType.String, false, false, true, 90)]
		NodePath = 9,
		/// <summary>
		/// NodeOrder : 
		/// </summary>
		[EnumTextValue("NODE_ORDER")]
		[ColumnEnum("NODE_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NodeOrder = 10,
		/// <summary>
		/// NodeLevel : 
		/// </summary>
		[EnumTextValue("NODE_LEVEL")]
		[ColumnEnum("NODE_LEVEL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NodeLevel = 11,
		/// <summary>
		/// EdStudyMethodId : 
		/// </summary>
		[EnumTextValue("ED_STUDY_METHOD_ID")]
		[ColumnEnum("ED_STUDY_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudyMethodId = 12,
		/// <summary>
		/// IsInfoFlg : 
		/// </summary>
		[EnumTextValue("IS_INFO_FLG")]
		[ColumnEnum("IS_INFO_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsInfoFlg = 13,
		/// <summary>
		/// IsHomeFlg : 
		/// </summary>
		[EnumTextValue("IS_HOME_FLG")]
		[ColumnEnum("IS_HOME_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsHomeFlg = 14,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 15,
		/// <summary>
		/// StateDescrAr : 
		/// </summary>
		[EnumTextValue("STATE_DESCR_AR")]
		[ColumnEnum("STATE_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		StateDescrAr = 16,
		/// <summary>
		/// StateDescrEn : 
		/// </summary>
		[EnumTextValue("STATE_DESCR_EN")]
		[ColumnEnum("STATE_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		StateDescrEn = 17,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 18,
		/// <summary>
		/// IsVisible : 
		/// </summary>
		[EnumTextValue("IS_VISIBLE")]
		[ColumnEnum("IS_VISIBLE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsVisible = 19,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsActive = 20,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 21,
		/// <summary>
		/// ApproveFlg : 
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ApproveFlg = 22,
		/// <summary>
		/// LoadWithTrain : 
		/// </summary>
		[EnumTextValue("LOAD_WITH_TRAIN")]
		[ColumnEnum("LOAD_WITH_TRAIN", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LoadWithTrain = 23,
		/// <summary>
		/// GsCdeSpecAreaId : 
		/// </summary>
		[EnumTextValue("GS_CDE_SPEC_AREA_ID")]
		[ColumnEnum("GS_CDE_SPEC_AREA_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCdeSpecAreaId = 24,
		/// <summary>
		/// MaxTrnsCh : اقصى عدد ساعات تحويل عند  تطبيق المقاصة الخارجية 
		/// </summary>
		[EnumTextValue("MAX_TRNS_CH")]
		[ColumnEnum("MAX_TRNS_CH", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaxTrnsCh = 25,
		/// <summary>
		/// GsCodeGenderId : 
		/// </summary>
		[EnumTextValue("GS_CODE_GENDER_ID")]
		[ColumnEnum("GS_CODE_GENDER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeGenderId = 26,
		/// <summary>
		/// AdmShowFlg : 
		/// </summary>
		[EnumTextValue("ADM_SHOW_FLG")]
		[ColumnEnum("ADM_SHOW_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AdmShowFlg = 27,
		/// <summary>
		/// DegEquvText : نص قرار المعادلة
		/// </summary>
		[EnumTextValue("DEG_EQUV_TEXT")]
		[ColumnEnum("DEG_EQUV_TEXT", typeof(System.String), System.Data.DbType.String, false, false, true)]
		DegEquvText = 28,
		/// <summary>
		/// DegEquvTextEng : 
		/// </summary>
		[EnumTextValue("DEG_EQUV_TEXT_ENG")]
		[ColumnEnum("DEG_EQUV_TEXT_ENG", typeof(System.String), System.Data.DbType.String, false, false, true)]
		DegEquvTextEng = 29,
		/// <summary>
		/// GsCodeLanguageId : 
		/// </summary>
		[EnumTextValue("GS_CODE_LANGUAGE_ID")]
		[ColumnEnum("GS_CODE_LANGUAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeLanguageId = 30,
		/// <summary>
		/// ScheduleTypeFlg : 
		/// </summary>
		[EnumTextValue("SCHEDULE_TYPE_FLG")]
		[ColumnEnum("SCHEDULE_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScheduleTypeFlg = 31
	}//End enum

	#endregion EntityMainColumn Enum

} // end namespace
