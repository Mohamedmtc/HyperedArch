
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SpoSponsorStud.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SPO_SPONSOR_STUD' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SpoSponsorStudBase : EntityBase, ISpoSponsorStud, IEntityId<SpoSponsorStudKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SpoSponsorStudEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SpoSponsorStudEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SpoSponsorStudEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SpoSponsorStud> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpoSponsorStudEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpoSponsorStudEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SpoSponsorStudBase"/> instance.
		///</summary>
		public SpoSponsorStudBase()
		{
			this.entityData = new SpoSponsorStudEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SpoSponsorStudBase"/> instance.
		///</summary>
		///<param name="_spoSponsorStudId"></param>
		///<param name="_spoSponsorOfferId"></param>
		///<param name="_asFacultyInfoId">NULL default=UNIV</param>
		///<param name="_edStudId"></param>
		///<param name="_reqDate">طلب كفالة لطالب</param>
		///<param name="_edAcadYearId">من عام</param>
		///<param name="_edCodeSemesterId">من فصل</param>
		///<param name="_spoPercentUpdt">XXXنوع الكفالة "نسبة /قيمةXXX"</param>
		///<param name="_spoAmountUpdt">XXXنوع الكفالة "نسبة /قيمة"</param>
		///<param name="_notes">قيمة او نسبة الكفالة بتتغير من عام -فصل لاخر</param>
		///<param name="_isActive"></param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_approveDate">تاريخ اعتماد</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_admAppRegHistoryId">طلب كفالة للمتقدم</param>
		///<param name="_edAcadYearToId">الى عام</param>
		///<param name="_edCodeSemesterToId">الى فصل</param>
		///<param name="_extndSemCount">مدالفصول الدراسية</param>
		public SpoSponsorStudBase(System.Decimal _spoSponsorStudId, System.Decimal _spoSponsorOfferId, 
			System.Decimal? _asFacultyInfoId, System.Decimal? _edStudId, System.DateTime? _reqDate, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal? _spoPercentUpdt, 
			System.Decimal? _spoAmountUpdt, System.String _notes, System.Boolean? _isActive, 
			System.Boolean? _approveFlg, System.DateTime? _approveDate, System.Decimal? _seUserId, 
			System.DateTime? _lastDate, System.Decimal? _admAppRegHistoryId, System.Decimal? _edAcadYearToId, 
			System.Decimal? _edCodeSemesterToId, System.Int32? _extndSemCount)
		{
			this.entityData = new SpoSponsorStudEntityData();
			this.backupData = null;

			this.SpoSponsorStudId = _spoSponsorStudId;
			this.SpoSponsorOfferId = _spoSponsorOfferId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdStudId = _edStudId;
			this.ReqDate = _reqDate;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.SpoPercentUpdt = _spoPercentUpdt;
			this.SpoAmountUpdt = _spoAmountUpdt;
			this.Notes = _notes;
			this.IsActive = _isActive;
			this.ApproveFlg = _approveFlg;
			this.ApproveDate = _approveDate;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.AdmAppRegHistoryId = _admAppRegHistoryId;
			this.EdAcadYearToId = _edAcadYearToId;
			this.EdCodeSemesterToId = _edCodeSemesterToId;
			this.ExtndSemCount = _extndSemCount;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SpoSponsorStud"/> instance.
		///</summary>
		///<param name="_spoSponsorStudId"></param>
		///<param name="_spoSponsorOfferId"></param>
		///<param name="_asFacultyInfoId">NULL default=UNIV</param>
		///<param name="_edStudId"></param>
		///<param name="_reqDate">طلب كفالة لطالب</param>
		///<param name="_edAcadYearId">من عام</param>
		///<param name="_edCodeSemesterId">من فصل</param>
		///<param name="_spoPercentUpdt">XXXنوع الكفالة "نسبة /قيمةXXX"</param>
		///<param name="_spoAmountUpdt">XXXنوع الكفالة "نسبة /قيمة"</param>
		///<param name="_notes">قيمة او نسبة الكفالة بتتغير من عام -فصل لاخر</param>
		///<param name="_isActive"></param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_approveDate">تاريخ اعتماد</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_admAppRegHistoryId">طلب كفالة للمتقدم</param>
		///<param name="_edAcadYearToId">الى عام</param>
		///<param name="_edCodeSemesterToId">الى فصل</param>
		///<param name="_extndSemCount">مدالفصول الدراسية</param>
		public static SpoSponsorStud CreateSpoSponsorStud(System.Decimal _spoSponsorStudId, System.Decimal _spoSponsorOfferId, 
			System.Decimal? _asFacultyInfoId, System.Decimal? _edStudId, System.DateTime? _reqDate, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal? _spoPercentUpdt, 
			System.Decimal? _spoAmountUpdt, System.String _notes, System.Boolean? _isActive, 
			System.Boolean? _approveFlg, System.DateTime? _approveDate, System.Decimal? _seUserId, 
			System.DateTime? _lastDate, System.Decimal? _admAppRegHistoryId, System.Decimal? _edAcadYearToId, 
			System.Decimal? _edCodeSemesterToId, System.Int32? _extndSemCount)
		{
			SpoSponsorStud newSpoSponsorStud = new SpoSponsorStud();
			newSpoSponsorStud.SpoSponsorStudId = _spoSponsorStudId;
			newSpoSponsorStud.SpoSponsorOfferId = _spoSponsorOfferId;
			newSpoSponsorStud.AsFacultyInfoId = _asFacultyInfoId;
			newSpoSponsorStud.EdStudId = _edStudId;
			newSpoSponsorStud.ReqDate = _reqDate;
			newSpoSponsorStud.EdAcadYearId = _edAcadYearId;
			newSpoSponsorStud.EdCodeSemesterId = _edCodeSemesterId;
			newSpoSponsorStud.SpoPercentUpdt = _spoPercentUpdt;
			newSpoSponsorStud.SpoAmountUpdt = _spoAmountUpdt;
			newSpoSponsorStud.Notes = _notes;
			newSpoSponsorStud.IsActive = _isActive;
			newSpoSponsorStud.ApproveFlg = _approveFlg;
			newSpoSponsorStud.ApproveDate = _approveDate;
			newSpoSponsorStud.SeUserId = _seUserId;
			newSpoSponsorStud.LastDate = _lastDate;
			newSpoSponsorStud.AdmAppRegHistoryId = _admAppRegHistoryId;
			newSpoSponsorStud.EdAcadYearToId = _edAcadYearToId;
			newSpoSponsorStud.EdCodeSemesterToId = _edCodeSemesterToId;
			newSpoSponsorStud.ExtndSemCount = _extndSemCount;
			return newSpoSponsorStud;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SpoSponsorStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SpoSponsorStudId
		{
			get
			{
				return this.entityData.SpoSponsorStudId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorStudId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.SpoSponsorStudId, this.entityData.SpoSponsorStudId);
				this.entityData.SpoSponsorStudId = value;
				this.EntityId.SpoSponsorStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.SpoSponsorStudId, this.entityData.SpoSponsorStudId);
				OnPropertyChanged("SpoSponsorStudId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SPO_SPONSOR_STUD_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SPO_SPONSOR_STUD_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSpoSponsorStudId
		{
			get { return this.entityData.OriginalSpoSponsorStudId; }
			set { this.entityData.OriginalSpoSponsorStudId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SpoSponsorOfferId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SpoSponsorOfferId
		{
			get
			{
				return this.entityData.SpoSponsorOfferId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorOfferId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.SpoSponsorOfferId, this.entityData.SpoSponsorOfferId);
				this.entityData.SpoSponsorOfferId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.SpoSponsorOfferId, this.entityData.SpoSponsorOfferId);
				OnPropertyChanged("SpoSponsorOfferId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		NULL default=UNIV
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NULL default=UNIV"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		طلب كفالة لطالب
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReqDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"طلب كفالة لطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		من عام
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"من عام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		من فصل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"من فصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoPercentUpdt property. 
		///		XXXنوع الكفالة "نسبة /قيمةXXX"
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoPercentUpdtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXنوع الكفالة 'نسبة /قيمةXXX'"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoPercentUpdt
		{
			get
			{
				return this.entityData.SpoPercentUpdt; 
			}
			
			set
			{
				if (this.entityData.SpoPercentUpdt == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.SpoPercentUpdt, this.entityData.SpoPercentUpdt);
				this.entityData.SpoPercentUpdt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.SpoPercentUpdt, this.entityData.SpoPercentUpdt);
				OnPropertyChanged("SpoPercentUpdt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoAmountUpdt property. 
		///		XXXنوع الكفالة "نسبة /قيمة"
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoAmountUpdtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXنوع الكفالة 'نسبة /قيمة'"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoAmountUpdt
		{
			get
			{
				return this.entityData.SpoAmountUpdt; 
			}
			
			set
			{
				if (this.entityData.SpoAmountUpdt == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.SpoAmountUpdt, this.entityData.SpoAmountUpdt);
				this.entityData.SpoAmountUpdt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.SpoAmountUpdt, this.entityData.SpoAmountUpdt);
				OnPropertyChanged("SpoAmountUpdt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		قيمة او نسبة الكفالة بتتغير من عام -فصل لاخر
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"قيمة او نسبة الكفالة بتتغير من عام -فصل لاخر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		مؤشر اعتماد
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveDate property. 
		///		تاريخ اعتماد
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ اعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApproveDate
		{
			get
			{
				return this.entityData.ApproveDate; 
			}
			
			set
			{
				if (this.entityData.ApproveDate == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.ApproveDate, this.entityData.ApproveDate);
				this.entityData.ApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.ApproveDate, this.entityData.ApproveDate);
				OnPropertyChanged("ApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppRegHistoryId property. 
		///		طلب كفالة للمتقدم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmAppRegHistoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"طلب كفالة للمتقدم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmAppRegHistoryId
		{
			get
			{
				return this.entityData.AdmAppRegHistoryId; 
			}
			
			set
			{
				if (this.entityData.AdmAppRegHistoryId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				this.entityData.AdmAppRegHistoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				OnPropertyChanged("AdmAppRegHistoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearToId property. 
		///		الى عام
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الى عام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearToId
		{
			get
			{
				return this.entityData.EdAcadYearToId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearToId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.EdAcadYearToId, this.entityData.EdAcadYearToId);
				this.entityData.EdAcadYearToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.EdAcadYearToId, this.entityData.EdAcadYearToId);
				OnPropertyChanged("EdAcadYearToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterToId property. 
		///		الى فصل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الى فصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterToId
		{
			get
			{
				return this.entityData.EdCodeSemesterToId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterToId == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				this.entityData.EdCodeSemesterToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				OnPropertyChanged("EdCodeSemesterToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExtndSemCount property. 
		///		مدالفصول الدراسية
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExtndSemCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مدالفصول الدراسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExtndSemCount
		{
			get
			{
				return this.entityData.ExtndSemCount; 
			}
			
			set
			{
				if (this.entityData.ExtndSemCount == value)
					return;
					
				OnColumnChanging(SpoSponsorStudColumn.ExtndSemCount, this.entityData.ExtndSemCount);
				this.entityData.ExtndSemCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoSponsorStudColumn.ExtndSemCount, this.entityData.ExtndSemCount);
				OnPropertyChanged("ExtndSemCount");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return entityData.AdmAppRegHistoryIdSource; }
            set { entityData.AdmAppRegHistoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearToIdSource
      	{
            get { return entityData.EdAcadYearToIdSource; }
            set { entityData.EdAcadYearToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return entityData.EdCodeSemesterToIdSource; }
            set { entityData.EdCodeSemesterToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsorOffer"/>.
		/// </summary>
		/// <value>The source SpoSponsorOffer for SpoSponsorOfferId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SpoSponsorOffer SpoSponsorOfferIdSource
      	{
            get { return entityData.SpoSponsorOfferIdSource; }
            set { entityData.SpoSponsorOfferIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SpoOfferStudException objects
		///	which are related to this object through the relation FK_SPO_OFFER_STUD_EXCEPTION_SPO_SPONSOR_STUD
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoOfferStudException> SpoOfferStudExceptionCollection
		{
			get { return entityData.SpoOfferStudExceptionCollection; }
			set { entityData.SpoOfferStudExceptionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoStudFeeItem objects
		///	which are related to this object through the relation FK_SPO_STUD_FEE_ITEM_SPO_SPONSOR_STUD
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoStudFeeItem> SpoStudFeeItemCollection
		{
			get { return entityData.SpoStudFeeItemCollection; }
			set { entityData.SpoStudFeeItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SPO_SPONSOR_STUD"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SPO_SPONSOR_STUD_ID", "SPO_SPONSOR_OFFER_ID", "AS_FACULTY_INFO_ID", "ED_STUD_ID", "REQ_DATE", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "SPO_PERCENT_UPDT", "SPO_AMOUNT_UPDT", "NOTES", "IS_ACTIVE", "APPROVE_FLG", "APPROVE_DATE", "SE_USER_ID", "LAST_DATE", "ADM_APP_REG_HISTORY_ID", "ED_ACAD_YEAR_TO_ID", "ED_CODE_SEMESTER_TO_ID", "EXTND_SEM_COUNT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SpoSponsorStudEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SpoSponsorStud) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SpoSponsorStud>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SpoSponsorStud);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SpoSponsorStud Entity 
		///</summary>
		protected virtual SpoSponsorStud Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SpoSponsorStud copy = new SpoSponsorStud();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SpoSponsorStudId = this.SpoSponsorStudId;
					copy.OriginalSpoSponsorStudId = this.OriginalSpoSponsorStudId;
				copy.SpoSponsorOfferId = this.SpoSponsorOfferId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdStudId = this.EdStudId;
				copy.ReqDate = this.ReqDate;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.SpoPercentUpdt = this.SpoPercentUpdt;
				copy.SpoAmountUpdt = this.SpoAmountUpdt;
				copy.Notes = this.Notes;
				copy.IsActive = this.IsActive;
				copy.ApproveFlg = this.ApproveFlg;
				copy.ApproveDate = this.ApproveDate;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
				copy.EdAcadYearToId = this.EdAcadYearToId;
				copy.EdCodeSemesterToId = this.EdCodeSemesterToId;
				copy.ExtndSemCount = this.ExtndSemCount;
			
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				copy.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				copy.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearToIdSource != null && existingCopies.Contains(this.EdAcadYearToIdSource))
				copy.EdAcadYearToIdSource = existingCopies[this.EdAcadYearToIdSource] as EdAcadYear;
			else
				copy.EdAcadYearToIdSource = MakeCopyOf(this.EdAcadYearToIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				copy.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.SpoSponsorOfferIdSource != null && existingCopies.Contains(this.SpoSponsorOfferIdSource))
				copy.SpoSponsorOfferIdSource = existingCopies[this.SpoSponsorOfferIdSource] as SpoSponsorOffer;
			else
				copy.SpoSponsorOfferIdSource = MakeCopyOf(this.SpoSponsorOfferIdSource, existingCopies) as SpoSponsorOffer;
		
			//deep copy nested objects
			copy.SpoOfferStudExceptionCollection = (TList<SpoOfferStudException>) MakeCopyOf(this.SpoOfferStudExceptionCollection, existingCopies); 
			copy.SpoStudFeeItemCollection = (TList<SpoStudFeeItem>) MakeCopyOf(this.SpoStudFeeItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SpoSponsorStud Entity 
		///</summary>
		public virtual SpoSponsorStud Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SpoSponsorStud Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SpoSponsorStud DeepCopy()
		{
			return EntityHelper.Clone<SpoSponsorStud>(this as SpoSponsorStud);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SpoSponsorStudEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SpoSponsorStudEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SpoSponsorStudEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SpoSponsorStudColumn column)
		{
			switch(column)
			{
					case SpoSponsorStudColumn.SpoSponsorStudId:
					return entityData.SpoSponsorStudId != _originalData.SpoSponsorStudId;
					case SpoSponsorStudColumn.SpoSponsorOfferId:
					return entityData.SpoSponsorOfferId != _originalData.SpoSponsorOfferId;
					case SpoSponsorStudColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SpoSponsorStudColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case SpoSponsorStudColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case SpoSponsorStudColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case SpoSponsorStudColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case SpoSponsorStudColumn.SpoPercentUpdt:
					return entityData.SpoPercentUpdt != _originalData.SpoPercentUpdt;
					case SpoSponsorStudColumn.SpoAmountUpdt:
					return entityData.SpoAmountUpdt != _originalData.SpoAmountUpdt;
					case SpoSponsorStudColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case SpoSponsorStudColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case SpoSponsorStudColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case SpoSponsorStudColumn.ApproveDate:
					return entityData.ApproveDate != _originalData.ApproveDate;
					case SpoSponsorStudColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SpoSponsorStudColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case SpoSponsorStudColumn.AdmAppRegHistoryId:
					return entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
					case SpoSponsorStudColumn.EdAcadYearToId:
					return entityData.EdAcadYearToId != _originalData.EdAcadYearToId;
					case SpoSponsorStudColumn.EdCodeSemesterToId:
					return entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
					case SpoSponsorStudColumn.ExtndSemCount:
					return entityData.ExtndSemCount != _originalData.ExtndSemCount;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SpoSponsorStudColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SpoSponsorStudId != _originalData.SpoSponsorStudId;
			result = result || entityData.SpoSponsorOfferId != _originalData.SpoSponsorOfferId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.SpoPercentUpdt != _originalData.SpoPercentUpdt;
			result = result || entityData.SpoAmountUpdt != _originalData.SpoAmountUpdt;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.ApproveDate != _originalData.ApproveDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
			result = result || entityData.EdAcadYearToId != _originalData.EdAcadYearToId;
			result = result || entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
			result = result || entityData.ExtndSemCount != _originalData.ExtndSemCount;
			return result;
		}	
		
		///<summary>
		///  Returns a SpoSponsorStud Entity with the original data.
		///</summary>
		public SpoSponsorStud GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSpoSponsorStud(
				_originalData.SpoSponsorStudId,
				_originalData.SpoSponsorOfferId,
				_originalData.AsFacultyInfoId,
				_originalData.EdStudId,
				_originalData.ReqDate,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.SpoPercentUpdt,
				_originalData.SpoAmountUpdt,
				_originalData.Notes,
				_originalData.IsActive,
				_originalData.ApproveFlg,
				_originalData.ApproveDate,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.AdmAppRegHistoryId,
				_originalData.EdAcadYearToId,
				_originalData.EdCodeSemesterToId,
				_originalData.ExtndSemCount
				);
				
			return (SpoSponsorStud)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SpoSponsorStudBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SpoSponsorStudBase)
				return ValueEquals(this, (SpoSponsorStudBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SpoSponsorStudBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SpoSponsorStudId.GetHashCode() ^ 
					this.SpoSponsorOfferId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					((this.ReqDate == null) ? string.Empty : this.ReqDate.ToString()).GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.SpoPercentUpdt == null) ? string.Empty : this.SpoPercentUpdt.ToString()).GetHashCode() ^ 
					((this.SpoAmountUpdt == null) ? string.Empty : this.SpoAmountUpdt.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString()).GetHashCode() ^ 
					((this.EdAcadYearToId == null) ? string.Empty : this.EdAcadYearToId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterToId == null) ? string.Empty : this.EdCodeSemesterToId.ToString()).GetHashCode() ^ 
					((this.ExtndSemCount == null) ? string.Empty : this.ExtndSemCount.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SpoSponsorStudBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SpoSponsorStudBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SpoSponsorStudBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SpoSponsorStudBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SpoSponsorStudBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SpoSponsorStudBase Object1, SpoSponsorStudBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SpoSponsorStudId != Object2.SpoSponsorStudId)
				equal = false;
			if (Object1.SpoSponsorOfferId != Object2.SpoSponsorOfferId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if ( Object1.ReqDate != null && Object2.ReqDate != null )
			{
				if (Object1.ReqDate != Object2.ReqDate)
					equal = false;
			}
			else if (Object1.ReqDate == null ^ Object2.ReqDate == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.SpoPercentUpdt != null && Object2.SpoPercentUpdt != null )
			{
				if (Object1.SpoPercentUpdt != Object2.SpoPercentUpdt)
					equal = false;
			}
			else if (Object1.SpoPercentUpdt == null ^ Object2.SpoPercentUpdt == null )
			{
				equal = false;
			}
			if ( Object1.SpoAmountUpdt != null && Object2.SpoAmountUpdt != null )
			{
				if (Object1.SpoAmountUpdt != Object2.SpoAmountUpdt)
					equal = false;
			}
			else if (Object1.SpoAmountUpdt == null ^ Object2.SpoAmountUpdt == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.ApproveDate != null && Object2.ApproveDate != null )
			{
				if (Object1.ApproveDate != Object2.ApproveDate)
					equal = false;
			}
			else if (Object1.ApproveDate == null ^ Object2.ApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.AdmAppRegHistoryId != null && Object2.AdmAppRegHistoryId != null )
			{
				if (Object1.AdmAppRegHistoryId != Object2.AdmAppRegHistoryId)
					equal = false;
			}
			else if (Object1.AdmAppRegHistoryId == null ^ Object2.AdmAppRegHistoryId == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearToId != null && Object2.EdAcadYearToId != null )
			{
				if (Object1.EdAcadYearToId != Object2.EdAcadYearToId)
					equal = false;
			}
			else if (Object1.EdAcadYearToId == null ^ Object2.EdAcadYearToId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterToId != null && Object2.EdCodeSemesterToId != null )
			{
				if (Object1.EdCodeSemesterToId != Object2.EdCodeSemesterToId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterToId == null ^ Object2.EdCodeSemesterToId == null )
			{
				equal = false;
			}
			if ( Object1.ExtndSemCount != null && Object2.ExtndSemCount != null )
			{
				if (Object1.ExtndSemCount != Object2.ExtndSemCount)
					equal = false;
			}
			else if (Object1.ExtndSemCount == null ^ Object2.ExtndSemCount == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SpoSponsorStudBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SpoSponsorStudComparer GetComparer()
        {
            return new SpoSponsorStudComparer();
        }
        */

        // Comparer delegates back to SpoSponsorStud
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SpoSponsorStud rhs, SpoSponsorStudColumn which)
        {
            switch (which)
            {
            	
            	
            	case SpoSponsorStudColumn.SpoSponsorStudId:
            		return this.SpoSponsorStudId.CompareTo(rhs.SpoSponsorStudId);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.SpoSponsorOfferId:
            		return this.SpoSponsorOfferId.CompareTo(rhs.SpoSponsorOfferId);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.ReqDate:
            		return this.ReqDate.Value.CompareTo(rhs.ReqDate.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.SpoPercentUpdt:
            		return this.SpoPercentUpdt.Value.CompareTo(rhs.SpoPercentUpdt.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.SpoAmountUpdt:
            		return this.SpoAmountUpdt.Value.CompareTo(rhs.SpoAmountUpdt.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.ApproveDate:
            		return this.ApproveDate.Value.CompareTo(rhs.ApproveDate.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.AdmAppRegHistoryId:
            		return this.AdmAppRegHistoryId.Value.CompareTo(rhs.AdmAppRegHistoryId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.EdAcadYearToId:
            		return this.EdAcadYearToId.Value.CompareTo(rhs.EdAcadYearToId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.EdCodeSemesterToId:
            		return this.EdCodeSemesterToId.Value.CompareTo(rhs.EdCodeSemesterToId.Value);
            		
            		                 
            	
            	
            	case SpoSponsorStudColumn.ExtndSemCount:
            		return this.ExtndSemCount.Value.CompareTo(rhs.ExtndSemCount.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SpoSponsorStudKey> Members
		
		// member variable for the EntityId property
		private SpoSponsorStudKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SpoSponsorStudKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SpoSponsorStudKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SpoSponsorStud")
					.Append("|").Append( this.SpoSponsorStudId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- SpoSponsorStudId: {0}{19}- SpoSponsorOfferId: {1}{19}- AsFacultyInfoId: {2}{19}- EdStudId: {3}{19}- ReqDate: {4}{19}- EdAcadYearId: {5}{19}- EdCodeSemesterId: {6}{19}- SpoPercentUpdt: {7}{19}- SpoAmountUpdt: {8}{19}- Notes: {9}{19}- IsActive: {10}{19}- ApproveFlg: {11}{19}- ApproveDate: {12}{19}- SeUserId: {13}{19}- LastDate: {14}{19}- AdmAppRegHistoryId: {15}{19}- EdAcadYearToId: {16}{19}- EdCodeSemesterToId: {17}{19}- ExtndSemCount: {18}{19}{21}", 
				this.SpoSponsorStudId,
				this.SpoSponsorOfferId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				(this.ReqDate == null) ? string.Empty : this.ReqDate.ToString(),
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.SpoPercentUpdt == null) ? string.Empty : this.SpoPercentUpdt.ToString(),
				(this.SpoAmountUpdt == null) ? string.Empty : this.SpoAmountUpdt.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString(),
				(this.EdAcadYearToId == null) ? string.Empty : this.EdAcadYearToId.ToString(),
				(this.EdCodeSemesterToId == null) ? string.Empty : this.EdCodeSemesterToId.ToString(),
				(this.ExtndSemCount == null) ? string.Empty : this.ExtndSemCount.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SPO_SPONSOR_STUD' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SpoSponsorStudEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SPO_SPONSOR_STUD_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SPO_SPONSOR_STUD"</remarks>
		public System.Decimal SpoSponsorStudId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSpoSponsorStudId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SPO_SPONSOR_OFFER_ID : 
		/// </summary>
		public System.Decimal		  SpoSponsorOfferId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : NULL default=UNIV
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// REQ_DATE : طلب كفالة لطالب
		/// </summary>
		public System.DateTime?		  ReqDate = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : من عام
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : من فصل
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// SPO_PERCENT_UPDT : XXXنوع الكفالة "نسبة /قيمةXXX"
		/// </summary>
		public System.Decimal?		  SpoPercentUpdt = null;
		
		/// <summary>
		/// SPO_AMOUNT_UPDT : XXXنوع الكفالة "نسبة /قيمة"
		/// </summary>
		public System.Decimal?		  SpoAmountUpdt = null;
		
		/// <summary>
		/// NOTES : قيمة او نسبة الكفالة بتتغير من عام -فصل لاخر
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Boolean?		  IsActive = null;
		
		/// <summary>
		/// APPROVE_FLG : مؤشر اعتماد
		/// </summary>
		public System.Boolean?		  ApproveFlg = null;
		
		/// <summary>
		/// APPROVE_DATE : تاريخ اعتماد
		/// </summary>
		public System.DateTime?		  ApproveDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// ADM_APP_REG_HISTORY_ID : طلب كفالة للمتقدم
		/// </summary>
		public System.Decimal?		  AdmAppRegHistoryId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_TO_ID : الى عام
		/// </summary>
		public System.Decimal?		  EdAcadYearToId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_TO_ID : الى فصل
		/// </summary>
		public System.Decimal?		  EdCodeSemesterToId = null;
		
		/// <summary>
		/// EXTND_SEM_COUNT : مدالفصول الدراسية
		/// </summary>
		public System.Int32?		  ExtndSemCount = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppRegHistory _admAppRegHistoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return this._admAppRegHistoryIdSource; }
            set { this._admAppRegHistoryIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdAcadYear _edAcadYearToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearToIdSource
      	{
            get { return this._edAcadYearToIdSource; }
            set { this._edAcadYearToIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return this._edCodeSemesterToIdSource; }
            set { this._edCodeSemesterToIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private SpoSponsorOffer _spoSponsorOfferIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsorOffer"/>.
		/// </summary>
		/// <value>The source SpoSponsorOffer for SpoSponsorOfferId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SpoSponsorOffer SpoSponsorOfferIdSource
      	{
            get { return this._spoSponsorOfferIdSource; }
            set { this._spoSponsorOfferIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SpoOfferStudExceptionCollection
		
		private TList<SpoOfferStudException> _spoOfferStudExceptionSpoSponsorStudId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoOfferStudExceptionSpoSponsorStudId
		/// </summary>
		
		public TList<SpoOfferStudException> SpoOfferStudExceptionCollection
		{
			get
			{
				if (_spoOfferStudExceptionSpoSponsorStudId == null)
				{
				_spoOfferStudExceptionSpoSponsorStudId = new TList<SpoOfferStudException>();
				}
	
				return _spoOfferStudExceptionSpoSponsorStudId;
			}
			set { _spoOfferStudExceptionSpoSponsorStudId = value; }
		}
		
		#endregion

		#region SpoStudFeeItemCollection
		
		private TList<SpoStudFeeItem> _spoStudFeeItemSpoSponsorStudId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoStudFeeItemSpoSponsorStudId
		/// </summary>
		
		public TList<SpoStudFeeItem> SpoStudFeeItemCollection
		{
			get
			{
				if (_spoStudFeeItemSpoSponsorStudId == null)
				{
				_spoStudFeeItemSpoSponsorStudId = new TList<SpoStudFeeItem>();
				}
	
				return _spoStudFeeItemSpoSponsorStudId;
			}
			set { _spoStudFeeItemSpoSponsorStudId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SpoSponsorStudEntityData _tmp = new SpoSponsorStudEntityData();
						
			_tmp.SpoSponsorStudId = this.SpoSponsorStudId;
			_tmp.OriginalSpoSponsorStudId = this.OriginalSpoSponsorStudId;
			
			_tmp.SpoSponsorOfferId = this.SpoSponsorOfferId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SpoPercentUpdt = this.SpoPercentUpdt;
			_tmp.SpoAmountUpdt = this.SpoAmountUpdt;
			_tmp.Notes = this.Notes;
			_tmp.IsActive = this.IsActive;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.EdAcadYearToId = this.EdAcadYearToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.ExtndSemCount = this.ExtndSemCount;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null)
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource) as AdmAppRegHistory;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdAcadYearToIdSource != null)
				_tmp.EdAcadYearToIdSource = MakeCopyOf(this.EdAcadYearToIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null)
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.SpoSponsorOfferIdSource != null)
				_tmp.SpoSponsorOfferIdSource = MakeCopyOf(this.SpoSponsorOfferIdSource) as SpoSponsorOffer;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._spoOfferStudExceptionSpoSponsorStudId != null)
				_tmp.SpoOfferStudExceptionCollection = (TList<SpoOfferStudException>) MakeCopyOf(this.SpoOfferStudExceptionCollection); 
			if (this._spoStudFeeItemSpoSponsorStudId != null)
				_tmp.SpoStudFeeItemCollection = (TList<SpoStudFeeItem>) MakeCopyOf(this.SpoStudFeeItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SpoSponsorStudEntityData _tmp = new SpoSponsorStudEntityData();
						
			_tmp.SpoSponsorStudId = this.SpoSponsorStudId;
			_tmp.OriginalSpoSponsorStudId = this.OriginalSpoSponsorStudId;
			
			_tmp.SpoSponsorOfferId = this.SpoSponsorOfferId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SpoPercentUpdt = this.SpoPercentUpdt;
			_tmp.SpoAmountUpdt = this.SpoAmountUpdt;
			_tmp.Notes = this.Notes;
			_tmp.IsActive = this.IsActive;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.EdAcadYearToId = this.EdAcadYearToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.ExtndSemCount = this.ExtndSemCount;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				_tmp.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearToIdSource != null && existingCopies.Contains(this.EdAcadYearToIdSource))
				_tmp.EdAcadYearToIdSource = existingCopies[this.EdAcadYearToIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearToIdSource = MakeCopyOf(this.EdAcadYearToIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				_tmp.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.SpoSponsorOfferIdSource != null && existingCopies.Contains(this.SpoSponsorOfferIdSource))
				_tmp.SpoSponsorOfferIdSource = existingCopies[this.SpoSponsorOfferIdSource] as SpoSponsorOffer;
			else
				_tmp.SpoSponsorOfferIdSource = MakeCopyOf(this.SpoSponsorOfferIdSource, existingCopies) as SpoSponsorOffer;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SpoOfferStudExceptionCollection = (TList<SpoOfferStudException>) MakeCopyOf(this.SpoOfferStudExceptionCollection, existingCopies); 
			_tmp.SpoStudFeeItemCollection = (TList<SpoStudFeeItem>) MakeCopyOf(this.SpoStudFeeItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorStudColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SpoSponsorStudColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorStudColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SpoSponsorStudColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorStudColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SpoSponsorStudColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SpoSponsorStudEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SpoSponsorStudEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoSponsorStudColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SpoSponsorStudColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SpoSponsorStudEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SpoSponsorStudEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SpoSponsorStudEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SpoSponsorStud"/> object.
	/// </remarks>
	public class SpoSponsorStudEventArgs : System.EventArgs
	{
		private SpoSponsorStudColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SpoSponsorStudEventArgs class.
		///</summary>
		public SpoSponsorStudEventArgs(SpoSponsorStudColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SpoSponsorStudEventArgs class.
		///</summary>
		public SpoSponsorStudEventArgs(SpoSponsorStudColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SpoSponsorStudColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SpoSponsorStudColumn" />
		public SpoSponsorStudColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SpoSponsorStud related events.
	///</summary>
	public delegate void SpoSponsorStudEventHandler(object sender, SpoSponsorStudEventArgs e);
	
	#region SpoSponsorStudComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SpoSponsorStudComparer : System.Collections.Generic.IComparer<SpoSponsorStud>
	{
		SpoSponsorStudColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SpoSponsorStudComparer"/> class.
        /// </summary>
		public SpoSponsorStudComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SpoSponsorStudComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SpoSponsorStudComparer(SpoSponsorStudColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SpoSponsorStud"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SpoSponsorStud"/> to compare.</param>
        /// <param name="b">The second <c>SpoSponsorStud</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SpoSponsorStud a, SpoSponsorStud b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SpoSponsorStud entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SpoSponsorStud a, SpoSponsorStud b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SpoSponsorStudColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SpoSponsorStudKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SpoSponsorStud"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SpoSponsorStudKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudKey class.
		/// </summary>
		public SpoSponsorStudKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudKey class.
		/// </summary>
		public SpoSponsorStudKey(SpoSponsorStudBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SpoSponsorStudId = entity.SpoSponsorStudId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SpoSponsorStudKey class.
		/// </summary>
		public SpoSponsorStudKey(System.Decimal _spoSponsorStudId)
		{
			#region Init Properties

			this.SpoSponsorStudId = _spoSponsorStudId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SpoSponsorStudBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SpoSponsorStudBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SpoSponsorStudId property
		private System.Decimal _spoSponsorStudId;
		
		/// <summary>
		/// Gets or sets the SpoSponsorStudId property.
		/// </summary>
		public System.Decimal SpoSponsorStudId
		{
			get { return _spoSponsorStudId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SpoSponsorStudId = value;
				
				_spoSponsorStudId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SpoSponsorStudId = ( values["SpoSponsorStudId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SpoSponsorStudId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SpoSponsorStudId", SpoSponsorStudId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SpoSponsorStudId: {0}{1}",
								SpoSponsorStudId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SpoSponsorStudColumn Enum
	
	/// <summary>
	/// Enumerate the SpoSponsorStud columns.
	/// </summary>
	[Serializable]
	public enum SpoSponsorStudColumn : int
	{
		/// <summary>
		/// SpoSponsorStudId : 
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_STUD_ID")]
		[ColumnEnum("SPO_SPONSOR_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SpoSponsorStudId = 1,
		/// <summary>
		/// SpoSponsorOfferId : 
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_OFFER_ID")]
		[ColumnEnum("SPO_SPONSOR_OFFER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SpoSponsorOfferId = 2,
		/// <summary>
		/// AsFacultyInfoId : NULL default=UNIV
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 3,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 4,
		/// <summary>
		/// ReqDate : طلب كفالة لطالب
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ReqDate = 5,
		/// <summary>
		/// EdAcadYearId : من عام
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 6,
		/// <summary>
		/// EdCodeSemesterId : من فصل
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 7,
		/// <summary>
		/// SpoPercentUpdt : XXXنوع الكفالة "نسبة /قيمةXXX"
		/// </summary>
		[EnumTextValue("SPO_PERCENT_UPDT")]
		[ColumnEnum("SPO_PERCENT_UPDT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoPercentUpdt = 8,
		/// <summary>
		/// SpoAmountUpdt : XXXنوع الكفالة "نسبة /قيمة"
		/// </summary>
		[EnumTextValue("SPO_AMOUNT_UPDT")]
		[ColumnEnum("SPO_AMOUNT_UPDT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoAmountUpdt = 9,
		/// <summary>
		/// Notes : قيمة او نسبة الكفالة بتتغير من عام -فصل لاخر
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 10,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 11,
		/// <summary>
		/// ApproveFlg : مؤشر اعتماد
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveFlg = 12,
		/// <summary>
		/// ApproveDate : تاريخ اعتماد
		/// </summary>
		[EnumTextValue("APPROVE_DATE")]
		[ColumnEnum("APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveDate = 13,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 14,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 15,
		/// <summary>
		/// AdmAppRegHistoryId : طلب كفالة للمتقدم
		/// </summary>
		[EnumTextValue("ADM_APP_REG_HISTORY_ID")]
		[ColumnEnum("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmAppRegHistoryId = 16,
		/// <summary>
		/// EdAcadYearToId : الى عام
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_TO_ID")]
		[ColumnEnum("ED_ACAD_YEAR_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearToId = 17,
		/// <summary>
		/// EdCodeSemesterToId : الى فصل
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TO_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterToId = 18,
		/// <summary>
		/// ExtndSemCount : مدالفصول الدراسية
		/// </summary>
		[EnumTextValue("EXTND_SEM_COUNT")]
		[ColumnEnum("EXTND_SEM_COUNT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExtndSemCount = 19
	}//End enum

	#endregion SpoSponsorStudColumn Enum

} // end namespace
