
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntPolicyGradingHdr.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_POLICY_GRADING_HDR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntPolicyGradingHdrBase : EntityBase, IEntPolicyGradingHdr, IEntityId<EntPolicyGradingHdrKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntPolicyGradingHdrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntPolicyGradingHdrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntPolicyGradingHdrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntPolicyGradingHdr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyGradingHdrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyGradingHdrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntPolicyGradingHdrBase"/> instance.
		///</summary>
		public EntPolicyGradingHdrBase()
		{
			this.entityData = new EntPolicyGradingHdrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntPolicyGradingHdrBase"/> instance.
		///</summary>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_descrEn"></param>
		///<param name="_descrAr"></param>
		///<param name="_edBylawId"></param>
		///<param name="_isGeneral"></param>
		///<param name="_edCodeGradingTypeId"></param>
		///<param name="_roundTotFlg">drya=1</param>
		public EntPolicyGradingHdrBase(System.Decimal _entPolicyGradingHdrId, System.String _descrEn, 
			System.String _descrAr, System.Decimal? _edBylawId, System.Decimal? _isGeneral, 
			System.Decimal _edCodeGradingTypeId, System.Decimal? _roundTotFlg)
		{
			this.entityData = new EntPolicyGradingHdrEntityData();
			this.backupData = null;

			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			this.DescrEn = _descrEn;
			this.DescrAr = _descrAr;
			this.EdBylawId = _edBylawId;
			this.IsGeneral = _isGeneral;
			this.EdCodeGradingTypeId = _edCodeGradingTypeId;
			this.RoundTotFlg = _roundTotFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntPolicyGradingHdr"/> instance.
		///</summary>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_descrEn"></param>
		///<param name="_descrAr"></param>
		///<param name="_edBylawId"></param>
		///<param name="_isGeneral"></param>
		///<param name="_edCodeGradingTypeId"></param>
		///<param name="_roundTotFlg">drya=1</param>
		public static EntPolicyGradingHdr CreateEntPolicyGradingHdr(System.Decimal _entPolicyGradingHdrId, System.String _descrEn, 
			System.String _descrAr, System.Decimal? _edBylawId, System.Decimal? _isGeneral, 
			System.Decimal _edCodeGradingTypeId, System.Decimal? _roundTotFlg)
		{
			EntPolicyGradingHdr newEntPolicyGradingHdr = new EntPolicyGradingHdr();
			newEntPolicyGradingHdr.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			newEntPolicyGradingHdr.DescrEn = _descrEn;
			newEntPolicyGradingHdr.DescrAr = _descrAr;
			newEntPolicyGradingHdr.EdBylawId = _edBylawId;
			newEntPolicyGradingHdr.IsGeneral = _isGeneral;
			newEntPolicyGradingHdr.EdCodeGradingTypeId = _edCodeGradingTypeId;
			newEntPolicyGradingHdr.RoundTotFlg = _roundTotFlg;
			return newEntPolicyGradingHdr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntPolicyGradingHdrId
		{
			get
			{
				return this.entityData.EntPolicyGradingHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingHdrId == value)
					return;
					
				OnColumnChanging(EntPolicyGradingHdrColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				this.entityData.EntPolicyGradingHdrId = value;
				this.EntityId.EntPolicyGradingHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingHdrColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				OnPropertyChanged("EntPolicyGradingHdrId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_POLICY_GRADING_HDR_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_POLICY_GRADING_HDR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntPolicyGradingHdrId
		{
			get { return this.entityData.OriginalEntPolicyGradingHdrId; }
			set { this.entityData.OriginalEntPolicyGradingHdrId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EntPolicyGradingHdrColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingHdrColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EntPolicyGradingHdrColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingHdrColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdBylawId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdBylawIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdBylawId
		{
			get
			{
				return this.entityData.EdBylawId; 
			}
			
			set
			{
				if (this.entityData.EdBylawId == value)
					return;
					
				OnColumnChanging(EntPolicyGradingHdrColumn.EdBylawId, this.entityData.EdBylawId);
				this.entityData.EdBylawId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingHdrColumn.EdBylawId, this.entityData.EdBylawId);
				OnPropertyChanged("EdBylawId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsGeneral property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsGeneralNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsGeneral
		{
			get
			{
				return this.entityData.IsGeneral; 
			}
			
			set
			{
				if (this.entityData.IsGeneral == value)
					return;
					
				OnColumnChanging(EntPolicyGradingHdrColumn.IsGeneral, this.entityData.IsGeneral);
				this.entityData.IsGeneral = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingHdrColumn.IsGeneral, this.entityData.IsGeneral);
				OnPropertyChanged("IsGeneral");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeGradingTypeId
		{
			get
			{
				return this.entityData.EdCodeGradingTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingTypeId == value)
					return;
					
				OnColumnChanging(EntPolicyGradingHdrColumn.EdCodeGradingTypeId, this.entityData.EdCodeGradingTypeId);
				this.entityData.EdCodeGradingTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingHdrColumn.EdCodeGradingTypeId, this.entityData.EdCodeGradingTypeId);
				OnPropertyChanged("EdCodeGradingTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RoundTotFlg property. 
		///		drya=1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRoundTotFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"drya=1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RoundTotFlg
		{
			get
			{
				return this.entityData.RoundTotFlg; 
			}
			
			set
			{
				if (this.entityData.RoundTotFlg == value)
					return;
					
				OnColumnChanging(EntPolicyGradingHdrColumn.RoundTotFlg, this.entityData.RoundTotFlg);
				this.entityData.RoundTotFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingHdrColumn.RoundTotFlg, this.entityData.RoundTotFlg);
				OnPropertyChanged("RoundTotFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return entityData.EdBylawIdSource; }
            set { entityData.EdBylawIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGradingType"/>.
		/// </summary>
		/// <value>The source EdCodeGradingType for EdCodeGradingTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGradingType EdCodeGradingTypeIdSource
      	{
            get { return entityData.EdCodeGradingTypeIdSource; }
            set { entityData.EdCodeGradingTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EntPolicyGradingDtl objects
		///	which are related to this object through the relation FK_ENT_POLICY_GRADING_DTL_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyGradingDtl> EntPolicyGradingDtlCollection
		{
			get { return entityData.EntPolicyGradingDtlCollection; }
			set { entityData.EntPolicyGradingDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppTransToCourse objects
		///	which are related to this object through the relation FK_ADM_APP_TRANS_TO_COURSE_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransToCourse> AdmAppTransToCourseCollection
		{
			get { return entityData.AdmAppTransToCourseCollection; }
			set { entityData.AdmAppTransToCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsCourseFrom objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRANS_COURSE_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsCourseFrom> EdStudIntTrnsCourseFromCollection
		{
			get { return entityData.EdStudIntTrnsCourseFromCollection; }
			set { entityData.EdStudIntTrnsCourseFromCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseReg objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get { return entityData.EdStudCourseRegCollection; }
			set { entityData.EdStudCourseRegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyCourseRepeat objects
		///	which are related to this object through the relation FK_ENT_POLICY_COURSE_REPEAT_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyCourseRepeat> EntPolicyCourseRepeatCollection
		{
			get { return entityData.EntPolicyCourseRepeatCollection; }
			set { entityData.EntPolicyCourseRepeatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegTemp objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_TEMP_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegTemp> EdStudCourseRegTempCollection
		{
			get { return entityData.EdStudCourseRegTempCollection; }
			set { entityData.EdStudCourseRegTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsCourseTo objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRNS_COURSE_TO_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsCourseTo> EdStudIntTrnsCourseToCollection
		{
			get { return entityData.EdStudIntTrnsCourseToCollection; }
			set { entityData.EdStudIntTrnsCourseToCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyGradingCourse objects
		///	which are related to this object through the relation FK_ENT_POLICY_GRADING_COURSE_ENT_POLICY_GRADING_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyGradingCourse> EntPolicyGradingCourseCollection
		{
			get { return entityData.EntPolicyGradingCourseCollection; }
			set { entityData.EntPolicyGradingCourseCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_POLICY_GRADING_HDR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_POLICY_GRADING_HDR_ID", "DESCR_EN", "DESCR_AR", "ED_BYLAW_ID", "IS_GENERAL", "ED_CODE_GRADING_TYPE_ID", "ROUND_TOT_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntPolicyGradingHdrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntPolicyGradingHdr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntPolicyGradingHdr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntPolicyGradingHdr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntPolicyGradingHdr Entity 
		///</summary>
		protected virtual EntPolicyGradingHdr Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntPolicyGradingHdr copy = new EntPolicyGradingHdr();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
					copy.OriginalEntPolicyGradingHdrId = this.OriginalEntPolicyGradingHdrId;
				copy.DescrEn = this.DescrEn;
				copy.DescrAr = this.DescrAr;
				copy.EdBylawId = this.EdBylawId;
				copy.IsGeneral = this.IsGeneral;
				copy.EdCodeGradingTypeId = this.EdCodeGradingTypeId;
				copy.RoundTotFlg = this.RoundTotFlg;
			
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				copy.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				copy.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCodeGradingTypeIdSource != null && existingCopies.Contains(this.EdCodeGradingTypeIdSource))
				copy.EdCodeGradingTypeIdSource = existingCopies[this.EdCodeGradingTypeIdSource] as EdCodeGradingType;
			else
				copy.EdCodeGradingTypeIdSource = MakeCopyOf(this.EdCodeGradingTypeIdSource, existingCopies) as EdCodeGradingType;
		
			//deep copy nested objects
			copy.EntPolicyGradingDtlCollection = (TList<EntPolicyGradingDtl>) MakeCopyOf(this.EntPolicyGradingDtlCollection, existingCopies); 
			copy.AdmAppTransToCourseCollection = (TList<AdmAppTransToCourse>) MakeCopyOf(this.AdmAppTransToCourseCollection, existingCopies); 
			copy.EdStudIntTrnsCourseFromCollection = (TList<EdStudIntTrnsCourseFrom>) MakeCopyOf(this.EdStudIntTrnsCourseFromCollection, existingCopies); 
			copy.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			copy.EntPolicyCourseRepeatCollection = (TList<EntPolicyCourseRepeat>) MakeCopyOf(this.EntPolicyCourseRepeatCollection, existingCopies); 
			copy.EdStudCourseRegTempCollection = (TList<EdStudCourseRegTemp>) MakeCopyOf(this.EdStudCourseRegTempCollection, existingCopies); 
			copy.EdStudIntTrnsCourseToCollection = (TList<EdStudIntTrnsCourseTo>) MakeCopyOf(this.EdStudIntTrnsCourseToCollection, existingCopies); 
			copy.EntPolicyGradingCourseCollection = (TList<EntPolicyGradingCourse>) MakeCopyOf(this.EntPolicyGradingCourseCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntPolicyGradingHdr Entity 
		///</summary>
		public virtual EntPolicyGradingHdr Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntPolicyGradingHdr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntPolicyGradingHdr DeepCopy()
		{
			return EntityHelper.Clone<EntPolicyGradingHdr>(this as EntPolicyGradingHdr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntPolicyGradingHdrEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntPolicyGradingHdrEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntPolicyGradingHdrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntPolicyGradingHdrColumn column)
		{
			switch(column)
			{
					case EntPolicyGradingHdrColumn.EntPolicyGradingHdrId:
					return entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
					case EntPolicyGradingHdrColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EntPolicyGradingHdrColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EntPolicyGradingHdrColumn.EdBylawId:
					return entityData.EdBylawId != _originalData.EdBylawId;
					case EntPolicyGradingHdrColumn.IsGeneral:
					return entityData.IsGeneral != _originalData.IsGeneral;
					case EntPolicyGradingHdrColumn.EdCodeGradingTypeId:
					return entityData.EdCodeGradingTypeId != _originalData.EdCodeGradingTypeId;
					case EntPolicyGradingHdrColumn.RoundTotFlg:
					return entityData.RoundTotFlg != _originalData.RoundTotFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntPolicyGradingHdrColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.EdBylawId != _originalData.EdBylawId;
			result = result || entityData.IsGeneral != _originalData.IsGeneral;
			result = result || entityData.EdCodeGradingTypeId != _originalData.EdCodeGradingTypeId;
			result = result || entityData.RoundTotFlg != _originalData.RoundTotFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EntPolicyGradingHdr Entity with the original data.
		///</summary>
		public EntPolicyGradingHdr GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntPolicyGradingHdr(
				_originalData.EntPolicyGradingHdrId,
				_originalData.DescrEn,
				_originalData.DescrAr,
				_originalData.EdBylawId,
				_originalData.IsGeneral,
				_originalData.EdCodeGradingTypeId,
				_originalData.RoundTotFlg
				);
				
			return (EntPolicyGradingHdr)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntPolicyGradingHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntPolicyGradingHdrBase)
				return ValueEquals(this, (EntPolicyGradingHdrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntPolicyGradingHdrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntPolicyGradingHdrId.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					((this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString()).GetHashCode() ^ 
					((this.IsGeneral == null) ? string.Empty : this.IsGeneral.ToString()).GetHashCode() ^ 
					this.EdCodeGradingTypeId.GetHashCode() ^ 
					((this.RoundTotFlg == null) ? string.Empty : this.RoundTotFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntPolicyGradingHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntPolicyGradingHdrBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntPolicyGradingHdrBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntPolicyGradingHdrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntPolicyGradingHdrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntPolicyGradingHdrBase Object1, EntPolicyGradingHdrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntPolicyGradingHdrId != Object2.EntPolicyGradingHdrId)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if ( Object1.EdBylawId != null && Object2.EdBylawId != null )
			{
				if (Object1.EdBylawId != Object2.EdBylawId)
					equal = false;
			}
			else if (Object1.EdBylawId == null ^ Object2.EdBylawId == null )
			{
				equal = false;
			}
			if ( Object1.IsGeneral != null && Object2.IsGeneral != null )
			{
				if (Object1.IsGeneral != Object2.IsGeneral)
					equal = false;
			}
			else if (Object1.IsGeneral == null ^ Object2.IsGeneral == null )
			{
				equal = false;
			}
			if (Object1.EdCodeGradingTypeId != Object2.EdCodeGradingTypeId)
				equal = false;
			if ( Object1.RoundTotFlg != null && Object2.RoundTotFlg != null )
			{
				if (Object1.RoundTotFlg != Object2.RoundTotFlg)
					equal = false;
			}
			else if (Object1.RoundTotFlg == null ^ Object2.RoundTotFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntPolicyGradingHdrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntPolicyGradingHdrComparer GetComparer()
        {
            return new EntPolicyGradingHdrComparer();
        }
        */

        // Comparer delegates back to EntPolicyGradingHdr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntPolicyGradingHdr rhs, EntPolicyGradingHdrColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntPolicyGradingHdrColumn.EntPolicyGradingHdrId:
            		return this.EntPolicyGradingHdrId.CompareTo(rhs.EntPolicyGradingHdrId);
            		
            		                 
            	
            	
            	case EntPolicyGradingHdrColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EntPolicyGradingHdrColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EntPolicyGradingHdrColumn.EdBylawId:
            		return this.EdBylawId.Value.CompareTo(rhs.EdBylawId.Value);
            		
            		                 
            	
            	
            	case EntPolicyGradingHdrColumn.IsGeneral:
            		return this.IsGeneral.Value.CompareTo(rhs.IsGeneral.Value);
            		
            		                 
            	
            	
            	case EntPolicyGradingHdrColumn.EdCodeGradingTypeId:
            		return this.EdCodeGradingTypeId.CompareTo(rhs.EdCodeGradingTypeId);
            		
            		                 
            	
            	
            	case EntPolicyGradingHdrColumn.RoundTotFlg:
            		return this.RoundTotFlg.Value.CompareTo(rhs.RoundTotFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntPolicyGradingHdrKey> Members
		
		// member variable for the EntityId property
		private EntPolicyGradingHdrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntPolicyGradingHdrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntPolicyGradingHdrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntPolicyGradingHdr")
					.Append("|").Append( this.EntPolicyGradingHdrId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- EntPolicyGradingHdrId: {0}{7}- DescrEn: {1}{7}- DescrAr: {2}{7}- EdBylawId: {3}{7}- IsGeneral: {4}{7}- EdCodeGradingTypeId: {5}{7}- RoundTotFlg: {6}{7}{9}", 
				this.EntPolicyGradingHdrId,
				this.DescrEn,
				this.DescrAr,
				(this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString(),
				(this.IsGeneral == null) ? string.Empty : this.IsGeneral.ToString(),
				this.EdCodeGradingTypeId,
				(this.RoundTotFlg == null) ? string.Empty : this.RoundTotFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_POLICY_GRADING_HDR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntPolicyGradingHdrEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_POLICY_GRADING_HDR_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_POLICY_GRADING_HDR"</remarks>
		public System.Decimal EntPolicyGradingHdrId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntPolicyGradingHdrId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// ED_BYLAW_ID : 
		/// </summary>
		public System.Decimal?		  EdBylawId = null;
		
		/// <summary>
		/// IS_GENERAL : 
		/// </summary>
		public System.Decimal?		  IsGeneral = null;
		
		/// <summary>
		/// ED_CODE_GRADING_TYPE_ID : 
		/// </summary>
		public System.Decimal		  EdCodeGradingTypeId = 0.0m;
		
		/// <summary>
		/// ROUND_TOT_FLG : drya=1
		/// </summary>
		public System.Decimal?		  RoundTotFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdBylaw _edBylawIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return this._edBylawIdSource; }
            set { this._edBylawIdSource = value; }
      	}
		private EdCodeGradingType _edCodeGradingTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGradingType"/>.
		/// </summary>
		/// <value>The source EdCodeGradingType for EdCodeGradingTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGradingType EdCodeGradingTypeIdSource
      	{
            get { return this._edCodeGradingTypeIdSource; }
            set { this._edCodeGradingTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EntPolicyGradingDtlCollection
		
		private TList<EntPolicyGradingDtl> _entPolicyGradingDtlEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyGradingDtlEntPolicyGradingHdrId
		/// </summary>
		
		public TList<EntPolicyGradingDtl> EntPolicyGradingDtlCollection
		{
			get
			{
				if (_entPolicyGradingDtlEntPolicyGradingHdrId == null)
				{
				_entPolicyGradingDtlEntPolicyGradingHdrId = new TList<EntPolicyGradingDtl>();
				}
	
				return _entPolicyGradingDtlEntPolicyGradingHdrId;
			}
			set { _entPolicyGradingDtlEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#region AdmAppTransToCourseCollection
		
		private TList<AdmAppTransToCourse> _admAppTransToCourseEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransToCourseEntPolicyGradingHdrId
		/// </summary>
		
		public TList<AdmAppTransToCourse> AdmAppTransToCourseCollection
		{
			get
			{
				if (_admAppTransToCourseEntPolicyGradingHdrId == null)
				{
				_admAppTransToCourseEntPolicyGradingHdrId = new TList<AdmAppTransToCourse>();
				}
	
				return _admAppTransToCourseEntPolicyGradingHdrId;
			}
			set { _admAppTransToCourseEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsCourseFromCollection
		
		private TList<EdStudIntTrnsCourseFrom> _edStudIntTrnsCourseFromEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsCourseFromEntPolicyGradingHdrId
		/// </summary>
		
		public TList<EdStudIntTrnsCourseFrom> EdStudIntTrnsCourseFromCollection
		{
			get
			{
				if (_edStudIntTrnsCourseFromEntPolicyGradingHdrId == null)
				{
				_edStudIntTrnsCourseFromEntPolicyGradingHdrId = new TList<EdStudIntTrnsCourseFrom>();
				}
	
				return _edStudIntTrnsCourseFromEntPolicyGradingHdrId;
			}
			set { _edStudIntTrnsCourseFromEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#region EdStudCourseRegCollection
		
		private TList<EdStudCourseReg> _edStudCourseRegEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegEntPolicyGradingHdrId
		/// </summary>
		
		public TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get
			{
				if (_edStudCourseRegEntPolicyGradingHdrId == null)
				{
				_edStudCourseRegEntPolicyGradingHdrId = new TList<EdStudCourseReg>();
				}
	
				return _edStudCourseRegEntPolicyGradingHdrId;
			}
			set { _edStudCourseRegEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#region EntPolicyCourseRepeatCollection
		
		private TList<EntPolicyCourseRepeat> _entPolicyCourseRepeatEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyCourseRepeatEntPolicyGradingHdrId
		/// </summary>
		
		public TList<EntPolicyCourseRepeat> EntPolicyCourseRepeatCollection
		{
			get
			{
				if (_entPolicyCourseRepeatEntPolicyGradingHdrId == null)
				{
				_entPolicyCourseRepeatEntPolicyGradingHdrId = new TList<EntPolicyCourseRepeat>();
				}
	
				return _entPolicyCourseRepeatEntPolicyGradingHdrId;
			}
			set { _entPolicyCourseRepeatEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#region EdStudCourseRegTempCollection
		
		private TList<EdStudCourseRegTemp> _edStudCourseRegTempEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegTempEntPolicyGradingHdrId
		/// </summary>
		
		public TList<EdStudCourseRegTemp> EdStudCourseRegTempCollection
		{
			get
			{
				if (_edStudCourseRegTempEntPolicyGradingHdrId == null)
				{
				_edStudCourseRegTempEntPolicyGradingHdrId = new TList<EdStudCourseRegTemp>();
				}
	
				return _edStudCourseRegTempEntPolicyGradingHdrId;
			}
			set { _edStudCourseRegTempEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsCourseToCollection
		
		private TList<EdStudIntTrnsCourseTo> _edStudIntTrnsCourseToEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsCourseToEntPolicyGradingHdrId
		/// </summary>
		
		public TList<EdStudIntTrnsCourseTo> EdStudIntTrnsCourseToCollection
		{
			get
			{
				if (_edStudIntTrnsCourseToEntPolicyGradingHdrId == null)
				{
				_edStudIntTrnsCourseToEntPolicyGradingHdrId = new TList<EdStudIntTrnsCourseTo>();
				}
	
				return _edStudIntTrnsCourseToEntPolicyGradingHdrId;
			}
			set { _edStudIntTrnsCourseToEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#region EntPolicyGradingCourseCollection
		
		private TList<EntPolicyGradingCourse> _entPolicyGradingCourseEntPolicyGradingHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyGradingCourseEntPolicyGradingHdrId
		/// </summary>
		
		public TList<EntPolicyGradingCourse> EntPolicyGradingCourseCollection
		{
			get
			{
				if (_entPolicyGradingCourseEntPolicyGradingHdrId == null)
				{
				_entPolicyGradingCourseEntPolicyGradingHdrId = new TList<EntPolicyGradingCourse>();
				}
	
				return _entPolicyGradingCourseEntPolicyGradingHdrId;
			}
			set { _entPolicyGradingCourseEntPolicyGradingHdrId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntPolicyGradingHdrEntityData _tmp = new EntPolicyGradingHdrEntityData();
						
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.OriginalEntPolicyGradingHdrId = this.OriginalEntPolicyGradingHdrId;
			
			_tmp.DescrEn = this.DescrEn;
			_tmp.DescrAr = this.DescrAr;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.IsGeneral = this.IsGeneral;
			_tmp.EdCodeGradingTypeId = this.EdCodeGradingTypeId;
			_tmp.RoundTotFlg = this.RoundTotFlg;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null)
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource) as EdBylaw;
			if (this.EdCodeGradingTypeIdSource != null)
				_tmp.EdCodeGradingTypeIdSource = MakeCopyOf(this.EdCodeGradingTypeIdSource) as EdCodeGradingType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._entPolicyGradingDtlEntPolicyGradingHdrId != null)
				_tmp.EntPolicyGradingDtlCollection = (TList<EntPolicyGradingDtl>) MakeCopyOf(this.EntPolicyGradingDtlCollection); 
			if (this._admAppTransToCourseEntPolicyGradingHdrId != null)
				_tmp.AdmAppTransToCourseCollection = (TList<AdmAppTransToCourse>) MakeCopyOf(this.AdmAppTransToCourseCollection); 
			if (this._edStudIntTrnsCourseFromEntPolicyGradingHdrId != null)
				_tmp.EdStudIntTrnsCourseFromCollection = (TList<EdStudIntTrnsCourseFrom>) MakeCopyOf(this.EdStudIntTrnsCourseFromCollection); 
			if (this._edStudCourseRegEntPolicyGradingHdrId != null)
				_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection); 
			if (this._entPolicyCourseRepeatEntPolicyGradingHdrId != null)
				_tmp.EntPolicyCourseRepeatCollection = (TList<EntPolicyCourseRepeat>) MakeCopyOf(this.EntPolicyCourseRepeatCollection); 
			if (this._edStudCourseRegTempEntPolicyGradingHdrId != null)
				_tmp.EdStudCourseRegTempCollection = (TList<EdStudCourseRegTemp>) MakeCopyOf(this.EdStudCourseRegTempCollection); 
			if (this._edStudIntTrnsCourseToEntPolicyGradingHdrId != null)
				_tmp.EdStudIntTrnsCourseToCollection = (TList<EdStudIntTrnsCourseTo>) MakeCopyOf(this.EdStudIntTrnsCourseToCollection); 
			if (this._entPolicyGradingCourseEntPolicyGradingHdrId != null)
				_tmp.EntPolicyGradingCourseCollection = (TList<EntPolicyGradingCourse>) MakeCopyOf(this.EntPolicyGradingCourseCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntPolicyGradingHdrEntityData _tmp = new EntPolicyGradingHdrEntityData();
						
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.OriginalEntPolicyGradingHdrId = this.OriginalEntPolicyGradingHdrId;
			
			_tmp.DescrEn = this.DescrEn;
			_tmp.DescrAr = this.DescrAr;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.IsGeneral = this.IsGeneral;
			_tmp.EdCodeGradingTypeId = this.EdCodeGradingTypeId;
			_tmp.RoundTotFlg = this.RoundTotFlg;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				_tmp.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCodeGradingTypeIdSource != null && existingCopies.Contains(this.EdCodeGradingTypeIdSource))
				_tmp.EdCodeGradingTypeIdSource = existingCopies[this.EdCodeGradingTypeIdSource] as EdCodeGradingType;
			else
				_tmp.EdCodeGradingTypeIdSource = MakeCopyOf(this.EdCodeGradingTypeIdSource, existingCopies) as EdCodeGradingType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EntPolicyGradingDtlCollection = (TList<EntPolicyGradingDtl>) MakeCopyOf(this.EntPolicyGradingDtlCollection, existingCopies); 
			_tmp.AdmAppTransToCourseCollection = (TList<AdmAppTransToCourse>) MakeCopyOf(this.AdmAppTransToCourseCollection, existingCopies); 
			_tmp.EdStudIntTrnsCourseFromCollection = (TList<EdStudIntTrnsCourseFrom>) MakeCopyOf(this.EdStudIntTrnsCourseFromCollection, existingCopies); 
			_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			_tmp.EntPolicyCourseRepeatCollection = (TList<EntPolicyCourseRepeat>) MakeCopyOf(this.EntPolicyCourseRepeatCollection, existingCopies); 
			_tmp.EdStudCourseRegTempCollection = (TList<EdStudCourseRegTemp>) MakeCopyOf(this.EdStudCourseRegTempCollection, existingCopies); 
			_tmp.EdStudIntTrnsCourseToCollection = (TList<EdStudIntTrnsCourseTo>) MakeCopyOf(this.EdStudIntTrnsCourseToCollection, existingCopies); 
			_tmp.EntPolicyGradingCourseCollection = (TList<EntPolicyGradingCourse>) MakeCopyOf(this.EntPolicyGradingCourseCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntPolicyGradingHdrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntPolicyGradingHdrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntPolicyGradingHdrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntPolicyGradingHdrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntPolicyGradingHdrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntPolicyGradingHdrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntPolicyGradingHdrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntPolicyGradingHdrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntPolicyGradingHdrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntPolicyGradingHdr"/> object.
	/// </remarks>
	public class EntPolicyGradingHdrEventArgs : System.EventArgs
	{
		private EntPolicyGradingHdrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyGradingHdrEventArgs class.
		///</summary>
		public EntPolicyGradingHdrEventArgs(EntPolicyGradingHdrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyGradingHdrEventArgs class.
		///</summary>
		public EntPolicyGradingHdrEventArgs(EntPolicyGradingHdrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntPolicyGradingHdrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntPolicyGradingHdrColumn" />
		public EntPolicyGradingHdrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntPolicyGradingHdr related events.
	///</summary>
	public delegate void EntPolicyGradingHdrEventHandler(object sender, EntPolicyGradingHdrEventArgs e);
	
	#region EntPolicyGradingHdrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntPolicyGradingHdrComparer : System.Collections.Generic.IComparer<EntPolicyGradingHdr>
	{
		EntPolicyGradingHdrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyGradingHdrComparer"/> class.
        /// </summary>
		public EntPolicyGradingHdrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyGradingHdrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntPolicyGradingHdrComparer(EntPolicyGradingHdrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntPolicyGradingHdr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntPolicyGradingHdr"/> to compare.</param>
        /// <param name="b">The second <c>EntPolicyGradingHdr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntPolicyGradingHdr a, EntPolicyGradingHdr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntPolicyGradingHdr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntPolicyGradingHdr a, EntPolicyGradingHdr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntPolicyGradingHdrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntPolicyGradingHdrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntPolicyGradingHdr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntPolicyGradingHdrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrKey class.
		/// </summary>
		public EntPolicyGradingHdrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrKey class.
		/// </summary>
		public EntPolicyGradingHdrKey(EntPolicyGradingHdrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntPolicyGradingHdrId = entity.EntPolicyGradingHdrId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingHdrKey class.
		/// </summary>
		public EntPolicyGradingHdrKey(System.Decimal _entPolicyGradingHdrId)
		{
			#region Init Properties

			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntPolicyGradingHdrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntPolicyGradingHdrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntPolicyGradingHdrId property
		private System.Decimal _entPolicyGradingHdrId;
		
		/// <summary>
		/// Gets or sets the EntPolicyGradingHdrId property.
		/// </summary>
		public System.Decimal EntPolicyGradingHdrId
		{
			get { return _entPolicyGradingHdrId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntPolicyGradingHdrId = value;
				
				_entPolicyGradingHdrId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntPolicyGradingHdrId = ( values["EntPolicyGradingHdrId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntPolicyGradingHdrId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntPolicyGradingHdrId", EntPolicyGradingHdrId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntPolicyGradingHdrId: {0}{1}",
								EntPolicyGradingHdrId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntPolicyGradingHdrColumn Enum
	
	/// <summary>
	/// Enumerate the EntPolicyGradingHdr columns.
	/// </summary>
	[Serializable]
	public enum EntPolicyGradingHdrColumn : int
	{
		/// <summary>
		/// EntPolicyGradingHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_HDR_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntPolicyGradingHdrId = 1,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrEn = 2,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrAr = 3,
		/// <summary>
		/// EdBylawId : 
		/// </summary>
		[EnumTextValue("ED_BYLAW_ID")]
		[ColumnEnum("ED_BYLAW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdBylawId = 4,
		/// <summary>
		/// IsGeneral : 
		/// </summary>
		[EnumTextValue("IS_GENERAL")]
		[ColumnEnum("IS_GENERAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsGeneral = 5,
		/// <summary>
		/// EdCodeGradingTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_TYPE_ID")]
		[ColumnEnum("ED_CODE_GRADING_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeGradingTypeId = 6,
		/// <summary>
		/// RoundTotFlg : drya=1
		/// </summary>
		[EnumTextValue("ROUND_TOT_FLG")]
		[ColumnEnum("ROUND_TOT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RoundTotFlg = 7
	}//End enum

	#endregion EntPolicyGradingHdrColumn Enum

} // end namespace
